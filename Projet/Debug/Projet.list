
Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012830  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d00  08012a00  08012a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014700  08014700  00016094  2**0
                  CONTENTS
  4 .ARM          00000008  08014700  08014700  00015700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014708  08014708  00016094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014708  08014708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801470c  0801470c  0001570c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08014710  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b68  20000094  080147a4  00016094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bfc  080147a4  00016bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00016094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038e83  00000000  00000000  000160c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000087fa  00000000  00000000  0004ef47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002eb8  00000000  00000000  00057748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000023ef  00000000  00000000  0005a600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000345bb  00000000  00000000  0005c9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00042374  00000000  00000000  00090faa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ea8b  00000000  00000000  000d331e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f1da9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c680  00000000  00000000  001f1dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001fe46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080129e8 	.word	0x080129e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	080129e8 	.word	0x080129e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <MX_ADC1_Init+0xa0>)
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000602:	f003 ffc7 	bl	8004594 <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800060c:	f001 fd5c 	bl	80020c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000622:	f003 fffb 	bl	800461c <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800062c:	f001 fd4c 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000b0 	.word	0x200000b0
 800063c:	40012000 	.word	0x40012000
 8000640:	0f000001 	.word	0x0f000001

08000644 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <MX_ADC3_Init+0x9c>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC3_Init+0x98>)
 800065e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000662:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_ADC3_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <MX_ADC3_Init+0xa0>)
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ADC3_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a6:	f003 ff75 	bl	8004594 <HAL_ADC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006b0:	f001 fd0a 	bl	80020c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b4:	2306      	movs	r3, #6
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006c6:	f003 ffa9 	bl	800461c <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006d0:	f001 fcfa 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000f8 	.word	0x200000f8
 80006e0:	40012200 	.word	0x40012200
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	@ 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d124      	bne.n	8000754 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000714:	6453      	str	r3, [r2, #68]	@ 0x44
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	481a      	ldr	r0, [pc, #104]	@ (80007b8 <HAL_ADC_MspInit+0xd0>)
 800074e:	f005 f9fd 	bl	8005b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000752:	e029      	b.n	80007a8 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <HAL_ADC_MspInit+0xd4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d124      	bne.n	80007a8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000768:	6453      	str	r3, [r2, #68]	@ 0x44
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800078e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <HAL_ADC_MspInit+0xd8>)
 80007a4:	f005 f9d2 	bl	8005b4c <HAL_GPIO_Init>
}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	@ 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40012000 	.word	0x40012000
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40012200 	.word	0x40012200
 80007c0:	40021400 	.word	0x40021400

080007c4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <MX_DAC_Init+0x50>)
 80007d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007d8:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007da:	f004 fa51 	bl	8004c80 <HAL_DAC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007e4:	f001 fc70 	bl	80020c8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007f8:	f004 fac8 	bl	8004d8c <HAL_DAC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000802:	f001 fc61 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000140 	.word	0x20000140
 8000814:	40007400 	.word	0x40007400

08000818 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_DAC_MspInit+0x84>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d12b      	bne.n	8000892 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000840:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000844:	6413      	str	r3, [r2, #64]	@ 0x40
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800086a:	2310      	movs	r3, #16
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <HAL_DAC_MspInit+0x8c>)
 800087e:	f005 f965 	bl	8005b4c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	2036      	movs	r0, #54	@ 0x36
 8000888:	f004 f9d0 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800088c:	2036      	movs	r0, #54	@ 0x36
 800088e:	f004 f9e9 	bl	8004c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40007400 	.word	0x40007400
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ae:	4a16      	ldr	r2, [pc, #88]	@ (8000908 <MX_DMA2D_Init+0x60>)
 80008b0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008de:	f004 fd99 	bl	8005414 <HAL_DMA2D_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008e8:	f001 fbee 	bl	80020c8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80008ec:	2101      	movs	r1, #1
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_DMA2D_Init+0x5c>)
 80008f0:	f004 fffe 	bl	80058f0 <HAL_DMA2D_ConfigLayer>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80008fa:	f001 fbe5 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000154 	.word	0x20000154
 8000908:	4002b000 	.word	0x4002b000

0800090c <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	@ (8000950 <HAL_DMA2D_MspInit+0x44>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d113      	bne.n	8000946 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800091e:	4b0d      	ldr	r3, [pc, #52]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 8000924:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b0a      	ldr	r3, [pc, #40]	@ (8000954 <HAL_DMA2D_MspInit+0x48>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	2105      	movs	r1, #5
 800093a:	205a      	movs	r0, #90	@ 0x5a
 800093c:	f004 f976 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000940:	205a      	movs	r0, #90	@ 0x5a
 8000942:	f004 f98f 	bl	8004c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000946:	bf00      	nop
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	4002b000 	.word	0x4002b000
 8000954:	40023800 	.word	0x40023800

08000958 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000970:	4b1f      	ldr	r3, [pc, #124]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000972:	4a20      	ldr	r2, [pc, #128]	@ (80009f4 <MX_FMC_Init+0x9c>)
 8000974:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000976:	4b1e      	ldr	r3, [pc, #120]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000978:	2200      	movs	r2, #0
 800097a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <MX_FMC_Init+0x98>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000982:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000984:	2204      	movs	r2, #4
 8000986:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <MX_FMC_Init+0x98>)
 800098a:	2210      	movs	r2, #16
 800098c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000990:	2240      	movs	r2, #64	@ 0x40
 8000992:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_FMC_Init+0x98>)
 8000996:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800099a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_FMC_Init+0x98>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009a4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009a8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009aa:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009ac:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80009b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009bc:	2307      	movs	r3, #7
 80009be:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009c0:	2304      	movs	r3, #4
 80009c2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009c4:	2307      	movs	r3, #7
 80009c6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009c8:	2303      	movs	r3, #3
 80009ca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	4619      	mov	r1, r3
 80009d8:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_FMC_Init+0x98>)
 80009da:	f009 f8c7 	bl	8009b6c <HAL_SDRAM_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80009e4:	f001 fb70 	bl	80020c8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80009e8:	bf00      	nop
 80009ea:	3720      	adds	r7, #32
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20000194 	.word	0x20000194
 80009f4:	a0000140 	.word	0xa0000140

080009f8 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b086      	sub	sp, #24
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a0c:	4b3a      	ldr	r3, [pc, #232]	@ (8000af8 <HAL_FMC_MspInit+0x100>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d16d      	bne.n	8000af0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a14:	4b38      	ldr	r3, [pc, #224]	@ (8000af8 <HAL_FMC_MspInit+0x100>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a1a:	4b38      	ldr	r3, [pc, #224]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a1e:	4a37      	ldr	r2, [pc, #220]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a20:	f043 0301 	orr.w	r3, r3, #1
 8000a24:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a26:	4b35      	ldr	r3, [pc, #212]	@ (8000afc <HAL_FMC_MspInit+0x104>)
 8000a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a2a:	f003 0301 	and.w	r3, r3, #1
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a32:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a36:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a40:	2303      	movs	r3, #3
 8000a42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a44:	230c      	movs	r3, #12
 8000a46:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a48:	1d3b      	adds	r3, r7, #4
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	482c      	ldr	r0, [pc, #176]	@ (8000b00 <HAL_FMC_MspInit+0x108>)
 8000a4e:	f005 f87d 	bl	8005b4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a52:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a56:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a64:	230c      	movs	r3, #12
 8000a66:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4825      	ldr	r0, [pc, #148]	@ (8000b04 <HAL_FMC_MspInit+0x10c>)
 8000a6e:	f005 f86d 	bl	8005b4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a72:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000a76:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a84:	230c      	movs	r3, #12
 8000a86:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	481e      	ldr	r0, [pc, #120]	@ (8000b08 <HAL_FMC_MspInit+0x110>)
 8000a8e:	f005 f85d 	bl	8005b4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000a92:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000a96:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa4:	230c      	movs	r3, #12
 8000aa6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aa8:	1d3b      	adds	r3, r7, #4
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4817      	ldr	r0, [pc, #92]	@ (8000b0c <HAL_FMC_MspInit+0x114>)
 8000aae:	f005 f84d 	bl	8005b4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000ab2:	2328      	movs	r3, #40	@ 0x28
 8000ab4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abe:	2303      	movs	r3, #3
 8000ac0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac2:	230c      	movs	r3, #12
 8000ac4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4811      	ldr	r0, [pc, #68]	@ (8000b10 <HAL_FMC_MspInit+0x118>)
 8000acc:	f005 f83e 	bl	8005b4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000ad0:	2308      	movs	r3, #8
 8000ad2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000adc:	2303      	movs	r3, #3
 8000ade:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ae0:	230c      	movs	r3, #12
 8000ae2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000ae4:	1d3b      	adds	r3, r7, #4
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480a      	ldr	r0, [pc, #40]	@ (8000b14 <HAL_FMC_MspInit+0x11c>)
 8000aea:	f005 f82f 	bl	8005b4c <HAL_GPIO_Init>
 8000aee:	e000      	b.n	8000af2 <HAL_FMC_MspInit+0xfa>
    return;
 8000af0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001c8 	.word	0x200001c8
 8000afc:	40023800 	.word	0x40023800
 8000b00:	40021000 	.word	0x40021000
 8000b04:	40021800 	.word	0x40021800
 8000b08:	40020c00 	.word	0x40020c00
 8000b0c:	40021400 	.word	0x40021400
 8000b10:	40021c00 	.word	0x40021c00
 8000b14:	40020800 	.word	0x40020800

08000b18 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b20:	f7ff ff6a 	bl	80009f8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	4a06      	ldr	r2, [pc, #24]	@ (8000b5c <vApplicationGetIdleTaskMemory+0x30>)
 8000b42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2280      	movs	r2, #128	@ 0x80
 8000b48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b4a:	bf00      	nop
 8000b4c:	3714      	adds	r7, #20
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	200001dc 	.word	0x200001dc
 8000b5c:	2000027c 	.word	0x2000027c

08000b60 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b60:	b5b0      	push	{r4, r5, r7, lr}
 8000b62:	b098      	sub	sp, #96	@ 0x60
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of Mutex_Affichage */
  osMutexDef(Mutex_Affichage);
 8000b66:	2300      	movs	r3, #0
 8000b68:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  Mutex_AffichageHandle = osMutexCreate(osMutex(Mutex_Affichage));
 8000b6e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b72:	4618      	mov	r0, r3
 8000b74:	f00e fbce 	bl	800f314 <osMutexCreate>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bf4 <MX_FREERTOS_Init+0x94>)
 8000b7c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000bf8 <MX_FREERTOS_Init+0x98>)
 8000b80:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000b84:	461d      	mov	r5, r3
 8000b86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b92:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f00e fb5b 	bl	800f254 <osThreadCreate>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a16      	ldr	r2, [pc, #88]	@ (8000bfc <MX_FREERTOS_Init+0x9c>)
 8000ba2:	6013      	str	r3, [r2, #0]

  /* definition and creation of deplacement */
  osThreadDef(deplacement, deplacement_fonction, osPriorityRealtime, 0, 1024);
 8000ba4:	4b16      	ldr	r3, [pc, #88]	@ (8000c00 <MX_FREERTOS_Init+0xa0>)
 8000ba6:	f107 0420 	add.w	r4, r7, #32
 8000baa:	461d      	mov	r5, r3
 8000bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bb0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bb4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  deplacementHandle = osThreadCreate(osThread(deplacement), NULL);
 8000bb8:	f107 0320 	add.w	r3, r7, #32
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f00e fb48 	bl	800f254 <osThreadCreate>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <MX_FREERTOS_Init+0xa4>)
 8000bc8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Display */
  osThreadDef(Display, Display_fonction, osPriorityNormal, 0, 1024);
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_FREERTOS_Init+0xa8>)
 8000bcc:	1d3c      	adds	r4, r7, #4
 8000bce:	461d      	mov	r5, r3
 8000bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayHandle = osThreadCreate(osThread(Display), NULL);
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f00e fb37 	bl	800f254 <osThreadCreate>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a08      	ldr	r2, [pc, #32]	@ (8000c0c <MX_FREERTOS_Init+0xac>)
 8000bea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bec:	bf00      	nop
 8000bee:	3760      	adds	r7, #96	@ 0x60
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8000bf4:	200001d8 	.word	0x200001d8
 8000bf8:	08012a0c 	.word	0x08012a0c
 8000bfc:	200001cc 	.word	0x200001cc
 8000c00:	08012a34 	.word	0x08012a34
 8000c04:	200001d0 	.word	0x200001d0
 8000c08:	08012a58 	.word	0x08012a58
 8000c0c:	200001d4 	.word	0x200001d4

08000c10 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000c18:	2064      	movs	r0, #100	@ 0x64
 8000c1a:	f00e fb67 	bl	800f2ec <osDelay>
 8000c1e:	e7fb      	b.n	8000c18 <StartDefaultTask+0x8>

08000c20 <deplacement_fonction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_deplacement_fonction */
void deplacement_fonction(void const * argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b09e      	sub	sp, #120	@ 0x78
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN deplacement_fonction */
  TS_StateTypeDef TS_State;
  int16_t deplacement=0,dx,dy,x,y,x0,y0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  char text[50]={};
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	f107 030c 	add.w	r3, r7, #12
 8000c36:	222e      	movs	r2, #46	@ 0x2e
 8000c38:	2100      	movs	r1, #0
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f011 f9fe 	bl	801203c <memset>
  /* Infinite loop */
  for(;;)
  {
    BSP_TS_GetState(&TS_State);
 8000c40:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c44:	4618      	mov	r0, r3
 8000c46:	f002 fce9 	bl	800361c <BSP_TS_GetState>
    if(TS_State.touchDetected){
 8000c4a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d025      	beq.n	8000c9e <deplacement_fonction+0x7e>
      sprintf(text,"x %d y %d            ",TS_State.touchX[0],TS_State.touchY[0]);
 8000c52:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000c54:	461a      	mov	r2, r3
 8000c56:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000c5a:	f107 0008 	add.w	r0, r7, #8
 8000c5e:	4932      	ldr	r1, [pc, #200]	@ (8000d28 <deplacement_fonction+0x108>)
 8000c60:	f011 f9cc 	bl	8011ffc <siprintf>
      BSP_LCD_DisplayStringAtLine(4, (uint8_t*) text);
 8000c64:	f107 0308 	add.w	r3, r7, #8
 8000c68:	4619      	mov	r1, r3
 8000c6a:	2004      	movs	r0, #4
 8000c6c:	f002 f868 	bl	8002d40 <BSP_LCD_DisplayStringAtLine>
      if (deplacement==0){
 8000c70:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d10a      	bne.n	8000c8e <deplacement_fonction+0x6e>
		    x0=TS_State.touchX[0];
 8000c78:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000c7a:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
        y0=TS_State.touchY[0];
 8000c7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000c82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
        deplacement=1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8000c8c:	e047      	b.n	8000d1e <deplacement_fonction+0xfe>
	  	}
      else{
        x=TS_State.touchX[0];
 8000c8e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000c90:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
        y=TS_State.touchY[0];
 8000c94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000c98:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8000c9c:	e03f      	b.n	8000d1e <deplacement_fonction+0xfe>
    	}
    }
    else {
        deplacement=0;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        dx=x0-x;
 8000ca4:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 8000ca8:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
        dy=y0-y;
 8000cb4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000cb8:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
        sprintf(text,"dx %d dy %d            ",dx,dy);
 8000cc4:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	@ 0x6c
 8000cc8:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 8000ccc:	f107 0008 	add.w	r0, r7, #8
 8000cd0:	4916      	ldr	r1, [pc, #88]	@ (8000d2c <deplacement_fonction+0x10c>)
 8000cd2:	f011 f993 	bl	8011ffc <siprintf>
        BSP_LCD_DisplayStringAtLine(1, (uint8_t*) text);
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	4619      	mov	r1, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f002 f82f 	bl	8002d40 <BSP_LCD_DisplayStringAtLine>
        sprintf(text,"f: x %d y %d            ",x,y);
 8000ce2:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	@ 0x74
 8000ce6:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 8000cea:	f107 0008 	add.w	r0, r7, #8
 8000cee:	4910      	ldr	r1, [pc, #64]	@ (8000d30 <deplacement_fonction+0x110>)
 8000cf0:	f011 f984 	bl	8011ffc <siprintf>
        BSP_LCD_DisplayStringAtLine(2, (uint8_t*) text);
 8000cf4:	f107 0308 	add.w	r3, r7, #8
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	2002      	movs	r0, #2
 8000cfc:	f002 f820 	bl	8002d40 <BSP_LCD_DisplayStringAtLine>
        sprintf(text,"d: x %d y %d            ",x0,y0);
 8000d00:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	@ 0x70
 8000d04:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8000d08:	f107 0008 	add.w	r0, r7, #8
 8000d0c:	4909      	ldr	r1, [pc, #36]	@ (8000d34 <deplacement_fonction+0x114>)
 8000d0e:	f011 f975 	bl	8011ffc <siprintf>
        BSP_LCD_DisplayStringAtLine(3, (uint8_t*) text);
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	4619      	mov	r1, r3
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f002 f811 	bl	8002d40 <BSP_LCD_DisplayStringAtLine>
    }
    osDelay(50);
 8000d1e:	2032      	movs	r0, #50	@ 0x32
 8000d20:	f00e fae4 	bl	800f2ec <osDelay>
    BSP_TS_GetState(&TS_State);
 8000d24:	e78c      	b.n	8000c40 <deplacement_fonction+0x20>
 8000d26:	bf00      	nop
 8000d28:	08012a74 	.word	0x08012a74
 8000d2c:	08012a8c 	.word	0x08012a8c
 8000d30:	08012aa4 	.word	0x08012aa4
 8000d34:	08012ac0 	.word	0x08012ac0

08000d38 <Display_fonction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display_fonction */
void Display_fonction(void const * argument)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display_fonction */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d46:	4809      	ldr	r0, [pc, #36]	@ (8000d6c <Display_fonction+0x34>)
 8000d48:	f005 f9d0 	bl	80060ec <HAL_GPIO_WritePin>
		osDelay(500);
 8000d4c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d50:	f00e facc 	bl	800f2ec <osDelay>
		HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d5a:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <Display_fonction+0x34>)
 8000d5c:	f005 f9c6 	bl	80060ec <HAL_GPIO_WritePin>
		osDelay(500);
 8000d60:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d64:	f00e fac2 	bl	800f2ec <osDelay>
		HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 1);
 8000d68:	bf00      	nop
 8000d6a:	e7e9      	b.n	8000d40 <Display_fonction+0x8>
 8000d6c:	40021c00 	.word	0x40021c00

08000d70 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000d7a:	20c8      	movs	r0, #200	@ 0xc8
 8000d7c:	f001 fd36 	bl	80027ec <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000d80:	f000 fa7a 	bl	8001278 <ft5336_I2C_InitializeIfRequired>
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000d96:	bf00      	nop
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b084      	sub	sp, #16
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	4603      	mov	r3, r0
 8000daa:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000db4:	2300      	movs	r3, #0
 8000db6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000db8:	f000 fa5e 	bl	8001278 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	73fb      	strb	r3, [r7, #15]
 8000dc0:	e010      	b.n	8000de4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000dc2:	88fb      	ldrh	r3, [r7, #6]
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	21a8      	movs	r1, #168	@ 0xa8
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 fcf1 	bl	80027b0 <TS_IO_Read>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000dd2:	7b7b      	ldrb	r3, [r7, #13]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b51      	cmp	r3, #81	@ 0x51
 8000dd8:	d101      	bne.n	8000dde <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000dde:	7bfb      	ldrb	r3, [r7, #15]
 8000de0:	3301      	adds	r3, #1
 8000de2:	73fb      	strb	r3, [r7, #15]
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d802      	bhi.n	8000df0 <ft5336_ReadID+0x4e>
 8000dea:	7bbb      	ldrb	r3, [r7, #14]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0e8      	beq.n	8000dc2 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000df0:	7b7b      	ldrb	r3, [r7, #13]
 8000df2:	b2db      	uxtb	r3, r3
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f000 fa45 	bl	8001298 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	f000 f933 	bl	800107c <ft5336_TS_DisableIT>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
	...

08000e20 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000e2e:	88fb      	ldrh	r3, [r7, #6]
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	2102      	movs	r1, #2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f001 fcbb 	bl	80027b0 <TS_IO_Read>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	f003 030f 	and.w	r3, r3, #15
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000e4a:	7bfb      	ldrb	r3, [r7, #15]
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b05      	cmp	r3, #5
 8000e50:	d901      	bls.n	8000e56 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000e56:	7bfb      	ldrb	r3, [r7, #15]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <ft5336_TS_DetectTouch+0x50>)
 8000e5c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000e5e:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <ft5336_TS_DetectTouch+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	b2db      	uxtb	r3, r3
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000047c 	.word	0x2000047c

08000e74 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
 8000e80:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000e96:	4b6d      	ldr	r3, [pc, #436]	@ (800104c <ft5336_TS_GetXY+0x1d8>)
 8000e98:	789a      	ldrb	r2, [r3, #2]
 8000e9a:	4b6c      	ldr	r3, [pc, #432]	@ (800104c <ft5336_TS_GetXY+0x1d8>)
 8000e9c:	785b      	ldrb	r3, [r3, #1]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	f080 80cf 	bcs.w	8001042 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000ea4:	4b69      	ldr	r3, [pc, #420]	@ (800104c <ft5336_TS_GetXY+0x1d8>)
 8000ea6:	789b      	ldrb	r3, [r3, #2]
 8000ea8:	2b09      	cmp	r3, #9
 8000eaa:	d871      	bhi.n	8000f90 <ft5336_TS_GetXY+0x11c>
 8000eac:	a201      	add	r2, pc, #4	@ (adr r2, 8000eb4 <ft5336_TS_GetXY+0x40>)
 8000eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb2:	bf00      	nop
 8000eb4:	08000edd 	.word	0x08000edd
 8000eb8:	08000eef 	.word	0x08000eef
 8000ebc:	08000f01 	.word	0x08000f01
 8000ec0:	08000f13 	.word	0x08000f13
 8000ec4:	08000f25 	.word	0x08000f25
 8000ec8:	08000f37 	.word	0x08000f37
 8000ecc:	08000f49 	.word	0x08000f49
 8000ed0:	08000f5b 	.word	0x08000f5b
 8000ed4:	08000f6d 	.word	0x08000f6d
 8000ed8:	08000f7f 	.word	0x08000f7f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000edc:	2304      	movs	r3, #4
 8000ede:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000ee8:	2305      	movs	r3, #5
 8000eea:	753b      	strb	r3, [r7, #20]
      break;
 8000eec:	e051      	b.n	8000f92 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000eee:	230a      	movs	r3, #10
 8000ef0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000ef2:	2309      	movs	r3, #9
 8000ef4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000efa:	230b      	movs	r3, #11
 8000efc:	753b      	strb	r3, [r7, #20]
      break;
 8000efe:	e048      	b.n	8000f92 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000f00:	2310      	movs	r3, #16
 8000f02:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000f04:	230f      	movs	r3, #15
 8000f06:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000f08:	2312      	movs	r3, #18
 8000f0a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000f0c:	2311      	movs	r3, #17
 8000f0e:	753b      	strb	r3, [r7, #20]
      break;
 8000f10:	e03f      	b.n	8000f92 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000f12:	2316      	movs	r3, #22
 8000f14:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000f16:	2315      	movs	r3, #21
 8000f18:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000f1a:	2318      	movs	r3, #24
 8000f1c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000f1e:	2317      	movs	r3, #23
 8000f20:	753b      	strb	r3, [r7, #20]
      break;
 8000f22:	e036      	b.n	8000f92 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000f24:	231c      	movs	r3, #28
 8000f26:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000f28:	231b      	movs	r3, #27
 8000f2a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000f2c:	231e      	movs	r3, #30
 8000f2e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000f30:	231d      	movs	r3, #29
 8000f32:	753b      	strb	r3, [r7, #20]
      break;
 8000f34:	e02d      	b.n	8000f92 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000f36:	2322      	movs	r3, #34	@ 0x22
 8000f38:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000f3a:	2321      	movs	r3, #33	@ 0x21
 8000f3c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000f3e:	2324      	movs	r3, #36	@ 0x24
 8000f40:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000f42:	2323      	movs	r3, #35	@ 0x23
 8000f44:	753b      	strb	r3, [r7, #20]
      break;
 8000f46:	e024      	b.n	8000f92 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000f48:	2328      	movs	r3, #40	@ 0x28
 8000f4a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000f4c:	2327      	movs	r3, #39	@ 0x27
 8000f4e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000f50:	232a      	movs	r3, #42	@ 0x2a
 8000f52:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000f54:	2329      	movs	r3, #41	@ 0x29
 8000f56:	753b      	strb	r3, [r7, #20]
      break;
 8000f58:	e01b      	b.n	8000f92 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000f5a:	232e      	movs	r3, #46	@ 0x2e
 8000f5c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000f5e:	232d      	movs	r3, #45	@ 0x2d
 8000f60:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000f62:	2330      	movs	r3, #48	@ 0x30
 8000f64:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000f66:	232f      	movs	r3, #47	@ 0x2f
 8000f68:	753b      	strb	r3, [r7, #20]
      break;
 8000f6a:	e012      	b.n	8000f92 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000f6c:	2334      	movs	r3, #52	@ 0x34
 8000f6e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000f70:	2333      	movs	r3, #51	@ 0x33
 8000f72:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000f74:	2336      	movs	r3, #54	@ 0x36
 8000f76:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000f78:	2335      	movs	r3, #53	@ 0x35
 8000f7a:	753b      	strb	r3, [r7, #20]
      break;
 8000f7c:	e009      	b.n	8000f92 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000f7e:	233a      	movs	r3, #58	@ 0x3a
 8000f80:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000f82:	2339      	movs	r3, #57	@ 0x39
 8000f84:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000f86:	233c      	movs	r3, #60	@ 0x3c
 8000f88:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000f8a:	233b      	movs	r3, #59	@ 0x3b
 8000f8c:	753b      	strb	r3, [r7, #20]
      break;
 8000f8e:	e000      	b.n	8000f92 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000f90:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000f92:	89fb      	ldrh	r3, [r7, #14]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	7dfa      	ldrb	r2, [r7, #23]
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fc08 	bl	80027b0 <TS_IO_Read>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000fa4:	7cfb      	ldrb	r3, [r7, #19]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b29      	ldr	r3, [pc, #164]	@ (8001050 <ft5336_TS_GetXY+0x1dc>)
 8000fac:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	7dba      	ldrb	r2, [r7, #22]
 8000fb4:	4611      	mov	r1, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f001 fbfa 	bl	80027b0 <TS_IO_Read>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000fc0:	7cfb      	ldrb	r3, [r7, #19]
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	021b      	lsls	r3, r3, #8
 8000fc6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000fca:	b21a      	sxth	r2, r3
 8000fcc:	4b20      	ldr	r3, [pc, #128]	@ (8001050 <ft5336_TS_GetXY+0x1dc>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	b21b      	sxth	r3, r3
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	b21b      	sxth	r3, r3
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	@ (8001050 <ft5336_TS_GetXY+0x1dc>)
 8000fda:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8001050 <ft5336_TS_GetXY+0x1dc>)
 8000fde:	881a      	ldrh	r2, [r3, #0]
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	7d7a      	ldrb	r2, [r7, #21]
 8000fea:	4611      	mov	r1, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f001 fbdf 	bl	80027b0 <TS_IO_Read>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000ff6:	7cfb      	ldrb	r3, [r7, #19]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b14      	ldr	r3, [pc, #80]	@ (8001050 <ft5336_TS_GetXY+0x1dc>)
 8000ffe:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001000:	89fb      	ldrh	r3, [r7, #14]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	7d3a      	ldrb	r2, [r7, #20]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f001 fbd1 	bl	80027b0 <TS_IO_Read>
 800100e:	4603      	mov	r3, r0
 8001010:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001012:	7cfb      	ldrb	r3, [r7, #19]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800101c:	b21a      	sxth	r2, r3
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <ft5336_TS_GetXY+0x1dc>)
 8001020:	881b      	ldrh	r3, [r3, #0]
 8001022:	b21b      	sxth	r3, r3
 8001024:	4313      	orrs	r3, r2
 8001026:	b21b      	sxth	r3, r3
 8001028:	b29a      	uxth	r2, r3
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <ft5336_TS_GetXY+0x1dc>)
 800102c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800102e:	4b08      	ldr	r3, [pc, #32]	@ (8001050 <ft5336_TS_GetXY+0x1dc>)
 8001030:	881a      	ldrh	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001036:	4b05      	ldr	r3, [pc, #20]	@ (800104c <ft5336_TS_GetXY+0x1d8>)
 8001038:	789b      	ldrb	r3, [r3, #2]
 800103a:	3301      	adds	r3, #1
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4b03      	ldr	r3, [pc, #12]	@ (800104c <ft5336_TS_GetXY+0x1d8>)
 8001040:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000047c 	.word	0x2000047c
 8001050:	20000480 	.word	0x20000480

08001054 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001062:	2301      	movs	r3, #1
 8001064:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8001066:	88fb      	ldrh	r3, [r7, #6]
 8001068:	b2db      	uxtb	r3, r3
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	21a4      	movs	r1, #164	@ 0xa4
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fb84 	bl	800277c <TS_IO_Write>
}
 8001074:	bf00      	nop
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800108a:	2300      	movs	r3, #0
 800108c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800108e:	88fb      	ldrh	r3, [r7, #6]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	21a4      	movs	r1, #164	@ 0xa4
 8001096:	4618      	mov	r0, r3
 8001098:	f001 fb70 	bl	800277c <TS_IO_Write>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	6039      	str	r1, [r7, #0]
 80010dc:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2101      	movs	r1, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fb61 	bl	80027b0 <TS_IO_Read>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 80010f2:	7bfb      	ldrb	r3, [r7, #15]
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	461a      	mov	r2, r3
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	601a      	str	r2, [r3, #0]
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	603b      	str	r3, [r7, #0]
 8001110:	4603      	mov	r3, r0
 8001112:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001118:	2300      	movs	r3, #0
 800111a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8001124:	4b4d      	ldr	r3, [pc, #308]	@ (800125c <ft5336_TS_GetTouchInfo+0x158>)
 8001126:	785b      	ldrb	r3, [r3, #1]
 8001128:	461a      	mov	r2, r3
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	4293      	cmp	r3, r2
 800112e:	f080 8090 	bcs.w	8001252 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b09      	cmp	r3, #9
 8001136:	d85d      	bhi.n	80011f4 <ft5336_TS_GetTouchInfo+0xf0>
 8001138:	a201      	add	r2, pc, #4	@ (adr r2, 8001140 <ft5336_TS_GetTouchInfo+0x3c>)
 800113a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800113e:	bf00      	nop
 8001140:	08001169 	.word	0x08001169
 8001144:	08001177 	.word	0x08001177
 8001148:	08001185 	.word	0x08001185
 800114c:	08001193 	.word	0x08001193
 8001150:	080011a1 	.word	0x080011a1
 8001154:	080011af 	.word	0x080011af
 8001158:	080011bd 	.word	0x080011bd
 800115c:	080011cb 	.word	0x080011cb
 8001160:	080011d9 	.word	0x080011d9
 8001164:	080011e7 	.word	0x080011e7
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8001168:	2303      	movs	r3, #3
 800116a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 800116c:	2307      	movs	r3, #7
 800116e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8001170:	2308      	movs	r3, #8
 8001172:	757b      	strb	r3, [r7, #21]
      break;
 8001174:	e03f      	b.n	80011f6 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8001176:	2309      	movs	r3, #9
 8001178:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 800117a:	230d      	movs	r3, #13
 800117c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 800117e:	230e      	movs	r3, #14
 8001180:	757b      	strb	r3, [r7, #21]
      break;
 8001182:	e038      	b.n	80011f6 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001184:	230f      	movs	r3, #15
 8001186:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001188:	2313      	movs	r3, #19
 800118a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 800118c:	2314      	movs	r3, #20
 800118e:	757b      	strb	r3, [r7, #21]
      break;
 8001190:	e031      	b.n	80011f6 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8001192:	2315      	movs	r3, #21
 8001194:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001196:	2319      	movs	r3, #25
 8001198:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 800119a:	231a      	movs	r3, #26
 800119c:	757b      	strb	r3, [r7, #21]
      break;
 800119e:	e02a      	b.n	80011f6 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80011a0:	231b      	movs	r3, #27
 80011a2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80011a4:	231f      	movs	r3, #31
 80011a6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80011a8:	2320      	movs	r3, #32
 80011aa:	757b      	strb	r3, [r7, #21]
      break;
 80011ac:	e023      	b.n	80011f6 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80011ae:	2321      	movs	r3, #33	@ 0x21
 80011b0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80011b2:	2325      	movs	r3, #37	@ 0x25
 80011b4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80011b6:	2326      	movs	r3, #38	@ 0x26
 80011b8:	757b      	strb	r3, [r7, #21]
      break;
 80011ba:	e01c      	b.n	80011f6 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80011bc:	2327      	movs	r3, #39	@ 0x27
 80011be:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80011c0:	232b      	movs	r3, #43	@ 0x2b
 80011c2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80011c4:	232c      	movs	r3, #44	@ 0x2c
 80011c6:	757b      	strb	r3, [r7, #21]
      break;
 80011c8:	e015      	b.n	80011f6 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 80011ca:	232d      	movs	r3, #45	@ 0x2d
 80011cc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 80011ce:	2331      	movs	r3, #49	@ 0x31
 80011d0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 80011d2:	2332      	movs	r3, #50	@ 0x32
 80011d4:	757b      	strb	r3, [r7, #21]
      break;
 80011d6:	e00e      	b.n	80011f6 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 80011d8:	2333      	movs	r3, #51	@ 0x33
 80011da:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 80011dc:	2337      	movs	r3, #55	@ 0x37
 80011de:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 80011e0:	2338      	movs	r3, #56	@ 0x38
 80011e2:	757b      	strb	r3, [r7, #21]
      break;
 80011e4:	e007      	b.n	80011f6 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 80011e6:	2339      	movs	r3, #57	@ 0x39
 80011e8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 80011ea:	233d      	movs	r3, #61	@ 0x3d
 80011ec:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 80011ee:	233e      	movs	r3, #62	@ 0x3e
 80011f0:	757b      	strb	r3, [r7, #21]
      break;
 80011f2:	e000      	b.n	80011f6 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 80011f4:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80011f6:	89fb      	ldrh	r3, [r7, #14]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	7dfa      	ldrb	r2, [r7, #23]
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fad6 	bl	80027b0 <TS_IO_Read>
 8001204:	4603      	mov	r3, r0
 8001206:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001208:	7d3b      	ldrb	r3, [r7, #20]
 800120a:	b2db      	uxtb	r3, r3
 800120c:	119b      	asrs	r3, r3, #6
 800120e:	f003 0203 	and.w	r2, r3, #3
 8001212:	6a3b      	ldr	r3, [r7, #32]
 8001214:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001216:	89fb      	ldrh	r3, [r7, #14]
 8001218:	b2db      	uxtb	r3, r3
 800121a:	7dba      	ldrb	r2, [r7, #22]
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f001 fac6 	bl	80027b0 <TS_IO_Read>
 8001224:	4603      	mov	r3, r0
 8001226:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001228:	7d3b      	ldrb	r3, [r7, #20]
 800122a:	b2db      	uxtb	r3, r3
 800122c:	461a      	mov	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	7d7a      	ldrb	r2, [r7, #21]
 8001238:	4611      	mov	r1, r2
 800123a:	4618      	mov	r0, r3
 800123c:	f001 fab8 	bl	80027b0 <TS_IO_Read>
 8001240:	4603      	mov	r3, r0
 8001242:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8001244:	7d3b      	ldrb	r3, [r7, #20]
 8001246:	b2db      	uxtb	r3, r3
 8001248:	111b      	asrs	r3, r3, #4
 800124a:	f003 0204 	and.w	r2, r3, #4
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8001252:	bf00      	nop
 8001254:	3718      	adds	r7, #24
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000047c 	.word	0x2000047c

08001260 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001264:	4b03      	ldr	r3, [pc, #12]	@ (8001274 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001266:	781b      	ldrb	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	2000047c 	.word	0x2000047c

08001278 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800127c:	f7ff fff0 	bl	8001260 <ft5336_Get_I2C_InitializedStatus>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d104      	bne.n	8001290 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001286:	f001 fa6f 	bl	8002768 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800128a:	4b02      	ldr	r3, [pc, #8]	@ (8001294 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800128c:	2201      	movs	r2, #1
 800128e:	701a      	strb	r2, [r3, #0]
  }
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	2000047c 	.word	0x2000047c

08001298 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001298:	b480      	push	{r7}
 800129a:	b085      	sub	sp, #20
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b090      	sub	sp, #64	@ 0x40
 80012b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
 80012c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ca:	4baf      	ldr	r3, [pc, #700]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4aae      	ldr	r2, [pc, #696]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80012d0:	f043 0310 	orr.w	r3, r3, #16
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4bac      	ldr	r3, [pc, #688]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0310 	and.w	r3, r3, #16
 80012de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80012e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e2:	4ba9      	ldr	r3, [pc, #676]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	4aa8      	ldr	r2, [pc, #672]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80012e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ee:	4ba6      	ldr	r3, [pc, #664]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80012f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4ba3      	ldr	r3, [pc, #652]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4aa2      	ldr	r2, [pc, #648]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4ba0      	ldr	r3, [pc, #640]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	623b      	str	r3, [r7, #32]
 8001310:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001312:	4b9d      	ldr	r3, [pc, #628]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4a9c      	ldr	r2, [pc, #624]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4b9a      	ldr	r3, [pc, #616]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800132a:	4b97      	ldr	r3, [pc, #604]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a96      	ldr	r2, [pc, #600]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b94      	ldr	r3, [pc, #592]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	61bb      	str	r3, [r7, #24]
 8001340:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001342:	4b91      	ldr	r3, [pc, #580]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a90      	ldr	r2, [pc, #576]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b8e      	ldr	r3, [pc, #568]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800135a:	4b8b      	ldr	r3, [pc, #556]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a8a      	ldr	r2, [pc, #552]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001360:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b88      	ldr	r3, [pc, #544]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001372:	4b85      	ldr	r3, [pc, #532]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a84      	ldr	r2, [pc, #528]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b82      	ldr	r3, [pc, #520]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800138a:	4b7f      	ldr	r3, [pc, #508]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a7e      	ldr	r2, [pc, #504]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001390:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b7c      	ldr	r3, [pc, #496]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013a2:	4b79      	ldr	r3, [pc, #484]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a78      	ldr	r2, [pc, #480]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b76      	ldr	r3, [pc, #472]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f003 0320 	and.w	r3, r3, #32
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ba:	4b73      	ldr	r3, [pc, #460]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a72      	ldr	r2, [pc, #456]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b70      	ldr	r3, [pc, #448]	@ (8001588 <MX_GPIO_Init+0x2d4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 80013d2:	2200      	movs	r2, #0
 80013d4:	2160      	movs	r1, #96	@ 0x60
 80013d6:	486d      	ldr	r0, [pc, #436]	@ (800158c <MX_GPIO_Init+0x2d8>)
 80013d8:	f004 fe88 	bl	80060ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80013dc:	2201      	movs	r2, #1
 80013de:	2120      	movs	r1, #32
 80013e0:	486b      	ldr	r0, [pc, #428]	@ (8001590 <MX_GPIO_Init+0x2dc>)
 80013e2:	f004 fe83 	bl	80060ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2108      	movs	r1, #8
 80013ea:	4869      	ldr	r0, [pc, #420]	@ (8001590 <MX_GPIO_Init+0x2dc>)
 80013ec:	f004 fe7e 	bl	80060ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	2108      	movs	r1, #8
 80013f4:	4867      	ldr	r0, [pc, #412]	@ (8001594 <MX_GPIO_Init+0x2e0>)
 80013f6:	f004 fe79 	bl	80060ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001400:	4865      	ldr	r0, [pc, #404]	@ (8001598 <MX_GPIO_Init+0x2e4>)
 8001402:	f004 fe73 	bl	80060ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001406:	2200      	movs	r2, #0
 8001408:	f645 6140 	movw	r1, #24128	@ 0x5e40
 800140c:	4863      	ldr	r0, [pc, #396]	@ (800159c <MX_GPIO_Init+0x2e8>)
 800140e:	f004 fe6d 	bl	80060ec <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	21c8      	movs	r1, #200	@ 0xc8
 8001416:	4862      	ldr	r0, [pc, #392]	@ (80015a0 <MX_GPIO_Init+0x2ec>)
 8001418:	f004 fe68 	bl	80060ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800141c:	2308      	movs	r3, #8
 800141e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001420:	2300      	movs	r3, #0
 8001422:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001428:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800142c:	4619      	mov	r1, r3
 800142e:	4857      	ldr	r0, [pc, #348]	@ (800158c <MX_GPIO_Init+0x2d8>)
 8001430:	f004 fb8c 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001434:	2304      	movs	r3, #4
 8001436:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001444:	2309      	movs	r3, #9
 8001446:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800144c:	4619      	mov	r1, r3
 800144e:	484f      	ldr	r0, [pc, #316]	@ (800158c <MX_GPIO_Init+0x2d8>)
 8001450:	f004 fb7c 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8001454:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8001458:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145a:	2302      	movs	r3, #2
 800145c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001466:	230b      	movs	r3, #11
 8001468:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800146a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800146e:	4619      	mov	r1, r3
 8001470:	484b      	ldr	r0, [pc, #300]	@ (80015a0 <MX_GPIO_Init+0x2ec>)
 8001472:	f004 fb6b 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001476:	f643 0323 	movw	r3, #14371	@ 0x3823
 800147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001488:	230a      	movs	r3, #10
 800148a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001490:	4619      	mov	r1, r3
 8001492:	4844      	ldr	r0, [pc, #272]	@ (80015a4 <MX_GPIO_Init+0x2f0>)
 8001494:	f004 fb5a 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001498:	2380      	movs	r3, #128	@ 0x80
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149c:	2302      	movs	r3, #2
 800149e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80014a8:	2308      	movs	r3, #8
 80014aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b0:	4619      	mov	r1, r3
 80014b2:	4837      	ldr	r0, [pc, #220]	@ (8001590 <MX_GPIO_Init+0x2dc>)
 80014b4:	f004 fb4a 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 80014b8:	f248 1340 	movw	r3, #33088	@ 0x8140
 80014bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014be:	2300      	movs	r3, #0
 80014c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014ca:	4619      	mov	r1, r3
 80014cc:	4836      	ldr	r0, [pc, #216]	@ (80015a8 <MX_GPIO_Init+0x2f4>)
 80014ce:	f004 fb3d 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80014d2:	2360      	movs	r3, #96	@ 0x60
 80014d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d6:	2301      	movs	r3, #1
 80014d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014e6:	4619      	mov	r1, r3
 80014e8:	4828      	ldr	r0, [pc, #160]	@ (800158c <MX_GPIO_Init+0x2d8>)
 80014ea:	f004 fb2f 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80014ee:	2340      	movs	r3, #64	@ 0x40
 80014f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fa:	2303      	movs	r3, #3
 80014fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80014fe:	230a      	movs	r3, #10
 8001500:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001506:	4619      	mov	r1, r3
 8001508:	4826      	ldr	r0, [pc, #152]	@ (80015a4 <MX_GPIO_Init+0x2f0>)
 800150a:	f004 fb1f 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800150e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001512:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001520:	4619      	mov	r1, r3
 8001522:	4822      	ldr	r0, [pc, #136]	@ (80015ac <MX_GPIO_Init+0x2f8>)
 8001524:	f004 fb12 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001528:	2340      	movs	r3, #64	@ 0x40
 800152a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800152c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001530:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800153a:	4619      	mov	r1, r3
 800153c:	4814      	ldr	r0, [pc, #80]	@ (8001590 <MX_GPIO_Init+0x2dc>)
 800153e:	f004 fb05 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 8001542:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001546:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001554:	230a      	movs	r3, #10
 8001556:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001558:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800155c:	4619      	mov	r1, r3
 800155e:	4812      	ldr	r0, [pc, #72]	@ (80015a8 <MX_GPIO_Init+0x2f4>)
 8001560:	f004 faf4 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8001564:	23f0      	movs	r3, #240	@ 0xf0
 8001566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001568:	2302      	movs	r3, #2
 800156a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001570:	2300      	movs	r3, #0
 8001572:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8001574:	230a      	movs	r3, #10
 8001576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001578:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	@ (8001598 <MX_GPIO_Init+0x2e4>)
 8001580:	f004 fae4 	bl	8005b4c <HAL_GPIO_Init>
 8001584:	e014      	b.n	80015b0 <MX_GPIO_Init+0x2fc>
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	40021000 	.word	0x40021000
 8001590:	40020c00 	.word	0x40020c00
 8001594:	40022800 	.word	0x40022800
 8001598:	40022000 	.word	0x40022000
 800159c:	40021c00 	.word	0x40021c00
 80015a0:	40021800 	.word	0x40021800
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40022400 	.word	0x40022400

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80015b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015be:	2300      	movs	r3, #0
 80015c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015c2:	230a      	movs	r3, #10
 80015c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015ca:	4619      	mov	r1, r3
 80015cc:	4880      	ldr	r0, [pc, #512]	@ (80017d0 <MX_GPIO_Init+0x51c>)
 80015ce:	f004 fabd 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 80015d2:	2328      	movs	r3, #40	@ 0x28
 80015d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015e6:	4619      	mov	r1, r3
 80015e8:	487a      	ldr	r0, [pc, #488]	@ (80017d4 <MX_GPIO_Init+0x520>)
 80015ea:	f004 faaf 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80015ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001600:	4619      	mov	r1, r3
 8001602:	4875      	ldr	r0, [pc, #468]	@ (80017d8 <MX_GPIO_Init+0x524>)
 8001604:	f004 faa2 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001608:	2308      	movs	r3, #8
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800161c:	4619      	mov	r1, r3
 800161e:	486f      	ldr	r0, [pc, #444]	@ (80017dc <MX_GPIO_Init+0x528>)
 8001620:	f004 fa94 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001624:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8001628:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162a:	2300      	movs	r3, #0
 800162c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001632:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001636:	4619      	mov	r1, r3
 8001638:	4865      	ldr	r0, [pc, #404]	@ (80017d0 <MX_GPIO_Init+0x51c>)
 800163a:	f004 fa87 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800163e:	2310      	movs	r3, #16
 8001640:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001642:	2300      	movs	r3, #0
 8001644:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800164a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800164e:	4619      	mov	r1, r3
 8001650:	4860      	ldr	r0, [pc, #384]	@ (80017d4 <MX_GPIO_Init+0x520>)
 8001652:	f004 fa7b 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001656:	f24a 0304 	movw	r3, #40964	@ 0xa004
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800165c:	2300      	movs	r3, #0
 800165e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001664:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001668:	4619      	mov	r1, r3
 800166a:	485d      	ldr	r0, [pc, #372]	@ (80017e0 <MX_GPIO_Init+0x52c>)
 800166c:	f004 fa6e 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 8001670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001674:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167e:	2300      	movs	r3, #0
 8001680:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001686:	4619      	mov	r1, r3
 8001688:	4856      	ldr	r0, [pc, #344]	@ (80017e4 <MX_GPIO_Init+0x530>)
 800168a:	f004 fa5f 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800168e:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8001692:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001694:	2301      	movs	r3, #1
 8001696:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	2300      	movs	r3, #0
 800169a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169c:	2300      	movs	r3, #0
 800169e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016a4:	4619      	mov	r1, r3
 80016a6:	484e      	ldr	r0, [pc, #312]	@ (80017e0 <MX_GPIO_Init+0x52c>)
 80016a8:	f004 fa50 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80016ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016b2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016c0:	4619      	mov	r1, r3
 80016c2:	4848      	ldr	r0, [pc, #288]	@ (80017e4 <MX_GPIO_Init+0x530>)
 80016c4:	f004 fa42 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80016c8:	2310      	movs	r3, #16
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016cc:	2302      	movs	r3, #2
 80016ce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d0:	2300      	movs	r3, #0
 80016d2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d4:	2303      	movs	r3, #3
 80016d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80016d8:	230a      	movs	r3, #10
 80016da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016e0:	4619      	mov	r1, r3
 80016e2:	483f      	ldr	r0, [pc, #252]	@ (80017e0 <MX_GPIO_Init+0x52c>)
 80016e4:	f004 fa32 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 80016e8:	23c8      	movs	r3, #200	@ 0xc8
 80016ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ec:	2301      	movs	r3, #1
 80016ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016fc:	4619      	mov	r1, r3
 80016fe:	4834      	ldr	r0, [pc, #208]	@ (80017d0 <MX_GPIO_Init+0x51c>)
 8001700:	f004 fa24 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001704:	2305      	movs	r3, #5
 8001706:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001714:	230a      	movs	r3, #10
 8001716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001718:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800171c:	4619      	mov	r1, r3
 800171e:	482e      	ldr	r0, [pc, #184]	@ (80017d8 <MX_GPIO_Init+0x524>)
 8001720:	f004 fa14 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001724:	2332      	movs	r3, #50	@ 0x32
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001728:	2302      	movs	r3, #2
 800172a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001730:	2303      	movs	r3, #3
 8001732:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001734:	230b      	movs	r3, #11
 8001736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001738:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800173c:	4619      	mov	r1, r3
 800173e:	4826      	ldr	r0, [pc, #152]	@ (80017d8 <MX_GPIO_Init+0x524>)
 8001740:	f004 fa04 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001744:	2304      	movs	r3, #4
 8001746:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001754:	2309      	movs	r3, #9
 8001756:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001758:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800175c:	4619      	mov	r1, r3
 800175e:	4822      	ldr	r0, [pc, #136]	@ (80017e8 <MX_GPIO_Init+0x534>)
 8001760:	f004 f9f4 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001764:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001768:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001772:	2303      	movs	r3, #3
 8001774:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001776:	2309      	movs	r3, #9
 8001778:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800177a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800177e:	4619      	mov	r1, r3
 8001780:	4814      	ldr	r0, [pc, #80]	@ (80017d4 <MX_GPIO_Init+0x520>)
 8001782:	f004 f9e3 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001786:	2386      	movs	r3, #134	@ 0x86
 8001788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178a:	2302      	movs	r3, #2
 800178c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001792:	2303      	movs	r3, #3
 8001794:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001796:	230b      	movs	r3, #11
 8001798:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800179e:	4619      	mov	r1, r3
 80017a0:	4812      	ldr	r0, [pc, #72]	@ (80017ec <MX_GPIO_Init+0x538>)
 80017a2:	f004 f9d3 	bl	8005b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80017a6:	2328      	movs	r3, #40	@ 0x28
 80017a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017b6:	230a      	movs	r3, #10
 80017b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017be:	4619      	mov	r1, r3
 80017c0:	480a      	ldr	r0, [pc, #40]	@ (80017ec <MX_GPIO_Init+0x538>)
 80017c2:	f004 f9c3 	bl	8005b4c <HAL_GPIO_Init>

}
 80017c6:	bf00      	nop
 80017c8:	3740      	adds	r7, #64	@ 0x40
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40020c00 	.word	0x40020c00
 80017d8:	40020800 	.word	0x40020800
 80017dc:	40022800 	.word	0x40022800
 80017e0:	40021c00 	.word	0x40021c00
 80017e4:	40022000 	.word	0x40022000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020000 	.word	0x40020000

080017f0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001864 <MX_I2C1_Init+0x74>)
 80017f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001868 <MX_I2C1_Init+0x78>)
 80017f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80017fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <MX_I2C1_Init+0x74>)
 80017fc:	4a1b      	ldr	r2, [pc, #108]	@ (800186c <MX_I2C1_Init+0x7c>)
 80017fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001800:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <MX_I2C1_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001806:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <MX_I2C1_Init+0x74>)
 8001808:	2201      	movs	r2, #1
 800180a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800180c:	4b15      	ldr	r3, [pc, #84]	@ (8001864 <MX_I2C1_Init+0x74>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001812:	4b14      	ldr	r3, [pc, #80]	@ (8001864 <MX_I2C1_Init+0x74>)
 8001814:	2200      	movs	r2, #0
 8001816:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001818:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <MX_I2C1_Init+0x74>)
 800181a:	2200      	movs	r2, #0
 800181c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181e:	4b11      	ldr	r3, [pc, #68]	@ (8001864 <MX_I2C1_Init+0x74>)
 8001820:	2200      	movs	r2, #0
 8001822:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001824:	4b0f      	ldr	r3, [pc, #60]	@ (8001864 <MX_I2C1_Init+0x74>)
 8001826:	2200      	movs	r2, #0
 8001828:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800182a:	480e      	ldr	r0, [pc, #56]	@ (8001864 <MX_I2C1_Init+0x74>)
 800182c:	f004 fc78 	bl	8006120 <HAL_I2C_Init>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001836:	f000 fc47 	bl	80020c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800183a:	2100      	movs	r1, #0
 800183c:	4809      	ldr	r0, [pc, #36]	@ (8001864 <MX_I2C1_Init+0x74>)
 800183e:	f005 fa05 	bl	8006c4c <HAL_I2CEx_ConfigAnalogFilter>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001848:	f000 fc3e 	bl	80020c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800184c:	2100      	movs	r1, #0
 800184e:	4805      	ldr	r0, [pc, #20]	@ (8001864 <MX_I2C1_Init+0x74>)
 8001850:	f005 fa47 	bl	8006ce2 <HAL_I2CEx_ConfigDigitalFilter>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800185a:	f000 fc35 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000484 	.word	0x20000484
 8001868:	40005400 	.word	0x40005400
 800186c:	00c0eaff 	.word	0x00c0eaff

08001870 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001874:	4b1b      	ldr	r3, [pc, #108]	@ (80018e4 <MX_I2C3_Init+0x74>)
 8001876:	4a1c      	ldr	r2, [pc, #112]	@ (80018e8 <MX_I2C3_Init+0x78>)
 8001878:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 800187a:	4b1a      	ldr	r3, [pc, #104]	@ (80018e4 <MX_I2C3_Init+0x74>)
 800187c:	4a1b      	ldr	r2, [pc, #108]	@ (80018ec <MX_I2C3_Init+0x7c>)
 800187e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001880:	4b18      	ldr	r3, [pc, #96]	@ (80018e4 <MX_I2C3_Init+0x74>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001886:	4b17      	ldr	r3, [pc, #92]	@ (80018e4 <MX_I2C3_Init+0x74>)
 8001888:	2201      	movs	r2, #1
 800188a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800188c:	4b15      	ldr	r3, [pc, #84]	@ (80018e4 <MX_I2C3_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001892:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <MX_I2C3_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001898:	4b12      	ldr	r3, [pc, #72]	@ (80018e4 <MX_I2C3_Init+0x74>)
 800189a:	2200      	movs	r2, #0
 800189c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <MX_I2C3_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	@ (80018e4 <MX_I2C3_Init+0x74>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018aa:	480e      	ldr	r0, [pc, #56]	@ (80018e4 <MX_I2C3_Init+0x74>)
 80018ac:	f004 fc38 	bl	8006120 <HAL_I2C_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80018b6:	f000 fc07 	bl	80020c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018ba:	2100      	movs	r1, #0
 80018bc:	4809      	ldr	r0, [pc, #36]	@ (80018e4 <MX_I2C3_Init+0x74>)
 80018be:	f005 f9c5 	bl	8006c4c <HAL_I2CEx_ConfigAnalogFilter>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80018c8:	f000 fbfe 	bl	80020c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80018cc:	2100      	movs	r1, #0
 80018ce:	4805      	ldr	r0, [pc, #20]	@ (80018e4 <MX_I2C3_Init+0x74>)
 80018d0:	f005 fa07 	bl	8006ce2 <HAL_I2CEx_ConfigDigitalFilter>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80018da:	f000 fbf5 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200004d8 	.word	0x200004d8
 80018e8:	40005c00 	.word	0x40005c00
 80018ec:	00c0eaff 	.word	0x00c0eaff

080018f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b0ac      	sub	sp, #176	@ 0xb0
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001908:	f107 0318 	add.w	r3, r7, #24
 800190c:	2284      	movs	r2, #132	@ 0x84
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f010 fb93 	bl	801203c <memset>
  if(i2cHandle->Instance==I2C1)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a44      	ldr	r2, [pc, #272]	@ (8001a2c <HAL_I2C_MspInit+0x13c>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d13d      	bne.n	800199c <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001920:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001924:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001926:	2300      	movs	r3, #0
 8001928:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800192a:	f107 0318 	add.w	r3, r7, #24
 800192e:	4618      	mov	r0, r3
 8001930:	f006 fab8 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800193a:	f000 fbc5 	bl	80020c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a30 <HAL_I2C_MspInit+0x140>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a3b      	ldr	r2, [pc, #236]	@ (8001a30 <HAL_I2C_MspInit+0x140>)
 8001944:	f043 0302 	orr.w	r3, r3, #2
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b39      	ldr	r3, [pc, #228]	@ (8001a30 <HAL_I2C_MspInit+0x140>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001956:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800195a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800195e:	2312      	movs	r3, #18
 8001960:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001970:	2304      	movs	r3, #4
 8001972:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001976:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800197a:	4619      	mov	r1, r3
 800197c:	482d      	ldr	r0, [pc, #180]	@ (8001a34 <HAL_I2C_MspInit+0x144>)
 800197e:	f004 f8e5 	bl	8005b4c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001982:	4b2b      	ldr	r3, [pc, #172]	@ (8001a30 <HAL_I2C_MspInit+0x140>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001986:	4a2a      	ldr	r2, [pc, #168]	@ (8001a30 <HAL_I2C_MspInit+0x140>)
 8001988:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800198c:	6413      	str	r3, [r2, #64]	@ 0x40
 800198e:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <HAL_I2C_MspInit+0x140>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800199a:	e042      	b.n	8001a22 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a25      	ldr	r2, [pc, #148]	@ (8001a38 <HAL_I2C_MspInit+0x148>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d13d      	bne.n	8001a22 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80019a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019b2:	f107 0318 	add.w	r3, r7, #24
 80019b6:	4618      	mov	r0, r3
 80019b8:	f006 fa74 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80019c2:	f000 fb81 	bl	80020c8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a30 <HAL_I2C_MspInit+0x140>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a19      	ldr	r2, [pc, #100]	@ (8001a30 <HAL_I2C_MspInit+0x140>)
 80019cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b17      	ldr	r3, [pc, #92]	@ (8001a30 <HAL_I2C_MspInit+0x140>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80019de:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80019e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e6:	2312      	movs	r3, #18
 80019e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f2:	2303      	movs	r3, #3
 80019f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80019f8:	2304      	movs	r3, #4
 80019fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a02:	4619      	mov	r1, r3
 8001a04:	480d      	ldr	r0, [pc, #52]	@ (8001a3c <HAL_I2C_MspInit+0x14c>)
 8001a06:	f004 f8a1 	bl	8005b4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_I2C_MspInit+0x140>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <HAL_I2C_MspInit+0x140>)
 8001a10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_I2C_MspInit+0x140>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a1e:	60bb      	str	r3, [r7, #8]
 8001a20:	68bb      	ldr	r3, [r7, #8]
}
 8001a22:	bf00      	nop
 8001a24:	37b0      	adds	r7, #176	@ 0xb0
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	40005400 	.word	0x40005400
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40020400 	.word	0x40020400
 8001a38:	40005c00 	.word	0x40005c00
 8001a3c:	40021c00 	.word	0x40021c00

08001a40 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a15      	ldr	r2, [pc, #84]	@ (8001aa4 <HAL_I2C_MspDeInit+0x64>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d110      	bne.n	8001a74 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <HAL_I2C_MspDeInit+0x68>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	4a14      	ldr	r2, [pc, #80]	@ (8001aa8 <HAL_I2C_MspDeInit+0x68>)
 8001a58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001a5c:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001a5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a62:	4812      	ldr	r0, [pc, #72]	@ (8001aac <HAL_I2C_MspDeInit+0x6c>)
 8001a64:	f004 fa1e 	bl	8005ea4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001a68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001a6c:	480f      	ldr	r0, [pc, #60]	@ (8001aac <HAL_I2C_MspDeInit+0x6c>)
 8001a6e:	f004 fa19 	bl	8005ea4 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001a72:	e013      	b.n	8001a9c <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a0d      	ldr	r2, [pc, #52]	@ (8001ab0 <HAL_I2C_MspDeInit+0x70>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d10e      	bne.n	8001a9c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001a7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa8 <HAL_I2C_MspDeInit+0x68>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	4a09      	ldr	r2, [pc, #36]	@ (8001aa8 <HAL_I2C_MspDeInit+0x68>)
 8001a84:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001a88:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001a8a:	2180      	movs	r1, #128	@ 0x80
 8001a8c:	4809      	ldr	r0, [pc, #36]	@ (8001ab4 <HAL_I2C_MspDeInit+0x74>)
 8001a8e:	f004 fa09 	bl	8005ea4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8001a92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001a96:	4807      	ldr	r0, [pc, #28]	@ (8001ab4 <HAL_I2C_MspDeInit+0x74>)
 8001a98:	f004 fa04 	bl	8005ea4 <HAL_GPIO_DeInit>
}
 8001a9c:	bf00      	nop
 8001a9e:	3708      	adds	r7, #8
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40005400 	.word	0x40005400
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020400 	.word	0x40020400
 8001ab0:	40005c00 	.word	0x40005c00
 8001ab4:	40021c00 	.word	0x40021c00

08001ab8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08e      	sub	sp, #56	@ 0x38
 8001abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2234      	movs	r2, #52	@ 0x34
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f010 fab9 	bl	801203c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001aca:	4b3a      	ldr	r3, [pc, #232]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001acc:	4a3a      	ldr	r2, [pc, #232]	@ (8001bb8 <MX_LTDC_Init+0x100>)
 8001ace:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001ad0:	4b38      	ldr	r3, [pc, #224]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001ad6:	4b37      	ldr	r3, [pc, #220]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001adc:	4b35      	ldr	r3, [pc, #212]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ae2:	4b34      	ldr	r3, [pc, #208]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001ae8:	4b32      	ldr	r3, [pc, #200]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001aea:	2228      	movs	r2, #40	@ 0x28
 8001aec:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001aee:	4b31      	ldr	r3, [pc, #196]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001af0:	2209      	movs	r2, #9
 8001af2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001af4:	4b2f      	ldr	r3, [pc, #188]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001af6:	2235      	movs	r2, #53	@ 0x35
 8001af8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001afa:	4b2e      	ldr	r3, [pc, #184]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001afc:	220b      	movs	r2, #11
 8001afe:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001b00:	4b2c      	ldr	r3, [pc, #176]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001b02:	f240 2215 	movw	r2, #533	@ 0x215
 8001b06:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001b08:	4b2a      	ldr	r3, [pc, #168]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001b0a:	f240 121b 	movw	r2, #283	@ 0x11b
 8001b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001b10:	4b28      	ldr	r3, [pc, #160]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001b12:	f240 2235 	movw	r2, #565	@ 0x235
 8001b16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001b18:	4b26      	ldr	r3, [pc, #152]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001b1a:	f240 121d 	movw	r2, #285	@ 0x11d
 8001b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b20:	4b24      	ldr	r3, [pc, #144]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b28:	4b22      	ldr	r3, [pc, #136]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b30:	4b20      	ldr	r3, [pc, #128]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b38:	481e      	ldr	r0, [pc, #120]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001b3a:	f005 f91f 	bl	8006d7c <HAL_LTDC_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001b44:	f000 fac0 	bl	80020c8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001b4c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001b50:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001b56:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001b5a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001b60:	23ff      	movs	r3, #255	@ 0xff
 8001b62:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b68:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b6c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b6e:	2307      	movs	r3, #7
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001b72:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001b76:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001b78:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001b7e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001b82:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	@ (8001bb4 <MX_LTDC_Init+0xfc>)
 8001b9e:	f005 fa7f 	bl	80070a0 <HAL_LTDC_ConfigLayer>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001ba8:	f000 fa8e 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001bac:	bf00      	nop
 8001bae:	3738      	adds	r7, #56	@ 0x38
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	2000052c 	.word	0x2000052c
 8001bb8:	40016800 	.word	0x40016800

08001bbc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08e      	sub	sp, #56	@ 0x38
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a55      	ldr	r2, [pc, #340]	@ (8001d30 <HAL_LTDC_MspInit+0x174>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	f040 80a3 	bne.w	8001d26 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001be0:	4b54      	ldr	r3, [pc, #336]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be4:	4a53      	ldr	r2, [pc, #332]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001be6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001bea:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bec:	4b51      	ldr	r3, [pc, #324]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bf0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bf8:	4b4e      	ldr	r3, [pc, #312]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfc:	4a4d      	ldr	r2, [pc, #308]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001bfe:	f043 0310 	orr.w	r3, r3, #16
 8001c02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c04:	4b4b      	ldr	r3, [pc, #300]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c08:	f003 0310 	and.w	r3, r3, #16
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c10:	4b48      	ldr	r3, [pc, #288]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c14:	4a47      	ldr	r2, [pc, #284]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1c:	4b45      	ldr	r3, [pc, #276]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c28:	4b42      	ldr	r3, [pc, #264]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2c:	4a41      	ldr	r2, [pc, #260]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c32:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c34:	4b3f      	ldr	r3, [pc, #252]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3c:	617b      	str	r3, [r7, #20]
 8001c3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c40:	4b3c      	ldr	r3, [pc, #240]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c44:	4a3b      	ldr	r2, [pc, #236]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4c:	4b39      	ldr	r3, [pc, #228]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c58:	4b36      	ldr	r3, [pc, #216]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	4a35      	ldr	r2, [pc, #212]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c64:	4b33      	ldr	r3, [pc, #204]	@ (8001d34 <HAL_LTDC_MspInit+0x178>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001c70:	2310      	movs	r3, #16
 8001c72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c80:	230e      	movs	r3, #14
 8001c82:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001c84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c88:	4619      	mov	r1, r3
 8001c8a:	482b      	ldr	r0, [pc, #172]	@ (8001d38 <HAL_LTDC_MspInit+0x17c>)
 8001c8c:	f003 ff5e 	bl	8005b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001c90:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c96:	2302      	movs	r3, #2
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ca2:	230e      	movs	r3, #14
 8001ca4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001caa:	4619      	mov	r1, r3
 8001cac:	4823      	ldr	r0, [pc, #140]	@ (8001d3c <HAL_LTDC_MspInit+0x180>)
 8001cae:	f003 ff4d 	bl	8005b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001cb2:	23f7      	movs	r3, #247	@ 0xf7
 8001cb4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cc2:	230e      	movs	r3, #14
 8001cc4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cca:	4619      	mov	r1, r3
 8001ccc:	481c      	ldr	r0, [pc, #112]	@ (8001d40 <HAL_LTDC_MspInit+0x184>)
 8001cce:	f003 ff3d 	bl	8005b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001cd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001cd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ce4:	2309      	movs	r3, #9
 8001ce6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001ce8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cec:	4619      	mov	r1, r3
 8001cee:	4815      	ldr	r0, [pc, #84]	@ (8001d44 <HAL_LTDC_MspInit+0x188>)
 8001cf0:	f003 ff2c 	bl	8005b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001cf4:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d02:	2300      	movs	r3, #0
 8001d04:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d06:	230e      	movs	r3, #14
 8001d08:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480d      	ldr	r0, [pc, #52]	@ (8001d48 <HAL_LTDC_MspInit+0x18c>)
 8001d12:	f003 ff1b 	bl	8005b4c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2105      	movs	r1, #5
 8001d1a:	2058      	movs	r0, #88	@ 0x58
 8001d1c:	f002 ff86 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d20:	2058      	movs	r0, #88	@ 0x58
 8001d22:	f002 ff9f 	bl	8004c64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001d26:	bf00      	nop
 8001d28:	3738      	adds	r7, #56	@ 0x38
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40016800 	.word	0x40016800
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40022400 	.word	0x40022400
 8001d40:	40022800 	.word	0x40022800
 8001d44:	40021800 	.word	0x40021800
 8001d48:	40022000 	.word	0x40022000

08001d4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	f5ad 7d3d 	sub.w	sp, sp, #756	@ 0x2f4
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d54:	4b67      	ldr	r3, [pc, #412]	@ (8001ef4 <main+0x1a8>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001d5a:	4b66      	ldr	r3, [pc, #408]	@ (8001ef4 <main+0x1a8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d60:	f002 fbc7 	bl	80044f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d64:	f000 f8d6 	bl	8001f14 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001d68:	f000 f946 	bl	8001ff8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d6c:	f7ff faa2 	bl	80012b4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001d70:	f7fe fc68 	bl	8000644 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001d74:	f7fe fd98 	bl	80008a8 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001d78:	f7fe fdee 	bl	8000958 <MX_FMC_Init>
  MX_I2C1_Init();
 8001d7c:	f7ff fd38 	bl	80017f0 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001d80:	f7ff fd76 	bl	8001870 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001d84:	f7ff fe98 	bl	8001ab8 <MX_LTDC_Init>
  MX_RTC_Init();
 8001d88:	f000 f9a4 	bl	80020d4 <MX_RTC_Init>
  MX_SPI2_Init();
 8001d8c:	f000 faf6 	bl	800237c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001d90:	f001 ffba 	bl	8003d08 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001d94:	f002 f80c 	bl	8003db0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001d98:	f002 f858 	bl	8003e4c <MX_TIM3_Init>
  MX_TIM5_Init();
 8001d9c:	f002 f8a4 	bl	8003ee8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001da0:	f002 f8f0 	bl	8003f84 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001da4:	f002 fa04 	bl	80041b0 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001da8:	f002 fa32 	bl	8004210 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001dac:	f7fe fbf8 	bl	80005a0 <MX_ADC1_Init>
  MX_DAC_Init();
 8001db0:	f7fe fd08 	bl	80007c4 <MX_DAC_Init>
  MX_UART7_Init();
 8001db4:	f002 f9cc 	bl	8004150 <MX_UART7_Init>
  MX_SDMMC1_SD_Init();
 8001db8:	f000 fa5e 	bl	8002278 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001dbc:	f00a fdcc 	bl	800c958 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001dc0:	f000 fd20 	bl	8002804 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001dc4:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f000 fdb3 	bl	8002934 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8001dce:	f000 fd89 	bl	80028e4 <BSP_LCD_GetXSize>
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	f000 fd9a 	bl	800290c <BSP_LCD_GetYSize>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	fb04 f303 	mul.w	r3, r4, r3
 8001dde:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4619      	mov	r1, r3
 8001de6:	2001      	movs	r0, #1
 8001de8:	f000 fda4 	bl	8002934 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8001dec:	f001 f808 	bl	8002e00 <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8001df0:	2000      	movs	r0, #0
 8001df2:	f000 fdff 	bl	80029f4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001df6:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001dfa:	f000 fe6d 	bl	8002ad8 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f000 fdf8 	bl	80029f4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f000 fe67 	bl	8002ad8 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font24);
 8001e0a:	483b      	ldr	r0, [pc, #236]	@ (8001ef8 <main+0x1ac>)
 8001e0c:	f000 fe34 	bl	8002a78 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001e10:	483a      	ldr	r0, [pc, #232]	@ (8001efc <main+0x1b0>)
 8001e12:	f000 fdff 	bl	8002a14 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 fe14 	bl	8002a44 <BSP_LCD_SetBackColor>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001e1c:	f000 fd62 	bl	80028e4 <BSP_LCD_GetXSize>
 8001e20:	4603      	mov	r3, r0
 8001e22:	b29c      	uxth	r4, r3
 8001e24:	f000 fd72 	bl	800290c <BSP_LCD_GetYSize>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f001 fbb4 	bl	800359c <BSP_TS_Init>

	char image[140];
	FIL file;
	uint8_t *uwInternelBuffer = (uint8_t*) 0xC0260000;
 8001e34:	4b32      	ldr	r3, [pc, #200]	@ (8001f00 <main+0x1b4>)
 8001e36:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
	unsigned int byteRead;
	TCHAR pathfile[] = "mapENS.bmp";
 8001e3a:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001e3e:	f5a3 7334 	sub.w	r3, r3, #720	@ 0x2d0
 8001e42:	4a30      	ldr	r2, [pc, #192]	@ (8001f04 <main+0x1b8>)
 8001e44:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e46:	c303      	stmia	r3!, {r0, r1}
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	3302      	adds	r3, #2
 8001e4c:	0c12      	lsrs	r2, r2, #16
 8001e4e:	701a      	strb	r2, [r3, #0]
	f_open(&file, pathfile, FA_READ); // on ne prend que le fichier
 8001e50:	f107 0120 	add.w	r1, r7, #32
 8001e54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f00c fd4b 	bl	800e8f6 <f_open>
	f_read(&file, (TCHAR*) image, 138, &byteRead);
 8001e60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e64:	f507 7118 	add.w	r1, r7, #608	@ 0x260
 8001e68:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001e6c:	228a      	movs	r2, #138	@ 0x8a
 8001e6e:	f00c ff03 	bl	800ec78 <f_read>
	f_close(&file);
 8001e72:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001e76:	4618      	mov	r0, r3
 8001e78:	f00d f8f5 	bl	800f066 <f_close>

	//Entete début
	//Largeur
	image[18] = 0xE0;
 8001e7c:	23e0      	movs	r3, #224	@ 0xe0
 8001e7e:	f887 3272 	strb.w	r3, [r7, #626]	@ 0x272
	image[19] = 0x01;
 8001e82:	2301      	movs	r3, #1
 8001e84:	f887 3273 	strb.w	r3, [r7, #627]	@ 0x273
	image[20] = 0x00;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	f887 3274 	strb.w	r3, [r7, #628]	@ 0x274
	image[21] = 0x00;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f887 3275 	strb.w	r3, [r7, #629]	@ 0x275
	//hauteur
	image[22] = 0x10;
 8001e94:	2310      	movs	r3, #16
 8001e96:	f887 3276 	strb.w	r3, [r7, #630]	@ 0x276
	image[23] = 0x01;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	f887 3277 	strb.w	r3, [r7, #631]	@ 0x277
	image[24] = 0x00;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	f887 3278 	strb.w	r3, [r7, #632]	@ 0x278
	image[25] = 0x00;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	f887 3279 	strb.w	r3, [r7, #633]	@ 0x279



  uint8_t Test[25]="Fin init\r\n";
 8001eac:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 8001eb0:	f5a3 743b 	sub.w	r4, r3, #748	@ 0x2ec
 8001eb4:	4a14      	ldr	r2, [pc, #80]	@ (8001f08 <main+0x1bc>)
 8001eb6:	4623      	mov	r3, r4
 8001eb8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001eba:	c303      	stmia	r3!, {r0, r1}
 8001ebc:	801a      	strh	r2, [r3, #0]
 8001ebe:	3302      	adds	r3, #2
 8001ec0:	0c12      	lsrs	r2, r2, #16
 8001ec2:	701a      	strb	r2, [r3, #0]
 8001ec4:	f104 030b 	add.w	r3, r4, #11
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	819a      	strh	r2, [r3, #12]
  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);
 8001ed2:	1d39      	adds	r1, r7, #4
 8001ed4:	230a      	movs	r3, #10
 8001ed6:	2219      	movs	r2, #25
 8001ed8:	480c      	ldr	r0, [pc, #48]	@ (8001f0c <main+0x1c0>)
 8001eda:	f008 fc99 	bl	800a810 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1,&caractere_recu,1);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	490b      	ldr	r1, [pc, #44]	@ (8001f10 <main+0x1c4>)
 8001ee2:	480a      	ldr	r0, [pc, #40]	@ (8001f0c <main+0x1c0>)
 8001ee4:	f008 fd17 	bl	800a916 <HAL_UART_Receive_IT>
  //HAL_RTC_GetDate()
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001ee8:	f7fe fe3a 	bl	8000b60 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001eec:	f00d f98f 	bl	800f20e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <main+0x1a4>
 8001ef4:	200005d4 	.word	0x200005d4
 8001ef8:	20000028 	.word	0x20000028
 8001efc:	ffff0000 	.word	0xffff0000
 8001f00:	c0260000 	.word	0xc0260000
 8001f04:	08012adc 	.word	0x08012adc
 8001f08:	08012ae8 	.word	0x08012ae8
 8001f0c:	20000c14 	.word	0x20000c14
 8001f10:	200005e4 	.word	0x200005e4

08001f14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b094      	sub	sp, #80	@ 0x50
 8001f18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	2230      	movs	r2, #48	@ 0x30
 8001f20:	2100      	movs	r1, #0
 8001f22:	4618      	mov	r0, r3
 8001f24:	f010 f88a 	bl	801203c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	609a      	str	r2, [r3, #8]
 8001f34:	60da      	str	r2, [r3, #12]
 8001f36:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f38:	f005 fa98 	bl	800746c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff0 <SystemClock_Config+0xdc>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff0 <SystemClock_Config+0xdc>)
 8001f42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f48:	4b29      	ldr	r3, [pc, #164]	@ (8001ff0 <SystemClock_Config+0xdc>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f50:	60bb      	str	r3, [r7, #8]
 8001f52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f54:	4b27      	ldr	r3, [pc, #156]	@ (8001ff4 <SystemClock_Config+0xe0>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a26      	ldr	r2, [pc, #152]	@ (8001ff4 <SystemClock_Config+0xe0>)
 8001f5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	4b24      	ldr	r3, [pc, #144]	@ (8001ff4 <SystemClock_Config+0xe0>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001f68:	607b      	str	r3, [r7, #4]
 8001f6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001f6c:	2309      	movs	r3, #9
 8001f6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f76:	2301      	movs	r3, #1
 8001f78:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f7e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f84:	2319      	movs	r3, #25
 8001f86:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001f88:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001f8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001f92:	2309      	movs	r3, #9
 8001f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f96:	f107 0320 	add.w	r3, r7, #32
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f005 fac6 	bl	800752c <HAL_RCC_OscConfig>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001fa6:	f000 f88f 	bl	80020c8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001faa:	f005 fa6f 	bl	800748c <HAL_PWREx_EnableOverDrive>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001fb4:	f000 f888 	bl	80020c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb8:	230f      	movs	r3, #15
 8001fba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fc4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fc8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001fd0:	f107 030c 	add.w	r3, r7, #12
 8001fd4:	2106      	movs	r1, #6
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f005 fd4c 	bl	8007a74 <HAL_RCC_ClockConfig>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001fe2:	f000 f871 	bl	80020c8 <Error_Handler>
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	3750      	adds	r7, #80	@ 0x50
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	40023800 	.word	0x40023800
 8001ff4:	40007000 	.word	0x40007000

08001ff8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b0a2      	sub	sp, #136	@ 0x88
 8001ffc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	2284      	movs	r2, #132	@ 0x84
 8002002:	2100      	movs	r1, #0
 8002004:	4618      	mov	r0, r3
 8002006:	f010 f819 	bl	801203c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC1
 800200a:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <PeriphCommonClock_Config+0x5c>)
 800200c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800200e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002012:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002014:	2305      	movs	r3, #5
 8002016:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002018:	2302      	movs	r3, #2
 800201a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800201c:	2303      	movs	r3, #3
 800201e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002020:	2301      	movs	r3, #1
 8002022:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002024:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002028:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800202a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800202e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	4618      	mov	r0, r3
 800203c:	f005 ff32 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8002046:	f000 f83f 	bl	80020c8 <Error_Handler>
  }
}
 800204a:	bf00      	nop
 800204c:	3788      	adds	r7, #136	@ 0x88
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	00a00008 	.word	0x00a00008

08002058 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// ==============================================================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	if (caractere_recu == 'a')
 8002060:	4b0d      	ldr	r3, [pc, #52]	@ (8002098 <HAL_UART_RxCpltCallback+0x40>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b61      	cmp	r3, #97	@ 0x61
 8002066:	d104      	bne.n	8002072 <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, 1);
 8002068:	2201      	movs	r2, #1
 800206a:	2108      	movs	r1, #8
 800206c:	480b      	ldr	r0, [pc, #44]	@ (800209c <HAL_UART_RxCpltCallback+0x44>)
 800206e:	f004 f83d 	bl	80060ec <HAL_GPIO_WritePin>
	if (caractere_recu == 'e')
 8002072:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <HAL_UART_RxCpltCallback+0x40>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	2b65      	cmp	r3, #101	@ 0x65
 8002078:	d104      	bne.n	8002084 <HAL_UART_RxCpltCallback+0x2c>
		HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2108      	movs	r1, #8
 800207e:	4807      	ldr	r0, [pc, #28]	@ (800209c <HAL_UART_RxCpltCallback+0x44>)
 8002080:	f004 f834 	bl	80060ec <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart1, &caractere_recu, 1);
 8002084:	2201      	movs	r2, #1
 8002086:	4904      	ldr	r1, [pc, #16]	@ (8002098 <HAL_UART_RxCpltCallback+0x40>)
 8002088:	4805      	ldr	r0, [pc, #20]	@ (80020a0 <HAL_UART_RxCpltCallback+0x48>)
 800208a:	f008 fc44 	bl	800a916 <HAL_UART_Receive_IT>

}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200005e4 	.word	0x200005e4
 800209c:	40020c00 	.word	0x40020c00
 80020a0:	20000c14 	.word	0x20000c14

080020a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a04      	ldr	r2, [pc, #16]	@ (80020c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020b6:	f002 fa29 	bl	800450c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40001000 	.word	0x40001000

080020c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020cc:	b672      	cpsid	i
}
 80020ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <Error_Handler+0x8>

080020d4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b090      	sub	sp, #64	@ 0x40
 80020d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80020da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020de:	2200      	movs	r2, #0
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	605a      	str	r2, [r3, #4]
 80020e4:	609a      	str	r2, [r3, #8]
 80020e6:	60da      	str	r2, [r3, #12]
 80020e8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80020ea:	2300      	movs	r3, #0
 80020ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80020ee:	463b      	mov	r3, r7
 80020f0:	2228      	movs	r2, #40	@ 0x28
 80020f2:	2100      	movs	r1, #0
 80020f4:	4618      	mov	r0, r3
 80020f6:	f00f ffa1 	bl	801203c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80020fa:	4b46      	ldr	r3, [pc, #280]	@ (8002214 <MX_RTC_Init+0x140>)
 80020fc:	4a46      	ldr	r2, [pc, #280]	@ (8002218 <MX_RTC_Init+0x144>)
 80020fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002100:	4b44      	ldr	r3, [pc, #272]	@ (8002214 <MX_RTC_Init+0x140>)
 8002102:	2200      	movs	r2, #0
 8002104:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002106:	4b43      	ldr	r3, [pc, #268]	@ (8002214 <MX_RTC_Init+0x140>)
 8002108:	227f      	movs	r2, #127	@ 0x7f
 800210a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800210c:	4b41      	ldr	r3, [pc, #260]	@ (8002214 <MX_RTC_Init+0x140>)
 800210e:	22ff      	movs	r2, #255	@ 0xff
 8002110:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002112:	4b40      	ldr	r3, [pc, #256]	@ (8002214 <MX_RTC_Init+0x140>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002118:	4b3e      	ldr	r3, [pc, #248]	@ (8002214 <MX_RTC_Init+0x140>)
 800211a:	2200      	movs	r2, #0
 800211c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800211e:	4b3d      	ldr	r3, [pc, #244]	@ (8002214 <MX_RTC_Init+0x140>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002124:	483b      	ldr	r0, [pc, #236]	@ (8002214 <MX_RTC_Init+0x140>)
 8002126:	f006 faad 	bl	8008684 <HAL_RTC_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002130:	f7ff ffca 	bl	80020c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002134:	2300      	movs	r3, #0
 8002136:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002140:	2300      	movs	r3, #0
 8002142:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002146:	2300      	movs	r3, #0
 8002148:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800214a:	2300      	movs	r3, #0
 800214c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800214e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002152:	2201      	movs	r2, #1
 8002154:	4619      	mov	r1, r3
 8002156:	482f      	ldr	r0, [pc, #188]	@ (8002214 <MX_RTC_Init+0x140>)
 8002158:	f006 fb18 	bl	800878c <HAL_RTC_SetTime>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8002162:	f7ff ffb1 	bl	80020c8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800216c:	2301      	movs	r3, #1
 800216e:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 8002172:	2301      	movs	r3, #1
 8002174:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002178:	2300      	movs	r3, #0
 800217a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800217e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002182:	2201      	movs	r2, #1
 8002184:	4619      	mov	r1, r3
 8002186:	4823      	ldr	r0, [pc, #140]	@ (8002214 <MX_RTC_Init+0x140>)
 8002188:	f006 fb9a 	bl	80088c0 <HAL_RTC_SetDate>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8002192:	f7ff ff99 	bl	80020c8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002196:	2300      	movs	r3, #0
 8002198:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800219a:	2300      	movs	r3, #0
 800219c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800219e:	2300      	movs	r3, #0
 80021a0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80021ba:	2301      	movs	r3, #1
 80021bc:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80021c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80021c6:	463b      	mov	r3, r7
 80021c8:	2201      	movs	r2, #1
 80021ca:	4619      	mov	r1, r3
 80021cc:	4811      	ldr	r0, [pc, #68]	@ (8002214 <MX_RTC_Init+0x140>)
 80021ce:	f006 fbfb 	bl	80089c8 <HAL_RTC_SetAlarm>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80021d8:	f7ff ff76 	bl	80020c8 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80021dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80021e2:	463b      	mov	r3, r7
 80021e4:	2201      	movs	r2, #1
 80021e6:	4619      	mov	r1, r3
 80021e8:	480a      	ldr	r0, [pc, #40]	@ (8002214 <MX_RTC_Init+0x140>)
 80021ea:	f006 fbed 	bl	80089c8 <HAL_RTC_SetAlarm>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80021f4:	f7ff ff68 	bl	80020c8 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80021f8:	2202      	movs	r2, #2
 80021fa:	2100      	movs	r1, #0
 80021fc:	4805      	ldr	r0, [pc, #20]	@ (8002214 <MX_RTC_Init+0x140>)
 80021fe:	f006 fdaf 	bl	8008d60 <HAL_RTCEx_SetTimeStamp>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002208:	f7ff ff5e 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800220c:	bf00      	nop
 800220e:	3740      	adds	r7, #64	@ 0x40
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	200005e8 	.word	0x200005e8
 8002218:	40002800 	.word	0x40002800

0800221c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b0a4      	sub	sp, #144	@ 0x90
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002224:	f107 030c 	add.w	r3, r7, #12
 8002228:	2284      	movs	r2, #132	@ 0x84
 800222a:	2100      	movs	r1, #0
 800222c:	4618      	mov	r0, r3
 800222e:	f00f ff05 	bl	801203c <memset>
  if(rtcHandle->Instance==RTC)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a0e      	ldr	r2, [pc, #56]	@ (8002270 <HAL_RTC_MspInit+0x54>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d114      	bne.n	8002266 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800223c:	2320      	movs	r3, #32
 800223e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002240:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002244:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002246:	f107 030c 	add.w	r3, r7, #12
 800224a:	4618      	mov	r0, r3
 800224c:	f005 fe2a 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002256:	f7ff ff37 	bl	80020c8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <HAL_RTC_MspInit+0x58>)
 800225c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800225e:	4a05      	ldr	r2, [pc, #20]	@ (8002274 <HAL_RTC_MspInit+0x58>)
 8002260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002264:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002266:	bf00      	nop
 8002268:	3790      	adds	r7, #144	@ 0x90
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40002800 	.word	0x40002800
 8002274:	40023800 	.word	0x40023800

08002278 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800227c:	4b0c      	ldr	r3, [pc, #48]	@ (80022b0 <MX_SDMMC1_SD_Init+0x38>)
 800227e:	4a0d      	ldr	r2, [pc, #52]	@ (80022b4 <MX_SDMMC1_SD_Init+0x3c>)
 8002280:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8002282:	4b0b      	ldr	r3, [pc, #44]	@ (80022b0 <MX_SDMMC1_SD_Init+0x38>)
 8002284:	2200      	movs	r2, #0
 8002286:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002288:	4b09      	ldr	r3, [pc, #36]	@ (80022b0 <MX_SDMMC1_SD_Init+0x38>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800228e:	4b08      	ldr	r3, [pc, #32]	@ (80022b0 <MX_SDMMC1_SD_Init+0x38>)
 8002290:	2200      	movs	r2, #0
 8002292:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <MX_SDMMC1_SD_Init+0x38>)
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800229a:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <MX_SDMMC1_SD_Init+0x38>)
 800229c:	2200      	movs	r2, #0
 800229e:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80022a0:	4b03      	ldr	r3, [pc, #12]	@ (80022b0 <MX_SDMMC1_SD_Init+0x38>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	20000608 	.word	0x20000608
 80022b4:	40012c00 	.word	0x40012c00

080022b8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a25      	ldr	r2, [pc, #148]	@ (800236c <HAL_SD_MspInit+0xb4>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d144      	bne.n	8002364 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80022da:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <HAL_SD_MspInit+0xb8>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a24      	ldr	r2, [pc, #144]	@ (8002370 <HAL_SD_MspInit+0xb8>)
 80022e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <HAL_SD_MspInit+0xb8>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002370 <HAL_SD_MspInit+0xb8>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	4a1e      	ldr	r2, [pc, #120]	@ (8002370 <HAL_SD_MspInit+0xb8>)
 80022f8:	f043 0304 	orr.w	r3, r3, #4
 80022fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002370 <HAL_SD_MspInit+0xb8>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800230a:	4b19      	ldr	r3, [pc, #100]	@ (8002370 <HAL_SD_MspInit+0xb8>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	4a18      	ldr	r2, [pc, #96]	@ (8002370 <HAL_SD_MspInit+0xb8>)
 8002310:	f043 0308 	orr.w	r3, r3, #8
 8002314:	6313      	str	r3, [r2, #48]	@ 0x30
 8002316:	4b16      	ldr	r3, [pc, #88]	@ (8002370 <HAL_SD_MspInit+0xb8>)
 8002318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231a:	f003 0308 	and.w	r3, r3, #8
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8002322:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8002326:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002334:	230c      	movs	r3, #12
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	480d      	ldr	r0, [pc, #52]	@ (8002374 <HAL_SD_MspInit+0xbc>)
 8002340:	f003 fc04 	bl	8005b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002344:	2304      	movs	r3, #4
 8002346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002354:	230c      	movs	r3, #12
 8002356:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4619      	mov	r1, r3
 800235e:	4806      	ldr	r0, [pc, #24]	@ (8002378 <HAL_SD_MspInit+0xc0>)
 8002360:	f003 fbf4 	bl	8005b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8002364:	bf00      	nop
 8002366:	3728      	adds	r7, #40	@ 0x28
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40012c00 	.word	0x40012c00
 8002370:	40023800 	.word	0x40023800
 8002374:	40020800 	.word	0x40020800
 8002378:	40020c00 	.word	0x40020c00

0800237c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002380:	4b1b      	ldr	r3, [pc, #108]	@ (80023f0 <MX_SPI2_Init+0x74>)
 8002382:	4a1c      	ldr	r2, [pc, #112]	@ (80023f4 <MX_SPI2_Init+0x78>)
 8002384:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002386:	4b1a      	ldr	r3, [pc, #104]	@ (80023f0 <MX_SPI2_Init+0x74>)
 8002388:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800238c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800238e:	4b18      	ldr	r3, [pc, #96]	@ (80023f0 <MX_SPI2_Init+0x74>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002394:	4b16      	ldr	r3, [pc, #88]	@ (80023f0 <MX_SPI2_Init+0x74>)
 8002396:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800239a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800239c:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <MX_SPI2_Init+0x74>)
 800239e:	2200      	movs	r2, #0
 80023a0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023a2:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <MX_SPI2_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80023a8:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <MX_SPI2_Init+0x74>)
 80023aa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80023ae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023b0:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <MX_SPI2_Init+0x74>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023b6:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <MX_SPI2_Init+0x74>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80023bc:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <MX_SPI2_Init+0x74>)
 80023be:	2200      	movs	r2, #0
 80023c0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c2:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <MX_SPI2_Init+0x74>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80023c8:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <MX_SPI2_Init+0x74>)
 80023ca:	2207      	movs	r2, #7
 80023cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023ce:	4b08      	ldr	r3, [pc, #32]	@ (80023f0 <MX_SPI2_Init+0x74>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80023d4:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <MX_SPI2_Init+0x74>)
 80023d6:	2208      	movs	r2, #8
 80023d8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80023da:	4805      	ldr	r0, [pc, #20]	@ (80023f0 <MX_SPI2_Init+0x74>)
 80023dc:	f007 fc57 	bl	8009c8e <HAL_SPI_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80023e6:	f7ff fe6f 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2000068c 	.word	0x2000068c
 80023f4:	40003800 	.word	0x40003800

080023f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b08a      	sub	sp, #40	@ 0x28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002400:	f107 0314 	add.w	r3, r7, #20
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	605a      	str	r2, [r3, #4]
 800240a:	609a      	str	r2, [r3, #8]
 800240c:	60da      	str	r2, [r3, #12]
 800240e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a25      	ldr	r2, [pc, #148]	@ (80024ac <HAL_SPI_MspInit+0xb4>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d144      	bne.n	80024a4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800241a:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <HAL_SPI_MspInit+0xb8>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	4a24      	ldr	r2, [pc, #144]	@ (80024b0 <HAL_SPI_MspInit+0xb8>)
 8002420:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002424:	6413      	str	r3, [r2, #64]	@ 0x40
 8002426:	4b22      	ldr	r3, [pc, #136]	@ (80024b0 <HAL_SPI_MspInit+0xb8>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002432:	4b1f      	ldr	r3, [pc, #124]	@ (80024b0 <HAL_SPI_MspInit+0xb8>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	4a1e      	ldr	r2, [pc, #120]	@ (80024b0 <HAL_SPI_MspInit+0xb8>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800243c:	6313      	str	r3, [r2, #48]	@ 0x30
 800243e:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <HAL_SPI_MspInit+0xb8>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244a:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <HAL_SPI_MspInit+0xb8>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800244e:	4a18      	ldr	r2, [pc, #96]	@ (80024b0 <HAL_SPI_MspInit+0xb8>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	6313      	str	r3, [r2, #48]	@ 0x30
 8002456:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <HAL_SPI_MspInit+0xb8>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 8002462:	2303      	movs	r3, #3
 8002464:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002466:	2302      	movs	r3, #2
 8002468:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246e:	2303      	movs	r3, #3
 8002470:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002472:	2305      	movs	r3, #5
 8002474:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002476:	f107 0314 	add.w	r3, r7, #20
 800247a:	4619      	mov	r1, r3
 800247c:	480d      	ldr	r0, [pc, #52]	@ (80024b4 <HAL_SPI_MspInit+0xbc>)
 800247e:	f003 fb65 	bl	8005b4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8002482:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002486:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002488:	2302      	movs	r3, #2
 800248a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248c:	2300      	movs	r3, #0
 800248e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002494:	2305      	movs	r3, #5
 8002496:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4619      	mov	r1, r3
 800249e:	4806      	ldr	r0, [pc, #24]	@ (80024b8 <HAL_SPI_MspInit+0xc0>)
 80024a0:	f003 fb54 	bl	8005b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80024a4:	bf00      	nop
 80024a6:	3728      	adds	r7, #40	@ 0x28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40003800 	.word	0x40003800
 80024b0:	40023800 	.word	0x40023800
 80024b4:	40022000 	.word	0x40022000
 80024b8:	40020400 	.word	0x40020400

080024bc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	@ 0x30
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a51      	ldr	r2, [pc, #324]	@ (800260c <I2Cx_MspInit+0x150>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d14d      	bne.n	8002568 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80024cc:	4b50      	ldr	r3, [pc, #320]	@ (8002610 <I2Cx_MspInit+0x154>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002610 <I2Cx_MspInit+0x154>)
 80024d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80024d8:	4b4d      	ldr	r3, [pc, #308]	@ (8002610 <I2Cx_MspInit+0x154>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80024e4:	2380      	movs	r3, #128	@ 0x80
 80024e6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80024e8:	2312      	movs	r3, #18
 80024ea:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80024f0:	2302      	movs	r3, #2
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80024f4:	2304      	movs	r3, #4
 80024f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	4619      	mov	r1, r3
 80024fe:	4845      	ldr	r0, [pc, #276]	@ (8002614 <I2Cx_MspInit+0x158>)
 8002500:	f003 fb24 	bl	8005b4c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002504:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800250a:	f107 031c 	add.w	r3, r7, #28
 800250e:	4619      	mov	r1, r3
 8002510:	4840      	ldr	r0, [pc, #256]	@ (8002614 <I2Cx_MspInit+0x158>)
 8002512:	f003 fb1b 	bl	8005b4c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002516:	4b3e      	ldr	r3, [pc, #248]	@ (8002610 <I2Cx_MspInit+0x154>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251a:	4a3d      	ldr	r2, [pc, #244]	@ (8002610 <I2Cx_MspInit+0x154>)
 800251c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002520:	6413      	str	r3, [r2, #64]	@ 0x40
 8002522:	4b3b      	ldr	r3, [pc, #236]	@ (8002610 <I2Cx_MspInit+0x154>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002526:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800252e:	4b38      	ldr	r3, [pc, #224]	@ (8002610 <I2Cx_MspInit+0x154>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a37      	ldr	r2, [pc, #220]	@ (8002610 <I2Cx_MspInit+0x154>)
 8002534:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002538:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800253a:	4b35      	ldr	r3, [pc, #212]	@ (8002610 <I2Cx_MspInit+0x154>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a34      	ldr	r2, [pc, #208]	@ (8002610 <I2Cx_MspInit+0x154>)
 8002540:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002544:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	210f      	movs	r1, #15
 800254a:	2048      	movs	r0, #72	@ 0x48
 800254c:	f002 fb6e 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002550:	2048      	movs	r0, #72	@ 0x48
 8002552:	f002 fb87 	bl	8004c64 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	210f      	movs	r1, #15
 800255a:	2049      	movs	r0, #73	@ 0x49
 800255c:	f002 fb66 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002560:	2049      	movs	r0, #73	@ 0x49
 8002562:	f002 fb7f 	bl	8004c64 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002566:	e04d      	b.n	8002604 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002568:	4b29      	ldr	r3, [pc, #164]	@ (8002610 <I2Cx_MspInit+0x154>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800256c:	4a28      	ldr	r2, [pc, #160]	@ (8002610 <I2Cx_MspInit+0x154>)
 800256e:	f043 0302 	orr.w	r3, r3, #2
 8002572:	6313      	str	r3, [r2, #48]	@ 0x30
 8002574:	4b26      	ldr	r3, [pc, #152]	@ (8002610 <I2Cx_MspInit+0x154>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002584:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002586:	2312      	movs	r3, #18
 8002588:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800258e:	2302      	movs	r3, #2
 8002590:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002592:	2304      	movs	r3, #4
 8002594:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	481e      	ldr	r0, [pc, #120]	@ (8002618 <I2Cx_MspInit+0x15c>)
 800259e:	f003 fad5 	bl	8005b4c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80025a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025a8:	f107 031c 	add.w	r3, r7, #28
 80025ac:	4619      	mov	r1, r3
 80025ae:	481a      	ldr	r0, [pc, #104]	@ (8002618 <I2Cx_MspInit+0x15c>)
 80025b0:	f003 facc 	bl	8005b4c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80025b4:	4b16      	ldr	r3, [pc, #88]	@ (8002610 <I2Cx_MspInit+0x154>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025b8:	4a15      	ldr	r2, [pc, #84]	@ (8002610 <I2Cx_MspInit+0x154>)
 80025ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025be:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c0:	4b13      	ldr	r3, [pc, #76]	@ (8002610 <I2Cx_MspInit+0x154>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80025cc:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <I2Cx_MspInit+0x154>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4a0f      	ldr	r2, [pc, #60]	@ (8002610 <I2Cx_MspInit+0x154>)
 80025d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80025d6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80025d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <I2Cx_MspInit+0x154>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002610 <I2Cx_MspInit+0x154>)
 80025de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80025e2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80025e4:	2200      	movs	r2, #0
 80025e6:	210f      	movs	r1, #15
 80025e8:	201f      	movs	r0, #31
 80025ea:	f002 fb1f 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80025ee:	201f      	movs	r0, #31
 80025f0:	f002 fb38 	bl	8004c64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	210f      	movs	r1, #15
 80025f8:	2020      	movs	r0, #32
 80025fa:	f002 fb17 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80025fe:	2020      	movs	r0, #32
 8002600:	f002 fb30 	bl	8004c64 <HAL_NVIC_EnableIRQ>
}
 8002604:	bf00      	nop
 8002606:	3730      	adds	r7, #48	@ 0x30
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	200006f0 	.word	0x200006f0
 8002610:	40023800 	.word	0x40023800
 8002614:	40021c00 	.word	0x40021c00
 8002618:	40020400 	.word	0x40020400

0800261c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f004 f869 	bl	80066fc <HAL_I2C_GetState>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d125      	bne.n	800267c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <I2Cx_Init+0x68>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d103      	bne.n	8002640 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a13      	ldr	r2, [pc, #76]	@ (8002688 <I2Cx_Init+0x6c>)
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e002      	b.n	8002646 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a12      	ldr	r2, [pc, #72]	@ (800268c <I2Cx_Init+0x70>)
 8002644:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a11      	ldr	r2, [pc, #68]	@ (8002690 <I2Cx_Init+0x74>)
 800264a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff23 	bl	80024bc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f003 fd52 	bl	8006120 <HAL_I2C_Init>
  }
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	200006f0 	.word	0x200006f0
 8002688:	40005c00 	.word	0x40005c00
 800268c:	40005400 	.word	0x40005400
 8002690:	40912732 	.word	0x40912732

08002694 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	@ 0x28
 8002698:	af04      	add	r7, sp, #16
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	72fb      	strb	r3, [r7, #11]
 80026a6:	460b      	mov	r3, r1
 80026a8:	813b      	strh	r3, [r7, #8]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80026b2:	7afb      	ldrb	r3, [r7, #11]
 80026b4:	b299      	uxth	r1, r3
 80026b6:	88f8      	ldrh	r0, [r7, #6]
 80026b8:	893a      	ldrh	r2, [r7, #8]
 80026ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026be:	9302      	str	r3, [sp, #8]
 80026c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4603      	mov	r3, r0
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f003 fefc 	bl	80064c8 <HAL_I2C_Mem_Read>
 80026d0:	4603      	mov	r3, r0
 80026d2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d004      	beq.n	80026e4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80026da:	7afb      	ldrb	r3, [r7, #11]
 80026dc:	4619      	mov	r1, r3
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f832 	bl	8002748 <I2Cx_Error>
  }
  return status;    
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b08a      	sub	sp, #40	@ 0x28
 80026f2:	af04      	add	r7, sp, #16
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	4608      	mov	r0, r1
 80026f8:	4611      	mov	r1, r2
 80026fa:	461a      	mov	r2, r3
 80026fc:	4603      	mov	r3, r0
 80026fe:	72fb      	strb	r3, [r7, #11]
 8002700:	460b      	mov	r3, r1
 8002702:	813b      	strh	r3, [r7, #8]
 8002704:	4613      	mov	r3, r2
 8002706:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800270c:	7afb      	ldrb	r3, [r7, #11]
 800270e:	b299      	uxth	r1, r3
 8002710:	88f8      	ldrh	r0, [r7, #6]
 8002712:	893a      	ldrh	r2, [r7, #8]
 8002714:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	4603      	mov	r3, r0
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f003 fdbb 	bl	80062a0 <HAL_I2C_Mem_Write>
 800272a:	4603      	mov	r3, r0
 800272c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800272e:	7dfb      	ldrb	r3, [r7, #23]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002734:	7afb      	ldrb	r3, [r7, #11]
 8002736:	4619      	mov	r1, r3
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f805 	bl	8002748 <I2Cx_Error>
  }
  return status;
 800273e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f003 fd73 	bl	8006240 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ff5e 	bl	800261c <I2Cx_Init>
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800276c:	4802      	ldr	r0, [pc, #8]	@ (8002778 <TS_IO_Init+0x10>)
 800276e:	f7ff ff55 	bl	800261c <I2Cx_Init>
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	200006f0 	.word	0x200006f0

0800277c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af02      	add	r7, sp, #8
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	460b      	mov	r3, r1
 8002788:	71bb      	strb	r3, [r7, #6]
 800278a:	4613      	mov	r3, r2
 800278c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	b29a      	uxth	r2, r3
 8002792:	79f9      	ldrb	r1, [r7, #7]
 8002794:	2301      	movs	r3, #1
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	1d7b      	adds	r3, r7, #5
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2301      	movs	r3, #1
 800279e:	4803      	ldr	r0, [pc, #12]	@ (80027ac <TS_IO_Write+0x30>)
 80027a0:	f7ff ffa5 	bl	80026ee <I2Cx_WriteMultiple>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	200006f0 	.word	0x200006f0

080027b0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	4603      	mov	r3, r0
 80027b8:	460a      	mov	r2, r1
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	4613      	mov	r3, r2
 80027be:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	79f9      	ldrb	r1, [r7, #7]
 80027ca:	2301      	movs	r3, #1
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	f107 030f 	add.w	r3, r7, #15
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2301      	movs	r3, #1
 80027d6:	4804      	ldr	r0, [pc, #16]	@ (80027e8 <TS_IO_Read+0x38>)
 80027d8:	f7ff ff5c 	bl	8002694 <I2Cx_ReadMultiple>

  return read_value;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	200006f0 	.word	0x200006f0

080027ec <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f001 fea9 	bl	800454c <HAL_Delay>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002808:	4b31      	ldr	r3, [pc, #196]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 800280a:	2228      	movs	r2, #40	@ 0x28
 800280c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800280e:	4b30      	ldr	r3, [pc, #192]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 8002810:	2209      	movs	r2, #9
 8002812:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002814:	4b2e      	ldr	r3, [pc, #184]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 8002816:	2235      	movs	r2, #53	@ 0x35
 8002818:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800281a:	4b2d      	ldr	r3, [pc, #180]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 800281c:	220b      	movs	r2, #11
 800281e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002820:	4b2b      	ldr	r3, [pc, #172]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 8002822:	f240 121b 	movw	r2, #283	@ 0x11b
 8002826:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002828:	4b29      	ldr	r3, [pc, #164]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 800282a:	f240 2215 	movw	r2, #533	@ 0x215
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002830:	4b27      	ldr	r3, [pc, #156]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 8002832:	f240 121d 	movw	r2, #285	@ 0x11d
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002838:	4b25      	ldr	r3, [pc, #148]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 800283a:	f240 2235 	movw	r2, #565	@ 0x235
 800283e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002840:	2100      	movs	r1, #0
 8002842:	4823      	ldr	r0, [pc, #140]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 8002844:	f000 fbd4 	bl	8002ff0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002848:	4b21      	ldr	r3, [pc, #132]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 800284a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800284e:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002850:	4b1f      	ldr	r3, [pc, #124]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 8002852:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8002856:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002858:	4b1d      	ldr	r3, [pc, #116]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002860:	4b1b      	ldr	r3, [pc, #108]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002868:	4b19      	ldr	r3, [pc, #100]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002870:	4b17      	ldr	r3, [pc, #92]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 8002872:	2200      	movs	r2, #0
 8002874:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002876:	4b16      	ldr	r3, [pc, #88]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800287c:	4b14      	ldr	r3, [pc, #80]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002882:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002888:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 800288a:	4a12      	ldr	r2, [pc, #72]	@ (80028d4 <BSP_LCD_Init+0xd0>)
 800288c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800288e:	4810      	ldr	r0, [pc, #64]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 8002890:	f004 fc44 	bl	800711c <HAL_LTDC_GetState>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800289a:	2100      	movs	r1, #0
 800289c:	480c      	ldr	r0, [pc, #48]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 800289e:	f000 facd 	bl	8002e3c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80028a2:	480b      	ldr	r0, [pc, #44]	@ (80028d0 <BSP_LCD_Init+0xcc>)
 80028a4:	f004 fa6a 	bl	8006d7c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80028a8:	2201      	movs	r2, #1
 80028aa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028ae:	480a      	ldr	r0, [pc, #40]	@ (80028d8 <BSP_LCD_Init+0xd4>)
 80028b0:	f003 fc1c 	bl	80060ec <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80028b4:	2201      	movs	r2, #1
 80028b6:	2108      	movs	r1, #8
 80028b8:	4808      	ldr	r0, [pc, #32]	@ (80028dc <BSP_LCD_Init+0xd8>)
 80028ba:	f003 fc17 	bl	80060ec <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80028be:	f000 fcb7 	bl	8003230 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80028c2:	4807      	ldr	r0, [pc, #28]	@ (80028e0 <BSP_LCD_Init+0xdc>)
 80028c4:	f000 f8d8 	bl	8002a78 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000744 	.word	0x20000744
 80028d4:	40016800 	.word	0x40016800
 80028d8:	40022000 	.word	0x40022000
 80028dc:	40022800 	.word	0x40022800
 80028e0:	20000028 	.word	0x20000028

080028e4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80028e8:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <BSP_LCD_GetXSize+0x20>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a06      	ldr	r2, [pc, #24]	@ (8002908 <BSP_LCD_GetXSize+0x24>)
 80028ee:	2134      	movs	r1, #52	@ 0x34
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3360      	adds	r3, #96	@ 0x60
 80028f8:	681b      	ldr	r3, [r3, #0]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	2000082c 	.word	0x2000082c
 8002908:	20000744 	.word	0x20000744

0800290c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002910:	4b06      	ldr	r3, [pc, #24]	@ (800292c <BSP_LCD_GetYSize+0x20>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a06      	ldr	r2, [pc, #24]	@ (8002930 <BSP_LCD_GetYSize+0x24>)
 8002916:	2134      	movs	r1, #52	@ 0x34
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3364      	adds	r3, #100	@ 0x64
 8002920:	681b      	ldr	r3, [r3, #0]
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	2000082c 	.word	0x2000082c
 8002930:	20000744 	.word	0x20000744

08002934 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002934:	b580      	push	{r7, lr}
 8002936:	b090      	sub	sp, #64	@ 0x40
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002944:	f7ff ffce 	bl	80028e4 <BSP_LCD_GetXSize>
 8002948:	4603      	mov	r3, r0
 800294a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002950:	f7ff ffdc 	bl	800290c <BSP_LCD_GetYSize>
 8002954:	4603      	mov	r3, r0
 8002956:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8002960:	23ff      	movs	r3, #255	@ 0xff
 8002962:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800297a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800297e:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002980:	2307      	movs	r3, #7
 8002982:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002984:	f7ff ffae 	bl	80028e4 <BSP_LCD_GetXSize>
 8002988:	4603      	mov	r3, r0
 800298a:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800298c:	f7ff ffbe 	bl	800290c <BSP_LCD_GetYSize>
 8002990:	4603      	mov	r3, r0
 8002992:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	4619      	mov	r1, r3
 800299c:	4812      	ldr	r0, [pc, #72]	@ (80029e8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800299e:	f004 fb7f 	bl	80070a0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80029a2:	88fa      	ldrh	r2, [r7, #6]
 80029a4:	4911      	ldr	r1, [pc, #68]	@ (80029ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3304      	adds	r3, #4
 80029b2:	f04f 32ff 	mov.w	r2, #4294967295
 80029b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80029b8:	88fa      	ldrh	r2, [r7, #6]
 80029ba:	490c      	ldr	r1, [pc, #48]	@ (80029ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3308      	adds	r3, #8
 80029c8:	4a09      	ldr	r2, [pc, #36]	@ (80029f0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80029ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80029cc:	88fa      	ldrh	r2, [r7, #6]
 80029ce:	4907      	ldr	r1, [pc, #28]	@ (80029ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 80029de:	601a      	str	r2, [r3, #0]
}
 80029e0:	bf00      	nop
 80029e2:	3740      	adds	r7, #64	@ 0x40
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000744 	.word	0x20000744
 80029ec:	20000830 	.word	0x20000830
 80029f0:	20000028 	.word	0x20000028

080029f4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80029fc:	4a04      	ldr	r2, [pc, #16]	@ (8002a10 <BSP_LCD_SelectLayer+0x1c>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
} 
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	2000082c 	.word	0x2000082c

08002a14 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002a1c:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <BSP_LCD_SetTextColor+0x28>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4907      	ldr	r1, [pc, #28]	@ (8002a40 <BSP_LCD_SetTextColor+0x2c>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	601a      	str	r2, [r3, #0]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	2000082c 	.word	0x2000082c
 8002a40:	20000830 	.word	0x20000830

08002a44 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002a4c:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <BSP_LCD_SetBackColor+0x2c>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4908      	ldr	r1, [pc, #32]	@ (8002a74 <BSP_LCD_SetBackColor+0x30>)
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	601a      	str	r2, [r3, #0]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	2000082c 	.word	0x2000082c
 8002a74:	20000830 	.word	0x20000830

08002a78 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002a80:	4b08      	ldr	r3, [pc, #32]	@ (8002aa4 <BSP_LCD_SetFont+0x2c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4908      	ldr	r1, [pc, #32]	@ (8002aa8 <BSP_LCD_SetFont+0x30>)
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	3308      	adds	r3, #8
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	601a      	str	r2, [r3, #0]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	2000082c 	.word	0x2000082c
 8002aa8:	20000830 	.word	0x20000830

08002aac <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002ab0:	4b07      	ldr	r3, [pc, #28]	@ (8002ad0 <BSP_LCD_GetFont+0x24>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4907      	ldr	r1, [pc, #28]	@ (8002ad4 <BSP_LCD_GetFont+0x28>)
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	2000082c 	.word	0x2000082c
 8002ad4:	20000830 	.word	0x20000830

08002ad8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8002b20 <BSP_LCD_Clear+0x48>)
 8002ae2:	681c      	ldr	r4, [r3, #0]
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b20 <BSP_LCD_Clear+0x48>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8002b24 <BSP_LCD_Clear+0x4c>)
 8002aea:	2134      	movs	r1, #52	@ 0x34
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	335c      	adds	r3, #92	@ 0x5c
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	461e      	mov	r6, r3
 8002af8:	f7ff fef4 	bl	80028e4 <BSP_LCD_GetXSize>
 8002afc:	4605      	mov	r5, r0
 8002afe:	f7ff ff05 	bl	800290c <BSP_LCD_GetYSize>
 8002b02:	4602      	mov	r2, r0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	462a      	mov	r2, r5
 8002b10:	4631      	mov	r1, r6
 8002b12:	4620      	mov	r0, r4
 8002b14:	f000 fb40 	bl	8003198 <LL_FillBuffer>
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b20:	2000082c 	.word	0x2000082c
 8002b24:	20000744 	.word	0x20000744

08002b28 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	80fb      	strh	r3, [r7, #6]
 8002b32:	460b      	mov	r3, r1
 8002b34:	80bb      	strh	r3, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba8 <BSP_LCD_DisplayChar+0x80>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	491b      	ldr	r1, [pc, #108]	@ (8002bac <BSP_LCD_DisplayChar+0x84>)
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b56:	4b14      	ldr	r3, [pc, #80]	@ (8002ba8 <BSP_LCD_DisplayChar+0x80>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4c14      	ldr	r4, [pc, #80]	@ (8002bac <BSP_LCD_DisplayChar+0x84>)
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4423      	add	r3, r4
 8002b66:	3308      	adds	r3, #8
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b6c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba8 <BSP_LCD_DisplayChar+0x80>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4c0d      	ldr	r4, [pc, #52]	@ (8002bac <BSP_LCD_DisplayChar+0x84>)
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4423      	add	r3, r4
 8002b80:	3308      	adds	r3, #8
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	889b      	ldrh	r3, [r3, #4]
 8002b86:	3307      	adds	r3, #7
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	da00      	bge.n	8002b8e <BSP_LCD_DisplayChar+0x66>
 8002b8c:	3307      	adds	r3, #7
 8002b8e:	10db      	asrs	r3, r3, #3
 8002b90:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b94:	18ca      	adds	r2, r1, r3
 8002b96:	88b9      	ldrh	r1, [r7, #4]
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fa44 	bl	8003028 <DrawChar>
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd90      	pop	{r4, r7, pc}
 8002ba8:	2000082c 	.word	0x2000082c
 8002bac:	20000830 	.word	0x20000830

08002bb0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60ba      	str	r2, [r7, #8]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4603      	mov	r3, r0
 8002bbc:	81fb      	strh	r3, [r7, #14]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	81bb      	strh	r3, [r7, #12]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	83fb      	strh	r3, [r7, #30]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002bda:	e002      	b.n	8002be2 <BSP_LCD_DisplayStringAt+0x32>
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	3301      	adds	r3, #1
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	617a      	str	r2, [r7, #20]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f6      	bne.n	8002bdc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002bee:	f7ff fe79 	bl	80028e4 <BSP_LCD_GetXSize>
 8002bf2:	4601      	mov	r1, r0
 8002bf4:	4b50      	ldr	r3, [pc, #320]	@ (8002d38 <BSP_LCD_DisplayStringAt+0x188>)
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4850      	ldr	r0, [pc, #320]	@ (8002d3c <BSP_LCD_DisplayStringAt+0x18c>)
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	4413      	add	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4403      	add	r3, r0
 8002c04:	3308      	adds	r3, #8
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	889b      	ldrh	r3, [r3, #4]
 8002c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c0e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d01c      	beq.n	8002c50 <BSP_LCD_DisplayStringAt+0xa0>
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	dc33      	bgt.n	8002c82 <BSP_LCD_DisplayStringAt+0xd2>
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d002      	beq.n	8002c24 <BSP_LCD_DisplayStringAt+0x74>
 8002c1e:	2b02      	cmp	r3, #2
 8002c20:	d019      	beq.n	8002c56 <BSP_LCD_DisplayStringAt+0xa6>
 8002c22:	e02e      	b.n	8002c82 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	1ad1      	subs	r1, r2, r3
 8002c2a:	4b43      	ldr	r3, [pc, #268]	@ (8002d38 <BSP_LCD_DisplayStringAt+0x188>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4843      	ldr	r0, [pc, #268]	@ (8002d3c <BSP_LCD_DisplayStringAt+0x18c>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4403      	add	r3, r0
 8002c3a:	3308      	adds	r3, #8
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	889b      	ldrh	r3, [r3, #4]
 8002c40:	fb01 f303 	mul.w	r3, r1, r3
 8002c44:	085b      	lsrs	r3, r3, #1
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	89fb      	ldrh	r3, [r7, #14]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	83fb      	strh	r3, [r7, #30]
      break;
 8002c4e:	e01b      	b.n	8002c88 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002c50:	89fb      	ldrh	r3, [r7, #14]
 8002c52:	83fb      	strh	r3, [r7, #30]
      break;
 8002c54:	e018      	b.n	8002c88 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	b299      	uxth	r1, r3
 8002c5e:	4b36      	ldr	r3, [pc, #216]	@ (8002d38 <BSP_LCD_DisplayStringAt+0x188>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4836      	ldr	r0, [pc, #216]	@ (8002d3c <BSP_LCD_DisplayStringAt+0x18c>)
 8002c64:	4613      	mov	r3, r2
 8002c66:	005b      	lsls	r3, r3, #1
 8002c68:	4413      	add	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4403      	add	r3, r0
 8002c6e:	3308      	adds	r3, #8
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	889b      	ldrh	r3, [r3, #4]
 8002c74:	fb11 f303 	smulbb	r3, r1, r3
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	89fb      	ldrh	r3, [r7, #14]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	83fb      	strh	r3, [r7, #30]
      break;
 8002c80:	e002      	b.n	8002c88 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002c82:	89fb      	ldrh	r3, [r7, #14]
 8002c84:	83fb      	strh	r3, [r7, #30]
      break;
 8002c86:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002c88:	8bfb      	ldrh	r3, [r7, #30]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <BSP_LCD_DisplayStringAt+0xe6>
 8002c8e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	da1d      	bge.n	8002cd2 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002c96:	2301      	movs	r3, #1
 8002c98:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002c9a:	e01a      	b.n	8002cd2 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	781a      	ldrb	r2, [r3, #0]
 8002ca0:	89b9      	ldrh	r1, [r7, #12]
 8002ca2:	8bfb      	ldrh	r3, [r7, #30]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff3f 	bl	8002b28 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002caa:	4b23      	ldr	r3, [pc, #140]	@ (8002d38 <BSP_LCD_DisplayStringAt+0x188>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4923      	ldr	r1, [pc, #140]	@ (8002d3c <BSP_LCD_DisplayStringAt+0x18c>)
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	4413      	add	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	3308      	adds	r3, #8
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	889a      	ldrh	r2, [r3, #4]
 8002cc0:	8bfb      	ldrh	r3, [r7, #30]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	3301      	adds	r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
    i++;
 8002ccc:	8bbb      	ldrh	r3, [r7, #28]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bf14      	ite	ne
 8002cda:	2301      	movne	r3, #1
 8002cdc:	2300      	moveq	r3, #0
 8002cde:	b2dc      	uxtb	r4, r3
 8002ce0:	f7ff fe00 	bl	80028e4 <BSP_LCD_GetXSize>
 8002ce4:	8bb9      	ldrh	r1, [r7, #28]
 8002ce6:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <BSP_LCD_DisplayStringAt+0x188>)
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	4d14      	ldr	r5, [pc, #80]	@ (8002d3c <BSP_LCD_DisplayStringAt+0x18c>)
 8002cec:	4613      	mov	r3, r2
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	442b      	add	r3, r5
 8002cf6:	3308      	adds	r3, #8
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	889b      	ldrh	r3, [r3, #4]
 8002cfc:	fb01 f303 	mul.w	r3, r1, r3
 8002d00:	1ac3      	subs	r3, r0, r3
 8002d02:	b299      	uxth	r1, r3
 8002d04:	4b0c      	ldr	r3, [pc, #48]	@ (8002d38 <BSP_LCD_DisplayStringAt+0x188>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	480c      	ldr	r0, [pc, #48]	@ (8002d3c <BSP_LCD_DisplayStringAt+0x18c>)
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4403      	add	r3, r0
 8002d14:	3308      	adds	r3, #8
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	889b      	ldrh	r3, [r3, #4]
 8002d1a:	4299      	cmp	r1, r3
 8002d1c:	bf2c      	ite	cs
 8002d1e:	2301      	movcs	r3, #1
 8002d20:	2300      	movcc	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	4023      	ands	r3, r4
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1b7      	bne.n	8002c9c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	3720      	adds	r7, #32
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bdb0      	pop	{r4, r5, r7, pc}
 8002d36:	bf00      	nop
 8002d38:	2000082c 	.word	0x2000082c
 8002d3c:	20000830 	.word	0x20000830

08002d40 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	6039      	str	r1, [r7, #0]
 8002d4a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002d4c:	f7ff feae 	bl	8002aac <BSP_LCD_GetFont>
 8002d50:	4603      	mov	r3, r0
 8002d52:	88db      	ldrh	r3, [r3, #6]
 8002d54:	88fa      	ldrh	r2, [r7, #6]
 8002d56:	fb12 f303 	smulbb	r3, r2, r3
 8002d5a:	b299      	uxth	r1, r3
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	2000      	movs	r0, #0
 8002d62:	f7ff ff25 	bl	8002bb0 <BSP_LCD_DisplayStringAt>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002d70:	b5b0      	push	{r4, r5, r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	603a      	str	r2, [r7, #0]
 8002d7a:	80fb      	strh	r3, [r7, #6]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002d80:	4b1d      	ldr	r3, [pc, #116]	@ (8002df8 <BSP_LCD_DrawPixel+0x88>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1d      	ldr	r2, [pc, #116]	@ (8002dfc <BSP_LCD_DrawPixel+0x8c>)
 8002d86:	2134      	movs	r1, #52	@ 0x34
 8002d88:	fb01 f303 	mul.w	r3, r1, r3
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3348      	adds	r3, #72	@ 0x48
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d116      	bne.n	8002dc4 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002d96:	4b18      	ldr	r3, [pc, #96]	@ (8002df8 <BSP_LCD_DrawPixel+0x88>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a18      	ldr	r2, [pc, #96]	@ (8002dfc <BSP_LCD_DrawPixel+0x8c>)
 8002d9c:	2134      	movs	r1, #52	@ 0x34
 8002d9e:	fb01 f303 	mul.w	r3, r1, r3
 8002da2:	4413      	add	r3, r2
 8002da4:	335c      	adds	r3, #92	@ 0x5c
 8002da6:	681c      	ldr	r4, [r3, #0]
 8002da8:	88bd      	ldrh	r5, [r7, #4]
 8002daa:	f7ff fd9b 	bl	80028e4 <BSP_LCD_GetXSize>
 8002dae:	4603      	mov	r3, r0
 8002db0:	fb03 f205 	mul.w	r2, r3, r5
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	4413      	add	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4423      	add	r3, r4
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	b292      	uxth	r2, r2
 8002dc0:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002dc2:	e015      	b.n	8002df0 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <BSP_LCD_DrawPixel+0x88>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8002dfc <BSP_LCD_DrawPixel+0x8c>)
 8002dca:	2134      	movs	r1, #52	@ 0x34
 8002dcc:	fb01 f303 	mul.w	r3, r1, r3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	335c      	adds	r3, #92	@ 0x5c
 8002dd4:	681c      	ldr	r4, [r3, #0]
 8002dd6:	88bd      	ldrh	r5, [r7, #4]
 8002dd8:	f7ff fd84 	bl	80028e4 <BSP_LCD_GetXSize>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	fb03 f205 	mul.w	r2, r3, r5
 8002de2:	88fb      	ldrh	r3, [r7, #6]
 8002de4:	4413      	add	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4423      	add	r3, r4
 8002dea:	461a      	mov	r2, r3
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bdb0      	pop	{r4, r5, r7, pc}
 8002df8:	2000082c 	.word	0x2000082c
 8002dfc:	20000744 	.word	0x20000744

08002e00 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002e04:	4b0a      	ldr	r3, [pc, #40]	@ (8002e30 <BSP_LCD_DisplayOn+0x30>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	4b09      	ldr	r3, [pc, #36]	@ (8002e30 <BSP_LCD_DisplayOn+0x30>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002e14:	2201      	movs	r2, #1
 8002e16:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002e1a:	4806      	ldr	r0, [pc, #24]	@ (8002e34 <BSP_LCD_DisplayOn+0x34>)
 8002e1c:	f003 f966 	bl	80060ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002e20:	2201      	movs	r2, #1
 8002e22:	2108      	movs	r1, #8
 8002e24:	4804      	ldr	r0, [pc, #16]	@ (8002e38 <BSP_LCD_DisplayOn+0x38>)
 8002e26:	f003 f961 	bl	80060ec <HAL_GPIO_WritePin>
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000744 	.word	0x20000744
 8002e34:	40022000 	.word	0x40022000
 8002e38:	40022800 	.word	0x40022800

08002e3c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b090      	sub	sp, #64	@ 0x40
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002e46:	4b64      	ldr	r3, [pc, #400]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4a:	4a63      	ldr	r2, [pc, #396]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002e4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e52:	4b61      	ldr	r3, [pc, #388]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002e5e:	4b5e      	ldr	r3, [pc, #376]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	4a5d      	ldr	r2, [pc, #372]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002e64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6a:	4b5b      	ldr	r3, [pc, #364]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e76:	4b58      	ldr	r3, [pc, #352]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	4a57      	ldr	r2, [pc, #348]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002e7c:	f043 0310 	orr.w	r3, r3, #16
 8002e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e82:	4b55      	ldr	r3, [pc, #340]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	623b      	str	r3, [r7, #32]
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e8e:	4b52      	ldr	r3, [pc, #328]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e92:	4a51      	ldr	r2, [pc, #324]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002e94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002ea6:	4b4c      	ldr	r3, [pc, #304]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eaa:	4a4b      	ldr	r2, [pc, #300]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eb2:	4b49      	ldr	r3, [pc, #292]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eba:	61bb      	str	r3, [r7, #24]
 8002ebc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002ebe:	4b46      	ldr	r3, [pc, #280]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	4a45      	ldr	r2, [pc, #276]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002ec4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eca:	4b43      	ldr	r3, [pc, #268]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002ed6:	4b40      	ldr	r3, [pc, #256]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eda:	4a3f      	ldr	r2, [pc, #252]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002edc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee2:	4b3d      	ldr	r3, [pc, #244]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8002eee:	4b3a      	ldr	r3, [pc, #232]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	4a39      	ldr	r2, [pc, #228]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002efa:	4b37      	ldr	r3, [pc, #220]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002f06:	4b34      	ldr	r3, [pc, #208]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	4a33      	ldr	r2, [pc, #204]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002f0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f12:	4b31      	ldr	r3, [pc, #196]	@ (8002fd8 <BSP_LCD_MspInit+0x19c>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8002f1e:	2310      	movs	r3, #16
 8002f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002f26:	2300      	movs	r3, #0
 8002f28:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8002f2e:	230e      	movs	r3, #14
 8002f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002f32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f36:	4619      	mov	r1, r3
 8002f38:	4828      	ldr	r0, [pc, #160]	@ (8002fdc <BSP_LCD_MspInit+0x1a0>)
 8002f3a:	f002 fe07 	bl	8005b4c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8002f3e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f44:	2302      	movs	r3, #2
 8002f46:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8002f48:	2309      	movs	r3, #9
 8002f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002f4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f50:	4619      	mov	r1, r3
 8002f52:	4823      	ldr	r0, [pc, #140]	@ (8002fe0 <BSP_LCD_MspInit+0x1a4>)
 8002f54:	f002 fdfa 	bl	8005b4c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8002f58:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8002f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f5e:	2302      	movs	r3, #2
 8002f60:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002f62:	230e      	movs	r3, #14
 8002f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8002f66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	481d      	ldr	r0, [pc, #116]	@ (8002fe4 <BSP_LCD_MspInit+0x1a8>)
 8002f6e:	f002 fded 	bl	8005b4c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8002f72:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8002f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002f7c:	230e      	movs	r3, #14
 8002f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8002f80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f84:	4619      	mov	r1, r3
 8002f86:	4818      	ldr	r0, [pc, #96]	@ (8002fe8 <BSP_LCD_MspInit+0x1ac>)
 8002f88:	f002 fde0 	bl	8005b4c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8002f8c:	23f7      	movs	r3, #247	@ 0xf7
 8002f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002f90:	2302      	movs	r3, #2
 8002f92:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8002f94:	230e      	movs	r3, #14
 8002f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8002f98:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4813      	ldr	r0, [pc, #76]	@ (8002fec <BSP_LCD_MspInit+0x1b0>)
 8002fa0:	f002 fdd4 	bl	8005b4c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8002fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002faa:	2301      	movs	r3, #1
 8002fac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8002fae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	480b      	ldr	r0, [pc, #44]	@ (8002fe4 <BSP_LCD_MspInit+0x1a8>)
 8002fb6:	f002 fdc9 	bl	8005b4c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8002fba:	2308      	movs	r3, #8
 8002fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002fc2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4808      	ldr	r0, [pc, #32]	@ (8002fec <BSP_LCD_MspInit+0x1b0>)
 8002fca:	f002 fdbf 	bl	8005b4c <HAL_GPIO_Init>
}
 8002fce:	bf00      	nop
 8002fd0:	3740      	adds	r7, #64	@ 0x40
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40021800 	.word	0x40021800
 8002fe4:	40022000 	.word	0x40022000
 8002fe8:	40022400 	.word	0x40022400
 8002fec:	40022800 	.word	0x40022800

08002ff0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <BSP_LCD_ClockConfig+0x34>)
 8002ffc:	2208      	movs	r2, #8
 8002ffe:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003000:	4b08      	ldr	r3, [pc, #32]	@ (8003024 <BSP_LCD_ClockConfig+0x34>)
 8003002:	22c0      	movs	r2, #192	@ 0xc0
 8003004:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003006:	4b07      	ldr	r3, [pc, #28]	@ (8003024 <BSP_LCD_ClockConfig+0x34>)
 8003008:	2205      	movs	r2, #5
 800300a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800300c:	4b05      	ldr	r3, [pc, #20]	@ (8003024 <BSP_LCD_ClockConfig+0x34>)
 800300e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003012:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003014:	4803      	ldr	r0, [pc, #12]	@ (8003024 <BSP_LCD_ClockConfig+0x34>)
 8003016:	f004 ff45 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000848 	.word	0x20000848

08003028 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b088      	sub	sp, #32
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	603a      	str	r2, [r7, #0]
 8003032:	80fb      	strh	r3, [r7, #6]
 8003034:	460b      	mov	r3, r1
 8003036:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	2300      	movs	r3, #0
 800303e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003040:	4b53      	ldr	r3, [pc, #332]	@ (8003190 <DrawChar+0x168>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4953      	ldr	r1, [pc, #332]	@ (8003194 <DrawChar+0x16c>)
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3308      	adds	r3, #8
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	88db      	ldrh	r3, [r3, #6]
 8003056:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003058:	4b4d      	ldr	r3, [pc, #308]	@ (8003190 <DrawChar+0x168>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	494d      	ldr	r1, [pc, #308]	@ (8003194 <DrawChar+0x16c>)
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	3308      	adds	r3, #8
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	889b      	ldrh	r3, [r3, #4]
 800306e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003070:	8a3b      	ldrh	r3, [r7, #16]
 8003072:	3307      	adds	r3, #7
 8003074:	2b00      	cmp	r3, #0
 8003076:	da00      	bge.n	800307a <DrawChar+0x52>
 8003078:	3307      	adds	r3, #7
 800307a:	10db      	asrs	r3, r3, #3
 800307c:	b2db      	uxtb	r3, r3
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	b2da      	uxtb	r2, r3
 8003082:	8a3b      	ldrh	r3, [r7, #16]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	e076      	b.n	800317e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003090:	8a3b      	ldrh	r3, [r7, #16]
 8003092:	3307      	adds	r3, #7
 8003094:	2b00      	cmp	r3, #0
 8003096:	da00      	bge.n	800309a <DrawChar+0x72>
 8003098:	3307      	adds	r3, #7
 800309a:	10db      	asrs	r3, r3, #3
 800309c:	461a      	mov	r2, r3
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	fb02 f303 	mul.w	r3, r2, r3
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80030aa:	8a3b      	ldrh	r3, [r7, #16]
 80030ac:	3307      	adds	r3, #7
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	da00      	bge.n	80030b4 <DrawChar+0x8c>
 80030b2:	3307      	adds	r3, #7
 80030b4:	10db      	asrs	r3, r3, #3
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d002      	beq.n	80030c0 <DrawChar+0x98>
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d004      	beq.n	80030c8 <DrawChar+0xa0>
 80030be:	e00c      	b.n	80030da <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	617b      	str	r3, [r7, #20]
      break;
 80030c6:	e016      	b.n	80030f6 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	68ba      	ldr	r2, [r7, #8]
 80030d0:	3201      	adds	r2, #1
 80030d2:	7812      	ldrb	r2, [r2, #0]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	617b      	str	r3, [r7, #20]
      break;
 80030d8:	e00d      	b.n	80030f6 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	041a      	lsls	r2, r3, #16
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	3301      	adds	r3, #1
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	021b      	lsls	r3, r3, #8
 80030e8:	4313      	orrs	r3, r2
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	3202      	adds	r2, #2
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
      break;
 80030f4:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
 80030fa:	e036      	b.n	800316a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80030fc:	8a3a      	ldrh	r2, [r7, #16]
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	1ad2      	subs	r2, r2, r3
 8003102:	7bfb      	ldrb	r3, [r7, #15]
 8003104:	4413      	add	r3, r2
 8003106:	3b01      	subs	r3, #1
 8003108:	2201      	movs	r2, #1
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	461a      	mov	r2, r3
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	4013      	ands	r3, r2
 8003114:	2b00      	cmp	r3, #0
 8003116:	d012      	beq.n	800313e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	b29a      	uxth	r2, r3
 800311c:	88fb      	ldrh	r3, [r7, #6]
 800311e:	4413      	add	r3, r2
 8003120:	b298      	uxth	r0, r3
 8003122:	4b1b      	ldr	r3, [pc, #108]	@ (8003190 <DrawChar+0x168>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	491b      	ldr	r1, [pc, #108]	@ (8003194 <DrawChar+0x16c>)
 8003128:	4613      	mov	r3, r2
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	88bb      	ldrh	r3, [r7, #4]
 8003136:	4619      	mov	r1, r3
 8003138:	f7ff fe1a 	bl	8002d70 <BSP_LCD_DrawPixel>
 800313c:	e012      	b.n	8003164 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	b29a      	uxth	r2, r3
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	4413      	add	r3, r2
 8003146:	b298      	uxth	r0, r3
 8003148:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <DrawChar+0x168>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4911      	ldr	r1, [pc, #68]	@ (8003194 <DrawChar+0x16c>)
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	3304      	adds	r3, #4
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	88bb      	ldrh	r3, [r7, #4]
 800315e:	4619      	mov	r1, r3
 8003160:	f7ff fe06 	bl	8002d70 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	3301      	adds	r3, #1
 8003168:	61bb      	str	r3, [r7, #24]
 800316a:	8a3b      	ldrh	r3, [r7, #16]
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	429a      	cmp	r2, r3
 8003170:	d3c4      	bcc.n	80030fc <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003172:	88bb      	ldrh	r3, [r7, #4]
 8003174:	3301      	adds	r3, #1
 8003176:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	3301      	adds	r3, #1
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	8a7b      	ldrh	r3, [r7, #18]
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	429a      	cmp	r2, r3
 8003184:	d384      	bcc.n	8003090 <DrawChar+0x68>
  }
}
 8003186:	bf00      	nop
 8003188:	bf00      	nop
 800318a:	3720      	adds	r7, #32
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	2000082c 	.word	0x2000082c
 8003194:	20000830 	.word	0x20000830

08003198 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80031a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003220 <LL_FillBuffer+0x88>)
 80031a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80031ac:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80031ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003224 <LL_FillBuffer+0x8c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003228 <LL_FillBuffer+0x90>)
 80031b4:	2134      	movs	r1, #52	@ 0x34
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	3348      	adds	r3, #72	@ 0x48
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d103      	bne.n	80031cc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80031c4:	4b16      	ldr	r3, [pc, #88]	@ (8003220 <LL_FillBuffer+0x88>)
 80031c6:	2202      	movs	r2, #2
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	e002      	b.n	80031d2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80031cc:	4b14      	ldr	r3, [pc, #80]	@ (8003220 <LL_FillBuffer+0x88>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80031d2:	4a13      	ldr	r2, [pc, #76]	@ (8003220 <LL_FillBuffer+0x88>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80031d8:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <LL_FillBuffer+0x88>)
 80031da:	4a14      	ldr	r2, [pc, #80]	@ (800322c <LL_FillBuffer+0x94>)
 80031dc:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80031de:	4810      	ldr	r0, [pc, #64]	@ (8003220 <LL_FillBuffer+0x88>)
 80031e0:	f002 f918 	bl	8005414 <HAL_DMA2D_Init>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d115      	bne.n	8003216 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80031ea:	68f9      	ldr	r1, [r7, #12]
 80031ec:	480c      	ldr	r0, [pc, #48]	@ (8003220 <LL_FillBuffer+0x88>)
 80031ee:	f002 fb7f 	bl	80058f0 <HAL_DMA2D_ConfigLayer>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d10e      	bne.n	8003216 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69f9      	ldr	r1, [r7, #28]
 8003202:	4807      	ldr	r0, [pc, #28]	@ (8003220 <LL_FillBuffer+0x88>)
 8003204:	f002 f950 	bl	80054a8 <HAL_DMA2D_Start>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800320e:	210a      	movs	r1, #10
 8003210:	4803      	ldr	r0, [pc, #12]	@ (8003220 <LL_FillBuffer+0x88>)
 8003212:	f002 f974 	bl	80054fe <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200007ec 	.word	0x200007ec
 8003224:	2000082c 	.word	0x2000082c
 8003228:	20000744 	.word	0x20000744
 800322c:	4002b000 	.word	0x4002b000

08003230 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003234:	4b29      	ldr	r3, [pc, #164]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 8003236:	4a2a      	ldr	r2, [pc, #168]	@ (80032e0 <BSP_SDRAM_Init+0xb0>)
 8003238:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800323a:	4b2a      	ldr	r3, [pc, #168]	@ (80032e4 <BSP_SDRAM_Init+0xb4>)
 800323c:	2202      	movs	r2, #2
 800323e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003240:	4b28      	ldr	r3, [pc, #160]	@ (80032e4 <BSP_SDRAM_Init+0xb4>)
 8003242:	2207      	movs	r2, #7
 8003244:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003246:	4b27      	ldr	r3, [pc, #156]	@ (80032e4 <BSP_SDRAM_Init+0xb4>)
 8003248:	2204      	movs	r2, #4
 800324a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800324c:	4b25      	ldr	r3, [pc, #148]	@ (80032e4 <BSP_SDRAM_Init+0xb4>)
 800324e:	2207      	movs	r2, #7
 8003250:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003252:	4b24      	ldr	r3, [pc, #144]	@ (80032e4 <BSP_SDRAM_Init+0xb4>)
 8003254:	2202      	movs	r2, #2
 8003256:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003258:	4b22      	ldr	r3, [pc, #136]	@ (80032e4 <BSP_SDRAM_Init+0xb4>)
 800325a:	2202      	movs	r2, #2
 800325c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800325e:	4b21      	ldr	r3, [pc, #132]	@ (80032e4 <BSP_SDRAM_Init+0xb4>)
 8003260:	2202      	movs	r2, #2
 8003262:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003264:	4b1d      	ldr	r3, [pc, #116]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 8003266:	2200      	movs	r2, #0
 8003268:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800326a:	4b1c      	ldr	r3, [pc, #112]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 800326c:	2200      	movs	r2, #0
 800326e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003270:	4b1a      	ldr	r3, [pc, #104]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 8003272:	2204      	movs	r2, #4
 8003274:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003276:	4b19      	ldr	r3, [pc, #100]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 8003278:	2210      	movs	r2, #16
 800327a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800327c:	4b17      	ldr	r3, [pc, #92]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 800327e:	2240      	movs	r2, #64	@ 0x40
 8003280:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003282:	4b16      	ldr	r3, [pc, #88]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 8003284:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003288:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800328a:	4b14      	ldr	r3, [pc, #80]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 800328c:	2200      	movs	r2, #0
 800328e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003290:	4b12      	ldr	r3, [pc, #72]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 8003292:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003296:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003298:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 800329a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800329e:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80032a0:	4b0e      	ldr	r3, [pc, #56]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80032a6:	2100      	movs	r1, #0
 80032a8:	480c      	ldr	r0, [pc, #48]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 80032aa:	f000 f87f 	bl	80033ac <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80032ae:	490d      	ldr	r1, [pc, #52]	@ (80032e4 <BSP_SDRAM_Init+0xb4>)
 80032b0:	480a      	ldr	r0, [pc, #40]	@ (80032dc <BSP_SDRAM_Init+0xac>)
 80032b2:	f006 fc5b 	bl	8009b6c <HAL_SDRAM_Init>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80032bc:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <BSP_SDRAM_Init+0xb8>)
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
 80032c2:	e002      	b.n	80032ca <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80032c4:	4b08      	ldr	r3, [pc, #32]	@ (80032e8 <BSP_SDRAM_Init+0xb8>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80032ca:	f240 6003 	movw	r0, #1539	@ 0x603
 80032ce:	f000 f80d 	bl	80032ec <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80032d2:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <BSP_SDRAM_Init+0xb8>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	200008cc 	.word	0x200008cc
 80032e0:	a0000140 	.word	0xa0000140
 80032e4:	20000900 	.word	0x20000900
 80032e8:	20000030 	.word	0x20000030

080032ec <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80032f8:	4b2a      	ldr	r3, [pc, #168]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80032fe:	4b29      	ldr	r3, [pc, #164]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003300:	2210      	movs	r2, #16
 8003302:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003304:	4b27      	ldr	r3, [pc, #156]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003306:	2201      	movs	r2, #1
 8003308:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800330a:	4b26      	ldr	r3, [pc, #152]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003310:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003314:	4923      	ldr	r1, [pc, #140]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003316:	4824      	ldr	r0, [pc, #144]	@ (80033a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003318:	f006 fc5c 	bl	8009bd4 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800331c:	2001      	movs	r0, #1
 800331e:	f001 f915 	bl	800454c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003324:	2202      	movs	r2, #2
 8003326:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003328:	4b1e      	ldr	r3, [pc, #120]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800332a:	2210      	movs	r2, #16
 800332c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800332e:	4b1d      	ldr	r3, [pc, #116]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003330:	2201      	movs	r2, #1
 8003332:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003334:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003336:	2200      	movs	r2, #0
 8003338:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800333a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800333e:	4919      	ldr	r1, [pc, #100]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003340:	4819      	ldr	r0, [pc, #100]	@ (80033a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003342:	f006 fc47 	bl	8009bd4 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003346:	4b17      	ldr	r3, [pc, #92]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003348:	2203      	movs	r2, #3
 800334a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800334c:	4b15      	ldr	r3, [pc, #84]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800334e:	2210      	movs	r2, #16
 8003350:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003352:	4b14      	ldr	r3, [pc, #80]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003354:	2208      	movs	r2, #8
 8003356:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003358:	4b12      	ldr	r3, [pc, #72]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800335a:	2200      	movs	r2, #0
 800335c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800335e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003362:	4910      	ldr	r1, [pc, #64]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003364:	4810      	ldr	r0, [pc, #64]	@ (80033a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003366:	f006 fc35 	bl	8009bd4 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800336a:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800336e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003372:	2204      	movs	r2, #4
 8003374:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003376:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003378:	2210      	movs	r2, #16
 800337a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800337c:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800337e:	2201      	movs	r2, #1
 8003380:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4a07      	ldr	r2, [pc, #28]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003386:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003388:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800338c:	4905      	ldr	r1, [pc, #20]	@ (80033a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800338e:	4806      	ldr	r0, [pc, #24]	@ (80033a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003390:	f006 fc20 	bl	8009bd4 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4804      	ldr	r0, [pc, #16]	@ (80033a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003398:	f006 fc51 	bl	8009c3e <HAL_SDRAM_ProgramRefreshRate>
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	2000091c 	.word	0x2000091c
 80033a8:	200008cc 	.word	0x200008cc

080033ac <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b090      	sub	sp, #64	@ 0x40
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80033b6:	4b70      	ldr	r3, [pc, #448]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 80033b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ba:	4a6f      	ldr	r2, [pc, #444]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6393      	str	r3, [r2, #56]	@ 0x38
 80033c2:	4b6d      	ldr	r3, [pc, #436]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 80033c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80033ce:	4b6a      	ldr	r3, [pc, #424]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	4a69      	ldr	r2, [pc, #420]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 80033d4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80033d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80033da:	4b67      	ldr	r3, [pc, #412]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033e6:	4b64      	ldr	r3, [pc, #400]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	4a63      	ldr	r2, [pc, #396]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 80033ec:	f043 0304 	orr.w	r3, r3, #4
 80033f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f2:	4b61      	ldr	r3, [pc, #388]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	623b      	str	r3, [r7, #32]
 80033fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033fe:	4b5e      	ldr	r3, [pc, #376]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	4a5d      	ldr	r2, [pc, #372]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 8003404:	f043 0308 	orr.w	r3, r3, #8
 8003408:	6313      	str	r3, [r2, #48]	@ 0x30
 800340a:	4b5b      	ldr	r3, [pc, #364]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	f003 0308 	and.w	r3, r3, #8
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003416:	4b58      	ldr	r3, [pc, #352]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800341a:	4a57      	ldr	r2, [pc, #348]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 800341c:	f043 0310 	orr.w	r3, r3, #16
 8003420:	6313      	str	r3, [r2, #48]	@ 0x30
 8003422:	4b55      	ldr	r3, [pc, #340]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800342e:	4b52      	ldr	r3, [pc, #328]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003432:	4a51      	ldr	r2, [pc, #324]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 8003434:	f043 0320 	orr.w	r3, r3, #32
 8003438:	6313      	str	r3, [r2, #48]	@ 0x30
 800343a:	4b4f      	ldr	r3, [pc, #316]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003446:	4b4c      	ldr	r3, [pc, #304]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344a:	4a4b      	ldr	r2, [pc, #300]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 800344c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003450:	6313      	str	r3, [r2, #48]	@ 0x30
 8003452:	4b49      	ldr	r3, [pc, #292]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800345e:	4b46      	ldr	r3, [pc, #280]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003462:	4a45      	ldr	r2, [pc, #276]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 8003464:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003468:	6313      	str	r3, [r2, #48]	@ 0x30
 800346a:	4b43      	ldr	r3, [pc, #268]	@ (8003578 <BSP_SDRAM_MspInit+0x1cc>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800346e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003476:	2302      	movs	r3, #2
 8003478:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800347a:	2301      	movs	r3, #1
 800347c:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800347e:	2302      	movs	r3, #2
 8003480:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003482:	230c      	movs	r3, #12
 8003484:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003486:	2308      	movs	r3, #8
 8003488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800348a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800348e:	4619      	mov	r1, r3
 8003490:	483a      	ldr	r0, [pc, #232]	@ (800357c <BSP_SDRAM_MspInit+0x1d0>)
 8003492:	f002 fb5b 	bl	8005b4c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003496:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800349a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800349c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034a0:	4619      	mov	r1, r3
 80034a2:	4837      	ldr	r0, [pc, #220]	@ (8003580 <BSP_SDRAM_MspInit+0x1d4>)
 80034a4:	f002 fb52 	bl	8005b4c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80034a8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80034ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80034ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034b2:	4619      	mov	r1, r3
 80034b4:	4833      	ldr	r0, [pc, #204]	@ (8003584 <BSP_SDRAM_MspInit+0x1d8>)
 80034b6:	f002 fb49 	bl	8005b4c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80034ba:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80034be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80034c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034c4:	4619      	mov	r1, r3
 80034c6:	4830      	ldr	r0, [pc, #192]	@ (8003588 <BSP_SDRAM_MspInit+0x1dc>)
 80034c8:	f002 fb40 	bl	8005b4c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80034cc:	f248 1333 	movw	r3, #33075	@ 0x8133
 80034d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80034d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034d6:	4619      	mov	r1, r3
 80034d8:	482c      	ldr	r0, [pc, #176]	@ (800358c <BSP_SDRAM_MspInit+0x1e0>)
 80034da:	f002 fb37 	bl	8005b4c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80034de:	2328      	movs	r3, #40	@ 0x28
 80034e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80034e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034e6:	4619      	mov	r1, r3
 80034e8:	4829      	ldr	r0, [pc, #164]	@ (8003590 <BSP_SDRAM_MspInit+0x1e4>)
 80034ea:	f002 fb2f 	bl	8005b4c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80034ee:	4b29      	ldr	r3, [pc, #164]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80034f4:	4b27      	ldr	r3, [pc, #156]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 80034f6:	2280      	movs	r2, #128	@ 0x80
 80034f8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80034fa:	4b26      	ldr	r3, [pc, #152]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 80034fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003500:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003502:	4b24      	ldr	r3, [pc, #144]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 8003504:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003508:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800350a:	4b22      	ldr	r3, [pc, #136]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 800350c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003510:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003512:	4b20      	ldr	r3, [pc, #128]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 8003514:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003518:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 800351c:	2200      	movs	r2, #0
 800351e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003520:	4b1c      	ldr	r3, [pc, #112]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 8003522:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003526:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003528:	4b1a      	ldr	r3, [pc, #104]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 800352a:	2200      	movs	r2, #0
 800352c:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800352e:	4b19      	ldr	r3, [pc, #100]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 8003530:	2203      	movs	r2, #3
 8003532:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003534:	4b17      	ldr	r3, [pc, #92]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 8003536:	2200      	movs	r2, #0
 8003538:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800353a:	4b16      	ldr	r3, [pc, #88]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 800353c:	2200      	movs	r2, #0
 800353e:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003540:	4b14      	ldr	r3, [pc, #80]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 8003542:	4a15      	ldr	r2, [pc, #84]	@ (8003598 <BSP_SDRAM_MspInit+0x1ec>)
 8003544:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a12      	ldr	r2, [pc, #72]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 800354a:	631a      	str	r2, [r3, #48]	@ 0x30
 800354c:	4a11      	ldr	r2, [pc, #68]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003552:	4810      	ldr	r0, [pc, #64]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 8003554:	f001 fd22 	bl	8004f9c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003558:	480e      	ldr	r0, [pc, #56]	@ (8003594 <BSP_SDRAM_MspInit+0x1e8>)
 800355a:	f001 fc71 	bl	8004e40 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	210f      	movs	r1, #15
 8003562:	2038      	movs	r0, #56	@ 0x38
 8003564:	f001 fb62 	bl	8004c2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003568:	2038      	movs	r0, #56	@ 0x38
 800356a:	f001 fb7b 	bl	8004c64 <HAL_NVIC_EnableIRQ>
}
 800356e:	bf00      	nop
 8003570:	3740      	adds	r7, #64	@ 0x40
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	40020800 	.word	0x40020800
 8003580:	40020c00 	.word	0x40020c00
 8003584:	40021000 	.word	0x40021000
 8003588:	40021400 	.word	0x40021400
 800358c:	40021800 	.word	0x40021800
 8003590:	40021c00 	.word	0x40021c00
 8003594:	2000092c 	.word	0x2000092c
 8003598:	40026410 	.word	0x40026410

0800359c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	460a      	mov	r2, r1
 80035a6:	80fb      	strh	r3, [r7, #6]
 80035a8:	4613      	mov	r3, r2
 80035aa:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80035b0:	4a14      	ldr	r2, [pc, #80]	@ (8003604 <BSP_TS_Init+0x68>)
 80035b2:	88fb      	ldrh	r3, [r7, #6]
 80035b4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80035b6:	4a14      	ldr	r2, [pc, #80]	@ (8003608 <BSP_TS_Init+0x6c>)
 80035b8:	88bb      	ldrh	r3, [r7, #4]
 80035ba:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80035bc:	4b13      	ldr	r3, [pc, #76]	@ (800360c <BSP_TS_Init+0x70>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2070      	movs	r0, #112	@ 0x70
 80035c2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80035c4:	4b11      	ldr	r3, [pc, #68]	@ (800360c <BSP_TS_Init+0x70>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	2070      	movs	r0, #112	@ 0x70
 80035ca:	4798      	blx	r3
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b51      	cmp	r3, #81	@ 0x51
 80035d0:	d110      	bne.n	80035f4 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80035d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003610 <BSP_TS_Init+0x74>)
 80035d4:	4a0d      	ldr	r2, [pc, #52]	@ (800360c <BSP_TS_Init+0x70>)
 80035d6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80035d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <BSP_TS_Init+0x78>)
 80035da:	2270      	movs	r2, #112	@ 0x70
 80035dc:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80035de:	4b0e      	ldr	r3, [pc, #56]	@ (8003618 <BSP_TS_Init+0x7c>)
 80035e0:	2208      	movs	r2, #8
 80035e2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80035e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003610 <BSP_TS_Init+0x74>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003614 <BSP_TS_Init+0x78>)
 80035ec:	7812      	ldrb	r2, [r2, #0]
 80035ee:	4610      	mov	r0, r2
 80035f0:	4798      	blx	r3
 80035f2:	e001      	b.n	80035f8 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80035f4:	2303      	movs	r3, #3
 80035f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	20000990 	.word	0x20000990
 8003608:	20000992 	.word	0x20000992
 800360c:	20000000 	.word	0x20000000
 8003610:	2000098c 	.word	0x2000098c
 8003614:	20000995 	.word	0x20000995
 8003618:	20000994 	.word	0x20000994

0800361c <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 800361c:	b590      	push	{r4, r7, lr}
 800361e:	b097      	sub	sp, #92	@ 0x5c
 8003620:	af02      	add	r7, sp, #8
 8003622:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003636:	4bb8      	ldr	r3, [pc, #736]	@ (8003918 <BSP_TS_GetState+0x2fc>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	4ab7      	ldr	r2, [pc, #732]	@ (800391c <BSP_TS_GetState+0x300>)
 800363e:	7812      	ldrb	r2, [r2, #0]
 8003640:	4610      	mov	r0, r2
 8003642:	4798      	blx	r3
 8003644:	4603      	mov	r3, r0
 8003646:	461a      	mov	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8198 	beq.w	8003986 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003656:	2300      	movs	r3, #0
 8003658:	64bb      	str	r3, [r7, #72]	@ 0x48
 800365a:	e187      	b.n	800396c <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 800365c:	4bae      	ldr	r3, [pc, #696]	@ (8003918 <BSP_TS_GetState+0x2fc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	4aae      	ldr	r2, [pc, #696]	@ (800391c <BSP_TS_GetState+0x300>)
 8003664:	7812      	ldrb	r2, [r2, #0]
 8003666:	4614      	mov	r4, r2
 8003668:	f107 0120 	add.w	r1, r7, #32
 800366c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800366e:	0052      	lsls	r2, r2, #1
 8003670:	1888      	adds	r0, r1, r2
 8003672:	f107 0114 	add.w	r1, r7, #20
 8003676:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003678:	0052      	lsls	r2, r2, #1
 800367a:	440a      	add	r2, r1
 800367c:	4601      	mov	r1, r0
 800367e:	4620      	mov	r0, r4
 8003680:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003682:	4ba7      	ldr	r3, [pc, #668]	@ (8003920 <BSP_TS_GetState+0x304>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d117      	bne.n	80036ba <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 800368a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	3350      	adds	r3, #80	@ 0x50
 8003690:	443b      	add	r3, r7
 8003692:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003696:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003698:	005b      	lsls	r3, r3, #1
 800369a:	3350      	adds	r3, #80	@ 0x50
 800369c:	443b      	add	r3, r7
 800369e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 80036a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	3350      	adds	r3, #80	@ 0x50
 80036a8:	443b      	add	r3, r7
 80036aa:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80036ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	3350      	adds	r3, #80	@ 0x50
 80036b4:	443b      	add	r3, r7
 80036b6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80036ba:	4b99      	ldr	r3, [pc, #612]	@ (8003920 <BSP_TS_GetState+0x304>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00e      	beq.n	80036e4 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 80036c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	3350      	adds	r3, #80	@ 0x50
 80036cc:	443b      	add	r3, r7
 80036ce:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80036d2:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	3350      	adds	r3, #80	@ 0x50
 80036de:	443b      	add	r3, r7
 80036e0:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80036e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003920 <BSP_TS_GetState+0x304>)
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 80036f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	3350      	adds	r3, #80	@ 0x50
 80036f6:	443b      	add	r3, r7
 80036f8:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80036fc:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8003700:	b29a      	uxth	r2, r3
 8003702:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	3350      	adds	r3, #80	@ 0x50
 8003708:	443b      	add	r3, r7
 800370a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 800370e:	4b84      	ldr	r3, [pc, #528]	@ (8003920 <BSP_TS_GetState+0x304>)
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d017      	beq.n	800374a <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 800371a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	3350      	adds	r3, #80	@ 0x50
 8003720:	443b      	add	r3, r7
 8003722:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003726:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	3350      	adds	r3, #80	@ 0x50
 800372c:	443b      	add	r3, r7
 800372e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	3350      	adds	r3, #80	@ 0x50
 8003738:	443b      	add	r3, r7
 800373a:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800373e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	3350      	adds	r3, #80	@ 0x50
 8003744:	443b      	add	r3, r7
 8003746:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800374a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800374c:	005b      	lsls	r3, r3, #1
 800374e:	3350      	adds	r3, #80	@ 0x50
 8003750:	443b      	add	r3, r7
 8003752:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003756:	4619      	mov	r1, r3
 8003758:	4a72      	ldr	r2, [pc, #456]	@ (8003924 <BSP_TS_GetState+0x308>)
 800375a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800375c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003760:	4299      	cmp	r1, r3
 8003762:	d90d      	bls.n	8003780 <BSP_TS_GetState+0x164>
 8003764:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	3350      	adds	r3, #80	@ 0x50
 800376a:	443b      	add	r3, r7
 800376c:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003770:	496c      	ldr	r1, [pc, #432]	@ (8003924 <BSP_TS_GetState+0x308>)
 8003772:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003774:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003778:	b29b      	uxth	r3, r3
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	b29b      	uxth	r3, r3
 800377e:	e00c      	b.n	800379a <BSP_TS_GetState+0x17e>
 8003780:	4a68      	ldr	r2, [pc, #416]	@ (8003924 <BSP_TS_GetState+0x308>)
 8003782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003788:	b29a      	uxth	r2, r3
 800378a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	3350      	adds	r3, #80	@ 0x50
 8003790:	443b      	add	r3, r7
 8003792:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	b29b      	uxth	r3, r3
 800379a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800379e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	3350      	adds	r3, #80	@ 0x50
 80037a4:	443b      	add	r3, r7
 80037a6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80037aa:	4619      	mov	r1, r3
 80037ac:	4a5e      	ldr	r2, [pc, #376]	@ (8003928 <BSP_TS_GetState+0x30c>)
 80037ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b4:	4299      	cmp	r1, r3
 80037b6:	d90d      	bls.n	80037d4 <BSP_TS_GetState+0x1b8>
 80037b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037ba:	005b      	lsls	r3, r3, #1
 80037bc:	3350      	adds	r3, #80	@ 0x50
 80037be:	443b      	add	r3, r7
 80037c0:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80037c4:	4958      	ldr	r1, [pc, #352]	@ (8003928 <BSP_TS_GetState+0x30c>)
 80037c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037c8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	e00c      	b.n	80037ee <BSP_TS_GetState+0x1d2>
 80037d4:	4a54      	ldr	r2, [pc, #336]	@ (8003928 <BSP_TS_GetState+0x30c>)
 80037d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037dc:	b29a      	uxth	r2, r3
 80037de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	3350      	adds	r3, #80	@ 0x50
 80037e4:	443b      	add	r3, r7
 80037e6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 80037f2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80037f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80037fa:	4413      	add	r3, r2
 80037fc:	2b05      	cmp	r3, #5
 80037fe:	dd15      	ble.n	800382c <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8003800:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	3350      	adds	r3, #80	@ 0x50
 8003806:	443b      	add	r3, r7
 8003808:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800380c:	4619      	mov	r1, r3
 800380e:	4a45      	ldr	r2, [pc, #276]	@ (8003924 <BSP_TS_GetState+0x308>)
 8003810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003812:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	3350      	adds	r3, #80	@ 0x50
 800381c:	443b      	add	r3, r7
 800381e:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003822:	4619      	mov	r1, r3
 8003824:	4a40      	ldr	r2, [pc, #256]	@ (8003928 <BSP_TS_GetState+0x30c>)
 8003826:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003828:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 800382c:	4b3b      	ldr	r3, [pc, #236]	@ (800391c <BSP_TS_GetState+0x300>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b70      	cmp	r3, #112	@ 0x70
 8003832:	d119      	bne.n	8003868 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8003834:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	3350      	adds	r3, #80	@ 0x50
 800383a:	443b      	add	r3, r7
 800383c:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	460a      	mov	r2, r1
 800384a:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 800384c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800384e:	005b      	lsls	r3, r3, #1
 8003850:	3350      	adds	r3, #80	@ 0x50
 8003852:	443b      	add	r3, r7
 8003854:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800385c:	3304      	adds	r3, #4
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	460a      	mov	r2, r1
 8003864:	809a      	strh	r2, [r3, #4]
 8003866:	e022      	b.n	80038ae <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003868:	4b30      	ldr	r3, [pc, #192]	@ (800392c <BSP_TS_GetState+0x310>)
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	4619      	mov	r1, r3
 800386e:	4a2d      	ldr	r2, [pc, #180]	@ (8003924 <BSP_TS_GetState+0x308>)
 8003870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	0b1b      	lsrs	r3, r3, #12
 800387c:	b299      	uxth	r1, r3
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	4413      	add	r3, r2
 8003886:	460a      	mov	r2, r1
 8003888:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800388a:	4b29      	ldr	r3, [pc, #164]	@ (8003930 <BSP_TS_GetState+0x314>)
 800388c:	881b      	ldrh	r3, [r3, #0]
 800388e:	4619      	mov	r1, r3
 8003890:	4a25      	ldr	r2, [pc, #148]	@ (8003928 <BSP_TS_GetState+0x30c>)
 8003892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	0b1b      	lsrs	r3, r3, #12
 800389e:	b299      	uxth	r1, r3
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038a4:	3304      	adds	r3, #4
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	4413      	add	r3, r2
 80038aa:	460a      	mov	r2, r1
 80038ac:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80038ae:	4b1b      	ldr	r3, [pc, #108]	@ (800391c <BSP_TS_GetState+0x300>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f107 010c 	add.w	r1, r7, #12
 80038b8:	f107 0210 	add.w	r2, r7, #16
 80038bc:	f107 0308 	add.w	r3, r7, #8
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	460b      	mov	r3, r1
 80038c4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80038c6:	f7fd fc1d 	bl	8001104 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	b2d9      	uxtb	r1, r3
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038d2:	4413      	add	r3, r2
 80038d4:	3316      	adds	r3, #22
 80038d6:	460a      	mov	r2, r1
 80038d8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	b2d9      	uxtb	r1, r3
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e2:	4413      	add	r3, r2
 80038e4:	3320      	adds	r3, #32
 80038e6:	460a      	mov	r2, r1
 80038e8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b03      	cmp	r3, #3
 80038ee:	d836      	bhi.n	800395e <BSP_TS_GetState+0x342>
 80038f0:	a201      	add	r2, pc, #4	@ (adr r2, 80038f8 <BSP_TS_GetState+0x2dc>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	08003909 	.word	0x08003909
 80038fc:	08003935 	.word	0x08003935
 8003900:	08003943 	.word	0x08003943
 8003904:	08003951 	.word	0x08003951
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800390c:	4413      	add	r3, r2
 800390e:	331b      	adds	r3, #27
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
          break;
 8003914:	e027      	b.n	8003966 <BSP_TS_GetState+0x34a>
 8003916:	bf00      	nop
 8003918:	2000098c 	.word	0x2000098c
 800391c:	20000995 	.word	0x20000995
 8003920:	20000994 	.word	0x20000994
 8003924:	20000998 	.word	0x20000998
 8003928:	200009ac 	.word	0x200009ac
 800392c:	20000990 	.word	0x20000990
 8003930:	20000992 	.word	0x20000992
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003938:	4413      	add	r3, r2
 800393a:	331b      	adds	r3, #27
 800393c:	2202      	movs	r2, #2
 800393e:	701a      	strb	r2, [r3, #0]
          break;
 8003940:	e011      	b.n	8003966 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003946:	4413      	add	r3, r2
 8003948:	331b      	adds	r3, #27
 800394a:	2203      	movs	r2, #3
 800394c:	701a      	strb	r2, [r3, #0]
          break;
 800394e:	e00a      	b.n	8003966 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003954:	4413      	add	r3, r2
 8003956:	331b      	adds	r3, #27
 8003958:	2200      	movs	r2, #0
 800395a:	701a      	strb	r2, [r3, #0]
          break;
 800395c:	e003      	b.n	8003966 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8003964:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003968:	3301      	adds	r3, #1
 800396a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	461a      	mov	r2, r3
 8003972:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003974:	4293      	cmp	r3, r2
 8003976:	f4ff ae71 	bcc.w	800365c <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f80a 	bl	8003994 <BSP_TS_Get_GestureId>
 8003980:	4603      	mov	r3, r0
 8003982:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003986:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800398a:	4618      	mov	r0, r3
 800398c:	3754      	adds	r7, #84	@ 0x54
 800398e:	46bd      	mov	sp, r7
 8003990:	bd90      	pop	{r4, r7, pc}
 8003992:	bf00      	nop

08003994 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80039a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003a94 <BSP_TS_Get_GestureId+0x100>)
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	461a      	mov	r2, r3
 80039aa:	f107 0308 	add.w	r3, r7, #8
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f7fd fb8e 	bl	80010d2 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2b49      	cmp	r3, #73	@ 0x49
 80039ba:	d05e      	beq.n	8003a7a <BSP_TS_Get_GestureId+0xe6>
 80039bc:	2b49      	cmp	r3, #73	@ 0x49
 80039be:	d860      	bhi.n	8003a82 <BSP_TS_Get_GestureId+0xee>
 80039c0:	2b1c      	cmp	r3, #28
 80039c2:	d83f      	bhi.n	8003a44 <BSP_TS_Get_GestureId+0xb0>
 80039c4:	2b1c      	cmp	r3, #28
 80039c6:	d85c      	bhi.n	8003a82 <BSP_TS_Get_GestureId+0xee>
 80039c8:	a201      	add	r2, pc, #4	@ (adr r2, 80039d0 <BSP_TS_Get_GestureId+0x3c>)
 80039ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ce:	bf00      	nop
 80039d0:	08003a4b 	.word	0x08003a4b
 80039d4:	08003a83 	.word	0x08003a83
 80039d8:	08003a83 	.word	0x08003a83
 80039dc:	08003a83 	.word	0x08003a83
 80039e0:	08003a83 	.word	0x08003a83
 80039e4:	08003a83 	.word	0x08003a83
 80039e8:	08003a83 	.word	0x08003a83
 80039ec:	08003a83 	.word	0x08003a83
 80039f0:	08003a83 	.word	0x08003a83
 80039f4:	08003a83 	.word	0x08003a83
 80039f8:	08003a83 	.word	0x08003a83
 80039fc:	08003a83 	.word	0x08003a83
 8003a00:	08003a83 	.word	0x08003a83
 8003a04:	08003a83 	.word	0x08003a83
 8003a08:	08003a83 	.word	0x08003a83
 8003a0c:	08003a83 	.word	0x08003a83
 8003a10:	08003a53 	.word	0x08003a53
 8003a14:	08003a83 	.word	0x08003a83
 8003a18:	08003a83 	.word	0x08003a83
 8003a1c:	08003a83 	.word	0x08003a83
 8003a20:	08003a5b 	.word	0x08003a5b
 8003a24:	08003a83 	.word	0x08003a83
 8003a28:	08003a83 	.word	0x08003a83
 8003a2c:	08003a83 	.word	0x08003a83
 8003a30:	08003a63 	.word	0x08003a63
 8003a34:	08003a83 	.word	0x08003a83
 8003a38:	08003a83 	.word	0x08003a83
 8003a3c:	08003a83 	.word	0x08003a83
 8003a40:	08003a6b 	.word	0x08003a6b
 8003a44:	2b40      	cmp	r3, #64	@ 0x40
 8003a46:	d014      	beq.n	8003a72 <BSP_TS_Get_GestureId+0xde>
 8003a48:	e01b      	b.n	8003a82 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003a50:	e01a      	b.n	8003a88 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003a58:	e016      	b.n	8003a88 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003a60:	e012      	b.n	8003a88 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2203      	movs	r2, #3
 8003a66:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003a68:	e00e      	b.n	8003a88 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2204      	movs	r2, #4
 8003a6e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003a70:	e00a      	b.n	8003a88 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2205      	movs	r2, #5
 8003a76:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003a78:	e006      	b.n	8003a88 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2206      	movs	r2, #6
 8003a7e:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003a80:	e002      	b.n	8003a88 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
      break;
 8003a86:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000995 	.word	0x20000995

08003a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a9e:	4b11      	ldr	r3, [pc, #68]	@ (8003ae4 <HAL_MspInit+0x4c>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	4a10      	ldr	r2, [pc, #64]	@ (8003ae4 <HAL_MspInit+0x4c>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003aa8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae4 <HAL_MspInit+0x4c>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae4 <HAL_MspInit+0x4c>)
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aba:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae4 <HAL_MspInit+0x4c>)
 8003abc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ac2:	4b08      	ldr	r3, [pc, #32]	@ (8003ae4 <HAL_MspInit+0x4c>)
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003aca:	603b      	str	r3, [r7, #0]
 8003acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	210f      	movs	r1, #15
 8003ad2:	f06f 0001 	mvn.w	r0, #1
 8003ad6:	f001 f8a9 	bl	8004c2c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ada:	bf00      	nop
 8003adc:	3708      	adds	r7, #8
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	40023800 	.word	0x40023800

08003ae8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08e      	sub	sp, #56	@ 0x38
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003af0:	2300      	movs	r3, #0
 8003af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003af8:	4b33      	ldr	r3, [pc, #204]	@ (8003bc8 <HAL_InitTick+0xe0>)
 8003afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003afc:	4a32      	ldr	r2, [pc, #200]	@ (8003bc8 <HAL_InitTick+0xe0>)
 8003afe:	f043 0310 	orr.w	r3, r3, #16
 8003b02:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b04:	4b30      	ldr	r3, [pc, #192]	@ (8003bc8 <HAL_InitTick+0xe0>)
 8003b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b08:	f003 0310 	and.w	r3, r3, #16
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b10:	f107 0210 	add.w	r2, r7, #16
 8003b14:	f107 0314 	add.w	r3, r7, #20
 8003b18:	4611      	mov	r1, r2
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f004 f990 	bl	8007e40 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003b20:	6a3b      	ldr	r3, [r7, #32]
 8003b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d103      	bne.n	8003b32 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003b2a:	f004 f961 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 8003b2e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003b30:	e004      	b.n	8003b3c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003b32:	f004 f95d 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 8003b36:	4603      	mov	r3, r0
 8003b38:	005b      	lsls	r3, r3, #1
 8003b3a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b3e:	4a23      	ldr	r2, [pc, #140]	@ (8003bcc <HAL_InitTick+0xe4>)
 8003b40:	fba2 2303 	umull	r2, r3, r2, r3
 8003b44:	0c9b      	lsrs	r3, r3, #18
 8003b46:	3b01      	subs	r3, #1
 8003b48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003b4a:	4b21      	ldr	r3, [pc, #132]	@ (8003bd0 <HAL_InitTick+0xe8>)
 8003b4c:	4a21      	ldr	r2, [pc, #132]	@ (8003bd4 <HAL_InitTick+0xec>)
 8003b4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003b50:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd0 <HAL_InitTick+0xe8>)
 8003b52:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003b56:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b58:	4a1d      	ldr	r2, [pc, #116]	@ (8003bd0 <HAL_InitTick+0xe8>)
 8003b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd0 <HAL_InitTick+0xe8>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b64:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd0 <HAL_InitTick+0xe8>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b6a:	4b19      	ldr	r3, [pc, #100]	@ (8003bd0 <HAL_InitTick+0xe8>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003b70:	4817      	ldr	r0, [pc, #92]	@ (8003bd0 <HAL_InitTick+0xe8>)
 8003b72:	f006 f937 	bl	8009de4 <HAL_TIM_Base_Init>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003b7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d11b      	bne.n	8003bbc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003b84:	4812      	ldr	r0, [pc, #72]	@ (8003bd0 <HAL_InitTick+0xe8>)
 8003b86:	f006 f985 	bl	8009e94 <HAL_TIM_Base_Start_IT>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003b90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d111      	bne.n	8003bbc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b98:	2036      	movs	r0, #54	@ 0x36
 8003b9a:	f001 f863 	bl	8004c64 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2b0f      	cmp	r3, #15
 8003ba2:	d808      	bhi.n	8003bb6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	2036      	movs	r0, #54	@ 0x36
 8003baa:	f001 f83f 	bl	8004c2c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bae:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd8 <HAL_InitTick+0xf0>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6013      	str	r3, [r2, #0]
 8003bb4:	e002      	b.n	8003bbc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3738      	adds	r7, #56	@ 0x38
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	431bde83 	.word	0x431bde83
 8003bd0:	200009c0 	.word	0x200009c0
 8003bd4:	40001000 	.word	0x40001000
 8003bd8:	20000038 	.word	0x20000038

08003bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003be0:	bf00      	nop
 8003be2:	e7fd      	b.n	8003be0 <NMI_Handler+0x4>

08003be4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003be8:	bf00      	nop
 8003bea:	e7fd      	b.n	8003be8 <HardFault_Handler+0x4>

08003bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bf0:	bf00      	nop
 8003bf2:	e7fd      	b.n	8003bf0 <MemManage_Handler+0x4>

08003bf4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf8:	bf00      	nop
 8003bfa:	e7fd      	b.n	8003bf8 <BusFault_Handler+0x4>

08003bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c00:	bf00      	nop
 8003c02:	e7fd      	b.n	8003c00 <UsageFault_Handler+0x4>

08003c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c08:	bf00      	nop
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr
	...

08003c14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003c18:	4802      	ldr	r0, [pc, #8]	@ (8003c24 <USART1_IRQHandler+0x10>)
 8003c1a:	f006 fec1 	bl	800a9a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	bf00      	nop
 8003c24:	20000c14 	.word	0x20000c14

08003c28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8003c2c:	4b06      	ldr	r3, [pc, #24]	@ (8003c48 <TIM6_DAC_IRQHandler+0x20>)
 8003c2e:	791b      	ldrb	r3, [r3, #4]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8003c36:	4804      	ldr	r0, [pc, #16]	@ (8003c48 <TIM6_DAC_IRQHandler+0x20>)
 8003c38:	f001 f844 	bl	8004cc4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003c3c:	4803      	ldr	r0, [pc, #12]	@ (8003c4c <TIM6_DAC_IRQHandler+0x24>)
 8003c3e:	f006 f9a1 	bl	8009f84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c42:	bf00      	nop
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000140 	.word	0x20000140
 8003c4c:	200009c0 	.word	0x200009c0

08003c50 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003c54:	4802      	ldr	r0, [pc, #8]	@ (8003c60 <LTDC_IRQHandler+0x10>)
 8003c56:	f003 f961 	bl	8006f1c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003c5a:	bf00      	nop
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	2000052c 	.word	0x2000052c

08003c64 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003c68:	4802      	ldr	r0, [pc, #8]	@ (8003c74 <DMA2D_IRQHandler+0x10>)
 8003c6a:	f001 fd31 	bl	80056d0 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003c6e:	bf00      	nop
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20000154 	.word	0x20000154

08003c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c80:	4a14      	ldr	r2, [pc, #80]	@ (8003cd4 <_sbrk+0x5c>)
 8003c82:	4b15      	ldr	r3, [pc, #84]	@ (8003cd8 <_sbrk+0x60>)
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c8c:	4b13      	ldr	r3, [pc, #76]	@ (8003cdc <_sbrk+0x64>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d102      	bne.n	8003c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c94:	4b11      	ldr	r3, [pc, #68]	@ (8003cdc <_sbrk+0x64>)
 8003c96:	4a12      	ldr	r2, [pc, #72]	@ (8003ce0 <_sbrk+0x68>)
 8003c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c9a:	4b10      	ldr	r3, [pc, #64]	@ (8003cdc <_sbrk+0x64>)
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4413      	add	r3, r2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d207      	bcs.n	8003cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ca8:	f00e fa26 	bl	80120f8 <__errno>
 8003cac:	4603      	mov	r3, r0
 8003cae:	220c      	movs	r2, #12
 8003cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8003cb6:	e009      	b.n	8003ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cb8:	4b08      	ldr	r3, [pc, #32]	@ (8003cdc <_sbrk+0x64>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cbe:	4b07      	ldr	r3, [pc, #28]	@ (8003cdc <_sbrk+0x64>)
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4413      	add	r3, r2
 8003cc6:	4a05      	ldr	r2, [pc, #20]	@ (8003cdc <_sbrk+0x64>)
 8003cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003cca:	68fb      	ldr	r3, [r7, #12]
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20050000 	.word	0x20050000
 8003cd8:	00000400 	.word	0x00000400
 8003cdc:	20000a0c 	.word	0x20000a0c
 8003ce0:	20004c00 	.word	0x20004c00

08003ce4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ce8:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <SystemInit+0x20>)
 8003cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cee:	4a05      	ldr	r2, [pc, #20]	@ (8003d04 <SystemInit+0x20>)
 8003cf0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cf4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	e000ed00 	.word	0xe000ed00

08003d08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d0e:	f107 0310 	add.w	r3, r7, #16
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	605a      	str	r2, [r3, #4]
 8003d18:	609a      	str	r2, [r3, #8]
 8003d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d1c:	1d3b      	adds	r3, r7, #4
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003d26:	4b20      	ldr	r3, [pc, #128]	@ (8003da8 <MX_TIM1_Init+0xa0>)
 8003d28:	4a20      	ldr	r2, [pc, #128]	@ (8003dac <MX_TIM1_Init+0xa4>)
 8003d2a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003d2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003da8 <MX_TIM1_Init+0xa0>)
 8003d2e:	2200      	movs	r2, #0
 8003d30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d32:	4b1d      	ldr	r3, [pc, #116]	@ (8003da8 <MX_TIM1_Init+0xa0>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003d38:	4b1b      	ldr	r3, [pc, #108]	@ (8003da8 <MX_TIM1_Init+0xa0>)
 8003d3a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003d3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d40:	4b19      	ldr	r3, [pc, #100]	@ (8003da8 <MX_TIM1_Init+0xa0>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003d46:	4b18      	ldr	r3, [pc, #96]	@ (8003da8 <MX_TIM1_Init+0xa0>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d4c:	4b16      	ldr	r3, [pc, #88]	@ (8003da8 <MX_TIM1_Init+0xa0>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003d52:	4815      	ldr	r0, [pc, #84]	@ (8003da8 <MX_TIM1_Init+0xa0>)
 8003d54:	f006 f846 	bl	8009de4 <HAL_TIM_Base_Init>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003d5e:	f7fe f9b3 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003d66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003d68:	f107 0310 	add.w	r3, r7, #16
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	480e      	ldr	r0, [pc, #56]	@ (8003da8 <MX_TIM1_Init+0xa0>)
 8003d70:	f006 fa28 	bl	800a1c4 <HAL_TIM_ConfigClockSource>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003d7a:	f7fe f9a5 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003d82:	2300      	movs	r3, #0
 8003d84:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4806      	ldr	r0, [pc, #24]	@ (8003da8 <MX_TIM1_Init+0xa0>)
 8003d90:	f006 fc44 	bl	800a61c <HAL_TIMEx_MasterConfigSynchronization>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d001      	beq.n	8003d9e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003d9a:	f7fe f995 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003d9e:	bf00      	nop
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000a10 	.word	0x20000a10
 8003dac:	40010000 	.word	0x40010000

08003db0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b088      	sub	sp, #32
 8003db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003db6:	f107 0310 	add.w	r3, r7, #16
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	609a      	str	r2, [r3, #8]
 8003dc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dc4:	1d3b      	adds	r3, r7, #4
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	605a      	str	r2, [r3, #4]
 8003dcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003dce:	4b1e      	ldr	r3, [pc, #120]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003dd0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003dd4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003dd6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003de2:	4b19      	ldr	r3, [pc, #100]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295
 8003de8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003dea:	4b17      	ldr	r3, [pc, #92]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003df0:	4b15      	ldr	r3, [pc, #84]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003df6:	4814      	ldr	r0, [pc, #80]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003df8:	f005 fff4 	bl	8009de4 <HAL_TIM_Base_Init>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003e02:	f7fe f961 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003e0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003e0c:	f107 0310 	add.w	r3, r7, #16
 8003e10:	4619      	mov	r1, r3
 8003e12:	480d      	ldr	r0, [pc, #52]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003e14:	f006 f9d6 	bl	800a1c4 <HAL_TIM_ConfigClockSource>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003e1e:	f7fe f953 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e22:	2300      	movs	r3, #0
 8003e24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4806      	ldr	r0, [pc, #24]	@ (8003e48 <MX_TIM2_Init+0x98>)
 8003e30:	f006 fbf4 	bl	800a61c <HAL_TIMEx_MasterConfigSynchronization>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8003e3a:	f7fe f945 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003e3e:	bf00      	nop
 8003e40:	3720      	adds	r7, #32
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	20000a5c 	.word	0x20000a5c

08003e4c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b088      	sub	sp, #32
 8003e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e52:	f107 0310 	add.w	r3, r7, #16
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	605a      	str	r2, [r3, #4]
 8003e5c:	609a      	str	r2, [r3, #8]
 8003e5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e60:	1d3b      	adds	r3, r7, #4
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ee0 <MX_TIM3_Init+0x94>)
 8003e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ee4 <MX_TIM3_Init+0x98>)
 8003e6e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003e70:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee0 <MX_TIM3_Init+0x94>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e76:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee0 <MX_TIM3_Init+0x94>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003e7c:	4b18      	ldr	r3, [pc, #96]	@ (8003ee0 <MX_TIM3_Init+0x94>)
 8003e7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e84:	4b16      	ldr	r3, [pc, #88]	@ (8003ee0 <MX_TIM3_Init+0x94>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ee0 <MX_TIM3_Init+0x94>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003e90:	4813      	ldr	r0, [pc, #76]	@ (8003ee0 <MX_TIM3_Init+0x94>)
 8003e92:	f005 ffa7 	bl	8009de4 <HAL_TIM_Base_Init>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003e9c:	f7fe f914 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003ea4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ea6:	f107 0310 	add.w	r3, r7, #16
 8003eaa:	4619      	mov	r1, r3
 8003eac:	480c      	ldr	r0, [pc, #48]	@ (8003ee0 <MX_TIM3_Init+0x94>)
 8003eae:	f006 f989 	bl	800a1c4 <HAL_TIM_ConfigClockSource>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8003eb8:	f7fe f906 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ec4:	1d3b      	adds	r3, r7, #4
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	4805      	ldr	r0, [pc, #20]	@ (8003ee0 <MX_TIM3_Init+0x94>)
 8003eca:	f006 fba7 	bl	800a61c <HAL_TIMEx_MasterConfigSynchronization>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8003ed4:	f7fe f8f8 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ed8:	bf00      	nop
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	20000aa8 	.word	0x20000aa8
 8003ee4:	40000400 	.word	0x40000400

08003ee8 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b088      	sub	sp, #32
 8003eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003eee:	f107 0310 	add.w	r3, r7, #16
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	605a      	str	r2, [r3, #4]
 8003ef8:	609a      	str	r2, [r3, #8]
 8003efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003efc:	1d3b      	adds	r3, r7, #4
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]
 8003f02:	605a      	str	r2, [r3, #4]
 8003f04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003f06:	4b1d      	ldr	r3, [pc, #116]	@ (8003f7c <MX_TIM5_Init+0x94>)
 8003f08:	4a1d      	ldr	r2, [pc, #116]	@ (8003f80 <MX_TIM5_Init+0x98>)
 8003f0a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f7c <MX_TIM5_Init+0x94>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f12:	4b1a      	ldr	r3, [pc, #104]	@ (8003f7c <MX_TIM5_Init+0x94>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8003f18:	4b18      	ldr	r3, [pc, #96]	@ (8003f7c <MX_TIM5_Init+0x94>)
 8003f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8003f1e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f20:	4b16      	ldr	r3, [pc, #88]	@ (8003f7c <MX_TIM5_Init+0x94>)
 8003f22:	2200      	movs	r2, #0
 8003f24:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f26:	4b15      	ldr	r3, [pc, #84]	@ (8003f7c <MX_TIM5_Init+0x94>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003f2c:	4813      	ldr	r0, [pc, #76]	@ (8003f7c <MX_TIM5_Init+0x94>)
 8003f2e:	f005 ff59 	bl	8009de4 <HAL_TIM_Base_Init>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003f38:	f7fe f8c6 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003f42:	f107 0310 	add.w	r3, r7, #16
 8003f46:	4619      	mov	r1, r3
 8003f48:	480c      	ldr	r0, [pc, #48]	@ (8003f7c <MX_TIM5_Init+0x94>)
 8003f4a:	f006 f93b 	bl	800a1c4 <HAL_TIM_ConfigClockSource>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d001      	beq.n	8003f58 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003f54:	f7fe f8b8 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003f60:	1d3b      	adds	r3, r7, #4
 8003f62:	4619      	mov	r1, r3
 8003f64:	4805      	ldr	r0, [pc, #20]	@ (8003f7c <MX_TIM5_Init+0x94>)
 8003f66:	f006 fb59 	bl	800a61c <HAL_TIMEx_MasterConfigSynchronization>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003f70:	f7fe f8aa 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003f74:	bf00      	nop
 8003f76:	3720      	adds	r7, #32
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	20000af4 	.word	0x20000af4
 8003f80:	40000c00 	.word	0x40000c00

08003f84 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b088      	sub	sp, #32
 8003f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f8a:	f107 0310 	add.w	r3, r7, #16
 8003f8e:	2200      	movs	r2, #0
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	605a      	str	r2, [r3, #4]
 8003f94:	609a      	str	r2, [r3, #8]
 8003f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f98:	1d3b      	adds	r3, r7, #4
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	605a      	str	r2, [r3, #4]
 8003fa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003fa2:	4b20      	ldr	r3, [pc, #128]	@ (8004024 <MX_TIM8_Init+0xa0>)
 8003fa4:	4a20      	ldr	r2, [pc, #128]	@ (8004028 <MX_TIM8_Init+0xa4>)
 8003fa6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003fa8:	4b1e      	ldr	r3, [pc, #120]	@ (8004024 <MX_TIM8_Init+0xa0>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fae:	4b1d      	ldr	r3, [pc, #116]	@ (8004024 <MX_TIM8_Init+0xa0>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8004024 <MX_TIM8_Init+0xa0>)
 8003fb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003fba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fbc:	4b19      	ldr	r3, [pc, #100]	@ (8004024 <MX_TIM8_Init+0xa0>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003fc2:	4b18      	ldr	r3, [pc, #96]	@ (8004024 <MX_TIM8_Init+0xa0>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc8:	4b16      	ldr	r3, [pc, #88]	@ (8004024 <MX_TIM8_Init+0xa0>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8003fce:	4815      	ldr	r0, [pc, #84]	@ (8004024 <MX_TIM8_Init+0xa0>)
 8003fd0:	f005 ff08 	bl	8009de4 <HAL_TIM_Base_Init>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8003fda:	f7fe f875 	bl	80020c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8003fe4:	f107 0310 	add.w	r3, r7, #16
 8003fe8:	4619      	mov	r1, r3
 8003fea:	480e      	ldr	r0, [pc, #56]	@ (8004024 <MX_TIM8_Init+0xa0>)
 8003fec:	f006 f8ea 	bl	800a1c4 <HAL_TIM_ConfigClockSource>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8003ff6:	f7fe f867 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004002:	2300      	movs	r3, #0
 8004004:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004006:	1d3b      	adds	r3, r7, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4806      	ldr	r0, [pc, #24]	@ (8004024 <MX_TIM8_Init+0xa0>)
 800400c:	f006 fb06 	bl	800a61c <HAL_TIMEx_MasterConfigSynchronization>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8004016:	f7fe f857 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800401a:	bf00      	nop
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000b40 	.word	0x20000b40
 8004028:	40010400 	.word	0x40010400

0800402c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b08e      	sub	sp, #56	@ 0x38
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004034:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004038:	2200      	movs	r2, #0
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	605a      	str	r2, [r3, #4]
 800403e:	609a      	str	r2, [r3, #8]
 8004040:	60da      	str	r2, [r3, #12]
 8004042:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a3b      	ldr	r2, [pc, #236]	@ (8004138 <HAL_TIM_Base_MspInit+0x10c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d10c      	bne.n	8004068 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800404e:	4b3b      	ldr	r3, [pc, #236]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 8004050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004052:	4a3a      	ldr	r2, [pc, #232]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6453      	str	r3, [r2, #68]	@ 0x44
 800405a:	4b38      	ldr	r3, [pc, #224]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004066:	e062      	b.n	800412e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004070:	d10c      	bne.n	800408c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004072:	4b32      	ldr	r3, [pc, #200]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 8004074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004076:	4a31      	ldr	r2, [pc, #196]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 8004078:	f043 0301 	orr.w	r3, r3, #1
 800407c:	6413      	str	r3, [r2, #64]	@ 0x40
 800407e:	4b2f      	ldr	r3, [pc, #188]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	69fb      	ldr	r3, [r7, #28]
}
 800408a:	e050      	b.n	800412e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a2b      	ldr	r2, [pc, #172]	@ (8004140 <HAL_TIM_Base_MspInit+0x114>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d10c      	bne.n	80040b0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004096:	4b29      	ldr	r3, [pc, #164]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	4a28      	ldr	r2, [pc, #160]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 800409c:	f043 0302 	orr.w	r3, r3, #2
 80040a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80040a2:	4b26      	ldr	r3, [pc, #152]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a6:	f003 0302 	and.w	r3, r3, #2
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	69bb      	ldr	r3, [r7, #24]
}
 80040ae:	e03e      	b.n	800412e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a23      	ldr	r2, [pc, #140]	@ (8004144 <HAL_TIM_Base_MspInit+0x118>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d10c      	bne.n	80040d4 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80040ba:	4b20      	ldr	r3, [pc, #128]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	4a1f      	ldr	r2, [pc, #124]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 80040c0:	f043 0308 	orr.w	r3, r3, #8
 80040c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80040c6:	4b1d      	ldr	r3, [pc, #116]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 80040c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	617b      	str	r3, [r7, #20]
 80040d0:	697b      	ldr	r3, [r7, #20]
}
 80040d2:	e02c      	b.n	800412e <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004148 <HAL_TIM_Base_MspInit+0x11c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d127      	bne.n	800412e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80040de:	4b17      	ldr	r3, [pc, #92]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 80040e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040e2:	4a16      	ldr	r2, [pc, #88]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 80040e4:	f043 0302 	orr.w	r3, r3, #2
 80040e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80040ea:	4b14      	ldr	r3, [pc, #80]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 80040ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	613b      	str	r3, [r7, #16]
 80040f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80040f6:	4b11      	ldr	r3, [pc, #68]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040fa:	4a10      	ldr	r2, [pc, #64]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 80040fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004100:	6313      	str	r3, [r2, #48]	@ 0x30
 8004102:	4b0e      	ldr	r3, [pc, #56]	@ (800413c <HAL_TIM_Base_MspInit+0x110>)
 8004104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004106:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410a:	60fb      	str	r3, [r7, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800410e:	2304      	movs	r3, #4
 8004110:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004112:	2302      	movs	r3, #2
 8004114:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004116:	2300      	movs	r3, #0
 8004118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800411a:	2300      	movs	r3, #0
 800411c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800411e:	2303      	movs	r3, #3
 8004120:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004126:	4619      	mov	r1, r3
 8004128:	4808      	ldr	r0, [pc, #32]	@ (800414c <HAL_TIM_Base_MspInit+0x120>)
 800412a:	f001 fd0f 	bl	8005b4c <HAL_GPIO_Init>
}
 800412e:	bf00      	nop
 8004130:	3738      	adds	r7, #56	@ 0x38
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40010000 	.word	0x40010000
 800413c:	40023800 	.word	0x40023800
 8004140:	40000400 	.word	0x40000400
 8004144:	40000c00 	.word	0x40000c00
 8004148:	40010400 	.word	0x40010400
 800414c:	40022000 	.word	0x40022000

08004150 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004154:	4b14      	ldr	r3, [pc, #80]	@ (80041a8 <MX_UART7_Init+0x58>)
 8004156:	4a15      	ldr	r2, [pc, #84]	@ (80041ac <MX_UART7_Init+0x5c>)
 8004158:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800415a:	4b13      	ldr	r3, [pc, #76]	@ (80041a8 <MX_UART7_Init+0x58>)
 800415c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004160:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004162:	4b11      	ldr	r3, [pc, #68]	@ (80041a8 <MX_UART7_Init+0x58>)
 8004164:	2200      	movs	r2, #0
 8004166:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004168:	4b0f      	ldr	r3, [pc, #60]	@ (80041a8 <MX_UART7_Init+0x58>)
 800416a:	2200      	movs	r2, #0
 800416c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800416e:	4b0e      	ldr	r3, [pc, #56]	@ (80041a8 <MX_UART7_Init+0x58>)
 8004170:	2200      	movs	r2, #0
 8004172:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004174:	4b0c      	ldr	r3, [pc, #48]	@ (80041a8 <MX_UART7_Init+0x58>)
 8004176:	220c      	movs	r2, #12
 8004178:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800417a:	4b0b      	ldr	r3, [pc, #44]	@ (80041a8 <MX_UART7_Init+0x58>)
 800417c:	2200      	movs	r2, #0
 800417e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004180:	4b09      	ldr	r3, [pc, #36]	@ (80041a8 <MX_UART7_Init+0x58>)
 8004182:	2200      	movs	r2, #0
 8004184:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004186:	4b08      	ldr	r3, [pc, #32]	@ (80041a8 <MX_UART7_Init+0x58>)
 8004188:	2200      	movs	r2, #0
 800418a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <MX_UART7_Init+0x58>)
 800418e:	2200      	movs	r2, #0
 8004190:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004192:	4805      	ldr	r0, [pc, #20]	@ (80041a8 <MX_UART7_Init+0x58>)
 8004194:	f006 faee 	bl	800a774 <HAL_UART_Init>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800419e:	f7fd ff93 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80041a2:	bf00      	nop
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000b8c 	.word	0x20000b8c
 80041ac:	40007800 	.word	0x40007800

080041b0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041b4:	4b14      	ldr	r3, [pc, #80]	@ (8004208 <MX_USART1_UART_Init+0x58>)
 80041b6:	4a15      	ldr	r2, [pc, #84]	@ (800420c <MX_USART1_UART_Init+0x5c>)
 80041b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80041ba:	4b13      	ldr	r3, [pc, #76]	@ (8004208 <MX_USART1_UART_Init+0x58>)
 80041bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80041c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041c2:	4b11      	ldr	r3, [pc, #68]	@ (8004208 <MX_USART1_UART_Init+0x58>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041c8:	4b0f      	ldr	r3, [pc, #60]	@ (8004208 <MX_USART1_UART_Init+0x58>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041ce:	4b0e      	ldr	r3, [pc, #56]	@ (8004208 <MX_USART1_UART_Init+0x58>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004208 <MX_USART1_UART_Init+0x58>)
 80041d6:	220c      	movs	r2, #12
 80041d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041da:	4b0b      	ldr	r3, [pc, #44]	@ (8004208 <MX_USART1_UART_Init+0x58>)
 80041dc:	2200      	movs	r2, #0
 80041de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041e0:	4b09      	ldr	r3, [pc, #36]	@ (8004208 <MX_USART1_UART_Init+0x58>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80041e6:	4b08      	ldr	r3, [pc, #32]	@ (8004208 <MX_USART1_UART_Init+0x58>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041ec:	4b06      	ldr	r3, [pc, #24]	@ (8004208 <MX_USART1_UART_Init+0x58>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041f2:	4805      	ldr	r0, [pc, #20]	@ (8004208 <MX_USART1_UART_Init+0x58>)
 80041f4:	f006 fabe 	bl	800a774 <HAL_UART_Init>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d001      	beq.n	8004202 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80041fe:	f7fd ff63 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000c14 	.word	0x20000c14
 800420c:	40011000 	.word	0x40011000

08004210 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004214:	4b14      	ldr	r3, [pc, #80]	@ (8004268 <MX_USART6_UART_Init+0x58>)
 8004216:	4a15      	ldr	r2, [pc, #84]	@ (800426c <MX_USART6_UART_Init+0x5c>)
 8004218:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800421a:	4b13      	ldr	r3, [pc, #76]	@ (8004268 <MX_USART6_UART_Init+0x58>)
 800421c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004220:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004222:	4b11      	ldr	r3, [pc, #68]	@ (8004268 <MX_USART6_UART_Init+0x58>)
 8004224:	2200      	movs	r2, #0
 8004226:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004228:	4b0f      	ldr	r3, [pc, #60]	@ (8004268 <MX_USART6_UART_Init+0x58>)
 800422a:	2200      	movs	r2, #0
 800422c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800422e:	4b0e      	ldr	r3, [pc, #56]	@ (8004268 <MX_USART6_UART_Init+0x58>)
 8004230:	2200      	movs	r2, #0
 8004232:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004234:	4b0c      	ldr	r3, [pc, #48]	@ (8004268 <MX_USART6_UART_Init+0x58>)
 8004236:	220c      	movs	r2, #12
 8004238:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800423a:	4b0b      	ldr	r3, [pc, #44]	@ (8004268 <MX_USART6_UART_Init+0x58>)
 800423c:	2200      	movs	r2, #0
 800423e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004240:	4b09      	ldr	r3, [pc, #36]	@ (8004268 <MX_USART6_UART_Init+0x58>)
 8004242:	2200      	movs	r2, #0
 8004244:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004246:	4b08      	ldr	r3, [pc, #32]	@ (8004268 <MX_USART6_UART_Init+0x58>)
 8004248:	2200      	movs	r2, #0
 800424a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <MX_USART6_UART_Init+0x58>)
 800424e:	2200      	movs	r2, #0
 8004250:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004252:	4805      	ldr	r0, [pc, #20]	@ (8004268 <MX_USART6_UART_Init+0x58>)
 8004254:	f006 fa8e 	bl	800a774 <HAL_UART_Init>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800425e:	f7fd ff33 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000c9c 	.word	0x20000c9c
 800426c:	40011400 	.word	0x40011400

08004270 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b0b0      	sub	sp, #192	@ 0xc0
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004278:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800427c:	2200      	movs	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	60da      	str	r2, [r3, #12]
 8004286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004288:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800428c:	2284      	movs	r2, #132	@ 0x84
 800428e:	2100      	movs	r1, #0
 8004290:	4618      	mov	r0, r3
 8004292:	f00d fed3 	bl	801203c <memset>
  if(uartHandle->Instance==UART7)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a79      	ldr	r2, [pc, #484]	@ (8004480 <HAL_UART_MspInit+0x210>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d13d      	bne.n	800431c <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80042a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80042a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042b0:	4618      	mov	r0, r3
 80042b2:	f003 fdf7 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80042bc:	f7fd ff04 	bl	80020c8 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80042c0:	4b70      	ldr	r3, [pc, #448]	@ (8004484 <HAL_UART_MspInit+0x214>)
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	4a6f      	ldr	r2, [pc, #444]	@ (8004484 <HAL_UART_MspInit+0x214>)
 80042c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80042ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80042cc:	4b6d      	ldr	r3, [pc, #436]	@ (8004484 <HAL_UART_MspInit+0x214>)
 80042ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80042d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004484 <HAL_UART_MspInit+0x214>)
 80042da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042dc:	4a69      	ldr	r2, [pc, #420]	@ (8004484 <HAL_UART_MspInit+0x214>)
 80042de:	f043 0320 	orr.w	r3, r3, #32
 80042e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80042e4:	4b67      	ldr	r3, [pc, #412]	@ (8004484 <HAL_UART_MspInit+0x214>)
 80042e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e8:	f003 0320 	and.w	r3, r3, #32
 80042ec:	623b      	str	r3, [r7, #32]
 80042ee:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80042f0:	23c0      	movs	r3, #192	@ 0xc0
 80042f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f6:	2302      	movs	r3, #2
 80042f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fc:	2300      	movs	r3, #0
 80042fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004302:	2303      	movs	r3, #3
 8004304:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004308:	2308      	movs	r3, #8
 800430a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800430e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004312:	4619      	mov	r1, r3
 8004314:	485c      	ldr	r0, [pc, #368]	@ (8004488 <HAL_UART_MspInit+0x218>)
 8004316:	f001 fc19 	bl	8005b4c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800431a:	e0ac      	b.n	8004476 <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a5a      	ldr	r2, [pc, #360]	@ (800448c <HAL_UART_MspInit+0x21c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d165      	bne.n	80043f2 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004326:	2340      	movs	r3, #64	@ 0x40
 8004328:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800432a:	2300      	movs	r3, #0
 800432c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800432e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004332:	4618      	mov	r0, r3
 8004334:	f003 fdb6 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d001      	beq.n	8004342 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800433e:	f7fd fec3 	bl	80020c8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004342:	4b50      	ldr	r3, [pc, #320]	@ (8004484 <HAL_UART_MspInit+0x214>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004346:	4a4f      	ldr	r2, [pc, #316]	@ (8004484 <HAL_UART_MspInit+0x214>)
 8004348:	f043 0310 	orr.w	r3, r3, #16
 800434c:	6453      	str	r3, [r2, #68]	@ 0x44
 800434e:	4b4d      	ldr	r3, [pc, #308]	@ (8004484 <HAL_UART_MspInit+0x214>)
 8004350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004352:	f003 0310 	and.w	r3, r3, #16
 8004356:	61fb      	str	r3, [r7, #28]
 8004358:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800435a:	4b4a      	ldr	r3, [pc, #296]	@ (8004484 <HAL_UART_MspInit+0x214>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435e:	4a49      	ldr	r2, [pc, #292]	@ (8004484 <HAL_UART_MspInit+0x214>)
 8004360:	f043 0302 	orr.w	r3, r3, #2
 8004364:	6313      	str	r3, [r2, #48]	@ 0x30
 8004366:	4b47      	ldr	r3, [pc, #284]	@ (8004484 <HAL_UART_MspInit+0x214>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	61bb      	str	r3, [r7, #24]
 8004370:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004372:	4b44      	ldr	r3, [pc, #272]	@ (8004484 <HAL_UART_MspInit+0x214>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	4a43      	ldr	r2, [pc, #268]	@ (8004484 <HAL_UART_MspInit+0x214>)
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	6313      	str	r3, [r2, #48]	@ 0x30
 800437e:	4b41      	ldr	r3, [pc, #260]	@ (8004484 <HAL_UART_MspInit+0x214>)
 8004380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800438a:	2380      	movs	r3, #128	@ 0x80
 800438c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004390:	2302      	movs	r3, #2
 8004392:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004396:	2300      	movs	r3, #0
 8004398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439c:	2300      	movs	r3, #0
 800439e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043a2:	2307      	movs	r3, #7
 80043a4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80043a8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80043ac:	4619      	mov	r1, r3
 80043ae:	4838      	ldr	r0, [pc, #224]	@ (8004490 <HAL_UART_MspInit+0x220>)
 80043b0:	f001 fbcc 	bl	8005b4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80043b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043bc:	2302      	movs	r3, #2
 80043be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c8:	2300      	movs	r3, #0
 80043ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80043ce:	2307      	movs	r3, #7
 80043d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80043d4:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80043d8:	4619      	mov	r1, r3
 80043da:	482e      	ldr	r0, [pc, #184]	@ (8004494 <HAL_UART_MspInit+0x224>)
 80043dc:	f001 fbb6 	bl	8005b4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80043e0:	2200      	movs	r2, #0
 80043e2:	2107      	movs	r1, #7
 80043e4:	2025      	movs	r0, #37	@ 0x25
 80043e6:	f000 fc21 	bl	8004c2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80043ea:	2025      	movs	r0, #37	@ 0x25
 80043ec:	f000 fc3a 	bl	8004c64 <HAL_NVIC_EnableIRQ>
}
 80043f0:	e041      	b.n	8004476 <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART6)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a28      	ldr	r2, [pc, #160]	@ (8004498 <HAL_UART_MspInit+0x228>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d13c      	bne.n	8004476 <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80043fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004400:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8004402:	2300      	movs	r3, #0
 8004404:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004408:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800440c:	4618      	mov	r0, r3
 800440e:	f003 fd49 	bl	8007ea4 <HAL_RCCEx_PeriphCLKConfig>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 8004418:	f7fd fe56 	bl	80020c8 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800441c:	4b19      	ldr	r3, [pc, #100]	@ (8004484 <HAL_UART_MspInit+0x214>)
 800441e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004420:	4a18      	ldr	r2, [pc, #96]	@ (8004484 <HAL_UART_MspInit+0x214>)
 8004422:	f043 0320 	orr.w	r3, r3, #32
 8004426:	6453      	str	r3, [r2, #68]	@ 0x44
 8004428:	4b16      	ldr	r3, [pc, #88]	@ (8004484 <HAL_UART_MspInit+0x214>)
 800442a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004434:	4b13      	ldr	r3, [pc, #76]	@ (8004484 <HAL_UART_MspInit+0x214>)
 8004436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004438:	4a12      	ldr	r2, [pc, #72]	@ (8004484 <HAL_UART_MspInit+0x214>)
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004440:	4b10      	ldr	r3, [pc, #64]	@ (8004484 <HAL_UART_MspInit+0x214>)
 8004442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	60fb      	str	r3, [r7, #12]
 800444a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 800444c:	23c0      	movs	r3, #192	@ 0xc0
 800444e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004452:	2302      	movs	r3, #2
 8004454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004458:	2300      	movs	r3, #0
 800445a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800445e:	2303      	movs	r3, #3
 8004460:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004464:	2308      	movs	r3, #8
 8004466:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800446a:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800446e:	4619      	mov	r1, r3
 8004470:	480a      	ldr	r0, [pc, #40]	@ (800449c <HAL_UART_MspInit+0x22c>)
 8004472:	f001 fb6b 	bl	8005b4c <HAL_GPIO_Init>
}
 8004476:	bf00      	nop
 8004478:	37c0      	adds	r7, #192	@ 0xc0
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40007800 	.word	0x40007800
 8004484:	40023800 	.word	0x40023800
 8004488:	40021400 	.word	0x40021400
 800448c:	40011000 	.word	0x40011000
 8004490:	40020400 	.word	0x40020400
 8004494:	40020000 	.word	0x40020000
 8004498:	40011400 	.word	0x40011400
 800449c:	40020800 	.word	0x40020800

080044a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80044a0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80044d8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044a4:	480d      	ldr	r0, [pc, #52]	@ (80044dc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044a6:	490e      	ldr	r1, [pc, #56]	@ (80044e0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044a8:	4a0e      	ldr	r2, [pc, #56]	@ (80044e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044ac:	e002      	b.n	80044b4 <LoopCopyDataInit>

080044ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044b2:	3304      	adds	r3, #4

080044b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044b8:	d3f9      	bcc.n	80044ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044ba:	4a0b      	ldr	r2, [pc, #44]	@ (80044e8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044bc:	4c0b      	ldr	r4, [pc, #44]	@ (80044ec <LoopFillZerobss+0x26>)
  movs r3, #0
 80044be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c0:	e001      	b.n	80044c6 <LoopFillZerobss>

080044c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044c4:	3204      	adds	r2, #4

080044c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044c8:	d3fb      	bcc.n	80044c2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80044ca:	f7ff fc0b 	bl	8003ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044ce:	f00d fe19 	bl	8012104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044d2:	f7fd fc3b 	bl	8001d4c <main>
  bx  lr    
 80044d6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80044d8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80044dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e0:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80044e4:	08014710 	.word	0x08014710
  ldr r2, =_sbss
 80044e8:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80044ec:	20004bfc 	.word	0x20004bfc

080044f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044f0:	e7fe      	b.n	80044f0 <ADC_IRQHandler>

080044f2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80044f6:	2003      	movs	r0, #3
 80044f8:	f000 fb8d 	bl	8004c16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80044fc:	200f      	movs	r0, #15
 80044fe:	f7ff faf3 	bl	8003ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004502:	f7ff fac9 	bl	8003a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004510:	4b06      	ldr	r3, [pc, #24]	@ (800452c <HAL_IncTick+0x20>)
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	461a      	mov	r2, r3
 8004516:	4b06      	ldr	r3, [pc, #24]	@ (8004530 <HAL_IncTick+0x24>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4413      	add	r3, r2
 800451c:	4a04      	ldr	r2, [pc, #16]	@ (8004530 <HAL_IncTick+0x24>)
 800451e:	6013      	str	r3, [r2, #0]
}
 8004520:	bf00      	nop
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	2000003c 	.word	0x2000003c
 8004530:	20000d24 	.word	0x20000d24

08004534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return uwTick;
 8004538:	4b03      	ldr	r3, [pc, #12]	@ (8004548 <HAL_GetTick+0x14>)
 800453a:	681b      	ldr	r3, [r3, #0]
}
 800453c:	4618      	mov	r0, r3
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	20000d24 	.word	0x20000d24

0800454c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004554:	f7ff ffee 	bl	8004534 <HAL_GetTick>
 8004558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d005      	beq.n	8004572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004566:	4b0a      	ldr	r3, [pc, #40]	@ (8004590 <HAL_Delay+0x44>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004572:	bf00      	nop
 8004574:	f7ff ffde 	bl	8004534 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	429a      	cmp	r2, r3
 8004582:	d8f7      	bhi.n	8004574 <HAL_Delay+0x28>
  {
  }
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	2000003c 	.word	0x2000003c

08004594 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800459c:	2300      	movs	r3, #0
 800459e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e031      	b.n	800460e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d109      	bne.n	80045c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fc f898 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ca:	f003 0310 	and.w	r3, r3, #16
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d116      	bne.n	8004600 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045d6:	4b10      	ldr	r3, [pc, #64]	@ (8004618 <HAL_ADC_Init+0x84>)
 80045d8:	4013      	ands	r3, r2
 80045da:	f043 0202 	orr.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f970 	bl	80048c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	f043 0201 	orr.w	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80045fe:	e001      	b.n	8004604 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	ffffeefd 	.word	0xffffeefd

0800461c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004630:	2b01      	cmp	r3, #1
 8004632:	d101      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x1c>
 8004634:	2302      	movs	r3, #2
 8004636:	e136      	b.n	80048a6 <HAL_ADC_ConfigChannel+0x28a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b09      	cmp	r3, #9
 8004646:	d93a      	bls.n	80046be <HAL_ADC_ConfigChannel+0xa2>
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004650:	d035      	beq.n	80046be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68d9      	ldr	r1, [r3, #12]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	b29b      	uxth	r3, r3
 800465e:	461a      	mov	r2, r3
 8004660:	4613      	mov	r3, r2
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	4413      	add	r3, r2
 8004666:	3b1e      	subs	r3, #30
 8004668:	2207      	movs	r2, #7
 800466a:	fa02 f303 	lsl.w	r3, r2, r3
 800466e:	43da      	mvns	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	400a      	ands	r2, r1
 8004676:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a8d      	ldr	r2, [pc, #564]	@ (80048b4 <HAL_ADC_ConfigChannel+0x298>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10a      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68d9      	ldr	r1, [r3, #12]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	061a      	lsls	r2, r3, #24
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004696:	e035      	b.n	8004704 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68d9      	ldr	r1, [r3, #12]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	4618      	mov	r0, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	4403      	add	r3, r0
 80046b0:	3b1e      	subs	r3, #30
 80046b2:	409a      	lsls	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80046bc:	e022      	b.n	8004704 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6919      	ldr	r1, [r3, #16]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	461a      	mov	r2, r3
 80046cc:	4613      	mov	r3, r2
 80046ce:	005b      	lsls	r3, r3, #1
 80046d0:	4413      	add	r3, r2
 80046d2:	2207      	movs	r2, #7
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	43da      	mvns	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	400a      	ands	r2, r1
 80046e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6919      	ldr	r1, [r3, #16]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	689a      	ldr	r2, [r3, #8]
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	4618      	mov	r0, r3
 80046f4:	4603      	mov	r3, r0
 80046f6:	005b      	lsls	r3, r3, #1
 80046f8:	4403      	add	r3, r0
 80046fa:	409a      	lsls	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	430a      	orrs	r2, r1
 8004702:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b06      	cmp	r3, #6
 800470a:	d824      	bhi.n	8004756 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685a      	ldr	r2, [r3, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4413      	add	r3, r2
 800471c:	3b05      	subs	r3, #5
 800471e:	221f      	movs	r2, #31
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43da      	mvns	r2, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	400a      	ands	r2, r1
 800472c:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	4618      	mov	r0, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685a      	ldr	r2, [r3, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	3b05      	subs	r3, #5
 8004748:	fa00 f203 	lsl.w	r2, r0, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	635a      	str	r2, [r3, #52]	@ 0x34
 8004754:	e04c      	b.n	80047f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b0c      	cmp	r3, #12
 800475c:	d824      	bhi.n	80047a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	3b23      	subs	r3, #35	@ 0x23
 8004770:	221f      	movs	r2, #31
 8004772:	fa02 f303 	lsl.w	r3, r2, r3
 8004776:	43da      	mvns	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	400a      	ands	r2, r1
 800477e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	4618      	mov	r0, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	4413      	add	r3, r2
 8004798:	3b23      	subs	r3, #35	@ 0x23
 800479a:	fa00 f203 	lsl.w	r2, r0, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	430a      	orrs	r2, r1
 80047a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80047a6:	e023      	b.n	80047f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685a      	ldr	r2, [r3, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	3b41      	subs	r3, #65	@ 0x41
 80047ba:	221f      	movs	r2, #31
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43da      	mvns	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	400a      	ands	r2, r1
 80047c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	4618      	mov	r0, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	685a      	ldr	r2, [r3, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	3b41      	subs	r3, #65	@ 0x41
 80047e4:	fa00 f203 	lsl.w	r2, r0, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a30      	ldr	r2, [pc, #192]	@ (80048b8 <HAL_ADC_ConfigChannel+0x29c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d10a      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x1f4>
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004802:	d105      	bne.n	8004810 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004804:	4b2d      	ldr	r3, [pc, #180]	@ (80048bc <HAL_ADC_ConfigChannel+0x2a0>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4a2c      	ldr	r2, [pc, #176]	@ (80048bc <HAL_ADC_ConfigChannel+0x2a0>)
 800480a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800480e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a28      	ldr	r2, [pc, #160]	@ (80048b8 <HAL_ADC_ConfigChannel+0x29c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10f      	bne.n	800483a <HAL_ADC_ConfigChannel+0x21e>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2b12      	cmp	r3, #18
 8004820:	d10b      	bne.n	800483a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004822:	4b26      	ldr	r3, [pc, #152]	@ (80048bc <HAL_ADC_ConfigChannel+0x2a0>)
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	4a25      	ldr	r2, [pc, #148]	@ (80048bc <HAL_ADC_ConfigChannel+0x2a0>)
 8004828:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800482c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800482e:	4b23      	ldr	r3, [pc, #140]	@ (80048bc <HAL_ADC_ConfigChannel+0x2a0>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	4a22      	ldr	r2, [pc, #136]	@ (80048bc <HAL_ADC_ConfigChannel+0x2a0>)
 8004834:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004838:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a1e      	ldr	r2, [pc, #120]	@ (80048b8 <HAL_ADC_ConfigChannel+0x29c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d12b      	bne.n	800489c <HAL_ADC_ConfigChannel+0x280>
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a1a      	ldr	r2, [pc, #104]	@ (80048b4 <HAL_ADC_ConfigChannel+0x298>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d003      	beq.n	8004856 <HAL_ADC_ConfigChannel+0x23a>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2b11      	cmp	r3, #17
 8004854:	d122      	bne.n	800489c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004856:	4b19      	ldr	r3, [pc, #100]	@ (80048bc <HAL_ADC_ConfigChannel+0x2a0>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	4a18      	ldr	r2, [pc, #96]	@ (80048bc <HAL_ADC_ConfigChannel+0x2a0>)
 800485c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004860:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004862:	4b16      	ldr	r3, [pc, #88]	@ (80048bc <HAL_ADC_ConfigChannel+0x2a0>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	4a15      	ldr	r2, [pc, #84]	@ (80048bc <HAL_ADC_ConfigChannel+0x2a0>)
 8004868:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800486c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a10      	ldr	r2, [pc, #64]	@ (80048b4 <HAL_ADC_ConfigChannel+0x298>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d111      	bne.n	800489c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004878:	4b11      	ldr	r3, [pc, #68]	@ (80048c0 <HAL_ADC_ConfigChannel+0x2a4>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a11      	ldr	r2, [pc, #68]	@ (80048c4 <HAL_ADC_ConfigChannel+0x2a8>)
 800487e:	fba2 2303 	umull	r2, r3, r2, r3
 8004882:	0c9a      	lsrs	r2, r3, #18
 8004884:	4613      	mov	r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	005b      	lsls	r3, r3, #1
 800488c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800488e:	e002      	b.n	8004896 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3b01      	subs	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1f9      	bne.n	8004890 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3714      	adds	r7, #20
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	10000012 	.word	0x10000012
 80048b8:	40012000 	.word	0x40012000
 80048bc:	40012300 	.word	0x40012300
 80048c0:	20000034 	.word	0x20000034
 80048c4:	431bde83 	.word	0x431bde83

080048c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80048d0:	4b78      	ldr	r3, [pc, #480]	@ (8004ab4 <ADC_Init+0x1ec>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	4a77      	ldr	r2, [pc, #476]	@ (8004ab4 <ADC_Init+0x1ec>)
 80048d6:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80048da:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80048dc:	4b75      	ldr	r3, [pc, #468]	@ (8004ab4 <ADC_Init+0x1ec>)
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4973      	ldr	r1, [pc, #460]	@ (8004ab4 <ADC_Init+0x1ec>)
 80048e6:	4313      	orrs	r3, r2
 80048e8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685a      	ldr	r2, [r3, #4]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80048f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	021a      	lsls	r2, r3, #8
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685a      	ldr	r2, [r3, #4]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800491c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6859      	ldr	r1, [r3, #4]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	430a      	orrs	r2, r1
 800492e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800493e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	6899      	ldr	r1, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	430a      	orrs	r2, r1
 8004950:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004956:	4a58      	ldr	r2, [pc, #352]	@ (8004ab8 <ADC_Init+0x1f0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d022      	beq.n	80049a2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800496a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6899      	ldr	r1, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800498c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6899      	ldr	r1, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	e00f      	b.n	80049c2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80049b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	689a      	ldr	r2, [r3, #8]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80049c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689a      	ldr	r2, [r3, #8]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f022 0202 	bic.w	r2, r2, #2
 80049d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6899      	ldr	r1, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	005a      	lsls	r2, r3, #1
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d01b      	beq.n	8004a28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004a0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6859      	ldr	r1, [r3, #4]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	035a      	lsls	r2, r3, #13
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
 8004a26:	e007      	b.n	8004a38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004a46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	051a      	lsls	r2, r3, #20
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004a6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6899      	ldr	r1, [r3, #8]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004a7a:	025a      	lsls	r2, r3, #9
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6899      	ldr	r1, [r3, #8]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	029a      	lsls	r2, r3, #10
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	609a      	str	r2, [r3, #8]
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	40012300 	.word	0x40012300
 8004ab8:	0f000001 	.word	0x0f000001

08004abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f003 0307 	and.w	r3, r3, #7
 8004aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004acc:	4b0b      	ldr	r3, [pc, #44]	@ (8004afc <__NVIC_SetPriorityGrouping+0x40>)
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ad8:	4013      	ands	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004ae4:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <__NVIC_SetPriorityGrouping+0x44>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aea:	4a04      	ldr	r2, [pc, #16]	@ (8004afc <__NVIC_SetPriorityGrouping+0x40>)
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	60d3      	str	r3, [r2, #12]
}
 8004af0:	bf00      	nop
 8004af2:	3714      	adds	r7, #20
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	e000ed00 	.word	0xe000ed00
 8004b00:	05fa0000 	.word	0x05fa0000

08004b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b08:	4b04      	ldr	r3, [pc, #16]	@ (8004b1c <__NVIC_GetPriorityGrouping+0x18>)
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	0a1b      	lsrs	r3, r3, #8
 8004b0e:	f003 0307 	and.w	r3, r3, #7
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	e000ed00 	.word	0xe000ed00

08004b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b083      	sub	sp, #12
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	4603      	mov	r3, r0
 8004b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	db0b      	blt.n	8004b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	f003 021f 	and.w	r2, r3, #31
 8004b38:	4907      	ldr	r1, [pc, #28]	@ (8004b58 <__NVIC_EnableIRQ+0x38>)
 8004b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2001      	movs	r0, #1
 8004b42:	fa00 f202 	lsl.w	r2, r0, r2
 8004b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop
 8004b58:	e000e100 	.word	0xe000e100

08004b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b083      	sub	sp, #12
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	4603      	mov	r3, r0
 8004b64:	6039      	str	r1, [r7, #0]
 8004b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	db0a      	blt.n	8004b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	490c      	ldr	r1, [pc, #48]	@ (8004ba8 <__NVIC_SetPriority+0x4c>)
 8004b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b7a:	0112      	lsls	r2, r2, #4
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	440b      	add	r3, r1
 8004b80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b84:	e00a      	b.n	8004b9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	b2da      	uxtb	r2, r3
 8004b8a:	4908      	ldr	r1, [pc, #32]	@ (8004bac <__NVIC_SetPriority+0x50>)
 8004b8c:	79fb      	ldrb	r3, [r7, #7]
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	3b04      	subs	r3, #4
 8004b94:	0112      	lsls	r2, r2, #4
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	440b      	add	r3, r1
 8004b9a:	761a      	strb	r2, [r3, #24]
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000e100 	.word	0xe000e100
 8004bac:	e000ed00 	.word	0xe000ed00

08004bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b089      	sub	sp, #36	@ 0x24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f003 0307 	and.w	r3, r3, #7
 8004bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	f1c3 0307 	rsb	r3, r3, #7
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	bf28      	it	cs
 8004bce:	2304      	movcs	r3, #4
 8004bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	2b06      	cmp	r3, #6
 8004bd8:	d902      	bls.n	8004be0 <NVIC_EncodePriority+0x30>
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3b03      	subs	r3, #3
 8004bde:	e000      	b.n	8004be2 <NVIC_EncodePriority+0x32>
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	fa02 f303 	lsl.w	r3, r2, r3
 8004bee:	43da      	mvns	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	401a      	ands	r2, r3
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8004c02:	43d9      	mvns	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c08:	4313      	orrs	r3, r2
         );
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3724      	adds	r7, #36	@ 0x24
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr

08004c16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7ff ff4c 	bl	8004abc <__NVIC_SetPriorityGrouping>
}
 8004c24:	bf00      	nop
 8004c26:	3708      	adds	r7, #8
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	607a      	str	r2, [r7, #4]
 8004c38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c3e:	f7ff ff61 	bl	8004b04 <__NVIC_GetPriorityGrouping>
 8004c42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	68b9      	ldr	r1, [r7, #8]
 8004c48:	6978      	ldr	r0, [r7, #20]
 8004c4a:	f7ff ffb1 	bl	8004bb0 <NVIC_EncodePriority>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c54:	4611      	mov	r1, r2
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7ff ff80 	bl	8004b5c <__NVIC_SetPriority>
}
 8004c5c:	bf00      	nop
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f7ff ff54 	bl	8004b20 <__NVIC_EnableIRQ>
}
 8004c78:	bf00      	nop
 8004c7a:	3708      	adds	r7, #8
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e014      	b.n	8004cbc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	791b      	ldrb	r3, [r3, #4]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d105      	bne.n	8004ca8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7fb fdb8 	bl	8000818 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004cba:	2300      	movs	r3, #0
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cd6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cda:	d120      	bne.n	8004d1e <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ce2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ce6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004cea:	d118      	bne.n	8004d1e <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2204      	movs	r2, #4
 8004cf0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f043 0201 	orr.w	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004d06:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004d16:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f82d 	bl	8004d78 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d2c:	d120      	bne.n	8004d70 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d3c:	d118      	bne.n	8004d70 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2204      	movs	r2, #4
 8004d42:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f043 0202 	orr.w	r2, r3, #2
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004d58:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004d68:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f85d 	bl	8004e2a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b087      	sub	sp, #28
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	795b      	ldrb	r3, [r3, #5]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d101      	bne.n	8004da4 <HAL_DAC_ConfigChannel+0x18>
 8004da0:	2302      	movs	r3, #2
 8004da2:	e03c      	b.n	8004e1e <HAL_DAC_ConfigChannel+0x92>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2201      	movs	r2, #1
 8004da8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2202      	movs	r2, #2
 8004dae:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f003 0310 	and.w	r3, r3, #16
 8004dbe:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f003 0310 	and.w	r3, r3, #16
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	fa02 f303 	lsl.w	r3, r2, r3
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	6819      	ldr	r1, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f003 0310 	and.w	r3, r3, #16
 8004e00:	22c0      	movs	r2, #192	@ 0xc0
 8004e02:	fa02 f303 	lsl.w	r3, r2, r3
 8004e06:	43da      	mvns	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2201      	movs	r2, #1
 8004e14:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	371c      	adds	r7, #28
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004e32:	bf00      	nop
 8004e34:	370c      	adds	r7, #12
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e4c:	f7ff fb72 	bl	8004534 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e099      	b.n	8004f90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f022 0201 	bic.w	r2, r2, #1
 8004e7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e7c:	e00f      	b.n	8004e9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e7e:	f7ff fb59 	bl	8004534 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b05      	cmp	r3, #5
 8004e8a:	d908      	bls.n	8004e9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2203      	movs	r2, #3
 8004e96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e078      	b.n	8004f90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e8      	bne.n	8004e7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4b38      	ldr	r3, [pc, #224]	@ (8004f98 <HAL_DMA_Init+0x158>)
 8004eb8:	4013      	ands	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ed6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ee2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d107      	bne.n	8004f08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f00:	4313      	orrs	r3, r2
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	697a      	ldr	r2, [r7, #20]
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f023 0307 	bic.w	r3, r3, #7
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	4313      	orrs	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d117      	bne.n	8004f62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00e      	beq.n	8004f62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 f9e9 	bl	800531c <DMA_CheckFifoParam>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2240      	movs	r2, #64	@ 0x40
 8004f54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e016      	b.n	8004f90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	697a      	ldr	r2, [r7, #20]
 8004f68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f9a0 	bl	80052b0 <DMA_CalcBaseAndBitshift>
 8004f70:	4603      	mov	r3, r0
 8004f72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f78:	223f      	movs	r2, #63	@ 0x3f
 8004f7a:	409a      	lsls	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	f010803f 	.word	0xf010803f

08004f9c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e050      	b.n	8005050 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d101      	bne.n	8004fbe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004fba:	2302      	movs	r3, #2
 8004fbc:	e048      	b.n	8005050 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2200      	movs	r2, #0
 8004fec:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2221      	movs	r2, #33	@ 0x21
 8004ffc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f956 	bl	80052b0 <DMA_CalcBaseAndBitshift>
 8005004:	4603      	mov	r3, r0
 8005006:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800500c:	223f      	movs	r2, #63	@ 0x3f
 800500e:	409a      	lsls	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800506e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005076:	2b01      	cmp	r3, #1
 8005078:	d101      	bne.n	800507e <HAL_DMA_Start_IT+0x26>
 800507a:	2302      	movs	r3, #2
 800507c:	e048      	b.n	8005110 <HAL_DMA_Start_IT+0xb8>
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b01      	cmp	r3, #1
 8005090:	d137      	bne.n	8005102 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f8d4 	bl	8005254 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050b0:	223f      	movs	r2, #63	@ 0x3f
 80050b2:	409a      	lsls	r2, r3
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f042 0216 	orr.w	r2, r2, #22
 80050c6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80050d6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d007      	beq.n	80050f0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0208 	orr.w	r2, r2, #8
 80050ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0201 	orr.w	r2, r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	e005      	b.n	800510e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800510a:	2302      	movs	r3, #2
 800510c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800510e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005124:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005126:	f7ff fa05 	bl	8004534 <HAL_GetTick>
 800512a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005132:	b2db      	uxtb	r3, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d008      	beq.n	800514a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2280      	movs	r2, #128	@ 0x80
 800513c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e052      	b.n	80051f0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f022 0216 	bic.w	r2, r2, #22
 8005158:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	695a      	ldr	r2, [r3, #20]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005168:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <HAL_DMA_Abort+0x62>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0208 	bic.w	r2, r2, #8
 8005188:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f022 0201 	bic.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800519a:	e013      	b.n	80051c4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800519c:	f7ff f9ca 	bl	8004534 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b05      	cmp	r3, #5
 80051a8:	d90c      	bls.n	80051c4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2220      	movs	r2, #32
 80051ae:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2203      	movs	r2, #3
 80051b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e015      	b.n	80051f0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e4      	bne.n	800519c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051d6:	223f      	movs	r2, #63	@ 0x3f
 80051d8:	409a      	lsls	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d004      	beq.n	8005216 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2280      	movs	r2, #128	@ 0x80
 8005210:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e00c      	b.n	8005230 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2205      	movs	r2, #5
 800521a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0201 	bic.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
 8005260:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005270:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b40      	cmp	r3, #64	@ 0x40
 8005280:	d108      	bne.n	8005294 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005292:	e007      	b.n	80052a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	60da      	str	r2, [r3, #12]
}
 80052a4:	bf00      	nop
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	3b10      	subs	r3, #16
 80052c0:	4a13      	ldr	r2, [pc, #76]	@ (8005310 <DMA_CalcBaseAndBitshift+0x60>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	091b      	lsrs	r3, r3, #4
 80052c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80052ca:	4a12      	ldr	r2, [pc, #72]	@ (8005314 <DMA_CalcBaseAndBitshift+0x64>)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b03      	cmp	r3, #3
 80052dc:	d908      	bls.n	80052f0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005318 <DMA_CalcBaseAndBitshift+0x68>)
 80052e6:	4013      	ands	r3, r2
 80052e8:	1d1a      	adds	r2, r3, #4
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	659a      	str	r2, [r3, #88]	@ 0x58
 80052ee:	e006      	b.n	80052fe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	461a      	mov	r2, r3
 80052f6:	4b08      	ldr	r3, [pc, #32]	@ (8005318 <DMA_CalcBaseAndBitshift+0x68>)
 80052f8:	4013      	ands	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005302:	4618      	mov	r0, r3
 8005304:	3714      	adds	r7, #20
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr
 800530e:	bf00      	nop
 8005310:	aaaaaaab 	.word	0xaaaaaaab
 8005314:	08014630 	.word	0x08014630
 8005318:	fffffc00 	.word	0xfffffc00

0800531c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800532c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	699b      	ldr	r3, [r3, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d11f      	bne.n	8005376 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b03      	cmp	r3, #3
 800533a:	d856      	bhi.n	80053ea <DMA_CheckFifoParam+0xce>
 800533c:	a201      	add	r2, pc, #4	@ (adr r2, 8005344 <DMA_CheckFifoParam+0x28>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005355 	.word	0x08005355
 8005348:	08005367 	.word	0x08005367
 800534c:	08005355 	.word	0x08005355
 8005350:	080053eb 	.word	0x080053eb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005358:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d046      	beq.n	80053ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005364:	e043      	b.n	80053ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800536e:	d140      	bne.n	80053f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005374:	e03d      	b.n	80053f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800537e:	d121      	bne.n	80053c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	2b03      	cmp	r3, #3
 8005384:	d837      	bhi.n	80053f6 <DMA_CheckFifoParam+0xda>
 8005386:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <DMA_CheckFifoParam+0x70>)
 8005388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538c:	0800539d 	.word	0x0800539d
 8005390:	080053a3 	.word	0x080053a3
 8005394:	0800539d 	.word	0x0800539d
 8005398:	080053b5 	.word	0x080053b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800539c:	2301      	movs	r3, #1
 800539e:	73fb      	strb	r3, [r7, #15]
      break;
 80053a0:	e030      	b.n	8005404 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d025      	beq.n	80053fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80053b2:	e022      	b.n	80053fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80053bc:	d11f      	bne.n	80053fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80053c2:	e01c      	b.n	80053fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d903      	bls.n	80053d2 <DMA_CheckFifoParam+0xb6>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d003      	beq.n	80053d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80053d0:	e018      	b.n	8005404 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	73fb      	strb	r3, [r7, #15]
      break;
 80053d6:	e015      	b.n	8005404 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00e      	beq.n	8005402 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	73fb      	strb	r3, [r7, #15]
      break;
 80053e8:	e00b      	b.n	8005402 <DMA_CheckFifoParam+0xe6>
      break;
 80053ea:	bf00      	nop
 80053ec:	e00a      	b.n	8005404 <DMA_CheckFifoParam+0xe8>
      break;
 80053ee:	bf00      	nop
 80053f0:	e008      	b.n	8005404 <DMA_CheckFifoParam+0xe8>
      break;
 80053f2:	bf00      	nop
 80053f4:	e006      	b.n	8005404 <DMA_CheckFifoParam+0xe8>
      break;
 80053f6:	bf00      	nop
 80053f8:	e004      	b.n	8005404 <DMA_CheckFifoParam+0xe8>
      break;
 80053fa:	bf00      	nop
 80053fc:	e002      	b.n	8005404 <DMA_CheckFifoParam+0xe8>
      break;   
 80053fe:	bf00      	nop
 8005400:	e000      	b.n	8005404 <DMA_CheckFifoParam+0xe8>
      break;
 8005402:	bf00      	nop
    }
  } 
  
  return status; 
 8005404:	7bfb      	ldrb	r3, [r7, #15]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop

08005414 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b082      	sub	sp, #8
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e039      	b.n	800549a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d106      	bne.n	8005440 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f7fb fa66 	bl	800090c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2202      	movs	r2, #2
 8005444:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685a      	ldr	r2, [r3, #4]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005464:	f023 0107 	bic.w	r1, r3, #7
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800547a:	4b0a      	ldr	r3, [pc, #40]	@ (80054a4 <HAL_DMA2D_Init+0x90>)
 800547c:	4013      	ands	r3, r2
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68d1      	ldr	r1, [r2, #12]
 8005482:	687a      	ldr	r2, [r7, #4]
 8005484:	6812      	ldr	r2, [r2, #0]
 8005486:	430b      	orrs	r3, r1
 8005488:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	ffffc000 	.word	0xffffc000

080054a8 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_DMA2D_Start+0x1c>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e018      	b.n	80054f6 <HAL_DMA2D_Start+0x4e>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	68b9      	ldr	r1, [r7, #8]
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 fa98 	bl	8005a14 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b086      	sub	sp, #24
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d056      	beq.n	80055c8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800551a:	f7ff f80b 	bl	8004534 <HAL_GetTick>
 800551e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005520:	e04b      	b.n	80055ba <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005530:	2b00      	cmp	r3, #0
 8005532:	d023      	beq.n	800557c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 0320 	and.w	r3, r3, #32
 800553a:	2b00      	cmp	r3, #0
 800553c:	d005      	beq.n	800554a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005542:	f043 0202 	orr.w	r2, r3, #2
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d005      	beq.n	8005560 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005558:	f043 0201 	orr.w	r2, r3, #1
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2221      	movs	r2, #33	@ 0x21
 8005566:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2204      	movs	r2, #4
 800556c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0a5      	b.n	80056c8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005582:	d01a      	beq.n	80055ba <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005584:	f7fe ffd6 	bl	8004534 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d302      	bcc.n	800559a <HAL_DMA2D_PollForTransfer+0x9c>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10f      	bne.n	80055ba <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800559e:	f043 0220 	orr.w	r2, r3, #32
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2203      	movs	r2, #3
 80055aa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e086      	b.n	80056c8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d0ac      	beq.n	8005522 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f003 0320 	and.w	r3, r3, #32
 80055d2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	693a      	ldr	r2, [r7, #16]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d061      	beq.n	80056ae <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80055ea:	f7fe ffa3 	bl	8004534 <HAL_GetTick>
 80055ee:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80055f0:	e056      	b.n	80056a0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005600:	2b00      	cmp	r3, #0
 8005602:	d02e      	beq.n	8005662 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005612:	f043 0204 	orr.w	r2, r3, #4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005628:	f043 0202 	orr.w	r2, r3, #2
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800563e:	f043 0201 	orr.w	r2, r3, #1
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2229      	movs	r2, #41	@ 0x29
 800564c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2204      	movs	r2, #4
 8005652:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e032      	b.n	80056c8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005668:	d01a      	beq.n	80056a0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800566a:	f7fe ff63 	bl	8004534 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d302      	bcc.n	8005680 <HAL_DMA2D_PollForTransfer+0x182>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10f      	bne.n	80056a0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005684:	f043 0220 	orr.w	r2, r3, #32
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2203      	movs	r2, #3
 8005690:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e013      	b.n	80056c8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f003 0310 	and.w	r3, r3, #16
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d0a1      	beq.n	80055f2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2212      	movs	r2, #18
 80056b4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80056c6:	2300      	movs	r3, #0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f003 0301 	and.w	r3, r3, #1
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d026      	beq.n	8005740 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d021      	beq.n	8005740 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800570a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005710:	f043 0201 	orr.w	r2, r3, #1
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2201      	movs	r2, #1
 800571e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2204      	movs	r2, #4
 8005724:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f003 0320 	and.w	r3, r3, #32
 8005746:	2b00      	cmp	r3, #0
 8005748:	d026      	beq.n	8005798 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d021      	beq.n	8005798 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005762:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2220      	movs	r2, #32
 800576a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005770:	f043 0202 	orr.w	r2, r3, #2
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2204      	movs	r2, #4
 800577c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	695b      	ldr	r3, [r3, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d026      	beq.n	80057f0 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d021      	beq.n	80057f0 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057ba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2208      	movs	r2, #8
 80057c2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c8:	f043 0204 	orr.w	r2, r3, #4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2204      	movs	r2, #4
 80057d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d003      	beq.n	80057f0 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	695b      	ldr	r3, [r3, #20]
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d013      	beq.n	8005822 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00e      	beq.n	8005822 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005812:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2204      	movs	r2, #4
 800581a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f853 	bl	80058c8 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d024      	beq.n	8005876 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005832:	2b00      	cmp	r3, #0
 8005834:	d01f      	beq.n	8005876 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005844:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	2202      	movs	r2, #2
 800584c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0310 	and.w	r3, r3, #16
 800587c:	2b00      	cmp	r3, #0
 800587e:	d01f      	beq.n	80058c0 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d01a      	beq.n	80058c0 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005898:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2210      	movs	r2, #16
 80058a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2201      	movs	r2, #1
 80058ae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 f80e 	bl	80058dc <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80058c0:	bf00      	nop
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}

080058c8 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b083      	sub	sp, #12
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80058d0:	bf00      	nop
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b087      	sub	sp, #28
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_DMA2D_ConfigLayer+0x20>
 800590c:	2302      	movs	r3, #2
 800590e:	e079      	b.n	8005a04 <HAL_DMA2D_ConfigLayer+0x114>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2202      	movs	r2, #2
 800591c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	3318      	adds	r3, #24
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	4413      	add	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	041b      	lsls	r3, r3, #16
 8005936:	4313      	orrs	r3, r2
 8005938:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800593a:	4b35      	ldr	r3, [pc, #212]	@ (8005a10 <HAL_DMA2D_ConfigLayer+0x120>)
 800593c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b0a      	cmp	r3, #10
 8005944:	d003      	beq.n	800594e <HAL_DMA2D_ConfigLayer+0x5e>
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b09      	cmp	r3, #9
 800594c:	d107      	bne.n	800595e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	4313      	orrs	r3, r2
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	e005      	b.n	800596a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	061b      	lsls	r3, r3, #24
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d120      	bne.n	80059b2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	43db      	mvns	r3, r3
 800597a:	ea02 0103 	and.w	r1, r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	430a      	orrs	r2, r1
 8005986:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	6812      	ldr	r2, [r2, #0]
 8005990:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b0a      	cmp	r3, #10
 8005998:	d003      	beq.n	80059a2 <HAL_DMA2D_ConfigLayer+0xb2>
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	2b09      	cmp	r3, #9
 80059a0:	d127      	bne.n	80059f2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80059ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80059b0:	e01f      	b.n	80059f2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69da      	ldr	r2, [r3, #28]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	43db      	mvns	r3, r3
 80059bc:	ea02 0103 	and.w	r1, r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	6812      	ldr	r2, [r2, #0]
 80059d2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	2b0a      	cmp	r3, #10
 80059da:	d003      	beq.n	80059e4 <HAL_DMA2D_ConfigLayer+0xf4>
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	2b09      	cmp	r3, #9
 80059e2:	d106      	bne.n	80059f2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	68da      	ldr	r2, [r3, #12]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80059f0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2201      	movs	r2, #1
 80059f6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	371c      	adds	r7, #28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	ff03000f 	.word	0xff03000f

08005a14 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b08b      	sub	sp, #44	@ 0x2c
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
 8005a20:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a28:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	041a      	lsls	r2, r3, #16
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	431a      	orrs	r2, r3
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	430a      	orrs	r2, r1
 8005a3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a4c:	d174      	bne.n	8005b38 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005a54:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a5c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a64:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d108      	bne.n	8005a86 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a84:	e053      	b.n	8005b2e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	689b      	ldr	r3, [r3, #8]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d106      	bne.n	8005a9c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005a8e:	69ba      	ldr	r2, [r7, #24]
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4313      	orrs	r3, r2
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a9a:	e048      	b.n	8005b2e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d111      	bne.n	8005ac8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	0cdb      	lsrs	r3, r3, #19
 8005aa8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	0a9b      	lsrs	r3, r3, #10
 8005aae:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	08db      	lsrs	r3, r3, #3
 8005ab4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	02db      	lsls	r3, r3, #11
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac6:	e032      	b.n	8005b2e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	2b03      	cmp	r3, #3
 8005ace:	d117      	bne.n	8005b00 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	0fdb      	lsrs	r3, r3, #31
 8005ad4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	0cdb      	lsrs	r3, r3, #19
 8005ada:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	0adb      	lsrs	r3, r3, #11
 8005ae0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	08db      	lsrs	r3, r3, #3
 8005ae6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	029b      	lsls	r3, r3, #10
 8005af0:	431a      	orrs	r2, r3
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	03db      	lsls	r3, r3, #15
 8005af6:	4313      	orrs	r3, r2
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005afe:	e016      	b.n	8005b2e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	0f1b      	lsrs	r3, r3, #28
 8005b04:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	0d1b      	lsrs	r3, r3, #20
 8005b0a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	0b1b      	lsrs	r3, r3, #12
 8005b10:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	091b      	lsrs	r3, r3, #4
 8005b16:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	011a      	lsls	r2, r3, #4
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	021b      	lsls	r3, r3, #8
 8005b20:	431a      	orrs	r2, r3
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	031b      	lsls	r3, r3, #12
 8005b26:	4313      	orrs	r3, r2
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b34:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005b36:	e003      	b.n	8005b40 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	60da      	str	r2, [r3, #12]
}
 8005b40:	bf00      	nop
 8005b42:	372c      	adds	r7, #44	@ 0x2c
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b089      	sub	sp, #36	@ 0x24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005b56:	2300      	movs	r3, #0
 8005b58:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005b62:	2300      	movs	r3, #0
 8005b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005b66:	2300      	movs	r3, #0
 8005b68:	61fb      	str	r3, [r7, #28]
 8005b6a:	e175      	b.n	8005e58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4013      	ands	r3, r2
 8005b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	f040 8164 	bne.w	8005e52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 0303 	and.w	r3, r3, #3
 8005b92:	2b01      	cmp	r3, #1
 8005b94:	d005      	beq.n	8005ba2 <HAL_GPIO_Init+0x56>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d130      	bne.n	8005c04 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	2203      	movs	r2, #3
 8005bae:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb2:	43db      	mvns	r3, r3
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	4013      	ands	r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68da      	ldr	r2, [r3, #12]
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bc6:	69ba      	ldr	r2, [r7, #24]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	69ba      	ldr	r2, [r7, #24]
 8005bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005bd8:	2201      	movs	r2, #1
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005be0:	43db      	mvns	r3, r3
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4013      	ands	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	091b      	lsrs	r3, r3, #4
 8005bee:	f003 0201 	and.w	r2, r3, #1
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69ba      	ldr	r2, [r7, #24]
 8005c02:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	2b03      	cmp	r3, #3
 8005c0e:	d017      	beq.n	8005c40 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	2203      	movs	r2, #3
 8005c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c20:	43db      	mvns	r3, r3
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	4013      	ands	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	fa02 f303 	lsl.w	r3, r2, r3
 8005c34:	69ba      	ldr	r2, [r7, #24]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f003 0303 	and.w	r3, r3, #3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d123      	bne.n	8005c94 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	08da      	lsrs	r2, r3, #3
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3208      	adds	r2, #8
 8005c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	f003 0307 	and.w	r3, r3, #7
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	220f      	movs	r2, #15
 8005c64:	fa02 f303 	lsl.w	r3, r2, r3
 8005c68:	43db      	mvns	r3, r3
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4013      	ands	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	f003 0307 	and.w	r3, r3, #7
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	69ba      	ldr	r2, [r7, #24]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	08da      	lsrs	r2, r3, #3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3208      	adds	r2, #8
 8005c8e:	69b9      	ldr	r1, [r7, #24]
 8005c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	005b      	lsls	r3, r3, #1
 8005c9e:	2203      	movs	r2, #3
 8005ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f003 0203 	and.w	r2, r3, #3
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 80be 	beq.w	8005e52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cd6:	4b66      	ldr	r3, [pc, #408]	@ (8005e70 <HAL_GPIO_Init+0x324>)
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cda:	4a65      	ldr	r2, [pc, #404]	@ (8005e70 <HAL_GPIO_Init+0x324>)
 8005cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8005ce2:	4b63      	ldr	r3, [pc, #396]	@ (8005e70 <HAL_GPIO_Init+0x324>)
 8005ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cea:	60fb      	str	r3, [r7, #12]
 8005cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005cee:	4a61      	ldr	r2, [pc, #388]	@ (8005e74 <HAL_GPIO_Init+0x328>)
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	089b      	lsrs	r3, r3, #2
 8005cf4:	3302      	adds	r3, #2
 8005cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	220f      	movs	r2, #15
 8005d06:	fa02 f303 	lsl.w	r3, r2, r3
 8005d0a:	43db      	mvns	r3, r3
 8005d0c:	69ba      	ldr	r2, [r7, #24]
 8005d0e:	4013      	ands	r3, r2
 8005d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	4a58      	ldr	r2, [pc, #352]	@ (8005e78 <HAL_GPIO_Init+0x32c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d037      	beq.n	8005d8a <HAL_GPIO_Init+0x23e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4a57      	ldr	r2, [pc, #348]	@ (8005e7c <HAL_GPIO_Init+0x330>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d031      	beq.n	8005d86 <HAL_GPIO_Init+0x23a>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	4a56      	ldr	r2, [pc, #344]	@ (8005e80 <HAL_GPIO_Init+0x334>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d02b      	beq.n	8005d82 <HAL_GPIO_Init+0x236>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a55      	ldr	r2, [pc, #340]	@ (8005e84 <HAL_GPIO_Init+0x338>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d025      	beq.n	8005d7e <HAL_GPIO_Init+0x232>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a54      	ldr	r2, [pc, #336]	@ (8005e88 <HAL_GPIO_Init+0x33c>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d01f      	beq.n	8005d7a <HAL_GPIO_Init+0x22e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a53      	ldr	r2, [pc, #332]	@ (8005e8c <HAL_GPIO_Init+0x340>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d019      	beq.n	8005d76 <HAL_GPIO_Init+0x22a>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a52      	ldr	r2, [pc, #328]	@ (8005e90 <HAL_GPIO_Init+0x344>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d013      	beq.n	8005d72 <HAL_GPIO_Init+0x226>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a51      	ldr	r2, [pc, #324]	@ (8005e94 <HAL_GPIO_Init+0x348>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00d      	beq.n	8005d6e <HAL_GPIO_Init+0x222>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a50      	ldr	r2, [pc, #320]	@ (8005e98 <HAL_GPIO_Init+0x34c>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d007      	beq.n	8005d6a <HAL_GPIO_Init+0x21e>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a4f      	ldr	r2, [pc, #316]	@ (8005e9c <HAL_GPIO_Init+0x350>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d101      	bne.n	8005d66 <HAL_GPIO_Init+0x21a>
 8005d62:	2309      	movs	r3, #9
 8005d64:	e012      	b.n	8005d8c <HAL_GPIO_Init+0x240>
 8005d66:	230a      	movs	r3, #10
 8005d68:	e010      	b.n	8005d8c <HAL_GPIO_Init+0x240>
 8005d6a:	2308      	movs	r3, #8
 8005d6c:	e00e      	b.n	8005d8c <HAL_GPIO_Init+0x240>
 8005d6e:	2307      	movs	r3, #7
 8005d70:	e00c      	b.n	8005d8c <HAL_GPIO_Init+0x240>
 8005d72:	2306      	movs	r3, #6
 8005d74:	e00a      	b.n	8005d8c <HAL_GPIO_Init+0x240>
 8005d76:	2305      	movs	r3, #5
 8005d78:	e008      	b.n	8005d8c <HAL_GPIO_Init+0x240>
 8005d7a:	2304      	movs	r3, #4
 8005d7c:	e006      	b.n	8005d8c <HAL_GPIO_Init+0x240>
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e004      	b.n	8005d8c <HAL_GPIO_Init+0x240>
 8005d82:	2302      	movs	r3, #2
 8005d84:	e002      	b.n	8005d8c <HAL_GPIO_Init+0x240>
 8005d86:	2301      	movs	r3, #1
 8005d88:	e000      	b.n	8005d8c <HAL_GPIO_Init+0x240>
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	69fa      	ldr	r2, [r7, #28]
 8005d8e:	f002 0203 	and.w	r2, r2, #3
 8005d92:	0092      	lsls	r2, r2, #2
 8005d94:	4093      	lsls	r3, r2
 8005d96:	69ba      	ldr	r2, [r7, #24]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005d9c:	4935      	ldr	r1, [pc, #212]	@ (8005e74 <HAL_GPIO_Init+0x328>)
 8005d9e:	69fb      	ldr	r3, [r7, #28]
 8005da0:	089b      	lsrs	r3, r3, #2
 8005da2:	3302      	adds	r3, #2
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005daa:	4b3d      	ldr	r3, [pc, #244]	@ (8005ea0 <HAL_GPIO_Init+0x354>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	43db      	mvns	r3, r3
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	4013      	ands	r3, r2
 8005db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d003      	beq.n	8005dce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005dc6:	69ba      	ldr	r2, [r7, #24]
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005dce:	4a34      	ldr	r2, [pc, #208]	@ (8005ea0 <HAL_GPIO_Init+0x354>)
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005dd4:	4b32      	ldr	r3, [pc, #200]	@ (8005ea0 <HAL_GPIO_Init+0x354>)
 8005dd6:	68db      	ldr	r3, [r3, #12]
 8005dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	69ba      	ldr	r2, [r7, #24]
 8005de0:	4013      	ands	r3, r2
 8005de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d003      	beq.n	8005df8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005df0:	69ba      	ldr	r2, [r7, #24]
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005df8:	4a29      	ldr	r2, [pc, #164]	@ (8005ea0 <HAL_GPIO_Init+0x354>)
 8005dfa:	69bb      	ldr	r3, [r7, #24]
 8005dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005dfe:	4b28      	ldr	r3, [pc, #160]	@ (8005ea0 <HAL_GPIO_Init+0x354>)
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	43db      	mvns	r3, r3
 8005e08:	69ba      	ldr	r2, [r7, #24]
 8005e0a:	4013      	ands	r3, r2
 8005e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005e1a:	69ba      	ldr	r2, [r7, #24]
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005e22:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea0 <HAL_GPIO_Init+0x354>)
 8005e24:	69bb      	ldr	r3, [r7, #24]
 8005e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e28:	4b1d      	ldr	r3, [pc, #116]	@ (8005ea0 <HAL_GPIO_Init+0x354>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	43db      	mvns	r3, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4013      	ands	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d003      	beq.n	8005e4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005e4c:	4a14      	ldr	r2, [pc, #80]	@ (8005ea0 <HAL_GPIO_Init+0x354>)
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	3301      	adds	r3, #1
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	2b0f      	cmp	r3, #15
 8005e5c:	f67f ae86 	bls.w	8005b6c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	3724      	adds	r7, #36	@ 0x24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40023800 	.word	0x40023800
 8005e74:	40013800 	.word	0x40013800
 8005e78:	40020000 	.word	0x40020000
 8005e7c:	40020400 	.word	0x40020400
 8005e80:	40020800 	.word	0x40020800
 8005e84:	40020c00 	.word	0x40020c00
 8005e88:	40021000 	.word	0x40021000
 8005e8c:	40021400 	.word	0x40021400
 8005e90:	40021800 	.word	0x40021800
 8005e94:	40021c00 	.word	0x40021c00
 8005e98:	40022000 	.word	0x40022000
 8005e9c:	40022400 	.word	0x40022400
 8005ea0:	40013c00 	.word	0x40013c00

08005ea4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	e0d9      	b.n	8006074 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005ed2:	68fa      	ldr	r2, [r7, #12]
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	f040 80c9 	bne.w	800606e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8005edc:	4a6b      	ldr	r2, [pc, #428]	@ (800608c <HAL_GPIO_DeInit+0x1e8>)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	089b      	lsrs	r3, r3, #2
 8005ee2:	3302      	adds	r3, #2
 8005ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f003 0303 	and.w	r3, r3, #3
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	220f      	movs	r2, #15
 8005ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	4013      	ands	r3, r2
 8005efc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a63      	ldr	r2, [pc, #396]	@ (8006090 <HAL_GPIO_DeInit+0x1ec>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d037      	beq.n	8005f76 <HAL_GPIO_DeInit+0xd2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a62      	ldr	r2, [pc, #392]	@ (8006094 <HAL_GPIO_DeInit+0x1f0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d031      	beq.n	8005f72 <HAL_GPIO_DeInit+0xce>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a61      	ldr	r2, [pc, #388]	@ (8006098 <HAL_GPIO_DeInit+0x1f4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d02b      	beq.n	8005f6e <HAL_GPIO_DeInit+0xca>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a60      	ldr	r2, [pc, #384]	@ (800609c <HAL_GPIO_DeInit+0x1f8>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d025      	beq.n	8005f6a <HAL_GPIO_DeInit+0xc6>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a5f      	ldr	r2, [pc, #380]	@ (80060a0 <HAL_GPIO_DeInit+0x1fc>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d01f      	beq.n	8005f66 <HAL_GPIO_DeInit+0xc2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a5e      	ldr	r2, [pc, #376]	@ (80060a4 <HAL_GPIO_DeInit+0x200>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d019      	beq.n	8005f62 <HAL_GPIO_DeInit+0xbe>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a5d      	ldr	r2, [pc, #372]	@ (80060a8 <HAL_GPIO_DeInit+0x204>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <HAL_GPIO_DeInit+0xba>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a5c      	ldr	r2, [pc, #368]	@ (80060ac <HAL_GPIO_DeInit+0x208>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00d      	beq.n	8005f5a <HAL_GPIO_DeInit+0xb6>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a5b      	ldr	r2, [pc, #364]	@ (80060b0 <HAL_GPIO_DeInit+0x20c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d007      	beq.n	8005f56 <HAL_GPIO_DeInit+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a5a      	ldr	r2, [pc, #360]	@ (80060b4 <HAL_GPIO_DeInit+0x210>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d101      	bne.n	8005f52 <HAL_GPIO_DeInit+0xae>
 8005f4e:	2309      	movs	r3, #9
 8005f50:	e012      	b.n	8005f78 <HAL_GPIO_DeInit+0xd4>
 8005f52:	230a      	movs	r3, #10
 8005f54:	e010      	b.n	8005f78 <HAL_GPIO_DeInit+0xd4>
 8005f56:	2308      	movs	r3, #8
 8005f58:	e00e      	b.n	8005f78 <HAL_GPIO_DeInit+0xd4>
 8005f5a:	2307      	movs	r3, #7
 8005f5c:	e00c      	b.n	8005f78 <HAL_GPIO_DeInit+0xd4>
 8005f5e:	2306      	movs	r3, #6
 8005f60:	e00a      	b.n	8005f78 <HAL_GPIO_DeInit+0xd4>
 8005f62:	2305      	movs	r3, #5
 8005f64:	e008      	b.n	8005f78 <HAL_GPIO_DeInit+0xd4>
 8005f66:	2304      	movs	r3, #4
 8005f68:	e006      	b.n	8005f78 <HAL_GPIO_DeInit+0xd4>
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e004      	b.n	8005f78 <HAL_GPIO_DeInit+0xd4>
 8005f6e:	2302      	movs	r3, #2
 8005f70:	e002      	b.n	8005f78 <HAL_GPIO_DeInit+0xd4>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e000      	b.n	8005f78 <HAL_GPIO_DeInit+0xd4>
 8005f76:	2300      	movs	r3, #0
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	f002 0203 	and.w	r2, r2, #3
 8005f7e:	0092      	lsls	r2, r2, #2
 8005f80:	4093      	lsls	r3, r2
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d132      	bne.n	8005fee <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005f88:	4b4b      	ldr	r3, [pc, #300]	@ (80060b8 <HAL_GPIO_DeInit+0x214>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	43db      	mvns	r3, r3
 8005f90:	4949      	ldr	r1, [pc, #292]	@ (80060b8 <HAL_GPIO_DeInit+0x214>)
 8005f92:	4013      	ands	r3, r2
 8005f94:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005f96:	4b48      	ldr	r3, [pc, #288]	@ (80060b8 <HAL_GPIO_DeInit+0x214>)
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	43db      	mvns	r3, r3
 8005f9e:	4946      	ldr	r1, [pc, #280]	@ (80060b8 <HAL_GPIO_DeInit+0x214>)
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005fa4:	4b44      	ldr	r3, [pc, #272]	@ (80060b8 <HAL_GPIO_DeInit+0x214>)
 8005fa6:	68da      	ldr	r2, [r3, #12]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	43db      	mvns	r3, r3
 8005fac:	4942      	ldr	r1, [pc, #264]	@ (80060b8 <HAL_GPIO_DeInit+0x214>)
 8005fae:	4013      	ands	r3, r2
 8005fb0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005fb2:	4b41      	ldr	r3, [pc, #260]	@ (80060b8 <HAL_GPIO_DeInit+0x214>)
 8005fb4:	689a      	ldr	r2, [r3, #8]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	493f      	ldr	r1, [pc, #252]	@ (80060b8 <HAL_GPIO_DeInit+0x214>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f003 0303 	and.w	r3, r3, #3
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	220f      	movs	r2, #15
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8005fd0:	4a2e      	ldr	r2, [pc, #184]	@ (800608c <HAL_GPIO_DeInit+0x1e8>)
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	089b      	lsrs	r3, r3, #2
 8005fd6:	3302      	adds	r3, #2
 8005fd8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	43da      	mvns	r2, r3
 8005fe0:	482a      	ldr	r0, [pc, #168]	@ (800608c <HAL_GPIO_DeInit+0x1e8>)
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	089b      	lsrs	r3, r3, #2
 8005fe6:	400a      	ands	r2, r1
 8005fe8:	3302      	adds	r3, #2
 8005fea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	2103      	movs	r1, #3
 8005ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffc:	43db      	mvns	r3, r3
 8005ffe:	401a      	ands	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	08da      	lsrs	r2, r3, #3
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3208      	adds	r2, #8
 800600c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	220f      	movs	r2, #15
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	43db      	mvns	r3, r3
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	08d2      	lsrs	r2, r2, #3
 8006024:	4019      	ands	r1, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	3208      	adds	r2, #8
 800602a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68da      	ldr	r2, [r3, #12]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	2103      	movs	r1, #3
 8006038:	fa01 f303 	lsl.w	r3, r1, r3
 800603c:	43db      	mvns	r3, r3
 800603e:	401a      	ands	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	2101      	movs	r1, #1
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	fa01 f303 	lsl.w	r3, r1, r3
 8006050:	43db      	mvns	r3, r3
 8006052:	401a      	ands	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	2103      	movs	r1, #3
 8006062:	fa01 f303 	lsl.w	r3, r1, r3
 8006066:	43db      	mvns	r3, r3
 8006068:	401a      	ands	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	3301      	adds	r3, #1
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2b0f      	cmp	r3, #15
 8006078:	f67f af22 	bls.w	8005ec0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800607c:	bf00      	nop
 800607e:	bf00      	nop
 8006080:	371c      	adds	r7, #28
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	40013800 	.word	0x40013800
 8006090:	40020000 	.word	0x40020000
 8006094:	40020400 	.word	0x40020400
 8006098:	40020800 	.word	0x40020800
 800609c:	40020c00 	.word	0x40020c00
 80060a0:	40021000 	.word	0x40021000
 80060a4:	40021400 	.word	0x40021400
 80060a8:	40021800 	.word	0x40021800
 80060ac:	40021c00 	.word	0x40021c00
 80060b0:	40022000 	.word	0x40022000
 80060b4:	40022400 	.word	0x40022400
 80060b8:	40013c00 	.word	0x40013c00

080060bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	691a      	ldr	r2, [r3, #16]
 80060cc:	887b      	ldrh	r3, [r7, #2]
 80060ce:	4013      	ands	r3, r2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80060d4:	2301      	movs	r3, #1
 80060d6:	73fb      	strb	r3, [r7, #15]
 80060d8:	e001      	b.n	80060de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80060da:	2300      	movs	r3, #0
 80060dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	807b      	strh	r3, [r7, #2]
 80060f8:	4613      	mov	r3, r2
 80060fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060fc:	787b      	ldrb	r3, [r7, #1]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006102:	887a      	ldrh	r2, [r7, #2]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006108:	e003      	b.n	8006112 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800610a:	887b      	ldrh	r3, [r7, #2]
 800610c:	041a      	lsls	r2, r3, #16
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	619a      	str	r2, [r3, #24]
}
 8006112:	bf00      	nop
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d101      	bne.n	8006132 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e07f      	b.n	8006232 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006138:	b2db      	uxtb	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	d106      	bne.n	800614c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f7fb fbd2 	bl	80018f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2224      	movs	r2, #36	@ 0x24
 8006150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f022 0201 	bic.w	r2, r2, #1
 8006162:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006170:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	689a      	ldr	r2, [r3, #8]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006180:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d107      	bne.n	800619a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	689a      	ldr	r2, [r3, #8]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006196:	609a      	str	r2, [r3, #8]
 8006198:	e006      	b.n	80061a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	689a      	ldr	r2, [r3, #8]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80061a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d104      	bne.n	80061ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80061b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6859      	ldr	r1, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4b1d      	ldr	r3, [pc, #116]	@ (800623c <HAL_I2C_Init+0x11c>)
 80061c6:	430b      	orrs	r3, r1
 80061c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691a      	ldr	r2, [r3, #16]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	430a      	orrs	r2, r1
 80061f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	69d9      	ldr	r1, [r3, #28]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1a      	ldr	r2, [r3, #32]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2220      	movs	r2, #32
 800621e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}
 800623a:	bf00      	nop
 800623c:	02008000 	.word	0x02008000

08006240 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d101      	bne.n	8006252 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e021      	b.n	8006296 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2224      	movs	r2, #36	@ 0x24
 8006256:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7fb fbe8 	bl	8001a40 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006294:	2300      	movs	r3, #0
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
	...

080062a0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	4608      	mov	r0, r1
 80062aa:	4611      	mov	r1, r2
 80062ac:	461a      	mov	r2, r3
 80062ae:	4603      	mov	r3, r0
 80062b0:	817b      	strh	r3, [r7, #10]
 80062b2:	460b      	mov	r3, r1
 80062b4:	813b      	strh	r3, [r7, #8]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b20      	cmp	r3, #32
 80062c4:	f040 80f9 	bne.w	80064ba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_I2C_Mem_Write+0x34>
 80062ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d105      	bne.n	80062e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80062da:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80062dc:	2301      	movs	r3, #1
 80062de:	e0ed      	b.n	80064bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062e6:	2b01      	cmp	r3, #1
 80062e8:	d101      	bne.n	80062ee <HAL_I2C_Mem_Write+0x4e>
 80062ea:	2302      	movs	r3, #2
 80062ec:	e0e6      	b.n	80064bc <HAL_I2C_Mem_Write+0x21c>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80062f6:	f7fe f91d 	bl	8004534 <HAL_GetTick>
 80062fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	2319      	movs	r3, #25
 8006302:	2201      	movs	r2, #1
 8006304:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f000 fad1 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d001      	beq.n	8006318 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e0d1      	b.n	80064bc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2221      	movs	r2, #33	@ 0x21
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2240      	movs	r2, #64	@ 0x40
 8006324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2200      	movs	r2, #0
 800632c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	6a3a      	ldr	r2, [r7, #32]
 8006332:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006338:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006340:	88f8      	ldrh	r0, [r7, #6]
 8006342:	893a      	ldrh	r2, [r7, #8]
 8006344:	8979      	ldrh	r1, [r7, #10]
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	4603      	mov	r3, r0
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 f9e1 	bl	8006718 <I2C_RequestMemoryWrite>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d005      	beq.n	8006368 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006364:	2301      	movs	r3, #1
 8006366:	e0a9      	b.n	80064bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636c:	b29b      	uxth	r3, r3
 800636e:	2bff      	cmp	r3, #255	@ 0xff
 8006370:	d90e      	bls.n	8006390 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	22ff      	movs	r2, #255	@ 0xff
 8006376:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800637c:	b2da      	uxtb	r2, r3
 800637e:	8979      	ldrh	r1, [r7, #10]
 8006380:	2300      	movs	r3, #0
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f000 fc2d 	bl	8006be8 <I2C_TransferConfig>
 800638e:	e00f      	b.n	80063b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006394:	b29a      	uxth	r2, r3
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	8979      	ldrh	r1, [r7, #10]
 80063a2:	2300      	movs	r3, #0
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f000 fc1c 	bl	8006be8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f000 fabb 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d001      	beq.n	80063c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e07b      	b.n	80064bc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063c8:	781a      	ldrb	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063d4:	1c5a      	adds	r2, r3, #1
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3b01      	subs	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063ec:	3b01      	subs	r3, #1
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d034      	beq.n	8006468 <HAL_I2C_Mem_Write+0x1c8>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006402:	2b00      	cmp	r3, #0
 8006404:	d130      	bne.n	8006468 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640c:	2200      	movs	r2, #0
 800640e:	2180      	movs	r1, #128	@ 0x80
 8006410:	68f8      	ldr	r0, [r7, #12]
 8006412:	f000 fa4d 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800641c:	2301      	movs	r3, #1
 800641e:	e04d      	b.n	80064bc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006424:	b29b      	uxth	r3, r3
 8006426:	2bff      	cmp	r3, #255	@ 0xff
 8006428:	d90e      	bls.n	8006448 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	22ff      	movs	r2, #255	@ 0xff
 800642e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006434:	b2da      	uxtb	r2, r3
 8006436:	8979      	ldrh	r1, [r7, #10]
 8006438:	2300      	movs	r3, #0
 800643a:	9300      	str	r3, [sp, #0]
 800643c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fbd1 	bl	8006be8 <I2C_TransferConfig>
 8006446:	e00f      	b.n	8006468 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800644c:	b29a      	uxth	r2, r3
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006456:	b2da      	uxtb	r2, r3
 8006458:	8979      	ldrh	r1, [r7, #10]
 800645a:	2300      	movs	r3, #0
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fbc0 	bl	8006be8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d19e      	bne.n	80063b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006472:	697a      	ldr	r2, [r7, #20]
 8006474:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fa9a 	bl	80069b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d001      	beq.n	8006486 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e01a      	b.n	80064bc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2220      	movs	r2, #32
 800648c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6859      	ldr	r1, [r3, #4]
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	4b0a      	ldr	r3, [pc, #40]	@ (80064c4 <HAL_I2C_Mem_Write+0x224>)
 800649a:	400b      	ands	r3, r1
 800649c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80064b6:	2300      	movs	r3, #0
 80064b8:	e000      	b.n	80064bc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80064ba:	2302      	movs	r3, #2
  }
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3718      	adds	r7, #24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	fe00e800 	.word	0xfe00e800

080064c8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b088      	sub	sp, #32
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	4608      	mov	r0, r1
 80064d2:	4611      	mov	r1, r2
 80064d4:	461a      	mov	r2, r3
 80064d6:	4603      	mov	r3, r0
 80064d8:	817b      	strh	r3, [r7, #10]
 80064da:	460b      	mov	r3, r1
 80064dc:	813b      	strh	r3, [r7, #8]
 80064de:	4613      	mov	r3, r2
 80064e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b20      	cmp	r3, #32
 80064ec:	f040 80fd 	bne.w	80066ea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80064f0:	6a3b      	ldr	r3, [r7, #32]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <HAL_I2C_Mem_Read+0x34>
 80064f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d105      	bne.n	8006508 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006502:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	e0f1      	b.n	80066ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800650e:	2b01      	cmp	r3, #1
 8006510:	d101      	bne.n	8006516 <HAL_I2C_Mem_Read+0x4e>
 8006512:	2302      	movs	r3, #2
 8006514:	e0ea      	b.n	80066ec <HAL_I2C_Mem_Read+0x224>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800651e:	f7fe f809 	bl	8004534 <HAL_GetTick>
 8006522:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	2319      	movs	r3, #25
 800652a:	2201      	movs	r2, #1
 800652c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f9bd 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	e0d5      	b.n	80066ec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2222      	movs	r2, #34	@ 0x22
 8006544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2240      	movs	r2, #64	@ 0x40
 800654c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	6a3a      	ldr	r2, [r7, #32]
 800655a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006560:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006568:	88f8      	ldrh	r0, [r7, #6]
 800656a:	893a      	ldrh	r2, [r7, #8]
 800656c:	8979      	ldrh	r1, [r7, #10]
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006574:	9300      	str	r3, [sp, #0]
 8006576:	4603      	mov	r3, r0
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f921 	bl	80067c0 <I2C_RequestMemoryRead>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	e0ad      	b.n	80066ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006594:	b29b      	uxth	r3, r3
 8006596:	2bff      	cmp	r3, #255	@ 0xff
 8006598:	d90e      	bls.n	80065b8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	22ff      	movs	r2, #255	@ 0xff
 800659e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	8979      	ldrh	r1, [r7, #10]
 80065a8:	4b52      	ldr	r3, [pc, #328]	@ (80066f4 <HAL_I2C_Mem_Read+0x22c>)
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 fb19 	bl	8006be8 <I2C_TransferConfig>
 80065b6:	e00f      	b.n	80065d8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065bc:	b29a      	uxth	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	8979      	ldrh	r1, [r7, #10]
 80065ca:	4b4a      	ldr	r3, [pc, #296]	@ (80066f4 <HAL_I2C_Mem_Read+0x22c>)
 80065cc:	9300      	str	r3, [sp, #0]
 80065ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fb08 	bl	8006be8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065de:	2200      	movs	r2, #0
 80065e0:	2104      	movs	r1, #4
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 f964 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80065ee:	2301      	movs	r3, #1
 80065f0:	e07c      	b.n	80066ec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800660e:	3b01      	subs	r3, #1
 8006610:	b29a      	uxth	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800661a:	b29b      	uxth	r3, r3
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d034      	beq.n	8006698 <HAL_I2C_Mem_Read+0x1d0>
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006632:	2b00      	cmp	r3, #0
 8006634:	d130      	bne.n	8006698 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	9300      	str	r3, [sp, #0]
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	2200      	movs	r2, #0
 800663e:	2180      	movs	r1, #128	@ 0x80
 8006640:	68f8      	ldr	r0, [r7, #12]
 8006642:	f000 f935 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 8006646:	4603      	mov	r3, r0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d001      	beq.n	8006650 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e04d      	b.n	80066ec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006654:	b29b      	uxth	r3, r3
 8006656:	2bff      	cmp	r3, #255	@ 0xff
 8006658:	d90e      	bls.n	8006678 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	22ff      	movs	r2, #255	@ 0xff
 800665e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006664:	b2da      	uxtb	r2, r3
 8006666:	8979      	ldrh	r1, [r7, #10]
 8006668:	2300      	movs	r3, #0
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006670:	68f8      	ldr	r0, [r7, #12]
 8006672:	f000 fab9 	bl	8006be8 <I2C_TransferConfig>
 8006676:	e00f      	b.n	8006698 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800667c:	b29a      	uxth	r2, r3
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006686:	b2da      	uxtb	r2, r3
 8006688:	8979      	ldrh	r1, [r7, #10]
 800668a:	2300      	movs	r3, #0
 800668c:	9300      	str	r3, [sp, #0]
 800668e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f000 faa8 	bl	8006be8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d19a      	bne.n	80065d8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066a2:	697a      	ldr	r2, [r7, #20]
 80066a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f000 f982 	bl	80069b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e01a      	b.n	80066ec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2220      	movs	r2, #32
 80066bc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6859      	ldr	r1, [r3, #4]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	4b0b      	ldr	r3, [pc, #44]	@ (80066f8 <HAL_I2C_Mem_Read+0x230>)
 80066ca:	400b      	ands	r3, r1
 80066cc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2220      	movs	r2, #32
 80066d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	e000      	b.n	80066ec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80066ea:	2302      	movs	r3, #2
  }
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3718      	adds	r7, #24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	80002400 	.word	0x80002400
 80066f8:	fe00e800 	.word	0xfe00e800

080066fc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800670a:	b2db      	uxtb	r3, r3
}
 800670c:	4618      	mov	r0, r3
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af02      	add	r7, sp, #8
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	4608      	mov	r0, r1
 8006722:	4611      	mov	r1, r2
 8006724:	461a      	mov	r2, r3
 8006726:	4603      	mov	r3, r0
 8006728:	817b      	strh	r3, [r7, #10]
 800672a:	460b      	mov	r3, r1
 800672c:	813b      	strh	r3, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	b2da      	uxtb	r2, r3
 8006736:	8979      	ldrh	r1, [r7, #10]
 8006738:	4b20      	ldr	r3, [pc, #128]	@ (80067bc <I2C_RequestMemoryWrite+0xa4>)
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 fa51 	bl	8006be8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	69b9      	ldr	r1, [r7, #24]
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f000 f8f0 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e02c      	b.n	80067b4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800675a:	88fb      	ldrh	r3, [r7, #6]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d105      	bne.n	800676c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006760:	893b      	ldrh	r3, [r7, #8]
 8006762:	b2da      	uxtb	r2, r3
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	629a      	str	r2, [r3, #40]	@ 0x28
 800676a:	e015      	b.n	8006798 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800676c:	893b      	ldrh	r3, [r7, #8]
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	b29b      	uxth	r3, r3
 8006772:	b2da      	uxtb	r2, r3
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800677a:	69fa      	ldr	r2, [r7, #28]
 800677c:	69b9      	ldr	r1, [r7, #24]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f8d6 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800678a:	2301      	movs	r3, #1
 800678c:	e012      	b.n	80067b4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800678e:	893b      	ldrh	r3, [r7, #8]
 8006790:	b2da      	uxtb	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2200      	movs	r2, #0
 80067a0:	2180      	movs	r1, #128	@ 0x80
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 f884 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e000      	b.n	80067b4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3710      	adds	r7, #16
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	80002000 	.word	0x80002000

080067c0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af02      	add	r7, sp, #8
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	4608      	mov	r0, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	817b      	strh	r3, [r7, #10]
 80067d2:	460b      	mov	r3, r1
 80067d4:	813b      	strh	r3, [r7, #8]
 80067d6:	4613      	mov	r3, r2
 80067d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	b2da      	uxtb	r2, r3
 80067de:	8979      	ldrh	r1, [r7, #10]
 80067e0:	4b20      	ldr	r3, [pc, #128]	@ (8006864 <I2C_RequestMemoryRead+0xa4>)
 80067e2:	9300      	str	r3, [sp, #0]
 80067e4:	2300      	movs	r3, #0
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 f9fe 	bl	8006be8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ec:	69fa      	ldr	r2, [r7, #28]
 80067ee:	69b9      	ldr	r1, [r7, #24]
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f89d 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d001      	beq.n	8006800 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e02c      	b.n	800685a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d105      	bne.n	8006812 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006806:	893b      	ldrh	r3, [r7, #8]
 8006808:	b2da      	uxtb	r2, r3
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006810:	e015      	b.n	800683e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006812:	893b      	ldrh	r3, [r7, #8]
 8006814:	0a1b      	lsrs	r3, r3, #8
 8006816:	b29b      	uxth	r3, r3
 8006818:	b2da      	uxtb	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006820:	69fa      	ldr	r2, [r7, #28]
 8006822:	69b9      	ldr	r1, [r7, #24]
 8006824:	68f8      	ldr	r0, [r7, #12]
 8006826:	f000 f883 	bl	8006930 <I2C_WaitOnTXISFlagUntilTimeout>
 800682a:	4603      	mov	r3, r0
 800682c:	2b00      	cmp	r3, #0
 800682e:	d001      	beq.n	8006834 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e012      	b.n	800685a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006834:	893b      	ldrh	r3, [r7, #8]
 8006836:	b2da      	uxtb	r2, r3
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800683e:	69fb      	ldr	r3, [r7, #28]
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	2200      	movs	r2, #0
 8006846:	2140      	movs	r1, #64	@ 0x40
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f831 	bl	80068b0 <I2C_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop
 8006864:	80002000 	.word	0x80002000

08006868 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f003 0302 	and.w	r3, r3, #2
 800687a:	2b02      	cmp	r3, #2
 800687c:	d103      	bne.n	8006886 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2200      	movs	r2, #0
 8006884:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	f003 0301 	and.w	r3, r3, #1
 8006890:	2b01      	cmp	r3, #1
 8006892:	d007      	beq.n	80068a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	699a      	ldr	r2, [r3, #24]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	619a      	str	r2, [r3, #24]
  }
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	603b      	str	r3, [r7, #0]
 80068bc:	4613      	mov	r3, r2
 80068be:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068c0:	e022      	b.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c8:	d01e      	beq.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ca:	f7fd fe33 	bl	8004534 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d113      	bne.n	8006908 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068e4:	f043 0220 	orr.w	r2, r3, #32
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e00f      	b.n	8006928 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	699a      	ldr	r2, [r3, #24]
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	4013      	ands	r3, r2
 8006912:	68ba      	ldr	r2, [r7, #8]
 8006914:	429a      	cmp	r2, r3
 8006916:	bf0c      	ite	eq
 8006918:	2301      	moveq	r3, #1
 800691a:	2300      	movne	r3, #0
 800691c:	b2db      	uxtb	r3, r3
 800691e:	461a      	mov	r2, r3
 8006920:	79fb      	ldrb	r3, [r7, #7]
 8006922:	429a      	cmp	r2, r3
 8006924:	d0cd      	beq.n	80068c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800693c:	e02c      	b.n	8006998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	68b9      	ldr	r1, [r7, #8]
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f000 f870 	bl	8006a28 <I2C_IsErrorOccurred>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d001      	beq.n	8006952 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e02a      	b.n	80069a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d01e      	beq.n	8006998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695a:	f7fd fdeb 	bl	8004534 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	68ba      	ldr	r2, [r7, #8]
 8006966:	429a      	cmp	r2, r3
 8006968:	d302      	bcc.n	8006970 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d113      	bne.n	8006998 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006974:	f043 0220 	orr.w	r2, r3, #32
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2220      	movs	r2, #32
 8006980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e007      	b.n	80069a8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	699b      	ldr	r3, [r3, #24]
 800699e:	f003 0302 	and.w	r3, r3, #2
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d1cb      	bne.n	800693e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	60f8      	str	r0, [r7, #12]
 80069b8:	60b9      	str	r1, [r7, #8]
 80069ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069bc:	e028      	b.n	8006a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	68b9      	ldr	r1, [r7, #8]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 f830 	bl	8006a28 <I2C_IsErrorOccurred>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e026      	b.n	8006a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d2:	f7fd fdaf 	bl	8004534 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d302      	bcc.n	80069e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d113      	bne.n	8006a10 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ec:	f043 0220 	orr.w	r2, r3, #32
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2200      	movs	r2, #0
 8006a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e007      	b.n	8006a20 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	699b      	ldr	r3, [r3, #24]
 8006a16:	f003 0320 	and.w	r3, r3, #32
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	d1cf      	bne.n	80069be <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08a      	sub	sp, #40	@ 0x28
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006a42:	2300      	movs	r3, #0
 8006a44:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006a4a:	69bb      	ldr	r3, [r7, #24]
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d068      	beq.n	8006b26 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2210      	movs	r2, #16
 8006a5a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006a5c:	e049      	b.n	8006af2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a64:	d045      	beq.n	8006af2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006a66:	f7fd fd65 	bl	8004534 <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d302      	bcc.n	8006a7c <I2C_IsErrorOccurred+0x54>
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d13a      	bne.n	8006af2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a86:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a8e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a9e:	d121      	bne.n	8006ae4 <I2C_IsErrorOccurred+0xbc>
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006aa6:	d01d      	beq.n	8006ae4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006aa8:	7cfb      	ldrb	r3, [r7, #19]
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d01a      	beq.n	8006ae4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	685a      	ldr	r2, [r3, #4]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006abc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006abe:	f7fd fd39 	bl	8004534 <HAL_GetTick>
 8006ac2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ac4:	e00e      	b.n	8006ae4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006ac6:	f7fd fd35 	bl	8004534 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b19      	cmp	r3, #25
 8006ad2:	d907      	bls.n	8006ae4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	f043 0320 	orr.w	r3, r3, #32
 8006ada:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006ae2:	e006      	b.n	8006af2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	699b      	ldr	r3, [r3, #24]
 8006aea:	f003 0320 	and.w	r3, r3, #32
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d1e9      	bne.n	8006ac6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	699b      	ldr	r3, [r3, #24]
 8006af8:	f003 0320 	and.w	r3, r3, #32
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d003      	beq.n	8006b08 <I2C_IsErrorOccurred+0xe0>
 8006b00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d0aa      	beq.n	8006a5e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006b08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d103      	bne.n	8006b18 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	2220      	movs	r2, #32
 8006b16:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006b18:	6a3b      	ldr	r3, [r7, #32]
 8006b1a:	f043 0304 	orr.w	r3, r3, #4
 8006b1e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d00b      	beq.n	8006b50 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006b38:	6a3b      	ldr	r3, [r7, #32]
 8006b3a:	f043 0301 	orr.w	r3, r3, #1
 8006b3e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b48:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00b      	beq.n	8006b72 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006b5a:	6a3b      	ldr	r3, [r7, #32]
 8006b5c:	f043 0308 	orr.w	r3, r3, #8
 8006b60:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00b      	beq.n	8006b94 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	f043 0302 	orr.w	r3, r3, #2
 8006b82:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006b8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006b94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d01c      	beq.n	8006bd6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f7ff fe63 	bl	8006868 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6859      	ldr	r1, [r3, #4]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681a      	ldr	r2, [r3, #0]
 8006bac:	4b0d      	ldr	r3, [pc, #52]	@ (8006be4 <I2C_IsErrorOccurred+0x1bc>)
 8006bae:	400b      	ands	r3, r1
 8006bb0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	431a      	orrs	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006bd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	3728      	adds	r7, #40	@ 0x28
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	fe00e800 	.word	0xfe00e800

08006be8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	60f8      	str	r0, [r7, #12]
 8006bf0:	607b      	str	r3, [r7, #4]
 8006bf2:	460b      	mov	r3, r1
 8006bf4:	817b      	strh	r3, [r7, #10]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006bfa:	897b      	ldrh	r3, [r7, #10]
 8006bfc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c00:	7a7b      	ldrb	r3, [r7, #9]
 8006c02:	041b      	lsls	r3, r3, #16
 8006c04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c08:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006c0e:	6a3b      	ldr	r3, [r7, #32]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006c16:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685a      	ldr	r2, [r3, #4]
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	0d5b      	lsrs	r3, r3, #21
 8006c22:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006c26:	4b08      	ldr	r3, [pc, #32]	@ (8006c48 <I2C_TransferConfig+0x60>)
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	43db      	mvns	r3, r3
 8006c2c:	ea02 0103 	and.w	r1, r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006c3a:	bf00      	nop
 8006c3c:	371c      	adds	r7, #28
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c44:	4770      	bx	lr
 8006c46:	bf00      	nop
 8006c48:	03ff63ff 	.word	0x03ff63ff

08006c4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b20      	cmp	r3, #32
 8006c60:	d138      	bne.n	8006cd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d101      	bne.n	8006c70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006c6c:	2302      	movs	r3, #2
 8006c6e:	e032      	b.n	8006cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2224      	movs	r2, #36	@ 0x24
 8006c7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0201 	bic.w	r2, r2, #1
 8006c8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006c9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6819      	ldr	r1, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	430a      	orrs	r2, r1
 8006cae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2220      	movs	r2, #32
 8006cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e000      	b.n	8006cd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006cd4:	2302      	movs	r3, #2
  }
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b085      	sub	sp, #20
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b20      	cmp	r3, #32
 8006cf6:	d139      	bne.n	8006d6c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d101      	bne.n	8006d06 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d02:	2302      	movs	r3, #2
 8006d04:	e033      	b.n	8006d6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2224      	movs	r2, #36	@ 0x24
 8006d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f022 0201 	bic.w	r2, r2, #1
 8006d24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006d34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	021b      	lsls	r3, r3, #8
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e000      	b.n	8006d6e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006d6c:	2302      	movs	r3, #2
  }
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
	...

08006d7c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e0bf      	b.n	8006f0e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d106      	bne.n	8006da8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f7fa ff0a 	bl	8001bbc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2202      	movs	r2, #2
 8006dac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	699a      	ldr	r2, [r3, #24]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006dbe:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6999      	ldr	r1, [r3, #24]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006dd4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	691b      	ldr	r3, [r3, #16]
 8006dda:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	430a      	orrs	r2, r1
 8006de2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6899      	ldr	r1, [r3, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681a      	ldr	r2, [r3, #0]
 8006dee:	4b4a      	ldr	r3, [pc, #296]	@ (8006f18 <HAL_LTDC_Init+0x19c>)
 8006df0:	400b      	ands	r3, r1
 8006df2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	695b      	ldr	r3, [r3, #20]
 8006df8:	041b      	lsls	r3, r3, #16
 8006dfa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	6899      	ldr	r1, [r3, #8]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	431a      	orrs	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68d9      	ldr	r1, [r3, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8006f18 <HAL_LTDC_Init+0x19c>)
 8006e1e:	400b      	ands	r3, r1
 8006e20:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	69db      	ldr	r3, [r3, #28]
 8006e26:	041b      	lsls	r3, r3, #16
 8006e28:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68d9      	ldr	r1, [r3, #12]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6a1a      	ldr	r2, [r3, #32]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	431a      	orrs	r2, r3
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	430a      	orrs	r2, r1
 8006e3e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6919      	ldr	r1, [r3, #16]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	4b33      	ldr	r3, [pc, #204]	@ (8006f18 <HAL_LTDC_Init+0x19c>)
 8006e4c:	400b      	ands	r3, r1
 8006e4e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e54:	041b      	lsls	r3, r3, #16
 8006e56:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6919      	ldr	r1, [r3, #16]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	431a      	orrs	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	6959      	ldr	r1, [r3, #20]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	4b27      	ldr	r3, [pc, #156]	@ (8006f18 <HAL_LTDC_Init+0x19c>)
 8006e7a:	400b      	ands	r3, r1
 8006e7c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e82:	041b      	lsls	r3, r3, #16
 8006e84:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	6959      	ldr	r1, [r3, #20]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	430a      	orrs	r2, r1
 8006e9a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ea2:	021b      	lsls	r3, r3, #8
 8006ea4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006eac:	041b      	lsls	r3, r3, #16
 8006eae:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	430a      	orrs	r2, r1
 8006eda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0206 	orr.w	r2, r2, #6
 8006eea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3710      	adds	r7, #16
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	f000f800 	.word	0xf000f800

08006f1c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f32:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f003 0304 	and.w	r3, r3, #4
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d023      	beq.n	8006f86 <HAL_LTDC_IRQHandler+0x6a>
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	f003 0304 	and.w	r3, r3, #4
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01e      	beq.n	8006f86 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0204 	bic.w	r2, r2, #4
 8006f56:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2204      	movs	r2, #4
 8006f5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006f66:	f043 0201 	orr.w	r2, r3, #1
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2204      	movs	r2, #4
 8006f74:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f86f 	bl	8007064 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d023      	beq.n	8006fd8 <HAL_LTDC_IRQHandler+0xbc>
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d01e      	beq.n	8006fd8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f022 0202 	bic.w	r2, r2, #2
 8006fa8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2202      	movs	r2, #2
 8006fb0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006fb8:	f043 0202 	orr.w	r2, r3, #2
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2204      	movs	r2, #4
 8006fc6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f846 	bl	8007064 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d01b      	beq.n	800701a <HAL_LTDC_IRQHandler+0xfe>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d016      	beq.n	800701a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f022 0201 	bic.w	r2, r2, #1
 8006ffa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	2201      	movs	r2, #1
 8007002:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 f82f 	bl	8007078 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f003 0308 	and.w	r3, r3, #8
 8007020:	2b00      	cmp	r3, #0
 8007022:	d01b      	beq.n	800705c <HAL_LTDC_IRQHandler+0x140>
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b00      	cmp	r3, #0
 800702c:	d016      	beq.n	800705c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0208 	bic.w	r2, r2, #8
 800703c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2208      	movs	r2, #8
 8007044:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2201      	movs	r2, #1
 800704a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f818 	bl	800708c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 800705c:	bf00      	nop
 800705e:	3710      	adds	r7, #16
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80070a0:	b5b0      	push	{r4, r5, r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <HAL_LTDC_ConfigLayer+0x1a>
 80070b6:	2302      	movs	r3, #2
 80070b8:	e02c      	b.n	8007114 <HAL_LTDC_ConfigLayer+0x74>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2202      	movs	r2, #2
 80070c6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2134      	movs	r1, #52	@ 0x34
 80070d0:	fb01 f303 	mul.w	r3, r1, r3
 80070d4:	4413      	add	r3, r2
 80070d6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	4614      	mov	r4, r2
 80070de:	461d      	mov	r5, r3
 80070e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80070ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070ec:	682b      	ldr	r3, [r5, #0]
 80070ee:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	68b9      	ldr	r1, [r7, #8]
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 f81f 	bl	8007138 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2201      	movs	r2, #1
 8007100:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bdb0      	pop	{r4, r5, r7, pc}

0800711c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800712a:	b2db      	uxtb	r3, r3
}
 800712c:	4618      	mov	r0, r3
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007138:	b480      	push	{r7}
 800713a:	b089      	sub	sp, #36	@ 0x24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	60b9      	str	r1, [r7, #8]
 8007142:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	0c1b      	lsrs	r3, r3, #16
 8007150:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007154:	4413      	add	r3, r2
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	01db      	lsls	r3, r3, #7
 8007164:	4413      	add	r3, r2
 8007166:	3384      	adds	r3, #132	@ 0x84
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	6812      	ldr	r2, [r2, #0]
 800716e:	4611      	mov	r1, r2
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	01d2      	lsls	r2, r2, #7
 8007174:	440a      	add	r2, r1
 8007176:	3284      	adds	r2, #132	@ 0x84
 8007178:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800717c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	0c1b      	lsrs	r3, r3, #16
 800718a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800718e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007190:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4619      	mov	r1, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	01db      	lsls	r3, r3, #7
 800719c:	440b      	add	r3, r1
 800719e:	3384      	adds	r3, #132	@ 0x84
 80071a0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80071a6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071b6:	4413      	add	r3, r2
 80071b8:	041b      	lsls	r3, r3, #16
 80071ba:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	461a      	mov	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	01db      	lsls	r3, r3, #7
 80071c6:	4413      	add	r3, r2
 80071c8:	3384      	adds	r3, #132	@ 0x84
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	6812      	ldr	r2, [r2, #0]
 80071d0:	4611      	mov	r1, r2
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	01d2      	lsls	r2, r2, #7
 80071d6:	440a      	add	r2, r1
 80071d8:	3284      	adds	r2, #132	@ 0x84
 80071da:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80071de:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68db      	ldr	r3, [r3, #12]
 80071ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80071ee:	4413      	add	r3, r2
 80071f0:	1c5a      	adds	r2, r3, #1
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4619      	mov	r1, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	01db      	lsls	r3, r3, #7
 80071fc:	440b      	add	r3, r1
 80071fe:	3384      	adds	r3, #132	@ 0x84
 8007200:	4619      	mov	r1, r3
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	4313      	orrs	r3, r2
 8007206:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	01db      	lsls	r3, r3, #7
 8007212:	4413      	add	r3, r2
 8007214:	3384      	adds	r3, #132	@ 0x84
 8007216:	691b      	ldr	r3, [r3, #16]
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	6812      	ldr	r2, [r2, #0]
 800721c:	4611      	mov	r1, r2
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	01d2      	lsls	r2, r2, #7
 8007222:	440a      	add	r2, r1
 8007224:	3284      	adds	r2, #132	@ 0x84
 8007226:	f023 0307 	bic.w	r3, r3, #7
 800722a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	461a      	mov	r2, r3
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	01db      	lsls	r3, r3, #7
 8007236:	4413      	add	r3, r2
 8007238:	3384      	adds	r3, #132	@ 0x84
 800723a:	461a      	mov	r2, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	691b      	ldr	r3, [r3, #16]
 8007240:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007248:	021b      	lsls	r3, r3, #8
 800724a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8007252:	041b      	lsls	r3, r3, #16
 8007254:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	061b      	lsls	r3, r3, #24
 800725c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	461a      	mov	r2, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	01db      	lsls	r3, r3, #7
 8007268:	4413      	add	r3, r2
 800726a:	3384      	adds	r3, #132	@ 0x84
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	461a      	mov	r2, r3
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	01db      	lsls	r3, r3, #7
 8007278:	4413      	add	r3, r2
 800727a:	3384      	adds	r3, #132	@ 0x84
 800727c:	461a      	mov	r2, r3
 800727e:	2300      	movs	r3, #0
 8007280:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007288:	461a      	mov	r2, r3
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	431a      	orrs	r2, r3
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	431a      	orrs	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4619      	mov	r1, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	01db      	lsls	r3, r3, #7
 800729c:	440b      	add	r3, r1
 800729e:	3384      	adds	r3, #132	@ 0x84
 80072a0:	4619      	mov	r1, r3
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	4313      	orrs	r3, r2
 80072a6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	461a      	mov	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	01db      	lsls	r3, r3, #7
 80072b2:	4413      	add	r3, r2
 80072b4:	3384      	adds	r3, #132	@ 0x84
 80072b6:	695b      	ldr	r3, [r3, #20]
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	4611      	mov	r1, r2
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	01d2      	lsls	r2, r2, #7
 80072c2:	440a      	add	r2, r1
 80072c4:	3284      	adds	r2, #132	@ 0x84
 80072c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80072ca:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	461a      	mov	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	01db      	lsls	r3, r3, #7
 80072d6:	4413      	add	r3, r2
 80072d8:	3384      	adds	r3, #132	@ 0x84
 80072da:	461a      	mov	r2, r3
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	01db      	lsls	r3, r3, #7
 80072ec:	4413      	add	r3, r2
 80072ee:	3384      	adds	r3, #132	@ 0x84
 80072f0:	69da      	ldr	r2, [r3, #28]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4619      	mov	r1, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	01db      	lsls	r3, r3, #7
 80072fc:	440b      	add	r3, r1
 80072fe:	3384      	adds	r3, #132	@ 0x84
 8007300:	4619      	mov	r1, r3
 8007302:	4b58      	ldr	r3, [pc, #352]	@ (8007464 <LTDC_SetConfig+0x32c>)
 8007304:	4013      	ands	r3, r2
 8007306:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	69da      	ldr	r2, [r3, #28]
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	68f9      	ldr	r1, [r7, #12]
 8007312:	6809      	ldr	r1, [r1, #0]
 8007314:	4608      	mov	r0, r1
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	01c9      	lsls	r1, r1, #7
 800731a:	4401      	add	r1, r0
 800731c:	3184      	adds	r1, #132	@ 0x84
 800731e:	4313      	orrs	r3, r2
 8007320:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	461a      	mov	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	01db      	lsls	r3, r3, #7
 800732c:	4413      	add	r3, r2
 800732e:	3384      	adds	r3, #132	@ 0x84
 8007330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	461a      	mov	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	01db      	lsls	r3, r3, #7
 800733c:	4413      	add	r3, r2
 800733e:	3384      	adds	r3, #132	@ 0x84
 8007340:	461a      	mov	r2, r3
 8007342:	2300      	movs	r3, #0
 8007344:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	461a      	mov	r2, r3
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	01db      	lsls	r3, r3, #7
 8007350:	4413      	add	r3, r2
 8007352:	3384      	adds	r3, #132	@ 0x84
 8007354:	461a      	mov	r2, r3
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800735a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	691b      	ldr	r3, [r3, #16]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d102      	bne.n	800736a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007364:	2304      	movs	r3, #4
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	e01b      	b.n	80073a2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d102      	bne.n	8007378 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007372:	2303      	movs	r3, #3
 8007374:	61fb      	str	r3, [r7, #28]
 8007376:	e014      	b.n	80073a2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	691b      	ldr	r3, [r3, #16]
 800737c:	2b04      	cmp	r3, #4
 800737e:	d00b      	beq.n	8007398 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007384:	2b02      	cmp	r3, #2
 8007386:	d007      	beq.n	8007398 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800738c:	2b03      	cmp	r3, #3
 800738e:	d003      	beq.n	8007398 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007394:	2b07      	cmp	r3, #7
 8007396:	d102      	bne.n	800739e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007398:	2302      	movs	r3, #2
 800739a:	61fb      	str	r3, [r7, #28]
 800739c:	e001      	b.n	80073a2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800739e:	2301      	movs	r3, #1
 80073a0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	461a      	mov	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	01db      	lsls	r3, r3, #7
 80073ac:	4413      	add	r3, r2
 80073ae:	3384      	adds	r3, #132	@ 0x84
 80073b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	6812      	ldr	r2, [r2, #0]
 80073b6:	4611      	mov	r1, r2
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	01d2      	lsls	r2, r2, #7
 80073bc:	440a      	add	r2, r1
 80073be:	3284      	adds	r2, #132	@ 0x84
 80073c0:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80073c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	fb02 f303 	mul.w	r3, r2, r3
 80073d0:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	6859      	ldr	r1, [r3, #4]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	1acb      	subs	r3, r1, r3
 80073dc:	69f9      	ldr	r1, [r7, #28]
 80073de:	fb01 f303 	mul.w	r3, r1, r3
 80073e2:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80073e4:	68f9      	ldr	r1, [r7, #12]
 80073e6:	6809      	ldr	r1, [r1, #0]
 80073e8:	4608      	mov	r0, r1
 80073ea:	6879      	ldr	r1, [r7, #4]
 80073ec:	01c9      	lsls	r1, r1, #7
 80073ee:	4401      	add	r1, r0
 80073f0:	3184      	adds	r1, #132	@ 0x84
 80073f2:	4313      	orrs	r3, r2
 80073f4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	461a      	mov	r2, r3
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	01db      	lsls	r3, r3, #7
 8007400:	4413      	add	r3, r2
 8007402:	3384      	adds	r3, #132	@ 0x84
 8007404:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4619      	mov	r1, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	01db      	lsls	r3, r3, #7
 8007410:	440b      	add	r3, r1
 8007412:	3384      	adds	r3, #132	@ 0x84
 8007414:	4619      	mov	r1, r3
 8007416:	4b14      	ldr	r3, [pc, #80]	@ (8007468 <LTDC_SetConfig+0x330>)
 8007418:	4013      	ands	r3, r2
 800741a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	461a      	mov	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	01db      	lsls	r3, r3, #7
 8007426:	4413      	add	r3, r2
 8007428:	3384      	adds	r3, #132	@ 0x84
 800742a:	461a      	mov	r2, r3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007430:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	461a      	mov	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	01db      	lsls	r3, r3, #7
 800743c:	4413      	add	r3, r2
 800743e:	3384      	adds	r3, #132	@ 0x84
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	6812      	ldr	r2, [r2, #0]
 8007446:	4611      	mov	r1, r2
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	01d2      	lsls	r2, r2, #7
 800744c:	440a      	add	r2, r1
 800744e:	3284      	adds	r2, #132	@ 0x84
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	6013      	str	r3, [r2, #0]
}
 8007456:	bf00      	nop
 8007458:	3724      	adds	r7, #36	@ 0x24
 800745a:	46bd      	mov	sp, r7
 800745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop
 8007464:	fffff8f8 	.word	0xfffff8f8
 8007468:	fffff800 	.word	0xfffff800

0800746c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007470:	4b05      	ldr	r3, [pc, #20]	@ (8007488 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a04      	ldr	r2, [pc, #16]	@ (8007488 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007476:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800747a:	6013      	str	r3, [r2, #0]
}
 800747c:	bf00      	nop
 800747e:	46bd      	mov	sp, r7
 8007480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	40007000 	.word	0x40007000

0800748c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007492:	2300      	movs	r3, #0
 8007494:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007496:	4b23      	ldr	r3, [pc, #140]	@ (8007524 <HAL_PWREx_EnableOverDrive+0x98>)
 8007498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800749a:	4a22      	ldr	r2, [pc, #136]	@ (8007524 <HAL_PWREx_EnableOverDrive+0x98>)
 800749c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80074a2:	4b20      	ldr	r3, [pc, #128]	@ (8007524 <HAL_PWREx_EnableOverDrive+0x98>)
 80074a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074aa:	603b      	str	r3, [r7, #0]
 80074ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80074ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074ba:	f7fd f83b 	bl	8004534 <HAL_GetTick>
 80074be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074c0:	e009      	b.n	80074d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074c2:	f7fd f837 	bl	8004534 <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80074d0:	d901      	bls.n	80074d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e022      	b.n	800751c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074d6:	4b14      	ldr	r3, [pc, #80]	@ (8007528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80074de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074e2:	d1ee      	bne.n	80074c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80074e4:	4b10      	ldr	r3, [pc, #64]	@ (8007528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a0f      	ldr	r2, [pc, #60]	@ (8007528 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80074ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074f0:	f7fd f820 	bl	8004534 <HAL_GetTick>
 80074f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80074f6:	e009      	b.n	800750c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074f8:	f7fd f81c 	bl	8004534 <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007506:	d901      	bls.n	800750c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007508:	2303      	movs	r3, #3
 800750a:	e007      	b.n	800751c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800750c:	4b06      	ldr	r3, [pc, #24]	@ (8007528 <HAL_PWREx_EnableOverDrive+0x9c>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007514:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007518:	d1ee      	bne.n	80074f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3708      	adds	r7, #8
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	40023800 	.word	0x40023800
 8007528:	40007000 	.word	0x40007000

0800752c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007534:	2300      	movs	r3, #0
 8007536:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e291      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0301 	and.w	r3, r3, #1
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8087 	beq.w	800765e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007550:	4b96      	ldr	r3, [pc, #600]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f003 030c 	and.w	r3, r3, #12
 8007558:	2b04      	cmp	r3, #4
 800755a:	d00c      	beq.n	8007576 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800755c:	4b93      	ldr	r3, [pc, #588]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800755e:	689b      	ldr	r3, [r3, #8]
 8007560:	f003 030c 	and.w	r3, r3, #12
 8007564:	2b08      	cmp	r3, #8
 8007566:	d112      	bne.n	800758e <HAL_RCC_OscConfig+0x62>
 8007568:	4b90      	ldr	r3, [pc, #576]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007570:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007574:	d10b      	bne.n	800758e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007576:	4b8d      	ldr	r3, [pc, #564]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d06c      	beq.n	800765c <HAL_RCC_OscConfig+0x130>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d168      	bne.n	800765c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e26b      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007596:	d106      	bne.n	80075a6 <HAL_RCC_OscConfig+0x7a>
 8007598:	4b84      	ldr	r3, [pc, #528]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a83      	ldr	r2, [pc, #524]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800759e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075a2:	6013      	str	r3, [r2, #0]
 80075a4:	e02e      	b.n	8007604 <HAL_RCC_OscConfig+0xd8>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10c      	bne.n	80075c8 <HAL_RCC_OscConfig+0x9c>
 80075ae:	4b7f      	ldr	r3, [pc, #508]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a7e      	ldr	r2, [pc, #504]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075b8:	6013      	str	r3, [r2, #0]
 80075ba:	4b7c      	ldr	r3, [pc, #496]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	4a7b      	ldr	r2, [pc, #492]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	e01d      	b.n	8007604 <HAL_RCC_OscConfig+0xd8>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80075d0:	d10c      	bne.n	80075ec <HAL_RCC_OscConfig+0xc0>
 80075d2:	4b76      	ldr	r3, [pc, #472]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a75      	ldr	r2, [pc, #468]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	4b73      	ldr	r3, [pc, #460]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a72      	ldr	r2, [pc, #456]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075e8:	6013      	str	r3, [r2, #0]
 80075ea:	e00b      	b.n	8007604 <HAL_RCC_OscConfig+0xd8>
 80075ec:	4b6f      	ldr	r3, [pc, #444]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a6e      	ldr	r2, [pc, #440]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075f6:	6013      	str	r3, [r2, #0]
 80075f8:	4b6c      	ldr	r3, [pc, #432]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a6b      	ldr	r2, [pc, #428]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80075fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d013      	beq.n	8007634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800760c:	f7fc ff92 	bl	8004534 <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007612:	e008      	b.n	8007626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007614:	f7fc ff8e 	bl	8004534 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	2b64      	cmp	r3, #100	@ 0x64
 8007620:	d901      	bls.n	8007626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007622:	2303      	movs	r3, #3
 8007624:	e21f      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007626:	4b61      	ldr	r3, [pc, #388]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800762e:	2b00      	cmp	r3, #0
 8007630:	d0f0      	beq.n	8007614 <HAL_RCC_OscConfig+0xe8>
 8007632:	e014      	b.n	800765e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007634:	f7fc ff7e 	bl	8004534 <HAL_GetTick>
 8007638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800763a:	e008      	b.n	800764e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800763c:	f7fc ff7a 	bl	8004534 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	2b64      	cmp	r3, #100	@ 0x64
 8007648:	d901      	bls.n	800764e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e20b      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800764e:	4b57      	ldr	r3, [pc, #348]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d1f0      	bne.n	800763c <HAL_RCC_OscConfig+0x110>
 800765a:	e000      	b.n	800765e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800765c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f003 0302 	and.w	r3, r3, #2
 8007666:	2b00      	cmp	r3, #0
 8007668:	d069      	beq.n	800773e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800766a:	4b50      	ldr	r3, [pc, #320]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f003 030c 	and.w	r3, r3, #12
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00b      	beq.n	800768e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007676:	4b4d      	ldr	r3, [pc, #308]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f003 030c 	and.w	r3, r3, #12
 800767e:	2b08      	cmp	r3, #8
 8007680:	d11c      	bne.n	80076bc <HAL_RCC_OscConfig+0x190>
 8007682:	4b4a      	ldr	r3, [pc, #296]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d116      	bne.n	80076bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800768e:	4b47      	ldr	r3, [pc, #284]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 0302 	and.w	r3, r3, #2
 8007696:	2b00      	cmp	r3, #0
 8007698:	d005      	beq.n	80076a6 <HAL_RCC_OscConfig+0x17a>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d001      	beq.n	80076a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e1df      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076a6:	4b41      	ldr	r3, [pc, #260]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	493d      	ldr	r1, [pc, #244]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80076b6:	4313      	orrs	r3, r2
 80076b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076ba:	e040      	b.n	800773e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	68db      	ldr	r3, [r3, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d023      	beq.n	800770c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076c4:	4b39      	ldr	r3, [pc, #228]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a38      	ldr	r2, [pc, #224]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80076ca:	f043 0301 	orr.w	r3, r3, #1
 80076ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076d0:	f7fc ff30 	bl	8004534 <HAL_GetTick>
 80076d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076d6:	e008      	b.n	80076ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076d8:	f7fc ff2c 	bl	8004534 <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d901      	bls.n	80076ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e1bd      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ea:	4b30      	ldr	r3, [pc, #192]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f0      	beq.n	80076d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076f6:	4b2d      	ldr	r3, [pc, #180]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	00db      	lsls	r3, r3, #3
 8007704:	4929      	ldr	r1, [pc, #164]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007706:	4313      	orrs	r3, r2
 8007708:	600b      	str	r3, [r1, #0]
 800770a:	e018      	b.n	800773e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800770c:	4b27      	ldr	r3, [pc, #156]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a26      	ldr	r2, [pc, #152]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007712:	f023 0301 	bic.w	r3, r3, #1
 8007716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007718:	f7fc ff0c 	bl	8004534 <HAL_GetTick>
 800771c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800771e:	e008      	b.n	8007732 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007720:	f7fc ff08 	bl	8004534 <HAL_GetTick>
 8007724:	4602      	mov	r2, r0
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	1ad3      	subs	r3, r2, r3
 800772a:	2b02      	cmp	r3, #2
 800772c:	d901      	bls.n	8007732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e199      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007732:	4b1e      	ldr	r3, [pc, #120]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f003 0302 	and.w	r3, r3, #2
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1f0      	bne.n	8007720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0308 	and.w	r3, r3, #8
 8007746:	2b00      	cmp	r3, #0
 8007748:	d038      	beq.n	80077bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	695b      	ldr	r3, [r3, #20]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d019      	beq.n	8007786 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007752:	4b16      	ldr	r3, [pc, #88]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007756:	4a15      	ldr	r2, [pc, #84]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007758:	f043 0301 	orr.w	r3, r3, #1
 800775c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800775e:	f7fc fee9 	bl	8004534 <HAL_GetTick>
 8007762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007764:	e008      	b.n	8007778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007766:	f7fc fee5 	bl	8004534 <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e176      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007778:	4b0c      	ldr	r3, [pc, #48]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800777a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d0f0      	beq.n	8007766 <HAL_RCC_OscConfig+0x23a>
 8007784:	e01a      	b.n	80077bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007786:	4b09      	ldr	r3, [pc, #36]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 8007788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800778a:	4a08      	ldr	r2, [pc, #32]	@ (80077ac <HAL_RCC_OscConfig+0x280>)
 800778c:	f023 0301 	bic.w	r3, r3, #1
 8007790:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007792:	f7fc fecf 	bl	8004534 <HAL_GetTick>
 8007796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007798:	e00a      	b.n	80077b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800779a:	f7fc fecb 	bl	8004534 <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d903      	bls.n	80077b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e15c      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
 80077ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b0:	4b91      	ldr	r3, [pc, #580]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80077b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077b4:	f003 0302 	and.w	r3, r3, #2
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1ee      	bne.n	800779a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80a4 	beq.w	8007912 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077ca:	4b8b      	ldr	r3, [pc, #556]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80077cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10d      	bne.n	80077f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80077d6:	4b88      	ldr	r3, [pc, #544]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80077d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077da:	4a87      	ldr	r2, [pc, #540]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80077dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80077e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80077e2:	4b85      	ldr	r3, [pc, #532]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80077e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077ea:	60bb      	str	r3, [r7, #8]
 80077ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077ee:	2301      	movs	r3, #1
 80077f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80077f2:	4b82      	ldr	r3, [pc, #520]	@ (80079fc <HAL_RCC_OscConfig+0x4d0>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d118      	bne.n	8007830 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80077fe:	4b7f      	ldr	r3, [pc, #508]	@ (80079fc <HAL_RCC_OscConfig+0x4d0>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a7e      	ldr	r2, [pc, #504]	@ (80079fc <HAL_RCC_OscConfig+0x4d0>)
 8007804:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800780a:	f7fc fe93 	bl	8004534 <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007810:	e008      	b.n	8007824 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007812:	f7fc fe8f 	bl	8004534 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b64      	cmp	r3, #100	@ 0x64
 800781e:	d901      	bls.n	8007824 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e120      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007824:	4b75      	ldr	r3, [pc, #468]	@ (80079fc <HAL_RCC_OscConfig+0x4d0>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800782c:	2b00      	cmp	r3, #0
 800782e:	d0f0      	beq.n	8007812 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d106      	bne.n	8007846 <HAL_RCC_OscConfig+0x31a>
 8007838:	4b6f      	ldr	r3, [pc, #444]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800783a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800783c:	4a6e      	ldr	r2, [pc, #440]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800783e:	f043 0301 	orr.w	r3, r3, #1
 8007842:	6713      	str	r3, [r2, #112]	@ 0x70
 8007844:	e02d      	b.n	80078a2 <HAL_RCC_OscConfig+0x376>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10c      	bne.n	8007868 <HAL_RCC_OscConfig+0x33c>
 800784e:	4b6a      	ldr	r3, [pc, #424]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007852:	4a69      	ldr	r2, [pc, #420]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007854:	f023 0301 	bic.w	r3, r3, #1
 8007858:	6713      	str	r3, [r2, #112]	@ 0x70
 800785a:	4b67      	ldr	r3, [pc, #412]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800785c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800785e:	4a66      	ldr	r2, [pc, #408]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007860:	f023 0304 	bic.w	r3, r3, #4
 8007864:	6713      	str	r3, [r2, #112]	@ 0x70
 8007866:	e01c      	b.n	80078a2 <HAL_RCC_OscConfig+0x376>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	2b05      	cmp	r3, #5
 800786e:	d10c      	bne.n	800788a <HAL_RCC_OscConfig+0x35e>
 8007870:	4b61      	ldr	r3, [pc, #388]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007874:	4a60      	ldr	r2, [pc, #384]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007876:	f043 0304 	orr.w	r3, r3, #4
 800787a:	6713      	str	r3, [r2, #112]	@ 0x70
 800787c:	4b5e      	ldr	r3, [pc, #376]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800787e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007880:	4a5d      	ldr	r2, [pc, #372]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007882:	f043 0301 	orr.w	r3, r3, #1
 8007886:	6713      	str	r3, [r2, #112]	@ 0x70
 8007888:	e00b      	b.n	80078a2 <HAL_RCC_OscConfig+0x376>
 800788a:	4b5b      	ldr	r3, [pc, #364]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800788c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800788e:	4a5a      	ldr	r2, [pc, #360]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007890:	f023 0301 	bic.w	r3, r3, #1
 8007894:	6713      	str	r3, [r2, #112]	@ 0x70
 8007896:	4b58      	ldr	r3, [pc, #352]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800789a:	4a57      	ldr	r2, [pc, #348]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800789c:	f023 0304 	bic.w	r3, r3, #4
 80078a0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d015      	beq.n	80078d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078aa:	f7fc fe43 	bl	8004534 <HAL_GetTick>
 80078ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078b0:	e00a      	b.n	80078c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078b2:	f7fc fe3f 	bl	8004534 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078c0:	4293      	cmp	r3, r2
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e0ce      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c8:	4b4b      	ldr	r3, [pc, #300]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80078ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d0ee      	beq.n	80078b2 <HAL_RCC_OscConfig+0x386>
 80078d4:	e014      	b.n	8007900 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078d6:	f7fc fe2d 	bl	8004534 <HAL_GetTick>
 80078da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078dc:	e00a      	b.n	80078f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078de:	f7fc fe29 	bl	8004534 <HAL_GetTick>
 80078e2:	4602      	mov	r2, r0
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	1ad3      	subs	r3, r2, r3
 80078e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d901      	bls.n	80078f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e0b8      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f4:	4b40      	ldr	r3, [pc, #256]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80078f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078f8:	f003 0302 	and.w	r3, r3, #2
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1ee      	bne.n	80078de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007900:	7dfb      	ldrb	r3, [r7, #23]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d105      	bne.n	8007912 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007906:	4b3c      	ldr	r3, [pc, #240]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800790a:	4a3b      	ldr	r2, [pc, #236]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800790c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007910:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	2b00      	cmp	r3, #0
 8007918:	f000 80a4 	beq.w	8007a64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800791c:	4b36      	ldr	r3, [pc, #216]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 030c 	and.w	r3, r3, #12
 8007924:	2b08      	cmp	r3, #8
 8007926:	d06b      	beq.n	8007a00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	699b      	ldr	r3, [r3, #24]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d149      	bne.n	80079c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007930:	4b31      	ldr	r3, [pc, #196]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a30      	ldr	r2, [pc, #192]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007936:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800793a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800793c:	f7fc fdfa 	bl	8004534 <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007942:	e008      	b.n	8007956 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007944:	f7fc fdf6 	bl	8004534 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	2b02      	cmp	r3, #2
 8007950:	d901      	bls.n	8007956 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007952:	2303      	movs	r3, #3
 8007954:	e087      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007956:	4b28      	ldr	r3, [pc, #160]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1f0      	bne.n	8007944 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	69da      	ldr	r2, [r3, #28]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	431a      	orrs	r2, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007970:	019b      	lsls	r3, r3, #6
 8007972:	431a      	orrs	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007978:	085b      	lsrs	r3, r3, #1
 800797a:	3b01      	subs	r3, #1
 800797c:	041b      	lsls	r3, r3, #16
 800797e:	431a      	orrs	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007984:	061b      	lsls	r3, r3, #24
 8007986:	4313      	orrs	r3, r2
 8007988:	4a1b      	ldr	r2, [pc, #108]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 800798a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800798e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007990:	4b19      	ldr	r3, [pc, #100]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a18      	ldr	r2, [pc, #96]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 8007996:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800799a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799c:	f7fc fdca 	bl	8004534 <HAL_GetTick>
 80079a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079a2:	e008      	b.n	80079b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079a4:	f7fc fdc6 	bl	8004534 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e057      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079b6:	4b10      	ldr	r3, [pc, #64]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d0f0      	beq.n	80079a4 <HAL_RCC_OscConfig+0x478>
 80079c2:	e04f      	b.n	8007a64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079c4:	4b0c      	ldr	r3, [pc, #48]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a0b      	ldr	r2, [pc, #44]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80079ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079d0:	f7fc fdb0 	bl	8004534 <HAL_GetTick>
 80079d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079d6:	e008      	b.n	80079ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079d8:	f7fc fdac 	bl	8004534 <HAL_GetTick>
 80079dc:	4602      	mov	r2, r0
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e03d      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ea:	4b03      	ldr	r3, [pc, #12]	@ (80079f8 <HAL_RCC_OscConfig+0x4cc>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f0      	bne.n	80079d8 <HAL_RCC_OscConfig+0x4ac>
 80079f6:	e035      	b.n	8007a64 <HAL_RCC_OscConfig+0x538>
 80079f8:	40023800 	.word	0x40023800
 80079fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007a00:	4b1b      	ldr	r3, [pc, #108]	@ (8007a70 <HAL_RCC_OscConfig+0x544>)
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d028      	beq.n	8007a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d121      	bne.n	8007a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a26:	429a      	cmp	r2, r3
 8007a28:	d11a      	bne.n	8007a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007a30:	4013      	ands	r3, r2
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007a36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d111      	bne.n	8007a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a46:	085b      	lsrs	r3, r3, #1
 8007a48:	3b01      	subs	r3, #1
 8007a4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d107      	bne.n	8007a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d001      	beq.n	8007a64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e000      	b.n	8007a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3718      	adds	r7, #24
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	40023800 	.word	0x40023800

08007a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e0d0      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 030f 	and.w	r3, r3, #15
 8007a94:	683a      	ldr	r2, [r7, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d910      	bls.n	8007abc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a9a:	4b67      	ldr	r3, [pc, #412]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f023 020f 	bic.w	r2, r3, #15
 8007aa2:	4965      	ldr	r1, [pc, #404]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007aaa:	4b63      	ldr	r3, [pc, #396]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 030f 	and.w	r3, r3, #15
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d001      	beq.n	8007abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e0b8      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d020      	beq.n	8007b0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d005      	beq.n	8007ae0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007ad4:	4b59      	ldr	r3, [pc, #356]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	4a58      	ldr	r2, [pc, #352]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007ada:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007ade:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0308 	and.w	r3, r3, #8
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007aec:	4b53      	ldr	r3, [pc, #332]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	4a52      	ldr	r2, [pc, #328]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007af2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007af6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007af8:	4b50      	ldr	r3, [pc, #320]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	494d      	ldr	r1, [pc, #308]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f003 0301 	and.w	r3, r3, #1
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d040      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d107      	bne.n	8007b2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b1e:	4b47      	ldr	r3, [pc, #284]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d115      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e07f      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d107      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b36:	4b41      	ldr	r3, [pc, #260]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d109      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e073      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b46:	4b3d      	ldr	r3, [pc, #244]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e06b      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b56:	4b39      	ldr	r3, [pc, #228]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f023 0203 	bic.w	r2, r3, #3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	4936      	ldr	r1, [pc, #216]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b68:	f7fc fce4 	bl	8004534 <HAL_GetTick>
 8007b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b6e:	e00a      	b.n	8007b86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b70:	f7fc fce0 	bl	8004534 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e053      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b86:	4b2d      	ldr	r3, [pc, #180]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f003 020c 	and.w	r2, r3, #12
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d1eb      	bne.n	8007b70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007b98:	4b27      	ldr	r3, [pc, #156]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 030f 	and.w	r3, r3, #15
 8007ba0:	683a      	ldr	r2, [r7, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d210      	bcs.n	8007bc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ba6:	4b24      	ldr	r3, [pc, #144]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f023 020f 	bic.w	r2, r3, #15
 8007bae:	4922      	ldr	r1, [pc, #136]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	4313      	orrs	r3, r2
 8007bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bb6:	4b20      	ldr	r3, [pc, #128]	@ (8007c38 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 030f 	and.w	r3, r3, #15
 8007bbe:	683a      	ldr	r2, [r7, #0]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d001      	beq.n	8007bc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e032      	b.n	8007c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d008      	beq.n	8007be6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bd4:	4b19      	ldr	r3, [pc, #100]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007bd6:	689b      	ldr	r3, [r3, #8]
 8007bd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	4916      	ldr	r1, [pc, #88]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0308 	and.w	r3, r3, #8
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d009      	beq.n	8007c06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007bf2:	4b12      	ldr	r3, [pc, #72]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	490e      	ldr	r1, [pc, #56]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c06:	f000 f821 	bl	8007c4c <HAL_RCC_GetSysClockFreq>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c3c <HAL_RCC_ClockConfig+0x1c8>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	091b      	lsrs	r3, r3, #4
 8007c12:	f003 030f 	and.w	r3, r3, #15
 8007c16:	490a      	ldr	r1, [pc, #40]	@ (8007c40 <HAL_RCC_ClockConfig+0x1cc>)
 8007c18:	5ccb      	ldrb	r3, [r1, r3]
 8007c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c1e:	4a09      	ldr	r2, [pc, #36]	@ (8007c44 <HAL_RCC_ClockConfig+0x1d0>)
 8007c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c22:	4b09      	ldr	r3, [pc, #36]	@ (8007c48 <HAL_RCC_ClockConfig+0x1d4>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fb ff5e 	bl	8003ae8 <HAL_InitTick>

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3710      	adds	r7, #16
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	40023c00 	.word	0x40023c00
 8007c3c:	40023800 	.word	0x40023800
 8007c40:	08014618 	.word	0x08014618
 8007c44:	20000034 	.word	0x20000034
 8007c48:	20000038 	.word	0x20000038

08007c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c50:	b090      	sub	sp, #64	@ 0x40
 8007c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c54:	2300      	movs	r3, #0
 8007c56:	637b      	str	r3, [r7, #52]	@ 0x34
 8007c58:	2300      	movs	r3, #0
 8007c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8007c60:	2300      	movs	r3, #0
 8007c62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c64:	4b59      	ldr	r3, [pc, #356]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 030c 	and.w	r3, r3, #12
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d00d      	beq.n	8007c8c <HAL_RCC_GetSysClockFreq+0x40>
 8007c70:	2b08      	cmp	r3, #8
 8007c72:	f200 80a1 	bhi.w	8007db8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d002      	beq.n	8007c80 <HAL_RCC_GetSysClockFreq+0x34>
 8007c7a:	2b04      	cmp	r3, #4
 8007c7c:	d003      	beq.n	8007c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8007c7e:	e09b      	b.n	8007db8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c80:	4b53      	ldr	r3, [pc, #332]	@ (8007dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c84:	e09b      	b.n	8007dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c86:	4b53      	ldr	r3, [pc, #332]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007c88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c8a:	e098      	b.n	8007dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c8c:	4b4f      	ldr	r3, [pc, #316]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007c96:	4b4d      	ldr	r3, [pc, #308]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d028      	beq.n	8007cf4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ca2:	4b4a      	ldr	r3, [pc, #296]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	099b      	lsrs	r3, r3, #6
 8007ca8:	2200      	movs	r2, #0
 8007caa:	623b      	str	r3, [r7, #32]
 8007cac:	627a      	str	r2, [r7, #36]	@ 0x24
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	4b47      	ldr	r3, [pc, #284]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cb8:	fb03 f201 	mul.w	r2, r3, r1
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	fb00 f303 	mul.w	r3, r0, r3
 8007cc2:	4413      	add	r3, r2
 8007cc4:	4a43      	ldr	r2, [pc, #268]	@ (8007dd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007cc6:	fba0 1202 	umull	r1, r2, r0, r2
 8007cca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ccc:	460a      	mov	r2, r1
 8007cce:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007cd0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007cd2:	4413      	add	r3, r2
 8007cd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cd8:	2200      	movs	r2, #0
 8007cda:	61bb      	str	r3, [r7, #24]
 8007cdc:	61fa      	str	r2, [r7, #28]
 8007cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ce2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007ce6:	f7f8 fae3 	bl	80002b0 <__aeabi_uldivmod>
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4613      	mov	r3, r2
 8007cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007cf2:	e053      	b.n	8007d9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cf4:	4b35      	ldr	r3, [pc, #212]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007cf6:	685b      	ldr	r3, [r3, #4]
 8007cf8:	099b      	lsrs	r3, r3, #6
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	613b      	str	r3, [r7, #16]
 8007cfe:	617a      	str	r2, [r7, #20]
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007d06:	f04f 0b00 	mov.w	fp, #0
 8007d0a:	4652      	mov	r2, sl
 8007d0c:	465b      	mov	r3, fp
 8007d0e:	f04f 0000 	mov.w	r0, #0
 8007d12:	f04f 0100 	mov.w	r1, #0
 8007d16:	0159      	lsls	r1, r3, #5
 8007d18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d1c:	0150      	lsls	r0, r2, #5
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	ebb2 080a 	subs.w	r8, r2, sl
 8007d26:	eb63 090b 	sbc.w	r9, r3, fp
 8007d2a:	f04f 0200 	mov.w	r2, #0
 8007d2e:	f04f 0300 	mov.w	r3, #0
 8007d32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007d36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007d3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007d3e:	ebb2 0408 	subs.w	r4, r2, r8
 8007d42:	eb63 0509 	sbc.w	r5, r3, r9
 8007d46:	f04f 0200 	mov.w	r2, #0
 8007d4a:	f04f 0300 	mov.w	r3, #0
 8007d4e:	00eb      	lsls	r3, r5, #3
 8007d50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007d54:	00e2      	lsls	r2, r4, #3
 8007d56:	4614      	mov	r4, r2
 8007d58:	461d      	mov	r5, r3
 8007d5a:	eb14 030a 	adds.w	r3, r4, sl
 8007d5e:	603b      	str	r3, [r7, #0]
 8007d60:	eb45 030b 	adc.w	r3, r5, fp
 8007d64:	607b      	str	r3, [r7, #4]
 8007d66:	f04f 0200 	mov.w	r2, #0
 8007d6a:	f04f 0300 	mov.w	r3, #0
 8007d6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007d72:	4629      	mov	r1, r5
 8007d74:	028b      	lsls	r3, r1, #10
 8007d76:	4621      	mov	r1, r4
 8007d78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007d7c:	4621      	mov	r1, r4
 8007d7e:	028a      	lsls	r2, r1, #10
 8007d80:	4610      	mov	r0, r2
 8007d82:	4619      	mov	r1, r3
 8007d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d86:	2200      	movs	r2, #0
 8007d88:	60bb      	str	r3, [r7, #8]
 8007d8a:	60fa      	str	r2, [r7, #12]
 8007d8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007d90:	f7f8 fa8e 	bl	80002b0 <__aeabi_uldivmod>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4613      	mov	r3, r2
 8007d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007d9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007dcc <HAL_RCC_GetSysClockFreq+0x180>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	0c1b      	lsrs	r3, r3, #16
 8007da2:	f003 0303 	and.w	r3, r3, #3
 8007da6:	3301      	adds	r3, #1
 8007da8:	005b      	lsls	r3, r3, #1
 8007daa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007dac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007db6:	e002      	b.n	8007dbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007db8:	4b05      	ldr	r3, [pc, #20]	@ (8007dd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007dba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007dbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3740      	adds	r7, #64	@ 0x40
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007dca:	bf00      	nop
 8007dcc:	40023800 	.word	0x40023800
 8007dd0:	00f42400 	.word	0x00f42400
 8007dd4:	017d7840 	.word	0x017d7840

08007dd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ddc:	4b03      	ldr	r3, [pc, #12]	@ (8007dec <HAL_RCC_GetHCLKFreq+0x14>)
 8007dde:	681b      	ldr	r3, [r3, #0]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	20000034 	.word	0x20000034

08007df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007df4:	f7ff fff0 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	4b05      	ldr	r3, [pc, #20]	@ (8007e10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	0a9b      	lsrs	r3, r3, #10
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	4903      	ldr	r1, [pc, #12]	@ (8007e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e06:	5ccb      	ldrb	r3, [r1, r3]
 8007e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	bd80      	pop	{r7, pc}
 8007e10:	40023800 	.word	0x40023800
 8007e14:	08014628 	.word	0x08014628

08007e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007e1c:	f7ff ffdc 	bl	8007dd8 <HAL_RCC_GetHCLKFreq>
 8007e20:	4602      	mov	r2, r0
 8007e22:	4b05      	ldr	r3, [pc, #20]	@ (8007e38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	0b5b      	lsrs	r3, r3, #13
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	4903      	ldr	r1, [pc, #12]	@ (8007e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e2e:	5ccb      	ldrb	r3, [r1, r3]
 8007e30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	40023800 	.word	0x40023800
 8007e3c:	08014628 	.word	0x08014628

08007e40 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	220f      	movs	r2, #15
 8007e4e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007e50:	4b12      	ldr	r3, [pc, #72]	@ (8007e9c <HAL_RCC_GetClockConfig+0x5c>)
 8007e52:	689b      	ldr	r3, [r3, #8]
 8007e54:	f003 0203 	and.w	r2, r3, #3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8007e9c <HAL_RCC_GetClockConfig+0x5c>)
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007e68:	4b0c      	ldr	r3, [pc, #48]	@ (8007e9c <HAL_RCC_GetClockConfig+0x5c>)
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007e74:	4b09      	ldr	r3, [pc, #36]	@ (8007e9c <HAL_RCC_GetClockConfig+0x5c>)
 8007e76:	689b      	ldr	r3, [r3, #8]
 8007e78:	08db      	lsrs	r3, r3, #3
 8007e7a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007e82:	4b07      	ldr	r3, [pc, #28]	@ (8007ea0 <HAL_RCC_GetClockConfig+0x60>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f003 020f 	and.w	r2, r3, #15
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	601a      	str	r2, [r3, #0]
}
 8007e8e:	bf00      	nop
 8007e90:	370c      	adds	r7, #12
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	40023800 	.word	0x40023800
 8007ea0:	40023c00 	.word	0x40023c00

08007ea4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b088      	sub	sp, #32
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007eac:	2300      	movs	r3, #0
 8007eae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d012      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ecc:	4b69      	ldr	r3, [pc, #420]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	4a68      	ldr	r2, [pc, #416]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ed2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007ed6:	6093      	str	r3, [r2, #8]
 8007ed8:	4b66      	ldr	r3, [pc, #408]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007eda:	689a      	ldr	r2, [r3, #8]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ee0:	4964      	ldr	r1, [pc, #400]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d017      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007efe:	4b5d      	ldr	r3, [pc, #372]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f04:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f0c:	4959      	ldr	r1, [pc, #356]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f1c:	d101      	bne.n	8007f22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007f1e:	2301      	movs	r3, #1
 8007f20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d017      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007f3a:	4b4e      	ldr	r3, [pc, #312]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f40:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f48:	494a      	ldr	r1, [pc, #296]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007f58:	d101      	bne.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d101      	bne.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007f66:	2301      	movs	r3, #1
 8007f68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d001      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007f76:	2301      	movs	r3, #1
 8007f78:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 0320 	and.w	r3, r3, #32
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f000 808b 	beq.w	800809e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f88:	4b3a      	ldr	r3, [pc, #232]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8c:	4a39      	ldr	r2, [pc, #228]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8007f94:	4b37      	ldr	r3, [pc, #220]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f9c:	60bb      	str	r3, [r7, #8]
 8007f9e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fa0:	4b35      	ldr	r3, [pc, #212]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a34      	ldr	r2, [pc, #208]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fac:	f7fc fac2 	bl	8004534 <HAL_GetTick>
 8007fb0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fb4:	f7fc fabe 	bl	8004534 <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b64      	cmp	r3, #100	@ 0x64
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e357      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007fc6:	4b2c      	ldr	r3, [pc, #176]	@ (8008078 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f0      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007fd2:	4b28      	ldr	r3, [pc, #160]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fda:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d035      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d02e      	beq.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ff0:	4b20      	ldr	r3, [pc, #128]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ff8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ffe:	4a1d      	ldr	r2, [pc, #116]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008000:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008004:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008006:	4b1b      	ldr	r3, [pc, #108]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008008:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800800a:	4a1a      	ldr	r2, [pc, #104]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800800c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008010:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008012:	4a18      	ldr	r2, [pc, #96]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008018:	4b16      	ldr	r3, [pc, #88]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800801a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b01      	cmp	r3, #1
 8008022:	d114      	bne.n	800804e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008024:	f7fc fa86 	bl	8004534 <HAL_GetTick>
 8008028:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800802a:	e00a      	b.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800802c:	f7fc fa82 	bl	8004534 <HAL_GetTick>
 8008030:	4602      	mov	r2, r0
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	1ad3      	subs	r3, r2, r3
 8008036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800803a:	4293      	cmp	r3, r2
 800803c:	d901      	bls.n	8008042 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e319      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008042:	4b0c      	ldr	r3, [pc, #48]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008046:	f003 0302 	and.w	r3, r3, #2
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0ee      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008052:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008056:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800805a:	d111      	bne.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800805c:	4b05      	ldr	r3, [pc, #20]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008068:	4b04      	ldr	r3, [pc, #16]	@ (800807c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800806a:	400b      	ands	r3, r1
 800806c:	4901      	ldr	r1, [pc, #4]	@ (8008074 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800806e:	4313      	orrs	r3, r2
 8008070:	608b      	str	r3, [r1, #8]
 8008072:	e00b      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008074:	40023800 	.word	0x40023800
 8008078:	40007000 	.word	0x40007000
 800807c:	0ffffcff 	.word	0x0ffffcff
 8008080:	4baa      	ldr	r3, [pc, #680]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	4aa9      	ldr	r2, [pc, #676]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008086:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800808a:	6093      	str	r3, [r2, #8]
 800808c:	4ba7      	ldr	r3, [pc, #668]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800808e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008094:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008098:	49a4      	ldr	r1, [pc, #656]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800809a:	4313      	orrs	r3, r2
 800809c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0310 	and.w	r3, r3, #16
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d010      	beq.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080aa:	4ba0      	ldr	r3, [pc, #640]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080b0:	4a9e      	ldr	r2, [pc, #632]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080b6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80080ba:	4b9c      	ldr	r3, [pc, #624]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080bc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c4:	4999      	ldr	r1, [pc, #612]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080c6:	4313      	orrs	r3, r2
 80080c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00a      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80080d8:	4b94      	ldr	r3, [pc, #592]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80080de:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080e6:	4991      	ldr	r1, [pc, #580]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d00a      	beq.n	8008110 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80080fa:	4b8c      	ldr	r3, [pc, #560]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008100:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008108:	4988      	ldr	r1, [pc, #544]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800810a:	4313      	orrs	r3, r2
 800810c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008118:	2b00      	cmp	r3, #0
 800811a:	d00a      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800811c:	4b83      	ldr	r3, [pc, #524]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800811e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008122:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800812a:	4980      	ldr	r1, [pc, #512]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800812c:	4313      	orrs	r3, r2
 800812e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00a      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800813e:	4b7b      	ldr	r3, [pc, #492]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008144:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800814c:	4977      	ldr	r1, [pc, #476]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800814e:	4313      	orrs	r3, r2
 8008150:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00a      	beq.n	8008176 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008160:	4b72      	ldr	r3, [pc, #456]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008162:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008166:	f023 0203 	bic.w	r2, r3, #3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800816e:	496f      	ldr	r1, [pc, #444]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008170:	4313      	orrs	r3, r2
 8008172:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00a      	beq.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008182:	4b6a      	ldr	r3, [pc, #424]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008188:	f023 020c 	bic.w	r2, r3, #12
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008190:	4966      	ldr	r1, [pc, #408]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008192:	4313      	orrs	r3, r2
 8008194:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00a      	beq.n	80081ba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081a4:	4b61      	ldr	r3, [pc, #388]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081aa:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80081b2:	495e      	ldr	r1, [pc, #376]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081b4:	4313      	orrs	r3, r2
 80081b6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00a      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081c6:	4b59      	ldr	r3, [pc, #356]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081cc:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081d4:	4955      	ldr	r1, [pc, #340]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d00a      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80081e8:	4b50      	ldr	r3, [pc, #320]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ee:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f6:	494d      	ldr	r1, [pc, #308]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081f8:	4313      	orrs	r3, r2
 80081fa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800820a:	4b48      	ldr	r3, [pc, #288]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800820c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008210:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008218:	4944      	ldr	r1, [pc, #272]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008228:	2b00      	cmp	r3, #0
 800822a:	d00a      	beq.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800822c:	4b3f      	ldr	r3, [pc, #252]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800822e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008232:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800823a:	493c      	ldr	r1, [pc, #240]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800823c:	4313      	orrs	r3, r2
 800823e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00a      	beq.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800824e:	4b37      	ldr	r3, [pc, #220]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008254:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800825c:	4933      	ldr	r1, [pc, #204]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800825e:	4313      	orrs	r3, r2
 8008260:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008270:	4b2e      	ldr	r3, [pc, #184]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008272:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008276:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800827e:	492b      	ldr	r1, [pc, #172]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008280:	4313      	orrs	r3, r2
 8008282:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d011      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008292:	4b26      	ldr	r3, [pc, #152]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008298:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082a0:	4922      	ldr	r1, [pc, #136]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80082ac:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80082b0:	d101      	bne.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80082b2:	2301      	movs	r3, #1
 80082b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f003 0308 	and.w	r3, r3, #8
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d001      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80082c2:	2301      	movs	r3, #1
 80082c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d00a      	beq.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082d2:	4b16      	ldr	r3, [pc, #88]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082d8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082e0:	4912      	ldr	r1, [pc, #72]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082e2:	4313      	orrs	r3, r2
 80082e4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00b      	beq.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80082f4:	4b0d      	ldr	r3, [pc, #52]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082fa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008304:	4909      	ldr	r1, [pc, #36]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008306:	4313      	orrs	r3, r2
 8008308:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	2b01      	cmp	r3, #1
 8008310:	d006      	beq.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 80d9 	beq.w	80084d2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008320:	4b02      	ldr	r3, [pc, #8]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a01      	ldr	r2, [pc, #4]	@ (800832c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008326:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800832a:	e001      	b.n	8008330 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800832c:	40023800 	.word	0x40023800
 8008330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008332:	f7fc f8ff 	bl	8004534 <HAL_GetTick>
 8008336:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008338:	e008      	b.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800833a:	f7fc f8fb 	bl	8004534 <HAL_GetTick>
 800833e:	4602      	mov	r2, r0
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	1ad3      	subs	r3, r2, r3
 8008344:	2b64      	cmp	r3, #100	@ 0x64
 8008346:	d901      	bls.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008348:	2303      	movs	r3, #3
 800834a:	e194      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800834c:	4b6c      	ldr	r3, [pc, #432]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008354:	2b00      	cmp	r3, #0
 8008356:	d1f0      	bne.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f003 0301 	and.w	r3, r3, #1
 8008360:	2b00      	cmp	r3, #0
 8008362:	d021      	beq.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008368:	2b00      	cmp	r3, #0
 800836a:	d11d      	bne.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800836c:	4b64      	ldr	r3, [pc, #400]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800836e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008372:	0c1b      	lsrs	r3, r3, #16
 8008374:	f003 0303 	and.w	r3, r3, #3
 8008378:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800837a:	4b61      	ldr	r3, [pc, #388]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800837c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008380:	0e1b      	lsrs	r3, r3, #24
 8008382:	f003 030f 	and.w	r3, r3, #15
 8008386:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	019a      	lsls	r2, r3, #6
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	041b      	lsls	r3, r3, #16
 8008392:	431a      	orrs	r2, r3
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	061b      	lsls	r3, r3, #24
 8008398:	431a      	orrs	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	071b      	lsls	r3, r3, #28
 80083a0:	4957      	ldr	r1, [pc, #348]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d004      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083b8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083bc:	d00a      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d02e      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083d2:	d129      	bne.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80083d4:	4b4a      	ldr	r3, [pc, #296]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083da:	0c1b      	lsrs	r3, r3, #16
 80083dc:	f003 0303 	and.w	r3, r3, #3
 80083e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80083e2:	4b47      	ldr	r3, [pc, #284]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80083e8:	0f1b      	lsrs	r3, r3, #28
 80083ea:	f003 0307 	and.w	r3, r3, #7
 80083ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	019a      	lsls	r2, r3, #6
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	041b      	lsls	r3, r3, #16
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	68db      	ldr	r3, [r3, #12]
 8008400:	061b      	lsls	r3, r3, #24
 8008402:	431a      	orrs	r2, r3
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	071b      	lsls	r3, r3, #28
 8008408:	493d      	ldr	r1, [pc, #244]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800840a:	4313      	orrs	r3, r2
 800840c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008410:	4b3b      	ldr	r3, [pc, #236]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008412:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008416:	f023 021f 	bic.w	r2, r3, #31
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800841e:	3b01      	subs	r3, #1
 8008420:	4937      	ldr	r1, [pc, #220]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008422:	4313      	orrs	r3, r2
 8008424:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d01d      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008434:	4b32      	ldr	r3, [pc, #200]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800843a:	0e1b      	lsrs	r3, r3, #24
 800843c:	f003 030f 	and.w	r3, r3, #15
 8008440:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008442:	4b2f      	ldr	r3, [pc, #188]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008448:	0f1b      	lsrs	r3, r3, #28
 800844a:	f003 0307 	and.w	r3, r3, #7
 800844e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	019a      	lsls	r2, r3, #6
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	691b      	ldr	r3, [r3, #16]
 800845a:	041b      	lsls	r3, r3, #16
 800845c:	431a      	orrs	r2, r3
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	061b      	lsls	r3, r3, #24
 8008462:	431a      	orrs	r2, r3
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	071b      	lsls	r3, r3, #28
 8008468:	4925      	ldr	r1, [pc, #148]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800846a:	4313      	orrs	r3, r2
 800846c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d011      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	019a      	lsls	r2, r3, #6
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	041b      	lsls	r3, r3, #16
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	061b      	lsls	r3, r3, #24
 8008490:	431a      	orrs	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	689b      	ldr	r3, [r3, #8]
 8008496:	071b      	lsls	r3, r3, #28
 8008498:	4919      	ldr	r1, [pc, #100]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800849a:	4313      	orrs	r3, r2
 800849c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084a0:	4b17      	ldr	r3, [pc, #92]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a16      	ldr	r2, [pc, #88]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084a6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80084aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ac:	f7fc f842 	bl	8004534 <HAL_GetTick>
 80084b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084b2:	e008      	b.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084b4:	f7fc f83e 	bl	8004534 <HAL_GetTick>
 80084b8:	4602      	mov	r2, r0
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	1ad3      	subs	r3, r2, r3
 80084be:	2b64      	cmp	r3, #100	@ 0x64
 80084c0:	d901      	bls.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084c2:	2303      	movs	r3, #3
 80084c4:	e0d7      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084c6:	4b0e      	ldr	r3, [pc, #56]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d0f0      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	f040 80cd 	bne.w	8008674 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80084da:	4b09      	ldr	r3, [pc, #36]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a08      	ldr	r2, [pc, #32]	@ (8008500 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80084e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084e6:	f7fc f825 	bl	8004534 <HAL_GetTick>
 80084ea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80084ec:	e00a      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80084ee:	f7fc f821 	bl	8004534 <HAL_GetTick>
 80084f2:	4602      	mov	r2, r0
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	2b64      	cmp	r3, #100	@ 0x64
 80084fa:	d903      	bls.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084fc:	2303      	movs	r3, #3
 80084fe:	e0ba      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008500:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008504:	4b5e      	ldr	r3, [pc, #376]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800850c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008510:	d0ed      	beq.n	80084ee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800851a:	2b00      	cmp	r3, #0
 800851c:	d003      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d009      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800852e:	2b00      	cmp	r3, #0
 8008530:	d02e      	beq.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008536:	2b00      	cmp	r3, #0
 8008538:	d12a      	bne.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800853a:	4b51      	ldr	r3, [pc, #324]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800853c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008540:	0c1b      	lsrs	r3, r3, #16
 8008542:	f003 0303 	and.w	r3, r3, #3
 8008546:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008548:	4b4d      	ldr	r3, [pc, #308]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800854a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800854e:	0f1b      	lsrs	r3, r3, #28
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	695b      	ldr	r3, [r3, #20]
 800855a:	019a      	lsls	r2, r3, #6
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	041b      	lsls	r3, r3, #16
 8008560:	431a      	orrs	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	699b      	ldr	r3, [r3, #24]
 8008566:	061b      	lsls	r3, r3, #24
 8008568:	431a      	orrs	r2, r3
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	071b      	lsls	r3, r3, #28
 800856e:	4944      	ldr	r1, [pc, #272]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008570:	4313      	orrs	r3, r2
 8008572:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008576:	4b42      	ldr	r3, [pc, #264]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800857c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008584:	3b01      	subs	r3, #1
 8008586:	021b      	lsls	r3, r3, #8
 8008588:	493d      	ldr	r1, [pc, #244]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800858a:	4313      	orrs	r3, r2
 800858c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008598:	2b00      	cmp	r3, #0
 800859a:	d022      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80085a4:	d11d      	bne.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085a6:	4b36      	ldr	r3, [pc, #216]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ac:	0e1b      	lsrs	r3, r3, #24
 80085ae:	f003 030f 	and.w	r3, r3, #15
 80085b2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085b4:	4b32      	ldr	r3, [pc, #200]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085ba:	0f1b      	lsrs	r3, r3, #28
 80085bc:	f003 0307 	and.w	r3, r3, #7
 80085c0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	695b      	ldr	r3, [r3, #20]
 80085c6:	019a      	lsls	r2, r3, #6
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	041b      	lsls	r3, r3, #16
 80085ce:	431a      	orrs	r2, r3
 80085d0:	693b      	ldr	r3, [r7, #16]
 80085d2:	061b      	lsls	r3, r3, #24
 80085d4:	431a      	orrs	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	071b      	lsls	r3, r3, #28
 80085da:	4929      	ldr	r1, [pc, #164]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0308 	and.w	r3, r3, #8
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d028      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085ee:	4b24      	ldr	r3, [pc, #144]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80085f4:	0e1b      	lsrs	r3, r3, #24
 80085f6:	f003 030f 	and.w	r3, r3, #15
 80085fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80085fc:	4b20      	ldr	r3, [pc, #128]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008602:	0c1b      	lsrs	r3, r3, #16
 8008604:	f003 0303 	and.w	r3, r3, #3
 8008608:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	019a      	lsls	r2, r3, #6
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	041b      	lsls	r3, r3, #16
 8008614:	431a      	orrs	r2, r3
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	061b      	lsls	r3, r3, #24
 800861a:	431a      	orrs	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	69db      	ldr	r3, [r3, #28]
 8008620:	071b      	lsls	r3, r3, #28
 8008622:	4917      	ldr	r1, [pc, #92]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008624:	4313      	orrs	r3, r2
 8008626:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800862a:	4b15      	ldr	r3, [pc, #84]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800862c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008630:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008638:	4911      	ldr	r1, [pc, #68]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800863a:	4313      	orrs	r3, r2
 800863c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008640:	4b0f      	ldr	r3, [pc, #60]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a0e      	ldr	r2, [pc, #56]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800864a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800864c:	f7fb ff72 	bl	8004534 <HAL_GetTick>
 8008650:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008652:	e008      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008654:	f7fb ff6e 	bl	8004534 <HAL_GetTick>
 8008658:	4602      	mov	r2, r0
 800865a:	697b      	ldr	r3, [r7, #20]
 800865c:	1ad3      	subs	r3, r2, r3
 800865e:	2b64      	cmp	r3, #100	@ 0x64
 8008660:	d901      	bls.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e007      	b.n	8008676 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008666:	4b06      	ldr	r3, [pc, #24]	@ (8008680 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800866e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008672:	d1ef      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008674:	2300      	movs	r3, #0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3720      	adds	r7, #32
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	40023800 	.word	0x40023800

08008684 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800868c:	2301      	movs	r3, #1
 800868e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e071      	b.n	800877e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	7f5b      	ldrb	r3, [r3, #29]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d105      	bne.n	80086b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f7f9 fdb6 	bl	800221c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2202      	movs	r2, #2
 80086b4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f003 0310 	and.w	r3, r3, #16
 80086c0:	2b10      	cmp	r3, #16
 80086c2:	d053      	beq.n	800876c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	22ca      	movs	r2, #202	@ 0xca
 80086ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2253      	movs	r2, #83	@ 0x53
 80086d2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 fac9 	bl	8008c6c <RTC_EnterInitMode>
 80086da:	4603      	mov	r3, r0
 80086dc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80086de:	7bfb      	ldrb	r3, [r7, #15]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d12a      	bne.n	800873a <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6899      	ldr	r1, [r3, #8]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	4b26      	ldr	r3, [pc, #152]	@ (8008788 <HAL_RTC_Init+0x104>)
 80086f0:	400b      	ands	r3, r1
 80086f2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6899      	ldr	r1, [r3, #8]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	685a      	ldr	r2, [r3, #4]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	431a      	orrs	r2, r3
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	431a      	orrs	r2, r3
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	430a      	orrs	r2, r1
 8008710:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	68d2      	ldr	r2, [r2, #12]
 800871a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6919      	ldr	r1, [r3, #16]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	041a      	lsls	r2, r3, #16
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	430a      	orrs	r2, r1
 800872e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fad2 	bl	8008cda <RTC_ExitInitMode>
 8008736:	4603      	mov	r3, r0
 8008738:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800873a:	7bfb      	ldrb	r3, [r7, #15]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d110      	bne.n	8008762 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f022 0208 	bic.w	r2, r2, #8
 800874e:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	22ff      	movs	r2, #255	@ 0xff
 8008768:	625a      	str	r2, [r3, #36]	@ 0x24
 800876a:	e001      	b.n	8008770 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800876c:	2300      	movs	r3, #0
 800876e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d102      	bne.n	800877c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800877c:	7bfb      	ldrb	r3, [r7, #15]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3710      	adds	r7, #16
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	ff8fffbf 	.word	0xff8fffbf

0800878c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800878c:	b590      	push	{r4, r7, lr}
 800878e:	b087      	sub	sp, #28
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	7f1b      	ldrb	r3, [r3, #28]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d101      	bne.n	80087a8 <HAL_RTC_SetTime+0x1c>
 80087a4:	2302      	movs	r3, #2
 80087a6:	e085      	b.n	80088b4 <HAL_RTC_SetTime+0x128>
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2201      	movs	r2, #1
 80087ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2202      	movs	r2, #2
 80087b2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d126      	bne.n	8008808 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d102      	bne.n	80087ce <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2200      	movs	r2, #0
 80087cc:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 faa6 	bl	8008d24 <RTC_ByteToBcd2>
 80087d8:	4603      	mov	r3, r0
 80087da:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	785b      	ldrb	r3, [r3, #1]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f000 fa9f 	bl	8008d24 <RTC_ByteToBcd2>
 80087e6:	4603      	mov	r3, r0
 80087e8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087ea:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	789b      	ldrb	r3, [r3, #2]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f000 fa97 	bl	8008d24 <RTC_ByteToBcd2>
 80087f6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087f8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	78db      	ldrb	r3, [r3, #3]
 8008800:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008802:	4313      	orrs	r3, r2
 8008804:	617b      	str	r3, [r7, #20]
 8008806:	e018      	b.n	800883a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	689b      	ldr	r3, [r3, #8]
 800880e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d102      	bne.n	800881c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	2200      	movs	r2, #0
 800881a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	781b      	ldrb	r3, [r3, #0]
 8008820:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	785b      	ldrb	r3, [r3, #1]
 8008826:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008828:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800882a:	68ba      	ldr	r2, [r7, #8]
 800882c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800882e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	78db      	ldrb	r3, [r3, #3]
 8008834:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	22ca      	movs	r2, #202	@ 0xca
 8008840:	625a      	str	r2, [r3, #36]	@ 0x24
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	2253      	movs	r2, #83	@ 0x53
 8008848:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f000 fa0e 	bl	8008c6c <RTC_EnterInitMode>
 8008850:	4603      	mov	r3, r0
 8008852:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008854:	7cfb      	ldrb	r3, [r7, #19]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d11e      	bne.n	8008898 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681a      	ldr	r2, [r3, #0]
 800885e:	6979      	ldr	r1, [r7, #20]
 8008860:	4b16      	ldr	r3, [pc, #88]	@ (80088bc <HAL_RTC_SetTime+0x130>)
 8008862:	400b      	ands	r3, r1
 8008864:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	689a      	ldr	r2, [r3, #8]
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008874:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6899      	ldr	r1, [r3, #8]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	68da      	ldr	r2, [r3, #12]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	431a      	orrs	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	430a      	orrs	r2, r1
 800888c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 fa23 	bl	8008cda <RTC_ExitInitMode>
 8008894:	4603      	mov	r3, r0
 8008896:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008898:	7cfb      	ldrb	r3, [r7, #19]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d102      	bne.n	80088a4 <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2201      	movs	r2, #1
 80088a2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	22ff      	movs	r2, #255	@ 0xff
 80088aa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	771a      	strb	r2, [r3, #28]

  return status;
 80088b2:	7cfb      	ldrb	r3, [r7, #19]
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	371c      	adds	r7, #28
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd90      	pop	{r4, r7, pc}
 80088bc:	007f7f7f 	.word	0x007f7f7f

080088c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80088c0:	b590      	push	{r4, r7, lr}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	7f1b      	ldrb	r3, [r3, #28]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d101      	bne.n	80088dc <HAL_RTC_SetDate+0x1c>
 80088d8:	2302      	movs	r3, #2
 80088da:	e06f      	b.n	80089bc <HAL_RTC_SetDate+0xfc>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	2201      	movs	r2, #1
 80088e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	2202      	movs	r2, #2
 80088e6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10e      	bne.n	800890c <HAL_RTC_SetDate+0x4c>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	785b      	ldrb	r3, [r3, #1]
 80088f2:	f003 0310 	and.w	r3, r3, #16
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d008      	beq.n	800890c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	785b      	ldrb	r3, [r3, #1]
 80088fe:	f023 0310 	bic.w	r3, r3, #16
 8008902:	b2db      	uxtb	r3, r3
 8008904:	330a      	adds	r3, #10
 8008906:	b2da      	uxtb	r2, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d11c      	bne.n	800894c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	78db      	ldrb	r3, [r3, #3]
 8008916:	4618      	mov	r0, r3
 8008918:	f000 fa04 	bl	8008d24 <RTC_ByteToBcd2>
 800891c:	4603      	mov	r3, r0
 800891e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	785b      	ldrb	r3, [r3, #1]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 f9fd 	bl	8008d24 <RTC_ByteToBcd2>
 800892a:	4603      	mov	r3, r0
 800892c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800892e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	789b      	ldrb	r3, [r3, #2]
 8008934:	4618      	mov	r0, r3
 8008936:	f000 f9f5 	bl	8008d24 <RTC_ByteToBcd2>
 800893a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800893c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008946:	4313      	orrs	r3, r2
 8008948:	617b      	str	r3, [r7, #20]
 800894a:	e00e      	b.n	800896a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	78db      	ldrb	r3, [r3, #3]
 8008950:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	785b      	ldrb	r3, [r3, #1]
 8008956:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008958:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800895a:	68ba      	ldr	r2, [r7, #8]
 800895c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800895e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008966:	4313      	orrs	r3, r2
 8008968:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	22ca      	movs	r2, #202	@ 0xca
 8008970:	625a      	str	r2, [r3, #36]	@ 0x24
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	2253      	movs	r2, #83	@ 0x53
 8008978:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 f976 	bl	8008c6c <RTC_EnterInitMode>
 8008980:	4603      	mov	r3, r0
 8008982:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008984:	7cfb      	ldrb	r3, [r7, #19]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d10a      	bne.n	80089a0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	6979      	ldr	r1, [r7, #20]
 8008990:	4b0c      	ldr	r3, [pc, #48]	@ (80089c4 <HAL_RTC_SetDate+0x104>)
 8008992:	400b      	ands	r3, r1
 8008994:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f000 f99f 	bl	8008cda <RTC_ExitInitMode>
 800899c:	4603      	mov	r3, r0
 800899e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80089a0:	7cfb      	ldrb	r3, [r7, #19]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d102      	bne.n	80089ac <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	22ff      	movs	r2, #255	@ 0xff
 80089b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	771a      	strb	r2, [r3, #28]

  return status;
 80089ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80089bc:	4618      	mov	r0, r3
 80089be:	371c      	adds	r7, #28
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd90      	pop	{r4, r7, pc}
 80089c4:	00ffff3f 	.word	0x00ffff3f

080089c8 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80089c8:	b590      	push	{r4, r7, lr}
 80089ca:	b089      	sub	sp, #36	@ 0x24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80089d4:	2300      	movs	r3, #0
 80089d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	7f1b      	ldrb	r3, [r3, #28]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d101      	bne.n	80089ec <HAL_RTC_SetAlarm+0x24>
 80089e8:	2302      	movs	r3, #2
 80089ea:	e113      	b.n	8008c14 <HAL_RTC_SetAlarm+0x24c>
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2201      	movs	r2, #1
 80089f0:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2202      	movs	r2, #2
 80089f6:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d137      	bne.n	8008a6e <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d102      	bne.n	8008a12 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	781b      	ldrb	r3, [r3, #0]
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 f984 	bl	8008d24 <RTC_ByteToBcd2>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	785b      	ldrb	r3, [r3, #1]
 8008a24:	4618      	mov	r0, r3
 8008a26:	f000 f97d 	bl	8008d24 <RTC_ByteToBcd2>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008a2e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	789b      	ldrb	r3, [r3, #2]
 8008a34:	4618      	mov	r0, r3
 8008a36:	f000 f975 	bl	8008d24 <RTC_ByteToBcd2>
 8008a3a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008a3c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	78db      	ldrb	r3, [r3, #3]
 8008a44:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008a46:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 f967 	bl	8008d24 <RTC_ByteToBcd2>
 8008a56:	4603      	mov	r3, r0
 8008a58:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008a5a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008a62:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	61fb      	str	r3, [r7, #28]
 8008a6c:	e023      	b.n	8008ab6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d102      	bne.n	8008a82 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008a8e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008a94:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	78db      	ldrb	r3, [r3, #3]
 8008a9a:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008a9c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008aa4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008aa6:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008aac:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	22ca      	movs	r2, #202	@ 0xca
 8008ac8:	625a      	str	r2, [r3, #36]	@ 0x24
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2253      	movs	r2, #83	@ 0x53
 8008ad0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ada:	d148      	bne.n	8008b6e <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008aea:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008afa:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68db      	ldr	r3, [r3, #12]
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8008b0c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b0e:	f7fb fd11 	bl	8004534 <HAL_GetTick>
 8008b12:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008b14:	e013      	b.n	8008b3e <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b16:	f7fb fd0d 	bl	8004534 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b24:	d90b      	bls.n	8008b3e <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	22ff      	movs	r2, #255	@ 0xff
 8008b2c:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2203      	movs	r2, #3
 8008b32:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e06a      	b.n	8008c14 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d0e4      	beq.n	8008b16 <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	697a      	ldr	r2, [r7, #20]
 8008b5a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b6a:	609a      	str	r2, [r3, #8]
 8008b6c:	e047      	b.n	8008bfe <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	689a      	ldr	r2, [r3, #8]
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008b7c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	689a      	ldr	r2, [r3, #8]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b8c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	b2da      	uxtb	r2, r3
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8008b9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008ba0:	f7fb fcc8 	bl	8004534 <HAL_GetTick>
 8008ba4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008ba6:	e013      	b.n	8008bd0 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008ba8:	f7fb fcc4 	bl	8004534 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008bb6:	d90b      	bls.n	8008bd0 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	22ff      	movs	r2, #255	@ 0xff
 8008bbe:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2203      	movs	r2, #3
 8008bc4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008bcc:	2303      	movs	r3, #3
 8008bce:	e021      	b.n	8008c14 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	f003 0302 	and.w	r3, r3, #2
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d0e4      	beq.n	8008ba8 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	69fa      	ldr	r2, [r7, #28]
 8008be4:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	697a      	ldr	r2, [r7, #20]
 8008bec:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	689a      	ldr	r2, [r3, #8]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bfc:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	22ff      	movs	r2, #255	@ 0xff
 8008c04:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2201      	movs	r2, #1
 8008c0a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3724      	adds	r7, #36	@ 0x24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd90      	pop	{r4, r7, pc}

08008c1c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c24:	2300      	movs	r3, #0
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008c36:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c38:	f7fb fc7c 	bl	8004534 <HAL_GetTick>
 8008c3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008c3e:	e009      	b.n	8008c54 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008c40:	f7fb fc78 	bl	8004534 <HAL_GetTick>
 8008c44:	4602      	mov	r2, r0
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	1ad3      	subs	r3, r2, r3
 8008c4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c4e:	d901      	bls.n	8008c54 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e007      	b.n	8008c64 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f003 0320 	and.w	r3, r3, #32
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d0ee      	beq.n	8008c40 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3710      	adds	r7, #16
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c74:	2300      	movs	r3, #0
 8008c76:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68db      	ldr	r3, [r3, #12]
 8008c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d122      	bne.n	8008cd0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	68da      	ldr	r2, [r3, #12]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008c98:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c9a:	f7fb fc4b 	bl	8004534 <HAL_GetTick>
 8008c9e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008ca0:	e00c      	b.n	8008cbc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008ca2:	f7fb fc47 	bl	8004534 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008cb0:	d904      	bls.n	8008cbc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2204      	movs	r2, #4
 8008cb6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008cb8:	2301      	movs	r3, #1
 8008cba:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d102      	bne.n	8008cd0 <RTC_EnterInitMode+0x64>
 8008cca:	7bfb      	ldrb	r3, [r7, #15]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d1e8      	bne.n	8008ca2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68da      	ldr	r2, [r3, #12]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008cf4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d10a      	bne.n	8008d1a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f7ff ff89 	bl	8008c1c <HAL_RTC_WaitForSynchro>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d004      	beq.n	8008d1a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2204      	movs	r2, #4
 8008d14:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b085      	sub	sp, #20
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008d32:	e005      	b.n	8008d40 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	3301      	adds	r3, #1
 8008d38:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008d3a:	79fb      	ldrb	r3, [r7, #7]
 8008d3c:	3b0a      	subs	r3, #10
 8008d3e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	2b09      	cmp	r3, #9
 8008d44:	d8f6      	bhi.n	8008d34 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	011b      	lsls	r3, r3, #4
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	79fb      	ldrb	r3, [r7, #7]
 8008d50:	4313      	orrs	r3, r2
 8008d52:	b2db      	uxtb	r3, r3
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	60f8      	str	r0, [r7, #12]
 8008d68:	60b9      	str	r1, [r7, #8]
 8008d6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	7f1b      	ldrb	r3, [r3, #28]
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d101      	bne.n	8008d7c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008d78:	2302      	movs	r3, #2
 8008d7a:	e050      	b.n	8008e1e <HAL_RTCEx_SetTimeStamp+0xbe>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	2201      	movs	r2, #1
 8008d80:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2202      	movs	r2, #2
 8008d86:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f022 0206 	bic.w	r2, r2, #6
 8008d96:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	430a      	orrs	r2, r1
 8008da6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689a      	ldr	r2, [r3, #8]
 8008dae:	4b1f      	ldr	r3, [pc, #124]	@ (8008e2c <HAL_RTCEx_SetTimeStamp+0xcc>)
 8008db0:	4013      	ands	r3, r2
 8008db2:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8008db4:	697a      	ldr	r2, [r7, #20]
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	4313      	orrs	r3, r2
 8008dba:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	22ca      	movs	r2, #202	@ 0xca
 8008dc2:	625a      	str	r2, [r3, #36]	@ 0x24
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	2253      	movs	r2, #83	@ 0x53
 8008dca:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68db      	ldr	r3, [r3, #12]
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8008de4:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8008df6:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689a      	ldr	r2, [r3, #8]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e06:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	22ff      	movs	r2, #255	@ 0xff
 8008e0e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2201      	movs	r2, #1
 8008e14:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	371c      	adds	r7, #28
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	fffff7f7 	.word	0xfffff7f7

08008e30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e022      	b.n	8008e88 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d105      	bne.n	8008e5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7f9 fa2f 	bl	80022b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2203      	movs	r2, #3
 8008e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 f814 	bl	8008e90 <HAL_SD_InitCard>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e00a      	b.n	8008e88 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008e90:	b5b0      	push	{r4, r5, r7, lr}
 8008e92:	b08e      	sub	sp, #56	@ 0x38
 8008e94:	af04      	add	r7, sp, #16
 8008e96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008eac:	2376      	movs	r3, #118	@ 0x76
 8008eae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681d      	ldr	r5, [r3, #0]
 8008eb4:	466c      	mov	r4, sp
 8008eb6:	f107 0314 	add.w	r3, r7, #20
 8008eba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ebe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ec2:	f107 0308 	add.w	r3, r7, #8
 8008ec6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ec8:	4628      	mov	r0, r5
 8008eca:	f003 f831 	bl	800bf30 <SDMMC_Init>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8008ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e059      	b.n	8008f94 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008eee:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f003 f847 	bl	800bf88 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008f08:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8008f0a:	2002      	movs	r0, #2
 8008f0c:	f7fb fb1e 	bl	800454c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f000 fd75 	bl	8009a00 <SD_PowerON>
 8008f16:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d00b      	beq.n	8008f36 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f2a:	6a3b      	ldr	r3, [r7, #32]
 8008f2c:	431a      	orrs	r2, r3
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e02e      	b.n	8008f94 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 fc94 	bl	8009864 <SD_InitCard>
 8008f3c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d00b      	beq.n	8008f5c <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f50:	6a3b      	ldr	r3, [r7, #32]
 8008f52:	431a      	orrs	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	e01b      	b.n	8008f94 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8008f64:	4618      	mov	r0, r3
 8008f66:	f003 f8a1 	bl	800c0ac <SDMMC_CmdBlockLength>
 8008f6a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f6c:	6a3b      	ldr	r3, [r7, #32]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d00f      	beq.n	8008f92 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a09      	ldr	r2, [pc, #36]	@ (8008f9c <HAL_SD_InitCard+0x10c>)
 8008f78:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f7e:	6a3b      	ldr	r3, [r7, #32]
 8008f80:	431a      	orrs	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e000      	b.n	8008f94 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3728      	adds	r7, #40	@ 0x28
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bdb0      	pop	{r4, r5, r7, pc}
 8008f9c:	004005ff 	.word	0x004005ff

08008fa0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b08c      	sub	sp, #48	@ 0x30
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	60f8      	str	r0, [r7, #12]
 8008fa8:	60b9      	str	r1, [r7, #8]
 8008faa:	607a      	str	r2, [r7, #4]
 8008fac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d107      	bne.n	8008fc8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fbc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e0c3      	b.n	8009150 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	f040 80bc 	bne.w	800914e <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	441a      	add	r2, r3
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d907      	bls.n	8008ffa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fee:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e0aa      	b.n	8009150 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	2203      	movs	r2, #3
 8008ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	2200      	movs	r2, #0
 8009008:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009018:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800901e:	4a4e      	ldr	r2, [pc, #312]	@ (8009158 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009020:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009026:	4a4d      	ldr	r2, [pc, #308]	@ (800915c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009028:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800902e:	2200      	movs	r2, #0
 8009030:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009036:	2200      	movs	r2, #0
 8009038:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800904a:	689a      	ldr	r2, [r3, #8]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	430a      	orrs	r2, r1
 8009054:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3380      	adds	r3, #128	@ 0x80
 8009060:	4619      	mov	r1, r3
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	025b      	lsls	r3, r3, #9
 8009068:	089b      	lsrs	r3, r3, #2
 800906a:	f7fb fff5 	bl	8005058 <HAL_DMA_Start_IT>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d017      	beq.n	80090a4 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8009082:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a35      	ldr	r2, [pc, #212]	@ (8009160 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800908a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009090:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	e055      	b.n	8009150 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f042 0208 	orr.w	r2, r2, #8
 80090b2:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d002      	beq.n	80090c2 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80090bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090be:	025b      	lsls	r3, r3, #9
 80090c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80090c2:	f04f 33ff 	mov.w	r3, #4294967295
 80090c6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	025b      	lsls	r3, r3, #9
 80090cc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80090ce:	2390      	movs	r3, #144	@ 0x90
 80090d0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80090d2:	2302      	movs	r3, #2
 80090d4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80090da:	2301      	movs	r3, #1
 80090dc:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f107 0210 	add.w	r2, r7, #16
 80090e6:	4611      	mov	r1, r2
 80090e8:	4618      	mov	r0, r3
 80090ea:	f002 ffb3 	bl	800c054 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d90a      	bls.n	800910a <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2282      	movs	r2, #130	@ 0x82
 80090f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009100:	4618      	mov	r0, r3
 8009102:	f003 f817 	bl	800c134 <SDMMC_CmdReadMultiBlock>
 8009106:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009108:	e009      	b.n	800911e <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2281      	movs	r2, #129	@ 0x81
 800910e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009116:	4618      	mov	r0, r3
 8009118:	f002 ffea 	bl	800c0f0 <SDMMC_CmdReadSingleBlock>
 800911c:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800911e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009120:	2b00      	cmp	r3, #0
 8009122:	d012      	beq.n	800914a <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4a0d      	ldr	r2, [pc, #52]	@ (8009160 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800912a:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009132:	431a      	orrs	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2201      	movs	r2, #1
 800913c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	e002      	b.n	8009150 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800914a:	2300      	movs	r3, #0
 800914c:	e000      	b.n	8009150 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800914e:	2302      	movs	r3, #2
  }
}
 8009150:	4618      	mov	r0, r3
 8009152:	3730      	adds	r7, #48	@ 0x30
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	0800974f 	.word	0x0800974f
 800915c:	080097c1 	.word	0x080097c1
 8009160:	004005ff 	.word	0x004005ff

08009164 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08c      	sub	sp, #48	@ 0x30
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d107      	bne.n	800918c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009180:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009188:	2301      	movs	r3, #1
 800918a:	e0c6      	b.n	800931a <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009192:	b2db      	uxtb	r3, r3
 8009194:	2b01      	cmp	r3, #1
 8009196:	f040 80bf 	bne.w	8009318 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2200      	movs	r2, #0
 800919e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80091a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	441a      	add	r2, r3
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80091aa:	429a      	cmp	r2, r3
 80091ac:	d907      	bls.n	80091be <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e0ad      	b.n	800931a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2203      	movs	r2, #3
 80091c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	2200      	movs	r2, #0
 80091cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f042 021a 	orr.w	r2, r2, #26
 80091dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091e2:	4a50      	ldr	r2, [pc, #320]	@ (8009324 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80091e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091ea:	4a4f      	ldr	r2, [pc, #316]	@ (8009328 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80091ec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091f2:	2200      	movs	r2, #0
 80091f4:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d002      	beq.n	8009204 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80091fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009200:	025b      	lsls	r3, r3, #9
 8009202:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d90a      	bls.n	8009220 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	22a0      	movs	r2, #160	@ 0xa0
 800920e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009216:	4618      	mov	r0, r3
 8009218:	f002 ffd0 	bl	800c1bc <SDMMC_CmdWriteMultiBlock>
 800921c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800921e:	e009      	b.n	8009234 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2290      	movs	r2, #144	@ 0x90
 8009224:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800922c:	4618      	mov	r0, r3
 800922e:	f002 ffa3 	bl	800c178 <SDMMC_CmdWriteSingleBlock>
 8009232:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8009234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009236:	2b00      	cmp	r3, #0
 8009238:	d012      	beq.n	8009260 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a3b      	ldr	r2, [pc, #236]	@ (800932c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009240:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009248:	431a      	orrs	r2, r3
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2201      	movs	r2, #1
 8009252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e05c      	b.n	800931a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f042 0208 	orr.w	r2, r2, #8
 800926e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009274:	2240      	movs	r2, #64	@ 0x40
 8009276:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009288:	689a      	ldr	r2, [r3, #8]
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	430a      	orrs	r2, r1
 8009292:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009298:	68b9      	ldr	r1, [r7, #8]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	3380      	adds	r3, #128	@ 0x80
 80092a0:	461a      	mov	r2, r3
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	025b      	lsls	r3, r3, #9
 80092a6:	089b      	lsrs	r3, r3, #2
 80092a8:	f7fb fed6 	bl	8005058 <HAL_DMA_Start_IT>
 80092ac:	4603      	mov	r3, r0
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d01a      	beq.n	80092e8 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f022 021a 	bic.w	r2, r2, #26
 80092c0:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a19      	ldr	r2, [pc, #100]	@ (800932c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80092c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ce:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	2200      	movs	r2, #0
 80092e2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e018      	b.n	800931a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80092e8:	f04f 33ff 	mov.w	r3, #4294967295
 80092ec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	025b      	lsls	r3, r3, #9
 80092f2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80092f4:	2390      	movs	r3, #144	@ 0x90
 80092f6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80092f8:	2300      	movs	r3, #0
 80092fa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009300:	2301      	movs	r3, #1
 8009302:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f107 0210 	add.w	r2, r7, #16
 800930c:	4611      	mov	r1, r2
 800930e:	4618      	mov	r0, r3
 8009310:	f002 fea0 	bl	800c054 <SDMMC_ConfigData>

      return HAL_OK;
 8009314:	2300      	movs	r3, #0
 8009316:	e000      	b.n	800931a <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009318:	2302      	movs	r3, #2
  }
}
 800931a:	4618      	mov	r0, r3
 800931c:	3730      	adds	r7, #48	@ 0x30
 800931e:	46bd      	mov	sp, r7
 8009320:	bd80      	pop	{r7, pc}
 8009322:	bf00      	nop
 8009324:	08009725 	.word	0x08009725
 8009328:	080097c1 	.word	0x080097c1
 800932c:	004005ff 	.word	0x004005ff

08009330 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009330:	b480      	push	{r7}
 8009332:	b083      	sub	sp, #12
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009338:	bf00      	nop
 800933a:	370c      	adds	r7, #12
 800933c:	46bd      	mov	sp, r7
 800933e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009342:	4770      	bx	lr

08009344 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009352:	0f9b      	lsrs	r3, r3, #30
 8009354:	b2da      	uxtb	r2, r3
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800935e:	0e9b      	lsrs	r3, r3, #26
 8009360:	b2db      	uxtb	r3, r3
 8009362:	f003 030f 	and.w	r3, r3, #15
 8009366:	b2da      	uxtb	r2, r3
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009370:	0e1b      	lsrs	r3, r3, #24
 8009372:	b2db      	uxtb	r3, r3
 8009374:	f003 0303 	and.w	r3, r3, #3
 8009378:	b2da      	uxtb	r2, r3
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009382:	0c1b      	lsrs	r3, r3, #16
 8009384:	b2da      	uxtb	r2, r3
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800938e:	0a1b      	lsrs	r3, r3, #8
 8009390:	b2da      	uxtb	r2, r3
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800939a:	b2da      	uxtb	r2, r3
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093a4:	0d1b      	lsrs	r3, r3, #20
 80093a6:	b29a      	uxth	r2, r3
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093b0:	0c1b      	lsrs	r3, r3, #16
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 030f 	and.w	r3, r3, #15
 80093b8:	b2da      	uxtb	r2, r3
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093c2:	0bdb      	lsrs	r3, r3, #15
 80093c4:	b2db      	uxtb	r3, r3
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093d4:	0b9b      	lsrs	r3, r3, #14
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	f003 0301 	and.w	r3, r3, #1
 80093dc:	b2da      	uxtb	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093e6:	0b5b      	lsrs	r3, r3, #13
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f003 0301 	and.w	r3, r3, #1
 80093ee:	b2da      	uxtb	r2, r3
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80093f8:	0b1b      	lsrs	r3, r3, #12
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	f003 0301 	and.w	r3, r3, #1
 8009400:	b2da      	uxtb	r2, r3
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2200      	movs	r2, #0
 800940a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009410:	2b00      	cmp	r3, #0
 8009412:	d163      	bne.n	80094dc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009418:	009a      	lsls	r2, r3, #2
 800941a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800941e:	4013      	ands	r3, r2
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8009424:	0f92      	lsrs	r2, r2, #30
 8009426:	431a      	orrs	r2, r3
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009430:	0edb      	lsrs	r3, r3, #27
 8009432:	b2db      	uxtb	r3, r3
 8009434:	f003 0307 	and.w	r3, r3, #7
 8009438:	b2da      	uxtb	r2, r3
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009442:	0e1b      	lsrs	r3, r3, #24
 8009444:	b2db      	uxtb	r3, r3
 8009446:	f003 0307 	and.w	r3, r3, #7
 800944a:	b2da      	uxtb	r2, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009454:	0d5b      	lsrs	r3, r3, #21
 8009456:	b2db      	uxtb	r3, r3
 8009458:	f003 0307 	and.w	r3, r3, #7
 800945c:	b2da      	uxtb	r2, r3
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009466:	0c9b      	lsrs	r3, r3, #18
 8009468:	b2db      	uxtb	r3, r3
 800946a:	f003 0307 	and.w	r3, r3, #7
 800946e:	b2da      	uxtb	r2, r3
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009478:	0bdb      	lsrs	r3, r3, #15
 800947a:	b2db      	uxtb	r3, r3
 800947c:	f003 0307 	and.w	r3, r3, #7
 8009480:	b2da      	uxtb	r2, r3
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	691b      	ldr	r3, [r3, #16]
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	7e1b      	ldrb	r3, [r3, #24]
 8009494:	b2db      	uxtb	r3, r3
 8009496:	f003 0307 	and.w	r3, r3, #7
 800949a:	3302      	adds	r3, #2
 800949c:	2201      	movs	r2, #1
 800949e:	fa02 f303 	lsl.w	r3, r2, r3
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80094a6:	fb03 f202 	mul.w	r2, r3, r2
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	7a1b      	ldrb	r3, [r3, #8]
 80094b2:	b2db      	uxtb	r3, r3
 80094b4:	f003 030f 	and.w	r3, r3, #15
 80094b8:	2201      	movs	r2, #1
 80094ba:	409a      	lsls	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094c4:	687a      	ldr	r2, [r7, #4]
 80094c6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80094c8:	0a52      	lsrs	r2, r2, #9
 80094ca:	fb03 f202 	mul.w	r2, r3, r2
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094d8:	661a      	str	r2, [r3, #96]	@ 0x60
 80094da:	e031      	b.n	8009540 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d11d      	bne.n	8009520 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80094e8:	041b      	lsls	r3, r3, #16
 80094ea:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	431a      	orrs	r2, r3
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	3301      	adds	r3, #1
 8009500:	029a      	lsls	r2, r3, #10
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009514:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	661a      	str	r2, [r3, #96]	@ 0x60
 800951e:	e00f      	b.n	8009540 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a58      	ldr	r2, [pc, #352]	@ (8009688 <HAL_SD_GetCardCSD+0x344>)
 8009526:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	e09d      	b.n	800967c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009544:	0b9b      	lsrs	r3, r3, #14
 8009546:	b2db      	uxtb	r3, r3
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	b2da      	uxtb	r2, r3
 800954e:	683b      	ldr	r3, [r7, #0]
 8009550:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009556:	09db      	lsrs	r3, r3, #7
 8009558:	b2db      	uxtb	r3, r3
 800955a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800955e:	b2da      	uxtb	r2, r3
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009568:	b2db      	uxtb	r3, r3
 800956a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800956e:	b2da      	uxtb	r2, r3
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009578:	0fdb      	lsrs	r3, r3, #31
 800957a:	b2da      	uxtb	r2, r3
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009584:	0f5b      	lsrs	r3, r3, #29
 8009586:	b2db      	uxtb	r3, r3
 8009588:	f003 0303 	and.w	r3, r3, #3
 800958c:	b2da      	uxtb	r2, r3
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009596:	0e9b      	lsrs	r3, r3, #26
 8009598:	b2db      	uxtb	r3, r3
 800959a:	f003 0307 	and.w	r3, r3, #7
 800959e:	b2da      	uxtb	r2, r3
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095a8:	0d9b      	lsrs	r3, r3, #22
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095ba:	0d5b      	lsrs	r3, r3, #21
 80095bc:	b2db      	uxtb	r3, r3
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	b2da      	uxtb	r2, r3
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	2200      	movs	r2, #0
 80095ce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095d6:	0c1b      	lsrs	r3, r3, #16
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	f003 0301 	and.w	r3, r3, #1
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095ea:	0bdb      	lsrs	r3, r3, #15
 80095ec:	b2db      	uxtb	r3, r3
 80095ee:	f003 0301 	and.w	r3, r3, #1
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095fe:	0b9b      	lsrs	r3, r3, #14
 8009600:	b2db      	uxtb	r3, r3
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	b2da      	uxtb	r2, r3
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009612:	0b5b      	lsrs	r3, r3, #13
 8009614:	b2db      	uxtb	r3, r3
 8009616:	f003 0301 	and.w	r3, r3, #1
 800961a:	b2da      	uxtb	r2, r3
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009626:	0b1b      	lsrs	r3, r3, #12
 8009628:	b2db      	uxtb	r3, r3
 800962a:	f003 0301 	and.w	r3, r3, #1
 800962e:	b2da      	uxtb	r2, r3
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800963a:	0a9b      	lsrs	r3, r3, #10
 800963c:	b2db      	uxtb	r3, r3
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	b2da      	uxtb	r2, r3
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800964e:	0a1b      	lsrs	r3, r3, #8
 8009650:	b2db      	uxtb	r3, r3
 8009652:	f003 0303 	and.w	r3, r3, #3
 8009656:	b2da      	uxtb	r2, r3
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009662:	085b      	lsrs	r3, r3, #1
 8009664:	b2db      	uxtb	r3, r3
 8009666:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800966a:	b2da      	uxtb	r2, r3
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	2201      	movs	r2, #1
 8009676:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	370c      	adds	r7, #12
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr
 8009688:	004005ff 	.word	0x004005ff

0800968c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80096c2:	683b      	ldr	r3, [r7, #0]
 80096c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b086      	sub	sp, #24
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80096ec:	2300      	movs	r3, #0
 80096ee:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80096f0:	f107 030c 	add.w	r3, r7, #12
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 fa10 	bl	8009b1c <SD_SendStatus>
 80096fc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d005      	beq.n	8009710 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	431a      	orrs	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	0a5b      	lsrs	r3, r3, #9
 8009714:	f003 030f 	and.w	r3, r3, #15
 8009718:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800971a:	693b      	ldr	r3, [r7, #16]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3718      	adds	r7, #24
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009730:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009740:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009742:	bf00      	nop
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800975a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009760:	2b82      	cmp	r3, #130	@ 0x82
 8009762:	d111      	bne.n	8009788 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4618      	mov	r0, r3
 800976a:	f002 fd49 	bl	800c200 <SDMMC_CmdStopTransfer>
 800976e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d008      	beq.n	8009788 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	431a      	orrs	r2, r3
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009782:	68f8      	ldr	r0, [r7, #12]
 8009784:	f7ff fdd4 	bl	8009330 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f022 0208 	bic.w	r2, r2, #8
 8009796:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f240 523a 	movw	r2, #1338	@ 0x53a
 80097a0:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	2200      	movs	r2, #0
 80097ae:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f003 f955 	bl	800ca60 <HAL_SD_RxCpltCallback>
#endif
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
	...

080097c0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b086      	sub	sp, #24
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097cc:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f7fb fd34 	bl	800523c <HAL_DMA_GetError>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b02      	cmp	r3, #2
 80097d8:	d03e      	beq.n	8009858 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097e8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d002      	beq.n	80097f6 <SD_DMAError+0x36>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d12d      	bne.n	8009852 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a19      	ldr	r2, [pc, #100]	@ (8009860 <SD_DMAError+0xa0>)
 80097fc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009804:	697b      	ldr	r3, [r7, #20]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800980c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009812:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800981a:	6978      	ldr	r0, [r7, #20]
 800981c:	f7ff ff62 	bl	80096e4 <HAL_SD_GetCardState>
 8009820:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	2b06      	cmp	r3, #6
 8009826:	d002      	beq.n	800982e <SD_DMAError+0x6e>
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	2b05      	cmp	r3, #5
 800982c:	d10a      	bne.n	8009844 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4618      	mov	r0, r3
 8009834:	f002 fce4 	bl	800c200 <SDMMC_CmdStopTransfer>
 8009838:	4602      	mov	r2, r0
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800983e:	431a      	orrs	r2, r3
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	2200      	movs	r2, #0
 8009850:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009852:	6978      	ldr	r0, [r7, #20]
 8009854:	f7ff fd6c 	bl	8009330 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009858:	bf00      	nop
 800985a:	3718      	adds	r7, #24
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	004005ff 	.word	0x004005ff

08009864 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009864:	b5b0      	push	{r4, r5, r7, lr}
 8009866:	b094      	sub	sp, #80	@ 0x50
 8009868:	af04      	add	r7, sp, #16
 800986a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800986c:	2301      	movs	r3, #1
 800986e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	4618      	mov	r0, r3
 8009876:	f002 fb95 	bl	800bfa4 <SDMMC_GetPowerState>
 800987a:	4603      	mov	r3, r0
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009880:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009884:	e0b8      	b.n	80099f8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800988a:	2b03      	cmp	r3, #3
 800988c:	d02f      	beq.n	80098ee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4618      	mov	r0, r3
 8009894:	f002 fd7c 	bl	800c390 <SDMMC_CmdSendCID>
 8009898:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800989a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800989c:	2b00      	cmp	r3, #0
 800989e:	d001      	beq.n	80098a4 <SD_InitCard+0x40>
    {
      return errorstate;
 80098a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098a2:	e0a9      	b.n	80099f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	2100      	movs	r1, #0
 80098aa:	4618      	mov	r0, r3
 80098ac:	f002 fbbf 	bl	800c02e <SDMMC_GetResponse>
 80098b0:	4602      	mov	r2, r0
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	2104      	movs	r1, #4
 80098bc:	4618      	mov	r0, r3
 80098be:	f002 fbb6 	bl	800c02e <SDMMC_GetResponse>
 80098c2:	4602      	mov	r2, r0
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2108      	movs	r1, #8
 80098ce:	4618      	mov	r0, r3
 80098d0:	f002 fbad 	bl	800c02e <SDMMC_GetResponse>
 80098d4:	4602      	mov	r2, r0
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	210c      	movs	r1, #12
 80098e0:	4618      	mov	r0, r3
 80098e2:	f002 fba4 	bl	800c02e <SDMMC_GetResponse>
 80098e6:	4602      	mov	r2, r0
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d00d      	beq.n	8009912 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f107 020e 	add.w	r2, r7, #14
 80098fe:	4611      	mov	r1, r2
 8009900:	4618      	mov	r0, r3
 8009902:	f002 fd82 	bl	800c40a <SDMMC_CmdSetRelAdd>
 8009906:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <SD_InitCard+0xae>
    {
      return errorstate;
 800990e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009910:	e072      	b.n	80099f8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009916:	2b03      	cmp	r3, #3
 8009918:	d036      	beq.n	8009988 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800991a:	89fb      	ldrh	r3, [r7, #14]
 800991c:	461a      	mov	r2, r3
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800992a:	041b      	lsls	r3, r3, #16
 800992c:	4619      	mov	r1, r3
 800992e:	4610      	mov	r0, r2
 8009930:	f002 fd4c 	bl	800c3cc <SDMMC_CmdSendCSD>
 8009934:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <SD_InitCard+0xdc>
    {
      return errorstate;
 800993c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800993e:	e05b      	b.n	80099f8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	2100      	movs	r1, #0
 8009946:	4618      	mov	r0, r3
 8009948:	f002 fb71 	bl	800c02e <SDMMC_GetResponse>
 800994c:	4602      	mov	r2, r0
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2104      	movs	r1, #4
 8009958:	4618      	mov	r0, r3
 800995a:	f002 fb68 	bl	800c02e <SDMMC_GetResponse>
 800995e:	4602      	mov	r2, r0
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2108      	movs	r1, #8
 800996a:	4618      	mov	r0, r3
 800996c:	f002 fb5f 	bl	800c02e <SDMMC_GetResponse>
 8009970:	4602      	mov	r2, r0
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	210c      	movs	r1, #12
 800997c:	4618      	mov	r0, r3
 800997e:	f002 fb56 	bl	800c02e <SDMMC_GetResponse>
 8009982:	4602      	mov	r2, r0
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	2104      	movs	r1, #4
 800998e:	4618      	mov	r0, r3
 8009990:	f002 fb4d 	bl	800c02e <SDMMC_GetResponse>
 8009994:	4603      	mov	r3, r0
 8009996:	0d1a      	lsrs	r2, r3, #20
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800999c:	f107 0310 	add.w	r3, r7, #16
 80099a0:	4619      	mov	r1, r3
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f7ff fcce 	bl	8009344 <HAL_SD_GetCardCSD>
 80099a8:	4603      	mov	r3, r0
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d002      	beq.n	80099b4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80099ae:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80099b2:	e021      	b.n	80099f8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6819      	ldr	r1, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099bc:	041b      	lsls	r3, r3, #16
 80099be:	2200      	movs	r2, #0
 80099c0:	461c      	mov	r4, r3
 80099c2:	4615      	mov	r5, r2
 80099c4:	4622      	mov	r2, r4
 80099c6:	462b      	mov	r3, r5
 80099c8:	4608      	mov	r0, r1
 80099ca:	f002 fc3b 	bl	800c244 <SDMMC_CmdSelDesel>
 80099ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80099d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <SD_InitCard+0x176>
  {
    return errorstate;
 80099d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099d8:	e00e      	b.n	80099f8 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681d      	ldr	r5, [r3, #0]
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	466c      	mov	r4, sp
 80099e2:	f103 0210 	add.w	r2, r3, #16
 80099e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80099e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80099ec:	3304      	adds	r3, #4
 80099ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80099f0:	4628      	mov	r0, r5
 80099f2:	f002 fa9d 	bl	800bf30 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80099f6:	2300      	movs	r3, #0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3740      	adds	r7, #64	@ 0x40
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bdb0      	pop	{r4, r5, r7, pc}

08009a00 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a08:	2300      	movs	r3, #0
 8009a0a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	617b      	str	r3, [r7, #20]
 8009a10:	2300      	movs	r3, #0
 8009a12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f002 fc36 	bl	800c28a <SDMMC_CmdGoIdleState>
 8009a1e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	e072      	b.n	8009b10 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4618      	mov	r0, r3
 8009a30:	f002 fc49 	bl	800c2c6 <SDMMC_CmdOperCond>
 8009a34:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00d      	beq.n	8009a58 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f002 fc1f 	bl	800c28a <SDMMC_CmdGoIdleState>
 8009a4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d004      	beq.n	8009a5e <SD_PowerON+0x5e>
    {
      return errorstate;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	e05b      	b.n	8009b10 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	2201      	movs	r2, #1
 8009a5c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d137      	bne.n	8009ad6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	2100      	movs	r1, #0
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	f002 fc49 	bl	800c304 <SDMMC_CmdAppCommand>
 8009a72:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d02d      	beq.n	8009ad6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a7a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009a7e:	e047      	b.n	8009b10 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2100      	movs	r1, #0
 8009a86:	4618      	mov	r0, r3
 8009a88:	f002 fc3c 	bl	800c304 <SDMMC_CmdAppCommand>
 8009a8c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d001      	beq.n	8009a98 <SD_PowerON+0x98>
    {
      return errorstate;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	e03b      	b.n	8009b10 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	491e      	ldr	r1, [pc, #120]	@ (8009b18 <SD_PowerON+0x118>)
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f002 fc52 	bl	800c348 <SDMMC_CmdAppOperCommand>
 8009aa4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d002      	beq.n	8009ab2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009aac:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009ab0:	e02e      	b.n	8009b10 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f002 fab8 	bl	800c02e <SDMMC_GetResponse>
 8009abe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	0fdb      	lsrs	r3, r3, #31
 8009ac4:	2b01      	cmp	r3, #1
 8009ac6:	d101      	bne.n	8009acc <SD_PowerON+0xcc>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e000      	b.n	8009ace <SD_PowerON+0xce>
 8009acc:	2300      	movs	r3, #0
 8009ace:	613b      	str	r3, [r7, #16]

    count++;
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d802      	bhi.n	8009ae6 <SD_PowerON+0xe6>
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d0cc      	beq.n	8009a80 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009ae6:	68bb      	ldr	r3, [r7, #8]
 8009ae8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d902      	bls.n	8009af6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009af0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009af4:	e00c      	b.n	8009b10 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d003      	beq.n	8009b08 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	645a      	str	r2, [r3, #68]	@ 0x44
 8009b06:	e002      	b.n	8009b0e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}
 8009b18:	c1100000 	.word	0xc1100000

08009b1c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d102      	bne.n	8009b32 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009b2c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009b30:	e018      	b.n	8009b64 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681a      	ldr	r2, [r3, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b3a:	041b      	lsls	r3, r3, #16
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4610      	mov	r0, r2
 8009b40:	f002 fc84 	bl	800c44c <SDMMC_CmdSendStatus>
 8009b44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d001      	beq.n	8009b50 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	e009      	b.n	8009b64 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	2100      	movs	r1, #0
 8009b56:	4618      	mov	r0, r3
 8009b58:	f002 fa69 	bl	800c02e <SDMMC_GetResponse>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d101      	bne.n	8009b80 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	e025      	b.n	8009bcc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009b86:	b2db      	uxtb	r3, r3
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d106      	bne.n	8009b9a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2200      	movs	r2, #0
 8009b90:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7f6 ffbf 	bl	8000b18 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2202      	movs	r2, #2
 8009b9e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	3304      	adds	r3, #4
 8009baa:	4619      	mov	r1, r3
 8009bac:	4610      	mov	r0, r2
 8009bae:	f002 f8bd 	bl	800bd2c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	6818      	ldr	r0, [r3, #0]
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	461a      	mov	r2, r3
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	f002 f911 	bl	800bde4 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3708      	adds	r7, #8
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b086      	sub	sp, #24
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009be6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8009be8:	7dfb      	ldrb	r3, [r7, #23]
 8009bea:	2b02      	cmp	r3, #2
 8009bec:	d101      	bne.n	8009bf2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009bee:	2302      	movs	r3, #2
 8009bf0:	e021      	b.n	8009c36 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d002      	beq.n	8009bfe <HAL_SDRAM_SendCommand+0x2a>
 8009bf8:	7dfb      	ldrb	r3, [r7, #23]
 8009bfa:	2b05      	cmp	r3, #5
 8009bfc:	d118      	bne.n	8009c30 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	2202      	movs	r2, #2
 8009c02:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	68b9      	ldr	r1, [r7, #8]
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f002 f952 	bl	800beb8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b02      	cmp	r3, #2
 8009c1a:	d104      	bne.n	8009c26 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2205      	movs	r2, #5
 8009c20:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009c24:	e006      	b.n	8009c34 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2201      	movs	r2, #1
 8009c2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009c2e:	e001      	b.n	8009c34 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e000      	b.n	8009c36 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	3718      	adds	r7, #24
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009c3e:	b580      	push	{r7, lr}
 8009c40:	b082      	sub	sp, #8
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b02      	cmp	r3, #2
 8009c52:	d101      	bne.n	8009c58 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009c54:	2302      	movs	r3, #2
 8009c56:	e016      	b.n	8009c86 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d10f      	bne.n	8009c84 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2202      	movs	r2, #2
 8009c68:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6839      	ldr	r1, [r7, #0]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f002 f944 	bl	800bf00 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	e000      	b.n	8009c86 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d101      	bne.n	8009ca0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	e09d      	b.n	8009ddc <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d108      	bne.n	8009cba <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	685b      	ldr	r3, [r3, #4]
 8009cac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009cb0:	d009      	beq.n	8009cc6 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	61da      	str	r2, [r3, #28]
 8009cb8:	e005      	b.n	8009cc6 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d106      	bne.n	8009ce6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f7f8 fb89 	bl	80023f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2202      	movs	r2, #2
 8009cea:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009cfc:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009d06:	d902      	bls.n	8009d0e <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	e002      	b.n	8009d14 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009d0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009d12:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68db      	ldr	r3, [r3, #12]
 8009d18:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009d1c:	d007      	beq.n	8009d2e <HAL_SPI_Init+0xa0>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	68db      	ldr	r3, [r3, #12]
 8009d22:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009d26:	d002      	beq.n	8009d2e <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	689b      	ldr	r3, [r3, #8]
 8009d3a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009d3e:	431a      	orrs	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	f003 0302 	and.w	r3, r3, #2
 8009d48:	431a      	orrs	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	695b      	ldr	r3, [r3, #20]
 8009d4e:	f003 0301 	and.w	r3, r3, #1
 8009d52:	431a      	orrs	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	699b      	ldr	r3, [r3, #24]
 8009d58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d5c:	431a      	orrs	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009d66:	431a      	orrs	r2, r3
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a1b      	ldr	r3, [r3, #32]
 8009d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d70:	ea42 0103 	orr.w	r1, r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d78:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	0c1b      	lsrs	r3, r3, #16
 8009d8a:	f003 0204 	and.w	r2, r3, #4
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d92:	f003 0310 	and.w	r3, r3, #16
 8009d96:	431a      	orrs	r2, r3
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d9c:	f003 0308 	and.w	r3, r3, #8
 8009da0:	431a      	orrs	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	68db      	ldr	r3, [r3, #12]
 8009da6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009daa:	ea42 0103 	orr.w	r1, r2, r3
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	430a      	orrs	r2, r1
 8009dba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	69da      	ldr	r2, [r3, #28]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009dca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2201      	movs	r2, #1
 8009dd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3710      	adds	r7, #16
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bd80      	pop	{r7, pc}

08009de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b082      	sub	sp, #8
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d101      	bne.n	8009df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e049      	b.n	8009e8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d106      	bne.n	8009e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7fa f90e 	bl	800402c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2202      	movs	r2, #2
 8009e14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	4619      	mov	r1, r3
 8009e22:	4610      	mov	r0, r2
 8009e24:	f000 fac0 	bl	800a3a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2201      	movs	r2, #1
 8009e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2201      	movs	r2, #1
 8009e64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2201      	movs	r2, #1
 8009e74:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009e88:	2300      	movs	r3, #0
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3708      	adds	r7, #8
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd80      	pop	{r7, pc}
	...

08009e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d001      	beq.n	8009eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e054      	b.n	8009f56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2202      	movs	r2, #2
 8009eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	68da      	ldr	r2, [r3, #12]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f042 0201 	orr.w	r2, r2, #1
 8009ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a26      	ldr	r2, [pc, #152]	@ (8009f64 <HAL_TIM_Base_Start_IT+0xd0>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d022      	beq.n	8009f14 <HAL_TIM_Base_Start_IT+0x80>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ed6:	d01d      	beq.n	8009f14 <HAL_TIM_Base_Start_IT+0x80>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a22      	ldr	r2, [pc, #136]	@ (8009f68 <HAL_TIM_Base_Start_IT+0xd4>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d018      	beq.n	8009f14 <HAL_TIM_Base_Start_IT+0x80>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a21      	ldr	r2, [pc, #132]	@ (8009f6c <HAL_TIM_Base_Start_IT+0xd8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d013      	beq.n	8009f14 <HAL_TIM_Base_Start_IT+0x80>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4a1f      	ldr	r2, [pc, #124]	@ (8009f70 <HAL_TIM_Base_Start_IT+0xdc>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d00e      	beq.n	8009f14 <HAL_TIM_Base_Start_IT+0x80>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4a1e      	ldr	r2, [pc, #120]	@ (8009f74 <HAL_TIM_Base_Start_IT+0xe0>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d009      	beq.n	8009f14 <HAL_TIM_Base_Start_IT+0x80>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a1c      	ldr	r2, [pc, #112]	@ (8009f78 <HAL_TIM_Base_Start_IT+0xe4>)
 8009f06:	4293      	cmp	r3, r2
 8009f08:	d004      	beq.n	8009f14 <HAL_TIM_Base_Start_IT+0x80>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8009f7c <HAL_TIM_Base_Start_IT+0xe8>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d115      	bne.n	8009f40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	689a      	ldr	r2, [r3, #8]
 8009f1a:	4b19      	ldr	r3, [pc, #100]	@ (8009f80 <HAL_TIM_Base_Start_IT+0xec>)
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2b06      	cmp	r3, #6
 8009f24:	d015      	beq.n	8009f52 <HAL_TIM_Base_Start_IT+0xbe>
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f2c:	d011      	beq.n	8009f52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f042 0201 	orr.w	r2, r2, #1
 8009f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f3e:	e008      	b.n	8009f52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f042 0201 	orr.w	r2, r2, #1
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	e000      	b.n	8009f54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009f54:	2300      	movs	r3, #0
}
 8009f56:	4618      	mov	r0, r3
 8009f58:	3714      	adds	r7, #20
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	40010000 	.word	0x40010000
 8009f68:	40000400 	.word	0x40000400
 8009f6c:	40000800 	.word	0x40000800
 8009f70:	40000c00 	.word	0x40000c00
 8009f74:	40010400 	.word	0x40010400
 8009f78:	40014000 	.word	0x40014000
 8009f7c:	40001800 	.word	0x40001800
 8009f80:	00010007 	.word	0x00010007

08009f84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	f003 0302 	and.w	r3, r3, #2
 8009f96:	2b02      	cmp	r3, #2
 8009f98:	d122      	bne.n	8009fe0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	f003 0302 	and.w	r3, r3, #2
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d11b      	bne.n	8009fe0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f06f 0202 	mvn.w	r2, #2
 8009fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2201      	movs	r2, #1
 8009fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	699b      	ldr	r3, [r3, #24]
 8009fbe:	f003 0303 	and.w	r3, r3, #3
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d003      	beq.n	8009fce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 f9d0 	bl	800a36c <HAL_TIM_IC_CaptureCallback>
 8009fcc:	e005      	b.n	8009fda <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 f9c2 	bl	800a358 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 f9d3 	bl	800a380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	f003 0304 	and.w	r3, r3, #4
 8009fea:	2b04      	cmp	r3, #4
 8009fec:	d122      	bne.n	800a034 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68db      	ldr	r3, [r3, #12]
 8009ff4:	f003 0304 	and.w	r3, r3, #4
 8009ff8:	2b04      	cmp	r3, #4
 8009ffa:	d11b      	bne.n	800a034 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	f06f 0204 	mvn.w	r2, #4
 800a004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2202      	movs	r2, #2
 800a00a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a016:	2b00      	cmp	r3, #0
 800a018:	d003      	beq.n	800a022 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f9a6 	bl	800a36c <HAL_TIM_IC_CaptureCallback>
 800a020:	e005      	b.n	800a02e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f998 	bl	800a358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f9a9 	bl	800a380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	f003 0308 	and.w	r3, r3, #8
 800a03e:	2b08      	cmp	r3, #8
 800a040:	d122      	bne.n	800a088 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	f003 0308 	and.w	r3, r3, #8
 800a04c:	2b08      	cmp	r3, #8
 800a04e:	d11b      	bne.n	800a088 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f06f 0208 	mvn.w	r2, #8
 800a058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2204      	movs	r2, #4
 800a05e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	69db      	ldr	r3, [r3, #28]
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 f97c 	bl	800a36c <HAL_TIM_IC_CaptureCallback>
 800a074:	e005      	b.n	800a082 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 f96e 	bl	800a358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f97f 	bl	800a380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	f003 0310 	and.w	r3, r3, #16
 800a092:	2b10      	cmp	r3, #16
 800a094:	d122      	bne.n	800a0dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	f003 0310 	and.w	r3, r3, #16
 800a0a0:	2b10      	cmp	r3, #16
 800a0a2:	d11b      	bne.n	800a0dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f06f 0210 	mvn.w	r2, #16
 800a0ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2208      	movs	r2, #8
 800a0b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	69db      	ldr	r3, [r3, #28]
 800a0ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d003      	beq.n	800a0ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f952 	bl	800a36c <HAL_TIM_IC_CaptureCallback>
 800a0c8:	e005      	b.n	800a0d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f000 f944 	bl	800a358 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f955 	bl	800a380 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	f003 0301 	and.w	r3, r3, #1
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d10e      	bne.n	800a108 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	f003 0301 	and.w	r3, r3, #1
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d107      	bne.n	800a108 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f06f 0201 	mvn.w	r2, #1
 800a100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f7f7 ffce 	bl	80020a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a112:	2b80      	cmp	r3, #128	@ 0x80
 800a114:	d10e      	bne.n	800a134 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68db      	ldr	r3, [r3, #12]
 800a11c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a120:	2b80      	cmp	r3, #128	@ 0x80
 800a122:	d107      	bne.n	800a134 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a12c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 fb0c 	bl	800a74c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	691b      	ldr	r3, [r3, #16]
 800a13a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a13e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a142:	d10e      	bne.n	800a162 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a14e:	2b80      	cmp	r3, #128	@ 0x80
 800a150:	d107      	bne.n	800a162 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a15a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 faff 	bl	800a760 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	691b      	ldr	r3, [r3, #16]
 800a168:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a16c:	2b40      	cmp	r3, #64	@ 0x40
 800a16e:	d10e      	bne.n	800a18e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a17a:	2b40      	cmp	r3, #64	@ 0x40
 800a17c:	d107      	bne.n	800a18e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a186:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f903 	bl	800a394 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	f003 0320 	and.w	r3, r3, #32
 800a198:	2b20      	cmp	r3, #32
 800a19a:	d10e      	bne.n	800a1ba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68db      	ldr	r3, [r3, #12]
 800a1a2:	f003 0320 	and.w	r3, r3, #32
 800a1a6:	2b20      	cmp	r3, #32
 800a1a8:	d107      	bne.n	800a1ba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f06f 0220 	mvn.w	r2, #32
 800a1b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 fabf 	bl	800a738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
	...

0800a1c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d101      	bne.n	800a1e0 <HAL_TIM_ConfigClockSource+0x1c>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	e0b4      	b.n	800a34a <HAL_TIM_ConfigClockSource+0x186>
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2202      	movs	r2, #2
 800a1ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	689b      	ldr	r3, [r3, #8]
 800a1f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	4b56      	ldr	r3, [pc, #344]	@ (800a354 <HAL_TIM_ConfigClockSource+0x190>)
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a206:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a218:	d03e      	beq.n	800a298 <HAL_TIM_ConfigClockSource+0xd4>
 800a21a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a21e:	f200 8087 	bhi.w	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a226:	f000 8086 	beq.w	800a336 <HAL_TIM_ConfigClockSource+0x172>
 800a22a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a22e:	d87f      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a230:	2b70      	cmp	r3, #112	@ 0x70
 800a232:	d01a      	beq.n	800a26a <HAL_TIM_ConfigClockSource+0xa6>
 800a234:	2b70      	cmp	r3, #112	@ 0x70
 800a236:	d87b      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a238:	2b60      	cmp	r3, #96	@ 0x60
 800a23a:	d050      	beq.n	800a2de <HAL_TIM_ConfigClockSource+0x11a>
 800a23c:	2b60      	cmp	r3, #96	@ 0x60
 800a23e:	d877      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a240:	2b50      	cmp	r3, #80	@ 0x50
 800a242:	d03c      	beq.n	800a2be <HAL_TIM_ConfigClockSource+0xfa>
 800a244:	2b50      	cmp	r3, #80	@ 0x50
 800a246:	d873      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a248:	2b40      	cmp	r3, #64	@ 0x40
 800a24a:	d058      	beq.n	800a2fe <HAL_TIM_ConfigClockSource+0x13a>
 800a24c:	2b40      	cmp	r3, #64	@ 0x40
 800a24e:	d86f      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a250:	2b30      	cmp	r3, #48	@ 0x30
 800a252:	d064      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x15a>
 800a254:	2b30      	cmp	r3, #48	@ 0x30
 800a256:	d86b      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a258:	2b20      	cmp	r3, #32
 800a25a:	d060      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x15a>
 800a25c:	2b20      	cmp	r3, #32
 800a25e:	d867      	bhi.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
 800a260:	2b00      	cmp	r3, #0
 800a262:	d05c      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x15a>
 800a264:	2b10      	cmp	r3, #16
 800a266:	d05a      	beq.n	800a31e <HAL_TIM_ConfigClockSource+0x15a>
 800a268:	e062      	b.n	800a330 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a27a:	f000 f9af 	bl	800a5dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	689b      	ldr	r3, [r3, #8]
 800a284:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a28c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	609a      	str	r2, [r3, #8]
      break;
 800a296:	e04f      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a2a0:	683b      	ldr	r3, [r7, #0]
 800a2a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a2a8:	f000 f998 	bl	800a5dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	689a      	ldr	r2, [r3, #8]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a2ba:	609a      	str	r2, [r3, #8]
      break;
 800a2bc:	e03c      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f000 f90c 	bl	800a4e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	2150      	movs	r1, #80	@ 0x50
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f000 f965 	bl	800a5a6 <TIM_ITRx_SetConfig>
      break;
 800a2dc:	e02c      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	f000 f92b 	bl	800a546 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2160      	movs	r1, #96	@ 0x60
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f000 f955 	bl	800a5a6 <TIM_ITRx_SetConfig>
      break;
 800a2fc:	e01c      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a30a:	461a      	mov	r2, r3
 800a30c:	f000 f8ec 	bl	800a4e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2140      	movs	r1, #64	@ 0x40
 800a316:	4618      	mov	r0, r3
 800a318:	f000 f945 	bl	800a5a6 <TIM_ITRx_SetConfig>
      break;
 800a31c:	e00c      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681a      	ldr	r2, [r3, #0]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	4619      	mov	r1, r3
 800a328:	4610      	mov	r0, r2
 800a32a:	f000 f93c 	bl	800a5a6 <TIM_ITRx_SetConfig>
      break;
 800a32e:	e003      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	73fb      	strb	r3, [r7, #15]
      break;
 800a334:	e000      	b.n	800a338 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a336:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a348:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3710      	adds	r7, #16
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}
 800a352:	bf00      	nop
 800a354:	fffeff88 	.word	0xfffeff88

0800a358 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a360:	bf00      	nop
 800a362:	370c      	adds	r7, #12
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr

0800a36c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a36c:	b480      	push	{r7}
 800a36e:	b083      	sub	sp, #12
 800a370:	af00      	add	r7, sp, #0
 800a372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a374:	bf00      	nop
 800a376:	370c      	adds	r7, #12
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr

0800a380 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a380:	b480      	push	{r7}
 800a382:	b083      	sub	sp, #12
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr

0800a394 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a394:	b480      	push	{r7}
 800a396:	b083      	sub	sp, #12
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a39c:	bf00      	nop
 800a39e:	370c      	adds	r7, #12
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a40      	ldr	r2, [pc, #256]	@ (800a4bc <TIM_Base_SetConfig+0x114>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d013      	beq.n	800a3e8 <TIM_Base_SetConfig+0x40>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3c6:	d00f      	beq.n	800a3e8 <TIM_Base_SetConfig+0x40>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	4a3d      	ldr	r2, [pc, #244]	@ (800a4c0 <TIM_Base_SetConfig+0x118>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d00b      	beq.n	800a3e8 <TIM_Base_SetConfig+0x40>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a3c      	ldr	r2, [pc, #240]	@ (800a4c4 <TIM_Base_SetConfig+0x11c>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d007      	beq.n	800a3e8 <TIM_Base_SetConfig+0x40>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	4a3b      	ldr	r2, [pc, #236]	@ (800a4c8 <TIM_Base_SetConfig+0x120>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d003      	beq.n	800a3e8 <TIM_Base_SetConfig+0x40>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a3a      	ldr	r2, [pc, #232]	@ (800a4cc <TIM_Base_SetConfig+0x124>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d108      	bne.n	800a3fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a3ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	4a2f      	ldr	r2, [pc, #188]	@ (800a4bc <TIM_Base_SetConfig+0x114>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d02b      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a408:	d027      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	4a2c      	ldr	r2, [pc, #176]	@ (800a4c0 <TIM_Base_SetConfig+0x118>)
 800a40e:	4293      	cmp	r3, r2
 800a410:	d023      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a2b      	ldr	r2, [pc, #172]	@ (800a4c4 <TIM_Base_SetConfig+0x11c>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d01f      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a2a      	ldr	r2, [pc, #168]	@ (800a4c8 <TIM_Base_SetConfig+0x120>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d01b      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a29      	ldr	r2, [pc, #164]	@ (800a4cc <TIM_Base_SetConfig+0x124>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d017      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a28      	ldr	r2, [pc, #160]	@ (800a4d0 <TIM_Base_SetConfig+0x128>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d013      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a27      	ldr	r2, [pc, #156]	@ (800a4d4 <TIM_Base_SetConfig+0x12c>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d00f      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a26      	ldr	r2, [pc, #152]	@ (800a4d8 <TIM_Base_SetConfig+0x130>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d00b      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a25      	ldr	r2, [pc, #148]	@ (800a4dc <TIM_Base_SetConfig+0x134>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d007      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a24      	ldr	r2, [pc, #144]	@ (800a4e0 <TIM_Base_SetConfig+0x138>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d003      	beq.n	800a45a <TIM_Base_SetConfig+0xb2>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a23      	ldr	r2, [pc, #140]	@ (800a4e4 <TIM_Base_SetConfig+0x13c>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d108      	bne.n	800a46c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	4313      	orrs	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	4313      	orrs	r3, r2
 800a478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a0a      	ldr	r2, [pc, #40]	@ (800a4bc <TIM_Base_SetConfig+0x114>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d003      	beq.n	800a4a0 <TIM_Base_SetConfig+0xf8>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a0c      	ldr	r2, [pc, #48]	@ (800a4cc <TIM_Base_SetConfig+0x124>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d103      	bne.n	800a4a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	691a      	ldr	r2, [r3, #16]
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	615a      	str	r2, [r3, #20]
}
 800a4ae:	bf00      	nop
 800a4b0:	3714      	adds	r7, #20
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	40010000 	.word	0x40010000
 800a4c0:	40000400 	.word	0x40000400
 800a4c4:	40000800 	.word	0x40000800
 800a4c8:	40000c00 	.word	0x40000c00
 800a4cc:	40010400 	.word	0x40010400
 800a4d0:	40014000 	.word	0x40014000
 800a4d4:	40014400 	.word	0x40014400
 800a4d8:	40014800 	.word	0x40014800
 800a4dc:	40001800 	.word	0x40001800
 800a4e0:	40001c00 	.word	0x40001c00
 800a4e4:	40002000 	.word	0x40002000

0800a4e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	b087      	sub	sp, #28
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	60f8      	str	r0, [r7, #12]
 800a4f0:	60b9      	str	r1, [r7, #8]
 800a4f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6a1b      	ldr	r3, [r3, #32]
 800a4f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6a1b      	ldr	r3, [r3, #32]
 800a4fe:	f023 0201 	bic.w	r2, r3, #1
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a50c:	693b      	ldr	r3, [r7, #16]
 800a50e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	011b      	lsls	r3, r3, #4
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a51e:	697b      	ldr	r3, [r7, #20]
 800a520:	f023 030a 	bic.w	r3, r3, #10
 800a524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a526:	697a      	ldr	r2, [r7, #20]
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	4313      	orrs	r3, r2
 800a52c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	693a      	ldr	r2, [r7, #16]
 800a532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	697a      	ldr	r2, [r7, #20]
 800a538:	621a      	str	r2, [r3, #32]
}
 800a53a:	bf00      	nop
 800a53c:	371c      	adds	r7, #28
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a546:	b480      	push	{r7}
 800a548:	b087      	sub	sp, #28
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	60f8      	str	r0, [r7, #12]
 800a54e:	60b9      	str	r1, [r7, #8]
 800a550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6a1b      	ldr	r3, [r3, #32]
 800a556:	f023 0210 	bic.w	r2, r3, #16
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	699b      	ldr	r3, [r3, #24]
 800a562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6a1b      	ldr	r3, [r3, #32]
 800a568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	031b      	lsls	r3, r3, #12
 800a576:	697a      	ldr	r2, [r7, #20]
 800a578:	4313      	orrs	r3, r2
 800a57a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a584:	68bb      	ldr	r3, [r7, #8]
 800a586:	011b      	lsls	r3, r3, #4
 800a588:	693a      	ldr	r2, [r7, #16]
 800a58a:	4313      	orrs	r3, r2
 800a58c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	693a      	ldr	r2, [r7, #16]
 800a598:	621a      	str	r2, [r3, #32]
}
 800a59a:	bf00      	nop
 800a59c:	371c      	adds	r7, #28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a4:	4770      	bx	lr

0800a5a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5a6:	b480      	push	{r7}
 800a5a8:	b085      	sub	sp, #20
 800a5aa:	af00      	add	r7, sp, #0
 800a5ac:	6078      	str	r0, [r7, #4]
 800a5ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	689b      	ldr	r3, [r3, #8]
 800a5b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5be:	683a      	ldr	r2, [r7, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	f043 0307 	orr.w	r3, r3, #7
 800a5c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	68fa      	ldr	r2, [r7, #12]
 800a5ce:	609a      	str	r2, [r3, #8]
}
 800a5d0:	bf00      	nop
 800a5d2:	3714      	adds	r7, #20
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b087      	sub	sp, #28
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	607a      	str	r2, [r7, #4]
 800a5e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a5f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	021a      	lsls	r2, r3, #8
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	431a      	orrs	r2, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	4313      	orrs	r3, r2
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	4313      	orrs	r3, r2
 800a608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	697a      	ldr	r2, [r7, #20]
 800a60e:	609a      	str	r2, [r3, #8]
}
 800a610:	bf00      	nop
 800a612:	371c      	adds	r7, #28
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
 800a624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a62c:	2b01      	cmp	r3, #1
 800a62e:	d101      	bne.n	800a634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a630:	2302      	movs	r3, #2
 800a632:	e06d      	b.n	800a710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2202      	movs	r2, #2
 800a640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	689b      	ldr	r3, [r3, #8]
 800a652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a30      	ldr	r2, [pc, #192]	@ (800a71c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d004      	beq.n	800a668 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a2f      	ldr	r2, [pc, #188]	@ (800a720 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d108      	bne.n	800a67a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a66e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	68fa      	ldr	r2, [r7, #12]
 800a676:	4313      	orrs	r3, r2
 800a678:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a680:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	4313      	orrs	r3, r2
 800a68a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a20      	ldr	r2, [pc, #128]	@ (800a71c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d022      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6a6:	d01d      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	4a1d      	ldr	r2, [pc, #116]	@ (800a724 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	d018      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a1c      	ldr	r2, [pc, #112]	@ (800a728 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d013      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	4a1a      	ldr	r2, [pc, #104]	@ (800a72c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a6c2:	4293      	cmp	r3, r2
 800a6c4:	d00e      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a15      	ldr	r2, [pc, #84]	@ (800a720 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d009      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a16      	ldr	r2, [pc, #88]	@ (800a730 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d004      	beq.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a15      	ldr	r2, [pc, #84]	@ (800a734 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d10c      	bne.n	800a6fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a6ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2201      	movs	r2, #1
 800a702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a70e:	2300      	movs	r3, #0
}
 800a710:	4618      	mov	r0, r3
 800a712:	3714      	adds	r7, #20
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr
 800a71c:	40010000 	.word	0x40010000
 800a720:	40010400 	.word	0x40010400
 800a724:	40000400 	.word	0x40000400
 800a728:	40000800 	.word	0x40000800
 800a72c:	40000c00 	.word	0x40000c00
 800a730:	40014000 	.word	0x40014000
 800a734:	40001800 	.word	0x40001800

0800a738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e040      	b.n	800a808 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d106      	bne.n	800a79c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7f9 fd6a 	bl	8004270 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2224      	movs	r2, #36	@ 0x24
 800a7a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 0201 	bic.w	r2, r2, #1
 800a7b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fbe6 	bl	800af84 <UART_SetConfig>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d101      	bne.n	800a7c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e022      	b.n	800a808 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fe3e 	bl	800b44c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a7de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689a      	ldr	r2, [r3, #8]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a7ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f042 0201 	orr.w	r2, r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fec5 	bl	800b590 <UART_CheckIdleState>
 800a806:	4603      	mov	r3, r0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08a      	sub	sp, #40	@ 0x28
 800a814:	af02      	add	r7, sp, #8
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	4613      	mov	r3, r2
 800a81e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a824:	2b20      	cmp	r3, #32
 800a826:	d171      	bne.n	800a90c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d002      	beq.n	800a834 <HAL_UART_Transmit+0x24>
 800a82e:	88fb      	ldrh	r3, [r7, #6]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e06a      	b.n	800a90e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2221      	movs	r2, #33	@ 0x21
 800a844:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a846:	f7f9 fe75 	bl	8004534 <HAL_GetTick>
 800a84a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	88fa      	ldrh	r2, [r7, #6]
 800a850:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	88fa      	ldrh	r2, [r7, #6]
 800a858:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	689b      	ldr	r3, [r3, #8]
 800a860:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a864:	d108      	bne.n	800a878 <HAL_UART_Transmit+0x68>
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d104      	bne.n	800a878 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	61bb      	str	r3, [r7, #24]
 800a876:	e003      	b.n	800a880 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a87c:	2300      	movs	r3, #0
 800a87e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a880:	e02c      	b.n	800a8dc <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2200      	movs	r2, #0
 800a88a:	2180      	movs	r1, #128	@ 0x80
 800a88c:	68f8      	ldr	r0, [r7, #12]
 800a88e:	f000 feb6 	bl	800b5fe <UART_WaitOnFlagUntilTimeout>
 800a892:	4603      	mov	r3, r0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d001      	beq.n	800a89c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a898:	2303      	movs	r3, #3
 800a89a:	e038      	b.n	800a90e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a89c:	69fb      	ldr	r3, [r7, #28]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10b      	bne.n	800a8ba <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a8a2:	69bb      	ldr	r3, [r7, #24]
 800a8a4:	881b      	ldrh	r3, [r3, #0]
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8b0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a8b2:	69bb      	ldr	r3, [r7, #24]
 800a8b4:	3302      	adds	r3, #2
 800a8b6:	61bb      	str	r3, [r7, #24]
 800a8b8:	e007      	b.n	800a8ca <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	781a      	ldrb	r2, [r3, #0]
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	3b01      	subs	r3, #1
 800a8d4:	b29a      	uxth	r2, r3
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800a8e2:	b29b      	uxth	r3, r3
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d1cc      	bne.n	800a882 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	2140      	movs	r1, #64	@ 0x40
 800a8f2:	68f8      	ldr	r0, [r7, #12]
 800a8f4:	f000 fe83 	bl	800b5fe <UART_WaitOnFlagUntilTimeout>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d001      	beq.n	800a902 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e005      	b.n	800a90e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	2220      	movs	r2, #32
 800a906:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a908:	2300      	movs	r3, #0
 800a90a:	e000      	b.n	800a90e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a90c:	2302      	movs	r3, #2
  }
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3720      	adds	r7, #32
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}

0800a916 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a916:	b580      	push	{r7, lr}
 800a918:	b08a      	sub	sp, #40	@ 0x28
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	60f8      	str	r0, [r7, #12]
 800a91e:	60b9      	str	r1, [r7, #8]
 800a920:	4613      	mov	r3, r2
 800a922:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a92a:	2b20      	cmp	r3, #32
 800a92c:	d132      	bne.n	800a994 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <HAL_UART_Receive_IT+0x24>
 800a934:	88fb      	ldrh	r3, [r7, #6]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e02b      	b.n	800a996 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2200      	movs	r2, #0
 800a942:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d018      	beq.n	800a984 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	e853 3f00 	ldrex	r3, [r3]
 800a95e:	613b      	str	r3, [r7, #16]
   return(result);
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a966:	627b      	str	r3, [r7, #36]	@ 0x24
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	461a      	mov	r2, r3
 800a96e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a970:	623b      	str	r3, [r7, #32]
 800a972:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a974:	69f9      	ldr	r1, [r7, #28]
 800a976:	6a3a      	ldr	r2, [r7, #32]
 800a978:	e841 2300 	strex	r3, r2, [r1]
 800a97c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d1e6      	bne.n	800a952 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a984:	88fb      	ldrh	r3, [r7, #6]
 800a986:	461a      	mov	r2, r3
 800a988:	68b9      	ldr	r1, [r7, #8]
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f000 fefe 	bl	800b78c <UART_Start_Receive_IT>
 800a990:	4603      	mov	r3, r0
 800a992:	e000      	b.n	800a996 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800a994:	2302      	movs	r3, #2
  }
}
 800a996:	4618      	mov	r0, r3
 800a998:	3728      	adds	r7, #40	@ 0x28
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
	...

0800a9a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b0ba      	sub	sp, #232	@ 0xe8
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	69db      	ldr	r3, [r3, #28]
 800a9ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a9c6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a9ca:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a9d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d115      	bne.n	800aa08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9e0:	f003 0320 	and.w	r3, r3, #32
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d00f      	beq.n	800aa08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9ec:	f003 0320 	and.w	r3, r3, #32
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d009      	beq.n	800aa08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	f000 8297 	beq.w	800af2c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	4798      	blx	r3
      }
      return;
 800aa06:	e291      	b.n	800af2c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aa08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f000 8117 	beq.w	800ac40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aa12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa16:	f003 0301 	and.w	r3, r3, #1
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d106      	bne.n	800aa2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800aa1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800aa22:	4b85      	ldr	r3, [pc, #532]	@ (800ac38 <HAL_UART_IRQHandler+0x298>)
 800aa24:	4013      	ands	r3, r2
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	f000 810a 	beq.w	800ac40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aa2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa30:	f003 0301 	and.w	r3, r3, #1
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d011      	beq.n	800aa5c <HAL_UART_IRQHandler+0xbc>
 800aa38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00b      	beq.n	800aa5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa52:	f043 0201 	orr.w	r2, r3, #1
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa60:	f003 0302 	and.w	r3, r3, #2
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d011      	beq.n	800aa8c <HAL_UART_IRQHandler+0xec>
 800aa68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa6c:	f003 0301 	and.w	r3, r3, #1
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2202      	movs	r2, #2
 800aa7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aa82:	f043 0204 	orr.w	r2, r3, #4
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aa8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa90:	f003 0304 	and.w	r3, r3, #4
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d011      	beq.n	800aabc <HAL_UART_IRQHandler+0x11c>
 800aa98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa9c:	f003 0301 	and.w	r3, r3, #1
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d00b      	beq.n	800aabc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2204      	movs	r2, #4
 800aaaa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aab2:	f043 0202 	orr.w	r2, r3, #2
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800aabc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aac0:	f003 0308 	and.w	r3, r3, #8
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d017      	beq.n	800aaf8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aacc:	f003 0320 	and.w	r3, r3, #32
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d105      	bne.n	800aae0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800aad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aad8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00b      	beq.n	800aaf8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	2208      	movs	r2, #8
 800aae6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800aaee:	f043 0208 	orr.w	r2, r3, #8
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aaf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aafc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d012      	beq.n	800ab2a <HAL_UART_IRQHandler+0x18a>
 800ab04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab08:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00c      	beq.n	800ab2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ab18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab20:	f043 0220 	orr.w	r2, r3, #32
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	f000 81fd 	beq.w	800af30 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab3a:	f003 0320 	and.w	r3, r3, #32
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d00d      	beq.n	800ab5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab46:	f003 0320 	and.w	r3, r3, #32
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d007      	beq.n	800ab5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d003      	beq.n	800ab5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ab64:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	689b      	ldr	r3, [r3, #8]
 800ab6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab72:	2b40      	cmp	r3, #64	@ 0x40
 800ab74:	d005      	beq.n	800ab82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ab76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800ab7a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d04f      	beq.n	800ac22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ab82:	6878      	ldr	r0, [r7, #4]
 800ab84:	f000 fec8 	bl	800b918 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab92:	2b40      	cmp	r3, #64	@ 0x40
 800ab94:	d141      	bne.n	800ac1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800aba4:	e853 3f00 	ldrex	r3, [r3]
 800aba8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800abac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800abb0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800abb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3308      	adds	r3, #8
 800abbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800abc2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800abc6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800abce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800abd2:	e841 2300 	strex	r3, r2, [r1]
 800abd6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800abda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d1d9      	bne.n	800ab96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d013      	beq.n	800ac12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abee:	4a13      	ldr	r2, [pc, #76]	@ (800ac3c <HAL_UART_IRQHandler+0x29c>)
 800abf0:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800abf6:	4618      	mov	r0, r3
 800abf8:	f7fa fafe 	bl	80051f8 <HAL_DMA_Abort_IT>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d017      	beq.n	800ac32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac10:	e00f      	b.n	800ac32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 f9a0 	bl	800af58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac18:	e00b      	b.n	800ac32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 f99c 	bl	800af58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac20:	e007      	b.n	800ac32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac22:	6878      	ldr	r0, [r7, #4]
 800ac24:	f000 f998 	bl	800af58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800ac30:	e17e      	b.n	800af30 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac32:	bf00      	nop
    return;
 800ac34:	e17c      	b.n	800af30 <HAL_UART_IRQHandler+0x590>
 800ac36:	bf00      	nop
 800ac38:	04000120 	.word	0x04000120
 800ac3c:	0800b9e1 	.word	0x0800b9e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	f040 814c 	bne.w	800aee2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800ac4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ac4e:	f003 0310 	and.w	r3, r3, #16
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	f000 8145 	beq.w	800aee2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800ac58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ac5c:	f003 0310 	and.w	r3, r3, #16
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 813e 	beq.w	800aee2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2210      	movs	r2, #16
 800ac6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac78:	2b40      	cmp	r3, #64	@ 0x40
 800ac7a:	f040 80b6 	bne.w	800adea <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ac8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 8150 	beq.w	800af34 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800ac9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	f080 8148 	bcs.w	800af34 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800acaa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acb2:	69db      	ldr	r3, [r3, #28]
 800acb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800acb8:	f000 8086 	beq.w	800adc8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800acc8:	e853 3f00 	ldrex	r3, [r3]
 800accc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800acd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800acd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800acd8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	461a      	mov	r2, r3
 800ace2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800ace6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800acea:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800acf2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800acf6:	e841 2300 	strex	r3, r2, [r1]
 800acfa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800acfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d1da      	bne.n	800acbc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	3308      	adds	r3, #8
 800ad0c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800ad10:	e853 3f00 	ldrex	r3, [r3]
 800ad14:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800ad16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ad18:	f023 0301 	bic.w	r3, r3, #1
 800ad1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	3308      	adds	r3, #8
 800ad26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800ad2a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800ad2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad30:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800ad32:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800ad3c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e1      	bne.n	800ad06 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	3308      	adds	r3, #8
 800ad48:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad4a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ad4c:	e853 3f00 	ldrex	r3, [r3]
 800ad50:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800ad52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ad54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ad58:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	3308      	adds	r3, #8
 800ad62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800ad66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800ad68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800ad6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800ad6e:	e841 2300 	strex	r3, r2, [r1]
 800ad72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800ad74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1e3      	bne.n	800ad42 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2220      	movs	r2, #32
 800ad7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	2200      	movs	r2, #0
 800ad86:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ad90:	e853 3f00 	ldrex	r3, [r3]
 800ad94:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ad96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ad98:	f023 0310 	bic.w	r3, r3, #16
 800ad9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	461a      	mov	r2, r3
 800ada6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800adaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800adb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800adb2:	e841 2300 	strex	r3, r2, [r1]
 800adb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800adb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d1e4      	bne.n	800ad88 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800adc2:	4618      	mov	r0, r3
 800adc4:	f7fa f9a8 	bl	8005118 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2202      	movs	r2, #2
 800adcc:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800adda:	b29b      	uxth	r3, r3
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	b29b      	uxth	r3, r3
 800ade0:	4619      	mov	r1, r3
 800ade2:	6878      	ldr	r0, [r7, #4]
 800ade4:	f000 f8c2 	bl	800af6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ade8:	e0a4      	b.n	800af34 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800adf6:	b29b      	uxth	r3, r3
 800adf8:	1ad3      	subs	r3, r2, r3
 800adfa:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800ae04:	b29b      	uxth	r3, r3
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 8096 	beq.w	800af38 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800ae0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 8091 	beq.w	800af38 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae1e:	e853 3f00 	ldrex	r3, [r3]
 800ae22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ae24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	461a      	mov	r2, r3
 800ae34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800ae38:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae3a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ae3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ae40:	e841 2300 	strex	r3, r2, [r1]
 800ae44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ae46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1e4      	bne.n	800ae16 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	3308      	adds	r3, #8
 800ae52:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae56:	e853 3f00 	ldrex	r3, [r3]
 800ae5a:	623b      	str	r3, [r7, #32]
   return(result);
 800ae5c:	6a3b      	ldr	r3, [r7, #32]
 800ae5e:	f023 0301 	bic.w	r3, r3, #1
 800ae62:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	3308      	adds	r3, #8
 800ae6c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ae70:	633a      	str	r2, [r7, #48]	@ 0x30
 800ae72:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ae76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae78:	e841 2300 	strex	r3, r2, [r1]
 800ae7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ae7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d1e3      	bne.n	800ae4c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2220      	movs	r2, #32
 800ae88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2200      	movs	r2, #0
 800ae90:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	e853 3f00 	ldrex	r3, [r3]
 800aea4:	60fb      	str	r3, [r7, #12]
   return(result);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f023 0310 	bic.w	r3, r3, #16
 800aeac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	461a      	mov	r2, r3
 800aeb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aeba:	61fb      	str	r3, [r7, #28]
 800aebc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aebe:	69b9      	ldr	r1, [r7, #24]
 800aec0:	69fa      	ldr	r2, [r7, #28]
 800aec2:	e841 2300 	strex	r3, r2, [r1]
 800aec6:	617b      	str	r3, [r7, #20]
   return(result);
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d1e4      	bne.n	800ae98 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2202      	movs	r2, #2
 800aed2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aed4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aed8:	4619      	mov	r1, r3
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f846 	bl	800af6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aee0:	e02a      	b.n	800af38 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800aee2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d00e      	beq.n	800af0c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800aeee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aef2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d008      	beq.n	800af0c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d01c      	beq.n	800af3c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	4798      	blx	r3
    }
    return;
 800af0a:	e017      	b.n	800af3c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800af0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	d012      	beq.n	800af3e <HAL_UART_IRQHandler+0x59e>
 800af18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af20:	2b00      	cmp	r3, #0
 800af22:	d00c      	beq.n	800af3e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 fd71 	bl	800ba0c <UART_EndTransmit_IT>
    return;
 800af2a:	e008      	b.n	800af3e <HAL_UART_IRQHandler+0x59e>
      return;
 800af2c:	bf00      	nop
 800af2e:	e006      	b.n	800af3e <HAL_UART_IRQHandler+0x59e>
    return;
 800af30:	bf00      	nop
 800af32:	e004      	b.n	800af3e <HAL_UART_IRQHandler+0x59e>
      return;
 800af34:	bf00      	nop
 800af36:	e002      	b.n	800af3e <HAL_UART_IRQHandler+0x59e>
      return;
 800af38:	bf00      	nop
 800af3a:	e000      	b.n	800af3e <HAL_UART_IRQHandler+0x59e>
    return;
 800af3c:	bf00      	nop
  }

}
 800af3e:	37e8      	adds	r7, #232	@ 0xe8
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}

0800af44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800af4c:	bf00      	nop
 800af4e:	370c      	adds	r7, #12
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800af60:	bf00      	nop
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
 800af74:	460b      	mov	r3, r1
 800af76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b088      	sub	sp, #32
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800af8c:	2300      	movs	r3, #0
 800af8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	689a      	ldr	r2, [r3, #8]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	691b      	ldr	r3, [r3, #16]
 800af98:	431a      	orrs	r2, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	431a      	orrs	r2, r3
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	69db      	ldr	r3, [r3, #28]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	4ba6      	ldr	r3, [pc, #664]	@ (800b248 <UART_SetConfig+0x2c4>)
 800afb0:	4013      	ands	r3, r2
 800afb2:	687a      	ldr	r2, [r7, #4]
 800afb4:	6812      	ldr	r2, [r2, #0]
 800afb6:	6979      	ldr	r1, [r7, #20]
 800afb8:	430b      	orrs	r3, r1
 800afba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	685b      	ldr	r3, [r3, #4]
 800afc2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	68da      	ldr	r2, [r3, #12]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	430a      	orrs	r2, r1
 800afd0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6a1b      	ldr	r3, [r3, #32]
 800afdc:	697a      	ldr	r2, [r7, #20]
 800afde:	4313      	orrs	r3, r2
 800afe0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	689b      	ldr	r3, [r3, #8]
 800afe8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	697a      	ldr	r2, [r7, #20]
 800aff2:	430a      	orrs	r2, r1
 800aff4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	4a94      	ldr	r2, [pc, #592]	@ (800b24c <UART_SetConfig+0x2c8>)
 800affc:	4293      	cmp	r3, r2
 800affe:	d120      	bne.n	800b042 <UART_SetConfig+0xbe>
 800b000:	4b93      	ldr	r3, [pc, #588]	@ (800b250 <UART_SetConfig+0x2cc>)
 800b002:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b006:	f003 0303 	and.w	r3, r3, #3
 800b00a:	2b03      	cmp	r3, #3
 800b00c:	d816      	bhi.n	800b03c <UART_SetConfig+0xb8>
 800b00e:	a201      	add	r2, pc, #4	@ (adr r2, 800b014 <UART_SetConfig+0x90>)
 800b010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b014:	0800b025 	.word	0x0800b025
 800b018:	0800b031 	.word	0x0800b031
 800b01c:	0800b02b 	.word	0x0800b02b
 800b020:	0800b037 	.word	0x0800b037
 800b024:	2301      	movs	r3, #1
 800b026:	77fb      	strb	r3, [r7, #31]
 800b028:	e150      	b.n	800b2cc <UART_SetConfig+0x348>
 800b02a:	2302      	movs	r3, #2
 800b02c:	77fb      	strb	r3, [r7, #31]
 800b02e:	e14d      	b.n	800b2cc <UART_SetConfig+0x348>
 800b030:	2304      	movs	r3, #4
 800b032:	77fb      	strb	r3, [r7, #31]
 800b034:	e14a      	b.n	800b2cc <UART_SetConfig+0x348>
 800b036:	2308      	movs	r3, #8
 800b038:	77fb      	strb	r3, [r7, #31]
 800b03a:	e147      	b.n	800b2cc <UART_SetConfig+0x348>
 800b03c:	2310      	movs	r3, #16
 800b03e:	77fb      	strb	r3, [r7, #31]
 800b040:	e144      	b.n	800b2cc <UART_SetConfig+0x348>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a83      	ldr	r2, [pc, #524]	@ (800b254 <UART_SetConfig+0x2d0>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d132      	bne.n	800b0b2 <UART_SetConfig+0x12e>
 800b04c:	4b80      	ldr	r3, [pc, #512]	@ (800b250 <UART_SetConfig+0x2cc>)
 800b04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b052:	f003 030c 	and.w	r3, r3, #12
 800b056:	2b0c      	cmp	r3, #12
 800b058:	d828      	bhi.n	800b0ac <UART_SetConfig+0x128>
 800b05a:	a201      	add	r2, pc, #4	@ (adr r2, 800b060 <UART_SetConfig+0xdc>)
 800b05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b060:	0800b095 	.word	0x0800b095
 800b064:	0800b0ad 	.word	0x0800b0ad
 800b068:	0800b0ad 	.word	0x0800b0ad
 800b06c:	0800b0ad 	.word	0x0800b0ad
 800b070:	0800b0a1 	.word	0x0800b0a1
 800b074:	0800b0ad 	.word	0x0800b0ad
 800b078:	0800b0ad 	.word	0x0800b0ad
 800b07c:	0800b0ad 	.word	0x0800b0ad
 800b080:	0800b09b 	.word	0x0800b09b
 800b084:	0800b0ad 	.word	0x0800b0ad
 800b088:	0800b0ad 	.word	0x0800b0ad
 800b08c:	0800b0ad 	.word	0x0800b0ad
 800b090:	0800b0a7 	.word	0x0800b0a7
 800b094:	2300      	movs	r3, #0
 800b096:	77fb      	strb	r3, [r7, #31]
 800b098:	e118      	b.n	800b2cc <UART_SetConfig+0x348>
 800b09a:	2302      	movs	r3, #2
 800b09c:	77fb      	strb	r3, [r7, #31]
 800b09e:	e115      	b.n	800b2cc <UART_SetConfig+0x348>
 800b0a0:	2304      	movs	r3, #4
 800b0a2:	77fb      	strb	r3, [r7, #31]
 800b0a4:	e112      	b.n	800b2cc <UART_SetConfig+0x348>
 800b0a6:	2308      	movs	r3, #8
 800b0a8:	77fb      	strb	r3, [r7, #31]
 800b0aa:	e10f      	b.n	800b2cc <UART_SetConfig+0x348>
 800b0ac:	2310      	movs	r3, #16
 800b0ae:	77fb      	strb	r3, [r7, #31]
 800b0b0:	e10c      	b.n	800b2cc <UART_SetConfig+0x348>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a68      	ldr	r2, [pc, #416]	@ (800b258 <UART_SetConfig+0x2d4>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d120      	bne.n	800b0fe <UART_SetConfig+0x17a>
 800b0bc:	4b64      	ldr	r3, [pc, #400]	@ (800b250 <UART_SetConfig+0x2cc>)
 800b0be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b0c2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b0c6:	2b30      	cmp	r3, #48	@ 0x30
 800b0c8:	d013      	beq.n	800b0f2 <UART_SetConfig+0x16e>
 800b0ca:	2b30      	cmp	r3, #48	@ 0x30
 800b0cc:	d814      	bhi.n	800b0f8 <UART_SetConfig+0x174>
 800b0ce:	2b20      	cmp	r3, #32
 800b0d0:	d009      	beq.n	800b0e6 <UART_SetConfig+0x162>
 800b0d2:	2b20      	cmp	r3, #32
 800b0d4:	d810      	bhi.n	800b0f8 <UART_SetConfig+0x174>
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d002      	beq.n	800b0e0 <UART_SetConfig+0x15c>
 800b0da:	2b10      	cmp	r3, #16
 800b0dc:	d006      	beq.n	800b0ec <UART_SetConfig+0x168>
 800b0de:	e00b      	b.n	800b0f8 <UART_SetConfig+0x174>
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	77fb      	strb	r3, [r7, #31]
 800b0e4:	e0f2      	b.n	800b2cc <UART_SetConfig+0x348>
 800b0e6:	2302      	movs	r3, #2
 800b0e8:	77fb      	strb	r3, [r7, #31]
 800b0ea:	e0ef      	b.n	800b2cc <UART_SetConfig+0x348>
 800b0ec:	2304      	movs	r3, #4
 800b0ee:	77fb      	strb	r3, [r7, #31]
 800b0f0:	e0ec      	b.n	800b2cc <UART_SetConfig+0x348>
 800b0f2:	2308      	movs	r3, #8
 800b0f4:	77fb      	strb	r3, [r7, #31]
 800b0f6:	e0e9      	b.n	800b2cc <UART_SetConfig+0x348>
 800b0f8:	2310      	movs	r3, #16
 800b0fa:	77fb      	strb	r3, [r7, #31]
 800b0fc:	e0e6      	b.n	800b2cc <UART_SetConfig+0x348>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a56      	ldr	r2, [pc, #344]	@ (800b25c <UART_SetConfig+0x2d8>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d120      	bne.n	800b14a <UART_SetConfig+0x1c6>
 800b108:	4b51      	ldr	r3, [pc, #324]	@ (800b250 <UART_SetConfig+0x2cc>)
 800b10a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b10e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b112:	2bc0      	cmp	r3, #192	@ 0xc0
 800b114:	d013      	beq.n	800b13e <UART_SetConfig+0x1ba>
 800b116:	2bc0      	cmp	r3, #192	@ 0xc0
 800b118:	d814      	bhi.n	800b144 <UART_SetConfig+0x1c0>
 800b11a:	2b80      	cmp	r3, #128	@ 0x80
 800b11c:	d009      	beq.n	800b132 <UART_SetConfig+0x1ae>
 800b11e:	2b80      	cmp	r3, #128	@ 0x80
 800b120:	d810      	bhi.n	800b144 <UART_SetConfig+0x1c0>
 800b122:	2b00      	cmp	r3, #0
 800b124:	d002      	beq.n	800b12c <UART_SetConfig+0x1a8>
 800b126:	2b40      	cmp	r3, #64	@ 0x40
 800b128:	d006      	beq.n	800b138 <UART_SetConfig+0x1b4>
 800b12a:	e00b      	b.n	800b144 <UART_SetConfig+0x1c0>
 800b12c:	2300      	movs	r3, #0
 800b12e:	77fb      	strb	r3, [r7, #31]
 800b130:	e0cc      	b.n	800b2cc <UART_SetConfig+0x348>
 800b132:	2302      	movs	r3, #2
 800b134:	77fb      	strb	r3, [r7, #31]
 800b136:	e0c9      	b.n	800b2cc <UART_SetConfig+0x348>
 800b138:	2304      	movs	r3, #4
 800b13a:	77fb      	strb	r3, [r7, #31]
 800b13c:	e0c6      	b.n	800b2cc <UART_SetConfig+0x348>
 800b13e:	2308      	movs	r3, #8
 800b140:	77fb      	strb	r3, [r7, #31]
 800b142:	e0c3      	b.n	800b2cc <UART_SetConfig+0x348>
 800b144:	2310      	movs	r3, #16
 800b146:	77fb      	strb	r3, [r7, #31]
 800b148:	e0c0      	b.n	800b2cc <UART_SetConfig+0x348>
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	4a44      	ldr	r2, [pc, #272]	@ (800b260 <UART_SetConfig+0x2dc>)
 800b150:	4293      	cmp	r3, r2
 800b152:	d125      	bne.n	800b1a0 <UART_SetConfig+0x21c>
 800b154:	4b3e      	ldr	r3, [pc, #248]	@ (800b250 <UART_SetConfig+0x2cc>)
 800b156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b15a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b15e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b162:	d017      	beq.n	800b194 <UART_SetConfig+0x210>
 800b164:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b168:	d817      	bhi.n	800b19a <UART_SetConfig+0x216>
 800b16a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b16e:	d00b      	beq.n	800b188 <UART_SetConfig+0x204>
 800b170:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b174:	d811      	bhi.n	800b19a <UART_SetConfig+0x216>
 800b176:	2b00      	cmp	r3, #0
 800b178:	d003      	beq.n	800b182 <UART_SetConfig+0x1fe>
 800b17a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b17e:	d006      	beq.n	800b18e <UART_SetConfig+0x20a>
 800b180:	e00b      	b.n	800b19a <UART_SetConfig+0x216>
 800b182:	2300      	movs	r3, #0
 800b184:	77fb      	strb	r3, [r7, #31]
 800b186:	e0a1      	b.n	800b2cc <UART_SetConfig+0x348>
 800b188:	2302      	movs	r3, #2
 800b18a:	77fb      	strb	r3, [r7, #31]
 800b18c:	e09e      	b.n	800b2cc <UART_SetConfig+0x348>
 800b18e:	2304      	movs	r3, #4
 800b190:	77fb      	strb	r3, [r7, #31]
 800b192:	e09b      	b.n	800b2cc <UART_SetConfig+0x348>
 800b194:	2308      	movs	r3, #8
 800b196:	77fb      	strb	r3, [r7, #31]
 800b198:	e098      	b.n	800b2cc <UART_SetConfig+0x348>
 800b19a:	2310      	movs	r3, #16
 800b19c:	77fb      	strb	r3, [r7, #31]
 800b19e:	e095      	b.n	800b2cc <UART_SetConfig+0x348>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4a2f      	ldr	r2, [pc, #188]	@ (800b264 <UART_SetConfig+0x2e0>)
 800b1a6:	4293      	cmp	r3, r2
 800b1a8:	d125      	bne.n	800b1f6 <UART_SetConfig+0x272>
 800b1aa:	4b29      	ldr	r3, [pc, #164]	@ (800b250 <UART_SetConfig+0x2cc>)
 800b1ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b1b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b1b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b1b8:	d017      	beq.n	800b1ea <UART_SetConfig+0x266>
 800b1ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b1be:	d817      	bhi.n	800b1f0 <UART_SetConfig+0x26c>
 800b1c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1c4:	d00b      	beq.n	800b1de <UART_SetConfig+0x25a>
 800b1c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1ca:	d811      	bhi.n	800b1f0 <UART_SetConfig+0x26c>
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d003      	beq.n	800b1d8 <UART_SetConfig+0x254>
 800b1d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b1d4:	d006      	beq.n	800b1e4 <UART_SetConfig+0x260>
 800b1d6:	e00b      	b.n	800b1f0 <UART_SetConfig+0x26c>
 800b1d8:	2301      	movs	r3, #1
 800b1da:	77fb      	strb	r3, [r7, #31]
 800b1dc:	e076      	b.n	800b2cc <UART_SetConfig+0x348>
 800b1de:	2302      	movs	r3, #2
 800b1e0:	77fb      	strb	r3, [r7, #31]
 800b1e2:	e073      	b.n	800b2cc <UART_SetConfig+0x348>
 800b1e4:	2304      	movs	r3, #4
 800b1e6:	77fb      	strb	r3, [r7, #31]
 800b1e8:	e070      	b.n	800b2cc <UART_SetConfig+0x348>
 800b1ea:	2308      	movs	r3, #8
 800b1ec:	77fb      	strb	r3, [r7, #31]
 800b1ee:	e06d      	b.n	800b2cc <UART_SetConfig+0x348>
 800b1f0:	2310      	movs	r3, #16
 800b1f2:	77fb      	strb	r3, [r7, #31]
 800b1f4:	e06a      	b.n	800b2cc <UART_SetConfig+0x348>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a1b      	ldr	r2, [pc, #108]	@ (800b268 <UART_SetConfig+0x2e4>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d138      	bne.n	800b272 <UART_SetConfig+0x2ee>
 800b200:	4b13      	ldr	r3, [pc, #76]	@ (800b250 <UART_SetConfig+0x2cc>)
 800b202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b206:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b20a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b20e:	d017      	beq.n	800b240 <UART_SetConfig+0x2bc>
 800b210:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b214:	d82a      	bhi.n	800b26c <UART_SetConfig+0x2e8>
 800b216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b21a:	d00b      	beq.n	800b234 <UART_SetConfig+0x2b0>
 800b21c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b220:	d824      	bhi.n	800b26c <UART_SetConfig+0x2e8>
 800b222:	2b00      	cmp	r3, #0
 800b224:	d003      	beq.n	800b22e <UART_SetConfig+0x2aa>
 800b226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b22a:	d006      	beq.n	800b23a <UART_SetConfig+0x2b6>
 800b22c:	e01e      	b.n	800b26c <UART_SetConfig+0x2e8>
 800b22e:	2300      	movs	r3, #0
 800b230:	77fb      	strb	r3, [r7, #31]
 800b232:	e04b      	b.n	800b2cc <UART_SetConfig+0x348>
 800b234:	2302      	movs	r3, #2
 800b236:	77fb      	strb	r3, [r7, #31]
 800b238:	e048      	b.n	800b2cc <UART_SetConfig+0x348>
 800b23a:	2304      	movs	r3, #4
 800b23c:	77fb      	strb	r3, [r7, #31]
 800b23e:	e045      	b.n	800b2cc <UART_SetConfig+0x348>
 800b240:	2308      	movs	r3, #8
 800b242:	77fb      	strb	r3, [r7, #31]
 800b244:	e042      	b.n	800b2cc <UART_SetConfig+0x348>
 800b246:	bf00      	nop
 800b248:	efff69f3 	.word	0xefff69f3
 800b24c:	40011000 	.word	0x40011000
 800b250:	40023800 	.word	0x40023800
 800b254:	40004400 	.word	0x40004400
 800b258:	40004800 	.word	0x40004800
 800b25c:	40004c00 	.word	0x40004c00
 800b260:	40005000 	.word	0x40005000
 800b264:	40011400 	.word	0x40011400
 800b268:	40007800 	.word	0x40007800
 800b26c:	2310      	movs	r3, #16
 800b26e:	77fb      	strb	r3, [r7, #31]
 800b270:	e02c      	b.n	800b2cc <UART_SetConfig+0x348>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a72      	ldr	r2, [pc, #456]	@ (800b440 <UART_SetConfig+0x4bc>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d125      	bne.n	800b2c8 <UART_SetConfig+0x344>
 800b27c:	4b71      	ldr	r3, [pc, #452]	@ (800b444 <UART_SetConfig+0x4c0>)
 800b27e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b282:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b286:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b28a:	d017      	beq.n	800b2bc <UART_SetConfig+0x338>
 800b28c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b290:	d817      	bhi.n	800b2c2 <UART_SetConfig+0x33e>
 800b292:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b296:	d00b      	beq.n	800b2b0 <UART_SetConfig+0x32c>
 800b298:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b29c:	d811      	bhi.n	800b2c2 <UART_SetConfig+0x33e>
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d003      	beq.n	800b2aa <UART_SetConfig+0x326>
 800b2a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b2a6:	d006      	beq.n	800b2b6 <UART_SetConfig+0x332>
 800b2a8:	e00b      	b.n	800b2c2 <UART_SetConfig+0x33e>
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	77fb      	strb	r3, [r7, #31]
 800b2ae:	e00d      	b.n	800b2cc <UART_SetConfig+0x348>
 800b2b0:	2302      	movs	r3, #2
 800b2b2:	77fb      	strb	r3, [r7, #31]
 800b2b4:	e00a      	b.n	800b2cc <UART_SetConfig+0x348>
 800b2b6:	2304      	movs	r3, #4
 800b2b8:	77fb      	strb	r3, [r7, #31]
 800b2ba:	e007      	b.n	800b2cc <UART_SetConfig+0x348>
 800b2bc:	2308      	movs	r3, #8
 800b2be:	77fb      	strb	r3, [r7, #31]
 800b2c0:	e004      	b.n	800b2cc <UART_SetConfig+0x348>
 800b2c2:	2310      	movs	r3, #16
 800b2c4:	77fb      	strb	r3, [r7, #31]
 800b2c6:	e001      	b.n	800b2cc <UART_SetConfig+0x348>
 800b2c8:	2310      	movs	r3, #16
 800b2ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	69db      	ldr	r3, [r3, #28]
 800b2d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b2d4:	d15b      	bne.n	800b38e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b2d6:	7ffb      	ldrb	r3, [r7, #31]
 800b2d8:	2b08      	cmp	r3, #8
 800b2da:	d828      	bhi.n	800b32e <UART_SetConfig+0x3aa>
 800b2dc:	a201      	add	r2, pc, #4	@ (adr r2, 800b2e4 <UART_SetConfig+0x360>)
 800b2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2e2:	bf00      	nop
 800b2e4:	0800b309 	.word	0x0800b309
 800b2e8:	0800b311 	.word	0x0800b311
 800b2ec:	0800b319 	.word	0x0800b319
 800b2f0:	0800b32f 	.word	0x0800b32f
 800b2f4:	0800b31f 	.word	0x0800b31f
 800b2f8:	0800b32f 	.word	0x0800b32f
 800b2fc:	0800b32f 	.word	0x0800b32f
 800b300:	0800b32f 	.word	0x0800b32f
 800b304:	0800b327 	.word	0x0800b327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b308:	f7fc fd72 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 800b30c:	61b8      	str	r0, [r7, #24]
        break;
 800b30e:	e013      	b.n	800b338 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b310:	f7fc fd82 	bl	8007e18 <HAL_RCC_GetPCLK2Freq>
 800b314:	61b8      	str	r0, [r7, #24]
        break;
 800b316:	e00f      	b.n	800b338 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b318:	4b4b      	ldr	r3, [pc, #300]	@ (800b448 <UART_SetConfig+0x4c4>)
 800b31a:	61bb      	str	r3, [r7, #24]
        break;
 800b31c:	e00c      	b.n	800b338 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b31e:	f7fc fc95 	bl	8007c4c <HAL_RCC_GetSysClockFreq>
 800b322:	61b8      	str	r0, [r7, #24]
        break;
 800b324:	e008      	b.n	800b338 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b32a:	61bb      	str	r3, [r7, #24]
        break;
 800b32c:	e004      	b.n	800b338 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b32e:	2300      	movs	r3, #0
 800b330:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b332:	2301      	movs	r3, #1
 800b334:	77bb      	strb	r3, [r7, #30]
        break;
 800b336:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d074      	beq.n	800b428 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b33e:	69bb      	ldr	r3, [r7, #24]
 800b340:	005a      	lsls	r2, r3, #1
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	085b      	lsrs	r3, r3, #1
 800b348:	441a      	add	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b352:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	2b0f      	cmp	r3, #15
 800b358:	d916      	bls.n	800b388 <UART_SetConfig+0x404>
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b360:	d212      	bcs.n	800b388 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	b29b      	uxth	r3, r3
 800b366:	f023 030f 	bic.w	r3, r3, #15
 800b36a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	085b      	lsrs	r3, r3, #1
 800b370:	b29b      	uxth	r3, r3
 800b372:	f003 0307 	and.w	r3, r3, #7
 800b376:	b29a      	uxth	r2, r3
 800b378:	89fb      	ldrh	r3, [r7, #14]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	89fa      	ldrh	r2, [r7, #14]
 800b384:	60da      	str	r2, [r3, #12]
 800b386:	e04f      	b.n	800b428 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b388:	2301      	movs	r3, #1
 800b38a:	77bb      	strb	r3, [r7, #30]
 800b38c:	e04c      	b.n	800b428 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b38e:	7ffb      	ldrb	r3, [r7, #31]
 800b390:	2b08      	cmp	r3, #8
 800b392:	d828      	bhi.n	800b3e6 <UART_SetConfig+0x462>
 800b394:	a201      	add	r2, pc, #4	@ (adr r2, 800b39c <UART_SetConfig+0x418>)
 800b396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b39a:	bf00      	nop
 800b39c:	0800b3c1 	.word	0x0800b3c1
 800b3a0:	0800b3c9 	.word	0x0800b3c9
 800b3a4:	0800b3d1 	.word	0x0800b3d1
 800b3a8:	0800b3e7 	.word	0x0800b3e7
 800b3ac:	0800b3d7 	.word	0x0800b3d7
 800b3b0:	0800b3e7 	.word	0x0800b3e7
 800b3b4:	0800b3e7 	.word	0x0800b3e7
 800b3b8:	0800b3e7 	.word	0x0800b3e7
 800b3bc:	0800b3df 	.word	0x0800b3df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b3c0:	f7fc fd16 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 800b3c4:	61b8      	str	r0, [r7, #24]
        break;
 800b3c6:	e013      	b.n	800b3f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b3c8:	f7fc fd26 	bl	8007e18 <HAL_RCC_GetPCLK2Freq>
 800b3cc:	61b8      	str	r0, [r7, #24]
        break;
 800b3ce:	e00f      	b.n	800b3f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b3d0:	4b1d      	ldr	r3, [pc, #116]	@ (800b448 <UART_SetConfig+0x4c4>)
 800b3d2:	61bb      	str	r3, [r7, #24]
        break;
 800b3d4:	e00c      	b.n	800b3f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3d6:	f7fc fc39 	bl	8007c4c <HAL_RCC_GetSysClockFreq>
 800b3da:	61b8      	str	r0, [r7, #24]
        break;
 800b3dc:	e008      	b.n	800b3f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b3de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b3e2:	61bb      	str	r3, [r7, #24]
        break;
 800b3e4:	e004      	b.n	800b3f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	77bb      	strb	r3, [r7, #30]
        break;
 800b3ee:	bf00      	nop
    }

    if (pclk != 0U)
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d018      	beq.n	800b428 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	085a      	lsrs	r2, r3, #1
 800b3fc:	69bb      	ldr	r3, [r7, #24]
 800b3fe:	441a      	add	r2, r3
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	fbb2 f3f3 	udiv	r3, r2, r3
 800b408:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b40a:	693b      	ldr	r3, [r7, #16]
 800b40c:	2b0f      	cmp	r3, #15
 800b40e:	d909      	bls.n	800b424 <UART_SetConfig+0x4a0>
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b416:	d205      	bcs.n	800b424 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	60da      	str	r2, [r3, #12]
 800b422:	e001      	b.n	800b428 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b424:	2301      	movs	r3, #1
 800b426:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b434:	7fbb      	ldrb	r3, [r7, #30]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3720      	adds	r7, #32
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	40007c00 	.word	0x40007c00
 800b444:	40023800 	.word	0x40023800
 800b448:	00f42400 	.word	0x00f42400

0800b44c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b458:	f003 0301 	and.w	r3, r3, #1
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d00a      	beq.n	800b476 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	430a      	orrs	r2, r1
 800b474:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b47a:	f003 0302 	and.w	r3, r3, #2
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d00a      	beq.n	800b498 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	430a      	orrs	r2, r1
 800b496:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b49c:	f003 0304 	and.w	r3, r3, #4
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d00a      	beq.n	800b4ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	430a      	orrs	r2, r1
 800b4b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4be:	f003 0308 	and.w	r3, r3, #8
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d00a      	beq.n	800b4dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	430a      	orrs	r2, r1
 800b4da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4e0:	f003 0310 	and.w	r3, r3, #16
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d00a      	beq.n	800b4fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	689b      	ldr	r3, [r3, #8]
 800b4ee:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	430a      	orrs	r2, r1
 800b4fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b502:	f003 0320 	and.w	r3, r3, #32
 800b506:	2b00      	cmp	r3, #0
 800b508:	d00a      	beq.n	800b520 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	430a      	orrs	r2, r1
 800b51e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d01a      	beq.n	800b562 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	685b      	ldr	r3, [r3, #4]
 800b532:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	430a      	orrs	r2, r1
 800b540:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b546:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b54a:	d10a      	bne.n	800b562 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	430a      	orrs	r2, r1
 800b560:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b566:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d00a      	beq.n	800b584 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	430a      	orrs	r2, r1
 800b582:	605a      	str	r2, [r3, #4]
  }
}
 800b584:	bf00      	nop
 800b586:	370c      	adds	r7, #12
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b086      	sub	sp, #24
 800b594:	af02      	add	r7, sp, #8
 800b596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2200      	movs	r2, #0
 800b59c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b5a0:	f7f8 ffc8 	bl	8004534 <HAL_GetTick>
 800b5a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0308 	and.w	r3, r3, #8
 800b5b0:	2b08      	cmp	r3, #8
 800b5b2:	d10e      	bne.n	800b5d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5b4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b5b8:	9300      	str	r3, [sp, #0]
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f81b 	bl	800b5fe <UART_WaitOnFlagUntilTimeout>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d001      	beq.n	800b5d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5ce:	2303      	movs	r3, #3
 800b5d0:	e011      	b.n	800b5f6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2220      	movs	r2, #32
 800b5d6:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800b5f4:	2300      	movs	r3, #0
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b09c      	sub	sp, #112	@ 0x70
 800b602:	af00      	add	r7, sp, #0
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	60b9      	str	r1, [r7, #8]
 800b608:	603b      	str	r3, [r7, #0]
 800b60a:	4613      	mov	r3, r2
 800b60c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b60e:	e0a7      	b.n	800b760 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b610:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b616:	f000 80a3 	beq.w	800b760 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b61a:	f7f8 ff8b 	bl	8004534 <HAL_GetTick>
 800b61e:	4602      	mov	r2, r0
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	1ad3      	subs	r3, r2, r3
 800b624:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800b626:	429a      	cmp	r2, r3
 800b628:	d302      	bcc.n	800b630 <UART_WaitOnFlagUntilTimeout+0x32>
 800b62a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d13f      	bne.n	800b6b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b636:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b638:	e853 3f00 	ldrex	r3, [r3]
 800b63c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800b63e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b640:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b644:	667b      	str	r3, [r7, #100]	@ 0x64
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	461a      	mov	r2, r3
 800b64c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b64e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b650:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b652:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800b654:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800b656:	e841 2300 	strex	r3, r2, [r1]
 800b65a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800b65c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d1e6      	bne.n	800b630 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	3308      	adds	r3, #8
 800b668:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b66a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b66c:	e853 3f00 	ldrex	r3, [r3]
 800b670:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b674:	f023 0301 	bic.w	r3, r3, #1
 800b678:	663b      	str	r3, [r7, #96]	@ 0x60
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	3308      	adds	r3, #8
 800b680:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b682:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b684:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b686:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b688:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b68a:	e841 2300 	strex	r3, r2, [r1]
 800b68e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b690:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b692:	2b00      	cmp	r3, #0
 800b694:	d1e5      	bne.n	800b662 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	2220      	movs	r2, #32
 800b69a:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	2220      	movs	r2, #32
 800b6a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	e068      	b.n	800b782 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f003 0304 	and.w	r3, r3, #4
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d050      	beq.n	800b760 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	69db      	ldr	r3, [r3, #28]
 800b6c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b6c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6cc:	d148      	bne.n	800b760 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b6d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6e0:	e853 3f00 	ldrex	r3, [r3]
 800b6e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e8:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800b6ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	461a      	mov	r2, r3
 800b6f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b6f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6f8:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b6fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b6fe:	e841 2300 	strex	r3, r2, [r1]
 800b702:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b706:	2b00      	cmp	r3, #0
 800b708:	d1e6      	bne.n	800b6d8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	3308      	adds	r3, #8
 800b710:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b712:	697b      	ldr	r3, [r7, #20]
 800b714:	e853 3f00 	ldrex	r3, [r3]
 800b718:	613b      	str	r3, [r7, #16]
   return(result);
 800b71a:	693b      	ldr	r3, [r7, #16]
 800b71c:	f023 0301 	bic.w	r3, r3, #1
 800b720:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3308      	adds	r3, #8
 800b728:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b72a:	623a      	str	r2, [r7, #32]
 800b72c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b72e:	69f9      	ldr	r1, [r7, #28]
 800b730:	6a3a      	ldr	r2, [r7, #32]
 800b732:	e841 2300 	strex	r3, r2, [r1]
 800b736:	61bb      	str	r3, [r7, #24]
   return(result);
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d1e5      	bne.n	800b70a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2220      	movs	r2, #32
 800b742:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	2220      	movs	r2, #32
 800b748:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2220      	movs	r2, #32
 800b750:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2200      	movs	r2, #0
 800b758:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800b75c:	2303      	movs	r3, #3
 800b75e:	e010      	b.n	800b782 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	69da      	ldr	r2, [r3, #28]
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	4013      	ands	r3, r2
 800b76a:	68ba      	ldr	r2, [r7, #8]
 800b76c:	429a      	cmp	r2, r3
 800b76e:	bf0c      	ite	eq
 800b770:	2301      	moveq	r3, #1
 800b772:	2300      	movne	r3, #0
 800b774:	b2db      	uxtb	r3, r3
 800b776:	461a      	mov	r2, r3
 800b778:	79fb      	ldrb	r3, [r7, #7]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	f43f af48 	beq.w	800b610 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b780:	2300      	movs	r3, #0
}
 800b782:	4618      	mov	r0, r3
 800b784:	3770      	adds	r7, #112	@ 0x70
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
	...

0800b78c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b097      	sub	sp, #92	@ 0x5c
 800b790:	af00      	add	r7, sp, #0
 800b792:	60f8      	str	r0, [r7, #12]
 800b794:	60b9      	str	r1, [r7, #8]
 800b796:	4613      	mov	r3, r2
 800b798:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	88fa      	ldrh	r2, [r7, #6]
 800b7a4:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	88fa      	ldrh	r2, [r7, #6]
 800b7ac:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	689b      	ldr	r3, [r3, #8]
 800b7ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b7be:	d10e      	bne.n	800b7de <UART_Start_Receive_IT+0x52>
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d105      	bne.n	800b7d4 <UART_Start_Receive_IT+0x48>
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800b7ce:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b7d2:	e02d      	b.n	800b830 <UART_Start_Receive_IT+0xa4>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	22ff      	movs	r2, #255	@ 0xff
 800b7d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b7dc:	e028      	b.n	800b830 <UART_Start_Receive_IT+0xa4>
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d10d      	bne.n	800b802 <UART_Start_Receive_IT+0x76>
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	691b      	ldr	r3, [r3, #16]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d104      	bne.n	800b7f8 <UART_Start_Receive_IT+0x6c>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	22ff      	movs	r2, #255	@ 0xff
 800b7f2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b7f6:	e01b      	b.n	800b830 <UART_Start_Receive_IT+0xa4>
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	227f      	movs	r2, #127	@ 0x7f
 800b7fc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b800:	e016      	b.n	800b830 <UART_Start_Receive_IT+0xa4>
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b80a:	d10d      	bne.n	800b828 <UART_Start_Receive_IT+0x9c>
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	691b      	ldr	r3, [r3, #16]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d104      	bne.n	800b81e <UART_Start_Receive_IT+0x92>
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	227f      	movs	r2, #127	@ 0x7f
 800b818:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b81c:	e008      	b.n	800b830 <UART_Start_Receive_IT+0xa4>
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	223f      	movs	r2, #63	@ 0x3f
 800b822:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800b826:	e003      	b.n	800b830 <UART_Start_Receive_IT+0xa4>
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2200      	movs	r2, #0
 800b834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2222      	movs	r2, #34	@ 0x22
 800b83c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3308      	adds	r3, #8
 800b846:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b84a:	e853 3f00 	ldrex	r3, [r3]
 800b84e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b852:	f043 0301 	orr.w	r3, r3, #1
 800b856:	657b      	str	r3, [r7, #84]	@ 0x54
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3308      	adds	r3, #8
 800b85e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b860:	64ba      	str	r2, [r7, #72]	@ 0x48
 800b862:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b864:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800b866:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b868:	e841 2300 	strex	r3, r2, [r1]
 800b86c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800b86e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b870:	2b00      	cmp	r3, #0
 800b872:	d1e5      	bne.n	800b840 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b87c:	d107      	bne.n	800b88e <UART_Start_Receive_IT+0x102>
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	691b      	ldr	r3, [r3, #16]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d103      	bne.n	800b88e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	4a21      	ldr	r2, [pc, #132]	@ (800b910 <UART_Start_Receive_IT+0x184>)
 800b88a:	669a      	str	r2, [r3, #104]	@ 0x68
 800b88c:	e002      	b.n	800b894 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	4a20      	ldr	r2, [pc, #128]	@ (800b914 <UART_Start_Receive_IT+0x188>)
 800b892:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d019      	beq.n	800b8d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8a4:	e853 3f00 	ldrex	r3, [r3]
 800b8a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8ac:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800b8b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8ba:	637b      	str	r3, [r7, #52]	@ 0x34
 800b8bc:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b8c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8c2:	e841 2300 	strex	r3, r2, [r1]
 800b8c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800b8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e6      	bne.n	800b89c <UART_Start_Receive_IT+0x110>
 800b8ce:	e018      	b.n	800b902 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	e853 3f00 	ldrex	r3, [r3]
 800b8dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	f043 0320 	orr.w	r3, r3, #32
 800b8e4:	653b      	str	r3, [r7, #80]	@ 0x50
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8ee:	623b      	str	r3, [r7, #32]
 800b8f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8f2:	69f9      	ldr	r1, [r7, #28]
 800b8f4:	6a3a      	ldr	r2, [r7, #32]
 800b8f6:	e841 2300 	strex	r3, r2, [r1]
 800b8fa:	61bb      	str	r3, [r7, #24]
   return(result);
 800b8fc:	69bb      	ldr	r3, [r7, #24]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d1e6      	bne.n	800b8d0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	375c      	adds	r7, #92	@ 0x5c
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr
 800b910:	0800bbc7 	.word	0x0800bbc7
 800b914:	0800ba61 	.word	0x0800ba61

0800b918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b918:	b480      	push	{r7}
 800b91a:	b095      	sub	sp, #84	@ 0x54
 800b91c:	af00      	add	r7, sp, #0
 800b91e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b928:	e853 3f00 	ldrex	r3, [r3]
 800b92c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b92e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b930:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b934:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	461a      	mov	r2, r3
 800b93c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b93e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b940:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b942:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b944:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b946:	e841 2300 	strex	r3, r2, [r1]
 800b94a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b94c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d1e6      	bne.n	800b920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	3308      	adds	r3, #8
 800b958:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95a:	6a3b      	ldr	r3, [r7, #32]
 800b95c:	e853 3f00 	ldrex	r3, [r3]
 800b960:	61fb      	str	r3, [r7, #28]
   return(result);
 800b962:	69fb      	ldr	r3, [r7, #28]
 800b964:	f023 0301 	bic.w	r3, r3, #1
 800b968:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3308      	adds	r3, #8
 800b970:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b972:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b974:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b976:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b978:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b97a:	e841 2300 	strex	r3, r2, [r1]
 800b97e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b982:	2b00      	cmp	r3, #0
 800b984:	d1e5      	bne.n	800b952 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d118      	bne.n	800b9c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	e853 3f00 	ldrex	r3, [r3]
 800b99a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	f023 0310 	bic.w	r3, r3, #16
 800b9a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	461a      	mov	r2, r3
 800b9aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b9ac:	61bb      	str	r3, [r7, #24]
 800b9ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9b0:	6979      	ldr	r1, [r7, #20]
 800b9b2:	69ba      	ldr	r2, [r7, #24]
 800b9b4:	e841 2300 	strex	r3, r2, [r1]
 800b9b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d1e6      	bne.n	800b98e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2220      	movs	r2, #32
 800b9c4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2200      	movs	r2, #0
 800b9d2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800b9d4:	bf00      	nop
 800b9d6:	3754      	adds	r7, #84	@ 0x54
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	2200      	movs	r2, #0
 800b9fa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b9fe:	68f8      	ldr	r0, [r7, #12]
 800ba00:	f7ff faaa 	bl	800af58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba04:	bf00      	nop
 800ba06:	3710      	adds	r7, #16
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b088      	sub	sp, #32
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	e853 3f00 	ldrex	r3, [r3]
 800ba20:	60bb      	str	r3, [r7, #8]
   return(result);
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ba28:	61fb      	str	r3, [r7, #28]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	61bb      	str	r3, [r7, #24]
 800ba34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba36:	6979      	ldr	r1, [r7, #20]
 800ba38:	69ba      	ldr	r2, [r7, #24]
 800ba3a:	e841 2300 	strex	r3, r2, [r1]
 800ba3e:	613b      	str	r3, [r7, #16]
   return(result);
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1e6      	bne.n	800ba14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	2220      	movs	r2, #32
 800ba4a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f7ff fa76 	bl	800af44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ba58:	bf00      	nop
 800ba5a:	3720      	adds	r7, #32
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ba60:	b580      	push	{r7, lr}
 800ba62:	b096      	sub	sp, #88	@ 0x58
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800ba6e:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba78:	2b22      	cmp	r3, #34	@ 0x22
 800ba7a:	f040 8098 	bne.w	800bbae <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba84:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ba88:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800ba8c:	b2d9      	uxtb	r1, r3
 800ba8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800ba92:	b2da      	uxtb	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ba98:	400a      	ands	r2, r1
 800ba9a:	b2d2      	uxtb	r2, r2
 800ba9c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800baae:	b29b      	uxth	r3, r3
 800bab0:	3b01      	subs	r3, #1
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d17b      	bne.n	800bbbe <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bacc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bace:	e853 3f00 	ldrex	r3, [r3]
 800bad2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bad6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bada:	653b      	str	r3, [r7, #80]	@ 0x50
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	461a      	mov	r2, r3
 800bae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bae4:	647b      	str	r3, [r7, #68]	@ 0x44
 800bae6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bae8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800baea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800baec:	e841 2300 	strex	r3, r2, [r1]
 800baf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800baf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d1e6      	bne.n	800bac6 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	3308      	adds	r3, #8
 800bafe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb02:	e853 3f00 	ldrex	r3, [r3]
 800bb06:	623b      	str	r3, [r7, #32]
   return(result);
 800bb08:	6a3b      	ldr	r3, [r7, #32]
 800bb0a:	f023 0301 	bic.w	r3, r3, #1
 800bb0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	3308      	adds	r3, #8
 800bb16:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb18:	633a      	str	r2, [r7, #48]	@ 0x30
 800bb1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bb1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb20:	e841 2300 	strex	r3, r2, [r1]
 800bb24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bb26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1e5      	bne.n	800baf8 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2220      	movs	r2, #32
 800bb30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb44:	2b01      	cmp	r3, #1
 800bb46:	d12e      	bne.n	800bba6 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	e853 3f00 	ldrex	r3, [r3]
 800bb5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f023 0310 	bic.w	r3, r3, #16
 800bb62:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	461a      	mov	r2, r3
 800bb6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bb6c:	61fb      	str	r3, [r7, #28]
 800bb6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb70:	69b9      	ldr	r1, [r7, #24]
 800bb72:	69fa      	ldr	r2, [r7, #28]
 800bb74:	e841 2300 	strex	r3, r2, [r1]
 800bb78:	617b      	str	r3, [r7, #20]
   return(result);
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1e6      	bne.n	800bb4e <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	69db      	ldr	r3, [r3, #28]
 800bb86:	f003 0310 	and.w	r3, r3, #16
 800bb8a:	2b10      	cmp	r3, #16
 800bb8c:	d103      	bne.n	800bb96 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	2210      	movs	r2, #16
 800bb94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7ff f9e4 	bl	800af6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bba4:	e00b      	b.n	800bbbe <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7f6 fa56 	bl	8002058 <HAL_UART_RxCpltCallback>
}
 800bbac:	e007      	b.n	800bbbe <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	699a      	ldr	r2, [r3, #24]
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f042 0208 	orr.w	r2, r2, #8
 800bbbc:	619a      	str	r2, [r3, #24]
}
 800bbbe:	bf00      	nop
 800bbc0:	3758      	adds	r7, #88	@ 0x58
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800bbc6:	b580      	push	{r7, lr}
 800bbc8:	b096      	sub	sp, #88	@ 0x58
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bbd4:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bbde:	2b22      	cmp	r3, #34	@ 0x22
 800bbe0:	f040 8098 	bne.w	800bd14 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbea:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbf2:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800bbf4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800bbf8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800bbfc:	4013      	ands	r3, r2
 800bbfe:	b29a      	uxth	r2, r3
 800bc00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bc02:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc08:	1c9a      	adds	r2, r3, #2
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	3b01      	subs	r3, #1
 800bc18:	b29a      	uxth	r2, r3
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bc26:	b29b      	uxth	r3, r3
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d17b      	bne.n	800bd24 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bc34:	e853 3f00 	ldrex	r3, [r3]
 800bc38:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bc3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc3c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc40:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	461a      	mov	r2, r3
 800bc48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc4a:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc4e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc52:	e841 2300 	strex	r3, r2, [r1]
 800bc56:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d1e6      	bne.n	800bc2c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	3308      	adds	r3, #8
 800bc64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc66:	6a3b      	ldr	r3, [r7, #32]
 800bc68:	e853 3f00 	ldrex	r3, [r3]
 800bc6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	f023 0301 	bic.w	r3, r3, #1
 800bc74:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	3308      	adds	r3, #8
 800bc7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc80:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc86:	e841 2300 	strex	r3, r2, [r1]
 800bc8a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d1e5      	bne.n	800bc5e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2220      	movs	r2, #32
 800bc96:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2200      	movs	r2, #0
 800bca4:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d12e      	bne.n	800bd0c <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	e853 3f00 	ldrex	r3, [r3]
 800bcc0:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcc2:	68bb      	ldr	r3, [r7, #8]
 800bcc4:	f023 0310 	bic.w	r3, r3, #16
 800bcc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	461a      	mov	r2, r3
 800bcd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bcd2:	61bb      	str	r3, [r7, #24]
 800bcd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd6:	6979      	ldr	r1, [r7, #20]
 800bcd8:	69ba      	ldr	r2, [r7, #24]
 800bcda:	e841 2300 	strex	r3, r2, [r1]
 800bcde:	613b      	str	r3, [r7, #16]
   return(result);
 800bce0:	693b      	ldr	r3, [r7, #16]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1e6      	bne.n	800bcb4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	69db      	ldr	r3, [r3, #28]
 800bcec:	f003 0310 	and.w	r3, r3, #16
 800bcf0:	2b10      	cmp	r3, #16
 800bcf2:	d103      	bne.n	800bcfc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	2210      	movs	r2, #16
 800bcfa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800bd02:	4619      	mov	r1, r3
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f7ff f931 	bl	800af6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bd0a:	e00b      	b.n	800bd24 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7f6 f9a3 	bl	8002058 <HAL_UART_RxCpltCallback>
}
 800bd12:	e007      	b.n	800bd24 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	699a      	ldr	r2, [r3, #24]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f042 0208 	orr.w	r2, r2, #8
 800bd22:	619a      	str	r2, [r3, #24]
}
 800bd24:	bf00      	nop
 800bd26:	3758      	adds	r7, #88	@ 0x58
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b083      	sub	sp, #12
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d121      	bne.n	800bd82 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681a      	ldr	r2, [r3, #0]
 800bd42:	4b27      	ldr	r3, [pc, #156]	@ (800bde0 <FMC_SDRAM_Init+0xb4>)
 800bd44:	4013      	ands	r3, r2
 800bd46:	683a      	ldr	r2, [r7, #0]
 800bd48:	6851      	ldr	r1, [r2, #4]
 800bd4a:	683a      	ldr	r2, [r7, #0]
 800bd4c:	6892      	ldr	r2, [r2, #8]
 800bd4e:	4311      	orrs	r1, r2
 800bd50:	683a      	ldr	r2, [r7, #0]
 800bd52:	68d2      	ldr	r2, [r2, #12]
 800bd54:	4311      	orrs	r1, r2
 800bd56:	683a      	ldr	r2, [r7, #0]
 800bd58:	6912      	ldr	r2, [r2, #16]
 800bd5a:	4311      	orrs	r1, r2
 800bd5c:	683a      	ldr	r2, [r7, #0]
 800bd5e:	6952      	ldr	r2, [r2, #20]
 800bd60:	4311      	orrs	r1, r2
 800bd62:	683a      	ldr	r2, [r7, #0]
 800bd64:	6992      	ldr	r2, [r2, #24]
 800bd66:	4311      	orrs	r1, r2
 800bd68:	683a      	ldr	r2, [r7, #0]
 800bd6a:	69d2      	ldr	r2, [r2, #28]
 800bd6c:	4311      	orrs	r1, r2
 800bd6e:	683a      	ldr	r2, [r7, #0]
 800bd70:	6a12      	ldr	r2, [r2, #32]
 800bd72:	4311      	orrs	r1, r2
 800bd74:	683a      	ldr	r2, [r7, #0]
 800bd76:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800bd78:	430a      	orrs	r2, r1
 800bd7a:	431a      	orrs	r2, r3
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	601a      	str	r2, [r3, #0]
 800bd80:	e026      	b.n	800bdd0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	69d9      	ldr	r1, [r3, #28]
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	4319      	orrs	r1, r3
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd98:	430b      	orrs	r3, r1
 800bd9a:	431a      	orrs	r2, r3
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	4b0e      	ldr	r3, [pc, #56]	@ (800bde0 <FMC_SDRAM_Init+0xb4>)
 800bda6:	4013      	ands	r3, r2
 800bda8:	683a      	ldr	r2, [r7, #0]
 800bdaa:	6851      	ldr	r1, [r2, #4]
 800bdac:	683a      	ldr	r2, [r7, #0]
 800bdae:	6892      	ldr	r2, [r2, #8]
 800bdb0:	4311      	orrs	r1, r2
 800bdb2:	683a      	ldr	r2, [r7, #0]
 800bdb4:	68d2      	ldr	r2, [r2, #12]
 800bdb6:	4311      	orrs	r1, r2
 800bdb8:	683a      	ldr	r2, [r7, #0]
 800bdba:	6912      	ldr	r2, [r2, #16]
 800bdbc:	4311      	orrs	r1, r2
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	6952      	ldr	r2, [r2, #20]
 800bdc2:	4311      	orrs	r1, r2
 800bdc4:	683a      	ldr	r2, [r7, #0]
 800bdc6:	6992      	ldr	r2, [r2, #24]
 800bdc8:	430a      	orrs	r2, r1
 800bdca:	431a      	orrs	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	370c      	adds	r7, #12
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	ffff8000 	.word	0xffff8000

0800bde4 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b085      	sub	sp, #20
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	60b9      	str	r1, [r7, #8]
 800bdee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d128      	bne.n	800be48 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	689b      	ldr	r3, [r3, #8]
 800bdfa:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800bdfe:	68bb      	ldr	r3, [r7, #8]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	1e59      	subs	r1, r3, #1
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	3b01      	subs	r3, #1
 800be0a:	011b      	lsls	r3, r3, #4
 800be0c:	4319      	orrs	r1, r3
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	3b01      	subs	r3, #1
 800be14:	021b      	lsls	r3, r3, #8
 800be16:	4319      	orrs	r1, r3
 800be18:	68bb      	ldr	r3, [r7, #8]
 800be1a:	68db      	ldr	r3, [r3, #12]
 800be1c:	3b01      	subs	r3, #1
 800be1e:	031b      	lsls	r3, r3, #12
 800be20:	4319      	orrs	r1, r3
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	691b      	ldr	r3, [r3, #16]
 800be26:	3b01      	subs	r3, #1
 800be28:	041b      	lsls	r3, r3, #16
 800be2a:	4319      	orrs	r1, r3
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	695b      	ldr	r3, [r3, #20]
 800be30:	3b01      	subs	r3, #1
 800be32:	051b      	lsls	r3, r3, #20
 800be34:	4319      	orrs	r1, r3
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	699b      	ldr	r3, [r3, #24]
 800be3a:	3b01      	subs	r3, #1
 800be3c:	061b      	lsls	r3, r3, #24
 800be3e:	430b      	orrs	r3, r1
 800be40:	431a      	orrs	r2, r3
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	609a      	str	r2, [r3, #8]
 800be46:	e02d      	b.n	800bea4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	689a      	ldr	r2, [r3, #8]
 800be4c:	4b19      	ldr	r3, [pc, #100]	@ (800beb4 <FMC_SDRAM_Timing_Init+0xd0>)
 800be4e:	4013      	ands	r3, r2
 800be50:	68ba      	ldr	r2, [r7, #8]
 800be52:	68d2      	ldr	r2, [r2, #12]
 800be54:	3a01      	subs	r2, #1
 800be56:	0311      	lsls	r1, r2, #12
 800be58:	68ba      	ldr	r2, [r7, #8]
 800be5a:	6952      	ldr	r2, [r2, #20]
 800be5c:	3a01      	subs	r2, #1
 800be5e:	0512      	lsls	r2, r2, #20
 800be60:	430a      	orrs	r2, r1
 800be62:	431a      	orrs	r2, r3
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	1e59      	subs	r1, r3, #1
 800be76:	68bb      	ldr	r3, [r7, #8]
 800be78:	685b      	ldr	r3, [r3, #4]
 800be7a:	3b01      	subs	r3, #1
 800be7c:	011b      	lsls	r3, r3, #4
 800be7e:	4319      	orrs	r1, r3
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	689b      	ldr	r3, [r3, #8]
 800be84:	3b01      	subs	r3, #1
 800be86:	021b      	lsls	r3, r3, #8
 800be88:	4319      	orrs	r1, r3
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	3b01      	subs	r3, #1
 800be90:	041b      	lsls	r3, r3, #16
 800be92:	4319      	orrs	r1, r3
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	3b01      	subs	r3, #1
 800be9a:	061b      	lsls	r3, r3, #24
 800be9c:	430b      	orrs	r3, r1
 800be9e:	431a      	orrs	r2, r3
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800bea4:	2300      	movs	r3, #0
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3714      	adds	r7, #20
 800beaa:	46bd      	mov	sp, r7
 800beac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb0:	4770      	bx	lr
 800beb2:	bf00      	nop
 800beb4:	ff0f0fff 	.word	0xff0f0fff

0800beb8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800beb8:	b480      	push	{r7}
 800beba:	b085      	sub	sp, #20
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	691a      	ldr	r2, [r3, #16]
 800bec8:	4b0c      	ldr	r3, [pc, #48]	@ (800befc <FMC_SDRAM_SendCommand+0x44>)
 800beca:	4013      	ands	r3, r2
 800becc:	68ba      	ldr	r2, [r7, #8]
 800bece:	6811      	ldr	r1, [r2, #0]
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	6852      	ldr	r2, [r2, #4]
 800bed4:	4311      	orrs	r1, r2
 800bed6:	68ba      	ldr	r2, [r7, #8]
 800bed8:	6892      	ldr	r2, [r2, #8]
 800beda:	3a01      	subs	r2, #1
 800bedc:	0152      	lsls	r2, r2, #5
 800bede:	4311      	orrs	r1, r2
 800bee0:	68ba      	ldr	r2, [r7, #8]
 800bee2:	68d2      	ldr	r2, [r2, #12]
 800bee4:	0252      	lsls	r2, r2, #9
 800bee6:	430a      	orrs	r2, r1
 800bee8:	431a      	orrs	r2, r3
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800beee:	2300      	movs	r3, #0
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	3714      	adds	r7, #20
 800bef4:	46bd      	mov	sp, r7
 800bef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befa:	4770      	bx	lr
 800befc:	ffc00000 	.word	0xffc00000

0800bf00 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bf00:	b480      	push	{r7}
 800bf02:	b083      	sub	sp, #12
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	695a      	ldr	r2, [r3, #20]
 800bf0e:	4b07      	ldr	r3, [pc, #28]	@ (800bf2c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800bf10:	4013      	ands	r3, r2
 800bf12:	683a      	ldr	r2, [r7, #0]
 800bf14:	0052      	lsls	r2, r2, #1
 800bf16:	431a      	orrs	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800bf1c:	2300      	movs	r3, #0
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	370c      	adds	r7, #12
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	ffffc001 	.word	0xffffc001

0800bf30 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800bf30:	b084      	sub	sp, #16
 800bf32:	b480      	push	{r7}
 800bf34:	b085      	sub	sp, #20
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	f107 001c 	add.w	r0, r7, #28
 800bf3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800bf42:	2300      	movs	r3, #0
 800bf44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800bf46:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800bf48:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800bf4a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800bf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800bf4e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800bf50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800bf52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800bf54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800bf56:	431a      	orrs	r2, r3
             Init.ClockDiv
 800bf58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800bf5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	4313      	orrs	r3, r2
 800bf60:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	685a      	ldr	r2, [r3, #4]
 800bf66:	4b07      	ldr	r3, [pc, #28]	@ (800bf84 <SDMMC_Init+0x54>)
 800bf68:	4013      	ands	r3, r2
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	431a      	orrs	r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800bf72:	2300      	movs	r3, #0
}
 800bf74:	4618      	mov	r0, r3
 800bf76:	3714      	adds	r7, #20
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7e:	b004      	add	sp, #16
 800bf80:	4770      	bx	lr
 800bf82:	bf00      	nop
 800bf84:	ffff8100 	.word	0xffff8100

0800bf88 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	2203      	movs	r2, #3
 800bf94:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800bf96:	2300      	movs	r3, #0
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	370c      	adds	r7, #12
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa2:	4770      	bx	lr

0800bfa4 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b083      	sub	sp, #12
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f003 0303 	and.w	r3, r3, #3
}
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b085      	sub	sp, #20
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	6078      	str	r0, [r7, #4]
 800bfc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	681a      	ldr	r2, [r3, #0]
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bfd6:	683b      	ldr	r3, [r7, #0]
 800bfd8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bfde:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800bfe4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800bfea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	68da      	ldr	r2, [r3, #12]
 800bff6:	4b06      	ldr	r3, [pc, #24]	@ (800c010 <SDMMC_SendCommand+0x50>)
 800bff8:	4013      	ands	r3, r2
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	431a      	orrs	r2, r3
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr
 800c010:	fffff000 	.word	0xfffff000

0800c014 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c014:	b480      	push	{r7}
 800c016:	b083      	sub	sp, #12
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	691b      	ldr	r3, [r3, #16]
 800c020:	b2db      	uxtb	r3, r3
}
 800c022:	4618      	mov	r0, r3
 800c024:	370c      	adds	r7, #12
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr

0800c02e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c02e:	b480      	push	{r7}
 800c030:	b085      	sub	sp, #20
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
 800c036:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	3314      	adds	r3, #20
 800c03c:	461a      	mov	r2, r3
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	4413      	add	r3, r2
 800c042:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
}  
 800c048:	4618      	mov	r0, r3
 800c04a:	3714      	adds	r7, #20
 800c04c:	46bd      	mov	sp, r7
 800c04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c052:	4770      	bx	lr

0800c054 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c054:	b480      	push	{r7}
 800c056:	b085      	sub	sp, #20
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
 800c05c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c05e:	2300      	movs	r3, #0
 800c060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	681a      	ldr	r2, [r3, #0]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	685a      	ldr	r2, [r3, #4]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c07a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c080:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c086:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	4313      	orrs	r3, r2
 800c08c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c092:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	431a      	orrs	r2, r3
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c09e:	2300      	movs	r3, #0

}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b088      	sub	sp, #32
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c0ba:	2310      	movs	r3, #16
 800c0bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c0be:	2340      	movs	r3, #64	@ 0x40
 800c0c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c0c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c0ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c0cc:	f107 0308 	add.w	r3, r7, #8
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f7ff ff74 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c0d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0dc:	2110      	movs	r1, #16
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f9d6 	bl	800c490 <SDMMC_GetCmdResp1>
 800c0e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c0e6:	69fb      	ldr	r3, [r7, #28]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3720      	adds	r7, #32
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c0fa:	683b      	ldr	r3, [r7, #0]
 800c0fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c0fe:	2311      	movs	r3, #17
 800c100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c102:	2340      	movs	r3, #64	@ 0x40
 800c104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c106:	2300      	movs	r3, #0
 800c108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c10a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c10e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c110:	f107 0308 	add.w	r3, r7, #8
 800c114:	4619      	mov	r1, r3
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f7ff ff52 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c11c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c120:	2111      	movs	r1, #17
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f9b4 	bl	800c490 <SDMMC_GetCmdResp1>
 800c128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c12a:	69fb      	ldr	r3, [r7, #28]
}
 800c12c:	4618      	mov	r0, r3
 800c12e:	3720      	adds	r7, #32
 800c130:	46bd      	mov	sp, r7
 800c132:	bd80      	pop	{r7, pc}

0800c134 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b088      	sub	sp, #32
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c142:	2312      	movs	r3, #18
 800c144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c146:	2340      	movs	r3, #64	@ 0x40
 800c148:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c14a:	2300      	movs	r3, #0
 800c14c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c14e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c152:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c154:	f107 0308 	add.w	r3, r7, #8
 800c158:	4619      	mov	r1, r3
 800c15a:	6878      	ldr	r0, [r7, #4]
 800c15c:	f7ff ff30 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c160:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c164:	2112      	movs	r1, #18
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f992 	bl	800c490 <SDMMC_GetCmdResp1>
 800c16c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c16e:	69fb      	ldr	r3, [r7, #28]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3720      	adds	r7, #32
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}

0800c178 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c178:	b580      	push	{r7, lr}
 800c17a:	b088      	sub	sp, #32
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
 800c180:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c186:	2318      	movs	r3, #24
 800c188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c18a:	2340      	movs	r3, #64	@ 0x40
 800c18c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c18e:	2300      	movs	r3, #0
 800c190:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c192:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c196:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c198:	f107 0308 	add.w	r3, r7, #8
 800c19c:	4619      	mov	r1, r3
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7ff ff0e 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c1a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1a8:	2118      	movs	r1, #24
 800c1aa:	6878      	ldr	r0, [r7, #4]
 800c1ac:	f000 f970 	bl	800c490 <SDMMC_GetCmdResp1>
 800c1b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1b2:	69fb      	ldr	r3, [r7, #28]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3720      	adds	r7, #32
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b088      	sub	sp, #32
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
 800c1c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c1ca:	2319      	movs	r3, #25
 800c1cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c1ce:	2340      	movs	r3, #64	@ 0x40
 800c1d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c1d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c1da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c1dc:	f107 0308 	add.w	r3, r7, #8
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7ff feec 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c1e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c1ec:	2119      	movs	r1, #25
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f000 f94e 	bl	800c490 <SDMMC_GetCmdResp1>
 800c1f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c1f6:	69fb      	ldr	r3, [r7, #28]
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3720      	adds	r7, #32
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b088      	sub	sp, #32
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c208:	2300      	movs	r3, #0
 800c20a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c20c:	230c      	movs	r3, #12
 800c20e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c210:	2340      	movs	r3, #64	@ 0x40
 800c212:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c214:	2300      	movs	r3, #0
 800c216:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c21c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c21e:	f107 0308 	add.w	r3, r7, #8
 800c222:	4619      	mov	r1, r3
 800c224:	6878      	ldr	r0, [r7, #4]
 800c226:	f7ff fecb 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c22a:	4a05      	ldr	r2, [pc, #20]	@ (800c240 <SDMMC_CmdStopTransfer+0x40>)
 800c22c:	210c      	movs	r1, #12
 800c22e:	6878      	ldr	r0, [r7, #4]
 800c230:	f000 f92e 	bl	800c490 <SDMMC_GetCmdResp1>
 800c234:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c236:	69fb      	ldr	r3, [r7, #28]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3720      	adds	r7, #32
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}
 800c240:	05f5e100 	.word	0x05f5e100

0800c244 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b08a      	sub	sp, #40	@ 0x28
 800c248:	af00      	add	r7, sp, #0
 800c24a:	60f8      	str	r0, [r7, #12]
 800c24c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c250:	683b      	ldr	r3, [r7, #0]
 800c252:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c254:	2307      	movs	r3, #7
 800c256:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c258:	2340      	movs	r3, #64	@ 0x40
 800c25a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c25c:	2300      	movs	r3, #0
 800c25e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c260:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c264:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c266:	f107 0310 	add.w	r3, r7, #16
 800c26a:	4619      	mov	r1, r3
 800c26c:	68f8      	ldr	r0, [r7, #12]
 800c26e:	f7ff fea7 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c272:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c276:	2107      	movs	r1, #7
 800c278:	68f8      	ldr	r0, [r7, #12]
 800c27a:	f000 f909 	bl	800c490 <SDMMC_GetCmdResp1>
 800c27e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c282:	4618      	mov	r0, r3
 800c284:	3728      	adds	r7, #40	@ 0x28
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b088      	sub	sp, #32
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c292:	2300      	movs	r3, #0
 800c294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c296:	2300      	movs	r3, #0
 800c298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c29a:	2300      	movs	r3, #0
 800c29c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2a8:	f107 0308 	add.w	r3, r7, #8
 800c2ac:	4619      	mov	r1, r3
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f7ff fe86 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c2b4:	6878      	ldr	r0, [r7, #4]
 800c2b6:	f000 fb23 	bl	800c900 <SDMMC_GetCmdError>
 800c2ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2bc:	69fb      	ldr	r3, [r7, #28]
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	3720      	adds	r7, #32
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}

0800c2c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c2c6:	b580      	push	{r7, lr}
 800c2c8:	b088      	sub	sp, #32
 800c2ca:	af00      	add	r7, sp, #0
 800c2cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c2ce:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c2d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c2d4:	2308      	movs	r3, #8
 800c2d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c2d8:	2340      	movs	r3, #64	@ 0x40
 800c2da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c2e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c2e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c2e6:	f107 0308 	add.w	r3, r7, #8
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f7ff fe67 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 fab6 	bl	800c864 <SDMMC_GetCmdResp7>
 800c2f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2fa:	69fb      	ldr	r3, [r7, #28]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3720      	adds	r7, #32
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}

0800c304 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b088      	sub	sp, #32
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c312:	2337      	movs	r3, #55	@ 0x37
 800c314:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c316:	2340      	movs	r3, #64	@ 0x40
 800c318:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c31a:	2300      	movs	r3, #0
 800c31c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c31e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c322:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c324:	f107 0308 	add.w	r3, r7, #8
 800c328:	4619      	mov	r1, r3
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f7ff fe48 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c330:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c334:	2137      	movs	r1, #55	@ 0x37
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 f8aa 	bl	800c490 <SDMMC_GetCmdResp1>
 800c33c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c33e:	69fb      	ldr	r3, [r7, #28]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3720      	adds	r7, #32
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b088      	sub	sp, #32
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c352:	683a      	ldr	r2, [r7, #0]
 800c354:	4b0d      	ldr	r3, [pc, #52]	@ (800c38c <SDMMC_CmdAppOperCommand+0x44>)
 800c356:	4313      	orrs	r3, r2
 800c358:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c35a:	2329      	movs	r3, #41	@ 0x29
 800c35c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c35e:	2340      	movs	r3, #64	@ 0x40
 800c360:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c362:	2300      	movs	r3, #0
 800c364:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c36a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c36c:	f107 0308 	add.w	r3, r7, #8
 800c370:	4619      	mov	r1, r3
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f7ff fe24 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 f9bf 	bl	800c6fc <SDMMC_GetCmdResp3>
 800c37e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c380:	69fb      	ldr	r3, [r7, #28]
}
 800c382:	4618      	mov	r0, r3
 800c384:	3720      	adds	r7, #32
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	80100000 	.word	0x80100000

0800c390 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c398:	2300      	movs	r3, #0
 800c39a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c39c:	2302      	movs	r3, #2
 800c39e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c3a0:	23c0      	movs	r3, #192	@ 0xc0
 800c3a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3ac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3ae:	f107 0308 	add.w	r3, r7, #8
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f7ff fe03 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 f956 	bl	800c66c <SDMMC_GetCmdResp2>
 800c3c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3c2:	69fb      	ldr	r3, [r7, #28]
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3720      	adds	r7, #32
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b088      	sub	sp, #32
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c3da:	2309      	movs	r3, #9
 800c3dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c3de:	23c0      	movs	r3, #192	@ 0xc0
 800c3e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c3e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c3ea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c3ec:	f107 0308 	add.w	r3, r7, #8
 800c3f0:	4619      	mov	r1, r3
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f7ff fde4 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f000 f937 	bl	800c66c <SDMMC_GetCmdResp2>
 800c3fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c400:	69fb      	ldr	r3, [r7, #28]
}
 800c402:	4618      	mov	r0, r3
 800c404:	3720      	adds	r7, #32
 800c406:	46bd      	mov	sp, r7
 800c408:	bd80      	pop	{r7, pc}

0800c40a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c40a:	b580      	push	{r7, lr}
 800c40c:	b088      	sub	sp, #32
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c414:	2300      	movs	r3, #0
 800c416:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c418:	2303      	movs	r3, #3
 800c41a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c41c:	2340      	movs	r3, #64	@ 0x40
 800c41e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c420:	2300      	movs	r3, #0
 800c422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c424:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c428:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c42a:	f107 0308 	add.w	r3, r7, #8
 800c42e:	4619      	mov	r1, r3
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f7ff fdc5 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	2103      	movs	r1, #3
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	f000 f99c 	bl	800c778 <SDMMC_GetCmdResp6>
 800c440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c442:	69fb      	ldr	r3, [r7, #28]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3720      	adds	r7, #32
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}

0800c44c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b088      	sub	sp, #32
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c45a:	230d      	movs	r3, #13
 800c45c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c45e:	2340      	movs	r3, #64	@ 0x40
 800c460:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c462:	2300      	movs	r3, #0
 800c464:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c466:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c46a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c46c:	f107 0308 	add.w	r3, r7, #8
 800c470:	4619      	mov	r1, r3
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f7ff fda4 	bl	800bfc0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c47c:	210d      	movs	r1, #13
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 f806 	bl	800c490 <SDMMC_GetCmdResp1>
 800c484:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c486:	69fb      	ldr	r3, [r7, #28]
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3720      	adds	r7, #32
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b088      	sub	sp, #32
 800c494:	af00      	add	r7, sp, #0
 800c496:	60f8      	str	r0, [r7, #12]
 800c498:	460b      	mov	r3, r1
 800c49a:	607a      	str	r2, [r7, #4]
 800c49c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c49e:	4b70      	ldr	r3, [pc, #448]	@ (800c660 <SDMMC_GetCmdResp1+0x1d0>)
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	4a70      	ldr	r2, [pc, #448]	@ (800c664 <SDMMC_GetCmdResp1+0x1d4>)
 800c4a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a8:	0a5a      	lsrs	r2, r3, #9
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	fb02 f303 	mul.w	r3, r2, r3
 800c4b0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	1e5a      	subs	r2, r3, #1
 800c4b6:	61fa      	str	r2, [r7, #28]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d102      	bne.n	800c4c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c4bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c4c0:	e0c9      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4c6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d0ef      	beq.n	800c4b2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1ea      	bne.n	800c4b2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4e0:	f003 0304 	and.w	r3, r3, #4
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d004      	beq.n	800c4f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	2204      	movs	r2, #4
 800c4ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c4ee:	2304      	movs	r3, #4
 800c4f0:	e0b1      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4f6:	f003 0301 	and.w	r3, r3, #1
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d004      	beq.n	800c508 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2201      	movs	r2, #1
 800c502:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c504:	2301      	movs	r3, #1
 800c506:	e0a6      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	22c5      	movs	r2, #197	@ 0xc5
 800c50c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c50e:	68f8      	ldr	r0, [r7, #12]
 800c510:	f7ff fd80 	bl	800c014 <SDMMC_GetCommandResponse>
 800c514:	4603      	mov	r3, r0
 800c516:	461a      	mov	r2, r3
 800c518:	7afb      	ldrb	r3, [r7, #11]
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d001      	beq.n	800c522 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c51e:	2301      	movs	r3, #1
 800c520:	e099      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c522:	2100      	movs	r1, #0
 800c524:	68f8      	ldr	r0, [r7, #12]
 800c526:	f7ff fd82 	bl	800c02e <SDMMC_GetResponse>
 800c52a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c52c:	697a      	ldr	r2, [r7, #20]
 800c52e:	4b4e      	ldr	r3, [pc, #312]	@ (800c668 <SDMMC_GetCmdResp1+0x1d8>)
 800c530:	4013      	ands	r3, r2
 800c532:	2b00      	cmp	r3, #0
 800c534:	d101      	bne.n	800c53a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c536:	2300      	movs	r3, #0
 800c538:	e08d      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	da02      	bge.n	800c546 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c540:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800c544:	e087      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d001      	beq.n	800c554 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c550:	2340      	movs	r3, #64	@ 0x40
 800c552:	e080      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d001      	beq.n	800c562 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c55e:	2380      	movs	r3, #128	@ 0x80
 800c560:	e079      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c56c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c570:	e071      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d002      	beq.n	800c582 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c57c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c580:	e069      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d002      	beq.n	800c592 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c58c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c590:	e061      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d002      	beq.n	800c5a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c59c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800c5a0:	e059      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d002      	beq.n	800c5b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c5ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c5b0:	e051      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d002      	beq.n	800c5c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c5bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c5c0:	e049      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c5c2:	697b      	ldr	r3, [r7, #20]
 800c5c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d002      	beq.n	800c5d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c5cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800c5d0:	e041      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c5d2:	697b      	ldr	r3, [r7, #20]
 800c5d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d002      	beq.n	800c5e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800c5dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5e0:	e039      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c5e2:	697b      	ldr	r3, [r7, #20]
 800c5e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d002      	beq.n	800c5f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c5ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c5f0:	e031      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c5f2:	697b      	ldr	r3, [r7, #20]
 800c5f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d002      	beq.n	800c602 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c5fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800c600:	e029      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c60c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c610:	e021      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d002      	beq.n	800c622 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c61c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c620:	e019      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c622:	697b      	ldr	r3, [r7, #20]
 800c624:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d002      	beq.n	800c632 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c62c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c630:	e011      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c632:	697b      	ldr	r3, [r7, #20]
 800c634:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d002      	beq.n	800c642 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c63c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800c640:	e009      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	f003 0308 	and.w	r3, r3, #8
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d002      	beq.n	800c652 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c64c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800c650:	e001      	b.n	800c656 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c652:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c656:	4618      	mov	r0, r3
 800c658:	3720      	adds	r7, #32
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	20000034 	.word	0x20000034
 800c664:	10624dd3 	.word	0x10624dd3
 800c668:	fdffe008 	.word	0xfdffe008

0800c66c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800c66c:	b480      	push	{r7}
 800c66e:	b085      	sub	sp, #20
 800c670:	af00      	add	r7, sp, #0
 800c672:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c674:	4b1f      	ldr	r3, [pc, #124]	@ (800c6f4 <SDMMC_GetCmdResp2+0x88>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a1f      	ldr	r2, [pc, #124]	@ (800c6f8 <SDMMC_GetCmdResp2+0x8c>)
 800c67a:	fba2 2303 	umull	r2, r3, r2, r3
 800c67e:	0a5b      	lsrs	r3, r3, #9
 800c680:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c684:	fb02 f303 	mul.w	r3, r2, r3
 800c688:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	1e5a      	subs	r2, r3, #1
 800c68e:	60fa      	str	r2, [r7, #12]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d102      	bne.n	800c69a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c694:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c698:	e026      	b.n	800c6e8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c69e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c6a0:	68bb      	ldr	r3, [r7, #8]
 800c6a2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d0ef      	beq.n	800c68a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d1ea      	bne.n	800c68a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6b8:	f003 0304 	and.w	r3, r3, #4
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d004      	beq.n	800c6ca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	2204      	movs	r2, #4
 800c6c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6c6:	2304      	movs	r3, #4
 800c6c8:	e00e      	b.n	800c6e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c6ce:	f003 0301 	and.w	r3, r3, #1
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d004      	beq.n	800c6e0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6dc:	2301      	movs	r3, #1
 800c6de:	e003      	b.n	800c6e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	22c5      	movs	r2, #197	@ 0xc5
 800c6e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800c6e6:	2300      	movs	r3, #0
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3714      	adds	r7, #20
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f2:	4770      	bx	lr
 800c6f4:	20000034 	.word	0x20000034
 800c6f8:	10624dd3 	.word	0x10624dd3

0800c6fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c704:	4b1a      	ldr	r3, [pc, #104]	@ (800c770 <SDMMC_GetCmdResp3+0x74>)
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	4a1a      	ldr	r2, [pc, #104]	@ (800c774 <SDMMC_GetCmdResp3+0x78>)
 800c70a:	fba2 2303 	umull	r2, r3, r2, r3
 800c70e:	0a5b      	lsrs	r3, r3, #9
 800c710:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c714:	fb02 f303 	mul.w	r3, r2, r3
 800c718:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	1e5a      	subs	r2, r3, #1
 800c71e:	60fa      	str	r2, [r7, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d102      	bne.n	800c72a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c724:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c728:	e01b      	b.n	800c762 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c72e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c736:	2b00      	cmp	r3, #0
 800c738:	d0ef      	beq.n	800c71a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c73a:	68bb      	ldr	r3, [r7, #8]
 800c73c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c740:	2b00      	cmp	r3, #0
 800c742:	d1ea      	bne.n	800c71a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c748:	f003 0304 	and.w	r3, r3, #4
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d004      	beq.n	800c75a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2204      	movs	r2, #4
 800c754:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c756:	2304      	movs	r3, #4
 800c758:	e003      	b.n	800c762 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	22c5      	movs	r2, #197	@ 0xc5
 800c75e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c760:	2300      	movs	r3, #0
}
 800c762:	4618      	mov	r0, r3
 800c764:	3714      	adds	r7, #20
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr
 800c76e:	bf00      	nop
 800c770:	20000034 	.word	0x20000034
 800c774:	10624dd3 	.word	0x10624dd3

0800c778 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	b088      	sub	sp, #32
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	460b      	mov	r3, r1
 800c782:	607a      	str	r2, [r7, #4]
 800c784:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c786:	4b35      	ldr	r3, [pc, #212]	@ (800c85c <SDMMC_GetCmdResp6+0xe4>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	4a35      	ldr	r2, [pc, #212]	@ (800c860 <SDMMC_GetCmdResp6+0xe8>)
 800c78c:	fba2 2303 	umull	r2, r3, r2, r3
 800c790:	0a5b      	lsrs	r3, r3, #9
 800c792:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c796:	fb02 f303 	mul.w	r3, r2, r3
 800c79a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	1e5a      	subs	r2, r3, #1
 800c7a0:	61fa      	str	r2, [r7, #28]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d102      	bne.n	800c7ac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c7a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c7aa:	e052      	b.n	800c852 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7b0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d0ef      	beq.n	800c79c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c7bc:	69bb      	ldr	r3, [r7, #24]
 800c7be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d1ea      	bne.n	800c79c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7ca:	f003 0304 	and.w	r3, r3, #4
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d004      	beq.n	800c7dc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	2204      	movs	r2, #4
 800c7d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c7d8:	2304      	movs	r3, #4
 800c7da:	e03a      	b.n	800c852 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7e0:	f003 0301 	and.w	r3, r3, #1
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d004      	beq.n	800c7f2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c7ee:	2301      	movs	r3, #1
 800c7f0:	e02f      	b.n	800c852 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f7ff fc0e 	bl	800c014 <SDMMC_GetCommandResponse>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	7afb      	ldrb	r3, [r7, #11]
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d001      	beq.n	800c806 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c802:	2301      	movs	r3, #1
 800c804:	e025      	b.n	800c852 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	22c5      	movs	r2, #197	@ 0xc5
 800c80a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c80c:	2100      	movs	r1, #0
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	f7ff fc0d 	bl	800c02e <SDMMC_GetResponse>
 800c814:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d106      	bne.n	800c82e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	0c1b      	lsrs	r3, r3, #16
 800c824:	b29a      	uxth	r2, r3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800c82a:	2300      	movs	r3, #0
 800c82c:	e011      	b.n	800c852 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c834:	2b00      	cmp	r3, #0
 800c836:	d002      	beq.n	800c83e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c83c:	e009      	b.n	800c852 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c844:	2b00      	cmp	r3, #0
 800c846:	d002      	beq.n	800c84e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c848:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c84c:	e001      	b.n	800c852 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c84e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800c852:	4618      	mov	r0, r3
 800c854:	3720      	adds	r7, #32
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	20000034 	.word	0x20000034
 800c860:	10624dd3 	.word	0x10624dd3

0800c864 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800c864:	b480      	push	{r7}
 800c866:	b085      	sub	sp, #20
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c86c:	4b22      	ldr	r3, [pc, #136]	@ (800c8f8 <SDMMC_GetCmdResp7+0x94>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	4a22      	ldr	r2, [pc, #136]	@ (800c8fc <SDMMC_GetCmdResp7+0x98>)
 800c872:	fba2 2303 	umull	r2, r3, r2, r3
 800c876:	0a5b      	lsrs	r3, r3, #9
 800c878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c87c:	fb02 f303 	mul.w	r3, r2, r3
 800c880:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	1e5a      	subs	r2, r3, #1
 800c886:	60fa      	str	r2, [r7, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d102      	bne.n	800c892 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c88c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c890:	e02c      	b.n	800c8ec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c896:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d0ef      	beq.n	800c882 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1ea      	bne.n	800c882 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8b0:	f003 0304 	and.w	r3, r3, #4
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d004      	beq.n	800c8c2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2204      	movs	r2, #4
 800c8bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c8be:	2304      	movs	r3, #4
 800c8c0:	e014      	b.n	800c8ec <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8c6:	f003 0301 	and.w	r3, r3, #1
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d004      	beq.n	800c8d8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	2201      	movs	r2, #1
 800c8d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e009      	b.n	800c8ec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c8dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d002      	beq.n	800c8ea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2240      	movs	r2, #64	@ 0x40
 800c8e8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c8ea:	2300      	movs	r3, #0
  
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3714      	adds	r7, #20
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr
 800c8f8:	20000034 	.word	0x20000034
 800c8fc:	10624dd3 	.word	0x10624dd3

0800c900 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800c900:	b480      	push	{r7}
 800c902:	b085      	sub	sp, #20
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c908:	4b11      	ldr	r3, [pc, #68]	@ (800c950 <SDMMC_GetCmdError+0x50>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a11      	ldr	r2, [pc, #68]	@ (800c954 <SDMMC_GetCmdError+0x54>)
 800c90e:	fba2 2303 	umull	r2, r3, r2, r3
 800c912:	0a5b      	lsrs	r3, r3, #9
 800c914:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c918:	fb02 f303 	mul.w	r3, r2, r3
 800c91c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	1e5a      	subs	r2, r3, #1
 800c922:	60fa      	str	r2, [r7, #12]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d102      	bne.n	800c92e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c928:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c92c:	e009      	b.n	800c942 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c932:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c936:	2b00      	cmp	r3, #0
 800c938:	d0f1      	beq.n	800c91e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	22c5      	movs	r2, #197	@ 0xc5
 800c93e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800c940:	2300      	movs	r3, #0
}
 800c942:	4618      	mov	r0, r3
 800c944:	3714      	adds	r7, #20
 800c946:	46bd      	mov	sp, r7
 800c948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c94c:	4770      	bx	lr
 800c94e:	bf00      	nop
 800c950:	20000034 	.word	0x20000034
 800c954:	10624dd3 	.word	0x10624dd3

0800c958 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c95c:	4904      	ldr	r1, [pc, #16]	@ (800c970 <MX_FATFS_Init+0x18>)
 800c95e:	4805      	ldr	r0, [pc, #20]	@ (800c974 <MX_FATFS_Init+0x1c>)
 800c960:	f002 fbfc 	bl	800f15c <FATFS_LinkDriver>
 800c964:	4603      	mov	r3, r0
 800c966:	461a      	mov	r2, r3
 800c968:	4b03      	ldr	r3, [pc, #12]	@ (800c978 <MX_FATFS_Init+0x20>)
 800c96a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c96c:	bf00      	nop
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	20000d2c 	.word	0x20000d2c
 800c974:	08014638 	.word	0x08014638
 800c978:	20000d28 	.word	0x20000d28

0800c97c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c97c:	b480      	push	{r7}
 800c97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c980:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c982:	4618      	mov	r0, r3
 800c984:	46bd      	mov	sp, r7
 800c986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c98a:	4770      	bx	lr

0800c98c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c98c:	b580      	push	{r7, lr}
 800c98e:	b082      	sub	sp, #8
 800c990:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c992:	2300      	movs	r3, #0
 800c994:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c996:	f000 f86d 	bl	800ca74 <BSP_SD_IsDetected>
 800c99a:	4603      	mov	r3, r0
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d001      	beq.n	800c9a4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c9a0:	2302      	movs	r3, #2
 800c9a2:	e005      	b.n	800c9b0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c9a4:	4804      	ldr	r0, [pc, #16]	@ (800c9b8 <BSP_SD_Init+0x2c>)
 800c9a6:	f7fc fa43 	bl	8008e30 <HAL_SD_Init>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800c9ae:	79fb      	ldrb	r3, [r7, #7]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3708      	adds	r7, #8
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	20000608 	.word	0x20000608

0800c9bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b086      	sub	sp, #24
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	60b9      	str	r1, [r7, #8]
 800c9c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	68f9      	ldr	r1, [r7, #12]
 800c9d2:	4806      	ldr	r0, [pc, #24]	@ (800c9ec <BSP_SD_ReadBlocks_DMA+0x30>)
 800c9d4:	f7fc fae4 	bl	8008fa0 <HAL_SD_ReadBlocks_DMA>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d001      	beq.n	800c9e2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c9e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3718      	adds	r7, #24
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}
 800c9ec:	20000608 	.word	0x20000608

0800c9f0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	60f8      	str	r0, [r7, #12]
 800c9f8:	60b9      	str	r1, [r7, #8]
 800c9fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	68ba      	ldr	r2, [r7, #8]
 800ca04:	68f9      	ldr	r1, [r7, #12]
 800ca06:	4806      	ldr	r0, [pc, #24]	@ (800ca20 <BSP_SD_WriteBlocks_DMA+0x30>)
 800ca08:	f7fc fbac 	bl	8009164 <HAL_SD_WriteBlocks_DMA>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d001      	beq.n	800ca16 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3718      	adds	r7, #24
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd80      	pop	{r7, pc}
 800ca20:	20000608 	.word	0x20000608

0800ca24 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ca28:	4805      	ldr	r0, [pc, #20]	@ (800ca40 <BSP_SD_GetCardState+0x1c>)
 800ca2a:	f7fc fe5b 	bl	80096e4 <HAL_SD_GetCardState>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b04      	cmp	r3, #4
 800ca32:	bf14      	ite	ne
 800ca34:	2301      	movne	r3, #1
 800ca36:	2300      	moveq	r3, #0
 800ca38:	b2db      	uxtb	r3, r3
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	20000608 	.word	0x20000608

0800ca44 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b082      	sub	sp, #8
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ca4c:	6879      	ldr	r1, [r7, #4]
 800ca4e:	4803      	ldr	r0, [pc, #12]	@ (800ca5c <BSP_SD_GetCardInfo+0x18>)
 800ca50:	f7fc fe1c 	bl	800968c <HAL_SD_GetCardInfo>
}
 800ca54:	bf00      	nop
 800ca56:	3708      	adds	r7, #8
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}
 800ca5c:	20000608 	.word	0x20000608

0800ca60 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800ca68:	f000 f9b2 	bl	800cdd0 <BSP_SD_ReadCpltCallback>
}
 800ca6c:	bf00      	nop
 800ca6e:	3708      	adds	r7, #8
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b082      	sub	sp, #8
 800ca78:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ca7e:	f000 f80b 	bl	800ca98 <BSP_PlatformIsDetected>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d101      	bne.n	800ca8c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ca88:	2300      	movs	r3, #0
 800ca8a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ca8c:	79fb      	ldrb	r3, [r7, #7]
 800ca8e:	b2db      	uxtb	r3, r3
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3708      	adds	r7, #8
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd80      	pop	{r7, pc}

0800ca98 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b082      	sub	sp, #8
 800ca9c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ca9e:	2301      	movs	r3, #1
 800caa0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800caa2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800caa6:	4806      	ldr	r0, [pc, #24]	@ (800cac0 <BSP_PlatformIsDetected+0x28>)
 800caa8:	f7f9 fb08 	bl	80060bc <HAL_GPIO_ReadPin>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d001      	beq.n	800cab6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cab2:	2300      	movs	r3, #0
 800cab4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800cab6:	79fb      	ldrb	r3, [r7, #7]
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3708      	adds	r7, #8
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	40020800 	.word	0x40020800

0800cac4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800cacc:	f002 fbb2 	bl	800f234 <osKernelSysTick>
 800cad0:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800cad2:	e006      	b.n	800cae2 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cad4:	f7ff ffa6 	bl	800ca24 <BSP_SD_GetCardState>
 800cad8:	4603      	mov	r3, r0
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d101      	bne.n	800cae2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cade:	2300      	movs	r3, #0
 800cae0:	e009      	b.n	800caf6 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800cae2:	f002 fba7 	bl	800f234 <osKernelSysTick>
 800cae6:	4602      	mov	r2, r0
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	1ad3      	subs	r3, r2, r3
 800caec:	687a      	ldr	r2, [r7, #4]
 800caee:	429a      	cmp	r2, r3
 800caf0:	d8f0      	bhi.n	800cad4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800caf2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3710      	adds	r7, #16
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
	...

0800cb00 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	4603      	mov	r3, r0
 800cb08:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cb0a:	4b0b      	ldr	r3, [pc, #44]	@ (800cb38 <SD_CheckStatus+0x38>)
 800cb0c:	2201      	movs	r2, #1
 800cb0e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cb10:	f7ff ff88 	bl	800ca24 <BSP_SD_GetCardState>
 800cb14:	4603      	mov	r3, r0
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d107      	bne.n	800cb2a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cb1a:	4b07      	ldr	r3, [pc, #28]	@ (800cb38 <SD_CheckStatus+0x38>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	b2db      	uxtb	r3, r3
 800cb20:	f023 0301 	bic.w	r3, r3, #1
 800cb24:	b2da      	uxtb	r2, r3
 800cb26:	4b04      	ldr	r3, [pc, #16]	@ (800cb38 <SD_CheckStatus+0x38>)
 800cb28:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cb2a:	4b03      	ldr	r3, [pc, #12]	@ (800cb38 <SD_CheckStatus+0x38>)
 800cb2c:	781b      	ldrb	r3, [r3, #0]
 800cb2e:	b2db      	uxtb	r3, r3
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	2000003d 	.word	0x2000003d

0800cb3c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cb3c:	b590      	push	{r4, r7, lr}
 800cb3e:	b087      	sub	sp, #28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	4603      	mov	r3, r0
 800cb44:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cb46:	4b20      	ldr	r3, [pc, #128]	@ (800cbc8 <SD_initialize+0x8c>)
 800cb48:	2201      	movs	r2, #1
 800cb4a:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800cb4c:	f002 fb66 	bl	800f21c <osKernelRunning>
 800cb50:	4603      	mov	r3, r0
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d030      	beq.n	800cbb8 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800cb56:	f7ff ff19 	bl	800c98c <BSP_SD_Init>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d107      	bne.n	800cb70 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800cb60:	79fb      	ldrb	r3, [r7, #7]
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7ff ffcc 	bl	800cb00 <SD_CheckStatus>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	461a      	mov	r2, r3
 800cb6c:	4b16      	ldr	r3, [pc, #88]	@ (800cbc8 <SD_initialize+0x8c>)
 800cb6e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800cb70:	4b15      	ldr	r3, [pc, #84]	@ (800cbc8 <SD_initialize+0x8c>)
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d01e      	beq.n	800cbb8 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800cb7a:	4b14      	ldr	r3, [pc, #80]	@ (800cbcc <SD_initialize+0x90>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d10e      	bne.n	800cba0 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800cb82:	4b13      	ldr	r3, [pc, #76]	@ (800cbd0 <SD_initialize+0x94>)
 800cb84:	f107 0408 	add.w	r4, r7, #8
 800cb88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800cb8e:	f107 0308 	add.w	r3, r7, #8
 800cb92:	2100      	movs	r1, #0
 800cb94:	4618      	mov	r0, r3
 800cb96:	f002 fc59 	bl	800f44c <osMessageCreate>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	4a0b      	ldr	r2, [pc, #44]	@ (800cbcc <SD_initialize+0x90>)
 800cb9e:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800cba0:	4b0a      	ldr	r3, [pc, #40]	@ (800cbcc <SD_initialize+0x90>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d107      	bne.n	800cbb8 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800cba8:	4b07      	ldr	r3, [pc, #28]	@ (800cbc8 <SD_initialize+0x8c>)
 800cbaa:	781b      	ldrb	r3, [r3, #0]
 800cbac:	b2db      	uxtb	r3, r3
 800cbae:	f043 0301 	orr.w	r3, r3, #1
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	4b04      	ldr	r3, [pc, #16]	@ (800cbc8 <SD_initialize+0x8c>)
 800cbb6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800cbb8:	4b03      	ldr	r3, [pc, #12]	@ (800cbc8 <SD_initialize+0x8c>)
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	b2db      	uxtb	r3, r3
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	371c      	adds	r7, #28
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd90      	pop	{r4, r7, pc}
 800cbc6:	bf00      	nop
 800cbc8:	2000003d 	.word	0x2000003d
 800cbcc:	20000d30 	.word	0x20000d30
 800cbd0:	08012b04 	.word	0x08012b04

0800cbd4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cbde:	79fb      	ldrb	r3, [r7, #7]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7ff ff8d 	bl	800cb00 <SD_CheckStatus>
 800cbe6:	4603      	mov	r3, r0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3708      	adds	r7, #8
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b08a      	sub	sp, #40	@ 0x28
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	60b9      	str	r1, [r7, #8]
 800cbf8:	607a      	str	r2, [r7, #4]
 800cbfa:	603b      	str	r3, [r7, #0]
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cc06:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cc0a:	f7ff ff5b 	bl	800cac4 <SD_CheckStatusWithTimeout>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	da02      	bge.n	800cc1a <SD_read+0x2a>
  {
    return res;
 800cc14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cc18:	e032      	b.n	800cc80 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800cc1a:	683a      	ldr	r2, [r7, #0]
 800cc1c:	6879      	ldr	r1, [r7, #4]
 800cc1e:	68b8      	ldr	r0, [r7, #8]
 800cc20:	f7ff fecc 	bl	800c9bc <BSP_SD_ReadBlocks_DMA>
 800cc24:	4603      	mov	r3, r0
 800cc26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800cc2a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d124      	bne.n	800cc7c <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800cc32:	4b15      	ldr	r3, [pc, #84]	@ (800cc88 <SD_read+0x98>)
 800cc34:	6819      	ldr	r1, [r3, #0]
 800cc36:	f107 0314 	add.w	r3, r7, #20
 800cc3a:	f247 5230 	movw	r2, #30000	@ 0x7530
 800cc3e:	4618      	mov	r0, r3
 800cc40:	f002 fc6c 	bl	800f51c <osMessageGet>

    if (event.status == osEventMessage)
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	2b10      	cmp	r3, #16
 800cc48:	d118      	bne.n	800cc7c <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800cc4a:	69bb      	ldr	r3, [r7, #24]
 800cc4c:	2b01      	cmp	r3, #1
 800cc4e:	d115      	bne.n	800cc7c <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800cc50:	f002 faf0 	bl	800f234 <osKernelSysTick>
 800cc54:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800cc56:	e008      	b.n	800cc6a <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cc58:	f7ff fee4 	bl	800ca24 <BSP_SD_GetCardState>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d103      	bne.n	800cc6a <SD_read+0x7a>
              {
                res = RES_OK;
 800cc62:	2300      	movs	r3, #0
 800cc64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800cc68:	e008      	b.n	800cc7c <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800cc6a:	f002 fae3 	bl	800f234 <osKernelSysTick>
 800cc6e:	4602      	mov	r2, r0
 800cc70:	6a3b      	ldr	r3, [r7, #32]
 800cc72:	1ad3      	subs	r3, r2, r3
 800cc74:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d9ed      	bls.n	800cc58 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800cc7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3728      	adds	r7, #40	@ 0x28
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	20000d30 	.word	0x20000d30

0800cc8c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b08a      	sub	sp, #40	@ 0x28
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	60b9      	str	r1, [r7, #8]
 800cc94:	607a      	str	r2, [r7, #4]
 800cc96:	603b      	str	r3, [r7, #0]
 800cc98:	4603      	mov	r3, r0
 800cc9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc9c:	2301      	movs	r3, #1
 800cc9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cca2:	f247 5030 	movw	r0, #30000	@ 0x7530
 800cca6:	f7ff ff0d 	bl	800cac4 <SD_CheckStatusWithTimeout>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	da02      	bge.n	800ccb6 <SD_write+0x2a>
  {
    return res;
 800ccb0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ccb4:	e02e      	b.n	800cd14 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ccb6:	683a      	ldr	r2, [r7, #0]
 800ccb8:	6879      	ldr	r1, [r7, #4]
 800ccba:	68b8      	ldr	r0, [r7, #8]
 800ccbc:	f7ff fe98 	bl	800c9f0 <BSP_SD_WriteBlocks_DMA>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d124      	bne.n	800cd10 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ccc6:	4b15      	ldr	r3, [pc, #84]	@ (800cd1c <SD_write+0x90>)
 800ccc8:	6819      	ldr	r1, [r3, #0]
 800ccca:	f107 0314 	add.w	r3, r7, #20
 800ccce:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	f002 fc22 	bl	800f51c <osMessageGet>

    if (event.status == osEventMessage)
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	2b10      	cmp	r3, #16
 800ccdc:	d118      	bne.n	800cd10 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800ccde:	69bb      	ldr	r3, [r7, #24]
 800cce0:	2b02      	cmp	r3, #2
 800cce2:	d115      	bne.n	800cd10 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800cce4:	f002 faa6 	bl	800f234 <osKernelSysTick>
 800cce8:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ccea:	e008      	b.n	800ccfe <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ccec:	f7ff fe9a 	bl	800ca24 <BSP_SD_GetCardState>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d103      	bne.n	800ccfe <SD_write+0x72>
          {
            res = RES_OK;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800ccfc:	e008      	b.n	800cd10 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ccfe:	f002 fa99 	bl	800f234 <osKernelSysTick>
 800cd02:	4602      	mov	r2, r0
 800cd04:	6a3b      	ldr	r3, [r7, #32]
 800cd06:	1ad3      	subs	r3, r2, r3
 800cd08:	f247 522f 	movw	r2, #29999	@ 0x752f
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d9ed      	bls.n	800ccec <SD_write+0x60>
    }

  }
#endif

  return res;
 800cd10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800cd14:	4618      	mov	r0, r3
 800cd16:	3728      	adds	r7, #40	@ 0x28
 800cd18:	46bd      	mov	sp, r7
 800cd1a:	bd80      	pop	{r7, pc}
 800cd1c:	20000d30 	.word	0x20000d30

0800cd20 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b08c      	sub	sp, #48	@ 0x30
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	4603      	mov	r3, r0
 800cd28:	603a      	str	r2, [r7, #0]
 800cd2a:	71fb      	strb	r3, [r7, #7]
 800cd2c:	460b      	mov	r3, r1
 800cd2e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cd30:	2301      	movs	r3, #1
 800cd32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cd36:	4b25      	ldr	r3, [pc, #148]	@ (800cdcc <SD_ioctl+0xac>)
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	b2db      	uxtb	r3, r3
 800cd3c:	f003 0301 	and.w	r3, r3, #1
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d001      	beq.n	800cd48 <SD_ioctl+0x28>
 800cd44:	2303      	movs	r3, #3
 800cd46:	e03c      	b.n	800cdc2 <SD_ioctl+0xa2>

  switch (cmd)
 800cd48:	79bb      	ldrb	r3, [r7, #6]
 800cd4a:	2b03      	cmp	r3, #3
 800cd4c:	d834      	bhi.n	800cdb8 <SD_ioctl+0x98>
 800cd4e:	a201      	add	r2, pc, #4	@ (adr r2, 800cd54 <SD_ioctl+0x34>)
 800cd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd54:	0800cd65 	.word	0x0800cd65
 800cd58:	0800cd6d 	.word	0x0800cd6d
 800cd5c:	0800cd85 	.word	0x0800cd85
 800cd60:	0800cd9f 	.word	0x0800cd9f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cd64:	2300      	movs	r3, #0
 800cd66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cd6a:	e028      	b.n	800cdbe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd6c:	f107 030c 	add.w	r3, r7, #12
 800cd70:	4618      	mov	r0, r3
 800cd72:	f7ff fe67 	bl	800ca44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cd76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cd82:	e01c      	b.n	800cdbe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd84:	f107 030c 	add.w	r3, r7, #12
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7ff fe5b 	bl	800ca44 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cd8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd90:	b29a      	uxth	r2, r3
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cd9c:	e00f      	b.n	800cdbe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd9e:	f107 030c 	add.w	r3, r7, #12
 800cda2:	4618      	mov	r0, r3
 800cda4:	f7ff fe4e 	bl	800ca44 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cda8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdaa:	0a5a      	lsrs	r2, r3, #9
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800cdb6:	e002      	b.n	800cdbe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cdb8:	2304      	movs	r3, #4
 800cdba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800cdbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3730      	adds	r7, #48	@ 0x30
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
 800cdca:	bf00      	nop
 800cdcc:	2000003d 	.word	0x2000003d

0800cdd0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800cdd4:	4b04      	ldr	r3, [pc, #16]	@ (800cde8 <BSP_SD_ReadCpltCallback+0x18>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	2101      	movs	r1, #1
 800cddc:	4618      	mov	r0, r3
 800cdde:	f002 fb5d 	bl	800f49c <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800cde2:	bf00      	nop
 800cde4:	bd80      	pop	{r7, pc}
 800cde6:	bf00      	nop
 800cde8:	20000d30 	.word	0x20000d30

0800cdec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cdf6:	79fb      	ldrb	r3, [r7, #7]
 800cdf8:	4a08      	ldr	r2, [pc, #32]	@ (800ce1c <disk_status+0x30>)
 800cdfa:	009b      	lsls	r3, r3, #2
 800cdfc:	4413      	add	r3, r2
 800cdfe:	685b      	ldr	r3, [r3, #4]
 800ce00:	685b      	ldr	r3, [r3, #4]
 800ce02:	79fa      	ldrb	r2, [r7, #7]
 800ce04:	4905      	ldr	r1, [pc, #20]	@ (800ce1c <disk_status+0x30>)
 800ce06:	440a      	add	r2, r1
 800ce08:	7a12      	ldrb	r2, [r2, #8]
 800ce0a:	4610      	mov	r0, r2
 800ce0c:	4798      	blx	r3
 800ce0e:	4603      	mov	r3, r0
 800ce10:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ce12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3710      	adds	r7, #16
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}
 800ce1c:	20000d5c 	.word	0x20000d5c

0800ce20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	4603      	mov	r3, r0
 800ce28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ce2e:	79fb      	ldrb	r3, [r7, #7]
 800ce30:	4a0d      	ldr	r2, [pc, #52]	@ (800ce68 <disk_initialize+0x48>)
 800ce32:	5cd3      	ldrb	r3, [r2, r3]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d111      	bne.n	800ce5c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ce38:	79fb      	ldrb	r3, [r7, #7]
 800ce3a:	4a0b      	ldr	r2, [pc, #44]	@ (800ce68 <disk_initialize+0x48>)
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ce40:	79fb      	ldrb	r3, [r7, #7]
 800ce42:	4a09      	ldr	r2, [pc, #36]	@ (800ce68 <disk_initialize+0x48>)
 800ce44:	009b      	lsls	r3, r3, #2
 800ce46:	4413      	add	r3, r2
 800ce48:	685b      	ldr	r3, [r3, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	79fa      	ldrb	r2, [r7, #7]
 800ce4e:	4906      	ldr	r1, [pc, #24]	@ (800ce68 <disk_initialize+0x48>)
 800ce50:	440a      	add	r2, r1
 800ce52:	7a12      	ldrb	r2, [r2, #8]
 800ce54:	4610      	mov	r0, r2
 800ce56:	4798      	blx	r3
 800ce58:	4603      	mov	r3, r0
 800ce5a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ce5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5e:	4618      	mov	r0, r3
 800ce60:	3710      	adds	r7, #16
 800ce62:	46bd      	mov	sp, r7
 800ce64:	bd80      	pop	{r7, pc}
 800ce66:	bf00      	nop
 800ce68:	20000d5c 	.word	0x20000d5c

0800ce6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ce6c:	b590      	push	{r4, r7, lr}
 800ce6e:	b087      	sub	sp, #28
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60b9      	str	r1, [r7, #8]
 800ce74:	607a      	str	r2, [r7, #4]
 800ce76:	603b      	str	r3, [r7, #0]
 800ce78:	4603      	mov	r3, r0
 800ce7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ce7c:	7bfb      	ldrb	r3, [r7, #15]
 800ce7e:	4a0a      	ldr	r2, [pc, #40]	@ (800cea8 <disk_read+0x3c>)
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	4413      	add	r3, r2
 800ce84:	685b      	ldr	r3, [r3, #4]
 800ce86:	689c      	ldr	r4, [r3, #8]
 800ce88:	7bfb      	ldrb	r3, [r7, #15]
 800ce8a:	4a07      	ldr	r2, [pc, #28]	@ (800cea8 <disk_read+0x3c>)
 800ce8c:	4413      	add	r3, r2
 800ce8e:	7a18      	ldrb	r0, [r3, #8]
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	687a      	ldr	r2, [r7, #4]
 800ce94:	68b9      	ldr	r1, [r7, #8]
 800ce96:	47a0      	blx	r4
 800ce98:	4603      	mov	r3, r0
 800ce9a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ce9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	371c      	adds	r7, #28
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd90      	pop	{r4, r7, pc}
 800cea6:	bf00      	nop
 800cea8:	20000d5c 	.word	0x20000d5c

0800ceac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ceac:	b590      	push	{r4, r7, lr}
 800ceae:	b087      	sub	sp, #28
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60b9      	str	r1, [r7, #8]
 800ceb4:	607a      	str	r2, [r7, #4]
 800ceb6:	603b      	str	r3, [r7, #0]
 800ceb8:	4603      	mov	r3, r0
 800ceba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cebc:	7bfb      	ldrb	r3, [r7, #15]
 800cebe:	4a0a      	ldr	r2, [pc, #40]	@ (800cee8 <disk_write+0x3c>)
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4413      	add	r3, r2
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	68dc      	ldr	r4, [r3, #12]
 800cec8:	7bfb      	ldrb	r3, [r7, #15]
 800ceca:	4a07      	ldr	r2, [pc, #28]	@ (800cee8 <disk_write+0x3c>)
 800cecc:	4413      	add	r3, r2
 800cece:	7a18      	ldrb	r0, [r3, #8]
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	687a      	ldr	r2, [r7, #4]
 800ced4:	68b9      	ldr	r1, [r7, #8]
 800ced6:	47a0      	blx	r4
 800ced8:	4603      	mov	r3, r0
 800ceda:	75fb      	strb	r3, [r7, #23]
  return res;
 800cedc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cede:	4618      	mov	r0, r3
 800cee0:	371c      	adds	r7, #28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd90      	pop	{r4, r7, pc}
 800cee6:	bf00      	nop
 800cee8:	20000d5c 	.word	0x20000d5c

0800ceec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b084      	sub	sp, #16
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	4603      	mov	r3, r0
 800cef4:	603a      	str	r2, [r7, #0]
 800cef6:	71fb      	strb	r3, [r7, #7]
 800cef8:	460b      	mov	r3, r1
 800cefa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cefc:	79fb      	ldrb	r3, [r7, #7]
 800cefe:	4a09      	ldr	r2, [pc, #36]	@ (800cf24 <disk_ioctl+0x38>)
 800cf00:	009b      	lsls	r3, r3, #2
 800cf02:	4413      	add	r3, r2
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	691b      	ldr	r3, [r3, #16]
 800cf08:	79fa      	ldrb	r2, [r7, #7]
 800cf0a:	4906      	ldr	r1, [pc, #24]	@ (800cf24 <disk_ioctl+0x38>)
 800cf0c:	440a      	add	r2, r1
 800cf0e:	7a10      	ldrb	r0, [r2, #8]
 800cf10:	79b9      	ldrb	r1, [r7, #6]
 800cf12:	683a      	ldr	r2, [r7, #0]
 800cf14:	4798      	blx	r3
 800cf16:	4603      	mov	r3, r0
 800cf18:	73fb      	strb	r3, [r7, #15]
  return res;
 800cf1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}
 800cf24:	20000d5c 	.word	0x20000d5c

0800cf28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	3301      	adds	r3, #1
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cf38:	89fb      	ldrh	r3, [r7, #14]
 800cf3a:	021b      	lsls	r3, r3, #8
 800cf3c:	b21a      	sxth	r2, r3
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	b21b      	sxth	r3, r3
 800cf44:	4313      	orrs	r3, r2
 800cf46:	b21b      	sxth	r3, r3
 800cf48:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cf4a:	89fb      	ldrh	r3, [r7, #14]
}
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	3714      	adds	r7, #20
 800cf50:	46bd      	mov	sp, r7
 800cf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf56:	4770      	bx	lr

0800cf58 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b085      	sub	sp, #20
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	3303      	adds	r3, #3
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	021b      	lsls	r3, r3, #8
 800cf6c:	687a      	ldr	r2, [r7, #4]
 800cf6e:	3202      	adds	r2, #2
 800cf70:	7812      	ldrb	r2, [r2, #0]
 800cf72:	4313      	orrs	r3, r2
 800cf74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	021b      	lsls	r3, r3, #8
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	3201      	adds	r2, #1
 800cf7e:	7812      	ldrb	r2, [r2, #0]
 800cf80:	4313      	orrs	r3, r2
 800cf82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	021b      	lsls	r3, r3, #8
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	7812      	ldrb	r2, [r2, #0]
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	60fb      	str	r3, [r7, #12]
	return rv;
 800cf90:	68fb      	ldr	r3, [r7, #12]
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3714      	adds	r7, #20
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr

0800cf9e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cf9e:	b480      	push	{r7}
 800cfa0:	b083      	sub	sp, #12
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	460b      	mov	r3, r1
 800cfa8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	1c5a      	adds	r2, r3, #1
 800cfae:	607a      	str	r2, [r7, #4]
 800cfb0:	887a      	ldrh	r2, [r7, #2]
 800cfb2:	b2d2      	uxtb	r2, r2
 800cfb4:	701a      	strb	r2, [r3, #0]
 800cfb6:	887b      	ldrh	r3, [r7, #2]
 800cfb8:	0a1b      	lsrs	r3, r3, #8
 800cfba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	1c5a      	adds	r2, r3, #1
 800cfc0:	607a      	str	r2, [r7, #4]
 800cfc2:	887a      	ldrh	r2, [r7, #2]
 800cfc4:	b2d2      	uxtb	r2, r2
 800cfc6:	701a      	strb	r2, [r3, #0]
}
 800cfc8:	bf00      	nop
 800cfca:	370c      	adds	r7, #12
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr

0800cfd4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	1c5a      	adds	r2, r3, #1
 800cfe2:	607a      	str	r2, [r7, #4]
 800cfe4:	683a      	ldr	r2, [r7, #0]
 800cfe6:	b2d2      	uxtb	r2, r2
 800cfe8:	701a      	strb	r2, [r3, #0]
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	0a1b      	lsrs	r3, r3, #8
 800cfee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	1c5a      	adds	r2, r3, #1
 800cff4:	607a      	str	r2, [r7, #4]
 800cff6:	683a      	ldr	r2, [r7, #0]
 800cff8:	b2d2      	uxtb	r2, r2
 800cffa:	701a      	strb	r2, [r3, #0]
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	0a1b      	lsrs	r3, r3, #8
 800d000:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	1c5a      	adds	r2, r3, #1
 800d006:	607a      	str	r2, [r7, #4]
 800d008:	683a      	ldr	r2, [r7, #0]
 800d00a:	b2d2      	uxtb	r2, r2
 800d00c:	701a      	strb	r2, [r3, #0]
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	0a1b      	lsrs	r3, r3, #8
 800d012:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	1c5a      	adds	r2, r3, #1
 800d018:	607a      	str	r2, [r7, #4]
 800d01a:	683a      	ldr	r2, [r7, #0]
 800d01c:	b2d2      	uxtb	r2, r2
 800d01e:	701a      	strb	r2, [r3, #0]
}
 800d020:	bf00      	nop
 800d022:	370c      	adds	r7, #12
 800d024:	46bd      	mov	sp, r7
 800d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02a:	4770      	bx	lr

0800d02c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d02c:	b480      	push	{r7}
 800d02e:	b087      	sub	sp, #28
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00d      	beq.n	800d062 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d046:	693a      	ldr	r2, [r7, #16]
 800d048:	1c53      	adds	r3, r2, #1
 800d04a:	613b      	str	r3, [r7, #16]
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	1c59      	adds	r1, r3, #1
 800d050:	6179      	str	r1, [r7, #20]
 800d052:	7812      	ldrb	r2, [r2, #0]
 800d054:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	3b01      	subs	r3, #1
 800d05a:	607b      	str	r3, [r7, #4]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d1f1      	bne.n	800d046 <mem_cpy+0x1a>
	}
}
 800d062:	bf00      	nop
 800d064:	371c      	adds	r7, #28
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d06e:	b480      	push	{r7}
 800d070:	b087      	sub	sp, #28
 800d072:	af00      	add	r7, sp, #0
 800d074:	60f8      	str	r0, [r7, #12]
 800d076:	60b9      	str	r1, [r7, #8]
 800d078:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d07e:	697b      	ldr	r3, [r7, #20]
 800d080:	1c5a      	adds	r2, r3, #1
 800d082:	617a      	str	r2, [r7, #20]
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	b2d2      	uxtb	r2, r2
 800d088:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	3b01      	subs	r3, #1
 800d08e:	607b      	str	r3, [r7, #4]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2b00      	cmp	r3, #0
 800d094:	d1f3      	bne.n	800d07e <mem_set+0x10>
}
 800d096:	bf00      	nop
 800d098:	bf00      	nop
 800d09a:	371c      	adds	r7, #28
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr

0800d0a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d0a4:	b480      	push	{r7}
 800d0a6:	b089      	sub	sp, #36	@ 0x24
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	61fb      	str	r3, [r7, #28]
 800d0b4:	68bb      	ldr	r3, [r7, #8]
 800d0b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d0bc:	69fb      	ldr	r3, [r7, #28]
 800d0be:	1c5a      	adds	r2, r3, #1
 800d0c0:	61fa      	str	r2, [r7, #28]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	1c5a      	adds	r2, r3, #1
 800d0ca:	61ba      	str	r2, [r7, #24]
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	1acb      	subs	r3, r1, r3
 800d0d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	3b01      	subs	r3, #1
 800d0d6:	607b      	str	r3, [r7, #4]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d002      	beq.n	800d0e4 <mem_cmp+0x40>
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d0eb      	beq.n	800d0bc <mem_cmp+0x18>

	return r;
 800d0e4:	697b      	ldr	r3, [r7, #20]
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3724      	adds	r7, #36	@ 0x24
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f0:	4770      	bx	lr

0800d0f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d0f2:	b480      	push	{r7}
 800d0f4:	b083      	sub	sp, #12
 800d0f6:	af00      	add	r7, sp, #0
 800d0f8:	6078      	str	r0, [r7, #4]
 800d0fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d0fc:	e002      	b.n	800d104 <chk_chr+0x12>
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	3301      	adds	r3, #1
 800d102:	607b      	str	r3, [r7, #4]
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d005      	beq.n	800d118 <chk_chr+0x26>
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	781b      	ldrb	r3, [r3, #0]
 800d110:	461a      	mov	r2, r3
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	4293      	cmp	r3, r2
 800d116:	d1f2      	bne.n	800d0fe <chk_chr+0xc>
	return *str;
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	781b      	ldrb	r3, [r3, #0]
}
 800d11c:	4618      	mov	r0, r3
 800d11e:	370c      	adds	r7, #12
 800d120:	46bd      	mov	sp, r7
 800d122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d126:	4770      	bx	lr

0800d128 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d009      	beq.n	800d14a <lock_fs+0x22>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	4618      	mov	r0, r3
 800d13c:	f002 f81d 	bl	800f17a <ff_req_grant>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d001      	beq.n	800d14a <lock_fs+0x22>
 800d146:	2301      	movs	r3, #1
 800d148:	e000      	b.n	800d14c <lock_fs+0x24>
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3708      	adds	r7, #8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b082      	sub	sp, #8
 800d158:	af00      	add	r7, sp, #0
 800d15a:	6078      	str	r0, [r7, #4]
 800d15c:	460b      	mov	r3, r1
 800d15e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00d      	beq.n	800d182 <unlock_fs+0x2e>
 800d166:	78fb      	ldrb	r3, [r7, #3]
 800d168:	2b0c      	cmp	r3, #12
 800d16a:	d00a      	beq.n	800d182 <unlock_fs+0x2e>
 800d16c:	78fb      	ldrb	r3, [r7, #3]
 800d16e:	2b0b      	cmp	r3, #11
 800d170:	d007      	beq.n	800d182 <unlock_fs+0x2e>
 800d172:	78fb      	ldrb	r3, [r7, #3]
 800d174:	2b0f      	cmp	r3, #15
 800d176:	d004      	beq.n	800d182 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f002 f811 	bl	800f1a4 <ff_rel_grant>
	}
}
 800d182:	bf00      	nop
 800d184:	3708      	adds	r7, #8
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
	...

0800d18c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d18c:	b480      	push	{r7}
 800d18e:	b085      	sub	sp, #20
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
 800d194:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d196:	2300      	movs	r3, #0
 800d198:	60bb      	str	r3, [r7, #8]
 800d19a:	68bb      	ldr	r3, [r7, #8]
 800d19c:	60fb      	str	r3, [r7, #12]
 800d19e:	e029      	b.n	800d1f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d1a0:	4a27      	ldr	r2, [pc, #156]	@ (800d240 <chk_lock+0xb4>)
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	011b      	lsls	r3, r3, #4
 800d1a6:	4413      	add	r3, r2
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d01d      	beq.n	800d1ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d1ae:	4a24      	ldr	r2, [pc, #144]	@ (800d240 <chk_lock+0xb4>)
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	011b      	lsls	r3, r3, #4
 800d1b4:	4413      	add	r3, r2
 800d1b6:	681a      	ldr	r2, [r3, #0]
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d116      	bne.n	800d1ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d1c0:	4a1f      	ldr	r2, [pc, #124]	@ (800d240 <chk_lock+0xb4>)
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	011b      	lsls	r3, r3, #4
 800d1c6:	4413      	add	r3, r2
 800d1c8:	3304      	adds	r3, #4
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d10c      	bne.n	800d1ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d1d4:	4a1a      	ldr	r2, [pc, #104]	@ (800d240 <chk_lock+0xb4>)
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	011b      	lsls	r3, r3, #4
 800d1da:	4413      	add	r3, r2
 800d1dc:	3308      	adds	r3, #8
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d102      	bne.n	800d1ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d1e8:	e007      	b.n	800d1fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d1ea:	2301      	movs	r3, #1
 800d1ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	60fb      	str	r3, [r7, #12]
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d9d2      	bls.n	800d1a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d109      	bne.n	800d214 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d102      	bne.n	800d20c <chk_lock+0x80>
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	2b02      	cmp	r3, #2
 800d20a:	d101      	bne.n	800d210 <chk_lock+0x84>
 800d20c:	2300      	movs	r3, #0
 800d20e:	e010      	b.n	800d232 <chk_lock+0xa6>
 800d210:	2312      	movs	r3, #18
 800d212:	e00e      	b.n	800d232 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d108      	bne.n	800d22c <chk_lock+0xa0>
 800d21a:	4a09      	ldr	r2, [pc, #36]	@ (800d240 <chk_lock+0xb4>)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	011b      	lsls	r3, r3, #4
 800d220:	4413      	add	r3, r2
 800d222:	330c      	adds	r3, #12
 800d224:	881b      	ldrh	r3, [r3, #0]
 800d226:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d22a:	d101      	bne.n	800d230 <chk_lock+0xa4>
 800d22c:	2310      	movs	r3, #16
 800d22e:	e000      	b.n	800d232 <chk_lock+0xa6>
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3714      	adds	r7, #20
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	20000d3c 	.word	0x20000d3c

0800d244 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d244:	b480      	push	{r7}
 800d246:	b083      	sub	sp, #12
 800d248:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d24a:	2300      	movs	r3, #0
 800d24c:	607b      	str	r3, [r7, #4]
 800d24e:	e002      	b.n	800d256 <enq_lock+0x12>
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	3301      	adds	r3, #1
 800d254:	607b      	str	r3, [r7, #4]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b01      	cmp	r3, #1
 800d25a:	d806      	bhi.n	800d26a <enq_lock+0x26>
 800d25c:	4a09      	ldr	r2, [pc, #36]	@ (800d284 <enq_lock+0x40>)
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	011b      	lsls	r3, r3, #4
 800d262:	4413      	add	r3, r2
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1f2      	bne.n	800d250 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2b02      	cmp	r3, #2
 800d26e:	bf14      	ite	ne
 800d270:	2301      	movne	r3, #1
 800d272:	2300      	moveq	r3, #0
 800d274:	b2db      	uxtb	r3, r3
}
 800d276:	4618      	mov	r0, r3
 800d278:	370c      	adds	r7, #12
 800d27a:	46bd      	mov	sp, r7
 800d27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d280:	4770      	bx	lr
 800d282:	bf00      	nop
 800d284:	20000d3c 	.word	0x20000d3c

0800d288 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d292:	2300      	movs	r3, #0
 800d294:	60fb      	str	r3, [r7, #12]
 800d296:	e01f      	b.n	800d2d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d298:	4a41      	ldr	r2, [pc, #260]	@ (800d3a0 <inc_lock+0x118>)
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	011b      	lsls	r3, r3, #4
 800d29e:	4413      	add	r3, r2
 800d2a0:	681a      	ldr	r2, [r3, #0]
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d113      	bne.n	800d2d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d2aa:	4a3d      	ldr	r2, [pc, #244]	@ (800d3a0 <inc_lock+0x118>)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	011b      	lsls	r3, r3, #4
 800d2b0:	4413      	add	r3, r2
 800d2b2:	3304      	adds	r3, #4
 800d2b4:	681a      	ldr	r2, [r3, #0]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d109      	bne.n	800d2d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d2be:	4a38      	ldr	r2, [pc, #224]	@ (800d3a0 <inc_lock+0x118>)
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	011b      	lsls	r3, r3, #4
 800d2c4:	4413      	add	r3, r2
 800d2c6:	3308      	adds	r3, #8
 800d2c8:	681a      	ldr	r2, [r3, #0]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d006      	beq.n	800d2e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	3301      	adds	r3, #1
 800d2d6:	60fb      	str	r3, [r7, #12]
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d9dc      	bls.n	800d298 <inc_lock+0x10>
 800d2de:	e000      	b.n	800d2e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d2e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d132      	bne.n	800d34e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	60fb      	str	r3, [r7, #12]
 800d2ec:	e002      	b.n	800d2f4 <inc_lock+0x6c>
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	3301      	adds	r3, #1
 800d2f2:	60fb      	str	r3, [r7, #12]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	2b01      	cmp	r3, #1
 800d2f8:	d806      	bhi.n	800d308 <inc_lock+0x80>
 800d2fa:	4a29      	ldr	r2, [pc, #164]	@ (800d3a0 <inc_lock+0x118>)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	011b      	lsls	r3, r3, #4
 800d300:	4413      	add	r3, r2
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1f2      	bne.n	800d2ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	2b02      	cmp	r3, #2
 800d30c:	d101      	bne.n	800d312 <inc_lock+0x8a>
 800d30e:	2300      	movs	r3, #0
 800d310:	e040      	b.n	800d394 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681a      	ldr	r2, [r3, #0]
 800d316:	4922      	ldr	r1, [pc, #136]	@ (800d3a0 <inc_lock+0x118>)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	011b      	lsls	r3, r3, #4
 800d31c:	440b      	add	r3, r1
 800d31e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	689a      	ldr	r2, [r3, #8]
 800d324:	491e      	ldr	r1, [pc, #120]	@ (800d3a0 <inc_lock+0x118>)
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	011b      	lsls	r3, r3, #4
 800d32a:	440b      	add	r3, r1
 800d32c:	3304      	adds	r3, #4
 800d32e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	695a      	ldr	r2, [r3, #20]
 800d334:	491a      	ldr	r1, [pc, #104]	@ (800d3a0 <inc_lock+0x118>)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	011b      	lsls	r3, r3, #4
 800d33a:	440b      	add	r3, r1
 800d33c:	3308      	adds	r3, #8
 800d33e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d340:	4a17      	ldr	r2, [pc, #92]	@ (800d3a0 <inc_lock+0x118>)
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	011b      	lsls	r3, r3, #4
 800d346:	4413      	add	r3, r2
 800d348:	330c      	adds	r3, #12
 800d34a:	2200      	movs	r2, #0
 800d34c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d34e:	683b      	ldr	r3, [r7, #0]
 800d350:	2b00      	cmp	r3, #0
 800d352:	d009      	beq.n	800d368 <inc_lock+0xe0>
 800d354:	4a12      	ldr	r2, [pc, #72]	@ (800d3a0 <inc_lock+0x118>)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	011b      	lsls	r3, r3, #4
 800d35a:	4413      	add	r3, r2
 800d35c:	330c      	adds	r3, #12
 800d35e:	881b      	ldrh	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d001      	beq.n	800d368 <inc_lock+0xe0>
 800d364:	2300      	movs	r3, #0
 800d366:	e015      	b.n	800d394 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d108      	bne.n	800d380 <inc_lock+0xf8>
 800d36e:	4a0c      	ldr	r2, [pc, #48]	@ (800d3a0 <inc_lock+0x118>)
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	011b      	lsls	r3, r3, #4
 800d374:	4413      	add	r3, r2
 800d376:	330c      	adds	r3, #12
 800d378:	881b      	ldrh	r3, [r3, #0]
 800d37a:	3301      	adds	r3, #1
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	e001      	b.n	800d384 <inc_lock+0xfc>
 800d380:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d384:	4906      	ldr	r1, [pc, #24]	@ (800d3a0 <inc_lock+0x118>)
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	011b      	lsls	r3, r3, #4
 800d38a:	440b      	add	r3, r1
 800d38c:	330c      	adds	r3, #12
 800d38e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	3301      	adds	r3, #1
}
 800d394:	4618      	mov	r0, r3
 800d396:	3714      	adds	r7, #20
 800d398:	46bd      	mov	sp, r7
 800d39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39e:	4770      	bx	lr
 800d3a0:	20000d3c 	.word	0x20000d3c

0800d3a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b085      	sub	sp, #20
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	3b01      	subs	r3, #1
 800d3b0:	607b      	str	r3, [r7, #4]
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d825      	bhi.n	800d404 <dec_lock+0x60>
		n = Files[i].ctr;
 800d3b8:	4a17      	ldr	r2, [pc, #92]	@ (800d418 <dec_lock+0x74>)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	011b      	lsls	r3, r3, #4
 800d3be:	4413      	add	r3, r2
 800d3c0:	330c      	adds	r3, #12
 800d3c2:	881b      	ldrh	r3, [r3, #0]
 800d3c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d3c6:	89fb      	ldrh	r3, [r7, #14]
 800d3c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d3cc:	d101      	bne.n	800d3d2 <dec_lock+0x2e>
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d3d2:	89fb      	ldrh	r3, [r7, #14]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d002      	beq.n	800d3de <dec_lock+0x3a>
 800d3d8:	89fb      	ldrh	r3, [r7, #14]
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d3de:	4a0e      	ldr	r2, [pc, #56]	@ (800d418 <dec_lock+0x74>)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	011b      	lsls	r3, r3, #4
 800d3e4:	4413      	add	r3, r2
 800d3e6:	330c      	adds	r3, #12
 800d3e8:	89fa      	ldrh	r2, [r7, #14]
 800d3ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d3ec:	89fb      	ldrh	r3, [r7, #14]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d105      	bne.n	800d3fe <dec_lock+0x5a>
 800d3f2:	4a09      	ldr	r2, [pc, #36]	@ (800d418 <dec_lock+0x74>)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	011b      	lsls	r3, r3, #4
 800d3f8:	4413      	add	r3, r2
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d3fe:	2300      	movs	r3, #0
 800d400:	737b      	strb	r3, [r7, #13]
 800d402:	e001      	b.n	800d408 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d404:	2302      	movs	r3, #2
 800d406:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d408:	7b7b      	ldrb	r3, [r7, #13]
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	3714      	adds	r7, #20
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	20000d3c 	.word	0x20000d3c

0800d41c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b085      	sub	sp, #20
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d424:	2300      	movs	r3, #0
 800d426:	60fb      	str	r3, [r7, #12]
 800d428:	e010      	b.n	800d44c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d42a:	4a0d      	ldr	r2, [pc, #52]	@ (800d460 <clear_lock+0x44>)
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	011b      	lsls	r3, r3, #4
 800d430:	4413      	add	r3, r2
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	429a      	cmp	r2, r3
 800d438:	d105      	bne.n	800d446 <clear_lock+0x2a>
 800d43a:	4a09      	ldr	r2, [pc, #36]	@ (800d460 <clear_lock+0x44>)
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	011b      	lsls	r3, r3, #4
 800d440:	4413      	add	r3, r2
 800d442:	2200      	movs	r2, #0
 800d444:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	3301      	adds	r3, #1
 800d44a:	60fb      	str	r3, [r7, #12]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	2b01      	cmp	r3, #1
 800d450:	d9eb      	bls.n	800d42a <clear_lock+0xe>
	}
}
 800d452:	bf00      	nop
 800d454:	bf00      	nop
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	20000d3c 	.word	0x20000d3c

0800d464 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d464:	b580      	push	{r7, lr}
 800d466:	b086      	sub	sp, #24
 800d468:	af00      	add	r7, sp, #0
 800d46a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d46c:	2300      	movs	r3, #0
 800d46e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	78db      	ldrb	r3, [r3, #3]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d034      	beq.n	800d4e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d47c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	7858      	ldrb	r0, [r3, #1]
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d488:	2301      	movs	r3, #1
 800d48a:	697a      	ldr	r2, [r7, #20]
 800d48c:	f7ff fd0e 	bl	800ceac <disk_write>
 800d490:	4603      	mov	r3, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	d002      	beq.n	800d49c <sync_window+0x38>
			res = FR_DISK_ERR;
 800d496:	2301      	movs	r3, #1
 800d498:	73fb      	strb	r3, [r7, #15]
 800d49a:	e022      	b.n	800d4e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	2200      	movs	r2, #0
 800d4a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4a6:	697a      	ldr	r2, [r7, #20]
 800d4a8:	1ad2      	subs	r2, r2, r3
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	69db      	ldr	r3, [r3, #28]
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d217      	bcs.n	800d4e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	789b      	ldrb	r3, [r3, #2]
 800d4b6:	613b      	str	r3, [r7, #16]
 800d4b8:	e010      	b.n	800d4dc <sync_window+0x78>
					wsect += fs->fsize;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	69db      	ldr	r3, [r3, #28]
 800d4be:	697a      	ldr	r2, [r7, #20]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	7858      	ldrb	r0, [r3, #1]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	697a      	ldr	r2, [r7, #20]
 800d4d2:	f7ff fceb 	bl	800ceac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	613b      	str	r3, [r7, #16]
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d8eb      	bhi.n	800d4ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	3718      	adds	r7, #24
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	bd80      	pop	{r7, pc}

0800d4ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b084      	sub	sp, #16
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4fe:	683a      	ldr	r2, [r7, #0]
 800d500:	429a      	cmp	r2, r3
 800d502:	d01b      	beq.n	800d53c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7ff ffad 	bl	800d464 <sync_window>
 800d50a:	4603      	mov	r3, r0
 800d50c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d50e:	7bfb      	ldrb	r3, [r7, #15]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d113      	bne.n	800d53c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	7858      	ldrb	r0, [r3, #1]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d51e:	2301      	movs	r3, #1
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	f7ff fca3 	bl	800ce6c <disk_read>
 800d526:	4603      	mov	r3, r0
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d004      	beq.n	800d536 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d52c:	f04f 33ff 	mov.w	r3, #4294967295
 800d530:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d532:	2301      	movs	r3, #1
 800d534:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	683a      	ldr	r2, [r7, #0]
 800d53a:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}
	...

0800d548 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f7ff ff87 	bl	800d464 <sync_window>
 800d556:	4603      	mov	r3, r0
 800d558:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d55a:	7bfb      	ldrb	r3, [r7, #15]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d158      	bne.n	800d612 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	2b03      	cmp	r3, #3
 800d566:	d148      	bne.n	800d5fa <sync_fs+0xb2>
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	791b      	ldrb	r3, [r3, #4]
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d144      	bne.n	800d5fa <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	3334      	adds	r3, #52	@ 0x34
 800d574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d578:	2100      	movs	r1, #0
 800d57a:	4618      	mov	r0, r3
 800d57c:	f7ff fd77 	bl	800d06e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	3334      	adds	r3, #52	@ 0x34
 800d584:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d588:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7ff fd06 	bl	800cf9e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	3334      	adds	r3, #52	@ 0x34
 800d596:	4921      	ldr	r1, [pc, #132]	@ (800d61c <sync_fs+0xd4>)
 800d598:	4618      	mov	r0, r3
 800d59a:	f7ff fd1b 	bl	800cfd4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	3334      	adds	r3, #52	@ 0x34
 800d5a2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d5a6:	491e      	ldr	r1, [pc, #120]	@ (800d620 <sync_fs+0xd8>)
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f7ff fd13 	bl	800cfd4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	3334      	adds	r3, #52	@ 0x34
 800d5b2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	695b      	ldr	r3, [r3, #20]
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	4610      	mov	r0, r2
 800d5be:	f7ff fd09 	bl	800cfd4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	3334      	adds	r3, #52	@ 0x34
 800d5c6:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	691b      	ldr	r3, [r3, #16]
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	4610      	mov	r0, r2
 800d5d2:	f7ff fcff 	bl	800cfd4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	1c5a      	adds	r2, r3, #1
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	7858      	ldrb	r0, [r3, #1]
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	f7ff fc5c 	bl	800ceac <disk_write>
			fs->fsi_flag = 0;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2200      	movs	r2, #0
 800d5f8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	785b      	ldrb	r3, [r3, #1]
 800d5fe:	2200      	movs	r2, #0
 800d600:	2100      	movs	r1, #0
 800d602:	4618      	mov	r0, r3
 800d604:	f7ff fc72 	bl	800ceec <disk_ioctl>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d001      	beq.n	800d612 <sync_fs+0xca>
 800d60e:	2301      	movs	r3, #1
 800d610:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d612:	7bfb      	ldrb	r3, [r7, #15]
}
 800d614:	4618      	mov	r0, r3
 800d616:	3710      	adds	r7, #16
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}
 800d61c:	41615252 	.word	0x41615252
 800d620:	61417272 	.word	0x61417272

0800d624 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	3b02      	subs	r3, #2
 800d632:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	699b      	ldr	r3, [r3, #24]
 800d638:	3b02      	subs	r3, #2
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d301      	bcc.n	800d644 <clust2sect+0x20>
 800d640:	2300      	movs	r3, #0
 800d642:	e008      	b.n	800d656 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	895b      	ldrh	r3, [r3, #10]
 800d648:	461a      	mov	r2, r3
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	fb03 f202 	mul.w	r2, r3, r2
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d654:	4413      	add	r3, r2
}
 800d656:	4618      	mov	r0, r3
 800d658:	370c      	adds	r7, #12
 800d65a:	46bd      	mov	sp, r7
 800d65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d660:	4770      	bx	lr

0800d662 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b086      	sub	sp, #24
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d672:	683b      	ldr	r3, [r7, #0]
 800d674:	2b01      	cmp	r3, #1
 800d676:	d904      	bls.n	800d682 <get_fat+0x20>
 800d678:	693b      	ldr	r3, [r7, #16]
 800d67a:	699b      	ldr	r3, [r3, #24]
 800d67c:	683a      	ldr	r2, [r7, #0]
 800d67e:	429a      	cmp	r2, r3
 800d680:	d302      	bcc.n	800d688 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d682:	2301      	movs	r3, #1
 800d684:	617b      	str	r3, [r7, #20]
 800d686:	e08e      	b.n	800d7a6 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d688:	f04f 33ff 	mov.w	r3, #4294967295
 800d68c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d68e:	693b      	ldr	r3, [r7, #16]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	2b03      	cmp	r3, #3
 800d694:	d061      	beq.n	800d75a <get_fat+0xf8>
 800d696:	2b03      	cmp	r3, #3
 800d698:	dc7b      	bgt.n	800d792 <get_fat+0x130>
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d002      	beq.n	800d6a4 <get_fat+0x42>
 800d69e:	2b02      	cmp	r3, #2
 800d6a0:	d041      	beq.n	800d726 <get_fat+0xc4>
 800d6a2:	e076      	b.n	800d792 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	60fb      	str	r3, [r7, #12]
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	085b      	lsrs	r3, r3, #1
 800d6ac:	68fa      	ldr	r2, [r7, #12]
 800d6ae:	4413      	add	r3, r2
 800d6b0:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	0a5b      	lsrs	r3, r3, #9
 800d6ba:	4413      	add	r3, r2
 800d6bc:	4619      	mov	r1, r3
 800d6be:	6938      	ldr	r0, [r7, #16]
 800d6c0:	f7ff ff14 	bl	800d4ec <move_window>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d166      	bne.n	800d798 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	1c5a      	adds	r2, r3, #1
 800d6ce:	60fa      	str	r2, [r7, #12]
 800d6d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6d4:	693a      	ldr	r2, [r7, #16]
 800d6d6:	4413      	add	r3, r2
 800d6d8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d6dc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d6de:	693b      	ldr	r3, [r7, #16]
 800d6e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	0a5b      	lsrs	r3, r3, #9
 800d6e6:	4413      	add	r3, r2
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	6938      	ldr	r0, [r7, #16]
 800d6ec:	f7ff fefe 	bl	800d4ec <move_window>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d152      	bne.n	800d79c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6fc:	693a      	ldr	r2, [r7, #16]
 800d6fe:	4413      	add	r3, r2
 800d700:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d704:	021b      	lsls	r3, r3, #8
 800d706:	68ba      	ldr	r2, [r7, #8]
 800d708:	4313      	orrs	r3, r2
 800d70a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	f003 0301 	and.w	r3, r3, #1
 800d712:	2b00      	cmp	r3, #0
 800d714:	d002      	beq.n	800d71c <get_fat+0xba>
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	091b      	lsrs	r3, r3, #4
 800d71a:	e002      	b.n	800d722 <get_fat+0xc0>
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d722:	617b      	str	r3, [r7, #20]
			break;
 800d724:	e03f      	b.n	800d7a6 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d726:	693b      	ldr	r3, [r7, #16]
 800d728:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	0a1b      	lsrs	r3, r3, #8
 800d72e:	4413      	add	r3, r2
 800d730:	4619      	mov	r1, r3
 800d732:	6938      	ldr	r0, [r7, #16]
 800d734:	f7ff feda 	bl	800d4ec <move_window>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d130      	bne.n	800d7a0 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	005b      	lsls	r3, r3, #1
 800d748:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d74c:	4413      	add	r3, r2
 800d74e:	4618      	mov	r0, r3
 800d750:	f7ff fbea 	bl	800cf28 <ld_word>
 800d754:	4603      	mov	r3, r0
 800d756:	617b      	str	r3, [r7, #20]
			break;
 800d758:	e025      	b.n	800d7a6 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d75e:	683b      	ldr	r3, [r7, #0]
 800d760:	09db      	lsrs	r3, r3, #7
 800d762:	4413      	add	r3, r2
 800d764:	4619      	mov	r1, r3
 800d766:	6938      	ldr	r0, [r7, #16]
 800d768:	f7ff fec0 	bl	800d4ec <move_window>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d118      	bne.n	800d7a4 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d780:	4413      	add	r3, r2
 800d782:	4618      	mov	r0, r3
 800d784:	f7ff fbe8 	bl	800cf58 <ld_dword>
 800d788:	4603      	mov	r3, r0
 800d78a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d78e:	617b      	str	r3, [r7, #20]
			break;
 800d790:	e009      	b.n	800d7a6 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d792:	2301      	movs	r3, #1
 800d794:	617b      	str	r3, [r7, #20]
 800d796:	e006      	b.n	800d7a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d798:	bf00      	nop
 800d79a:	e004      	b.n	800d7a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d79c:	bf00      	nop
 800d79e:	e002      	b.n	800d7a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d7a0:	bf00      	nop
 800d7a2:	e000      	b.n	800d7a6 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d7a4:	bf00      	nop
		}
	}

	return val;
 800d7a6:	697b      	ldr	r3, [r7, #20]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3718      	adds	r7, #24
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}

0800d7b0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d7b0:	b590      	push	{r4, r7, lr}
 800d7b2:	b089      	sub	sp, #36	@ 0x24
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	60f8      	str	r0, [r7, #12]
 800d7b8:	60b9      	str	r1, [r7, #8]
 800d7ba:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d7bc:	2302      	movs	r3, #2
 800d7be:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	2b01      	cmp	r3, #1
 800d7c4:	f240 80d9 	bls.w	800d97a <put_fat+0x1ca>
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	699b      	ldr	r3, [r3, #24]
 800d7cc:	68ba      	ldr	r2, [r7, #8]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	f080 80d3 	bcs.w	800d97a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	2b03      	cmp	r3, #3
 800d7da:	f000 8096 	beq.w	800d90a <put_fat+0x15a>
 800d7de:	2b03      	cmp	r3, #3
 800d7e0:	f300 80cb 	bgt.w	800d97a <put_fat+0x1ca>
 800d7e4:	2b01      	cmp	r3, #1
 800d7e6:	d002      	beq.n	800d7ee <put_fat+0x3e>
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d06e      	beq.n	800d8ca <put_fat+0x11a>
 800d7ec:	e0c5      	b.n	800d97a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	61bb      	str	r3, [r7, #24]
 800d7f2:	69bb      	ldr	r3, [r7, #24]
 800d7f4:	085b      	lsrs	r3, r3, #1
 800d7f6:	69ba      	ldr	r2, [r7, #24]
 800d7f8:	4413      	add	r3, r2
 800d7fa:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d800:	69bb      	ldr	r3, [r7, #24]
 800d802:	0a5b      	lsrs	r3, r3, #9
 800d804:	4413      	add	r3, r2
 800d806:	4619      	mov	r1, r3
 800d808:	68f8      	ldr	r0, [r7, #12]
 800d80a:	f7ff fe6f 	bl	800d4ec <move_window>
 800d80e:	4603      	mov	r3, r0
 800d810:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d812:	7ffb      	ldrb	r3, [r7, #31]
 800d814:	2b00      	cmp	r3, #0
 800d816:	f040 80a9 	bne.w	800d96c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d820:	69bb      	ldr	r3, [r7, #24]
 800d822:	1c59      	adds	r1, r3, #1
 800d824:	61b9      	str	r1, [r7, #24]
 800d826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d82a:	4413      	add	r3, r2
 800d82c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d82e:	68bb      	ldr	r3, [r7, #8]
 800d830:	f003 0301 	and.w	r3, r3, #1
 800d834:	2b00      	cmp	r3, #0
 800d836:	d00d      	beq.n	800d854 <put_fat+0xa4>
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	781b      	ldrb	r3, [r3, #0]
 800d83c:	b25b      	sxtb	r3, r3
 800d83e:	f003 030f 	and.w	r3, r3, #15
 800d842:	b25a      	sxtb	r2, r3
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	b2db      	uxtb	r3, r3
 800d848:	011b      	lsls	r3, r3, #4
 800d84a:	b25b      	sxtb	r3, r3
 800d84c:	4313      	orrs	r3, r2
 800d84e:	b25b      	sxtb	r3, r3
 800d850:	b2db      	uxtb	r3, r3
 800d852:	e001      	b.n	800d858 <put_fat+0xa8>
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	b2db      	uxtb	r3, r3
 800d858:	697a      	ldr	r2, [r7, #20]
 800d85a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	2201      	movs	r2, #1
 800d860:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d866:	69bb      	ldr	r3, [r7, #24]
 800d868:	0a5b      	lsrs	r3, r3, #9
 800d86a:	4413      	add	r3, r2
 800d86c:	4619      	mov	r1, r3
 800d86e:	68f8      	ldr	r0, [r7, #12]
 800d870:	f7ff fe3c 	bl	800d4ec <move_window>
 800d874:	4603      	mov	r3, r0
 800d876:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d878:	7ffb      	ldrb	r3, [r7, #31]
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d178      	bne.n	800d970 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d884:	69bb      	ldr	r3, [r7, #24]
 800d886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d88a:	4413      	add	r3, r2
 800d88c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	f003 0301 	and.w	r3, r3, #1
 800d894:	2b00      	cmp	r3, #0
 800d896:	d003      	beq.n	800d8a0 <put_fat+0xf0>
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	091b      	lsrs	r3, r3, #4
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	e00e      	b.n	800d8be <put_fat+0x10e>
 800d8a0:	697b      	ldr	r3, [r7, #20]
 800d8a2:	781b      	ldrb	r3, [r3, #0]
 800d8a4:	b25b      	sxtb	r3, r3
 800d8a6:	f023 030f 	bic.w	r3, r3, #15
 800d8aa:	b25a      	sxtb	r2, r3
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	0a1b      	lsrs	r3, r3, #8
 800d8b0:	b25b      	sxtb	r3, r3
 800d8b2:	f003 030f 	and.w	r3, r3, #15
 800d8b6:	b25b      	sxtb	r3, r3
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	b25b      	sxtb	r3, r3
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	697a      	ldr	r2, [r7, #20]
 800d8c0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	2201      	movs	r2, #1
 800d8c6:	70da      	strb	r2, [r3, #3]
			break;
 800d8c8:	e057      	b.n	800d97a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	0a1b      	lsrs	r3, r3, #8
 800d8d2:	4413      	add	r3, r2
 800d8d4:	4619      	mov	r1, r3
 800d8d6:	68f8      	ldr	r0, [r7, #12]
 800d8d8:	f7ff fe08 	bl	800d4ec <move_window>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d8e0:	7ffb      	ldrb	r3, [r7, #31]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d146      	bne.n	800d974 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	005b      	lsls	r3, r3, #1
 800d8f0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d8f4:	4413      	add	r3, r2
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	b292      	uxth	r2, r2
 800d8fa:	4611      	mov	r1, r2
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7ff fb4e 	bl	800cf9e <st_word>
			fs->wflag = 1;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2201      	movs	r2, #1
 800d906:	70da      	strb	r2, [r3, #3]
			break;
 800d908:	e037      	b.n	800d97a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	09db      	lsrs	r3, r3, #7
 800d912:	4413      	add	r3, r2
 800d914:	4619      	mov	r1, r3
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f7ff fde8 	bl	800d4ec <move_window>
 800d91c:	4603      	mov	r3, r0
 800d91e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d920:	7ffb      	ldrb	r3, [r7, #31]
 800d922:	2b00      	cmp	r3, #0
 800d924:	d128      	bne.n	800d978 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	009b      	lsls	r3, r3, #2
 800d936:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d93a:	4413      	add	r3, r2
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7ff fb0b 	bl	800cf58 <ld_dword>
 800d942:	4603      	mov	r3, r0
 800d944:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d948:	4323      	orrs	r3, r4
 800d94a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	009b      	lsls	r3, r3, #2
 800d956:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d95a:	4413      	add	r3, r2
 800d95c:	6879      	ldr	r1, [r7, #4]
 800d95e:	4618      	mov	r0, r3
 800d960:	f7ff fb38 	bl	800cfd4 <st_dword>
			fs->wflag = 1;
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2201      	movs	r2, #1
 800d968:	70da      	strb	r2, [r3, #3]
			break;
 800d96a:	e006      	b.n	800d97a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d96c:	bf00      	nop
 800d96e:	e004      	b.n	800d97a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d970:	bf00      	nop
 800d972:	e002      	b.n	800d97a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d974:	bf00      	nop
 800d976:	e000      	b.n	800d97a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d978:	bf00      	nop
		}
	}
	return res;
 800d97a:	7ffb      	ldrb	r3, [r7, #31]
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3724      	adds	r7, #36	@ 0x24
 800d980:	46bd      	mov	sp, r7
 800d982:	bd90      	pop	{r4, r7, pc}

0800d984 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b088      	sub	sp, #32
 800d988:	af00      	add	r7, sp, #0
 800d98a:	60f8      	str	r0, [r7, #12]
 800d98c:	60b9      	str	r1, [r7, #8]
 800d98e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d990:	2300      	movs	r3, #0
 800d992:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d904      	bls.n	800d9aa <remove_chain+0x26>
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	699b      	ldr	r3, [r3, #24]
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d301      	bcc.n	800d9ae <remove_chain+0x2a>
 800d9aa:	2302      	movs	r3, #2
 800d9ac:	e04b      	b.n	800da46 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00c      	beq.n	800d9ce <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9b8:	6879      	ldr	r1, [r7, #4]
 800d9ba:	69b8      	ldr	r0, [r7, #24]
 800d9bc:	f7ff fef8 	bl	800d7b0 <put_fat>
 800d9c0:	4603      	mov	r3, r0
 800d9c2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d9c4:	7ffb      	ldrb	r3, [r7, #31]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d001      	beq.n	800d9ce <remove_chain+0x4a>
 800d9ca:	7ffb      	ldrb	r3, [r7, #31]
 800d9cc:	e03b      	b.n	800da46 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d9ce:	68b9      	ldr	r1, [r7, #8]
 800d9d0:	68f8      	ldr	r0, [r7, #12]
 800d9d2:	f7ff fe46 	bl	800d662 <get_fat>
 800d9d6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d031      	beq.n	800da42 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	2b01      	cmp	r3, #1
 800d9e2:	d101      	bne.n	800d9e8 <remove_chain+0x64>
 800d9e4:	2302      	movs	r3, #2
 800d9e6:	e02e      	b.n	800da46 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9ee:	d101      	bne.n	800d9f4 <remove_chain+0x70>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	e028      	b.n	800da46 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d9f4:	2200      	movs	r2, #0
 800d9f6:	68b9      	ldr	r1, [r7, #8]
 800d9f8:	69b8      	ldr	r0, [r7, #24]
 800d9fa:	f7ff fed9 	bl	800d7b0 <put_fat>
 800d9fe:	4603      	mov	r3, r0
 800da00:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800da02:	7ffb      	ldrb	r3, [r7, #31]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d001      	beq.n	800da0c <remove_chain+0x88>
 800da08:	7ffb      	ldrb	r3, [r7, #31]
 800da0a:	e01c      	b.n	800da46 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	695a      	ldr	r2, [r3, #20]
 800da10:	69bb      	ldr	r3, [r7, #24]
 800da12:	699b      	ldr	r3, [r3, #24]
 800da14:	3b02      	subs	r3, #2
 800da16:	429a      	cmp	r2, r3
 800da18:	d20b      	bcs.n	800da32 <remove_chain+0xae>
			fs->free_clst++;
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	695b      	ldr	r3, [r3, #20]
 800da1e:	1c5a      	adds	r2, r3, #1
 800da20:	69bb      	ldr	r3, [r7, #24]
 800da22:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800da24:	69bb      	ldr	r3, [r7, #24]
 800da26:	791b      	ldrb	r3, [r3, #4]
 800da28:	f043 0301 	orr.w	r3, r3, #1
 800da2c:	b2da      	uxtb	r2, r3
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800da36:	69bb      	ldr	r3, [r7, #24]
 800da38:	699b      	ldr	r3, [r3, #24]
 800da3a:	68ba      	ldr	r2, [r7, #8]
 800da3c:	429a      	cmp	r2, r3
 800da3e:	d3c6      	bcc.n	800d9ce <remove_chain+0x4a>
 800da40:	e000      	b.n	800da44 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800da42:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800da44:	2300      	movs	r3, #0
}
 800da46:	4618      	mov	r0, r3
 800da48:	3720      	adds	r7, #32
 800da4a:	46bd      	mov	sp, r7
 800da4c:	bd80      	pop	{r7, pc}

0800da4e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800da4e:	b580      	push	{r7, lr}
 800da50:	b088      	sub	sp, #32
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
 800da56:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800da5e:	683b      	ldr	r3, [r7, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10d      	bne.n	800da80 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	691b      	ldr	r3, [r3, #16]
 800da68:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800da6a:	69bb      	ldr	r3, [r7, #24]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d004      	beq.n	800da7a <create_chain+0x2c>
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	69ba      	ldr	r2, [r7, #24]
 800da76:	429a      	cmp	r2, r3
 800da78:	d31b      	bcc.n	800dab2 <create_chain+0x64>
 800da7a:	2301      	movs	r3, #1
 800da7c:	61bb      	str	r3, [r7, #24]
 800da7e:	e018      	b.n	800dab2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800da80:	6839      	ldr	r1, [r7, #0]
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7ff fded 	bl	800d662 <get_fat>
 800da88:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d801      	bhi.n	800da94 <create_chain+0x46>
 800da90:	2301      	movs	r3, #1
 800da92:	e070      	b.n	800db76 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da9a:	d101      	bne.n	800daa0 <create_chain+0x52>
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	e06a      	b.n	800db76 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	699b      	ldr	r3, [r3, #24]
 800daa4:	68fa      	ldr	r2, [r7, #12]
 800daa6:	429a      	cmp	r2, r3
 800daa8:	d201      	bcs.n	800daae <create_chain+0x60>
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	e063      	b.n	800db76 <create_chain+0x128>
		scl = clst;
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dab6:	69fb      	ldr	r3, [r7, #28]
 800dab8:	3301      	adds	r3, #1
 800daba:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dabc:	693b      	ldr	r3, [r7, #16]
 800dabe:	699b      	ldr	r3, [r3, #24]
 800dac0:	69fa      	ldr	r2, [r7, #28]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d307      	bcc.n	800dad6 <create_chain+0x88>
				ncl = 2;
 800dac6:	2302      	movs	r3, #2
 800dac8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800daca:	69fa      	ldr	r2, [r7, #28]
 800dacc:	69bb      	ldr	r3, [r7, #24]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d901      	bls.n	800dad6 <create_chain+0x88>
 800dad2:	2300      	movs	r3, #0
 800dad4:	e04f      	b.n	800db76 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dad6:	69f9      	ldr	r1, [r7, #28]
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7ff fdc2 	bl	800d662 <get_fat>
 800dade:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00e      	beq.n	800db04 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2b01      	cmp	r3, #1
 800daea:	d003      	beq.n	800daf4 <create_chain+0xa6>
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daf2:	d101      	bne.n	800daf8 <create_chain+0xaa>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	e03e      	b.n	800db76 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800daf8:	69fa      	ldr	r2, [r7, #28]
 800dafa:	69bb      	ldr	r3, [r7, #24]
 800dafc:	429a      	cmp	r2, r3
 800dafe:	d1da      	bne.n	800dab6 <create_chain+0x68>
 800db00:	2300      	movs	r3, #0
 800db02:	e038      	b.n	800db76 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800db04:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800db06:	f04f 32ff 	mov.w	r2, #4294967295
 800db0a:	69f9      	ldr	r1, [r7, #28]
 800db0c:	6938      	ldr	r0, [r7, #16]
 800db0e:	f7ff fe4f 	bl	800d7b0 <put_fat>
 800db12:	4603      	mov	r3, r0
 800db14:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800db16:	7dfb      	ldrb	r3, [r7, #23]
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d109      	bne.n	800db30 <create_chain+0xe2>
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d006      	beq.n	800db30 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800db22:	69fa      	ldr	r2, [r7, #28]
 800db24:	6839      	ldr	r1, [r7, #0]
 800db26:	6938      	ldr	r0, [r7, #16]
 800db28:	f7ff fe42 	bl	800d7b0 <put_fat>
 800db2c:	4603      	mov	r3, r0
 800db2e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800db30:	7dfb      	ldrb	r3, [r7, #23]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d116      	bne.n	800db64 <create_chain+0x116>
		fs->last_clst = ncl;
 800db36:	693b      	ldr	r3, [r7, #16]
 800db38:	69fa      	ldr	r2, [r7, #28]
 800db3a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	695a      	ldr	r2, [r3, #20]
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	699b      	ldr	r3, [r3, #24]
 800db44:	3b02      	subs	r3, #2
 800db46:	429a      	cmp	r2, r3
 800db48:	d804      	bhi.n	800db54 <create_chain+0x106>
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	695b      	ldr	r3, [r3, #20]
 800db4e:	1e5a      	subs	r2, r3, #1
 800db50:	693b      	ldr	r3, [r7, #16]
 800db52:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800db54:	693b      	ldr	r3, [r7, #16]
 800db56:	791b      	ldrb	r3, [r3, #4]
 800db58:	f043 0301 	orr.w	r3, r3, #1
 800db5c:	b2da      	uxtb	r2, r3
 800db5e:	693b      	ldr	r3, [r7, #16]
 800db60:	711a      	strb	r2, [r3, #4]
 800db62:	e007      	b.n	800db74 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800db64:	7dfb      	ldrb	r3, [r7, #23]
 800db66:	2b01      	cmp	r3, #1
 800db68:	d102      	bne.n	800db70 <create_chain+0x122>
 800db6a:	f04f 33ff 	mov.w	r3, #4294967295
 800db6e:	e000      	b.n	800db72 <create_chain+0x124>
 800db70:	2301      	movs	r3, #1
 800db72:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800db74:	69fb      	ldr	r3, [r7, #28]
}
 800db76:	4618      	mov	r0, r3
 800db78:	3720      	adds	r7, #32
 800db7a:	46bd      	mov	sp, r7
 800db7c:	bd80      	pop	{r7, pc}

0800db7e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800db7e:	b480      	push	{r7}
 800db80:	b087      	sub	sp, #28
 800db82:	af00      	add	r7, sp, #0
 800db84:	6078      	str	r0, [r7, #4]
 800db86:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db92:	3304      	adds	r3, #4
 800db94:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800db96:	683b      	ldr	r3, [r7, #0]
 800db98:	0a5b      	lsrs	r3, r3, #9
 800db9a:	68fa      	ldr	r2, [r7, #12]
 800db9c:	8952      	ldrh	r2, [r2, #10]
 800db9e:	fbb3 f3f2 	udiv	r3, r3, r2
 800dba2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	1d1a      	adds	r2, r3, #4
 800dba8:	613a      	str	r2, [r7, #16]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d101      	bne.n	800dbb8 <clmt_clust+0x3a>
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	e010      	b.n	800dbda <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800dbb8:	697a      	ldr	r2, [r7, #20]
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	d307      	bcc.n	800dbd0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800dbc0:	697a      	ldr	r2, [r7, #20]
 800dbc2:	68bb      	ldr	r3, [r7, #8]
 800dbc4:	1ad3      	subs	r3, r2, r3
 800dbc6:	617b      	str	r3, [r7, #20]
 800dbc8:	693b      	ldr	r3, [r7, #16]
 800dbca:	3304      	adds	r3, #4
 800dbcc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dbce:	e7e9      	b.n	800dba4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800dbd0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	681a      	ldr	r2, [r3, #0]
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	4413      	add	r3, r2
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	371c      	adds	r7, #28
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr

0800dbe6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b086      	sub	sp, #24
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dbfc:	d204      	bcs.n	800dc08 <dir_sdi+0x22>
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	f003 031f 	and.w	r3, r3, #31
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d001      	beq.n	800dc0c <dir_sdi+0x26>
		return FR_INT_ERR;
 800dc08:	2302      	movs	r3, #2
 800dc0a:	e063      	b.n	800dcd4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	683a      	ldr	r2, [r7, #0]
 800dc10:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	689b      	ldr	r3, [r3, #8]
 800dc16:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d106      	bne.n	800dc2c <dir_sdi+0x46>
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	2b02      	cmp	r3, #2
 800dc24:	d902      	bls.n	800dc2c <dir_sdi+0x46>
		clst = fs->dirbase;
 800dc26:	693b      	ldr	r3, [r7, #16]
 800dc28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc2a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d10c      	bne.n	800dc4c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	095b      	lsrs	r3, r3, #5
 800dc36:	693a      	ldr	r2, [r7, #16]
 800dc38:	8912      	ldrh	r2, [r2, #8]
 800dc3a:	4293      	cmp	r3, r2
 800dc3c:	d301      	bcc.n	800dc42 <dir_sdi+0x5c>
 800dc3e:	2302      	movs	r3, #2
 800dc40:	e048      	b.n	800dcd4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	61da      	str	r2, [r3, #28]
 800dc4a:	e029      	b.n	800dca0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800dc4c:	693b      	ldr	r3, [r7, #16]
 800dc4e:	895b      	ldrh	r3, [r3, #10]
 800dc50:	025b      	lsls	r3, r3, #9
 800dc52:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dc54:	e019      	b.n	800dc8a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6979      	ldr	r1, [r7, #20]
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	f7ff fd01 	bl	800d662 <get_fat>
 800dc60:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc68:	d101      	bne.n	800dc6e <dir_sdi+0x88>
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	e032      	b.n	800dcd4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800dc6e:	697b      	ldr	r3, [r7, #20]
 800dc70:	2b01      	cmp	r3, #1
 800dc72:	d904      	bls.n	800dc7e <dir_sdi+0x98>
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	699b      	ldr	r3, [r3, #24]
 800dc78:	697a      	ldr	r2, [r7, #20]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d301      	bcc.n	800dc82 <dir_sdi+0x9c>
 800dc7e:	2302      	movs	r3, #2
 800dc80:	e028      	b.n	800dcd4 <dir_sdi+0xee>
			ofs -= csz;
 800dc82:	683a      	ldr	r2, [r7, #0]
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	1ad3      	subs	r3, r2, r3
 800dc88:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	429a      	cmp	r2, r3
 800dc90:	d2e1      	bcs.n	800dc56 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800dc92:	6979      	ldr	r1, [r7, #20]
 800dc94:	6938      	ldr	r0, [r7, #16]
 800dc96:	f7ff fcc5 	bl	800d624 <clust2sect>
 800dc9a:	4602      	mov	r2, r0
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	697a      	ldr	r2, [r7, #20]
 800dca4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	69db      	ldr	r3, [r3, #28]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d101      	bne.n	800dcb2 <dir_sdi+0xcc>
 800dcae:	2302      	movs	r3, #2
 800dcb0:	e010      	b.n	800dcd4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	69da      	ldr	r2, [r3, #28]
 800dcb6:	683b      	ldr	r3, [r7, #0]
 800dcb8:	0a5b      	lsrs	r3, r3, #9
 800dcba:	441a      	add	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dccc:	441a      	add	r2, r3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800dcd2:	2300      	movs	r3, #0
}
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	3718      	adds	r7, #24
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	bd80      	pop	{r7, pc}

0800dcdc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b086      	sub	sp, #24
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	695b      	ldr	r3, [r3, #20]
 800dcf0:	3320      	adds	r3, #32
 800dcf2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	69db      	ldr	r3, [r3, #28]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d003      	beq.n	800dd04 <dir_next+0x28>
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dd02:	d301      	bcc.n	800dd08 <dir_next+0x2c>
 800dd04:	2304      	movs	r3, #4
 800dd06:	e0aa      	b.n	800de5e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800dd08:	68bb      	ldr	r3, [r7, #8]
 800dd0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	f040 8098 	bne.w	800de44 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	69db      	ldr	r3, [r3, #28]
 800dd18:	1c5a      	adds	r2, r3, #1
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	699b      	ldr	r3, [r3, #24]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d10b      	bne.n	800dd3e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	095b      	lsrs	r3, r3, #5
 800dd2a:	68fa      	ldr	r2, [r7, #12]
 800dd2c:	8912      	ldrh	r2, [r2, #8]
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	f0c0 8088 	bcc.w	800de44 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	61da      	str	r2, [r3, #28]
 800dd3a:	2304      	movs	r3, #4
 800dd3c:	e08f      	b.n	800de5e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800dd3e:	68bb      	ldr	r3, [r7, #8]
 800dd40:	0a5b      	lsrs	r3, r3, #9
 800dd42:	68fa      	ldr	r2, [r7, #12]
 800dd44:	8952      	ldrh	r2, [r2, #10]
 800dd46:	3a01      	subs	r2, #1
 800dd48:	4013      	ands	r3, r2
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d17a      	bne.n	800de44 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	699b      	ldr	r3, [r3, #24]
 800dd54:	4619      	mov	r1, r3
 800dd56:	4610      	mov	r0, r2
 800dd58:	f7ff fc83 	bl	800d662 <get_fat>
 800dd5c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d801      	bhi.n	800dd68 <dir_next+0x8c>
 800dd64:	2302      	movs	r3, #2
 800dd66:	e07a      	b.n	800de5e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd6e:	d101      	bne.n	800dd74 <dir_next+0x98>
 800dd70:	2301      	movs	r3, #1
 800dd72:	e074      	b.n	800de5e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	699b      	ldr	r3, [r3, #24]
 800dd78:	697a      	ldr	r2, [r7, #20]
 800dd7a:	429a      	cmp	r2, r3
 800dd7c:	d358      	bcc.n	800de30 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d104      	bne.n	800dd8e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	61da      	str	r2, [r3, #28]
 800dd8a:	2304      	movs	r3, #4
 800dd8c:	e067      	b.n	800de5e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dd8e:	687a      	ldr	r2, [r7, #4]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	699b      	ldr	r3, [r3, #24]
 800dd94:	4619      	mov	r1, r3
 800dd96:	4610      	mov	r0, r2
 800dd98:	f7ff fe59 	bl	800da4e <create_chain>
 800dd9c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d101      	bne.n	800dda8 <dir_next+0xcc>
 800dda4:	2307      	movs	r3, #7
 800dda6:	e05a      	b.n	800de5e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	2b01      	cmp	r3, #1
 800ddac:	d101      	bne.n	800ddb2 <dir_next+0xd6>
 800ddae:	2302      	movs	r3, #2
 800ddb0:	e055      	b.n	800de5e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddb8:	d101      	bne.n	800ddbe <dir_next+0xe2>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	e04f      	b.n	800de5e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ddbe:	68f8      	ldr	r0, [r7, #12]
 800ddc0:	f7ff fb50 	bl	800d464 <sync_window>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d001      	beq.n	800ddce <dir_next+0xf2>
 800ddca:	2301      	movs	r3, #1
 800ddcc:	e047      	b.n	800de5e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ddce:	68fb      	ldr	r3, [r7, #12]
 800ddd0:	3334      	adds	r3, #52	@ 0x34
 800ddd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7ff f948 	bl	800d06e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ddde:	2300      	movs	r3, #0
 800dde0:	613b      	str	r3, [r7, #16]
 800dde2:	6979      	ldr	r1, [r7, #20]
 800dde4:	68f8      	ldr	r0, [r7, #12]
 800dde6:	f7ff fc1d 	bl	800d624 <clust2sect>
 800ddea:	4602      	mov	r2, r0
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	631a      	str	r2, [r3, #48]	@ 0x30
 800ddf0:	e012      	b.n	800de18 <dir_next+0x13c>
						fs->wflag = 1;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800ddf8:	68f8      	ldr	r0, [r7, #12]
 800ddfa:	f7ff fb33 	bl	800d464 <sync_window>
 800ddfe:	4603      	mov	r3, r0
 800de00:	2b00      	cmp	r3, #0
 800de02:	d001      	beq.n	800de08 <dir_next+0x12c>
 800de04:	2301      	movs	r3, #1
 800de06:	e02a      	b.n	800de5e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800de08:	693b      	ldr	r3, [r7, #16]
 800de0a:	3301      	adds	r3, #1
 800de0c:	613b      	str	r3, [r7, #16]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	631a      	str	r2, [r3, #48]	@ 0x30
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	895b      	ldrh	r3, [r3, #10]
 800de1c:	461a      	mov	r2, r3
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	4293      	cmp	r3, r2
 800de22:	d3e6      	bcc.n	800ddf2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de28:	693b      	ldr	r3, [r7, #16]
 800de2a:	1ad2      	subs	r2, r2, r3
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	697a      	ldr	r2, [r7, #20]
 800de34:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800de36:	6979      	ldr	r1, [r7, #20]
 800de38:	68f8      	ldr	r0, [r7, #12]
 800de3a:	f7ff fbf3 	bl	800d624 <clust2sect>
 800de3e:	4602      	mov	r2, r0
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	68ba      	ldr	r2, [r7, #8]
 800de48:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800de56:	441a      	add	r2, r3
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800de5c:	2300      	movs	r3, #0
}
 800de5e:	4618      	mov	r0, r3
 800de60:	3718      	adds	r7, #24
 800de62:	46bd      	mov	sp, r7
 800de64:	bd80      	pop	{r7, pc}

0800de66 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800de66:	b580      	push	{r7, lr}
 800de68:	b086      	sub	sp, #24
 800de6a:	af00      	add	r7, sp, #0
 800de6c:	6078      	str	r0, [r7, #4]
 800de6e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800de76:	2100      	movs	r1, #0
 800de78:	6878      	ldr	r0, [r7, #4]
 800de7a:	f7ff feb4 	bl	800dbe6 <dir_sdi>
 800de7e:	4603      	mov	r3, r0
 800de80:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800de82:	7dfb      	ldrb	r3, [r7, #23]
 800de84:	2b00      	cmp	r3, #0
 800de86:	d12b      	bne.n	800dee0 <dir_alloc+0x7a>
		n = 0;
 800de88:	2300      	movs	r3, #0
 800de8a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	69db      	ldr	r3, [r3, #28]
 800de90:	4619      	mov	r1, r3
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f7ff fb2a 	bl	800d4ec <move_window>
 800de98:	4603      	mov	r3, r0
 800de9a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800de9c:	7dfb      	ldrb	r3, [r7, #23]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d11d      	bne.n	800dede <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6a1b      	ldr	r3, [r3, #32]
 800dea6:	781b      	ldrb	r3, [r3, #0]
 800dea8:	2be5      	cmp	r3, #229	@ 0xe5
 800deaa:	d004      	beq.n	800deb6 <dir_alloc+0x50>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6a1b      	ldr	r3, [r3, #32]
 800deb0:	781b      	ldrb	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d107      	bne.n	800dec6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	3301      	adds	r3, #1
 800deba:	613b      	str	r3, [r7, #16]
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d102      	bne.n	800deca <dir_alloc+0x64>
 800dec4:	e00c      	b.n	800dee0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800dec6:	2300      	movs	r3, #0
 800dec8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800deca:	2101      	movs	r1, #1
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7ff ff05 	bl	800dcdc <dir_next>
 800ded2:	4603      	mov	r3, r0
 800ded4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ded6:	7dfb      	ldrb	r3, [r7, #23]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d0d7      	beq.n	800de8c <dir_alloc+0x26>
 800dedc:	e000      	b.n	800dee0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800dede:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800dee0:	7dfb      	ldrb	r3, [r7, #23]
 800dee2:	2b04      	cmp	r3, #4
 800dee4:	d101      	bne.n	800deea <dir_alloc+0x84>
 800dee6:	2307      	movs	r3, #7
 800dee8:	75fb      	strb	r3, [r7, #23]
	return res;
 800deea:	7dfb      	ldrb	r3, [r7, #23]
}
 800deec:	4618      	mov	r0, r3
 800deee:	3718      	adds	r7, #24
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	331a      	adds	r3, #26
 800df02:	4618      	mov	r0, r3
 800df04:	f7ff f810 	bl	800cf28 <ld_word>
 800df08:	4603      	mov	r3, r0
 800df0a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	781b      	ldrb	r3, [r3, #0]
 800df10:	2b03      	cmp	r3, #3
 800df12:	d109      	bne.n	800df28 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800df14:	683b      	ldr	r3, [r7, #0]
 800df16:	3314      	adds	r3, #20
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff f805 	bl	800cf28 <ld_word>
 800df1e:	4603      	mov	r3, r0
 800df20:	041b      	lsls	r3, r3, #16
 800df22:	68fa      	ldr	r2, [r7, #12]
 800df24:	4313      	orrs	r3, r2
 800df26:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800df28:	68fb      	ldr	r3, [r7, #12]
}
 800df2a:	4618      	mov	r0, r3
 800df2c:	3710      	adds	r7, #16
 800df2e:	46bd      	mov	sp, r7
 800df30:	bd80      	pop	{r7, pc}

0800df32 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800df32:	b580      	push	{r7, lr}
 800df34:	b084      	sub	sp, #16
 800df36:	af00      	add	r7, sp, #0
 800df38:	60f8      	str	r0, [r7, #12]
 800df3a:	60b9      	str	r1, [r7, #8]
 800df3c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	331a      	adds	r3, #26
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	b292      	uxth	r2, r2
 800df46:	4611      	mov	r1, r2
 800df48:	4618      	mov	r0, r3
 800df4a:	f7ff f828 	bl	800cf9e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	2b03      	cmp	r3, #3
 800df54:	d109      	bne.n	800df6a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	f103 0214 	add.w	r2, r3, #20
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	0c1b      	lsrs	r3, r3, #16
 800df60:	b29b      	uxth	r3, r3
 800df62:	4619      	mov	r1, r3
 800df64:	4610      	mov	r0, r2
 800df66:	f7ff f81a 	bl	800cf9e <st_word>
	}
}
 800df6a:	bf00      	nop
 800df6c:	3710      	adds	r7, #16
 800df6e:	46bd      	mov	sp, r7
 800df70:	bd80      	pop	{r7, pc}

0800df72 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800df72:	b580      	push	{r7, lr}
 800df74:	b086      	sub	sp, #24
 800df76:	af00      	add	r7, sp, #0
 800df78:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800df80:	2100      	movs	r1, #0
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7ff fe2f 	bl	800dbe6 <dir_sdi>
 800df88:	4603      	mov	r3, r0
 800df8a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800df8c:	7dfb      	ldrb	r3, [r7, #23]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d001      	beq.n	800df96 <dir_find+0x24>
 800df92:	7dfb      	ldrb	r3, [r7, #23]
 800df94:	e03e      	b.n	800e014 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	69db      	ldr	r3, [r3, #28]
 800df9a:	4619      	mov	r1, r3
 800df9c:	6938      	ldr	r0, [r7, #16]
 800df9e:	f7ff faa5 	bl	800d4ec <move_window>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800dfa6:	7dfb      	ldrb	r3, [r7, #23]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d12f      	bne.n	800e00c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6a1b      	ldr	r3, [r3, #32]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dfb4:	7bfb      	ldrb	r3, [r7, #15]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d102      	bne.n	800dfc0 <dir_find+0x4e>
 800dfba:	2304      	movs	r3, #4
 800dfbc:	75fb      	strb	r3, [r7, #23]
 800dfbe:	e028      	b.n	800e012 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a1b      	ldr	r3, [r3, #32]
 800dfc4:	330b      	adds	r3, #11
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dfcc:	b2da      	uxtb	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6a1b      	ldr	r3, [r3, #32]
 800dfd6:	330b      	adds	r3, #11
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	f003 0308 	and.w	r3, r3, #8
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10a      	bne.n	800dff8 <dir_find+0x86>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6a18      	ldr	r0, [r3, #32]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	3324      	adds	r3, #36	@ 0x24
 800dfea:	220b      	movs	r2, #11
 800dfec:	4619      	mov	r1, r3
 800dfee:	f7ff f859 	bl	800d0a4 <mem_cmp>
 800dff2:	4603      	mov	r3, r0
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00b      	beq.n	800e010 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800dff8:	2100      	movs	r1, #0
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f7ff fe6e 	bl	800dcdc <dir_next>
 800e000:	4603      	mov	r3, r0
 800e002:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e004:	7dfb      	ldrb	r3, [r7, #23]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d0c5      	beq.n	800df96 <dir_find+0x24>
 800e00a:	e002      	b.n	800e012 <dir_find+0xa0>
		if (res != FR_OK) break;
 800e00c:	bf00      	nop
 800e00e:	e000      	b.n	800e012 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e010:	bf00      	nop

	return res;
 800e012:	7dfb      	ldrb	r3, [r7, #23]
}
 800e014:	4618      	mov	r0, r3
 800e016:	3718      	adds	r7, #24
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800e02a:	2101      	movs	r1, #1
 800e02c:	6878      	ldr	r0, [r7, #4]
 800e02e:	f7ff ff1a 	bl	800de66 <dir_alloc>
 800e032:	4603      	mov	r3, r0
 800e034:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e036:	7bfb      	ldrb	r3, [r7, #15]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d11c      	bne.n	800e076 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	69db      	ldr	r3, [r3, #28]
 800e040:	4619      	mov	r1, r3
 800e042:	68b8      	ldr	r0, [r7, #8]
 800e044:	f7ff fa52 	bl	800d4ec <move_window>
 800e048:	4603      	mov	r3, r0
 800e04a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e04c:	7bfb      	ldrb	r3, [r7, #15]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d111      	bne.n	800e076 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a1b      	ldr	r3, [r3, #32]
 800e056:	2220      	movs	r2, #32
 800e058:	2100      	movs	r1, #0
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7ff f807 	bl	800d06e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6a18      	ldr	r0, [r3, #32]
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	3324      	adds	r3, #36	@ 0x24
 800e068:	220b      	movs	r2, #11
 800e06a:	4619      	mov	r1, r3
 800e06c:	f7fe ffde 	bl	800d02c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800e070:	68bb      	ldr	r3, [r7, #8]
 800e072:	2201      	movs	r2, #1
 800e074:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800e076:	7bfb      	ldrb	r3, [r7, #15]
}
 800e078:	4618      	mov	r0, r3
 800e07a:	3710      	adds	r7, #16
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd80      	pop	{r7, pc}

0800e080 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800e080:	b580      	push	{r7, lr}
 800e082:	b088      	sub	sp, #32
 800e084:	af00      	add	r7, sp, #0
 800e086:	6078      	str	r0, [r7, #4]
 800e088:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	60fb      	str	r3, [r7, #12]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	3324      	adds	r3, #36	@ 0x24
 800e094:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800e096:	220b      	movs	r2, #11
 800e098:	2120      	movs	r1, #32
 800e09a:	68b8      	ldr	r0, [r7, #8]
 800e09c:	f7fe ffe7 	bl	800d06e <mem_set>
	si = i = 0; ni = 8;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	613b      	str	r3, [r7, #16]
 800e0a4:	693b      	ldr	r3, [r7, #16]
 800e0a6:	61fb      	str	r3, [r7, #28]
 800e0a8:	2308      	movs	r3, #8
 800e0aa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800e0ac:	69fb      	ldr	r3, [r7, #28]
 800e0ae:	1c5a      	adds	r2, r3, #1
 800e0b0:	61fa      	str	r2, [r7, #28]
 800e0b2:	68fa      	ldr	r2, [r7, #12]
 800e0b4:	4413      	add	r3, r2
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e0ba:	7efb      	ldrb	r3, [r7, #27]
 800e0bc:	2b20      	cmp	r3, #32
 800e0be:	d94e      	bls.n	800e15e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800e0c0:	7efb      	ldrb	r3, [r7, #27]
 800e0c2:	2b2f      	cmp	r3, #47	@ 0x2f
 800e0c4:	d006      	beq.n	800e0d4 <create_name+0x54>
 800e0c6:	7efb      	ldrb	r3, [r7, #27]
 800e0c8:	2b5c      	cmp	r3, #92	@ 0x5c
 800e0ca:	d110      	bne.n	800e0ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e0cc:	e002      	b.n	800e0d4 <create_name+0x54>
 800e0ce:	69fb      	ldr	r3, [r7, #28]
 800e0d0:	3301      	adds	r3, #1
 800e0d2:	61fb      	str	r3, [r7, #28]
 800e0d4:	68fa      	ldr	r2, [r7, #12]
 800e0d6:	69fb      	ldr	r3, [r7, #28]
 800e0d8:	4413      	add	r3, r2
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800e0de:	d0f6      	beq.n	800e0ce <create_name+0x4e>
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	69fb      	ldr	r3, [r7, #28]
 800e0e4:	4413      	add	r3, r2
 800e0e6:	781b      	ldrb	r3, [r3, #0]
 800e0e8:	2b5c      	cmp	r3, #92	@ 0x5c
 800e0ea:	d0f0      	beq.n	800e0ce <create_name+0x4e>
			break;
 800e0ec:	e038      	b.n	800e160 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800e0ee:	7efb      	ldrb	r3, [r7, #27]
 800e0f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800e0f2:	d003      	beq.n	800e0fc <create_name+0x7c>
 800e0f4:	693a      	ldr	r2, [r7, #16]
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d30c      	bcc.n	800e116 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800e0fc:	697b      	ldr	r3, [r7, #20]
 800e0fe:	2b0b      	cmp	r3, #11
 800e100:	d002      	beq.n	800e108 <create_name+0x88>
 800e102:	7efb      	ldrb	r3, [r7, #27]
 800e104:	2b2e      	cmp	r3, #46	@ 0x2e
 800e106:	d001      	beq.n	800e10c <create_name+0x8c>
 800e108:	2306      	movs	r3, #6
 800e10a:	e044      	b.n	800e196 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800e10c:	2308      	movs	r3, #8
 800e10e:	613b      	str	r3, [r7, #16]
 800e110:	230b      	movs	r3, #11
 800e112:	617b      	str	r3, [r7, #20]
			continue;
 800e114:	e022      	b.n	800e15c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800e116:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	da04      	bge.n	800e128 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800e11e:	7efb      	ldrb	r3, [r7, #27]
 800e120:	3b80      	subs	r3, #128	@ 0x80
 800e122:	4a1f      	ldr	r2, [pc, #124]	@ (800e1a0 <create_name+0x120>)
 800e124:	5cd3      	ldrb	r3, [r2, r3]
 800e126:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800e128:	7efb      	ldrb	r3, [r7, #27]
 800e12a:	4619      	mov	r1, r3
 800e12c:	481d      	ldr	r0, [pc, #116]	@ (800e1a4 <create_name+0x124>)
 800e12e:	f7fe ffe0 	bl	800d0f2 <chk_chr>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d001      	beq.n	800e13c <create_name+0xbc>
 800e138:	2306      	movs	r3, #6
 800e13a:	e02c      	b.n	800e196 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800e13c:	7efb      	ldrb	r3, [r7, #27]
 800e13e:	2b60      	cmp	r3, #96	@ 0x60
 800e140:	d905      	bls.n	800e14e <create_name+0xce>
 800e142:	7efb      	ldrb	r3, [r7, #27]
 800e144:	2b7a      	cmp	r3, #122	@ 0x7a
 800e146:	d802      	bhi.n	800e14e <create_name+0xce>
 800e148:	7efb      	ldrb	r3, [r7, #27]
 800e14a:	3b20      	subs	r3, #32
 800e14c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	1c5a      	adds	r2, r3, #1
 800e152:	613a      	str	r2, [r7, #16]
 800e154:	68ba      	ldr	r2, [r7, #8]
 800e156:	4413      	add	r3, r2
 800e158:	7efa      	ldrb	r2, [r7, #27]
 800e15a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800e15c:	e7a6      	b.n	800e0ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800e15e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	441a      	add	r2, r3
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d101      	bne.n	800e174 <create_name+0xf4>
 800e170:	2306      	movs	r3, #6
 800e172:	e010      	b.n	800e196 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	781b      	ldrb	r3, [r3, #0]
 800e178:	2be5      	cmp	r3, #229	@ 0xe5
 800e17a:	d102      	bne.n	800e182 <create_name+0x102>
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	2205      	movs	r2, #5
 800e180:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e182:	7efb      	ldrb	r3, [r7, #27]
 800e184:	2b20      	cmp	r3, #32
 800e186:	d801      	bhi.n	800e18c <create_name+0x10c>
 800e188:	2204      	movs	r2, #4
 800e18a:	e000      	b.n	800e18e <create_name+0x10e>
 800e18c:	2200      	movs	r2, #0
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	330b      	adds	r3, #11
 800e192:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800e194:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800e196:	4618      	mov	r0, r3
 800e198:	3720      	adds	r7, #32
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
 800e19e:	bf00      	nop
 800e1a0:	0801464c 	.word	0x0801464c
 800e1a4:	08012b14 	.word	0x08012b14

0800e1a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b086      	sub	sp, #24
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
 800e1b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800e1b6:	693b      	ldr	r3, [r7, #16]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e1bc:	e002      	b.n	800e1c4 <follow_path+0x1c>
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	3301      	adds	r3, #1
 800e1c2:	603b      	str	r3, [r7, #0]
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	781b      	ldrb	r3, [r3, #0]
 800e1c8:	2b2f      	cmp	r3, #47	@ 0x2f
 800e1ca:	d0f8      	beq.n	800e1be <follow_path+0x16>
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800e1d2:	d0f4      	beq.n	800e1be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800e1d4:	693b      	ldr	r3, [r7, #16]
 800e1d6:	2200      	movs	r2, #0
 800e1d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	781b      	ldrb	r3, [r3, #0]
 800e1de:	2b1f      	cmp	r3, #31
 800e1e0:	d80a      	bhi.n	800e1f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2280      	movs	r2, #128	@ 0x80
 800e1e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800e1ea:	2100      	movs	r1, #0
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f7ff fcfa 	bl	800dbe6 <dir_sdi>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	75fb      	strb	r3, [r7, #23]
 800e1f6:	e043      	b.n	800e280 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e1f8:	463b      	mov	r3, r7
 800e1fa:	4619      	mov	r1, r3
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f7ff ff3f 	bl	800e080 <create_name>
 800e202:	4603      	mov	r3, r0
 800e204:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e206:	7dfb      	ldrb	r3, [r7, #23]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d134      	bne.n	800e276 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f7ff feb0 	bl	800df72 <dir_find>
 800e212:	4603      	mov	r3, r0
 800e214:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e21c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800e21e:	7dfb      	ldrb	r3, [r7, #23]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00a      	beq.n	800e23a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e224:	7dfb      	ldrb	r3, [r7, #23]
 800e226:	2b04      	cmp	r3, #4
 800e228:	d127      	bne.n	800e27a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e22a:	7afb      	ldrb	r3, [r7, #11]
 800e22c:	f003 0304 	and.w	r3, r3, #4
 800e230:	2b00      	cmp	r3, #0
 800e232:	d122      	bne.n	800e27a <follow_path+0xd2>
 800e234:	2305      	movs	r3, #5
 800e236:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800e238:	e01f      	b.n	800e27a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e23a:	7afb      	ldrb	r3, [r7, #11]
 800e23c:	f003 0304 	and.w	r3, r3, #4
 800e240:	2b00      	cmp	r3, #0
 800e242:	d11c      	bne.n	800e27e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e244:	693b      	ldr	r3, [r7, #16]
 800e246:	799b      	ldrb	r3, [r3, #6]
 800e248:	f003 0310 	and.w	r3, r3, #16
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d102      	bne.n	800e256 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800e250:	2305      	movs	r3, #5
 800e252:	75fb      	strb	r3, [r7, #23]
 800e254:	e014      	b.n	800e280 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	695b      	ldr	r3, [r3, #20]
 800e260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e264:	4413      	add	r3, r2
 800e266:	4619      	mov	r1, r3
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f7ff fe43 	bl	800def4 <ld_clust>
 800e26e:	4602      	mov	r2, r0
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e274:	e7c0      	b.n	800e1f8 <follow_path+0x50>
			if (res != FR_OK) break;
 800e276:	bf00      	nop
 800e278:	e002      	b.n	800e280 <follow_path+0xd8>
				break;
 800e27a:	bf00      	nop
 800e27c:	e000      	b.n	800e280 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e27e:	bf00      	nop
			}
		}
	}

	return res;
 800e280:	7dfb      	ldrb	r3, [r7, #23]
}
 800e282:	4618      	mov	r0, r3
 800e284:	3718      	adds	r7, #24
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}

0800e28a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e28a:	b480      	push	{r7}
 800e28c:	b087      	sub	sp, #28
 800e28e:	af00      	add	r7, sp, #0
 800e290:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e292:	f04f 33ff 	mov.w	r3, #4294967295
 800e296:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d031      	beq.n	800e304 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	617b      	str	r3, [r7, #20]
 800e2a6:	e002      	b.n	800e2ae <get_ldnumber+0x24>
 800e2a8:	697b      	ldr	r3, [r7, #20]
 800e2aa:	3301      	adds	r3, #1
 800e2ac:	617b      	str	r3, [r7, #20]
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	781b      	ldrb	r3, [r3, #0]
 800e2b2:	2b20      	cmp	r3, #32
 800e2b4:	d903      	bls.n	800e2be <get_ldnumber+0x34>
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	2b3a      	cmp	r3, #58	@ 0x3a
 800e2bc:	d1f4      	bne.n	800e2a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	2b3a      	cmp	r3, #58	@ 0x3a
 800e2c4:	d11c      	bne.n	800e300 <get_ldnumber+0x76>
			tp = *path;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	1c5a      	adds	r2, r3, #1
 800e2d0:	60fa      	str	r2, [r7, #12]
 800e2d2:	781b      	ldrb	r3, [r3, #0]
 800e2d4:	3b30      	subs	r3, #48	@ 0x30
 800e2d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	2b09      	cmp	r3, #9
 800e2dc:	d80e      	bhi.n	800e2fc <get_ldnumber+0x72>
 800e2de:	68fa      	ldr	r2, [r7, #12]
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	429a      	cmp	r2, r3
 800e2e4:	d10a      	bne.n	800e2fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d107      	bne.n	800e2fc <get_ldnumber+0x72>
					vol = (int)i;
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	617b      	str	r3, [r7, #20]
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	697a      	ldr	r2, [r7, #20]
 800e2fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	e002      	b.n	800e306 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e300:	2300      	movs	r3, #0
 800e302:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e304:	693b      	ldr	r3, [r7, #16]
}
 800e306:	4618      	mov	r0, r3
 800e308:	371c      	adds	r7, #28
 800e30a:	46bd      	mov	sp, r7
 800e30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e310:	4770      	bx	lr
	...

0800e314 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b082      	sub	sp, #8
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
 800e31c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2200      	movs	r2, #0
 800e322:	70da      	strb	r2, [r3, #3]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f04f 32ff 	mov.w	r2, #4294967295
 800e32a:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e32c:	6839      	ldr	r1, [r7, #0]
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f7ff f8dc 	bl	800d4ec <move_window>
 800e334:	4603      	mov	r3, r0
 800e336:	2b00      	cmp	r3, #0
 800e338:	d001      	beq.n	800e33e <check_fs+0x2a>
 800e33a:	2304      	movs	r3, #4
 800e33c:	e038      	b.n	800e3b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	3334      	adds	r3, #52	@ 0x34
 800e342:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e346:	4618      	mov	r0, r3
 800e348:	f7fe fdee 	bl	800cf28 <ld_word>
 800e34c:	4603      	mov	r3, r0
 800e34e:	461a      	mov	r2, r3
 800e350:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e354:	429a      	cmp	r2, r3
 800e356:	d001      	beq.n	800e35c <check_fs+0x48>
 800e358:	2303      	movs	r3, #3
 800e35a:	e029      	b.n	800e3b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e362:	2be9      	cmp	r3, #233	@ 0xe9
 800e364:	d009      	beq.n	800e37a <check_fs+0x66>
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800e36c:	2beb      	cmp	r3, #235	@ 0xeb
 800e36e:	d11e      	bne.n	800e3ae <check_fs+0x9a>
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800e376:	2b90      	cmp	r3, #144	@ 0x90
 800e378:	d119      	bne.n	800e3ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	3334      	adds	r3, #52	@ 0x34
 800e37e:	3336      	adds	r3, #54	@ 0x36
 800e380:	4618      	mov	r0, r3
 800e382:	f7fe fde9 	bl	800cf58 <ld_dword>
 800e386:	4603      	mov	r3, r0
 800e388:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800e38c:	4a0a      	ldr	r2, [pc, #40]	@ (800e3b8 <check_fs+0xa4>)
 800e38e:	4293      	cmp	r3, r2
 800e390:	d101      	bne.n	800e396 <check_fs+0x82>
 800e392:	2300      	movs	r3, #0
 800e394:	e00c      	b.n	800e3b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	3334      	adds	r3, #52	@ 0x34
 800e39a:	3352      	adds	r3, #82	@ 0x52
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7fe fddb 	bl	800cf58 <ld_dword>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	4a05      	ldr	r2, [pc, #20]	@ (800e3bc <check_fs+0xa8>)
 800e3a6:	4293      	cmp	r3, r2
 800e3a8:	d101      	bne.n	800e3ae <check_fs+0x9a>
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	e000      	b.n	800e3b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e3ae:	2302      	movs	r3, #2
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}
 800e3b8:	00544146 	.word	0x00544146
 800e3bc:	33544146 	.word	0x33544146

0800e3c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b096      	sub	sp, #88	@ 0x58
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e3d4:	68f8      	ldr	r0, [r7, #12]
 800e3d6:	f7ff ff58 	bl	800e28a <get_ldnumber>
 800e3da:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e3dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	da01      	bge.n	800e3e6 <find_volume+0x26>
 800e3e2:	230b      	movs	r3, #11
 800e3e4:	e235      	b.n	800e852 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800e3e6:	4aa5      	ldr	r2, [pc, #660]	@ (800e67c <find_volume+0x2bc>)
 800e3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800e3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d101      	bne.n	800e3fa <find_volume+0x3a>
 800e3f6:	230c      	movs	r3, #12
 800e3f8:	e22b      	b.n	800e852 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800e3fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e3fc:	f7fe fe94 	bl	800d128 <lock_fs>
 800e400:	4603      	mov	r3, r0
 800e402:	2b00      	cmp	r3, #0
 800e404:	d101      	bne.n	800e40a <find_volume+0x4a>
 800e406:	230f      	movs	r3, #15
 800e408:	e223      	b.n	800e852 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e40e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800e410:	79fb      	ldrb	r3, [r7, #7]
 800e412:	f023 0301 	bic.w	r3, r3, #1
 800e416:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800e418:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d01a      	beq.n	800e456 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800e420:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e422:	785b      	ldrb	r3, [r3, #1]
 800e424:	4618      	mov	r0, r3
 800e426:	f7fe fce1 	bl	800cdec <disk_status>
 800e42a:	4603      	mov	r3, r0
 800e42c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800e430:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e434:	f003 0301 	and.w	r3, r3, #1
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d10c      	bne.n	800e456 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800e43c:	79fb      	ldrb	r3, [r7, #7]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d007      	beq.n	800e452 <find_volume+0x92>
 800e442:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e446:	f003 0304 	and.w	r3, r3, #4
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d001      	beq.n	800e452 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800e44e:	230a      	movs	r3, #10
 800e450:	e1ff      	b.n	800e852 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800e452:	2300      	movs	r3, #0
 800e454:	e1fd      	b.n	800e852 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800e456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e458:	2200      	movs	r2, #0
 800e45a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800e45c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e45e:	b2da      	uxtb	r2, r3
 800e460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e462:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800e464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e466:	785b      	ldrb	r3, [r3, #1]
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fe fcd9 	bl	800ce20 <disk_initialize>
 800e46e:	4603      	mov	r3, r0
 800e470:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800e474:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e478:	f003 0301 	and.w	r3, r3, #1
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d001      	beq.n	800e484 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800e480:	2303      	movs	r3, #3
 800e482:	e1e6      	b.n	800e852 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800e484:	79fb      	ldrb	r3, [r7, #7]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d007      	beq.n	800e49a <find_volume+0xda>
 800e48a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e48e:	f003 0304 	and.w	r3, r3, #4
 800e492:	2b00      	cmp	r3, #0
 800e494:	d001      	beq.n	800e49a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800e496:	230a      	movs	r3, #10
 800e498:	e1db      	b.n	800e852 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e49a:	2300      	movs	r3, #0
 800e49c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e49e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e4a0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e4a2:	f7ff ff37 	bl	800e314 <check_fs>
 800e4a6:	4603      	mov	r3, r0
 800e4a8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e4ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e4b0:	2b02      	cmp	r3, #2
 800e4b2:	d149      	bne.n	800e548 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e4b8:	e01e      	b.n	800e4f8 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e4bc:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e4c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4c2:	011b      	lsls	r3, r3, #4
 800e4c4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e4c8:	4413      	add	r3, r2
 800e4ca:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e4cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ce:	3304      	adds	r3, #4
 800e4d0:	781b      	ldrb	r3, [r3, #0]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d006      	beq.n	800e4e4 <find_volume+0x124>
 800e4d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4d8:	3308      	adds	r3, #8
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7fe fd3c 	bl	800cf58 <ld_dword>
 800e4e0:	4602      	mov	r2, r0
 800e4e2:	e000      	b.n	800e4e6 <find_volume+0x126>
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	3358      	adds	r3, #88	@ 0x58
 800e4ec:	443b      	add	r3, r7
 800e4ee:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e4f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4f4:	3301      	adds	r3, #1
 800e4f6:	643b      	str	r3, [r7, #64]	@ 0x40
 800e4f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4fa:	2b03      	cmp	r3, #3
 800e4fc:	d9dd      	bls.n	800e4ba <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e4fe:	2300      	movs	r3, #0
 800e500:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e502:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e504:	2b00      	cmp	r3, #0
 800e506:	d002      	beq.n	800e50e <find_volume+0x14e>
 800e508:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e50a:	3b01      	subs	r3, #1
 800e50c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e50e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	3358      	adds	r3, #88	@ 0x58
 800e514:	443b      	add	r3, r7
 800e516:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e51a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e51c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e51e:	2b00      	cmp	r3, #0
 800e520:	d005      	beq.n	800e52e <find_volume+0x16e>
 800e522:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e524:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e526:	f7ff fef5 	bl	800e314 <check_fs>
 800e52a:	4603      	mov	r3, r0
 800e52c:	e000      	b.n	800e530 <find_volume+0x170>
 800e52e:	2303      	movs	r3, #3
 800e530:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e534:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d905      	bls.n	800e548 <find_volume+0x188>
 800e53c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e53e:	3301      	adds	r3, #1
 800e540:	643b      	str	r3, [r7, #64]	@ 0x40
 800e542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e544:	2b03      	cmp	r3, #3
 800e546:	d9e2      	bls.n	800e50e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e548:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e54c:	2b04      	cmp	r3, #4
 800e54e:	d101      	bne.n	800e554 <find_volume+0x194>
 800e550:	2301      	movs	r3, #1
 800e552:	e17e      	b.n	800e852 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e554:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e558:	2b01      	cmp	r3, #1
 800e55a:	d901      	bls.n	800e560 <find_volume+0x1a0>
 800e55c:	230d      	movs	r3, #13
 800e55e:	e178      	b.n	800e852 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e562:	3334      	adds	r3, #52	@ 0x34
 800e564:	330b      	adds	r3, #11
 800e566:	4618      	mov	r0, r3
 800e568:	f7fe fcde 	bl	800cf28 <ld_word>
 800e56c:	4603      	mov	r3, r0
 800e56e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e572:	d001      	beq.n	800e578 <find_volume+0x1b8>
 800e574:	230d      	movs	r3, #13
 800e576:	e16c      	b.n	800e852 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e57a:	3334      	adds	r3, #52	@ 0x34
 800e57c:	3316      	adds	r3, #22
 800e57e:	4618      	mov	r0, r3
 800e580:	f7fe fcd2 	bl	800cf28 <ld_word>
 800e584:	4603      	mov	r3, r0
 800e586:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d106      	bne.n	800e59c <find_volume+0x1dc>
 800e58e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e590:	3334      	adds	r3, #52	@ 0x34
 800e592:	3324      	adds	r3, #36	@ 0x24
 800e594:	4618      	mov	r0, r3
 800e596:	f7fe fcdf 	bl	800cf58 <ld_dword>
 800e59a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e59e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e5a0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5a4:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800e5a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5aa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ae:	789b      	ldrb	r3, [r3, #2]
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d005      	beq.n	800e5c0 <find_volume+0x200>
 800e5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5b6:	789b      	ldrb	r3, [r3, #2]
 800e5b8:	2b02      	cmp	r3, #2
 800e5ba:	d001      	beq.n	800e5c0 <find_volume+0x200>
 800e5bc:	230d      	movs	r3, #13
 800e5be:	e148      	b.n	800e852 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e5c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5c2:	789b      	ldrb	r3, [r3, #2]
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5c8:	fb02 f303 	mul.w	r3, r2, r3
 800e5cc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e5ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e5d4:	461a      	mov	r2, r3
 800e5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5dc:	895b      	ldrh	r3, [r3, #10]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d008      	beq.n	800e5f4 <find_volume+0x234>
 800e5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5e4:	895b      	ldrh	r3, [r3, #10]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5ea:	895b      	ldrh	r3, [r3, #10]
 800e5ec:	3b01      	subs	r3, #1
 800e5ee:	4013      	ands	r3, r2
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <find_volume+0x238>
 800e5f4:	230d      	movs	r3, #13
 800e5f6:	e12c      	b.n	800e852 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5fa:	3334      	adds	r3, #52	@ 0x34
 800e5fc:	3311      	adds	r3, #17
 800e5fe:	4618      	mov	r0, r3
 800e600:	f7fe fc92 	bl	800cf28 <ld_word>
 800e604:	4603      	mov	r3, r0
 800e606:	461a      	mov	r2, r3
 800e608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e60a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e60e:	891b      	ldrh	r3, [r3, #8]
 800e610:	f003 030f 	and.w	r3, r3, #15
 800e614:	b29b      	uxth	r3, r3
 800e616:	2b00      	cmp	r3, #0
 800e618:	d001      	beq.n	800e61e <find_volume+0x25e>
 800e61a:	230d      	movs	r3, #13
 800e61c:	e119      	b.n	800e852 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e620:	3334      	adds	r3, #52	@ 0x34
 800e622:	3313      	adds	r3, #19
 800e624:	4618      	mov	r0, r3
 800e626:	f7fe fc7f 	bl	800cf28 <ld_word>
 800e62a:	4603      	mov	r3, r0
 800e62c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e62e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e630:	2b00      	cmp	r3, #0
 800e632:	d106      	bne.n	800e642 <find_volume+0x282>
 800e634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e636:	3334      	adds	r3, #52	@ 0x34
 800e638:	3320      	adds	r3, #32
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7fe fc8c 	bl	800cf58 <ld_dword>
 800e640:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e644:	3334      	adds	r3, #52	@ 0x34
 800e646:	330e      	adds	r3, #14
 800e648:	4618      	mov	r0, r3
 800e64a:	f7fe fc6d 	bl	800cf28 <ld_word>
 800e64e:	4603      	mov	r3, r0
 800e650:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e652:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e654:	2b00      	cmp	r3, #0
 800e656:	d101      	bne.n	800e65c <find_volume+0x29c>
 800e658:	230d      	movs	r3, #13
 800e65a:	e0fa      	b.n	800e852 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e65c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e65e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e660:	4413      	add	r3, r2
 800e662:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e664:	8912      	ldrh	r2, [r2, #8]
 800e666:	0912      	lsrs	r2, r2, #4
 800e668:	b292      	uxth	r2, r2
 800e66a:	4413      	add	r3, r2
 800e66c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800e66e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e672:	429a      	cmp	r2, r3
 800e674:	d204      	bcs.n	800e680 <find_volume+0x2c0>
 800e676:	230d      	movs	r3, #13
 800e678:	e0eb      	b.n	800e852 <find_volume+0x492>
 800e67a:	bf00      	nop
 800e67c:	20000d34 	.word	0x20000d34
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e680:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e684:	1ad3      	subs	r3, r2, r3
 800e686:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e688:	8952      	ldrh	r2, [r2, #10]
 800e68a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e68e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e692:	2b00      	cmp	r3, #0
 800e694:	d101      	bne.n	800e69a <find_volume+0x2da>
 800e696:	230d      	movs	r3, #13
 800e698:	e0db      	b.n	800e852 <find_volume+0x492>
		fmt = FS_FAT32;
 800e69a:	2303      	movs	r3, #3
 800e69c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6a2:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d802      	bhi.n	800e6b0 <find_volume+0x2f0>
 800e6aa:	2302      	movs	r3, #2
 800e6ac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6b2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d802      	bhi.n	800e6c0 <find_volume+0x300>
 800e6ba:	2301      	movs	r3, #1
 800e6bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6c2:	1c9a      	adds	r2, r3, #2
 800e6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6c6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e6cc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e6ce:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e6d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e6d2:	441a      	add	r2, r3
 800e6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6d6:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800e6d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6dc:	441a      	add	r2, r3
 800e6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6e0:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800e6e2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e6e6:	2b03      	cmp	r3, #3
 800e6e8:	d11e      	bne.n	800e728 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e6ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e6ec:	3334      	adds	r3, #52	@ 0x34
 800e6ee:	332a      	adds	r3, #42	@ 0x2a
 800e6f0:	4618      	mov	r0, r3
 800e6f2:	f7fe fc19 	bl	800cf28 <ld_word>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d001      	beq.n	800e700 <find_volume+0x340>
 800e6fc:	230d      	movs	r3, #13
 800e6fe:	e0a8      	b.n	800e852 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e702:	891b      	ldrh	r3, [r3, #8]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d001      	beq.n	800e70c <find_volume+0x34c>
 800e708:	230d      	movs	r3, #13
 800e70a:	e0a2      	b.n	800e852 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e70e:	3334      	adds	r3, #52	@ 0x34
 800e710:	332c      	adds	r3, #44	@ 0x2c
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe fc20 	bl	800cf58 <ld_dword>
 800e718:	4602      	mov	r2, r0
 800e71a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e71c:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e720:	699b      	ldr	r3, [r3, #24]
 800e722:	009b      	lsls	r3, r3, #2
 800e724:	647b      	str	r3, [r7, #68]	@ 0x44
 800e726:	e01f      	b.n	800e768 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e72a:	891b      	ldrh	r3, [r3, #8]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d101      	bne.n	800e734 <find_volume+0x374>
 800e730:	230d      	movs	r3, #13
 800e732:	e08e      	b.n	800e852 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e736:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e73a:	441a      	add	r2, r3
 800e73c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e73e:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e740:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e744:	2b02      	cmp	r3, #2
 800e746:	d103      	bne.n	800e750 <find_volume+0x390>
 800e748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e74a:	699b      	ldr	r3, [r3, #24]
 800e74c:	005b      	lsls	r3, r3, #1
 800e74e:	e00a      	b.n	800e766 <find_volume+0x3a6>
 800e750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e752:	699a      	ldr	r2, [r3, #24]
 800e754:	4613      	mov	r3, r2
 800e756:	005b      	lsls	r3, r3, #1
 800e758:	4413      	add	r3, r2
 800e75a:	085a      	lsrs	r2, r3, #1
 800e75c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e75e:	699b      	ldr	r3, [r3, #24]
 800e760:	f003 0301 	and.w	r3, r3, #1
 800e764:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e766:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e76a:	69da      	ldr	r2, [r3, #28]
 800e76c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e76e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e772:	0a5b      	lsrs	r3, r3, #9
 800e774:	429a      	cmp	r2, r3
 800e776:	d201      	bcs.n	800e77c <find_volume+0x3bc>
 800e778:	230d      	movs	r3, #13
 800e77a:	e06a      	b.n	800e852 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e77c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e77e:	f04f 32ff 	mov.w	r2, #4294967295
 800e782:	615a      	str	r2, [r3, #20]
 800e784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e786:	695a      	ldr	r2, [r3, #20]
 800e788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e78a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800e78c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e78e:	2280      	movs	r2, #128	@ 0x80
 800e790:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e792:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e796:	2b03      	cmp	r3, #3
 800e798:	d149      	bne.n	800e82e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e79c:	3334      	adds	r3, #52	@ 0x34
 800e79e:	3330      	adds	r3, #48	@ 0x30
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fe fbc1 	bl	800cf28 <ld_word>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d140      	bne.n	800e82e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e7ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	4619      	mov	r1, r3
 800e7b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e7b4:	f7fe fe9a 	bl	800d4ec <move_window>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d137      	bne.n	800e82e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800e7be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e7c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7c6:	3334      	adds	r3, #52	@ 0x34
 800e7c8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fe fbab 	bl	800cf28 <ld_word>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	461a      	mov	r2, r3
 800e7d6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e7da:	429a      	cmp	r2, r3
 800e7dc:	d127      	bne.n	800e82e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7e0:	3334      	adds	r3, #52	@ 0x34
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fe fbb8 	bl	800cf58 <ld_dword>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	4a1c      	ldr	r2, [pc, #112]	@ (800e85c <find_volume+0x49c>)
 800e7ec:	4293      	cmp	r3, r2
 800e7ee:	d11e      	bne.n	800e82e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e7f2:	3334      	adds	r3, #52	@ 0x34
 800e7f4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fe fbad 	bl	800cf58 <ld_dword>
 800e7fe:	4603      	mov	r3, r0
 800e800:	4a17      	ldr	r2, [pc, #92]	@ (800e860 <find_volume+0x4a0>)
 800e802:	4293      	cmp	r3, r2
 800e804:	d113      	bne.n	800e82e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e808:	3334      	adds	r3, #52	@ 0x34
 800e80a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fe fba2 	bl	800cf58 <ld_dword>
 800e814:	4602      	mov	r2, r0
 800e816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e818:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e81c:	3334      	adds	r3, #52	@ 0x34
 800e81e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e822:	4618      	mov	r0, r3
 800e824:	f7fe fb98 	bl	800cf58 <ld_dword>
 800e828:	4602      	mov	r2, r0
 800e82a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e82c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e82e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e830:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e834:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e836:	4b0b      	ldr	r3, [pc, #44]	@ (800e864 <find_volume+0x4a4>)
 800e838:	881b      	ldrh	r3, [r3, #0]
 800e83a:	3301      	adds	r3, #1
 800e83c:	b29a      	uxth	r2, r3
 800e83e:	4b09      	ldr	r3, [pc, #36]	@ (800e864 <find_volume+0x4a4>)
 800e840:	801a      	strh	r2, [r3, #0]
 800e842:	4b08      	ldr	r3, [pc, #32]	@ (800e864 <find_volume+0x4a4>)
 800e844:	881a      	ldrh	r2, [r3, #0]
 800e846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e848:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e84a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e84c:	f7fe fde6 	bl	800d41c <clear_lock>
#endif
	return FR_OK;
 800e850:	2300      	movs	r3, #0
}
 800e852:	4618      	mov	r0, r3
 800e854:	3758      	adds	r7, #88	@ 0x58
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	41615252 	.word	0x41615252
 800e860:	61417272 	.word	0x61417272
 800e864:	20000d38 	.word	0x20000d38

0800e868 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b084      	sub	sp, #16
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
 800e870:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e872:	2309      	movs	r3, #9
 800e874:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d02e      	beq.n	800e8da <validate+0x72>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d02a      	beq.n	800e8da <validate+0x72>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	d025      	beq.n	800e8da <validate+0x72>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	889a      	ldrh	r2, [r3, #4]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	88db      	ldrh	r3, [r3, #6]
 800e898:	429a      	cmp	r2, r3
 800e89a:	d11e      	bne.n	800e8da <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fe fc41 	bl	800d128 <lock_fs>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d014      	beq.n	800e8d6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	785b      	ldrb	r3, [r3, #1]
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7fe fa9a 	bl	800cdec <disk_status>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	f003 0301 	and.w	r3, r3, #1
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d102      	bne.n	800e8c8 <validate+0x60>
				res = FR_OK;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	73fb      	strb	r3, [r7, #15]
 800e8c6:	e008      	b.n	800e8da <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	2100      	movs	r1, #0
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7fe fc40 	bl	800d154 <unlock_fs>
 800e8d4:	e001      	b.n	800e8da <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800e8d6:	230f      	movs	r3, #15
 800e8d8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e8da:	7bfb      	ldrb	r3, [r7, #15]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d102      	bne.n	800e8e6 <validate+0x7e>
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	e000      	b.n	800e8e8 <validate+0x80>
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	683a      	ldr	r2, [r7, #0]
 800e8ea:	6013      	str	r3, [r2, #0]
	return res;
 800e8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	3710      	adds	r7, #16
 800e8f2:	46bd      	mov	sp, r7
 800e8f4:	bd80      	pop	{r7, pc}

0800e8f6 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e8f6:	b580      	push	{r7, lr}
 800e8f8:	b098      	sub	sp, #96	@ 0x60
 800e8fa:	af00      	add	r7, sp, #0
 800e8fc:	60f8      	str	r0, [r7, #12]
 800e8fe:	60b9      	str	r1, [r7, #8]
 800e900:	4613      	mov	r3, r2
 800e902:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d101      	bne.n	800e90e <f_open+0x18>
 800e90a:	2309      	movs	r3, #9
 800e90c:	e1b0      	b.n	800ec70 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e90e:	79fb      	ldrb	r3, [r7, #7]
 800e910:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e914:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e916:	79fa      	ldrb	r2, [r7, #7]
 800e918:	f107 0110 	add.w	r1, r7, #16
 800e91c:	f107 0308 	add.w	r3, r7, #8
 800e920:	4618      	mov	r0, r3
 800e922:	f7ff fd4d 	bl	800e3c0 <find_volume>
 800e926:	4603      	mov	r3, r0
 800e928:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e92c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e930:	2b00      	cmp	r3, #0
 800e932:	f040 818d 	bne.w	800ec50 <f_open+0x35a>
		dj.obj.fs = fs;
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e93a:	68ba      	ldr	r2, [r7, #8]
 800e93c:	f107 0314 	add.w	r3, r7, #20
 800e940:	4611      	mov	r1, r2
 800e942:	4618      	mov	r0, r3
 800e944:	f7ff fc30 	bl	800e1a8 <follow_path>
 800e948:	4603      	mov	r3, r0
 800e94a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e94e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e952:	2b00      	cmp	r3, #0
 800e954:	d118      	bne.n	800e988 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e956:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e95a:	b25b      	sxtb	r3, r3
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	da03      	bge.n	800e968 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e960:	2306      	movs	r3, #6
 800e962:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e966:	e00f      	b.n	800e988 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e968:	79fb      	ldrb	r3, [r7, #7]
 800e96a:	2b01      	cmp	r3, #1
 800e96c:	bf8c      	ite	hi
 800e96e:	2301      	movhi	r3, #1
 800e970:	2300      	movls	r3, #0
 800e972:	b2db      	uxtb	r3, r3
 800e974:	461a      	mov	r2, r3
 800e976:	f107 0314 	add.w	r3, r7, #20
 800e97a:	4611      	mov	r1, r2
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7fe fc05 	bl	800d18c <chk_lock>
 800e982:	4603      	mov	r3, r0
 800e984:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e988:	79fb      	ldrb	r3, [r7, #7]
 800e98a:	f003 031c 	and.w	r3, r3, #28
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d07f      	beq.n	800ea92 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e992:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e996:	2b00      	cmp	r3, #0
 800e998:	d017      	beq.n	800e9ca <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e99a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e99e:	2b04      	cmp	r3, #4
 800e9a0:	d10e      	bne.n	800e9c0 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e9a2:	f7fe fc4f 	bl	800d244 <enq_lock>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d006      	beq.n	800e9ba <f_open+0xc4>
 800e9ac:	f107 0314 	add.w	r3, r7, #20
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7ff fb33 	bl	800e01c <dir_register>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	e000      	b.n	800e9bc <f_open+0xc6>
 800e9ba:	2312      	movs	r3, #18
 800e9bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e9c0:	79fb      	ldrb	r3, [r7, #7]
 800e9c2:	f043 0308 	orr.w	r3, r3, #8
 800e9c6:	71fb      	strb	r3, [r7, #7]
 800e9c8:	e010      	b.n	800e9ec <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e9ca:	7ebb      	ldrb	r3, [r7, #26]
 800e9cc:	f003 0311 	and.w	r3, r3, #17
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d003      	beq.n	800e9dc <f_open+0xe6>
					res = FR_DENIED;
 800e9d4:	2307      	movs	r3, #7
 800e9d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e9da:	e007      	b.n	800e9ec <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e9dc:	79fb      	ldrb	r3, [r7, #7]
 800e9de:	f003 0304 	and.w	r3, r3, #4
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d002      	beq.n	800e9ec <f_open+0xf6>
 800e9e6:	2308      	movs	r3, #8
 800e9e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e9ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d168      	bne.n	800eac6 <f_open+0x1d0>
 800e9f4:	79fb      	ldrb	r3, [r7, #7]
 800e9f6:	f003 0308 	and.w	r3, r3, #8
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d063      	beq.n	800eac6 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e9fe:	f7fd ffbd 	bl	800c97c <get_fattime>
 800ea02:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800ea04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea06:	330e      	adds	r3, #14
 800ea08:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7fe fae2 	bl	800cfd4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800ea10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea12:	3316      	adds	r3, #22
 800ea14:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7fe fadc 	bl	800cfd4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800ea1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea1e:	330b      	adds	r3, #11
 800ea20:	2220      	movs	r2, #32
 800ea22:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ea28:	4611      	mov	r1, r2
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7ff fa62 	bl	800def4 <ld_clust>
 800ea30:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800ea32:	693b      	ldr	r3, [r7, #16]
 800ea34:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ea36:	2200      	movs	r2, #0
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f7ff fa7a 	bl	800df32 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800ea3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea40:	331c      	adds	r3, #28
 800ea42:	2100      	movs	r1, #0
 800ea44:	4618      	mov	r0, r3
 800ea46:	f7fe fac5 	bl	800cfd4 <st_dword>
					fs->wflag = 1;
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800ea50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d037      	beq.n	800eac6 <f_open+0x1d0>
						dw = fs->winsect;
 800ea56:	693b      	ldr	r3, [r7, #16]
 800ea58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ea5a:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800ea5c:	f107 0314 	add.w	r3, r7, #20
 800ea60:	2200      	movs	r2, #0
 800ea62:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7fe ff8d 	bl	800d984 <remove_chain>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800ea70:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d126      	bne.n	800eac6 <f_open+0x1d0>
							res = move_window(fs, dw);
 800ea78:	693b      	ldr	r3, [r7, #16]
 800ea7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	f7fe fd35 	bl	800d4ec <move_window>
 800ea82:	4603      	mov	r3, r0
 800ea84:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800ea88:	693b      	ldr	r3, [r7, #16]
 800ea8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ea8c:	3a01      	subs	r2, #1
 800ea8e:	611a      	str	r2, [r3, #16]
 800ea90:	e019      	b.n	800eac6 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800ea92:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d115      	bne.n	800eac6 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800ea9a:	7ebb      	ldrb	r3, [r7, #26]
 800ea9c:	f003 0310 	and.w	r3, r3, #16
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d003      	beq.n	800eaac <f_open+0x1b6>
					res = FR_NO_FILE;
 800eaa4:	2304      	movs	r3, #4
 800eaa6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800eaaa:	e00c      	b.n	800eac6 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800eaac:	79fb      	ldrb	r3, [r7, #7]
 800eaae:	f003 0302 	and.w	r3, r3, #2
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d007      	beq.n	800eac6 <f_open+0x1d0>
 800eab6:	7ebb      	ldrb	r3, [r7, #26]
 800eab8:	f003 0301 	and.w	r3, r3, #1
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d002      	beq.n	800eac6 <f_open+0x1d0>
						res = FR_DENIED;
 800eac0:	2307      	movs	r3, #7
 800eac2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800eac6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d126      	bne.n	800eb1c <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800eace:	79fb      	ldrb	r3, [r7, #7]
 800ead0:	f003 0308 	and.w	r3, r3, #8
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d003      	beq.n	800eae0 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800ead8:	79fb      	ldrb	r3, [r7, #7]
 800eada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eade:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800eae8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800eaee:	79fb      	ldrb	r3, [r7, #7]
 800eaf0:	2b01      	cmp	r3, #1
 800eaf2:	bf8c      	ite	hi
 800eaf4:	2301      	movhi	r3, #1
 800eaf6:	2300      	movls	r3, #0
 800eaf8:	b2db      	uxtb	r3, r3
 800eafa:	461a      	mov	r2, r3
 800eafc:	f107 0314 	add.w	r3, r7, #20
 800eb00:	4611      	mov	r1, r2
 800eb02:	4618      	mov	r0, r3
 800eb04:	f7fe fbc0 	bl	800d288 <inc_lock>
 800eb08:	4602      	mov	r2, r0
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	691b      	ldr	r3, [r3, #16]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d102      	bne.n	800eb1c <f_open+0x226>
 800eb16:	2302      	movs	r3, #2
 800eb18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800eb1c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	f040 8095 	bne.w	800ec50 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800eb26:	693b      	ldr	r3, [r7, #16]
 800eb28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800eb2a:	4611      	mov	r1, r2
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f7ff f9e1 	bl	800def4 <ld_clust>
 800eb32:	4602      	mov	r2, r0
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800eb38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eb3a:	331c      	adds	r3, #28
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7fe fa0b 	bl	800cf58 <ld_dword>
 800eb42:	4602      	mov	r2, r0
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800eb54:	693b      	ldr	r3, [r7, #16]
 800eb56:	88da      	ldrh	r2, [r3, #6]
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	79fa      	ldrb	r2, [r7, #7]
 800eb60:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	2200      	movs	r2, #0
 800eb66:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	2200      	movs	r2, #0
 800eb72:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	3330      	adds	r3, #48	@ 0x30
 800eb78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb7c:	2100      	movs	r1, #0
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f7fe fa75 	bl	800d06e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800eb84:	79fb      	ldrb	r3, [r7, #7]
 800eb86:	f003 0320 	and.w	r3, r3, #32
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d060      	beq.n	800ec50 <f_open+0x35a>
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d05c      	beq.n	800ec50 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	68da      	ldr	r2, [r3, #12]
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	895b      	ldrh	r3, [r3, #10]
 800eba2:	025b      	lsls	r3, r3, #9
 800eba4:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	68db      	ldr	r3, [r3, #12]
 800ebb0:	657b      	str	r3, [r7, #84]	@ 0x54
 800ebb2:	e016      	b.n	800ebe2 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ebb8:	4618      	mov	r0, r3
 800ebba:	f7fe fd52 	bl	800d662 <get_fat>
 800ebbe:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ebc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d802      	bhi.n	800ebcc <f_open+0x2d6>
 800ebc6:	2302      	movs	r3, #2
 800ebc8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ebcc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ebce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebd2:	d102      	bne.n	800ebda <f_open+0x2e4>
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ebda:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ebdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	657b      	str	r3, [r7, #84]	@ 0x54
 800ebe2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d103      	bne.n	800ebf2 <f_open+0x2fc>
 800ebea:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ebec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d8e0      	bhi.n	800ebb4 <f_open+0x2be>
				}
				fp->clust = clst;
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ebf6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ebf8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d127      	bne.n	800ec50 <f_open+0x35a>
 800ec00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d022      	beq.n	800ec50 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f7fe fd08 	bl	800d624 <clust2sect>
 800ec14:	6478      	str	r0, [r7, #68]	@ 0x44
 800ec16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d103      	bne.n	800ec24 <f_open+0x32e>
						res = FR_INT_ERR;
 800ec1c:	2302      	movs	r3, #2
 800ec1e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800ec22:	e015      	b.n	800ec50 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800ec24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec26:	0a5a      	lsrs	r2, r3, #9
 800ec28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ec2a:	441a      	add	r2, r3
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800ec30:	693b      	ldr	r3, [r7, #16]
 800ec32:	7858      	ldrb	r0, [r3, #1]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	6a1a      	ldr	r2, [r3, #32]
 800ec3e:	2301      	movs	r3, #1
 800ec40:	f7fe f914 	bl	800ce6c <disk_read>
 800ec44:	4603      	mov	r3, r0
 800ec46:	2b00      	cmp	r3, #0
 800ec48:	d002      	beq.n	800ec50 <f_open+0x35a>
 800ec4a:	2301      	movs	r3, #1
 800ec4c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800ec50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d002      	beq.n	800ec5e <f_open+0x368>
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800ec5e:	693b      	ldr	r3, [r7, #16]
 800ec60:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800ec64:	4611      	mov	r1, r2
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fe fa74 	bl	800d154 <unlock_fs>
 800ec6c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3760      	adds	r7, #96	@ 0x60
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b08e      	sub	sp, #56	@ 0x38
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
 800ec84:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f107 0214 	add.w	r2, r7, #20
 800ec96:	4611      	mov	r1, r2
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fde5 	bl	800e868 <validate>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800eca4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d107      	bne.n	800ecbc <f_read+0x44>
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	7d5b      	ldrb	r3, [r3, #21]
 800ecb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800ecb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d009      	beq.n	800ecd0 <f_read+0x58>
 800ecbc:	697b      	ldr	r3, [r7, #20]
 800ecbe:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800ecc2:	4611      	mov	r1, r2
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f7fe fa45 	bl	800d154 <unlock_fs>
 800ecca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800ecce:	e13d      	b.n	800ef4c <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	7d1b      	ldrb	r3, [r3, #20]
 800ecd4:	f003 0301 	and.w	r3, r3, #1
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d106      	bne.n	800ecea <f_read+0x72>
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	2107      	movs	r1, #7
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fe fa37 	bl	800d154 <unlock_fs>
 800ece6:	2307      	movs	r3, #7
 800ece8:	e130      	b.n	800ef4c <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	68da      	ldr	r2, [r3, #12]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	699b      	ldr	r3, [r3, #24]
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800ecf6:	687a      	ldr	r2, [r7, #4]
 800ecf8:	6a3b      	ldr	r3, [r7, #32]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	f240 811c 	bls.w	800ef38 <f_read+0x2c0>
 800ed00:	6a3b      	ldr	r3, [r7, #32]
 800ed02:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800ed04:	e118      	b.n	800ef38 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	699b      	ldr	r3, [r3, #24]
 800ed0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	f040 80e4 	bne.w	800eedc <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	699b      	ldr	r3, [r3, #24]
 800ed18:	0a5b      	lsrs	r3, r3, #9
 800ed1a:	697a      	ldr	r2, [r7, #20]
 800ed1c:	8952      	ldrh	r2, [r2, #10]
 800ed1e:	3a01      	subs	r2, #1
 800ed20:	4013      	ands	r3, r2
 800ed22:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800ed24:	69fb      	ldr	r3, [r7, #28]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d139      	bne.n	800ed9e <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	699b      	ldr	r3, [r3, #24]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d103      	bne.n	800ed3a <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	689b      	ldr	r3, [r3, #8]
 800ed36:	633b      	str	r3, [r7, #48]	@ 0x30
 800ed38:	e013      	b.n	800ed62 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d007      	beq.n	800ed52 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	699b      	ldr	r3, [r3, #24]
 800ed46:	4619      	mov	r1, r3
 800ed48:	68f8      	ldr	r0, [r7, #12]
 800ed4a:	f7fe ff18 	bl	800db7e <clmt_clust>
 800ed4e:	6338      	str	r0, [r7, #48]	@ 0x30
 800ed50:	e007      	b.n	800ed62 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800ed52:	68fa      	ldr	r2, [r7, #12]
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	69db      	ldr	r3, [r3, #28]
 800ed58:	4619      	mov	r1, r3
 800ed5a:	4610      	mov	r0, r2
 800ed5c:	f7fe fc81 	bl	800d662 <get_fat>
 800ed60:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800ed62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed64:	2b01      	cmp	r3, #1
 800ed66:	d809      	bhi.n	800ed7c <f_read+0x104>
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2202      	movs	r2, #2
 800ed6c:	755a      	strb	r2, [r3, #21]
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	2102      	movs	r1, #2
 800ed72:	4618      	mov	r0, r3
 800ed74:	f7fe f9ee 	bl	800d154 <unlock_fs>
 800ed78:	2302      	movs	r3, #2
 800ed7a:	e0e7      	b.n	800ef4c <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800ed7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed82:	d109      	bne.n	800ed98 <f_read+0x120>
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2201      	movs	r2, #1
 800ed88:	755a      	strb	r2, [r3, #21]
 800ed8a:	697b      	ldr	r3, [r7, #20]
 800ed8c:	2101      	movs	r1, #1
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7fe f9e0 	bl	800d154 <unlock_fs>
 800ed94:	2301      	movs	r3, #1
 800ed96:	e0d9      	b.n	800ef4c <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800ed98:	68fb      	ldr	r3, [r7, #12]
 800ed9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed9c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ed9e:	697a      	ldr	r2, [r7, #20]
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	69db      	ldr	r3, [r3, #28]
 800eda4:	4619      	mov	r1, r3
 800eda6:	4610      	mov	r0, r2
 800eda8:	f7fe fc3c 	bl	800d624 <clust2sect>
 800edac:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800edae:	69bb      	ldr	r3, [r7, #24]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d109      	bne.n	800edc8 <f_read+0x150>
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	2202      	movs	r2, #2
 800edb8:	755a      	strb	r2, [r3, #21]
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	2102      	movs	r1, #2
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fe f9c8 	bl	800d154 <unlock_fs>
 800edc4:	2302      	movs	r3, #2
 800edc6:	e0c1      	b.n	800ef4c <f_read+0x2d4>
			sect += csect;
 800edc8:	69ba      	ldr	r2, [r7, #24]
 800edca:	69fb      	ldr	r3, [r7, #28]
 800edcc:	4413      	add	r3, r2
 800edce:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	0a5b      	lsrs	r3, r3, #9
 800edd4:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800edd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d03e      	beq.n	800ee5a <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800eddc:	69fa      	ldr	r2, [r7, #28]
 800edde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ede0:	4413      	add	r3, r2
 800ede2:	697a      	ldr	r2, [r7, #20]
 800ede4:	8952      	ldrh	r2, [r2, #10]
 800ede6:	4293      	cmp	r3, r2
 800ede8:	d905      	bls.n	800edf6 <f_read+0x17e>
					cc = fs->csize - csect;
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	895b      	ldrh	r3, [r3, #10]
 800edee:	461a      	mov	r2, r3
 800edf0:	69fb      	ldr	r3, [r7, #28]
 800edf2:	1ad3      	subs	r3, r2, r3
 800edf4:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	7858      	ldrb	r0, [r3, #1]
 800edfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edfc:	69ba      	ldr	r2, [r7, #24]
 800edfe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ee00:	f7fe f834 	bl	800ce6c <disk_read>
 800ee04:	4603      	mov	r3, r0
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d009      	beq.n	800ee1e <f_read+0x1a6>
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	755a      	strb	r2, [r3, #21]
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	2101      	movs	r1, #1
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7fe f99d 	bl	800d154 <unlock_fs>
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	e096      	b.n	800ef4c <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	7d1b      	ldrb	r3, [r3, #20]
 800ee22:	b25b      	sxtb	r3, r3
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	da14      	bge.n	800ee52 <f_read+0x1da>
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	6a1a      	ldr	r2, [r3, #32]
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	1ad3      	subs	r3, r2, r3
 800ee30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d90d      	bls.n	800ee52 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	6a1a      	ldr	r2, [r3, #32]
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	1ad3      	subs	r3, r2, r3
 800ee3e:	025b      	lsls	r3, r3, #9
 800ee40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ee42:	18d0      	adds	r0, r2, r3
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	3330      	adds	r3, #48	@ 0x30
 800ee48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee4c:	4619      	mov	r1, r3
 800ee4e:	f7fe f8ed 	bl	800d02c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ee52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee54:	025b      	lsls	r3, r3, #9
 800ee56:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ee58:	e05a      	b.n	800ef10 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	69ba      	ldr	r2, [r7, #24]
 800ee60:	429a      	cmp	r2, r3
 800ee62:	d038      	beq.n	800eed6 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	7d1b      	ldrb	r3, [r3, #20]
 800ee68:	b25b      	sxtb	r3, r3
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	da1d      	bge.n	800eeaa <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ee6e:	697b      	ldr	r3, [r7, #20]
 800ee70:	7858      	ldrb	r0, [r3, #1]
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	6a1a      	ldr	r2, [r3, #32]
 800ee7c:	2301      	movs	r3, #1
 800ee7e:	f7fe f815 	bl	800ceac <disk_write>
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d009      	beq.n	800ee9c <f_read+0x224>
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	755a      	strb	r2, [r3, #21]
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	2101      	movs	r1, #1
 800ee92:	4618      	mov	r0, r3
 800ee94:	f7fe f95e 	bl	800d154 <unlock_fs>
 800ee98:	2301      	movs	r3, #1
 800ee9a:	e057      	b.n	800ef4c <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	7d1b      	ldrb	r3, [r3, #20]
 800eea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eea4:	b2da      	uxtb	r2, r3
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	7858      	ldrb	r0, [r3, #1]
 800eeae:	68fb      	ldr	r3, [r7, #12]
 800eeb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eeb4:	2301      	movs	r3, #1
 800eeb6:	69ba      	ldr	r2, [r7, #24]
 800eeb8:	f7fd ffd8 	bl	800ce6c <disk_read>
 800eebc:	4603      	mov	r3, r0
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d009      	beq.n	800eed6 <f_read+0x25e>
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	2201      	movs	r2, #1
 800eec6:	755a      	strb	r2, [r3, #21]
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	2101      	movs	r1, #1
 800eecc:	4618      	mov	r0, r3
 800eece:	f7fe f941 	bl	800d154 <unlock_fs>
 800eed2:	2301      	movs	r3, #1
 800eed4:	e03a      	b.n	800ef4c <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	69ba      	ldr	r2, [r7, #24]
 800eeda:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	699b      	ldr	r3, [r3, #24]
 800eee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eee4:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800eee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800eeea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d901      	bls.n	800eef6 <f_read+0x27e>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	699b      	ldr	r3, [r3, #24]
 800ef00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef04:	4413      	add	r3, r2
 800ef06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef08:	4619      	mov	r1, r3
 800ef0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef0c:	f7fe f88e 	bl	800d02c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ef10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef14:	4413      	add	r3, r2
 800ef16:	627b      	str	r3, [r7, #36]	@ 0x24
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	699a      	ldr	r2, [r3, #24]
 800ef1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef1e:	441a      	add	r2, r3
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	619a      	str	r2, [r3, #24]
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef2a:	441a      	add	r2, r3
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	601a      	str	r2, [r3, #0]
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef34:	1ad3      	subs	r3, r2, r3
 800ef36:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	f47f aee3 	bne.w	800ed06 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800ef40:	697b      	ldr	r3, [r7, #20]
 800ef42:	2100      	movs	r1, #0
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7fe f905 	bl	800d154 <unlock_fs>
 800ef4a:	2300      	movs	r3, #0
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3738      	adds	r7, #56	@ 0x38
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b086      	sub	sp, #24
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f107 0208 	add.w	r2, r7, #8
 800ef62:	4611      	mov	r1, r2
 800ef64:	4618      	mov	r0, r3
 800ef66:	f7ff fc7f 	bl	800e868 <validate>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ef6e:	7dfb      	ldrb	r3, [r7, #23]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d16d      	bne.n	800f050 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	7d1b      	ldrb	r3, [r3, #20]
 800ef78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d067      	beq.n	800f050 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	7d1b      	ldrb	r3, [r3, #20]
 800ef84:	b25b      	sxtb	r3, r3
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	da1a      	bge.n	800efc0 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ef8a:	68bb      	ldr	r3, [r7, #8]
 800ef8c:	7858      	ldrb	r0, [r3, #1]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	6a1a      	ldr	r2, [r3, #32]
 800ef98:	2301      	movs	r3, #1
 800ef9a:	f7fd ff87 	bl	800ceac <disk_write>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d006      	beq.n	800efb2 <f_sync+0x5e>
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	2101      	movs	r1, #1
 800efa8:	4618      	mov	r0, r3
 800efaa:	f7fe f8d3 	bl	800d154 <unlock_fs>
 800efae:	2301      	movs	r3, #1
 800efb0:	e055      	b.n	800f05e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	7d1b      	ldrb	r3, [r3, #20]
 800efb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800efba:	b2da      	uxtb	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800efc0:	f7fd fcdc 	bl	800c97c <get_fattime>
 800efc4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800efc6:	68ba      	ldr	r2, [r7, #8]
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efcc:	4619      	mov	r1, r3
 800efce:	4610      	mov	r0, r2
 800efd0:	f7fe fa8c 	bl	800d4ec <move_window>
 800efd4:	4603      	mov	r3, r0
 800efd6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800efd8:	7dfb      	ldrb	r3, [r7, #23]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d138      	bne.n	800f050 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efe2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	330b      	adds	r3, #11
 800efe8:	781a      	ldrb	r2, [r3, #0]
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	330b      	adds	r3, #11
 800efee:	f042 0220 	orr.w	r2, r2, #32
 800eff2:	b2d2      	uxtb	r2, r2
 800eff4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	6818      	ldr	r0, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	689b      	ldr	r3, [r3, #8]
 800effe:	461a      	mov	r2, r3
 800f000:	68f9      	ldr	r1, [r7, #12]
 800f002:	f7fe ff96 	bl	800df32 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	f103 021c 	add.w	r2, r3, #28
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	68db      	ldr	r3, [r3, #12]
 800f010:	4619      	mov	r1, r3
 800f012:	4610      	mov	r0, r2
 800f014:	f7fd ffde 	bl	800cfd4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	3316      	adds	r3, #22
 800f01c:	6939      	ldr	r1, [r7, #16]
 800f01e:	4618      	mov	r0, r3
 800f020:	f7fd ffd8 	bl	800cfd4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	3312      	adds	r3, #18
 800f028:	2100      	movs	r1, #0
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7fd ffb7 	bl	800cf9e <st_word>
					fs->wflag = 1;
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	2201      	movs	r2, #1
 800f034:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800f036:	68bb      	ldr	r3, [r7, #8]
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fe fa85 	bl	800d548 <sync_fs>
 800f03e:	4603      	mov	r3, r0
 800f040:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	7d1b      	ldrb	r3, [r3, #20]
 800f046:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f04a:	b2da      	uxtb	r2, r3
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800f050:	68bb      	ldr	r3, [r7, #8]
 800f052:	7dfa      	ldrb	r2, [r7, #23]
 800f054:	4611      	mov	r1, r2
 800f056:	4618      	mov	r0, r3
 800f058:	f7fe f87c 	bl	800d154 <unlock_fs>
 800f05c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f05e:	4618      	mov	r0, r3
 800f060:	3718      	adds	r7, #24
 800f062:	46bd      	mov	sp, r7
 800f064:	bd80      	pop	{r7, pc}

0800f066 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800f066:	b580      	push	{r7, lr}
 800f068:	b084      	sub	sp, #16
 800f06a:	af00      	add	r7, sp, #0
 800f06c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800f06e:	6878      	ldr	r0, [r7, #4]
 800f070:	f7ff ff70 	bl	800ef54 <f_sync>
 800f074:	4603      	mov	r3, r0
 800f076:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800f078:	7bfb      	ldrb	r3, [r7, #15]
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d11d      	bne.n	800f0ba <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f107 0208 	add.w	r2, r7, #8
 800f084:	4611      	mov	r1, r2
 800f086:	4618      	mov	r0, r3
 800f088:	f7ff fbee 	bl	800e868 <validate>
 800f08c:	4603      	mov	r3, r0
 800f08e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f090:	7bfb      	ldrb	r3, [r7, #15]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d111      	bne.n	800f0ba <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	691b      	ldr	r3, [r3, #16]
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7fe f982 	bl	800d3a4 <dec_lock>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800f0a4:	7bfb      	ldrb	r3, [r7, #15]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d102      	bne.n	800f0b0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800f0b0:	68bb      	ldr	r3, [r7, #8]
 800f0b2:	2100      	movs	r1, #0
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f7fe f84d 	bl	800d154 <unlock_fs>
#endif
		}
	}
	return res;
 800f0ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0bc:	4618      	mov	r0, r3
 800f0be:	3710      	adds	r7, #16
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b087      	sub	sp, #28
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	60f8      	str	r0, [r7, #12]
 800f0cc:	60b9      	str	r1, [r7, #8]
 800f0ce:	4613      	mov	r3, r2
 800f0d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f0d2:	2301      	movs	r3, #1
 800f0d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f0da:	4b1f      	ldr	r3, [pc, #124]	@ (800f158 <FATFS_LinkDriverEx+0x94>)
 800f0dc:	7a5b      	ldrb	r3, [r3, #9]
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d131      	bne.n	800f148 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f0e4:	4b1c      	ldr	r3, [pc, #112]	@ (800f158 <FATFS_LinkDriverEx+0x94>)
 800f0e6:	7a5b      	ldrb	r3, [r3, #9]
 800f0e8:	b2db      	uxtb	r3, r3
 800f0ea:	461a      	mov	r2, r3
 800f0ec:	4b1a      	ldr	r3, [pc, #104]	@ (800f158 <FATFS_LinkDriverEx+0x94>)
 800f0ee:	2100      	movs	r1, #0
 800f0f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f0f2:	4b19      	ldr	r3, [pc, #100]	@ (800f158 <FATFS_LinkDriverEx+0x94>)
 800f0f4:	7a5b      	ldrb	r3, [r3, #9]
 800f0f6:	b2db      	uxtb	r3, r3
 800f0f8:	4a17      	ldr	r2, [pc, #92]	@ (800f158 <FATFS_LinkDriverEx+0x94>)
 800f0fa:	009b      	lsls	r3, r3, #2
 800f0fc:	4413      	add	r3, r2
 800f0fe:	68fa      	ldr	r2, [r7, #12]
 800f100:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f102:	4b15      	ldr	r3, [pc, #84]	@ (800f158 <FATFS_LinkDriverEx+0x94>)
 800f104:	7a5b      	ldrb	r3, [r3, #9]
 800f106:	b2db      	uxtb	r3, r3
 800f108:	461a      	mov	r2, r3
 800f10a:	4b13      	ldr	r3, [pc, #76]	@ (800f158 <FATFS_LinkDriverEx+0x94>)
 800f10c:	4413      	add	r3, r2
 800f10e:	79fa      	ldrb	r2, [r7, #7]
 800f110:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f112:	4b11      	ldr	r3, [pc, #68]	@ (800f158 <FATFS_LinkDriverEx+0x94>)
 800f114:	7a5b      	ldrb	r3, [r3, #9]
 800f116:	b2db      	uxtb	r3, r3
 800f118:	1c5a      	adds	r2, r3, #1
 800f11a:	b2d1      	uxtb	r1, r2
 800f11c:	4a0e      	ldr	r2, [pc, #56]	@ (800f158 <FATFS_LinkDriverEx+0x94>)
 800f11e:	7251      	strb	r1, [r2, #9]
 800f120:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f122:	7dbb      	ldrb	r3, [r7, #22]
 800f124:	3330      	adds	r3, #48	@ 0x30
 800f126:	b2da      	uxtb	r2, r3
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f12c:	68bb      	ldr	r3, [r7, #8]
 800f12e:	3301      	adds	r3, #1
 800f130:	223a      	movs	r2, #58	@ 0x3a
 800f132:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	3302      	adds	r3, #2
 800f138:	222f      	movs	r2, #47	@ 0x2f
 800f13a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f13c:	68bb      	ldr	r3, [r7, #8]
 800f13e:	3303      	adds	r3, #3
 800f140:	2200      	movs	r2, #0
 800f142:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f144:	2300      	movs	r3, #0
 800f146:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f148:	7dfb      	ldrb	r3, [r7, #23]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	371c      	adds	r7, #28
 800f14e:	46bd      	mov	sp, r7
 800f150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f154:	4770      	bx	lr
 800f156:	bf00      	nop
 800f158:	20000d5c 	.word	0x20000d5c

0800f15c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f15c:	b580      	push	{r7, lr}
 800f15e:	b082      	sub	sp, #8
 800f160:	af00      	add	r7, sp, #0
 800f162:	6078      	str	r0, [r7, #4]
 800f164:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f166:	2200      	movs	r2, #0
 800f168:	6839      	ldr	r1, [r7, #0]
 800f16a:	6878      	ldr	r0, [r7, #4]
 800f16c:	f7ff ffaa 	bl	800f0c4 <FATFS_LinkDriverEx>
 800f170:	4603      	mov	r3, r0
}
 800f172:	4618      	mov	r0, r3
 800f174:	3708      	adds	r7, #8
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}

0800f17a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f17a:	b580      	push	{r7, lr}
 800f17c:	b084      	sub	sp, #16
 800f17e:	af00      	add	r7, sp, #0
 800f180:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f182:	2300      	movs	r3, #0
 800f184:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 800f186:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 f8da 	bl	800f344 <osSemaphoreWait>
 800f190:	4603      	mov	r3, r0
 800f192:	2b00      	cmp	r3, #0
 800f194:	d101      	bne.n	800f19a <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 800f196:	2301      	movs	r3, #1
 800f198:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f19a:	68fb      	ldr	r3, [r7, #12]
}
 800f19c:	4618      	mov	r0, r3
 800f19e:	3710      	adds	r7, #16
 800f1a0:	46bd      	mov	sp, r7
 800f1a2:	bd80      	pop	{r7, pc}

0800f1a4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f1ac:	6878      	ldr	r0, [r7, #4]
 800f1ae:	f000 f917 	bl	800f3e0 <osSemaphoreRelease>
#endif
}
 800f1b2:	bf00      	nop
 800f1b4:	3708      	adds	r7, #8
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}

0800f1ba <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f1ba:	b480      	push	{r7}
 800f1bc:	b085      	sub	sp, #20
 800f1be:	af00      	add	r7, sp, #0
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f1c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f1cc:	2b84      	cmp	r3, #132	@ 0x84
 800f1ce:	d005      	beq.n	800f1dc <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f1d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	3303      	adds	r3, #3
 800f1da:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3714      	adds	r7, #20
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e8:	4770      	bx	lr

0800f1ea <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b083      	sub	sp, #12
 800f1ee:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f1f0:	f3ef 8305 	mrs	r3, IPSR
 800f1f4:	607b      	str	r3, [r7, #4]
  return(result);
 800f1f6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	bf14      	ite	ne
 800f1fc:	2301      	movne	r3, #1
 800f1fe:	2300      	moveq	r3, #0
 800f200:	b2db      	uxtb	r3, r3
}
 800f202:	4618      	mov	r0, r3
 800f204:	370c      	adds	r7, #12
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr

0800f20e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f20e:	b580      	push	{r7, lr}
 800f210:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f212:	f001 fc33 	bl	8010a7c <vTaskStartScheduler>
  
  return osOK;
 800f216:	2300      	movs	r3, #0
}
 800f218:	4618      	mov	r0, r3
 800f21a:	bd80      	pop	{r7, pc}

0800f21c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 800f220:	f002 f882 	bl	8011328 <xTaskGetSchedulerState>
 800f224:	4603      	mov	r3, r0
 800f226:	2b01      	cmp	r3, #1
 800f228:	d101      	bne.n	800f22e <osKernelRunning+0x12>
    return 0;
 800f22a:	2300      	movs	r3, #0
 800f22c:	e000      	b.n	800f230 <osKernelRunning+0x14>
  else
    return 1;
 800f22e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 800f230:	4618      	mov	r0, r3
 800f232:	bd80      	pop	{r7, pc}

0800f234 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f238:	f7ff ffd7 	bl	800f1ea <inHandlerMode>
 800f23c:	4603      	mov	r3, r0
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d003      	beq.n	800f24a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f242:	f001 fd47 	bl	8010cd4 <xTaskGetTickCountFromISR>
 800f246:	4603      	mov	r3, r0
 800f248:	e002      	b.n	800f250 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f24a:	f001 fd33 	bl	8010cb4 <xTaskGetTickCount>
 800f24e:	4603      	mov	r3, r0
  }
}
 800f250:	4618      	mov	r0, r3
 800f252:	bd80      	pop	{r7, pc}

0800f254 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f256:	b089      	sub	sp, #36	@ 0x24
 800f258:	af04      	add	r7, sp, #16
 800f25a:	6078      	str	r0, [r7, #4]
 800f25c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	695b      	ldr	r3, [r3, #20]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d020      	beq.n	800f2a8 <osThreadCreate+0x54>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	699b      	ldr	r3, [r3, #24]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d01c      	beq.n	800f2a8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	685c      	ldr	r4, [r3, #4]
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	691e      	ldr	r6, [r3, #16]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f280:	4618      	mov	r0, r3
 800f282:	f7ff ff9a 	bl	800f1ba <makeFreeRtosPriority>
 800f286:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	695b      	ldr	r3, [r3, #20]
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f290:	9202      	str	r2, [sp, #8]
 800f292:	9301      	str	r3, [sp, #4]
 800f294:	9100      	str	r1, [sp, #0]
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	4632      	mov	r2, r6
 800f29a:	4629      	mov	r1, r5
 800f29c:	4620      	mov	r0, r4
 800f29e:	f001 f9fd 	bl	801069c <xTaskCreateStatic>
 800f2a2:	4603      	mov	r3, r0
 800f2a4:	60fb      	str	r3, [r7, #12]
 800f2a6:	e01c      	b.n	800f2e2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	685c      	ldr	r4, [r3, #4]
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2b4:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f2bc:	4618      	mov	r0, r3
 800f2be:	f7ff ff7c 	bl	800f1ba <makeFreeRtosPriority>
 800f2c2:	4602      	mov	r2, r0
 800f2c4:	f107 030c 	add.w	r3, r7, #12
 800f2c8:	9301      	str	r3, [sp, #4]
 800f2ca:	9200      	str	r2, [sp, #0]
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	4632      	mov	r2, r6
 800f2d0:	4629      	mov	r1, r5
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	f001 fa48 	bl	8010768 <xTaskCreate>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d001      	beq.n	800f2e2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f2de:	2300      	movs	r3, #0
 800f2e0:	e000      	b.n	800f2e4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
}
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	3714      	adds	r7, #20
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f2ec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d001      	beq.n	800f302 <osDelay+0x16>
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	e000      	b.n	800f304 <osDelay+0x18>
 800f302:	2301      	movs	r3, #1
 800f304:	4618      	mov	r0, r3
 800f306:	f001 fb81 	bl	8010a0c <vTaskDelay>
  
  return osOK;
 800f30a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3710      	adds	r7, #16
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d007      	beq.n	800f334 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	685b      	ldr	r3, [r3, #4]
 800f328:	4619      	mov	r1, r3
 800f32a:	2001      	movs	r0, #1
 800f32c:	f000 fba5 	bl	800fa7a <xQueueCreateMutexStatic>
 800f330:	4603      	mov	r3, r0
 800f332:	e003      	b.n	800f33c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800f334:	2001      	movs	r0, #1
 800f336:	f000 fb88 	bl	800fa4a <xQueueCreateMutex>
 800f33a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3708      	adds	r7, #8
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b084      	sub	sp, #16
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
 800f34c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f34e:	2300      	movs	r3, #0
 800f350:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2b00      	cmp	r3, #0
 800f356:	d101      	bne.n	800f35c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f358:	2380      	movs	r3, #128	@ 0x80
 800f35a:	e03a      	b.n	800f3d2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f35c:	2300      	movs	r3, #0
 800f35e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f366:	d103      	bne.n	800f370 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f368:	f04f 33ff 	mov.w	r3, #4294967295
 800f36c:	60fb      	str	r3, [r7, #12]
 800f36e:	e009      	b.n	800f384 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d006      	beq.n	800f384 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d101      	bne.n	800f384 <osSemaphoreWait+0x40>
      ticks = 1;
 800f380:	2301      	movs	r3, #1
 800f382:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f384:	f7ff ff31 	bl	800f1ea <inHandlerMode>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d017      	beq.n	800f3be <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f38e:	f107 0308 	add.w	r3, r7, #8
 800f392:	461a      	mov	r2, r3
 800f394:	2100      	movs	r1, #0
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f000 ffd0 	bl	801033c <xQueueReceiveFromISR>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	d001      	beq.n	800f3a6 <osSemaphoreWait+0x62>
      return osErrorOS;
 800f3a2:	23ff      	movs	r3, #255	@ 0xff
 800f3a4:	e015      	b.n	800f3d2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d011      	beq.n	800f3d0 <osSemaphoreWait+0x8c>
 800f3ac:	4b0b      	ldr	r3, [pc, #44]	@ (800f3dc <osSemaphoreWait+0x98>)
 800f3ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f3b2:	601a      	str	r2, [r3, #0]
 800f3b4:	f3bf 8f4f 	dsb	sy
 800f3b8:	f3bf 8f6f 	isb	sy
 800f3bc:	e008      	b.n	800f3d0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f3be:	68f9      	ldr	r1, [r7, #12]
 800f3c0:	6878      	ldr	r0, [r7, #4]
 800f3c2:	f000 fea3 	bl	801010c <xQueueSemaphoreTake>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	2b01      	cmp	r3, #1
 800f3ca:	d001      	beq.n	800f3d0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f3cc:	23ff      	movs	r3, #255	@ 0xff
 800f3ce:	e000      	b.n	800f3d2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f3d0:	2300      	movs	r3, #0
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3710      	adds	r7, #16
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	e000ed04 	.word	0xe000ed04

0800f3e0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f3f0:	f7ff fefb 	bl	800f1ea <inHandlerMode>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d016      	beq.n	800f428 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f3fa:	f107 0308 	add.w	r3, r7, #8
 800f3fe:	4619      	mov	r1, r3
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f000 fd02 	bl	800fe0a <xQueueGiveFromISR>
 800f406:	4603      	mov	r3, r0
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d001      	beq.n	800f410 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f40c:	23ff      	movs	r3, #255	@ 0xff
 800f40e:	e017      	b.n	800f440 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d013      	beq.n	800f43e <osSemaphoreRelease+0x5e>
 800f416:	4b0c      	ldr	r3, [pc, #48]	@ (800f448 <osSemaphoreRelease+0x68>)
 800f418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f41c:	601a      	str	r2, [r3, #0]
 800f41e:	f3bf 8f4f 	dsb	sy
 800f422:	f3bf 8f6f 	isb	sy
 800f426:	e00a      	b.n	800f43e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f428:	2300      	movs	r3, #0
 800f42a:	2200      	movs	r2, #0
 800f42c:	2100      	movs	r1, #0
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f000 fb3e 	bl	800fab0 <xQueueGenericSend>
 800f434:	4603      	mov	r3, r0
 800f436:	2b01      	cmp	r3, #1
 800f438:	d001      	beq.n	800f43e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f43a:	23ff      	movs	r3, #255	@ 0xff
 800f43c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f43e:	68fb      	ldr	r3, [r7, #12]
}
 800f440:	4618      	mov	r0, r3
 800f442:	3710      	adds	r7, #16
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	e000ed04 	.word	0xe000ed04

0800f44c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800f44c:	b590      	push	{r4, r7, lr}
 800f44e:	b085      	sub	sp, #20
 800f450:	af02      	add	r7, sp, #8
 800f452:	6078      	str	r0, [r7, #4]
 800f454:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	689b      	ldr	r3, [r3, #8]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d011      	beq.n	800f482 <osMessageCreate+0x36>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	68db      	ldr	r3, [r3, #12]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d00d      	beq.n	800f482 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6818      	ldr	r0, [r3, #0]
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	6859      	ldr	r1, [r3, #4]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	689a      	ldr	r2, [r3, #8]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	68db      	ldr	r3, [r3, #12]
 800f476:	2400      	movs	r4, #0
 800f478:	9400      	str	r4, [sp, #0]
 800f47a:	f000 f9e3 	bl	800f844 <xQueueGenericCreateStatic>
 800f47e:	4603      	mov	r3, r0
 800f480:	e008      	b.n	800f494 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6818      	ldr	r0, [r3, #0]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	2200      	movs	r2, #0
 800f48c:	4619      	mov	r1, r3
 800f48e:	f000 fa60 	bl	800f952 <xQueueGenericCreate>
 800f492:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800f494:	4618      	mov	r0, r3
 800f496:	370c      	adds	r7, #12
 800f498:	46bd      	mov	sp, r7
 800f49a:	bd90      	pop	{r4, r7, pc}

0800f49c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b086      	sub	sp, #24
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800f4b0:	697b      	ldr	r3, [r7, #20]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d101      	bne.n	800f4ba <osMessagePut+0x1e>
    ticks = 1;
 800f4b6:	2301      	movs	r3, #1
 800f4b8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800f4ba:	f7ff fe96 	bl	800f1ea <inHandlerMode>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d018      	beq.n	800f4f6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800f4c4:	f107 0210 	add.w	r2, r7, #16
 800f4c8:	f107 0108 	add.w	r1, r7, #8
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	68f8      	ldr	r0, [r7, #12]
 800f4d0:	f000 fbf8 	bl	800fcc4 <xQueueGenericSendFromISR>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	2b01      	cmp	r3, #1
 800f4d8:	d001      	beq.n	800f4de <osMessagePut+0x42>
      return osErrorOS;
 800f4da:	23ff      	movs	r3, #255	@ 0xff
 800f4dc:	e018      	b.n	800f510 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f4de:	693b      	ldr	r3, [r7, #16]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d014      	beq.n	800f50e <osMessagePut+0x72>
 800f4e4:	4b0c      	ldr	r3, [pc, #48]	@ (800f518 <osMessagePut+0x7c>)
 800f4e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f4ea:	601a      	str	r2, [r3, #0]
 800f4ec:	f3bf 8f4f 	dsb	sy
 800f4f0:	f3bf 8f6f 	isb	sy
 800f4f4:	e00b      	b.n	800f50e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800f4f6:	f107 0108 	add.w	r1, r7, #8
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	697a      	ldr	r2, [r7, #20]
 800f4fe:	68f8      	ldr	r0, [r7, #12]
 800f500:	f000 fad6 	bl	800fab0 <xQueueGenericSend>
 800f504:	4603      	mov	r3, r0
 800f506:	2b01      	cmp	r3, #1
 800f508:	d001      	beq.n	800f50e <osMessagePut+0x72>
      return osErrorOS;
 800f50a:	23ff      	movs	r3, #255	@ 0xff
 800f50c:	e000      	b.n	800f510 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800f50e:	2300      	movs	r3, #0
}
 800f510:	4618      	mov	r0, r3
 800f512:	3718      	adds	r7, #24
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	e000ed04 	.word	0xe000ed04

0800f51c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800f51c:	b590      	push	{r4, r7, lr}
 800f51e:	b08b      	sub	sp, #44	@ 0x2c
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800f528:	68bb      	ldr	r3, [r7, #8]
 800f52a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800f52c:	2300      	movs	r3, #0
 800f52e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	2b00      	cmp	r3, #0
 800f534:	d10a      	bne.n	800f54c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800f536:	2380      	movs	r3, #128	@ 0x80
 800f538:	617b      	str	r3, [r7, #20]
    return event;
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	461c      	mov	r4, r3
 800f53e:	f107 0314 	add.w	r3, r7, #20
 800f542:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f54a:	e054      	b.n	800f5f6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800f54c:	2300      	movs	r3, #0
 800f54e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800f550:	2300      	movs	r3, #0
 800f552:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f55a:	d103      	bne.n	800f564 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800f55c:	f04f 33ff 	mov.w	r3, #4294967295
 800f560:	627b      	str	r3, [r7, #36]	@ 0x24
 800f562:	e009      	b.n	800f578 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d006      	beq.n	800f578 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800f56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f570:	2b00      	cmp	r3, #0
 800f572:	d101      	bne.n	800f578 <osMessageGet+0x5c>
      ticks = 1;
 800f574:	2301      	movs	r3, #1
 800f576:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800f578:	f7ff fe37 	bl	800f1ea <inHandlerMode>
 800f57c:	4603      	mov	r3, r0
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d01c      	beq.n	800f5bc <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800f582:	f107 0220 	add.w	r2, r7, #32
 800f586:	f107 0314 	add.w	r3, r7, #20
 800f58a:	3304      	adds	r3, #4
 800f58c:	4619      	mov	r1, r3
 800f58e:	68b8      	ldr	r0, [r7, #8]
 800f590:	f000 fed4 	bl	801033c <xQueueReceiveFromISR>
 800f594:	4603      	mov	r3, r0
 800f596:	2b01      	cmp	r3, #1
 800f598:	d102      	bne.n	800f5a0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800f59a:	2310      	movs	r3, #16
 800f59c:	617b      	str	r3, [r7, #20]
 800f59e:	e001      	b.n	800f5a4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f5a4:	6a3b      	ldr	r3, [r7, #32]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d01d      	beq.n	800f5e6 <osMessageGet+0xca>
 800f5aa:	4b15      	ldr	r3, [pc, #84]	@ (800f600 <osMessageGet+0xe4>)
 800f5ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f5b0:	601a      	str	r2, [r3, #0]
 800f5b2:	f3bf 8f4f 	dsb	sy
 800f5b6:	f3bf 8f6f 	isb	sy
 800f5ba:	e014      	b.n	800f5e6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800f5bc:	f107 0314 	add.w	r3, r7, #20
 800f5c0:	3304      	adds	r3, #4
 800f5c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	68b8      	ldr	r0, [r7, #8]
 800f5c8:	f000 fcb8 	bl	800ff3c <xQueueReceive>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	2b01      	cmp	r3, #1
 800f5d0:	d102      	bne.n	800f5d8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800f5d2:	2310      	movs	r3, #16
 800f5d4:	617b      	str	r3, [r7, #20]
 800f5d6:	e006      	b.n	800f5e6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d101      	bne.n	800f5e2 <osMessageGet+0xc6>
 800f5de:	2300      	movs	r3, #0
 800f5e0:	e000      	b.n	800f5e4 <osMessageGet+0xc8>
 800f5e2:	2340      	movs	r3, #64	@ 0x40
 800f5e4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	461c      	mov	r4, r3
 800f5ea:	f107 0314 	add.w	r3, r7, #20
 800f5ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f5f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f5f6:	68f8      	ldr	r0, [r7, #12]
 800f5f8:	372c      	adds	r7, #44	@ 0x2c
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd90      	pop	{r4, r7, pc}
 800f5fe:	bf00      	nop
 800f600:	e000ed04 	.word	0xe000ed04

0800f604 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f103 0208 	add.w	r2, r3, #8
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f04f 32ff 	mov.w	r2, #4294967295
 800f61c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	f103 0208 	add.w	r2, r3, #8
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f103 0208 	add.w	r2, r3, #8
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2200      	movs	r2, #0
 800f636:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f638:	bf00      	nop
 800f63a:	370c      	adds	r7, #12
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f644:	b480      	push	{r7}
 800f646:	b083      	sub	sp, #12
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f652:	bf00      	nop
 800f654:	370c      	adds	r7, #12
 800f656:	46bd      	mov	sp, r7
 800f658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65c:	4770      	bx	lr

0800f65e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f65e:	b480      	push	{r7}
 800f660:	b085      	sub	sp, #20
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
 800f666:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f66e:	683b      	ldr	r3, [r7, #0]
 800f670:	68fa      	ldr	r2, [r7, #12]
 800f672:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	689a      	ldr	r2, [r3, #8]
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	689b      	ldr	r3, [r3, #8]
 800f680:	683a      	ldr	r2, [r7, #0]
 800f682:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	683a      	ldr	r2, [r7, #0]
 800f688:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f68a:	683b      	ldr	r3, [r7, #0]
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	1c5a      	adds	r2, r3, #1
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	601a      	str	r2, [r3, #0]
}
 800f69a:	bf00      	nop
 800f69c:	3714      	adds	r7, #20
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a4:	4770      	bx	lr

0800f6a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f6a6:	b480      	push	{r7}
 800f6a8:	b085      	sub	sp, #20
 800f6aa:	af00      	add	r7, sp, #0
 800f6ac:	6078      	str	r0, [r7, #4]
 800f6ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f6b6:	68bb      	ldr	r3, [r7, #8]
 800f6b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6bc:	d103      	bne.n	800f6c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	691b      	ldr	r3, [r3, #16]
 800f6c2:	60fb      	str	r3, [r7, #12]
 800f6c4:	e00c      	b.n	800f6e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	3308      	adds	r3, #8
 800f6ca:	60fb      	str	r3, [r7, #12]
 800f6cc:	e002      	b.n	800f6d4 <vListInsert+0x2e>
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	685b      	ldr	r3, [r3, #4]
 800f6d2:	60fb      	str	r3, [r7, #12]
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	685b      	ldr	r3, [r3, #4]
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	68ba      	ldr	r2, [r7, #8]
 800f6dc:	429a      	cmp	r2, r3
 800f6de:	d2f6      	bcs.n	800f6ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	685a      	ldr	r2, [r3, #4]
 800f6e4:	683b      	ldr	r3, [r7, #0]
 800f6e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f6e8:	683b      	ldr	r3, [r7, #0]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	683a      	ldr	r2, [r7, #0]
 800f6ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	68fa      	ldr	r2, [r7, #12]
 800f6f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	683a      	ldr	r2, [r7, #0]
 800f6fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	687a      	ldr	r2, [r7, #4]
 800f700:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	681b      	ldr	r3, [r3, #0]
 800f706:	1c5a      	adds	r2, r3, #1
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	601a      	str	r2, [r3, #0]
}
 800f70c:	bf00      	nop
 800f70e:	3714      	adds	r7, #20
 800f710:	46bd      	mov	sp, r7
 800f712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f716:	4770      	bx	lr

0800f718 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f718:	b480      	push	{r7}
 800f71a:	b085      	sub	sp, #20
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	691b      	ldr	r3, [r3, #16]
 800f724:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	685b      	ldr	r3, [r3, #4]
 800f72a:	687a      	ldr	r2, [r7, #4]
 800f72c:	6892      	ldr	r2, [r2, #8]
 800f72e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	689b      	ldr	r3, [r3, #8]
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	6852      	ldr	r2, [r2, #4]
 800f738:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	685b      	ldr	r3, [r3, #4]
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	429a      	cmp	r2, r3
 800f742:	d103      	bne.n	800f74c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	689a      	ldr	r2, [r3, #8]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	1e5a      	subs	r2, r3, #1
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	681b      	ldr	r3, [r3, #0]
}
 800f760:	4618      	mov	r0, r3
 800f762:	3714      	adds	r7, #20
 800f764:	46bd      	mov	sp, r7
 800f766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76a:	4770      	bx	lr

0800f76c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b084      	sub	sp, #16
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	d10d      	bne.n	800f79c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f784:	b672      	cpsid	i
 800f786:	f383 8811 	msr	BASEPRI, r3
 800f78a:	f3bf 8f6f 	isb	sy
 800f78e:	f3bf 8f4f 	dsb	sy
 800f792:	b662      	cpsie	i
 800f794:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f796:	bf00      	nop
 800f798:	bf00      	nop
 800f79a:	e7fd      	b.n	800f798 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f79c:	f002 f916 	bl	80119cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	681a      	ldr	r2, [r3, #0]
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7a8:	68f9      	ldr	r1, [r7, #12]
 800f7aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f7ac:	fb01 f303 	mul.w	r3, r1, r3
 800f7b0:	441a      	add	r2, r3
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681a      	ldr	r2, [r3, #0]
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f7cc:	3b01      	subs	r3, #1
 800f7ce:	68f9      	ldr	r1, [r7, #12]
 800f7d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800f7d2:	fb01 f303 	mul.w	r3, r1, r3
 800f7d6:	441a      	add	r2, r3
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	22ff      	movs	r2, #255	@ 0xff
 800f7e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	22ff      	movs	r2, #255	@ 0xff
 800f7e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800f7ec:	683b      	ldr	r3, [r7, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d114      	bne.n	800f81c <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	691b      	ldr	r3, [r3, #16]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d01a      	beq.n	800f830 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	3310      	adds	r3, #16
 800f7fe:	4618      	mov	r0, r3
 800f800:	f001 fbc4 	bl	8010f8c <xTaskRemoveFromEventList>
 800f804:	4603      	mov	r3, r0
 800f806:	2b00      	cmp	r3, #0
 800f808:	d012      	beq.n	800f830 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f80a:	4b0d      	ldr	r3, [pc, #52]	@ (800f840 <xQueueGenericReset+0xd4>)
 800f80c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f810:	601a      	str	r2, [r3, #0]
 800f812:	f3bf 8f4f 	dsb	sy
 800f816:	f3bf 8f6f 	isb	sy
 800f81a:	e009      	b.n	800f830 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	3310      	adds	r3, #16
 800f820:	4618      	mov	r0, r3
 800f822:	f7ff feef 	bl	800f604 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	3324      	adds	r3, #36	@ 0x24
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7ff feea 	bl	800f604 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f830:	f002 f902 	bl	8011a38 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f834:	2301      	movs	r3, #1
}
 800f836:	4618      	mov	r0, r3
 800f838:	3710      	adds	r7, #16
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	e000ed04 	.word	0xe000ed04

0800f844 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f844:	b580      	push	{r7, lr}
 800f846:	b08e      	sub	sp, #56	@ 0x38
 800f848:	af02      	add	r7, sp, #8
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	607a      	str	r2, [r7, #4]
 800f850:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d10d      	bne.n	800f874 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800f858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f85c:	b672      	cpsid	i
 800f85e:	f383 8811 	msr	BASEPRI, r3
 800f862:	f3bf 8f6f 	isb	sy
 800f866:	f3bf 8f4f 	dsb	sy
 800f86a:	b662      	cpsie	i
 800f86c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800f86e:	bf00      	nop
 800f870:	bf00      	nop
 800f872:	e7fd      	b.n	800f870 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d10d      	bne.n	800f896 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800f87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f87e:	b672      	cpsid	i
 800f880:	f383 8811 	msr	BASEPRI, r3
 800f884:	f3bf 8f6f 	isb	sy
 800f888:	f3bf 8f4f 	dsb	sy
 800f88c:	b662      	cpsie	i
 800f88e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800f890:	bf00      	nop
 800f892:	bf00      	nop
 800f894:	e7fd      	b.n	800f892 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d002      	beq.n	800f8a2 <xQueueGenericCreateStatic+0x5e>
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d001      	beq.n	800f8a6 <xQueueGenericCreateStatic+0x62>
 800f8a2:	2301      	movs	r3, #1
 800f8a4:	e000      	b.n	800f8a8 <xQueueGenericCreateStatic+0x64>
 800f8a6:	2300      	movs	r3, #0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d10d      	bne.n	800f8c8 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800f8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8b0:	b672      	cpsid	i
 800f8b2:	f383 8811 	msr	BASEPRI, r3
 800f8b6:	f3bf 8f6f 	isb	sy
 800f8ba:	f3bf 8f4f 	dsb	sy
 800f8be:	b662      	cpsie	i
 800f8c0:	623b      	str	r3, [r7, #32]
}
 800f8c2:	bf00      	nop
 800f8c4:	bf00      	nop
 800f8c6:	e7fd      	b.n	800f8c4 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d102      	bne.n	800f8d4 <xQueueGenericCreateStatic+0x90>
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d101      	bne.n	800f8d8 <xQueueGenericCreateStatic+0x94>
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	e000      	b.n	800f8da <xQueueGenericCreateStatic+0x96>
 800f8d8:	2300      	movs	r3, #0
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d10d      	bne.n	800f8fa <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 800f8de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8e2:	b672      	cpsid	i
 800f8e4:	f383 8811 	msr	BASEPRI, r3
 800f8e8:	f3bf 8f6f 	isb	sy
 800f8ec:	f3bf 8f4f 	dsb	sy
 800f8f0:	b662      	cpsie	i
 800f8f2:	61fb      	str	r3, [r7, #28]
}
 800f8f4:	bf00      	nop
 800f8f6:	bf00      	nop
 800f8f8:	e7fd      	b.n	800f8f6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f8fa:	2348      	movs	r3, #72	@ 0x48
 800f8fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	2b48      	cmp	r3, #72	@ 0x48
 800f902:	d00d      	beq.n	800f920 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 800f904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f908:	b672      	cpsid	i
 800f90a:	f383 8811 	msr	BASEPRI, r3
 800f90e:	f3bf 8f6f 	isb	sy
 800f912:	f3bf 8f4f 	dsb	sy
 800f916:	b662      	cpsie	i
 800f918:	61bb      	str	r3, [r7, #24]
}
 800f91a:	bf00      	nop
 800f91c:	bf00      	nop
 800f91e:	e7fd      	b.n	800f91c <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f920:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f922:	683b      	ldr	r3, [r7, #0]
 800f924:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800f926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d00d      	beq.n	800f948 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f92e:	2201      	movs	r2, #1
 800f930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f934:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800f938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f93a:	9300      	str	r3, [sp, #0]
 800f93c:	4613      	mov	r3, r2
 800f93e:	687a      	ldr	r2, [r7, #4]
 800f940:	68b9      	ldr	r1, [r7, #8]
 800f942:	68f8      	ldr	r0, [r7, #12]
 800f944:	f000 f848 	bl	800f9d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800f94a:	4618      	mov	r0, r3
 800f94c:	3730      	adds	r7, #48	@ 0x30
 800f94e:	46bd      	mov	sp, r7
 800f950:	bd80      	pop	{r7, pc}

0800f952 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f952:	b580      	push	{r7, lr}
 800f954:	b08a      	sub	sp, #40	@ 0x28
 800f956:	af02      	add	r7, sp, #8
 800f958:	60f8      	str	r0, [r7, #12]
 800f95a:	60b9      	str	r1, [r7, #8]
 800f95c:	4613      	mov	r3, r2
 800f95e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d10d      	bne.n	800f982 <xQueueGenericCreate+0x30>
	__asm volatile
 800f966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f96a:	b672      	cpsid	i
 800f96c:	f383 8811 	msr	BASEPRI, r3
 800f970:	f3bf 8f6f 	isb	sy
 800f974:	f3bf 8f4f 	dsb	sy
 800f978:	b662      	cpsie	i
 800f97a:	613b      	str	r3, [r7, #16]
}
 800f97c:	bf00      	nop
 800f97e:	bf00      	nop
 800f980:	e7fd      	b.n	800f97e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d102      	bne.n	800f98e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f988:	2300      	movs	r3, #0
 800f98a:	61fb      	str	r3, [r7, #28]
 800f98c:	e004      	b.n	800f998 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	68ba      	ldr	r2, [r7, #8]
 800f992:	fb02 f303 	mul.w	r3, r2, r3
 800f996:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f998:	69fb      	ldr	r3, [r7, #28]
 800f99a:	3348      	adds	r3, #72	@ 0x48
 800f99c:	4618      	mov	r0, r3
 800f99e:	f002 f943 	bl	8011c28 <pvPortMalloc>
 800f9a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f9a4:	69bb      	ldr	r3, [r7, #24]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d011      	beq.n	800f9ce <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	3348      	adds	r3, #72	@ 0x48
 800f9b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f9b4:	69bb      	ldr	r3, [r7, #24]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f9bc:	79fa      	ldrb	r2, [r7, #7]
 800f9be:	69bb      	ldr	r3, [r7, #24]
 800f9c0:	9300      	str	r3, [sp, #0]
 800f9c2:	4613      	mov	r3, r2
 800f9c4:	697a      	ldr	r2, [r7, #20]
 800f9c6:	68b9      	ldr	r1, [r7, #8]
 800f9c8:	68f8      	ldr	r0, [r7, #12]
 800f9ca:	f000 f805 	bl	800f9d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f9ce:	69bb      	ldr	r3, [r7, #24]
	}
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	3720      	adds	r7, #32
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	bd80      	pop	{r7, pc}

0800f9d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	607a      	str	r2, [r7, #4]
 800f9e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d103      	bne.n	800f9f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f9ec:	69bb      	ldr	r3, [r7, #24]
 800f9ee:	69ba      	ldr	r2, [r7, #24]
 800f9f0:	601a      	str	r2, [r3, #0]
 800f9f2:	e002      	b.n	800f9fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f9f4:	69bb      	ldr	r3, [r7, #24]
 800f9f6:	687a      	ldr	r2, [r7, #4]
 800f9f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f9fa:	69bb      	ldr	r3, [r7, #24]
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	68ba      	ldr	r2, [r7, #8]
 800fa04:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fa06:	2101      	movs	r1, #1
 800fa08:	69b8      	ldr	r0, [r7, #24]
 800fa0a:	f7ff feaf 	bl	800f76c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fa0e:	bf00      	nop
 800fa10:	3710      	adds	r7, #16
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}

0800fa16 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fa16:	b580      	push	{r7, lr}
 800fa18:	b082      	sub	sp, #8
 800fa1a:	af00      	add	r7, sp, #0
 800fa1c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d00e      	beq.n	800fa42 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2200      	movs	r2, #0
 800fa28:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2200      	movs	r2, #0
 800fa34:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fa36:	2300      	movs	r3, #0
 800fa38:	2200      	movs	r2, #0
 800fa3a:	2100      	movs	r1, #0
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 f837 	bl	800fab0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fa42:	bf00      	nop
 800fa44:	3708      	adds	r7, #8
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}

0800fa4a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fa4a:	b580      	push	{r7, lr}
 800fa4c:	b086      	sub	sp, #24
 800fa4e:	af00      	add	r7, sp, #0
 800fa50:	4603      	mov	r3, r0
 800fa52:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fa54:	2301      	movs	r3, #1
 800fa56:	617b      	str	r3, [r7, #20]
 800fa58:	2300      	movs	r3, #0
 800fa5a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fa5c:	79fb      	ldrb	r3, [r7, #7]
 800fa5e:	461a      	mov	r2, r3
 800fa60:	6939      	ldr	r1, [r7, #16]
 800fa62:	6978      	ldr	r0, [r7, #20]
 800fa64:	f7ff ff75 	bl	800f952 <xQueueGenericCreate>
 800fa68:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fa6a:	68f8      	ldr	r0, [r7, #12]
 800fa6c:	f7ff ffd3 	bl	800fa16 <prvInitialiseMutex>

		return xNewQueue;
 800fa70:	68fb      	ldr	r3, [r7, #12]
	}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3718      	adds	r7, #24
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}

0800fa7a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fa7a:	b580      	push	{r7, lr}
 800fa7c:	b088      	sub	sp, #32
 800fa7e:	af02      	add	r7, sp, #8
 800fa80:	4603      	mov	r3, r0
 800fa82:	6039      	str	r1, [r7, #0]
 800fa84:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fa86:	2301      	movs	r3, #1
 800fa88:	617b      	str	r3, [r7, #20]
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fa8e:	79fb      	ldrb	r3, [r7, #7]
 800fa90:	9300      	str	r3, [sp, #0]
 800fa92:	683b      	ldr	r3, [r7, #0]
 800fa94:	2200      	movs	r2, #0
 800fa96:	6939      	ldr	r1, [r7, #16]
 800fa98:	6978      	ldr	r0, [r7, #20]
 800fa9a:	f7ff fed3 	bl	800f844 <xQueueGenericCreateStatic>
 800fa9e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800faa0:	68f8      	ldr	r0, [r7, #12]
 800faa2:	f7ff ffb8 	bl	800fa16 <prvInitialiseMutex>

		return xNewQueue;
 800faa6:	68fb      	ldr	r3, [r7, #12]
	}
 800faa8:	4618      	mov	r0, r3
 800faaa:	3718      	adds	r7, #24
 800faac:	46bd      	mov	sp, r7
 800faae:	bd80      	pop	{r7, pc}

0800fab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fab0:	b580      	push	{r7, lr}
 800fab2:	b08e      	sub	sp, #56	@ 0x38
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	60f8      	str	r0, [r7, #12]
 800fab8:	60b9      	str	r1, [r7, #8]
 800faba:	607a      	str	r2, [r7, #4]
 800fabc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fabe:	2300      	movs	r3, #0
 800fac0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d10d      	bne.n	800fae8 <xQueueGenericSend+0x38>
	__asm volatile
 800facc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fad0:	b672      	cpsid	i
 800fad2:	f383 8811 	msr	BASEPRI, r3
 800fad6:	f3bf 8f6f 	isb	sy
 800fada:	f3bf 8f4f 	dsb	sy
 800fade:	b662      	cpsie	i
 800fae0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fae2:	bf00      	nop
 800fae4:	bf00      	nop
 800fae6:	e7fd      	b.n	800fae4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fae8:	68bb      	ldr	r3, [r7, #8]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d103      	bne.n	800faf6 <xQueueGenericSend+0x46>
 800faee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800faf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d101      	bne.n	800fafa <xQueueGenericSend+0x4a>
 800faf6:	2301      	movs	r3, #1
 800faf8:	e000      	b.n	800fafc <xQueueGenericSend+0x4c>
 800fafa:	2300      	movs	r3, #0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d10d      	bne.n	800fb1c <xQueueGenericSend+0x6c>
	__asm volatile
 800fb00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb04:	b672      	cpsid	i
 800fb06:	f383 8811 	msr	BASEPRI, r3
 800fb0a:	f3bf 8f6f 	isb	sy
 800fb0e:	f3bf 8f4f 	dsb	sy
 800fb12:	b662      	cpsie	i
 800fb14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fb16:	bf00      	nop
 800fb18:	bf00      	nop
 800fb1a:	e7fd      	b.n	800fb18 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb1c:	683b      	ldr	r3, [r7, #0]
 800fb1e:	2b02      	cmp	r3, #2
 800fb20:	d103      	bne.n	800fb2a <xQueueGenericSend+0x7a>
 800fb22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb26:	2b01      	cmp	r3, #1
 800fb28:	d101      	bne.n	800fb2e <xQueueGenericSend+0x7e>
 800fb2a:	2301      	movs	r3, #1
 800fb2c:	e000      	b.n	800fb30 <xQueueGenericSend+0x80>
 800fb2e:	2300      	movs	r3, #0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d10d      	bne.n	800fb50 <xQueueGenericSend+0xa0>
	__asm volatile
 800fb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb38:	b672      	cpsid	i
 800fb3a:	f383 8811 	msr	BASEPRI, r3
 800fb3e:	f3bf 8f6f 	isb	sy
 800fb42:	f3bf 8f4f 	dsb	sy
 800fb46:	b662      	cpsie	i
 800fb48:	623b      	str	r3, [r7, #32]
}
 800fb4a:	bf00      	nop
 800fb4c:	bf00      	nop
 800fb4e:	e7fd      	b.n	800fb4c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fb50:	f001 fbea 	bl	8011328 <xTaskGetSchedulerState>
 800fb54:	4603      	mov	r3, r0
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d102      	bne.n	800fb60 <xQueueGenericSend+0xb0>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d101      	bne.n	800fb64 <xQueueGenericSend+0xb4>
 800fb60:	2301      	movs	r3, #1
 800fb62:	e000      	b.n	800fb66 <xQueueGenericSend+0xb6>
 800fb64:	2300      	movs	r3, #0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d10d      	bne.n	800fb86 <xQueueGenericSend+0xd6>
	__asm volatile
 800fb6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb6e:	b672      	cpsid	i
 800fb70:	f383 8811 	msr	BASEPRI, r3
 800fb74:	f3bf 8f6f 	isb	sy
 800fb78:	f3bf 8f4f 	dsb	sy
 800fb7c:	b662      	cpsie	i
 800fb7e:	61fb      	str	r3, [r7, #28]
}
 800fb80:	bf00      	nop
 800fb82:	bf00      	nop
 800fb84:	e7fd      	b.n	800fb82 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fb86:	f001 ff21 	bl	80119cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fb8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fb92:	429a      	cmp	r2, r3
 800fb94:	d302      	bcc.n	800fb9c <xQueueGenericSend+0xec>
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	2b02      	cmp	r3, #2
 800fb9a:	d129      	bne.n	800fbf0 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fb9c:	683a      	ldr	r2, [r7, #0]
 800fb9e:	68b9      	ldr	r1, [r7, #8]
 800fba0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fba2:	f000 fc6b 	bl	801047c <prvCopyDataToQueue>
 800fba6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d010      	beq.n	800fbd2 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fbb2:	3324      	adds	r3, #36	@ 0x24
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f001 f9e9 	bl	8010f8c <xTaskRemoveFromEventList>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d013      	beq.n	800fbe8 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fbc0:	4b3f      	ldr	r3, [pc, #252]	@ (800fcc0 <xQueueGenericSend+0x210>)
 800fbc2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbc6:	601a      	str	r2, [r3, #0]
 800fbc8:	f3bf 8f4f 	dsb	sy
 800fbcc:	f3bf 8f6f 	isb	sy
 800fbd0:	e00a      	b.n	800fbe8 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fbd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d007      	beq.n	800fbe8 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fbd8:	4b39      	ldr	r3, [pc, #228]	@ (800fcc0 <xQueueGenericSend+0x210>)
 800fbda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fbde:	601a      	str	r2, [r3, #0]
 800fbe0:	f3bf 8f4f 	dsb	sy
 800fbe4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fbe8:	f001 ff26 	bl	8011a38 <vPortExitCritical>
				return pdPASS;
 800fbec:	2301      	movs	r3, #1
 800fbee:	e063      	b.n	800fcb8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2b00      	cmp	r3, #0
 800fbf4:	d103      	bne.n	800fbfe <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fbf6:	f001 ff1f 	bl	8011a38 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	e05c      	b.n	800fcb8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fbfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d106      	bne.n	800fc12 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc04:	f107 0314 	add.w	r3, r7, #20
 800fc08:	4618      	mov	r0, r3
 800fc0a:	f001 fa25 	bl	8011058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc0e:	2301      	movs	r3, #1
 800fc10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc12:	f001 ff11 	bl	8011a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc16:	f000 ff9f 	bl	8010b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc1a:	f001 fed7 	bl	80119cc <vPortEnterCritical>
 800fc1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800fc24:	b25b      	sxtb	r3, r3
 800fc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc2a:	d103      	bne.n	800fc34 <xQueueGenericSend+0x184>
 800fc2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc2e:	2200      	movs	r2, #0
 800fc30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fc3a:	b25b      	sxtb	r3, r3
 800fc3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc40:	d103      	bne.n	800fc4a <xQueueGenericSend+0x19a>
 800fc42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc44:	2200      	movs	r2, #0
 800fc46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fc4a:	f001 fef5 	bl	8011a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fc4e:	1d3a      	adds	r2, r7, #4
 800fc50:	f107 0314 	add.w	r3, r7, #20
 800fc54:	4611      	mov	r1, r2
 800fc56:	4618      	mov	r0, r3
 800fc58:	f001 fa14 	bl	8011084 <xTaskCheckForTimeOut>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d124      	bne.n	800fcac <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fc62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fc64:	f000 fd02 	bl	801066c <prvIsQueueFull>
 800fc68:	4603      	mov	r3, r0
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d018      	beq.n	800fca0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fc6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc70:	3310      	adds	r3, #16
 800fc72:	687a      	ldr	r2, [r7, #4]
 800fc74:	4611      	mov	r1, r2
 800fc76:	4618      	mov	r0, r3
 800fc78:	f001 f960 	bl	8010f3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fc7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fc7e:	f000 fc8d 	bl	801059c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fc82:	f000 ff77 	bl	8010b74 <xTaskResumeAll>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f47f af7c 	bne.w	800fb86 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800fc8e:	4b0c      	ldr	r3, [pc, #48]	@ (800fcc0 <xQueueGenericSend+0x210>)
 800fc90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fc94:	601a      	str	r2, [r3, #0]
 800fc96:	f3bf 8f4f 	dsb	sy
 800fc9a:	f3bf 8f6f 	isb	sy
 800fc9e:	e772      	b.n	800fb86 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fca0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fca2:	f000 fc7b 	bl	801059c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fca6:	f000 ff65 	bl	8010b74 <xTaskResumeAll>
 800fcaa:	e76c      	b.n	800fb86 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fcac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fcae:	f000 fc75 	bl	801059c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fcb2:	f000 ff5f 	bl	8010b74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fcb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3738      	adds	r7, #56	@ 0x38
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	e000ed04 	.word	0xe000ed04

0800fcc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b08e      	sub	sp, #56	@ 0x38
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
 800fcd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fcd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d10d      	bne.n	800fcf8 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800fcdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fce0:	b672      	cpsid	i
 800fce2:	f383 8811 	msr	BASEPRI, r3
 800fce6:	f3bf 8f6f 	isb	sy
 800fcea:	f3bf 8f4f 	dsb	sy
 800fcee:	b662      	cpsie	i
 800fcf0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fcf2:	bf00      	nop
 800fcf4:	bf00      	nop
 800fcf6:	e7fd      	b.n	800fcf4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d103      	bne.n	800fd06 <xQueueGenericSendFromISR+0x42>
 800fcfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d101      	bne.n	800fd0a <xQueueGenericSendFromISR+0x46>
 800fd06:	2301      	movs	r3, #1
 800fd08:	e000      	b.n	800fd0c <xQueueGenericSendFromISR+0x48>
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d10d      	bne.n	800fd2c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 800fd10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd14:	b672      	cpsid	i
 800fd16:	f383 8811 	msr	BASEPRI, r3
 800fd1a:	f3bf 8f6f 	isb	sy
 800fd1e:	f3bf 8f4f 	dsb	sy
 800fd22:	b662      	cpsie	i
 800fd24:	623b      	str	r3, [r7, #32]
}
 800fd26:	bf00      	nop
 800fd28:	bf00      	nop
 800fd2a:	e7fd      	b.n	800fd28 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd2c:	683b      	ldr	r3, [r7, #0]
 800fd2e:	2b02      	cmp	r3, #2
 800fd30:	d103      	bne.n	800fd3a <xQueueGenericSendFromISR+0x76>
 800fd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd36:	2b01      	cmp	r3, #1
 800fd38:	d101      	bne.n	800fd3e <xQueueGenericSendFromISR+0x7a>
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e000      	b.n	800fd40 <xQueueGenericSendFromISR+0x7c>
 800fd3e:	2300      	movs	r3, #0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d10d      	bne.n	800fd60 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 800fd44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd48:	b672      	cpsid	i
 800fd4a:	f383 8811 	msr	BASEPRI, r3
 800fd4e:	f3bf 8f6f 	isb	sy
 800fd52:	f3bf 8f4f 	dsb	sy
 800fd56:	b662      	cpsie	i
 800fd58:	61fb      	str	r3, [r7, #28]
}
 800fd5a:	bf00      	nop
 800fd5c:	bf00      	nop
 800fd5e:	e7fd      	b.n	800fd5c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fd60:	f001 ff1c 	bl	8011b9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fd64:	f3ef 8211 	mrs	r2, BASEPRI
 800fd68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd6c:	b672      	cpsid	i
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	b662      	cpsie	i
 800fd7c:	61ba      	str	r2, [r7, #24]
 800fd7e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fd80:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fd82:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fd84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800fd88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd8c:	429a      	cmp	r2, r3
 800fd8e:	d302      	bcc.n	800fd96 <xQueueGenericSendFromISR+0xd2>
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	2b02      	cmp	r3, #2
 800fd94:	d12c      	bne.n	800fdf0 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fd96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fd98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fd9c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fda0:	683a      	ldr	r2, [r7, #0]
 800fda2:	68b9      	ldr	r1, [r7, #8]
 800fda4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800fda6:	f000 fb69 	bl	801047c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fdaa:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800fdae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fdb2:	d112      	bne.n	800fdda <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fdb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d016      	beq.n	800fdea <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fdbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fdbe:	3324      	adds	r3, #36	@ 0x24
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f001 f8e3 	bl	8010f8c <xTaskRemoveFromEventList>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d00e      	beq.n	800fdea <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d00b      	beq.n	800fdea <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2201      	movs	r2, #1
 800fdd6:	601a      	str	r2, [r3, #0]
 800fdd8:	e007      	b.n	800fdea <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fdda:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800fdde:	3301      	adds	r3, #1
 800fde0:	b2db      	uxtb	r3, r3
 800fde2:	b25a      	sxtb	r2, r3
 800fde4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fde6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800fdea:	2301      	movs	r3, #1
 800fdec:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800fdee:	e001      	b.n	800fdf4 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	637b      	str	r3, [r7, #52]	@ 0x34
 800fdf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdf6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fdfe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800fe02:	4618      	mov	r0, r3
 800fe04:	3738      	adds	r7, #56	@ 0x38
 800fe06:	46bd      	mov	sp, r7
 800fe08:	bd80      	pop	{r7, pc}

0800fe0a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fe0a:	b580      	push	{r7, lr}
 800fe0c:	b08e      	sub	sp, #56	@ 0x38
 800fe0e:	af00      	add	r7, sp, #0
 800fe10:	6078      	str	r0, [r7, #4]
 800fe12:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fe18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d10d      	bne.n	800fe3a <xQueueGiveFromISR+0x30>
	__asm volatile
 800fe1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe22:	b672      	cpsid	i
 800fe24:	f383 8811 	msr	BASEPRI, r3
 800fe28:	f3bf 8f6f 	isb	sy
 800fe2c:	f3bf 8f4f 	dsb	sy
 800fe30:	b662      	cpsie	i
 800fe32:	623b      	str	r3, [r7, #32]
}
 800fe34:	bf00      	nop
 800fe36:	bf00      	nop
 800fe38:	e7fd      	b.n	800fe36 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fe3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00d      	beq.n	800fe5e <xQueueGiveFromISR+0x54>
	__asm volatile
 800fe42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe46:	b672      	cpsid	i
 800fe48:	f383 8811 	msr	BASEPRI, r3
 800fe4c:	f3bf 8f6f 	isb	sy
 800fe50:	f3bf 8f4f 	dsb	sy
 800fe54:	b662      	cpsie	i
 800fe56:	61fb      	str	r3, [r7, #28]
}
 800fe58:	bf00      	nop
 800fe5a:	bf00      	nop
 800fe5c:	e7fd      	b.n	800fe5a <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fe5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d103      	bne.n	800fe6e <xQueueGiveFromISR+0x64>
 800fe66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe68:	689b      	ldr	r3, [r3, #8]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d101      	bne.n	800fe72 <xQueueGiveFromISR+0x68>
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e000      	b.n	800fe74 <xQueueGiveFromISR+0x6a>
 800fe72:	2300      	movs	r3, #0
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d10d      	bne.n	800fe94 <xQueueGiveFromISR+0x8a>
	__asm volatile
 800fe78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe7c:	b672      	cpsid	i
 800fe7e:	f383 8811 	msr	BASEPRI, r3
 800fe82:	f3bf 8f6f 	isb	sy
 800fe86:	f3bf 8f4f 	dsb	sy
 800fe8a:	b662      	cpsie	i
 800fe8c:	61bb      	str	r3, [r7, #24]
}
 800fe8e:	bf00      	nop
 800fe90:	bf00      	nop
 800fe92:	e7fd      	b.n	800fe90 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe94:	f001 fe82 	bl	8011b9c <vPortValidateInterruptPriority>
	__asm volatile
 800fe98:	f3ef 8211 	mrs	r2, BASEPRI
 800fe9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fea0:	b672      	cpsid	i
 800fea2:	f383 8811 	msr	BASEPRI, r3
 800fea6:	f3bf 8f6f 	isb	sy
 800feaa:	f3bf 8f4f 	dsb	sy
 800feae:	b662      	cpsie	i
 800feb0:	617a      	str	r2, [r7, #20]
 800feb2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800feb4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800feb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800feb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800febc:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800febe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fec2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fec4:	429a      	cmp	r2, r3
 800fec6:	d22b      	bcs.n	800ff20 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800fece:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed4:	1c5a      	adds	r2, r3, #1
 800fed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fed8:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800feda:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800fede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fee2:	d112      	bne.n	800ff0a <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d016      	beq.n	800ff1a <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800feec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800feee:	3324      	adds	r3, #36	@ 0x24
 800fef0:	4618      	mov	r0, r3
 800fef2:	f001 f84b 	bl	8010f8c <xTaskRemoveFromEventList>
 800fef6:	4603      	mov	r3, r0
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d00e      	beq.n	800ff1a <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d00b      	beq.n	800ff1a <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	2201      	movs	r2, #1
 800ff06:	601a      	str	r2, [r3, #0]
 800ff08:	e007      	b.n	800ff1a <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ff0a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ff0e:	3301      	adds	r3, #1
 800ff10:	b2db      	uxtb	r3, r3
 800ff12:	b25a      	sxtb	r2, r3
 800ff14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff1e:	e001      	b.n	800ff24 <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ff20:	2300      	movs	r3, #0
 800ff22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ff24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff26:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f383 8811 	msr	BASEPRI, r3
}
 800ff2e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	3738      	adds	r7, #56	@ 0x38
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd80      	pop	{r7, pc}
	...

0800ff3c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b08c      	sub	sp, #48	@ 0x30
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	60b9      	str	r1, [r7, #8]
 800ff46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ff50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d10d      	bne.n	800ff72 <xQueueReceive+0x36>
	__asm volatile
 800ff56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff5a:	b672      	cpsid	i
 800ff5c:	f383 8811 	msr	BASEPRI, r3
 800ff60:	f3bf 8f6f 	isb	sy
 800ff64:	f3bf 8f4f 	dsb	sy
 800ff68:	b662      	cpsie	i
 800ff6a:	623b      	str	r3, [r7, #32]
}
 800ff6c:	bf00      	nop
 800ff6e:	bf00      	nop
 800ff70:	e7fd      	b.n	800ff6e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d103      	bne.n	800ff80 <xQueueReceive+0x44>
 800ff78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d101      	bne.n	800ff84 <xQueueReceive+0x48>
 800ff80:	2301      	movs	r3, #1
 800ff82:	e000      	b.n	800ff86 <xQueueReceive+0x4a>
 800ff84:	2300      	movs	r3, #0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d10d      	bne.n	800ffa6 <xQueueReceive+0x6a>
	__asm volatile
 800ff8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff8e:	b672      	cpsid	i
 800ff90:	f383 8811 	msr	BASEPRI, r3
 800ff94:	f3bf 8f6f 	isb	sy
 800ff98:	f3bf 8f4f 	dsb	sy
 800ff9c:	b662      	cpsie	i
 800ff9e:	61fb      	str	r3, [r7, #28]
}
 800ffa0:	bf00      	nop
 800ffa2:	bf00      	nop
 800ffa4:	e7fd      	b.n	800ffa2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ffa6:	f001 f9bf 	bl	8011328 <xTaskGetSchedulerState>
 800ffaa:	4603      	mov	r3, r0
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d102      	bne.n	800ffb6 <xQueueReceive+0x7a>
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d101      	bne.n	800ffba <xQueueReceive+0x7e>
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	e000      	b.n	800ffbc <xQueueReceive+0x80>
 800ffba:	2300      	movs	r3, #0
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d10d      	bne.n	800ffdc <xQueueReceive+0xa0>
	__asm volatile
 800ffc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffc4:	b672      	cpsid	i
 800ffc6:	f383 8811 	msr	BASEPRI, r3
 800ffca:	f3bf 8f6f 	isb	sy
 800ffce:	f3bf 8f4f 	dsb	sy
 800ffd2:	b662      	cpsie	i
 800ffd4:	61bb      	str	r3, [r7, #24]
}
 800ffd6:	bf00      	nop
 800ffd8:	bf00      	nop
 800ffda:	e7fd      	b.n	800ffd8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ffdc:	f001 fcf6 	bl	80119cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ffe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ffe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ffe4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d01f      	beq.n	801002c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ffec:	68b9      	ldr	r1, [r7, #8]
 800ffee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fff0:	f000 faae 	bl	8010550 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fff6:	1e5a      	subs	r2, r3, #1
 800fff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fffa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fffe:	691b      	ldr	r3, [r3, #16]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d00f      	beq.n	8010024 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010006:	3310      	adds	r3, #16
 8010008:	4618      	mov	r0, r3
 801000a:	f000 ffbf 	bl	8010f8c <xTaskRemoveFromEventList>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d007      	beq.n	8010024 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010014:	4b3c      	ldr	r3, [pc, #240]	@ (8010108 <xQueueReceive+0x1cc>)
 8010016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801001a:	601a      	str	r2, [r3, #0]
 801001c:	f3bf 8f4f 	dsb	sy
 8010020:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010024:	f001 fd08 	bl	8011a38 <vPortExitCritical>
				return pdPASS;
 8010028:	2301      	movs	r3, #1
 801002a:	e069      	b.n	8010100 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d103      	bne.n	801003a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010032:	f001 fd01 	bl	8011a38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010036:	2300      	movs	r3, #0
 8010038:	e062      	b.n	8010100 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801003a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801003c:	2b00      	cmp	r3, #0
 801003e:	d106      	bne.n	801004e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010040:	f107 0310 	add.w	r3, r7, #16
 8010044:	4618      	mov	r0, r3
 8010046:	f001 f807 	bl	8011058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801004a:	2301      	movs	r3, #1
 801004c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801004e:	f001 fcf3 	bl	8011a38 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010052:	f000 fd81 	bl	8010b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010056:	f001 fcb9 	bl	80119cc <vPortEnterCritical>
 801005a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801005c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010060:	b25b      	sxtb	r3, r3
 8010062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010066:	d103      	bne.n	8010070 <xQueueReceive+0x134>
 8010068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801006a:	2200      	movs	r2, #0
 801006c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010072:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010076:	b25b      	sxtb	r3, r3
 8010078:	f1b3 3fff 	cmp.w	r3, #4294967295
 801007c:	d103      	bne.n	8010086 <xQueueReceive+0x14a>
 801007e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010080:	2200      	movs	r2, #0
 8010082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010086:	f001 fcd7 	bl	8011a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801008a:	1d3a      	adds	r2, r7, #4
 801008c:	f107 0310 	add.w	r3, r7, #16
 8010090:	4611      	mov	r1, r2
 8010092:	4618      	mov	r0, r3
 8010094:	f000 fff6 	bl	8011084 <xTaskCheckForTimeOut>
 8010098:	4603      	mov	r3, r0
 801009a:	2b00      	cmp	r3, #0
 801009c:	d123      	bne.n	80100e6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801009e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100a0:	f000 face 	bl	8010640 <prvIsQueueEmpty>
 80100a4:	4603      	mov	r3, r0
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d017      	beq.n	80100da <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80100aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100ac:	3324      	adds	r3, #36	@ 0x24
 80100ae:	687a      	ldr	r2, [r7, #4]
 80100b0:	4611      	mov	r1, r2
 80100b2:	4618      	mov	r0, r3
 80100b4:	f000 ff42 	bl	8010f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80100b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100ba:	f000 fa6f 	bl	801059c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80100be:	f000 fd59 	bl	8010b74 <xTaskResumeAll>
 80100c2:	4603      	mov	r3, r0
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d189      	bne.n	800ffdc <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80100c8:	4b0f      	ldr	r3, [pc, #60]	@ (8010108 <xQueueReceive+0x1cc>)
 80100ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100ce:	601a      	str	r2, [r3, #0]
 80100d0:	f3bf 8f4f 	dsb	sy
 80100d4:	f3bf 8f6f 	isb	sy
 80100d8:	e780      	b.n	800ffdc <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80100da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100dc:	f000 fa5e 	bl	801059c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80100e0:	f000 fd48 	bl	8010b74 <xTaskResumeAll>
 80100e4:	e77a      	b.n	800ffdc <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80100e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100e8:	f000 fa58 	bl	801059c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80100ec:	f000 fd42 	bl	8010b74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80100f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80100f2:	f000 faa5 	bl	8010640 <prvIsQueueEmpty>
 80100f6:	4603      	mov	r3, r0
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f43f af6f 	beq.w	800ffdc <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80100fe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010100:	4618      	mov	r0, r3
 8010102:	3730      	adds	r7, #48	@ 0x30
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}
 8010108:	e000ed04 	.word	0xe000ed04

0801010c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b08e      	sub	sp, #56	@ 0x38
 8010110:	af00      	add	r7, sp, #0
 8010112:	6078      	str	r0, [r7, #4]
 8010114:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010116:	2300      	movs	r3, #0
 8010118:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801011e:	2300      	movs	r3, #0
 8010120:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010122:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010124:	2b00      	cmp	r3, #0
 8010126:	d10d      	bne.n	8010144 <xQueueSemaphoreTake+0x38>
	__asm volatile
 8010128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801012c:	b672      	cpsid	i
 801012e:	f383 8811 	msr	BASEPRI, r3
 8010132:	f3bf 8f6f 	isb	sy
 8010136:	f3bf 8f4f 	dsb	sy
 801013a:	b662      	cpsie	i
 801013c:	623b      	str	r3, [r7, #32]
}
 801013e:	bf00      	nop
 8010140:	bf00      	nop
 8010142:	e7fd      	b.n	8010140 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010148:	2b00      	cmp	r3, #0
 801014a:	d00d      	beq.n	8010168 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 801014c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010150:	b672      	cpsid	i
 8010152:	f383 8811 	msr	BASEPRI, r3
 8010156:	f3bf 8f6f 	isb	sy
 801015a:	f3bf 8f4f 	dsb	sy
 801015e:	b662      	cpsie	i
 8010160:	61fb      	str	r3, [r7, #28]
}
 8010162:	bf00      	nop
 8010164:	bf00      	nop
 8010166:	e7fd      	b.n	8010164 <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010168:	f001 f8de 	bl	8011328 <xTaskGetSchedulerState>
 801016c:	4603      	mov	r3, r0
 801016e:	2b00      	cmp	r3, #0
 8010170:	d102      	bne.n	8010178 <xQueueSemaphoreTake+0x6c>
 8010172:	683b      	ldr	r3, [r7, #0]
 8010174:	2b00      	cmp	r3, #0
 8010176:	d101      	bne.n	801017c <xQueueSemaphoreTake+0x70>
 8010178:	2301      	movs	r3, #1
 801017a:	e000      	b.n	801017e <xQueueSemaphoreTake+0x72>
 801017c:	2300      	movs	r3, #0
 801017e:	2b00      	cmp	r3, #0
 8010180:	d10d      	bne.n	801019e <xQueueSemaphoreTake+0x92>
	__asm volatile
 8010182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010186:	b672      	cpsid	i
 8010188:	f383 8811 	msr	BASEPRI, r3
 801018c:	f3bf 8f6f 	isb	sy
 8010190:	f3bf 8f4f 	dsb	sy
 8010194:	b662      	cpsie	i
 8010196:	61bb      	str	r3, [r7, #24]
}
 8010198:	bf00      	nop
 801019a:	bf00      	nop
 801019c:	e7fd      	b.n	801019a <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801019e:	f001 fc15 	bl	80119cc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80101a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80101a6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80101a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d024      	beq.n	80101f8 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80101ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101b0:	1e5a      	subs	r2, r3, #1
 80101b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80101b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d104      	bne.n	80101c8 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80101be:	f001 fa7d 	bl	80116bc <pvTaskIncrementMutexHeldCount>
 80101c2:	4602      	mov	r2, r0
 80101c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80101c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101ca:	691b      	ldr	r3, [r3, #16]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d00f      	beq.n	80101f0 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80101d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d2:	3310      	adds	r3, #16
 80101d4:	4618      	mov	r0, r3
 80101d6:	f000 fed9 	bl	8010f8c <xTaskRemoveFromEventList>
 80101da:	4603      	mov	r3, r0
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d007      	beq.n	80101f0 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80101e0:	4b55      	ldr	r3, [pc, #340]	@ (8010338 <xQueueSemaphoreTake+0x22c>)
 80101e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101e6:	601a      	str	r2, [r3, #0]
 80101e8:	f3bf 8f4f 	dsb	sy
 80101ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80101f0:	f001 fc22 	bl	8011a38 <vPortExitCritical>
				return pdPASS;
 80101f4:	2301      	movs	r3, #1
 80101f6:	e09a      	b.n	801032e <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d114      	bne.n	8010228 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80101fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010200:	2b00      	cmp	r3, #0
 8010202:	d00d      	beq.n	8010220 <xQueueSemaphoreTake+0x114>
	__asm volatile
 8010204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010208:	b672      	cpsid	i
 801020a:	f383 8811 	msr	BASEPRI, r3
 801020e:	f3bf 8f6f 	isb	sy
 8010212:	f3bf 8f4f 	dsb	sy
 8010216:	b662      	cpsie	i
 8010218:	617b      	str	r3, [r7, #20]
}
 801021a:	bf00      	nop
 801021c:	bf00      	nop
 801021e:	e7fd      	b.n	801021c <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010220:	f001 fc0a 	bl	8011a38 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010224:	2300      	movs	r3, #0
 8010226:	e082      	b.n	801032e <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801022a:	2b00      	cmp	r3, #0
 801022c:	d106      	bne.n	801023c <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801022e:	f107 030c 	add.w	r3, r7, #12
 8010232:	4618      	mov	r0, r3
 8010234:	f000 ff10 	bl	8011058 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010238:	2301      	movs	r3, #1
 801023a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801023c:	f001 fbfc 	bl	8011a38 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010240:	f000 fc8a 	bl	8010b58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010244:	f001 fbc2 	bl	80119cc <vPortEnterCritical>
 8010248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801024a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801024e:	b25b      	sxtb	r3, r3
 8010250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010254:	d103      	bne.n	801025e <xQueueSemaphoreTake+0x152>
 8010256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010258:	2200      	movs	r2, #0
 801025a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801025e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010260:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010264:	b25b      	sxtb	r3, r3
 8010266:	f1b3 3fff 	cmp.w	r3, #4294967295
 801026a:	d103      	bne.n	8010274 <xQueueSemaphoreTake+0x168>
 801026c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801026e:	2200      	movs	r2, #0
 8010270:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010274:	f001 fbe0 	bl	8011a38 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010278:	463a      	mov	r2, r7
 801027a:	f107 030c 	add.w	r3, r7, #12
 801027e:	4611      	mov	r1, r2
 8010280:	4618      	mov	r0, r3
 8010282:	f000 feff 	bl	8011084 <xTaskCheckForTimeOut>
 8010286:	4603      	mov	r3, r0
 8010288:	2b00      	cmp	r3, #0
 801028a:	d132      	bne.n	80102f2 <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801028c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801028e:	f000 f9d7 	bl	8010640 <prvIsQueueEmpty>
 8010292:	4603      	mov	r3, r0
 8010294:	2b00      	cmp	r3, #0
 8010296:	d026      	beq.n	80102e6 <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d109      	bne.n	80102b4 <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80102a0:	f001 fb94 	bl	80119cc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80102a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102a6:	689b      	ldr	r3, [r3, #8]
 80102a8:	4618      	mov	r0, r3
 80102aa:	f001 f85b 	bl	8011364 <xTaskPriorityInherit>
 80102ae:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80102b0:	f001 fbc2 	bl	8011a38 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80102b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80102b6:	3324      	adds	r3, #36	@ 0x24
 80102b8:	683a      	ldr	r2, [r7, #0]
 80102ba:	4611      	mov	r1, r2
 80102bc:	4618      	mov	r0, r3
 80102be:	f000 fe3d 	bl	8010f3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80102c2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102c4:	f000 f96a 	bl	801059c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80102c8:	f000 fc54 	bl	8010b74 <xTaskResumeAll>
 80102cc:	4603      	mov	r3, r0
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	f47f af65 	bne.w	801019e <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 80102d4:	4b18      	ldr	r3, [pc, #96]	@ (8010338 <xQueueSemaphoreTake+0x22c>)
 80102d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80102da:	601a      	str	r2, [r3, #0]
 80102dc:	f3bf 8f4f 	dsb	sy
 80102e0:	f3bf 8f6f 	isb	sy
 80102e4:	e75b      	b.n	801019e <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80102e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102e8:	f000 f958 	bl	801059c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80102ec:	f000 fc42 	bl	8010b74 <xTaskResumeAll>
 80102f0:	e755      	b.n	801019e <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80102f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102f4:	f000 f952 	bl	801059c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80102f8:	f000 fc3c 	bl	8010b74 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80102fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80102fe:	f000 f99f 	bl	8010640 <prvIsQueueEmpty>
 8010302:	4603      	mov	r3, r0
 8010304:	2b00      	cmp	r3, #0
 8010306:	f43f af4a 	beq.w	801019e <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801030a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801030c:	2b00      	cmp	r3, #0
 801030e:	d00d      	beq.n	801032c <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8010310:	f001 fb5c 	bl	80119cc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010314:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010316:	f000 f899 	bl	801044c <prvGetDisinheritPriorityAfterTimeout>
 801031a:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801031c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8010322:	4618      	mov	r0, r3
 8010324:	f001 f92a 	bl	801157c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010328:	f001 fb86 	bl	8011a38 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801032c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801032e:	4618      	mov	r0, r3
 8010330:	3738      	adds	r7, #56	@ 0x38
 8010332:	46bd      	mov	sp, r7
 8010334:	bd80      	pop	{r7, pc}
 8010336:	bf00      	nop
 8010338:	e000ed04 	.word	0xe000ed04

0801033c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b08e      	sub	sp, #56	@ 0x38
 8010340:	af00      	add	r7, sp, #0
 8010342:	60f8      	str	r0, [r7, #12]
 8010344:	60b9      	str	r1, [r7, #8]
 8010346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801034c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801034e:	2b00      	cmp	r3, #0
 8010350:	d10d      	bne.n	801036e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8010352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010356:	b672      	cpsid	i
 8010358:	f383 8811 	msr	BASEPRI, r3
 801035c:	f3bf 8f6f 	isb	sy
 8010360:	f3bf 8f4f 	dsb	sy
 8010364:	b662      	cpsie	i
 8010366:	623b      	str	r3, [r7, #32]
}
 8010368:	bf00      	nop
 801036a:	bf00      	nop
 801036c:	e7fd      	b.n	801036a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	2b00      	cmp	r3, #0
 8010372:	d103      	bne.n	801037c <xQueueReceiveFromISR+0x40>
 8010374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010378:	2b00      	cmp	r3, #0
 801037a:	d101      	bne.n	8010380 <xQueueReceiveFromISR+0x44>
 801037c:	2301      	movs	r3, #1
 801037e:	e000      	b.n	8010382 <xQueueReceiveFromISR+0x46>
 8010380:	2300      	movs	r3, #0
 8010382:	2b00      	cmp	r3, #0
 8010384:	d10d      	bne.n	80103a2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8010386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801038a:	b672      	cpsid	i
 801038c:	f383 8811 	msr	BASEPRI, r3
 8010390:	f3bf 8f6f 	isb	sy
 8010394:	f3bf 8f4f 	dsb	sy
 8010398:	b662      	cpsie	i
 801039a:	61fb      	str	r3, [r7, #28]
}
 801039c:	bf00      	nop
 801039e:	bf00      	nop
 80103a0:	e7fd      	b.n	801039e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80103a2:	f001 fbfb 	bl	8011b9c <vPortValidateInterruptPriority>
	__asm volatile
 80103a6:	f3ef 8211 	mrs	r2, BASEPRI
 80103aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103ae:	b672      	cpsid	i
 80103b0:	f383 8811 	msr	BASEPRI, r3
 80103b4:	f3bf 8f6f 	isb	sy
 80103b8:	f3bf 8f4f 	dsb	sy
 80103bc:	b662      	cpsie	i
 80103be:	61ba      	str	r2, [r7, #24]
 80103c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80103c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80103c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ca:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80103cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d02f      	beq.n	8010432 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80103d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80103d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80103dc:	68b9      	ldr	r1, [r7, #8]
 80103de:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80103e0:	f000 f8b6 	bl	8010550 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80103e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103e6:	1e5a      	subs	r2, r3, #1
 80103e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ea:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80103ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80103f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103f4:	d112      	bne.n	801041c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f8:	691b      	ldr	r3, [r3, #16]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d016      	beq.n	801042c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010400:	3310      	adds	r3, #16
 8010402:	4618      	mov	r0, r3
 8010404:	f000 fdc2 	bl	8010f8c <xTaskRemoveFromEventList>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d00e      	beq.n	801042c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00b      	beq.n	801042c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2201      	movs	r2, #1
 8010418:	601a      	str	r2, [r3, #0]
 801041a:	e007      	b.n	801042c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801041c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010420:	3301      	adds	r3, #1
 8010422:	b2db      	uxtb	r3, r3
 8010424:	b25a      	sxtb	r2, r3
 8010426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801042c:	2301      	movs	r3, #1
 801042e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010430:	e001      	b.n	8010436 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8010432:	2300      	movs	r3, #0
 8010434:	637b      	str	r3, [r7, #52]	@ 0x34
 8010436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010438:	613b      	str	r3, [r7, #16]
	__asm volatile
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	f383 8811 	msr	BASEPRI, r3
}
 8010440:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010444:	4618      	mov	r0, r3
 8010446:	3738      	adds	r7, #56	@ 0x38
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801044c:	b480      	push	{r7}
 801044e:	b085      	sub	sp, #20
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010458:	2b00      	cmp	r3, #0
 801045a:	d006      	beq.n	801046a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	f1c3 0307 	rsb	r3, r3, #7
 8010466:	60fb      	str	r3, [r7, #12]
 8010468:	e001      	b.n	801046e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801046a:	2300      	movs	r3, #0
 801046c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801046e:	68fb      	ldr	r3, [r7, #12]
	}
 8010470:	4618      	mov	r0, r3
 8010472:	3714      	adds	r7, #20
 8010474:	46bd      	mov	sp, r7
 8010476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047a:	4770      	bx	lr

0801047c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801047c:	b580      	push	{r7, lr}
 801047e:	b086      	sub	sp, #24
 8010480:	af00      	add	r7, sp, #0
 8010482:	60f8      	str	r0, [r7, #12]
 8010484:	60b9      	str	r1, [r7, #8]
 8010486:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010488:	2300      	movs	r3, #0
 801048a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801048c:	68fb      	ldr	r3, [r7, #12]
 801048e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010490:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010492:	68fb      	ldr	r3, [r7, #12]
 8010494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010496:	2b00      	cmp	r3, #0
 8010498:	d10d      	bne.n	80104b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801049a:	68fb      	ldr	r3, [r7, #12]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d14d      	bne.n	801053e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80104a2:	68fb      	ldr	r3, [r7, #12]
 80104a4:	689b      	ldr	r3, [r3, #8]
 80104a6:	4618      	mov	r0, r3
 80104a8:	f000 ffdc 	bl	8011464 <xTaskPriorityDisinherit>
 80104ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	2200      	movs	r2, #0
 80104b2:	609a      	str	r2, [r3, #8]
 80104b4:	e043      	b.n	801053e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d119      	bne.n	80104f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	6858      	ldr	r0, [r3, #4]
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104c4:	461a      	mov	r2, r3
 80104c6:	68b9      	ldr	r1, [r7, #8]
 80104c8:	f001 fe42 	bl	8012150 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	685a      	ldr	r2, [r3, #4]
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104d4:	441a      	add	r2, r3
 80104d6:	68fb      	ldr	r3, [r7, #12]
 80104d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	685a      	ldr	r2, [r3, #4]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	689b      	ldr	r3, [r3, #8]
 80104e2:	429a      	cmp	r2, r3
 80104e4:	d32b      	bcc.n	801053e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80104e6:	68fb      	ldr	r3, [r7, #12]
 80104e8:	681a      	ldr	r2, [r3, #0]
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	605a      	str	r2, [r3, #4]
 80104ee:	e026      	b.n	801053e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	68d8      	ldr	r0, [r3, #12]
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80104f8:	461a      	mov	r2, r3
 80104fa:	68b9      	ldr	r1, [r7, #8]
 80104fc:	f001 fe28 	bl	8012150 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010500:	68fb      	ldr	r3, [r7, #12]
 8010502:	68da      	ldr	r2, [r3, #12]
 8010504:	68fb      	ldr	r3, [r7, #12]
 8010506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010508:	425b      	negs	r3, r3
 801050a:	441a      	add	r2, r3
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	68da      	ldr	r2, [r3, #12]
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	429a      	cmp	r2, r3
 801051a:	d207      	bcs.n	801052c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	689a      	ldr	r2, [r3, #8]
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010524:	425b      	negs	r3, r3
 8010526:	441a      	add	r2, r3
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2b02      	cmp	r3, #2
 8010530:	d105      	bne.n	801053e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010532:	693b      	ldr	r3, [r7, #16]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d002      	beq.n	801053e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010538:	693b      	ldr	r3, [r7, #16]
 801053a:	3b01      	subs	r3, #1
 801053c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801053e:	693b      	ldr	r3, [r7, #16]
 8010540:	1c5a      	adds	r2, r3, #1
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010546:	697b      	ldr	r3, [r7, #20]
}
 8010548:	4618      	mov	r0, r3
 801054a:	3718      	adds	r7, #24
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}

08010550 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801055e:	2b00      	cmp	r3, #0
 8010560:	d018      	beq.n	8010594 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	68da      	ldr	r2, [r3, #12]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801056a:	441a      	add	r2, r3
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	68da      	ldr	r2, [r3, #12]
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	429a      	cmp	r2, r3
 801057a:	d303      	bcc.n	8010584 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	681a      	ldr	r2, [r3, #0]
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	68d9      	ldr	r1, [r3, #12]
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801058c:	461a      	mov	r2, r3
 801058e:	6838      	ldr	r0, [r7, #0]
 8010590:	f001 fdde 	bl	8012150 <memcpy>
	}
}
 8010594:	bf00      	nop
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801059c:	b580      	push	{r7, lr}
 801059e:	b084      	sub	sp, #16
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80105a4:	f001 fa12 	bl	80119cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80105ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80105b0:	e011      	b.n	80105d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d012      	beq.n	80105e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	3324      	adds	r3, #36	@ 0x24
 80105be:	4618      	mov	r0, r3
 80105c0:	f000 fce4 	bl	8010f8c <xTaskRemoveFromEventList>
 80105c4:	4603      	mov	r3, r0
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d001      	beq.n	80105ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80105ca:	f000 fdc3 	bl	8011154 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80105ce:	7bfb      	ldrb	r3, [r7, #15]
 80105d0:	3b01      	subs	r3, #1
 80105d2:	b2db      	uxtb	r3, r3
 80105d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80105d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105da:	2b00      	cmp	r3, #0
 80105dc:	dce9      	bgt.n	80105b2 <prvUnlockQueue+0x16>
 80105de:	e000      	b.n	80105e2 <prvUnlockQueue+0x46>
					break;
 80105e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	22ff      	movs	r2, #255	@ 0xff
 80105e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80105ea:	f001 fa25 	bl	8011a38 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80105ee:	f001 f9ed 	bl	80119cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80105f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80105fa:	e011      	b.n	8010620 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	691b      	ldr	r3, [r3, #16]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d012      	beq.n	801062a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	3310      	adds	r3, #16
 8010608:	4618      	mov	r0, r3
 801060a:	f000 fcbf 	bl	8010f8c <xTaskRemoveFromEventList>
 801060e:	4603      	mov	r3, r0
 8010610:	2b00      	cmp	r3, #0
 8010612:	d001      	beq.n	8010618 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010614:	f000 fd9e 	bl	8011154 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010618:	7bbb      	ldrb	r3, [r7, #14]
 801061a:	3b01      	subs	r3, #1
 801061c:	b2db      	uxtb	r3, r3
 801061e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010624:	2b00      	cmp	r3, #0
 8010626:	dce9      	bgt.n	80105fc <prvUnlockQueue+0x60>
 8010628:	e000      	b.n	801062c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801062a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	22ff      	movs	r2, #255	@ 0xff
 8010630:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010634:	f001 fa00 	bl	8011a38 <vPortExitCritical>
}
 8010638:	bf00      	nop
 801063a:	3710      	adds	r7, #16
 801063c:	46bd      	mov	sp, r7
 801063e:	bd80      	pop	{r7, pc}

08010640 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b084      	sub	sp, #16
 8010644:	af00      	add	r7, sp, #0
 8010646:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010648:	f001 f9c0 	bl	80119cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010650:	2b00      	cmp	r3, #0
 8010652:	d102      	bne.n	801065a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010654:	2301      	movs	r3, #1
 8010656:	60fb      	str	r3, [r7, #12]
 8010658:	e001      	b.n	801065e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801065a:	2300      	movs	r3, #0
 801065c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801065e:	f001 f9eb 	bl	8011a38 <vPortExitCritical>

	return xReturn;
 8010662:	68fb      	ldr	r3, [r7, #12]
}
 8010664:	4618      	mov	r0, r3
 8010666:	3710      	adds	r7, #16
 8010668:	46bd      	mov	sp, r7
 801066a:	bd80      	pop	{r7, pc}

0801066c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801066c:	b580      	push	{r7, lr}
 801066e:	b084      	sub	sp, #16
 8010670:	af00      	add	r7, sp, #0
 8010672:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010674:	f001 f9aa 	bl	80119cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010680:	429a      	cmp	r2, r3
 8010682:	d102      	bne.n	801068a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010684:	2301      	movs	r3, #1
 8010686:	60fb      	str	r3, [r7, #12]
 8010688:	e001      	b.n	801068e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801068a:	2300      	movs	r3, #0
 801068c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801068e:	f001 f9d3 	bl	8011a38 <vPortExitCritical>

	return xReturn;
 8010692:	68fb      	ldr	r3, [r7, #12]
}
 8010694:	4618      	mov	r0, r3
 8010696:	3710      	adds	r7, #16
 8010698:	46bd      	mov	sp, r7
 801069a:	bd80      	pop	{r7, pc}

0801069c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801069c:	b580      	push	{r7, lr}
 801069e:	b08e      	sub	sp, #56	@ 0x38
 80106a0:	af04      	add	r7, sp, #16
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	607a      	str	r2, [r7, #4]
 80106a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80106aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d10d      	bne.n	80106cc <xTaskCreateStatic+0x30>
	__asm volatile
 80106b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106b4:	b672      	cpsid	i
 80106b6:	f383 8811 	msr	BASEPRI, r3
 80106ba:	f3bf 8f6f 	isb	sy
 80106be:	f3bf 8f4f 	dsb	sy
 80106c2:	b662      	cpsie	i
 80106c4:	623b      	str	r3, [r7, #32]
}
 80106c6:	bf00      	nop
 80106c8:	bf00      	nop
 80106ca:	e7fd      	b.n	80106c8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80106cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d10d      	bne.n	80106ee <xTaskCreateStatic+0x52>
	__asm volatile
 80106d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106d6:	b672      	cpsid	i
 80106d8:	f383 8811 	msr	BASEPRI, r3
 80106dc:	f3bf 8f6f 	isb	sy
 80106e0:	f3bf 8f4f 	dsb	sy
 80106e4:	b662      	cpsie	i
 80106e6:	61fb      	str	r3, [r7, #28]
}
 80106e8:	bf00      	nop
 80106ea:	bf00      	nop
 80106ec:	e7fd      	b.n	80106ea <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80106ee:	23a0      	movs	r3, #160	@ 0xa0
 80106f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	2ba0      	cmp	r3, #160	@ 0xa0
 80106f6:	d00d      	beq.n	8010714 <xTaskCreateStatic+0x78>
	__asm volatile
 80106f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106fc:	b672      	cpsid	i
 80106fe:	f383 8811 	msr	BASEPRI, r3
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	b662      	cpsie	i
 801070c:	61bb      	str	r3, [r7, #24]
}
 801070e:	bf00      	nop
 8010710:	bf00      	nop
 8010712:	e7fd      	b.n	8010710 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010714:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010718:	2b00      	cmp	r3, #0
 801071a:	d01e      	beq.n	801075a <xTaskCreateStatic+0xbe>
 801071c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801071e:	2b00      	cmp	r3, #0
 8010720:	d01b      	beq.n	801075a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010724:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010728:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801072a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801072c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801072e:	2202      	movs	r2, #2
 8010730:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010734:	2300      	movs	r3, #0
 8010736:	9303      	str	r3, [sp, #12]
 8010738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801073a:	9302      	str	r3, [sp, #8]
 801073c:	f107 0314 	add.w	r3, r7, #20
 8010740:	9301      	str	r3, [sp, #4]
 8010742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010744:	9300      	str	r3, [sp, #0]
 8010746:	683b      	ldr	r3, [r7, #0]
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	68b9      	ldr	r1, [r7, #8]
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	f000 f851 	bl	80107f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010752:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010754:	f000 f8f0 	bl	8010938 <prvAddNewTaskToReadyList>
 8010758:	e001      	b.n	801075e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801075a:	2300      	movs	r3, #0
 801075c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801075e:	697b      	ldr	r3, [r7, #20]
	}
 8010760:	4618      	mov	r0, r3
 8010762:	3728      	adds	r7, #40	@ 0x28
 8010764:	46bd      	mov	sp, r7
 8010766:	bd80      	pop	{r7, pc}

08010768 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010768:	b580      	push	{r7, lr}
 801076a:	b08c      	sub	sp, #48	@ 0x30
 801076c:	af04      	add	r7, sp, #16
 801076e:	60f8      	str	r0, [r7, #12]
 8010770:	60b9      	str	r1, [r7, #8]
 8010772:	603b      	str	r3, [r7, #0]
 8010774:	4613      	mov	r3, r2
 8010776:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010778:	88fb      	ldrh	r3, [r7, #6]
 801077a:	009b      	lsls	r3, r3, #2
 801077c:	4618      	mov	r0, r3
 801077e:	f001 fa53 	bl	8011c28 <pvPortMalloc>
 8010782:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d00e      	beq.n	80107a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801078a:	20a0      	movs	r0, #160	@ 0xa0
 801078c:	f001 fa4c 	bl	8011c28 <pvPortMalloc>
 8010790:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010792:	69fb      	ldr	r3, [r7, #28]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d003      	beq.n	80107a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010798:	69fb      	ldr	r3, [r7, #28]
 801079a:	697a      	ldr	r2, [r7, #20]
 801079c:	631a      	str	r2, [r3, #48]	@ 0x30
 801079e:	e005      	b.n	80107ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80107a0:	6978      	ldr	r0, [r7, #20]
 80107a2:	f001 fb0f 	bl	8011dc4 <vPortFree>
 80107a6:	e001      	b.n	80107ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80107a8:	2300      	movs	r3, #0
 80107aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80107ac:	69fb      	ldr	r3, [r7, #28]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d017      	beq.n	80107e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80107b2:	69fb      	ldr	r3, [r7, #28]
 80107b4:	2200      	movs	r2, #0
 80107b6:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80107ba:	88fa      	ldrh	r2, [r7, #6]
 80107bc:	2300      	movs	r3, #0
 80107be:	9303      	str	r3, [sp, #12]
 80107c0:	69fb      	ldr	r3, [r7, #28]
 80107c2:	9302      	str	r3, [sp, #8]
 80107c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107c6:	9301      	str	r3, [sp, #4]
 80107c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107ca:	9300      	str	r3, [sp, #0]
 80107cc:	683b      	ldr	r3, [r7, #0]
 80107ce:	68b9      	ldr	r1, [r7, #8]
 80107d0:	68f8      	ldr	r0, [r7, #12]
 80107d2:	f000 f80f 	bl	80107f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80107d6:	69f8      	ldr	r0, [r7, #28]
 80107d8:	f000 f8ae 	bl	8010938 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80107dc:	2301      	movs	r3, #1
 80107de:	61bb      	str	r3, [r7, #24]
 80107e0:	e002      	b.n	80107e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80107e2:	f04f 33ff 	mov.w	r3, #4294967295
 80107e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80107e8:	69bb      	ldr	r3, [r7, #24]
	}
 80107ea:	4618      	mov	r0, r3
 80107ec:	3720      	adds	r7, #32
 80107ee:	46bd      	mov	sp, r7
 80107f0:	bd80      	pop	{r7, pc}
	...

080107f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b088      	sub	sp, #32
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	60f8      	str	r0, [r7, #12]
 80107fc:	60b9      	str	r1, [r7, #8]
 80107fe:	607a      	str	r2, [r7, #4]
 8010800:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010804:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010806:	6879      	ldr	r1, [r7, #4]
 8010808:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801080c:	440b      	add	r3, r1
 801080e:	009b      	lsls	r3, r3, #2
 8010810:	4413      	add	r3, r2
 8010812:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010814:	69bb      	ldr	r3, [r7, #24]
 8010816:	f023 0307 	bic.w	r3, r3, #7
 801081a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801081c:	69bb      	ldr	r3, [r7, #24]
 801081e:	f003 0307 	and.w	r3, r3, #7
 8010822:	2b00      	cmp	r3, #0
 8010824:	d00d      	beq.n	8010842 <prvInitialiseNewTask+0x4e>
	__asm volatile
 8010826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801082a:	b672      	cpsid	i
 801082c:	f383 8811 	msr	BASEPRI, r3
 8010830:	f3bf 8f6f 	isb	sy
 8010834:	f3bf 8f4f 	dsb	sy
 8010838:	b662      	cpsie	i
 801083a:	617b      	str	r3, [r7, #20]
}
 801083c:	bf00      	nop
 801083e:	bf00      	nop
 8010840:	e7fd      	b.n	801083e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d01f      	beq.n	8010888 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010848:	2300      	movs	r3, #0
 801084a:	61fb      	str	r3, [r7, #28]
 801084c:	e012      	b.n	8010874 <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801084e:	68ba      	ldr	r2, [r7, #8]
 8010850:	69fb      	ldr	r3, [r7, #28]
 8010852:	4413      	add	r3, r2
 8010854:	7819      	ldrb	r1, [r3, #0]
 8010856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010858:	69fb      	ldr	r3, [r7, #28]
 801085a:	4413      	add	r3, r2
 801085c:	3334      	adds	r3, #52	@ 0x34
 801085e:	460a      	mov	r2, r1
 8010860:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010862:	68ba      	ldr	r2, [r7, #8]
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	4413      	add	r3, r2
 8010868:	781b      	ldrb	r3, [r3, #0]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d006      	beq.n	801087c <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801086e:	69fb      	ldr	r3, [r7, #28]
 8010870:	3301      	adds	r3, #1
 8010872:	61fb      	str	r3, [r7, #28]
 8010874:	69fb      	ldr	r3, [r7, #28]
 8010876:	2b0f      	cmp	r3, #15
 8010878:	d9e9      	bls.n	801084e <prvInitialiseNewTask+0x5a>
 801087a:	e000      	b.n	801087e <prvInitialiseNewTask+0x8a>
			{
				break;
 801087c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801087e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010880:	2200      	movs	r2, #0
 8010882:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010886:	e003      	b.n	8010890 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801088a:	2200      	movs	r2, #0
 801088c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010892:	2b06      	cmp	r3, #6
 8010894:	d901      	bls.n	801089a <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010896:	2306      	movs	r3, #6
 8010898:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801089a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801089c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801089e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80108a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80108a4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80108a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108a8:	2200      	movs	r2, #0
 80108aa:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80108ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ae:	3304      	adds	r3, #4
 80108b0:	4618      	mov	r0, r3
 80108b2:	f7fe fec7 	bl	800f644 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80108b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108b8:	3318      	adds	r3, #24
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7fe fec2 	bl	800f644 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80108c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80108c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108c8:	f1c3 0207 	rsb	r2, r3, #7
 80108cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80108d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80108d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80108d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108d8:	2200      	movs	r2, #0
 80108da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80108de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108e0:	2200      	movs	r2, #0
 80108e2:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80108e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108e8:	334c      	adds	r3, #76	@ 0x4c
 80108ea:	224c      	movs	r2, #76	@ 0x4c
 80108ec:	2100      	movs	r1, #0
 80108ee:	4618      	mov	r0, r3
 80108f0:	f001 fba4 	bl	801203c <memset>
 80108f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108f6:	4a0d      	ldr	r2, [pc, #52]	@ (801092c <prvInitialiseNewTask+0x138>)
 80108f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80108fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108fc:	4a0c      	ldr	r2, [pc, #48]	@ (8010930 <prvInitialiseNewTask+0x13c>)
 80108fe:	655a      	str	r2, [r3, #84]	@ 0x54
 8010900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010902:	4a0c      	ldr	r2, [pc, #48]	@ (8010934 <prvInitialiseNewTask+0x140>)
 8010904:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010906:	683a      	ldr	r2, [r7, #0]
 8010908:	68f9      	ldr	r1, [r7, #12]
 801090a:	69b8      	ldr	r0, [r7, #24]
 801090c:	f000 ff50 	bl	80117b0 <pxPortInitialiseStack>
 8010910:	4602      	mov	r2, r0
 8010912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010914:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010918:	2b00      	cmp	r3, #0
 801091a:	d002      	beq.n	8010922 <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801091c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801091e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010920:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010922:	bf00      	nop
 8010924:	3720      	adds	r7, #32
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	bf00      	nop
 801092c:	20004ab4 	.word	0x20004ab4
 8010930:	20004b1c 	.word	0x20004b1c
 8010934:	20004b84 	.word	0x20004b84

08010938 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010938:	b580      	push	{r7, lr}
 801093a:	b082      	sub	sp, #8
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010940:	f001 f844 	bl	80119cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010944:	4b2a      	ldr	r3, [pc, #168]	@ (80109f0 <prvAddNewTaskToReadyList+0xb8>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	3301      	adds	r3, #1
 801094a:	4a29      	ldr	r2, [pc, #164]	@ (80109f0 <prvAddNewTaskToReadyList+0xb8>)
 801094c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801094e:	4b29      	ldr	r3, [pc, #164]	@ (80109f4 <prvAddNewTaskToReadyList+0xbc>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d109      	bne.n	801096a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010956:	4a27      	ldr	r2, [pc, #156]	@ (80109f4 <prvAddNewTaskToReadyList+0xbc>)
 8010958:	687b      	ldr	r3, [r7, #4]
 801095a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801095c:	4b24      	ldr	r3, [pc, #144]	@ (80109f0 <prvAddNewTaskToReadyList+0xb8>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	2b01      	cmp	r3, #1
 8010962:	d110      	bne.n	8010986 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010964:	f000 fc1a 	bl	801119c <prvInitialiseTaskLists>
 8010968:	e00d      	b.n	8010986 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801096a:	4b23      	ldr	r3, [pc, #140]	@ (80109f8 <prvAddNewTaskToReadyList+0xc0>)
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d109      	bne.n	8010986 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010972:	4b20      	ldr	r3, [pc, #128]	@ (80109f4 <prvAddNewTaskToReadyList+0xbc>)
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801097c:	429a      	cmp	r2, r3
 801097e:	d802      	bhi.n	8010986 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010980:	4a1c      	ldr	r2, [pc, #112]	@ (80109f4 <prvAddNewTaskToReadyList+0xbc>)
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010986:	4b1d      	ldr	r3, [pc, #116]	@ (80109fc <prvAddNewTaskToReadyList+0xc4>)
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	3301      	adds	r3, #1
 801098c:	4a1b      	ldr	r2, [pc, #108]	@ (80109fc <prvAddNewTaskToReadyList+0xc4>)
 801098e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010994:	2201      	movs	r2, #1
 8010996:	409a      	lsls	r2, r3
 8010998:	4b19      	ldr	r3, [pc, #100]	@ (8010a00 <prvAddNewTaskToReadyList+0xc8>)
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	4313      	orrs	r3, r2
 801099e:	4a18      	ldr	r2, [pc, #96]	@ (8010a00 <prvAddNewTaskToReadyList+0xc8>)
 80109a0:	6013      	str	r3, [r2, #0]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109a6:	4613      	mov	r3, r2
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	4413      	add	r3, r2
 80109ac:	009b      	lsls	r3, r3, #2
 80109ae:	4a15      	ldr	r2, [pc, #84]	@ (8010a04 <prvAddNewTaskToReadyList+0xcc>)
 80109b0:	441a      	add	r2, r3
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	3304      	adds	r3, #4
 80109b6:	4619      	mov	r1, r3
 80109b8:	4610      	mov	r0, r2
 80109ba:	f7fe fe50 	bl	800f65e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80109be:	f001 f83b 	bl	8011a38 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80109c2:	4b0d      	ldr	r3, [pc, #52]	@ (80109f8 <prvAddNewTaskToReadyList+0xc0>)
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d00e      	beq.n	80109e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80109ca:	4b0a      	ldr	r3, [pc, #40]	@ (80109f4 <prvAddNewTaskToReadyList+0xbc>)
 80109cc:	681b      	ldr	r3, [r3, #0]
 80109ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109d4:	429a      	cmp	r2, r3
 80109d6:	d207      	bcs.n	80109e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80109d8:	4b0b      	ldr	r3, [pc, #44]	@ (8010a08 <prvAddNewTaskToReadyList+0xd0>)
 80109da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80109de:	601a      	str	r2, [r3, #0]
 80109e0:	f3bf 8f4f 	dsb	sy
 80109e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109e8:	bf00      	nop
 80109ea:	3708      	adds	r7, #8
 80109ec:	46bd      	mov	sp, r7
 80109ee:	bd80      	pop	{r7, pc}
 80109f0:	20000e68 	.word	0x20000e68
 80109f4:	20000d68 	.word	0x20000d68
 80109f8:	20000e74 	.word	0x20000e74
 80109fc:	20000e84 	.word	0x20000e84
 8010a00:	20000e70 	.word	0x20000e70
 8010a04:	20000d6c 	.word	0x20000d6c
 8010a08:	e000ed04 	.word	0xe000ed04

08010a0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010a0c:	b580      	push	{r7, lr}
 8010a0e:	b084      	sub	sp, #16
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010a14:	2300      	movs	r3, #0
 8010a16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d01a      	beq.n	8010a54 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010a1e:	4b15      	ldr	r3, [pc, #84]	@ (8010a74 <vTaskDelay+0x68>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d00d      	beq.n	8010a42 <vTaskDelay+0x36>
	__asm volatile
 8010a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010a2a:	b672      	cpsid	i
 8010a2c:	f383 8811 	msr	BASEPRI, r3
 8010a30:	f3bf 8f6f 	isb	sy
 8010a34:	f3bf 8f4f 	dsb	sy
 8010a38:	b662      	cpsie	i
 8010a3a:	60bb      	str	r3, [r7, #8]
}
 8010a3c:	bf00      	nop
 8010a3e:	bf00      	nop
 8010a40:	e7fd      	b.n	8010a3e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010a42:	f000 f889 	bl	8010b58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010a46:	2100      	movs	r1, #0
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f000 fe4b 	bl	80116e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010a4e:	f000 f891 	bl	8010b74 <xTaskResumeAll>
 8010a52:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d107      	bne.n	8010a6a <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8010a5a:	4b07      	ldr	r3, [pc, #28]	@ (8010a78 <vTaskDelay+0x6c>)
 8010a5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010a60:	601a      	str	r2, [r3, #0]
 8010a62:	f3bf 8f4f 	dsb	sy
 8010a66:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010a6a:	bf00      	nop
 8010a6c:	3710      	adds	r7, #16
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop
 8010a74:	20000e90 	.word	0x20000e90
 8010a78:	e000ed04 	.word	0xe000ed04

08010a7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010a7c:	b580      	push	{r7, lr}
 8010a7e:	b08a      	sub	sp, #40	@ 0x28
 8010a80:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010a82:	2300      	movs	r3, #0
 8010a84:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010a86:	2300      	movs	r3, #0
 8010a88:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010a8a:	463a      	mov	r2, r7
 8010a8c:	1d39      	adds	r1, r7, #4
 8010a8e:	f107 0308 	add.w	r3, r7, #8
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7f0 f84a 	bl	8000b2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010a98:	6839      	ldr	r1, [r7, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	68ba      	ldr	r2, [r7, #8]
 8010a9e:	9202      	str	r2, [sp, #8]
 8010aa0:	9301      	str	r3, [sp, #4]
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	9300      	str	r3, [sp, #0]
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	460a      	mov	r2, r1
 8010aaa:	4923      	ldr	r1, [pc, #140]	@ (8010b38 <vTaskStartScheduler+0xbc>)
 8010aac:	4823      	ldr	r0, [pc, #140]	@ (8010b3c <vTaskStartScheduler+0xc0>)
 8010aae:	f7ff fdf5 	bl	801069c <xTaskCreateStatic>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	4a22      	ldr	r2, [pc, #136]	@ (8010b40 <vTaskStartScheduler+0xc4>)
 8010ab6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010ab8:	4b21      	ldr	r3, [pc, #132]	@ (8010b40 <vTaskStartScheduler+0xc4>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	d002      	beq.n	8010ac6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010ac0:	2301      	movs	r3, #1
 8010ac2:	617b      	str	r3, [r7, #20]
 8010ac4:	e001      	b.n	8010aca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d11d      	bne.n	8010b0c <vTaskStartScheduler+0x90>
	__asm volatile
 8010ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ad4:	b672      	cpsid	i
 8010ad6:	f383 8811 	msr	BASEPRI, r3
 8010ada:	f3bf 8f6f 	isb	sy
 8010ade:	f3bf 8f4f 	dsb	sy
 8010ae2:	b662      	cpsie	i
 8010ae4:	613b      	str	r3, [r7, #16]
}
 8010ae6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010ae8:	4b16      	ldr	r3, [pc, #88]	@ (8010b44 <vTaskStartScheduler+0xc8>)
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	334c      	adds	r3, #76	@ 0x4c
 8010aee:	4a16      	ldr	r2, [pc, #88]	@ (8010b48 <vTaskStartScheduler+0xcc>)
 8010af0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010af2:	4b16      	ldr	r3, [pc, #88]	@ (8010b4c <vTaskStartScheduler+0xd0>)
 8010af4:	f04f 32ff 	mov.w	r2, #4294967295
 8010af8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010afa:	4b15      	ldr	r3, [pc, #84]	@ (8010b50 <vTaskStartScheduler+0xd4>)
 8010afc:	2201      	movs	r2, #1
 8010afe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010b00:	4b14      	ldr	r3, [pc, #80]	@ (8010b54 <vTaskStartScheduler+0xd8>)
 8010b02:	2200      	movs	r2, #0
 8010b04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010b06:	f000 fee3 	bl	80118d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010b0a:	e011      	b.n	8010b30 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010b0c:	697b      	ldr	r3, [r7, #20]
 8010b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b12:	d10d      	bne.n	8010b30 <vTaskStartScheduler+0xb4>
	__asm volatile
 8010b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b18:	b672      	cpsid	i
 8010b1a:	f383 8811 	msr	BASEPRI, r3
 8010b1e:	f3bf 8f6f 	isb	sy
 8010b22:	f3bf 8f4f 	dsb	sy
 8010b26:	b662      	cpsie	i
 8010b28:	60fb      	str	r3, [r7, #12]
}
 8010b2a:	bf00      	nop
 8010b2c:	bf00      	nop
 8010b2e:	e7fd      	b.n	8010b2c <vTaskStartScheduler+0xb0>
}
 8010b30:	bf00      	nop
 8010b32:	3718      	adds	r7, #24
 8010b34:	46bd      	mov	sp, r7
 8010b36:	bd80      	pop	{r7, pc}
 8010b38:	08012b58 	.word	0x08012b58
 8010b3c:	0801116d 	.word	0x0801116d
 8010b40:	20000e8c 	.word	0x20000e8c
 8010b44:	20000d68 	.word	0x20000d68
 8010b48:	20000044 	.word	0x20000044
 8010b4c:	20000e88 	.word	0x20000e88
 8010b50:	20000e74 	.word	0x20000e74
 8010b54:	20000e6c 	.word	0x20000e6c

08010b58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010b58:	b480      	push	{r7}
 8010b5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010b5c:	4b04      	ldr	r3, [pc, #16]	@ (8010b70 <vTaskSuspendAll+0x18>)
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	3301      	adds	r3, #1
 8010b62:	4a03      	ldr	r2, [pc, #12]	@ (8010b70 <vTaskSuspendAll+0x18>)
 8010b64:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010b66:	bf00      	nop
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr
 8010b70:	20000e90 	.word	0x20000e90

08010b74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b084      	sub	sp, #16
 8010b78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010b82:	4b43      	ldr	r3, [pc, #268]	@ (8010c90 <xTaskResumeAll+0x11c>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d10d      	bne.n	8010ba6 <xTaskResumeAll+0x32>
	__asm volatile
 8010b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b8e:	b672      	cpsid	i
 8010b90:	f383 8811 	msr	BASEPRI, r3
 8010b94:	f3bf 8f6f 	isb	sy
 8010b98:	f3bf 8f4f 	dsb	sy
 8010b9c:	b662      	cpsie	i
 8010b9e:	603b      	str	r3, [r7, #0]
}
 8010ba0:	bf00      	nop
 8010ba2:	bf00      	nop
 8010ba4:	e7fd      	b.n	8010ba2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010ba6:	f000 ff11 	bl	80119cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010baa:	4b39      	ldr	r3, [pc, #228]	@ (8010c90 <xTaskResumeAll+0x11c>)
 8010bac:	681b      	ldr	r3, [r3, #0]
 8010bae:	3b01      	subs	r3, #1
 8010bb0:	4a37      	ldr	r2, [pc, #220]	@ (8010c90 <xTaskResumeAll+0x11c>)
 8010bb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010bb4:	4b36      	ldr	r3, [pc, #216]	@ (8010c90 <xTaskResumeAll+0x11c>)
 8010bb6:	681b      	ldr	r3, [r3, #0]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d161      	bne.n	8010c80 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010bbc:	4b35      	ldr	r3, [pc, #212]	@ (8010c94 <xTaskResumeAll+0x120>)
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d05d      	beq.n	8010c80 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010bc4:	e02e      	b.n	8010c24 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bc6:	4b34      	ldr	r3, [pc, #208]	@ (8010c98 <xTaskResumeAll+0x124>)
 8010bc8:	68db      	ldr	r3, [r3, #12]
 8010bca:	68db      	ldr	r3, [r3, #12]
 8010bcc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	3318      	adds	r3, #24
 8010bd2:	4618      	mov	r0, r3
 8010bd4:	f7fe fda0 	bl	800f718 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	3304      	adds	r3, #4
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7fe fd9b 	bl	800f718 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010be6:	2201      	movs	r2, #1
 8010be8:	409a      	lsls	r2, r3
 8010bea:	4b2c      	ldr	r3, [pc, #176]	@ (8010c9c <xTaskResumeAll+0x128>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	4a2a      	ldr	r2, [pc, #168]	@ (8010c9c <xTaskResumeAll+0x128>)
 8010bf2:	6013      	str	r3, [r2, #0]
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010bf8:	4613      	mov	r3, r2
 8010bfa:	009b      	lsls	r3, r3, #2
 8010bfc:	4413      	add	r3, r2
 8010bfe:	009b      	lsls	r3, r3, #2
 8010c00:	4a27      	ldr	r2, [pc, #156]	@ (8010ca0 <xTaskResumeAll+0x12c>)
 8010c02:	441a      	add	r2, r3
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	3304      	adds	r3, #4
 8010c08:	4619      	mov	r1, r3
 8010c0a:	4610      	mov	r0, r2
 8010c0c:	f7fe fd27 	bl	800f65e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c14:	4b23      	ldr	r3, [pc, #140]	@ (8010ca4 <xTaskResumeAll+0x130>)
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d302      	bcc.n	8010c24 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8010c1e:	4b22      	ldr	r3, [pc, #136]	@ (8010ca8 <xTaskResumeAll+0x134>)
 8010c20:	2201      	movs	r2, #1
 8010c22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010c24:	4b1c      	ldr	r3, [pc, #112]	@ (8010c98 <xTaskResumeAll+0x124>)
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d1cc      	bne.n	8010bc6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d001      	beq.n	8010c36 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010c32:	f000 fb59 	bl	80112e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010c36:	4b1d      	ldr	r3, [pc, #116]	@ (8010cac <xTaskResumeAll+0x138>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d010      	beq.n	8010c64 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010c42:	f000 f859 	bl	8010cf8 <xTaskIncrementTick>
 8010c46:	4603      	mov	r3, r0
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d002      	beq.n	8010c52 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8010c4c:	4b16      	ldr	r3, [pc, #88]	@ (8010ca8 <xTaskResumeAll+0x134>)
 8010c4e:	2201      	movs	r2, #1
 8010c50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	3b01      	subs	r3, #1
 8010c56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1f1      	bne.n	8010c42 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8010c5e:	4b13      	ldr	r3, [pc, #76]	@ (8010cac <xTaskResumeAll+0x138>)
 8010c60:	2200      	movs	r2, #0
 8010c62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010c64:	4b10      	ldr	r3, [pc, #64]	@ (8010ca8 <xTaskResumeAll+0x134>)
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	2b00      	cmp	r3, #0
 8010c6a:	d009      	beq.n	8010c80 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010c70:	4b0f      	ldr	r3, [pc, #60]	@ (8010cb0 <xTaskResumeAll+0x13c>)
 8010c72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c76:	601a      	str	r2, [r3, #0]
 8010c78:	f3bf 8f4f 	dsb	sy
 8010c7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010c80:	f000 feda 	bl	8011a38 <vPortExitCritical>

	return xAlreadyYielded;
 8010c84:	68bb      	ldr	r3, [r7, #8]
}
 8010c86:	4618      	mov	r0, r3
 8010c88:	3710      	adds	r7, #16
 8010c8a:	46bd      	mov	sp, r7
 8010c8c:	bd80      	pop	{r7, pc}
 8010c8e:	bf00      	nop
 8010c90:	20000e90 	.word	0x20000e90
 8010c94:	20000e68 	.word	0x20000e68
 8010c98:	20000e28 	.word	0x20000e28
 8010c9c:	20000e70 	.word	0x20000e70
 8010ca0:	20000d6c 	.word	0x20000d6c
 8010ca4:	20000d68 	.word	0x20000d68
 8010ca8:	20000e7c 	.word	0x20000e7c
 8010cac:	20000e78 	.word	0x20000e78
 8010cb0:	e000ed04 	.word	0xe000ed04

08010cb4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	b083      	sub	sp, #12
 8010cb8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010cba:	4b05      	ldr	r3, [pc, #20]	@ (8010cd0 <xTaskGetTickCount+0x1c>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010cc0:	687b      	ldr	r3, [r7, #4]
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	370c      	adds	r7, #12
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr
 8010cce:	bf00      	nop
 8010cd0:	20000e6c 	.word	0x20000e6c

08010cd4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b082      	sub	sp, #8
 8010cd8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010cda:	f000 ff5f 	bl	8011b9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010cde:	2300      	movs	r3, #0
 8010ce0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010ce2:	4b04      	ldr	r3, [pc, #16]	@ (8010cf4 <xTaskGetTickCountFromISR+0x20>)
 8010ce4:	681b      	ldr	r3, [r3, #0]
 8010ce6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010ce8:	683b      	ldr	r3, [r7, #0]
}
 8010cea:	4618      	mov	r0, r3
 8010cec:	3708      	adds	r7, #8
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	bd80      	pop	{r7, pc}
 8010cf2:	bf00      	nop
 8010cf4:	20000e6c 	.word	0x20000e6c

08010cf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b086      	sub	sp, #24
 8010cfc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d02:	4b50      	ldr	r3, [pc, #320]	@ (8010e44 <xTaskIncrementTick+0x14c>)
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	f040 808b 	bne.w	8010e22 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010d0c:	4b4e      	ldr	r3, [pc, #312]	@ (8010e48 <xTaskIncrementTick+0x150>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	3301      	adds	r3, #1
 8010d12:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010d14:	4a4c      	ldr	r2, [pc, #304]	@ (8010e48 <xTaskIncrementTick+0x150>)
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d123      	bne.n	8010d68 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8010d20:	4b4a      	ldr	r3, [pc, #296]	@ (8010e4c <xTaskIncrementTick+0x154>)
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d00d      	beq.n	8010d46 <xTaskIncrementTick+0x4e>
	__asm volatile
 8010d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d2e:	b672      	cpsid	i
 8010d30:	f383 8811 	msr	BASEPRI, r3
 8010d34:	f3bf 8f6f 	isb	sy
 8010d38:	f3bf 8f4f 	dsb	sy
 8010d3c:	b662      	cpsie	i
 8010d3e:	603b      	str	r3, [r7, #0]
}
 8010d40:	bf00      	nop
 8010d42:	bf00      	nop
 8010d44:	e7fd      	b.n	8010d42 <xTaskIncrementTick+0x4a>
 8010d46:	4b41      	ldr	r3, [pc, #260]	@ (8010e4c <xTaskIncrementTick+0x154>)
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	60fb      	str	r3, [r7, #12]
 8010d4c:	4b40      	ldr	r3, [pc, #256]	@ (8010e50 <xTaskIncrementTick+0x158>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	4a3e      	ldr	r2, [pc, #248]	@ (8010e4c <xTaskIncrementTick+0x154>)
 8010d52:	6013      	str	r3, [r2, #0]
 8010d54:	4a3e      	ldr	r2, [pc, #248]	@ (8010e50 <xTaskIncrementTick+0x158>)
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	6013      	str	r3, [r2, #0]
 8010d5a:	4b3e      	ldr	r3, [pc, #248]	@ (8010e54 <xTaskIncrementTick+0x15c>)
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	3301      	adds	r3, #1
 8010d60:	4a3c      	ldr	r2, [pc, #240]	@ (8010e54 <xTaskIncrementTick+0x15c>)
 8010d62:	6013      	str	r3, [r2, #0]
 8010d64:	f000 fac0 	bl	80112e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010d68:	4b3b      	ldr	r3, [pc, #236]	@ (8010e58 <xTaskIncrementTick+0x160>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	693a      	ldr	r2, [r7, #16]
 8010d6e:	429a      	cmp	r2, r3
 8010d70:	d348      	bcc.n	8010e04 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010d72:	4b36      	ldr	r3, [pc, #216]	@ (8010e4c <xTaskIncrementTick+0x154>)
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d104      	bne.n	8010d86 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d7c:	4b36      	ldr	r3, [pc, #216]	@ (8010e58 <xTaskIncrementTick+0x160>)
 8010d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8010d82:	601a      	str	r2, [r3, #0]
					break;
 8010d84:	e03e      	b.n	8010e04 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d86:	4b31      	ldr	r3, [pc, #196]	@ (8010e4c <xTaskIncrementTick+0x154>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	68db      	ldr	r3, [r3, #12]
 8010d8c:	68db      	ldr	r3, [r3, #12]
 8010d8e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010d96:	693a      	ldr	r2, [r7, #16]
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d203      	bcs.n	8010da6 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010d9e:	4a2e      	ldr	r2, [pc, #184]	@ (8010e58 <xTaskIncrementTick+0x160>)
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010da4:	e02e      	b.n	8010e04 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	3304      	adds	r3, #4
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7fe fcb4 	bl	800f718 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010db0:	68bb      	ldr	r3, [r7, #8]
 8010db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d004      	beq.n	8010dc2 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010db8:	68bb      	ldr	r3, [r7, #8]
 8010dba:	3318      	adds	r3, #24
 8010dbc:	4618      	mov	r0, r3
 8010dbe:	f7fe fcab 	bl	800f718 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010dc2:	68bb      	ldr	r3, [r7, #8]
 8010dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dc6:	2201      	movs	r2, #1
 8010dc8:	409a      	lsls	r2, r3
 8010dca:	4b24      	ldr	r3, [pc, #144]	@ (8010e5c <xTaskIncrementTick+0x164>)
 8010dcc:	681b      	ldr	r3, [r3, #0]
 8010dce:	4313      	orrs	r3, r2
 8010dd0:	4a22      	ldr	r2, [pc, #136]	@ (8010e5c <xTaskIncrementTick+0x164>)
 8010dd2:	6013      	str	r3, [r2, #0]
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010dd8:	4613      	mov	r3, r2
 8010dda:	009b      	lsls	r3, r3, #2
 8010ddc:	4413      	add	r3, r2
 8010dde:	009b      	lsls	r3, r3, #2
 8010de0:	4a1f      	ldr	r2, [pc, #124]	@ (8010e60 <xTaskIncrementTick+0x168>)
 8010de2:	441a      	add	r2, r3
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	3304      	adds	r3, #4
 8010de8:	4619      	mov	r1, r3
 8010dea:	4610      	mov	r0, r2
 8010dec:	f7fe fc37 	bl	800f65e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010df4:	4b1b      	ldr	r3, [pc, #108]	@ (8010e64 <xTaskIncrementTick+0x16c>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010dfa:	429a      	cmp	r2, r3
 8010dfc:	d3b9      	bcc.n	8010d72 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010e02:	e7b6      	b.n	8010d72 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010e04:	4b17      	ldr	r3, [pc, #92]	@ (8010e64 <xTaskIncrementTick+0x16c>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010e0a:	4915      	ldr	r1, [pc, #84]	@ (8010e60 <xTaskIncrementTick+0x168>)
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	009b      	lsls	r3, r3, #2
 8010e10:	4413      	add	r3, r2
 8010e12:	009b      	lsls	r3, r3, #2
 8010e14:	440b      	add	r3, r1
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	2b01      	cmp	r3, #1
 8010e1a:	d907      	bls.n	8010e2c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8010e1c:	2301      	movs	r3, #1
 8010e1e:	617b      	str	r3, [r7, #20]
 8010e20:	e004      	b.n	8010e2c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010e22:	4b11      	ldr	r3, [pc, #68]	@ (8010e68 <xTaskIncrementTick+0x170>)
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	3301      	adds	r3, #1
 8010e28:	4a0f      	ldr	r2, [pc, #60]	@ (8010e68 <xTaskIncrementTick+0x170>)
 8010e2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8010e6c <xTaskIncrementTick+0x174>)
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d001      	beq.n	8010e38 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8010e34:	2301      	movs	r3, #1
 8010e36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010e38:	697b      	ldr	r3, [r7, #20]
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3718      	adds	r7, #24
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}
 8010e42:	bf00      	nop
 8010e44:	20000e90 	.word	0x20000e90
 8010e48:	20000e6c 	.word	0x20000e6c
 8010e4c:	20000e20 	.word	0x20000e20
 8010e50:	20000e24 	.word	0x20000e24
 8010e54:	20000e80 	.word	0x20000e80
 8010e58:	20000e88 	.word	0x20000e88
 8010e5c:	20000e70 	.word	0x20000e70
 8010e60:	20000d6c 	.word	0x20000d6c
 8010e64:	20000d68 	.word	0x20000d68
 8010e68:	20000e78 	.word	0x20000e78
 8010e6c:	20000e7c 	.word	0x20000e7c

08010e70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010e70:	b480      	push	{r7}
 8010e72:	b087      	sub	sp, #28
 8010e74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8010e76:	4b2b      	ldr	r3, [pc, #172]	@ (8010f24 <vTaskSwitchContext+0xb4>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d003      	beq.n	8010e86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8010f28 <vTaskSwitchContext+0xb8>)
 8010e80:	2201      	movs	r2, #1
 8010e82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8010e84:	e047      	b.n	8010f16 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8010e86:	4b28      	ldr	r3, [pc, #160]	@ (8010f28 <vTaskSwitchContext+0xb8>)
 8010e88:	2200      	movs	r2, #0
 8010e8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010e8c:	4b27      	ldr	r3, [pc, #156]	@ (8010f2c <vTaskSwitchContext+0xbc>)
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	fab3 f383 	clz	r3, r3
 8010e98:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010e9a:	7afb      	ldrb	r3, [r7, #11]
 8010e9c:	f1c3 031f 	rsb	r3, r3, #31
 8010ea0:	617b      	str	r3, [r7, #20]
 8010ea2:	4923      	ldr	r1, [pc, #140]	@ (8010f30 <vTaskSwitchContext+0xc0>)
 8010ea4:	697a      	ldr	r2, [r7, #20]
 8010ea6:	4613      	mov	r3, r2
 8010ea8:	009b      	lsls	r3, r3, #2
 8010eaa:	4413      	add	r3, r2
 8010eac:	009b      	lsls	r3, r3, #2
 8010eae:	440b      	add	r3, r1
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d10d      	bne.n	8010ed2 <vTaskSwitchContext+0x62>
	__asm volatile
 8010eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eba:	b672      	cpsid	i
 8010ebc:	f383 8811 	msr	BASEPRI, r3
 8010ec0:	f3bf 8f6f 	isb	sy
 8010ec4:	f3bf 8f4f 	dsb	sy
 8010ec8:	b662      	cpsie	i
 8010eca:	607b      	str	r3, [r7, #4]
}
 8010ecc:	bf00      	nop
 8010ece:	bf00      	nop
 8010ed0:	e7fd      	b.n	8010ece <vTaskSwitchContext+0x5e>
 8010ed2:	697a      	ldr	r2, [r7, #20]
 8010ed4:	4613      	mov	r3, r2
 8010ed6:	009b      	lsls	r3, r3, #2
 8010ed8:	4413      	add	r3, r2
 8010eda:	009b      	lsls	r3, r3, #2
 8010edc:	4a14      	ldr	r2, [pc, #80]	@ (8010f30 <vTaskSwitchContext+0xc0>)
 8010ede:	4413      	add	r3, r2
 8010ee0:	613b      	str	r3, [r7, #16]
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	685b      	ldr	r3, [r3, #4]
 8010ee6:	685a      	ldr	r2, [r3, #4]
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	605a      	str	r2, [r3, #4]
 8010eec:	693b      	ldr	r3, [r7, #16]
 8010eee:	685a      	ldr	r2, [r3, #4]
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	3308      	adds	r3, #8
 8010ef4:	429a      	cmp	r2, r3
 8010ef6:	d104      	bne.n	8010f02 <vTaskSwitchContext+0x92>
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	685a      	ldr	r2, [r3, #4]
 8010efe:	693b      	ldr	r3, [r7, #16]
 8010f00:	605a      	str	r2, [r3, #4]
 8010f02:	693b      	ldr	r3, [r7, #16]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	68db      	ldr	r3, [r3, #12]
 8010f08:	4a0a      	ldr	r2, [pc, #40]	@ (8010f34 <vTaskSwitchContext+0xc4>)
 8010f0a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010f0c:	4b09      	ldr	r3, [pc, #36]	@ (8010f34 <vTaskSwitchContext+0xc4>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	334c      	adds	r3, #76	@ 0x4c
 8010f12:	4a09      	ldr	r2, [pc, #36]	@ (8010f38 <vTaskSwitchContext+0xc8>)
 8010f14:	6013      	str	r3, [r2, #0]
}
 8010f16:	bf00      	nop
 8010f18:	371c      	adds	r7, #28
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f20:	4770      	bx	lr
 8010f22:	bf00      	nop
 8010f24:	20000e90 	.word	0x20000e90
 8010f28:	20000e7c 	.word	0x20000e7c
 8010f2c:	20000e70 	.word	0x20000e70
 8010f30:	20000d6c 	.word	0x20000d6c
 8010f34:	20000d68 	.word	0x20000d68
 8010f38:	20000044 	.word	0x20000044

08010f3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b084      	sub	sp, #16
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d10d      	bne.n	8010f68 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8010f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f50:	b672      	cpsid	i
 8010f52:	f383 8811 	msr	BASEPRI, r3
 8010f56:	f3bf 8f6f 	isb	sy
 8010f5a:	f3bf 8f4f 	dsb	sy
 8010f5e:	b662      	cpsie	i
 8010f60:	60fb      	str	r3, [r7, #12]
}
 8010f62:	bf00      	nop
 8010f64:	bf00      	nop
 8010f66:	e7fd      	b.n	8010f64 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8010f68:	4b07      	ldr	r3, [pc, #28]	@ (8010f88 <vTaskPlaceOnEventList+0x4c>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	3318      	adds	r3, #24
 8010f6e:	4619      	mov	r1, r3
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f7fe fb98 	bl	800f6a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010f76:	2101      	movs	r1, #1
 8010f78:	6838      	ldr	r0, [r7, #0]
 8010f7a:	f000 fbb3 	bl	80116e4 <prvAddCurrentTaskToDelayedList>
}
 8010f7e:	bf00      	nop
 8010f80:	3710      	adds	r7, #16
 8010f82:	46bd      	mov	sp, r7
 8010f84:	bd80      	pop	{r7, pc}
 8010f86:	bf00      	nop
 8010f88:	20000d68 	.word	0x20000d68

08010f8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b086      	sub	sp, #24
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8010f9c:	693b      	ldr	r3, [r7, #16]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	d10d      	bne.n	8010fbe <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8010fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fa6:	b672      	cpsid	i
 8010fa8:	f383 8811 	msr	BASEPRI, r3
 8010fac:	f3bf 8f6f 	isb	sy
 8010fb0:	f3bf 8f4f 	dsb	sy
 8010fb4:	b662      	cpsie	i
 8010fb6:	60fb      	str	r3, [r7, #12]
}
 8010fb8:	bf00      	nop
 8010fba:	bf00      	nop
 8010fbc:	e7fd      	b.n	8010fba <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8010fbe:	693b      	ldr	r3, [r7, #16]
 8010fc0:	3318      	adds	r3, #24
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	f7fe fba8 	bl	800f718 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8011040 <xTaskRemoveFromEventList+0xb4>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d11c      	bne.n	801100a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	3304      	adds	r3, #4
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7fe fb9f 	bl	800f718 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010fda:	693b      	ldr	r3, [r7, #16]
 8010fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fde:	2201      	movs	r2, #1
 8010fe0:	409a      	lsls	r2, r3
 8010fe2:	4b18      	ldr	r3, [pc, #96]	@ (8011044 <xTaskRemoveFromEventList+0xb8>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	4a16      	ldr	r2, [pc, #88]	@ (8011044 <xTaskRemoveFromEventList+0xb8>)
 8010fea:	6013      	str	r3, [r2, #0]
 8010fec:	693b      	ldr	r3, [r7, #16]
 8010fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010ff0:	4613      	mov	r3, r2
 8010ff2:	009b      	lsls	r3, r3, #2
 8010ff4:	4413      	add	r3, r2
 8010ff6:	009b      	lsls	r3, r3, #2
 8010ff8:	4a13      	ldr	r2, [pc, #76]	@ (8011048 <xTaskRemoveFromEventList+0xbc>)
 8010ffa:	441a      	add	r2, r3
 8010ffc:	693b      	ldr	r3, [r7, #16]
 8010ffe:	3304      	adds	r3, #4
 8011000:	4619      	mov	r1, r3
 8011002:	4610      	mov	r0, r2
 8011004:	f7fe fb2b 	bl	800f65e <vListInsertEnd>
 8011008:	e005      	b.n	8011016 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	3318      	adds	r3, #24
 801100e:	4619      	mov	r1, r3
 8011010:	480e      	ldr	r0, [pc, #56]	@ (801104c <xTaskRemoveFromEventList+0xc0>)
 8011012:	f7fe fb24 	bl	800f65e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011016:	693b      	ldr	r3, [r7, #16]
 8011018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801101a:	4b0d      	ldr	r3, [pc, #52]	@ (8011050 <xTaskRemoveFromEventList+0xc4>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011020:	429a      	cmp	r2, r3
 8011022:	d905      	bls.n	8011030 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011024:	2301      	movs	r3, #1
 8011026:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011028:	4b0a      	ldr	r3, [pc, #40]	@ (8011054 <xTaskRemoveFromEventList+0xc8>)
 801102a:	2201      	movs	r2, #1
 801102c:	601a      	str	r2, [r3, #0]
 801102e:	e001      	b.n	8011034 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8011030:	2300      	movs	r3, #0
 8011032:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011034:	697b      	ldr	r3, [r7, #20]
}
 8011036:	4618      	mov	r0, r3
 8011038:	3718      	adds	r7, #24
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
 801103e:	bf00      	nop
 8011040:	20000e90 	.word	0x20000e90
 8011044:	20000e70 	.word	0x20000e70
 8011048:	20000d6c 	.word	0x20000d6c
 801104c:	20000e28 	.word	0x20000e28
 8011050:	20000d68 	.word	0x20000d68
 8011054:	20000e7c 	.word	0x20000e7c

08011058 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011058:	b480      	push	{r7}
 801105a:	b083      	sub	sp, #12
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011060:	4b06      	ldr	r3, [pc, #24]	@ (801107c <vTaskInternalSetTimeOutState+0x24>)
 8011062:	681a      	ldr	r2, [r3, #0]
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011068:	4b05      	ldr	r3, [pc, #20]	@ (8011080 <vTaskInternalSetTimeOutState+0x28>)
 801106a:	681a      	ldr	r2, [r3, #0]
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	605a      	str	r2, [r3, #4]
}
 8011070:	bf00      	nop
 8011072:	370c      	adds	r7, #12
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr
 801107c:	20000e80 	.word	0x20000e80
 8011080:	20000e6c 	.word	0x20000e6c

08011084 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b088      	sub	sp, #32
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
 801108c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d10d      	bne.n	80110b0 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8011094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011098:	b672      	cpsid	i
 801109a:	f383 8811 	msr	BASEPRI, r3
 801109e:	f3bf 8f6f 	isb	sy
 80110a2:	f3bf 8f4f 	dsb	sy
 80110a6:	b662      	cpsie	i
 80110a8:	613b      	str	r3, [r7, #16]
}
 80110aa:	bf00      	nop
 80110ac:	bf00      	nop
 80110ae:	e7fd      	b.n	80110ac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80110b0:	683b      	ldr	r3, [r7, #0]
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d10d      	bne.n	80110d2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80110b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ba:	b672      	cpsid	i
 80110bc:	f383 8811 	msr	BASEPRI, r3
 80110c0:	f3bf 8f6f 	isb	sy
 80110c4:	f3bf 8f4f 	dsb	sy
 80110c8:	b662      	cpsie	i
 80110ca:	60fb      	str	r3, [r7, #12]
}
 80110cc:	bf00      	nop
 80110ce:	bf00      	nop
 80110d0:	e7fd      	b.n	80110ce <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80110d2:	f000 fc7b 	bl	80119cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80110d6:	4b1d      	ldr	r3, [pc, #116]	@ (801114c <xTaskCheckForTimeOut+0xc8>)
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	69ba      	ldr	r2, [r7, #24]
 80110e2:	1ad3      	subs	r3, r2, r3
 80110e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110ee:	d102      	bne.n	80110f6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80110f0:	2300      	movs	r3, #0
 80110f2:	61fb      	str	r3, [r7, #28]
 80110f4:	e023      	b.n	801113e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	681a      	ldr	r2, [r3, #0]
 80110fa:	4b15      	ldr	r3, [pc, #84]	@ (8011150 <xTaskCheckForTimeOut+0xcc>)
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	429a      	cmp	r2, r3
 8011100:	d007      	beq.n	8011112 <xTaskCheckForTimeOut+0x8e>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	685b      	ldr	r3, [r3, #4]
 8011106:	69ba      	ldr	r2, [r7, #24]
 8011108:	429a      	cmp	r2, r3
 801110a:	d302      	bcc.n	8011112 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801110c:	2301      	movs	r3, #1
 801110e:	61fb      	str	r3, [r7, #28]
 8011110:	e015      	b.n	801113e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	681b      	ldr	r3, [r3, #0]
 8011116:	697a      	ldr	r2, [r7, #20]
 8011118:	429a      	cmp	r2, r3
 801111a:	d20b      	bcs.n	8011134 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801111c:	683b      	ldr	r3, [r7, #0]
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	697b      	ldr	r3, [r7, #20]
 8011122:	1ad2      	subs	r2, r2, r3
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7ff ff95 	bl	8011058 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801112e:	2300      	movs	r3, #0
 8011130:	61fb      	str	r3, [r7, #28]
 8011132:	e004      	b.n	801113e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8011134:	683b      	ldr	r3, [r7, #0]
 8011136:	2200      	movs	r2, #0
 8011138:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801113a:	2301      	movs	r3, #1
 801113c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801113e:	f000 fc7b 	bl	8011a38 <vPortExitCritical>

	return xReturn;
 8011142:	69fb      	ldr	r3, [r7, #28]
}
 8011144:	4618      	mov	r0, r3
 8011146:	3720      	adds	r7, #32
 8011148:	46bd      	mov	sp, r7
 801114a:	bd80      	pop	{r7, pc}
 801114c:	20000e6c 	.word	0x20000e6c
 8011150:	20000e80 	.word	0x20000e80

08011154 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011154:	b480      	push	{r7}
 8011156:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011158:	4b03      	ldr	r3, [pc, #12]	@ (8011168 <vTaskMissedYield+0x14>)
 801115a:	2201      	movs	r2, #1
 801115c:	601a      	str	r2, [r3, #0]
}
 801115e:	bf00      	nop
 8011160:	46bd      	mov	sp, r7
 8011162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011166:	4770      	bx	lr
 8011168:	20000e7c 	.word	0x20000e7c

0801116c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801116c:	b580      	push	{r7, lr}
 801116e:	b082      	sub	sp, #8
 8011170:	af00      	add	r7, sp, #0
 8011172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011174:	f000 f852 	bl	801121c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011178:	4b06      	ldr	r3, [pc, #24]	@ (8011194 <prvIdleTask+0x28>)
 801117a:	681b      	ldr	r3, [r3, #0]
 801117c:	2b01      	cmp	r3, #1
 801117e:	d9f9      	bls.n	8011174 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011180:	4b05      	ldr	r3, [pc, #20]	@ (8011198 <prvIdleTask+0x2c>)
 8011182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011186:	601a      	str	r2, [r3, #0]
 8011188:	f3bf 8f4f 	dsb	sy
 801118c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011190:	e7f0      	b.n	8011174 <prvIdleTask+0x8>
 8011192:	bf00      	nop
 8011194:	20000d6c 	.word	0x20000d6c
 8011198:	e000ed04 	.word	0xe000ed04

0801119c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80111a2:	2300      	movs	r3, #0
 80111a4:	607b      	str	r3, [r7, #4]
 80111a6:	e00c      	b.n	80111c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80111a8:	687a      	ldr	r2, [r7, #4]
 80111aa:	4613      	mov	r3, r2
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	4413      	add	r3, r2
 80111b0:	009b      	lsls	r3, r3, #2
 80111b2:	4a12      	ldr	r2, [pc, #72]	@ (80111fc <prvInitialiseTaskLists+0x60>)
 80111b4:	4413      	add	r3, r2
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7fe fa24 	bl	800f604 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	3301      	adds	r3, #1
 80111c0:	607b      	str	r3, [r7, #4]
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	2b06      	cmp	r3, #6
 80111c6:	d9ef      	bls.n	80111a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80111c8:	480d      	ldr	r0, [pc, #52]	@ (8011200 <prvInitialiseTaskLists+0x64>)
 80111ca:	f7fe fa1b 	bl	800f604 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80111ce:	480d      	ldr	r0, [pc, #52]	@ (8011204 <prvInitialiseTaskLists+0x68>)
 80111d0:	f7fe fa18 	bl	800f604 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80111d4:	480c      	ldr	r0, [pc, #48]	@ (8011208 <prvInitialiseTaskLists+0x6c>)
 80111d6:	f7fe fa15 	bl	800f604 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80111da:	480c      	ldr	r0, [pc, #48]	@ (801120c <prvInitialiseTaskLists+0x70>)
 80111dc:	f7fe fa12 	bl	800f604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80111e0:	480b      	ldr	r0, [pc, #44]	@ (8011210 <prvInitialiseTaskLists+0x74>)
 80111e2:	f7fe fa0f 	bl	800f604 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80111e6:	4b0b      	ldr	r3, [pc, #44]	@ (8011214 <prvInitialiseTaskLists+0x78>)
 80111e8:	4a05      	ldr	r2, [pc, #20]	@ (8011200 <prvInitialiseTaskLists+0x64>)
 80111ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80111ec:	4b0a      	ldr	r3, [pc, #40]	@ (8011218 <prvInitialiseTaskLists+0x7c>)
 80111ee:	4a05      	ldr	r2, [pc, #20]	@ (8011204 <prvInitialiseTaskLists+0x68>)
 80111f0:	601a      	str	r2, [r3, #0]
}
 80111f2:	bf00      	nop
 80111f4:	3708      	adds	r7, #8
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}
 80111fa:	bf00      	nop
 80111fc:	20000d6c 	.word	0x20000d6c
 8011200:	20000df8 	.word	0x20000df8
 8011204:	20000e0c 	.word	0x20000e0c
 8011208:	20000e28 	.word	0x20000e28
 801120c:	20000e3c 	.word	0x20000e3c
 8011210:	20000e54 	.word	0x20000e54
 8011214:	20000e20 	.word	0x20000e20
 8011218:	20000e24 	.word	0x20000e24

0801121c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */

		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011222:	e019      	b.n	8011258 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011224:	f000 fbd2 	bl	80119cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011228:	4b10      	ldr	r3, [pc, #64]	@ (801126c <prvCheckTasksWaitingTermination+0x50>)
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	68db      	ldr	r3, [r3, #12]
 801122e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	3304      	adds	r3, #4
 8011234:	4618      	mov	r0, r3
 8011236:	f7fe fa6f 	bl	800f718 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801123a:	4b0d      	ldr	r3, [pc, #52]	@ (8011270 <prvCheckTasksWaitingTermination+0x54>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	3b01      	subs	r3, #1
 8011240:	4a0b      	ldr	r2, [pc, #44]	@ (8011270 <prvCheckTasksWaitingTermination+0x54>)
 8011242:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011244:	4b0b      	ldr	r3, [pc, #44]	@ (8011274 <prvCheckTasksWaitingTermination+0x58>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	3b01      	subs	r3, #1
 801124a:	4a0a      	ldr	r2, [pc, #40]	@ (8011274 <prvCheckTasksWaitingTermination+0x58>)
 801124c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801124e:	f000 fbf3 	bl	8011a38 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f000 f810 	bl	8011278 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011258:	4b06      	ldr	r3, [pc, #24]	@ (8011274 <prvCheckTasksWaitingTermination+0x58>)
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	2b00      	cmp	r3, #0
 801125e:	d1e1      	bne.n	8011224 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011260:	bf00      	nop
 8011262:	bf00      	nop
 8011264:	3708      	adds	r7, #8
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	20000e3c 	.word	0x20000e3c
 8011270:	20000e68 	.word	0x20000e68
 8011274:	20000e50 	.word	0x20000e50

08011278 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011278:	b580      	push	{r7, lr}
 801127a:	b084      	sub	sp, #16
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	334c      	adds	r3, #76	@ 0x4c
 8011284:	4618      	mov	r0, r3
 8011286:	f000 fee1 	bl	801204c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8011290:	2b00      	cmp	r3, #0
 8011292:	d108      	bne.n	80112a6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011298:	4618      	mov	r0, r3
 801129a:	f000 fd93 	bl	8011dc4 <vPortFree>
				vPortFree( pxTCB );
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f000 fd90 	bl	8011dc4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80112a4:	e01b      	b.n	80112de <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80112ac:	2b01      	cmp	r3, #1
 80112ae:	d103      	bne.n	80112b8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f000 fd87 	bl	8011dc4 <vPortFree>
	}
 80112b6:	e012      	b.n	80112de <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80112be:	2b02      	cmp	r3, #2
 80112c0:	d00d      	beq.n	80112de <prvDeleteTCB+0x66>
	__asm volatile
 80112c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112c6:	b672      	cpsid	i
 80112c8:	f383 8811 	msr	BASEPRI, r3
 80112cc:	f3bf 8f6f 	isb	sy
 80112d0:	f3bf 8f4f 	dsb	sy
 80112d4:	b662      	cpsie	i
 80112d6:	60fb      	str	r3, [r7, #12]
}
 80112d8:	bf00      	nop
 80112da:	bf00      	nop
 80112dc:	e7fd      	b.n	80112da <prvDeleteTCB+0x62>
	}
 80112de:	bf00      	nop
 80112e0:	3710      	adds	r7, #16
 80112e2:	46bd      	mov	sp, r7
 80112e4:	bd80      	pop	{r7, pc}
	...

080112e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80112e8:	b480      	push	{r7}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112ee:	4b0c      	ldr	r3, [pc, #48]	@ (8011320 <prvResetNextTaskUnblockTime+0x38>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d104      	bne.n	8011302 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80112f8:	4b0a      	ldr	r3, [pc, #40]	@ (8011324 <prvResetNextTaskUnblockTime+0x3c>)
 80112fa:	f04f 32ff 	mov.w	r2, #4294967295
 80112fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011300:	e008      	b.n	8011314 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011302:	4b07      	ldr	r3, [pc, #28]	@ (8011320 <prvResetNextTaskUnblockTime+0x38>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	68db      	ldr	r3, [r3, #12]
 8011308:	68db      	ldr	r3, [r3, #12]
 801130a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	685b      	ldr	r3, [r3, #4]
 8011310:	4a04      	ldr	r2, [pc, #16]	@ (8011324 <prvResetNextTaskUnblockTime+0x3c>)
 8011312:	6013      	str	r3, [r2, #0]
}
 8011314:	bf00      	nop
 8011316:	370c      	adds	r7, #12
 8011318:	46bd      	mov	sp, r7
 801131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131e:	4770      	bx	lr
 8011320:	20000e20 	.word	0x20000e20
 8011324:	20000e88 	.word	0x20000e88

08011328 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011328:	b480      	push	{r7}
 801132a:	b083      	sub	sp, #12
 801132c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801132e:	4b0b      	ldr	r3, [pc, #44]	@ (801135c <xTaskGetSchedulerState+0x34>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d102      	bne.n	801133c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011336:	2301      	movs	r3, #1
 8011338:	607b      	str	r3, [r7, #4]
 801133a:	e008      	b.n	801134e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801133c:	4b08      	ldr	r3, [pc, #32]	@ (8011360 <xTaskGetSchedulerState+0x38>)
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d102      	bne.n	801134a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011344:	2302      	movs	r3, #2
 8011346:	607b      	str	r3, [r7, #4]
 8011348:	e001      	b.n	801134e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801134a:	2300      	movs	r3, #0
 801134c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801134e:	687b      	ldr	r3, [r7, #4]
	}
 8011350:	4618      	mov	r0, r3
 8011352:	370c      	adds	r7, #12
 8011354:	46bd      	mov	sp, r7
 8011356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801135a:	4770      	bx	lr
 801135c:	20000e74 	.word	0x20000e74
 8011360:	20000e90 	.word	0x20000e90

08011364 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011370:	2300      	movs	r3, #0
 8011372:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d069      	beq.n	801144e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801137e:	4b36      	ldr	r3, [pc, #216]	@ (8011458 <xTaskPriorityInherit+0xf4>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011384:	429a      	cmp	r2, r3
 8011386:	d259      	bcs.n	801143c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	699b      	ldr	r3, [r3, #24]
 801138c:	2b00      	cmp	r3, #0
 801138e:	db06      	blt.n	801139e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011390:	4b31      	ldr	r3, [pc, #196]	@ (8011458 <xTaskPriorityInherit+0xf4>)
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011396:	f1c3 0207 	rsb	r2, r3, #7
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	6959      	ldr	r1, [r3, #20]
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113a6:	4613      	mov	r3, r2
 80113a8:	009b      	lsls	r3, r3, #2
 80113aa:	4413      	add	r3, r2
 80113ac:	009b      	lsls	r3, r3, #2
 80113ae:	4a2b      	ldr	r2, [pc, #172]	@ (801145c <xTaskPriorityInherit+0xf8>)
 80113b0:	4413      	add	r3, r2
 80113b2:	4299      	cmp	r1, r3
 80113b4:	d13a      	bne.n	801142c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	3304      	adds	r3, #4
 80113ba:	4618      	mov	r0, r3
 80113bc:	f7fe f9ac 	bl	800f718 <uxListRemove>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d115      	bne.n	80113f2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80113c6:	68bb      	ldr	r3, [r7, #8]
 80113c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113ca:	4924      	ldr	r1, [pc, #144]	@ (801145c <xTaskPriorityInherit+0xf8>)
 80113cc:	4613      	mov	r3, r2
 80113ce:	009b      	lsls	r3, r3, #2
 80113d0:	4413      	add	r3, r2
 80113d2:	009b      	lsls	r3, r3, #2
 80113d4:	440b      	add	r3, r1
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b00      	cmp	r3, #0
 80113da:	d10a      	bne.n	80113f2 <xTaskPriorityInherit+0x8e>
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80113e0:	2201      	movs	r2, #1
 80113e2:	fa02 f303 	lsl.w	r3, r2, r3
 80113e6:	43da      	mvns	r2, r3
 80113e8:	4b1d      	ldr	r3, [pc, #116]	@ (8011460 <xTaskPriorityInherit+0xfc>)
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	4013      	ands	r3, r2
 80113ee:	4a1c      	ldr	r2, [pc, #112]	@ (8011460 <xTaskPriorityInherit+0xfc>)
 80113f0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80113f2:	4b19      	ldr	r3, [pc, #100]	@ (8011458 <xTaskPriorityInherit+0xf4>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011400:	2201      	movs	r2, #1
 8011402:	409a      	lsls	r2, r3
 8011404:	4b16      	ldr	r3, [pc, #88]	@ (8011460 <xTaskPriorityInherit+0xfc>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	4313      	orrs	r3, r2
 801140a:	4a15      	ldr	r2, [pc, #84]	@ (8011460 <xTaskPriorityInherit+0xfc>)
 801140c:	6013      	str	r3, [r2, #0]
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011412:	4613      	mov	r3, r2
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	4413      	add	r3, r2
 8011418:	009b      	lsls	r3, r3, #2
 801141a:	4a10      	ldr	r2, [pc, #64]	@ (801145c <xTaskPriorityInherit+0xf8>)
 801141c:	441a      	add	r2, r3
 801141e:	68bb      	ldr	r3, [r7, #8]
 8011420:	3304      	adds	r3, #4
 8011422:	4619      	mov	r1, r3
 8011424:	4610      	mov	r0, r2
 8011426:	f7fe f91a 	bl	800f65e <vListInsertEnd>
 801142a:	e004      	b.n	8011436 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801142c:	4b0a      	ldr	r3, [pc, #40]	@ (8011458 <xTaskPriorityInherit+0xf4>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011432:	68bb      	ldr	r3, [r7, #8]
 8011434:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011436:	2301      	movs	r3, #1
 8011438:	60fb      	str	r3, [r7, #12]
 801143a:	e008      	b.n	801144e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011440:	4b05      	ldr	r3, [pc, #20]	@ (8011458 <xTaskPriorityInherit+0xf4>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011446:	429a      	cmp	r2, r3
 8011448:	d201      	bcs.n	801144e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801144a:	2301      	movs	r3, #1
 801144c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801144e:	68fb      	ldr	r3, [r7, #12]
	}
 8011450:	4618      	mov	r0, r3
 8011452:	3710      	adds	r7, #16
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}
 8011458:	20000d68 	.word	0x20000d68
 801145c:	20000d6c 	.word	0x20000d6c
 8011460:	20000e70 	.word	0x20000e70

08011464 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011464:	b580      	push	{r7, lr}
 8011466:	b086      	sub	sp, #24
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011470:	2300      	movs	r3, #0
 8011472:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d074      	beq.n	8011564 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801147a:	4b3d      	ldr	r3, [pc, #244]	@ (8011570 <xTaskPriorityDisinherit+0x10c>)
 801147c:	681b      	ldr	r3, [r3, #0]
 801147e:	693a      	ldr	r2, [r7, #16]
 8011480:	429a      	cmp	r2, r3
 8011482:	d00d      	beq.n	80114a0 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8011484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011488:	b672      	cpsid	i
 801148a:	f383 8811 	msr	BASEPRI, r3
 801148e:	f3bf 8f6f 	isb	sy
 8011492:	f3bf 8f4f 	dsb	sy
 8011496:	b662      	cpsie	i
 8011498:	60fb      	str	r3, [r7, #12]
}
 801149a:	bf00      	nop
 801149c:	bf00      	nop
 801149e:	e7fd      	b.n	801149c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80114a0:	693b      	ldr	r3, [r7, #16]
 80114a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d10d      	bne.n	80114c4 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80114a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114ac:	b672      	cpsid	i
 80114ae:	f383 8811 	msr	BASEPRI, r3
 80114b2:	f3bf 8f6f 	isb	sy
 80114b6:	f3bf 8f4f 	dsb	sy
 80114ba:	b662      	cpsie	i
 80114bc:	60bb      	str	r3, [r7, #8]
}
 80114be:	bf00      	nop
 80114c0:	bf00      	nop
 80114c2:	e7fd      	b.n	80114c0 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80114c8:	1e5a      	subs	r2, r3, #1
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80114d6:	429a      	cmp	r2, r3
 80114d8:	d044      	beq.n	8011564 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80114da:	693b      	ldr	r3, [r7, #16]
 80114dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d140      	bne.n	8011564 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	3304      	adds	r3, #4
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7fe f916 	bl	800f718 <uxListRemove>
 80114ec:	4603      	mov	r3, r0
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d115      	bne.n	801151e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80114f6:	491f      	ldr	r1, [pc, #124]	@ (8011574 <xTaskPriorityDisinherit+0x110>)
 80114f8:	4613      	mov	r3, r2
 80114fa:	009b      	lsls	r3, r3, #2
 80114fc:	4413      	add	r3, r2
 80114fe:	009b      	lsls	r3, r3, #2
 8011500:	440b      	add	r3, r1
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d10a      	bne.n	801151e <xTaskPriorityDisinherit+0xba>
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801150c:	2201      	movs	r2, #1
 801150e:	fa02 f303 	lsl.w	r3, r2, r3
 8011512:	43da      	mvns	r2, r3
 8011514:	4b18      	ldr	r3, [pc, #96]	@ (8011578 <xTaskPriorityDisinherit+0x114>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	4013      	ands	r3, r2
 801151a:	4a17      	ldr	r2, [pc, #92]	@ (8011578 <xTaskPriorityDisinherit+0x114>)
 801151c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801151e:	693b      	ldr	r3, [r7, #16]
 8011520:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011522:	693b      	ldr	r3, [r7, #16]
 8011524:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011526:	693b      	ldr	r3, [r7, #16]
 8011528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801152a:	f1c3 0207 	rsb	r2, r3, #7
 801152e:	693b      	ldr	r3, [r7, #16]
 8011530:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011536:	2201      	movs	r2, #1
 8011538:	409a      	lsls	r2, r3
 801153a:	4b0f      	ldr	r3, [pc, #60]	@ (8011578 <xTaskPriorityDisinherit+0x114>)
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	4313      	orrs	r3, r2
 8011540:	4a0d      	ldr	r2, [pc, #52]	@ (8011578 <xTaskPriorityDisinherit+0x114>)
 8011542:	6013      	str	r3, [r2, #0]
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011548:	4613      	mov	r3, r2
 801154a:	009b      	lsls	r3, r3, #2
 801154c:	4413      	add	r3, r2
 801154e:	009b      	lsls	r3, r3, #2
 8011550:	4a08      	ldr	r2, [pc, #32]	@ (8011574 <xTaskPriorityDisinherit+0x110>)
 8011552:	441a      	add	r2, r3
 8011554:	693b      	ldr	r3, [r7, #16]
 8011556:	3304      	adds	r3, #4
 8011558:	4619      	mov	r1, r3
 801155a:	4610      	mov	r0, r2
 801155c:	f7fe f87f 	bl	800f65e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011560:	2301      	movs	r3, #1
 8011562:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011564:	697b      	ldr	r3, [r7, #20]
	}
 8011566:	4618      	mov	r0, r3
 8011568:	3718      	adds	r7, #24
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}
 801156e:	bf00      	nop
 8011570:	20000d68 	.word	0x20000d68
 8011574:	20000d6c 	.word	0x20000d6c
 8011578:	20000e70 	.word	0x20000e70

0801157c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801157c:	b580      	push	{r7, lr}
 801157e:	b088      	sub	sp, #32
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
 8011584:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801158a:	2301      	movs	r3, #1
 801158c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	2b00      	cmp	r3, #0
 8011592:	f000 8089 	beq.w	80116a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011596:	69bb      	ldr	r3, [r7, #24]
 8011598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801159a:	2b00      	cmp	r3, #0
 801159c:	d10d      	bne.n	80115ba <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 801159e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115a2:	b672      	cpsid	i
 80115a4:	f383 8811 	msr	BASEPRI, r3
 80115a8:	f3bf 8f6f 	isb	sy
 80115ac:	f3bf 8f4f 	dsb	sy
 80115b0:	b662      	cpsie	i
 80115b2:	60fb      	str	r3, [r7, #12]
}
 80115b4:	bf00      	nop
 80115b6:	bf00      	nop
 80115b8:	e7fd      	b.n	80115b6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80115ba:	69bb      	ldr	r3, [r7, #24]
 80115bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115be:	683a      	ldr	r2, [r7, #0]
 80115c0:	429a      	cmp	r2, r3
 80115c2:	d902      	bls.n	80115ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	61fb      	str	r3, [r7, #28]
 80115c8:	e002      	b.n	80115d0 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80115ca:	69bb      	ldr	r3, [r7, #24]
 80115cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80115ce:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80115d0:	69bb      	ldr	r3, [r7, #24]
 80115d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115d4:	69fa      	ldr	r2, [r7, #28]
 80115d6:	429a      	cmp	r2, r3
 80115d8:	d066      	beq.n	80116a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80115da:	69bb      	ldr	r3, [r7, #24]
 80115dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80115de:	697a      	ldr	r2, [r7, #20]
 80115e0:	429a      	cmp	r2, r3
 80115e2:	d161      	bne.n	80116a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80115e4:	4b32      	ldr	r3, [pc, #200]	@ (80116b0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	69ba      	ldr	r2, [r7, #24]
 80115ea:	429a      	cmp	r2, r3
 80115ec:	d10d      	bne.n	801160a <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 80115ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115f2:	b672      	cpsid	i
 80115f4:	f383 8811 	msr	BASEPRI, r3
 80115f8:	f3bf 8f6f 	isb	sy
 80115fc:	f3bf 8f4f 	dsb	sy
 8011600:	b662      	cpsie	i
 8011602:	60bb      	str	r3, [r7, #8]
}
 8011604:	bf00      	nop
 8011606:	bf00      	nop
 8011608:	e7fd      	b.n	8011606 <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801160e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011610:	69bb      	ldr	r3, [r7, #24]
 8011612:	69fa      	ldr	r2, [r7, #28]
 8011614:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011616:	69bb      	ldr	r3, [r7, #24]
 8011618:	699b      	ldr	r3, [r3, #24]
 801161a:	2b00      	cmp	r3, #0
 801161c:	db04      	blt.n	8011628 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801161e:	69fb      	ldr	r3, [r7, #28]
 8011620:	f1c3 0207 	rsb	r2, r3, #7
 8011624:	69bb      	ldr	r3, [r7, #24]
 8011626:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011628:	69bb      	ldr	r3, [r7, #24]
 801162a:	6959      	ldr	r1, [r3, #20]
 801162c:	693a      	ldr	r2, [r7, #16]
 801162e:	4613      	mov	r3, r2
 8011630:	009b      	lsls	r3, r3, #2
 8011632:	4413      	add	r3, r2
 8011634:	009b      	lsls	r3, r3, #2
 8011636:	4a1f      	ldr	r2, [pc, #124]	@ (80116b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011638:	4413      	add	r3, r2
 801163a:	4299      	cmp	r1, r3
 801163c:	d134      	bne.n	80116a8 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801163e:	69bb      	ldr	r3, [r7, #24]
 8011640:	3304      	adds	r3, #4
 8011642:	4618      	mov	r0, r3
 8011644:	f7fe f868 	bl	800f718 <uxListRemove>
 8011648:	4603      	mov	r3, r0
 801164a:	2b00      	cmp	r3, #0
 801164c:	d115      	bne.n	801167a <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801164e:	69bb      	ldr	r3, [r7, #24]
 8011650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011652:	4918      	ldr	r1, [pc, #96]	@ (80116b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011654:	4613      	mov	r3, r2
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	4413      	add	r3, r2
 801165a:	009b      	lsls	r3, r3, #2
 801165c:	440b      	add	r3, r1
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	2b00      	cmp	r3, #0
 8011662:	d10a      	bne.n	801167a <vTaskPriorityDisinheritAfterTimeout+0xfe>
 8011664:	69bb      	ldr	r3, [r7, #24]
 8011666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011668:	2201      	movs	r2, #1
 801166a:	fa02 f303 	lsl.w	r3, r2, r3
 801166e:	43da      	mvns	r2, r3
 8011670:	4b11      	ldr	r3, [pc, #68]	@ (80116b8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	4013      	ands	r3, r2
 8011676:	4a10      	ldr	r2, [pc, #64]	@ (80116b8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011678:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801167e:	2201      	movs	r2, #1
 8011680:	409a      	lsls	r2, r3
 8011682:	4b0d      	ldr	r3, [pc, #52]	@ (80116b8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	4313      	orrs	r3, r2
 8011688:	4a0b      	ldr	r2, [pc, #44]	@ (80116b8 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 801168a:	6013      	str	r3, [r2, #0]
 801168c:	69bb      	ldr	r3, [r7, #24]
 801168e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011690:	4613      	mov	r3, r2
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	4413      	add	r3, r2
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	4a06      	ldr	r2, [pc, #24]	@ (80116b4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801169a:	441a      	add	r2, r3
 801169c:	69bb      	ldr	r3, [r7, #24]
 801169e:	3304      	adds	r3, #4
 80116a0:	4619      	mov	r1, r3
 80116a2:	4610      	mov	r0, r2
 80116a4:	f7fd ffdb 	bl	800f65e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80116a8:	bf00      	nop
 80116aa:	3720      	adds	r7, #32
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}
 80116b0:	20000d68 	.word	0x20000d68
 80116b4:	20000d6c 	.word	0x20000d6c
 80116b8:	20000e70 	.word	0x20000e70

080116bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80116bc:	b480      	push	{r7}
 80116be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80116c0:	4b07      	ldr	r3, [pc, #28]	@ (80116e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d004      	beq.n	80116d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80116c8:	4b05      	ldr	r3, [pc, #20]	@ (80116e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80116ce:	3201      	adds	r2, #1
 80116d0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80116d2:	4b03      	ldr	r3, [pc, #12]	@ (80116e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80116d4:	681b      	ldr	r3, [r3, #0]
	}
 80116d6:	4618      	mov	r0, r3
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr
 80116e0:	20000d68 	.word	0x20000d68

080116e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b084      	sub	sp, #16
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80116ee:	4b29      	ldr	r3, [pc, #164]	@ (8011794 <prvAddCurrentTaskToDelayedList+0xb0>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80116f4:	4b28      	ldr	r3, [pc, #160]	@ (8011798 <prvAddCurrentTaskToDelayedList+0xb4>)
 80116f6:	681b      	ldr	r3, [r3, #0]
 80116f8:	3304      	adds	r3, #4
 80116fa:	4618      	mov	r0, r3
 80116fc:	f7fe f80c 	bl	800f718 <uxListRemove>
 8011700:	4603      	mov	r3, r0
 8011702:	2b00      	cmp	r3, #0
 8011704:	d10b      	bne.n	801171e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011706:	4b24      	ldr	r3, [pc, #144]	@ (8011798 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801170c:	2201      	movs	r2, #1
 801170e:	fa02 f303 	lsl.w	r3, r2, r3
 8011712:	43da      	mvns	r2, r3
 8011714:	4b21      	ldr	r3, [pc, #132]	@ (801179c <prvAddCurrentTaskToDelayedList+0xb8>)
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	4013      	ands	r3, r2
 801171a:	4a20      	ldr	r2, [pc, #128]	@ (801179c <prvAddCurrentTaskToDelayedList+0xb8>)
 801171c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011724:	d10a      	bne.n	801173c <prvAddCurrentTaskToDelayedList+0x58>
 8011726:	683b      	ldr	r3, [r7, #0]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d007      	beq.n	801173c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801172c:	4b1a      	ldr	r3, [pc, #104]	@ (8011798 <prvAddCurrentTaskToDelayedList+0xb4>)
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	3304      	adds	r3, #4
 8011732:	4619      	mov	r1, r3
 8011734:	481a      	ldr	r0, [pc, #104]	@ (80117a0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8011736:	f7fd ff92 	bl	800f65e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801173a:	e026      	b.n	801178a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801173c:	68fa      	ldr	r2, [r7, #12]
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	4413      	add	r3, r2
 8011742:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011744:	4b14      	ldr	r3, [pc, #80]	@ (8011798 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	68ba      	ldr	r2, [r7, #8]
 801174a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801174c:	68ba      	ldr	r2, [r7, #8]
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	429a      	cmp	r2, r3
 8011752:	d209      	bcs.n	8011768 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011754:	4b13      	ldr	r3, [pc, #76]	@ (80117a4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8011756:	681a      	ldr	r2, [r3, #0]
 8011758:	4b0f      	ldr	r3, [pc, #60]	@ (8011798 <prvAddCurrentTaskToDelayedList+0xb4>)
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	3304      	adds	r3, #4
 801175e:	4619      	mov	r1, r3
 8011760:	4610      	mov	r0, r2
 8011762:	f7fd ffa0 	bl	800f6a6 <vListInsert>
}
 8011766:	e010      	b.n	801178a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011768:	4b0f      	ldr	r3, [pc, #60]	@ (80117a8 <prvAddCurrentTaskToDelayedList+0xc4>)
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	4b0a      	ldr	r3, [pc, #40]	@ (8011798 <prvAddCurrentTaskToDelayedList+0xb4>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	3304      	adds	r3, #4
 8011772:	4619      	mov	r1, r3
 8011774:	4610      	mov	r0, r2
 8011776:	f7fd ff96 	bl	800f6a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801177a:	4b0c      	ldr	r3, [pc, #48]	@ (80117ac <prvAddCurrentTaskToDelayedList+0xc8>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	68ba      	ldr	r2, [r7, #8]
 8011780:	429a      	cmp	r2, r3
 8011782:	d202      	bcs.n	801178a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011784:	4a09      	ldr	r2, [pc, #36]	@ (80117ac <prvAddCurrentTaskToDelayedList+0xc8>)
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	6013      	str	r3, [r2, #0]
}
 801178a:	bf00      	nop
 801178c:	3710      	adds	r7, #16
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
 8011792:	bf00      	nop
 8011794:	20000e6c 	.word	0x20000e6c
 8011798:	20000d68 	.word	0x20000d68
 801179c:	20000e70 	.word	0x20000e70
 80117a0:	20000e54 	.word	0x20000e54
 80117a4:	20000e24 	.word	0x20000e24
 80117a8:	20000e20 	.word	0x20000e20
 80117ac:	20000e88 	.word	0x20000e88

080117b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80117b0:	b480      	push	{r7}
 80117b2:	b085      	sub	sp, #20
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	60f8      	str	r0, [r7, #12]
 80117b8:	60b9      	str	r1, [r7, #8]
 80117ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	3b04      	subs	r3, #4
 80117c0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80117c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	3b04      	subs	r3, #4
 80117ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80117d0:	68bb      	ldr	r3, [r7, #8]
 80117d2:	f023 0201 	bic.w	r2, r3, #1
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	3b04      	subs	r3, #4
 80117de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80117e0:	4a0c      	ldr	r2, [pc, #48]	@ (8011814 <pxPortInitialiseStack+0x64>)
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	3b14      	subs	r3, #20
 80117ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80117f2:	68fb      	ldr	r3, [r7, #12]
 80117f4:	3b04      	subs	r3, #4
 80117f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	f06f 0202 	mvn.w	r2, #2
 80117fe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	3b20      	subs	r3, #32
 8011804:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011806:	68fb      	ldr	r3, [r7, #12]
}
 8011808:	4618      	mov	r0, r3
 801180a:	3714      	adds	r7, #20
 801180c:	46bd      	mov	sp, r7
 801180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011812:	4770      	bx	lr
 8011814:	08011819 	.word	0x08011819

08011818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011818:	b480      	push	{r7}
 801181a:	b085      	sub	sp, #20
 801181c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801181e:	2300      	movs	r3, #0
 8011820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8011822:	4b15      	ldr	r3, [pc, #84]	@ (8011878 <prvTaskExitError+0x60>)
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801182a:	d00d      	beq.n	8011848 <prvTaskExitError+0x30>
	__asm volatile
 801182c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011830:	b672      	cpsid	i
 8011832:	f383 8811 	msr	BASEPRI, r3
 8011836:	f3bf 8f6f 	isb	sy
 801183a:	f3bf 8f4f 	dsb	sy
 801183e:	b662      	cpsie	i
 8011840:	60fb      	str	r3, [r7, #12]
}
 8011842:	bf00      	nop
 8011844:	bf00      	nop
 8011846:	e7fd      	b.n	8011844 <prvTaskExitError+0x2c>
	__asm volatile
 8011848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801184c:	b672      	cpsid	i
 801184e:	f383 8811 	msr	BASEPRI, r3
 8011852:	f3bf 8f6f 	isb	sy
 8011856:	f3bf 8f4f 	dsb	sy
 801185a:	b662      	cpsie	i
 801185c:	60bb      	str	r3, [r7, #8]
}
 801185e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011860:	bf00      	nop
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d0fc      	beq.n	8011862 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011868:	bf00      	nop
 801186a:	bf00      	nop
 801186c:	3714      	adds	r7, #20
 801186e:	46bd      	mov	sp, r7
 8011870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011874:	4770      	bx	lr
 8011876:	bf00      	nop
 8011878:	20000040 	.word	0x20000040
 801187c:	00000000 	.word	0x00000000

08011880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011880:	4b07      	ldr	r3, [pc, #28]	@ (80118a0 <pxCurrentTCBConst2>)
 8011882:	6819      	ldr	r1, [r3, #0]
 8011884:	6808      	ldr	r0, [r1, #0]
 8011886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801188a:	f380 8809 	msr	PSP, r0
 801188e:	f3bf 8f6f 	isb	sy
 8011892:	f04f 0000 	mov.w	r0, #0
 8011896:	f380 8811 	msr	BASEPRI, r0
 801189a:	4770      	bx	lr
 801189c:	f3af 8000 	nop.w

080118a0 <pxCurrentTCBConst2>:
 80118a0:	20000d68 	.word	0x20000d68
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80118a4:	bf00      	nop
 80118a6:	bf00      	nop

080118a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80118a8:	4808      	ldr	r0, [pc, #32]	@ (80118cc <prvPortStartFirstTask+0x24>)
 80118aa:	6800      	ldr	r0, [r0, #0]
 80118ac:	6800      	ldr	r0, [r0, #0]
 80118ae:	f380 8808 	msr	MSP, r0
 80118b2:	f04f 0000 	mov.w	r0, #0
 80118b6:	f380 8814 	msr	CONTROL, r0
 80118ba:	b662      	cpsie	i
 80118bc:	b661      	cpsie	f
 80118be:	f3bf 8f4f 	dsb	sy
 80118c2:	f3bf 8f6f 	isb	sy
 80118c6:	df00      	svc	0
 80118c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80118ca:	bf00      	nop
 80118cc:	e000ed08 	.word	0xe000ed08

080118d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b084      	sub	sp, #16
 80118d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80118d6:	4b37      	ldr	r3, [pc, #220]	@ (80119b4 <xPortStartScheduler+0xe4>)
 80118d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	781b      	ldrb	r3, [r3, #0]
 80118de:	b2db      	uxtb	r3, r3
 80118e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	22ff      	movs	r2, #255	@ 0xff
 80118e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	781b      	ldrb	r3, [r3, #0]
 80118ec:	b2db      	uxtb	r3, r3
 80118ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80118f0:	78fb      	ldrb	r3, [r7, #3]
 80118f2:	b2db      	uxtb	r3, r3
 80118f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80118f8:	b2da      	uxtb	r2, r3
 80118fa:	4b2f      	ldr	r3, [pc, #188]	@ (80119b8 <xPortStartScheduler+0xe8>)
 80118fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80118fe:	4b2f      	ldr	r3, [pc, #188]	@ (80119bc <xPortStartScheduler+0xec>)
 8011900:	2207      	movs	r2, #7
 8011902:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011904:	e009      	b.n	801191a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011906:	4b2d      	ldr	r3, [pc, #180]	@ (80119bc <xPortStartScheduler+0xec>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	3b01      	subs	r3, #1
 801190c:	4a2b      	ldr	r2, [pc, #172]	@ (80119bc <xPortStartScheduler+0xec>)
 801190e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011910:	78fb      	ldrb	r3, [r7, #3]
 8011912:	b2db      	uxtb	r3, r3
 8011914:	005b      	lsls	r3, r3, #1
 8011916:	b2db      	uxtb	r3, r3
 8011918:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801191a:	78fb      	ldrb	r3, [r7, #3]
 801191c:	b2db      	uxtb	r3, r3
 801191e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011922:	2b80      	cmp	r3, #128	@ 0x80
 8011924:	d0ef      	beq.n	8011906 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011926:	4b25      	ldr	r3, [pc, #148]	@ (80119bc <xPortStartScheduler+0xec>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	f1c3 0307 	rsb	r3, r3, #7
 801192e:	2b04      	cmp	r3, #4
 8011930:	d00d      	beq.n	801194e <xPortStartScheduler+0x7e>
	__asm volatile
 8011932:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011936:	b672      	cpsid	i
 8011938:	f383 8811 	msr	BASEPRI, r3
 801193c:	f3bf 8f6f 	isb	sy
 8011940:	f3bf 8f4f 	dsb	sy
 8011944:	b662      	cpsie	i
 8011946:	60bb      	str	r3, [r7, #8]
}
 8011948:	bf00      	nop
 801194a:	bf00      	nop
 801194c:	e7fd      	b.n	801194a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801194e:	4b1b      	ldr	r3, [pc, #108]	@ (80119bc <xPortStartScheduler+0xec>)
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	021b      	lsls	r3, r3, #8
 8011954:	4a19      	ldr	r2, [pc, #100]	@ (80119bc <xPortStartScheduler+0xec>)
 8011956:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011958:	4b18      	ldr	r3, [pc, #96]	@ (80119bc <xPortStartScheduler+0xec>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8011960:	4a16      	ldr	r2, [pc, #88]	@ (80119bc <xPortStartScheduler+0xec>)
 8011962:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	b2da      	uxtb	r2, r3
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801196c:	4b14      	ldr	r3, [pc, #80]	@ (80119c0 <xPortStartScheduler+0xf0>)
 801196e:	681b      	ldr	r3, [r3, #0]
 8011970:	4a13      	ldr	r2, [pc, #76]	@ (80119c0 <xPortStartScheduler+0xf0>)
 8011972:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8011976:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011978:	4b11      	ldr	r3, [pc, #68]	@ (80119c0 <xPortStartScheduler+0xf0>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	4a10      	ldr	r2, [pc, #64]	@ (80119c0 <xPortStartScheduler+0xf0>)
 801197e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8011982:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011984:	f000 f8dc 	bl	8011b40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011988:	4b0e      	ldr	r3, [pc, #56]	@ (80119c4 <xPortStartScheduler+0xf4>)
 801198a:	2200      	movs	r2, #0
 801198c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801198e:	f000 f8fb 	bl	8011b88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011992:	4b0d      	ldr	r3, [pc, #52]	@ (80119c8 <xPortStartScheduler+0xf8>)
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	4a0c      	ldr	r2, [pc, #48]	@ (80119c8 <xPortStartScheduler+0xf8>)
 8011998:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801199c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801199e:	f7ff ff83 	bl	80118a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80119a2:	f7ff fa65 	bl	8010e70 <vTaskSwitchContext>
	prvTaskExitError();
 80119a6:	f7ff ff37 	bl	8011818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80119aa:	2300      	movs	r3, #0
}
 80119ac:	4618      	mov	r0, r3
 80119ae:	3710      	adds	r7, #16
 80119b0:	46bd      	mov	sp, r7
 80119b2:	bd80      	pop	{r7, pc}
 80119b4:	e000e400 	.word	0xe000e400
 80119b8:	20000e94 	.word	0x20000e94
 80119bc:	20000e98 	.word	0x20000e98
 80119c0:	e000ed20 	.word	0xe000ed20
 80119c4:	20000040 	.word	0x20000040
 80119c8:	e000ef34 	.word	0xe000ef34

080119cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80119cc:	b480      	push	{r7}
 80119ce:	b083      	sub	sp, #12
 80119d0:	af00      	add	r7, sp, #0
	__asm volatile
 80119d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119d6:	b672      	cpsid	i
 80119d8:	f383 8811 	msr	BASEPRI, r3
 80119dc:	f3bf 8f6f 	isb	sy
 80119e0:	f3bf 8f4f 	dsb	sy
 80119e4:	b662      	cpsie	i
 80119e6:	607b      	str	r3, [r7, #4]
}
 80119e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80119ea:	4b11      	ldr	r3, [pc, #68]	@ (8011a30 <vPortEnterCritical+0x64>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	3301      	adds	r3, #1
 80119f0:	4a0f      	ldr	r2, [pc, #60]	@ (8011a30 <vPortEnterCritical+0x64>)
 80119f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80119f4:	4b0e      	ldr	r3, [pc, #56]	@ (8011a30 <vPortEnterCritical+0x64>)
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	2b01      	cmp	r3, #1
 80119fa:	d112      	bne.n	8011a22 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80119fc:	4b0d      	ldr	r3, [pc, #52]	@ (8011a34 <vPortEnterCritical+0x68>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	b2db      	uxtb	r3, r3
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d00d      	beq.n	8011a22 <vPortEnterCritical+0x56>
	__asm volatile
 8011a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a0a:	b672      	cpsid	i
 8011a0c:	f383 8811 	msr	BASEPRI, r3
 8011a10:	f3bf 8f6f 	isb	sy
 8011a14:	f3bf 8f4f 	dsb	sy
 8011a18:	b662      	cpsie	i
 8011a1a:	603b      	str	r3, [r7, #0]
}
 8011a1c:	bf00      	nop
 8011a1e:	bf00      	nop
 8011a20:	e7fd      	b.n	8011a1e <vPortEnterCritical+0x52>
	}
}
 8011a22:	bf00      	nop
 8011a24:	370c      	adds	r7, #12
 8011a26:	46bd      	mov	sp, r7
 8011a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2c:	4770      	bx	lr
 8011a2e:	bf00      	nop
 8011a30:	20000040 	.word	0x20000040
 8011a34:	e000ed04 	.word	0xe000ed04

08011a38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011a38:	b480      	push	{r7}
 8011a3a:	b083      	sub	sp, #12
 8011a3c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011a3e:	4b13      	ldr	r3, [pc, #76]	@ (8011a8c <vPortExitCritical+0x54>)
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d10d      	bne.n	8011a62 <vPortExitCritical+0x2a>
	__asm volatile
 8011a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a4a:	b672      	cpsid	i
 8011a4c:	f383 8811 	msr	BASEPRI, r3
 8011a50:	f3bf 8f6f 	isb	sy
 8011a54:	f3bf 8f4f 	dsb	sy
 8011a58:	b662      	cpsie	i
 8011a5a:	607b      	str	r3, [r7, #4]
}
 8011a5c:	bf00      	nop
 8011a5e:	bf00      	nop
 8011a60:	e7fd      	b.n	8011a5e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8011a62:	4b0a      	ldr	r3, [pc, #40]	@ (8011a8c <vPortExitCritical+0x54>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	3b01      	subs	r3, #1
 8011a68:	4a08      	ldr	r2, [pc, #32]	@ (8011a8c <vPortExitCritical+0x54>)
 8011a6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011a6c:	4b07      	ldr	r3, [pc, #28]	@ (8011a8c <vPortExitCritical+0x54>)
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d105      	bne.n	8011a80 <vPortExitCritical+0x48>
 8011a74:	2300      	movs	r3, #0
 8011a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011a78:	683b      	ldr	r3, [r7, #0]
 8011a7a:	f383 8811 	msr	BASEPRI, r3
}
 8011a7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011a80:	bf00      	nop
 8011a82:	370c      	adds	r7, #12
 8011a84:	46bd      	mov	sp, r7
 8011a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a8a:	4770      	bx	lr
 8011a8c:	20000040 	.word	0x20000040

08011a90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011a90:	f3ef 8009 	mrs	r0, PSP
 8011a94:	f3bf 8f6f 	isb	sy
 8011a98:	4b15      	ldr	r3, [pc, #84]	@ (8011af0 <pxCurrentTCBConst>)
 8011a9a:	681a      	ldr	r2, [r3, #0]
 8011a9c:	f01e 0f10 	tst.w	lr, #16
 8011aa0:	bf08      	it	eq
 8011aa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011aa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aaa:	6010      	str	r0, [r2, #0]
 8011aac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011ab0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8011ab4:	b672      	cpsid	i
 8011ab6:	f380 8811 	msr	BASEPRI, r0
 8011aba:	f3bf 8f4f 	dsb	sy
 8011abe:	f3bf 8f6f 	isb	sy
 8011ac2:	b662      	cpsie	i
 8011ac4:	f7ff f9d4 	bl	8010e70 <vTaskSwitchContext>
 8011ac8:	f04f 0000 	mov.w	r0, #0
 8011acc:	f380 8811 	msr	BASEPRI, r0
 8011ad0:	bc09      	pop	{r0, r3}
 8011ad2:	6819      	ldr	r1, [r3, #0]
 8011ad4:	6808      	ldr	r0, [r1, #0]
 8011ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ada:	f01e 0f10 	tst.w	lr, #16
 8011ade:	bf08      	it	eq
 8011ae0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011ae4:	f380 8809 	msr	PSP, r0
 8011ae8:	f3bf 8f6f 	isb	sy
 8011aec:	4770      	bx	lr
 8011aee:	bf00      	nop

08011af0 <pxCurrentTCBConst>:
 8011af0:	20000d68 	.word	0x20000d68
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011af4:	bf00      	nop
 8011af6:	bf00      	nop

08011af8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011af8:	b580      	push	{r7, lr}
 8011afa:	b082      	sub	sp, #8
 8011afc:	af00      	add	r7, sp, #0
	__asm volatile
 8011afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b02:	b672      	cpsid	i
 8011b04:	f383 8811 	msr	BASEPRI, r3
 8011b08:	f3bf 8f6f 	isb	sy
 8011b0c:	f3bf 8f4f 	dsb	sy
 8011b10:	b662      	cpsie	i
 8011b12:	607b      	str	r3, [r7, #4]
}
 8011b14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011b16:	f7ff f8ef 	bl	8010cf8 <xTaskIncrementTick>
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d003      	beq.n	8011b28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011b20:	4b06      	ldr	r3, [pc, #24]	@ (8011b3c <SysTick_Handler+0x44>)
 8011b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b26:	601a      	str	r2, [r3, #0]
 8011b28:	2300      	movs	r3, #0
 8011b2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	f383 8811 	msr	BASEPRI, r3
}
 8011b32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011b34:	bf00      	nop
 8011b36:	3708      	adds	r7, #8
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}
 8011b3c:	e000ed04 	.word	0xe000ed04

08011b40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011b40:	b480      	push	{r7}
 8011b42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011b44:	4b0b      	ldr	r3, [pc, #44]	@ (8011b74 <vPortSetupTimerInterrupt+0x34>)
 8011b46:	2200      	movs	r2, #0
 8011b48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8011b78 <vPortSetupTimerInterrupt+0x38>)
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011b50:	4b0a      	ldr	r3, [pc, #40]	@ (8011b7c <vPortSetupTimerInterrupt+0x3c>)
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	4a0a      	ldr	r2, [pc, #40]	@ (8011b80 <vPortSetupTimerInterrupt+0x40>)
 8011b56:	fba2 2303 	umull	r2, r3, r2, r3
 8011b5a:	099b      	lsrs	r3, r3, #6
 8011b5c:	4a09      	ldr	r2, [pc, #36]	@ (8011b84 <vPortSetupTimerInterrupt+0x44>)
 8011b5e:	3b01      	subs	r3, #1
 8011b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011b62:	4b04      	ldr	r3, [pc, #16]	@ (8011b74 <vPortSetupTimerInterrupt+0x34>)
 8011b64:	2207      	movs	r2, #7
 8011b66:	601a      	str	r2, [r3, #0]
}
 8011b68:	bf00      	nop
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b70:	4770      	bx	lr
 8011b72:	bf00      	nop
 8011b74:	e000e010 	.word	0xe000e010
 8011b78:	e000e018 	.word	0xe000e018
 8011b7c:	20000034 	.word	0x20000034
 8011b80:	10624dd3 	.word	0x10624dd3
 8011b84:	e000e014 	.word	0xe000e014

08011b88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011b88:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011b98 <vPortEnableVFP+0x10>
 8011b8c:	6801      	ldr	r1, [r0, #0]
 8011b8e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8011b92:	6001      	str	r1, [r0, #0]
 8011b94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011b96:	bf00      	nop
 8011b98:	e000ed88 	.word	0xe000ed88

08011b9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011b9c:	b480      	push	{r7}
 8011b9e:	b085      	sub	sp, #20
 8011ba0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011ba2:	f3ef 8305 	mrs	r3, IPSR
 8011ba6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	2b0f      	cmp	r3, #15
 8011bac:	d917      	bls.n	8011bde <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011bae:	4a1a      	ldr	r2, [pc, #104]	@ (8011c18 <vPortValidateInterruptPriority+0x7c>)
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	4413      	add	r3, r2
 8011bb4:	781b      	ldrb	r3, [r3, #0]
 8011bb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011bb8:	4b18      	ldr	r3, [pc, #96]	@ (8011c1c <vPortValidateInterruptPriority+0x80>)
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	7afa      	ldrb	r2, [r7, #11]
 8011bbe:	429a      	cmp	r2, r3
 8011bc0:	d20d      	bcs.n	8011bde <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8011bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bc6:	b672      	cpsid	i
 8011bc8:	f383 8811 	msr	BASEPRI, r3
 8011bcc:	f3bf 8f6f 	isb	sy
 8011bd0:	f3bf 8f4f 	dsb	sy
 8011bd4:	b662      	cpsie	i
 8011bd6:	607b      	str	r3, [r7, #4]
}
 8011bd8:	bf00      	nop
 8011bda:	bf00      	nop
 8011bdc:	e7fd      	b.n	8011bda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011bde:	4b10      	ldr	r3, [pc, #64]	@ (8011c20 <vPortValidateInterruptPriority+0x84>)
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8011be6:	4b0f      	ldr	r3, [pc, #60]	@ (8011c24 <vPortValidateInterruptPriority+0x88>)
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	429a      	cmp	r2, r3
 8011bec:	d90d      	bls.n	8011c0a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8011bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bf2:	b672      	cpsid	i
 8011bf4:	f383 8811 	msr	BASEPRI, r3
 8011bf8:	f3bf 8f6f 	isb	sy
 8011bfc:	f3bf 8f4f 	dsb	sy
 8011c00:	b662      	cpsie	i
 8011c02:	603b      	str	r3, [r7, #0]
}
 8011c04:	bf00      	nop
 8011c06:	bf00      	nop
 8011c08:	e7fd      	b.n	8011c06 <vPortValidateInterruptPriority+0x6a>
	}
 8011c0a:	bf00      	nop
 8011c0c:	3714      	adds	r7, #20
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr
 8011c16:	bf00      	nop
 8011c18:	e000e3f0 	.word	0xe000e3f0
 8011c1c:	20000e94 	.word	0x20000e94
 8011c20:	e000ed0c 	.word	0xe000ed0c
 8011c24:	20000e98 	.word	0x20000e98

08011c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011c28:	b580      	push	{r7, lr}
 8011c2a:	b08a      	sub	sp, #40	@ 0x28
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011c30:	2300      	movs	r3, #0
 8011c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011c34:	f7fe ff90 	bl	8010b58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011c38:	4b5d      	ldr	r3, [pc, #372]	@ (8011db0 <pvPortMalloc+0x188>)
 8011c3a:	681b      	ldr	r3, [r3, #0]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d101      	bne.n	8011c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011c40:	f000 f920 	bl	8011e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011c44:	4b5b      	ldr	r3, [pc, #364]	@ (8011db4 <pvPortMalloc+0x18c>)
 8011c46:	681a      	ldr	r2, [r3, #0]
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	4013      	ands	r3, r2
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	f040 8094 	bne.w	8011d7a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d020      	beq.n	8011c9a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8011c58:	2208      	movs	r2, #8
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	4413      	add	r3, r2
 8011c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f003 0307 	and.w	r3, r3, #7
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d017      	beq.n	8011c9a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	f023 0307 	bic.w	r3, r3, #7
 8011c70:	3308      	adds	r3, #8
 8011c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	f003 0307 	and.w	r3, r3, #7
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d00d      	beq.n	8011c9a <pvPortMalloc+0x72>
	__asm volatile
 8011c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c82:	b672      	cpsid	i
 8011c84:	f383 8811 	msr	BASEPRI, r3
 8011c88:	f3bf 8f6f 	isb	sy
 8011c8c:	f3bf 8f4f 	dsb	sy
 8011c90:	b662      	cpsie	i
 8011c92:	617b      	str	r3, [r7, #20]
}
 8011c94:	bf00      	nop
 8011c96:	bf00      	nop
 8011c98:	e7fd      	b.n	8011c96 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d06c      	beq.n	8011d7a <pvPortMalloc+0x152>
 8011ca0:	4b45      	ldr	r3, [pc, #276]	@ (8011db8 <pvPortMalloc+0x190>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	687a      	ldr	r2, [r7, #4]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d867      	bhi.n	8011d7a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011caa:	4b44      	ldr	r3, [pc, #272]	@ (8011dbc <pvPortMalloc+0x194>)
 8011cac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011cae:	4b43      	ldr	r3, [pc, #268]	@ (8011dbc <pvPortMalloc+0x194>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011cb4:	e004      	b.n	8011cc0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8011cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cc2:	685b      	ldr	r3, [r3, #4]
 8011cc4:	687a      	ldr	r2, [r7, #4]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d903      	bls.n	8011cd2 <pvPortMalloc+0xaa>
 8011cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d1f1      	bne.n	8011cb6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011cd2:	4b37      	ldr	r3, [pc, #220]	@ (8011db0 <pvPortMalloc+0x188>)
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cd8:	429a      	cmp	r2, r3
 8011cda:	d04e      	beq.n	8011d7a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011cdc:	6a3b      	ldr	r3, [r7, #32]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	2208      	movs	r2, #8
 8011ce2:	4413      	add	r3, r2
 8011ce4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce8:	681a      	ldr	r2, [r3, #0]
 8011cea:	6a3b      	ldr	r3, [r7, #32]
 8011cec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf0:	685a      	ldr	r2, [r3, #4]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	1ad2      	subs	r2, r2, r3
 8011cf6:	2308      	movs	r3, #8
 8011cf8:	005b      	lsls	r3, r3, #1
 8011cfa:	429a      	cmp	r2, r3
 8011cfc:	d922      	bls.n	8011d44 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011cfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	4413      	add	r3, r2
 8011d04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d06:	69bb      	ldr	r3, [r7, #24]
 8011d08:	f003 0307 	and.w	r3, r3, #7
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d00d      	beq.n	8011d2c <pvPortMalloc+0x104>
	__asm volatile
 8011d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d14:	b672      	cpsid	i
 8011d16:	f383 8811 	msr	BASEPRI, r3
 8011d1a:	f3bf 8f6f 	isb	sy
 8011d1e:	f3bf 8f4f 	dsb	sy
 8011d22:	b662      	cpsie	i
 8011d24:	613b      	str	r3, [r7, #16]
}
 8011d26:	bf00      	nop
 8011d28:	bf00      	nop
 8011d2a:	e7fd      	b.n	8011d28 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d2e:	685a      	ldr	r2, [r3, #4]
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	1ad2      	subs	r2, r2, r3
 8011d34:	69bb      	ldr	r3, [r7, #24]
 8011d36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d3a:	687a      	ldr	r2, [r7, #4]
 8011d3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011d3e:	69b8      	ldr	r0, [r7, #24]
 8011d40:	f000 f902 	bl	8011f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011d44:	4b1c      	ldr	r3, [pc, #112]	@ (8011db8 <pvPortMalloc+0x190>)
 8011d46:	681a      	ldr	r2, [r3, #0]
 8011d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d4a:	685b      	ldr	r3, [r3, #4]
 8011d4c:	1ad3      	subs	r3, r2, r3
 8011d4e:	4a1a      	ldr	r2, [pc, #104]	@ (8011db8 <pvPortMalloc+0x190>)
 8011d50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011d52:	4b19      	ldr	r3, [pc, #100]	@ (8011db8 <pvPortMalloc+0x190>)
 8011d54:	681a      	ldr	r2, [r3, #0]
 8011d56:	4b1a      	ldr	r3, [pc, #104]	@ (8011dc0 <pvPortMalloc+0x198>)
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	429a      	cmp	r2, r3
 8011d5c:	d203      	bcs.n	8011d66 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011d5e:	4b16      	ldr	r3, [pc, #88]	@ (8011db8 <pvPortMalloc+0x190>)
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	4a17      	ldr	r2, [pc, #92]	@ (8011dc0 <pvPortMalloc+0x198>)
 8011d64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d68:	685a      	ldr	r2, [r3, #4]
 8011d6a:	4b12      	ldr	r3, [pc, #72]	@ (8011db4 <pvPortMalloc+0x18c>)
 8011d6c:	681b      	ldr	r3, [r3, #0]
 8011d6e:	431a      	orrs	r2, r3
 8011d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d76:	2200      	movs	r2, #0
 8011d78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011d7a:	f7fe fefb 	bl	8010b74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011d7e:	69fb      	ldr	r3, [r7, #28]
 8011d80:	f003 0307 	and.w	r3, r3, #7
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	d00d      	beq.n	8011da4 <pvPortMalloc+0x17c>
	__asm volatile
 8011d88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d8c:	b672      	cpsid	i
 8011d8e:	f383 8811 	msr	BASEPRI, r3
 8011d92:	f3bf 8f6f 	isb	sy
 8011d96:	f3bf 8f4f 	dsb	sy
 8011d9a:	b662      	cpsie	i
 8011d9c:	60fb      	str	r3, [r7, #12]
}
 8011d9e:	bf00      	nop
 8011da0:	bf00      	nop
 8011da2:	e7fd      	b.n	8011da0 <pvPortMalloc+0x178>
	return pvReturn;
 8011da4:	69fb      	ldr	r3, [r7, #28]
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	3728      	adds	r7, #40	@ 0x28
 8011daa:	46bd      	mov	sp, r7
 8011dac:	bd80      	pop	{r7, pc}
 8011dae:	bf00      	nop
 8011db0:	20004aa4 	.word	0x20004aa4
 8011db4:	20004ab0 	.word	0x20004ab0
 8011db8:	20004aa8 	.word	0x20004aa8
 8011dbc:	20004a9c 	.word	0x20004a9c
 8011dc0:	20004aac 	.word	0x20004aac

08011dc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b086      	sub	sp, #24
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d04e      	beq.n	8011e74 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011dd6:	2308      	movs	r3, #8
 8011dd8:	425b      	negs	r3, r3
 8011dda:	697a      	ldr	r2, [r7, #20]
 8011ddc:	4413      	add	r3, r2
 8011dde:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011de4:	693b      	ldr	r3, [r7, #16]
 8011de6:	685a      	ldr	r2, [r3, #4]
 8011de8:	4b24      	ldr	r3, [pc, #144]	@ (8011e7c <vPortFree+0xb8>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	4013      	ands	r3, r2
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d10d      	bne.n	8011e0e <vPortFree+0x4a>
	__asm volatile
 8011df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011df6:	b672      	cpsid	i
 8011df8:	f383 8811 	msr	BASEPRI, r3
 8011dfc:	f3bf 8f6f 	isb	sy
 8011e00:	f3bf 8f4f 	dsb	sy
 8011e04:	b662      	cpsie	i
 8011e06:	60fb      	str	r3, [r7, #12]
}
 8011e08:	bf00      	nop
 8011e0a:	bf00      	nop
 8011e0c:	e7fd      	b.n	8011e0a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d00d      	beq.n	8011e32 <vPortFree+0x6e>
	__asm volatile
 8011e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e1a:	b672      	cpsid	i
 8011e1c:	f383 8811 	msr	BASEPRI, r3
 8011e20:	f3bf 8f6f 	isb	sy
 8011e24:	f3bf 8f4f 	dsb	sy
 8011e28:	b662      	cpsie	i
 8011e2a:	60bb      	str	r3, [r7, #8]
}
 8011e2c:	bf00      	nop
 8011e2e:	bf00      	nop
 8011e30:	e7fd      	b.n	8011e2e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	685a      	ldr	r2, [r3, #4]
 8011e36:	4b11      	ldr	r3, [pc, #68]	@ (8011e7c <vPortFree+0xb8>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	4013      	ands	r3, r2
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d019      	beq.n	8011e74 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011e40:	693b      	ldr	r3, [r7, #16]
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d115      	bne.n	8011e74 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011e48:	693b      	ldr	r3, [r7, #16]
 8011e4a:	685a      	ldr	r2, [r3, #4]
 8011e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8011e7c <vPortFree+0xb8>)
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	43db      	mvns	r3, r3
 8011e52:	401a      	ands	r2, r3
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011e58:	f7fe fe7e 	bl	8010b58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011e5c:	693b      	ldr	r3, [r7, #16]
 8011e5e:	685a      	ldr	r2, [r3, #4]
 8011e60:	4b07      	ldr	r3, [pc, #28]	@ (8011e80 <vPortFree+0xbc>)
 8011e62:	681b      	ldr	r3, [r3, #0]
 8011e64:	4413      	add	r3, r2
 8011e66:	4a06      	ldr	r2, [pc, #24]	@ (8011e80 <vPortFree+0xbc>)
 8011e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011e6a:	6938      	ldr	r0, [r7, #16]
 8011e6c:	f000 f86c 	bl	8011f48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8011e70:	f7fe fe80 	bl	8010b74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8011e74:	bf00      	nop
 8011e76:	3718      	adds	r7, #24
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}
 8011e7c:	20004ab0 	.word	0x20004ab0
 8011e80:	20004aa8 	.word	0x20004aa8

08011e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011e84:	b480      	push	{r7}
 8011e86:	b085      	sub	sp, #20
 8011e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8011e8a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8011e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011e90:	4b27      	ldr	r3, [pc, #156]	@ (8011f30 <prvHeapInit+0xac>)
 8011e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	f003 0307 	and.w	r3, r3, #7
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d00c      	beq.n	8011eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	3307      	adds	r3, #7
 8011ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ea4:	68fb      	ldr	r3, [r7, #12]
 8011ea6:	f023 0307 	bic.w	r3, r3, #7
 8011eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8011eac:	68ba      	ldr	r2, [r7, #8]
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	1ad3      	subs	r3, r2, r3
 8011eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8011f30 <prvHeapInit+0xac>)
 8011eb4:	4413      	add	r3, r2
 8011eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8011ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8011f34 <prvHeapInit+0xb0>)
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8011f34 <prvHeapInit+0xb0>)
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	68ba      	ldr	r2, [r7, #8]
 8011ecc:	4413      	add	r3, r2
 8011ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011ed0:	2208      	movs	r2, #8
 8011ed2:	68fb      	ldr	r3, [r7, #12]
 8011ed4:	1a9b      	subs	r3, r3, r2
 8011ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	f023 0307 	bic.w	r3, r3, #7
 8011ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	4a15      	ldr	r2, [pc, #84]	@ (8011f38 <prvHeapInit+0xb4>)
 8011ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011ee6:	4b14      	ldr	r3, [pc, #80]	@ (8011f38 <prvHeapInit+0xb4>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	2200      	movs	r2, #0
 8011eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8011eee:	4b12      	ldr	r3, [pc, #72]	@ (8011f38 <prvHeapInit+0xb4>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011efa:	683b      	ldr	r3, [r7, #0]
 8011efc:	68fa      	ldr	r2, [r7, #12]
 8011efe:	1ad2      	subs	r2, r2, r3
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011f04:	4b0c      	ldr	r3, [pc, #48]	@ (8011f38 <prvHeapInit+0xb4>)
 8011f06:	681a      	ldr	r2, [r3, #0]
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f0c:	683b      	ldr	r3, [r7, #0]
 8011f0e:	685b      	ldr	r3, [r3, #4]
 8011f10:	4a0a      	ldr	r2, [pc, #40]	@ (8011f3c <prvHeapInit+0xb8>)
 8011f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	685b      	ldr	r3, [r3, #4]
 8011f18:	4a09      	ldr	r2, [pc, #36]	@ (8011f40 <prvHeapInit+0xbc>)
 8011f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8011f1c:	4b09      	ldr	r3, [pc, #36]	@ (8011f44 <prvHeapInit+0xc0>)
 8011f1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8011f22:	601a      	str	r2, [r3, #0]
}
 8011f24:	bf00      	nop
 8011f26:	3714      	adds	r7, #20
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f2e:	4770      	bx	lr
 8011f30:	20000e9c 	.word	0x20000e9c
 8011f34:	20004a9c 	.word	0x20004a9c
 8011f38:	20004aa4 	.word	0x20004aa4
 8011f3c:	20004aac 	.word	0x20004aac
 8011f40:	20004aa8 	.word	0x20004aa8
 8011f44:	20004ab0 	.word	0x20004ab0

08011f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011f48:	b480      	push	{r7}
 8011f4a:	b085      	sub	sp, #20
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011f50:	4b28      	ldr	r3, [pc, #160]	@ (8011ff4 <prvInsertBlockIntoFreeList+0xac>)
 8011f52:	60fb      	str	r3, [r7, #12]
 8011f54:	e002      	b.n	8011f5c <prvInsertBlockIntoFreeList+0x14>
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	60fb      	str	r3, [r7, #12]
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	681b      	ldr	r3, [r3, #0]
 8011f60:	687a      	ldr	r2, [r7, #4]
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d8f7      	bhi.n	8011f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	68ba      	ldr	r2, [r7, #8]
 8011f70:	4413      	add	r3, r2
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d108      	bne.n	8011f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	685a      	ldr	r2, [r3, #4]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	685b      	ldr	r3, [r3, #4]
 8011f80:	441a      	add	r2, r3
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	685b      	ldr	r3, [r3, #4]
 8011f92:	68ba      	ldr	r2, [r7, #8]
 8011f94:	441a      	add	r2, r3
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	429a      	cmp	r2, r3
 8011f9c:	d118      	bne.n	8011fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681a      	ldr	r2, [r3, #0]
 8011fa2:	4b15      	ldr	r3, [pc, #84]	@ (8011ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	429a      	cmp	r2, r3
 8011fa8:	d00d      	beq.n	8011fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	685a      	ldr	r2, [r3, #4]
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	685b      	ldr	r3, [r3, #4]
 8011fb4:	441a      	add	r2, r3
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	601a      	str	r2, [r3, #0]
 8011fc4:	e008      	b.n	8011fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8011ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8011fc8:	681a      	ldr	r2, [r3, #0]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	601a      	str	r2, [r3, #0]
 8011fce:	e003      	b.n	8011fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	681a      	ldr	r2, [r3, #0]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011fd8:	68fa      	ldr	r2, [r7, #12]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	429a      	cmp	r2, r3
 8011fde:	d002      	beq.n	8011fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	687a      	ldr	r2, [r7, #4]
 8011fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011fe6:	bf00      	nop
 8011fe8:	3714      	adds	r7, #20
 8011fea:	46bd      	mov	sp, r7
 8011fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff0:	4770      	bx	lr
 8011ff2:	bf00      	nop
 8011ff4:	20004a9c 	.word	0x20004a9c
 8011ff8:	20004aa4 	.word	0x20004aa4

08011ffc <siprintf>:
 8011ffc:	b40e      	push	{r1, r2, r3}
 8011ffe:	b500      	push	{lr}
 8012000:	b09c      	sub	sp, #112	@ 0x70
 8012002:	ab1d      	add	r3, sp, #116	@ 0x74
 8012004:	9002      	str	r0, [sp, #8]
 8012006:	9006      	str	r0, [sp, #24]
 8012008:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801200c:	4809      	ldr	r0, [pc, #36]	@ (8012034 <siprintf+0x38>)
 801200e:	9107      	str	r1, [sp, #28]
 8012010:	9104      	str	r1, [sp, #16]
 8012012:	4909      	ldr	r1, [pc, #36]	@ (8012038 <siprintf+0x3c>)
 8012014:	f853 2b04 	ldr.w	r2, [r3], #4
 8012018:	9105      	str	r1, [sp, #20]
 801201a:	6800      	ldr	r0, [r0, #0]
 801201c:	9301      	str	r3, [sp, #4]
 801201e:	a902      	add	r1, sp, #8
 8012020:	f000 f9f8 	bl	8012414 <_svfiprintf_r>
 8012024:	9b02      	ldr	r3, [sp, #8]
 8012026:	2200      	movs	r2, #0
 8012028:	701a      	strb	r2, [r3, #0]
 801202a:	b01c      	add	sp, #112	@ 0x70
 801202c:	f85d eb04 	ldr.w	lr, [sp], #4
 8012030:	b003      	add	sp, #12
 8012032:	4770      	bx	lr
 8012034:	20000044 	.word	0x20000044
 8012038:	ffff0208 	.word	0xffff0208

0801203c <memset>:
 801203c:	4402      	add	r2, r0
 801203e:	4603      	mov	r3, r0
 8012040:	4293      	cmp	r3, r2
 8012042:	d100      	bne.n	8012046 <memset+0xa>
 8012044:	4770      	bx	lr
 8012046:	f803 1b01 	strb.w	r1, [r3], #1
 801204a:	e7f9      	b.n	8012040 <memset+0x4>

0801204c <_reclaim_reent>:
 801204c:	4b29      	ldr	r3, [pc, #164]	@ (80120f4 <_reclaim_reent+0xa8>)
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	4283      	cmp	r3, r0
 8012052:	b570      	push	{r4, r5, r6, lr}
 8012054:	4604      	mov	r4, r0
 8012056:	d04b      	beq.n	80120f0 <_reclaim_reent+0xa4>
 8012058:	69c3      	ldr	r3, [r0, #28]
 801205a:	b1ab      	cbz	r3, 8012088 <_reclaim_reent+0x3c>
 801205c:	68db      	ldr	r3, [r3, #12]
 801205e:	b16b      	cbz	r3, 801207c <_reclaim_reent+0x30>
 8012060:	2500      	movs	r5, #0
 8012062:	69e3      	ldr	r3, [r4, #28]
 8012064:	68db      	ldr	r3, [r3, #12]
 8012066:	5959      	ldr	r1, [r3, r5]
 8012068:	2900      	cmp	r1, #0
 801206a:	d13b      	bne.n	80120e4 <_reclaim_reent+0x98>
 801206c:	3504      	adds	r5, #4
 801206e:	2d80      	cmp	r5, #128	@ 0x80
 8012070:	d1f7      	bne.n	8012062 <_reclaim_reent+0x16>
 8012072:	69e3      	ldr	r3, [r4, #28]
 8012074:	4620      	mov	r0, r4
 8012076:	68d9      	ldr	r1, [r3, #12]
 8012078:	f000 f878 	bl	801216c <_free_r>
 801207c:	69e3      	ldr	r3, [r4, #28]
 801207e:	6819      	ldr	r1, [r3, #0]
 8012080:	b111      	cbz	r1, 8012088 <_reclaim_reent+0x3c>
 8012082:	4620      	mov	r0, r4
 8012084:	f000 f872 	bl	801216c <_free_r>
 8012088:	6961      	ldr	r1, [r4, #20]
 801208a:	b111      	cbz	r1, 8012092 <_reclaim_reent+0x46>
 801208c:	4620      	mov	r0, r4
 801208e:	f000 f86d 	bl	801216c <_free_r>
 8012092:	69e1      	ldr	r1, [r4, #28]
 8012094:	b111      	cbz	r1, 801209c <_reclaim_reent+0x50>
 8012096:	4620      	mov	r0, r4
 8012098:	f000 f868 	bl	801216c <_free_r>
 801209c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801209e:	b111      	cbz	r1, 80120a6 <_reclaim_reent+0x5a>
 80120a0:	4620      	mov	r0, r4
 80120a2:	f000 f863 	bl	801216c <_free_r>
 80120a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80120a8:	b111      	cbz	r1, 80120b0 <_reclaim_reent+0x64>
 80120aa:	4620      	mov	r0, r4
 80120ac:	f000 f85e 	bl	801216c <_free_r>
 80120b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80120b2:	b111      	cbz	r1, 80120ba <_reclaim_reent+0x6e>
 80120b4:	4620      	mov	r0, r4
 80120b6:	f000 f859 	bl	801216c <_free_r>
 80120ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80120bc:	b111      	cbz	r1, 80120c4 <_reclaim_reent+0x78>
 80120be:	4620      	mov	r0, r4
 80120c0:	f000 f854 	bl	801216c <_free_r>
 80120c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80120c6:	b111      	cbz	r1, 80120ce <_reclaim_reent+0x82>
 80120c8:	4620      	mov	r0, r4
 80120ca:	f000 f84f 	bl	801216c <_free_r>
 80120ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80120d0:	b111      	cbz	r1, 80120d8 <_reclaim_reent+0x8c>
 80120d2:	4620      	mov	r0, r4
 80120d4:	f000 f84a 	bl	801216c <_free_r>
 80120d8:	6a23      	ldr	r3, [r4, #32]
 80120da:	b14b      	cbz	r3, 80120f0 <_reclaim_reent+0xa4>
 80120dc:	4620      	mov	r0, r4
 80120de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120e2:	4718      	bx	r3
 80120e4:	680e      	ldr	r6, [r1, #0]
 80120e6:	4620      	mov	r0, r4
 80120e8:	f000 f840 	bl	801216c <_free_r>
 80120ec:	4631      	mov	r1, r6
 80120ee:	e7bb      	b.n	8012068 <_reclaim_reent+0x1c>
 80120f0:	bd70      	pop	{r4, r5, r6, pc}
 80120f2:	bf00      	nop
 80120f4:	20000044 	.word	0x20000044

080120f8 <__errno>:
 80120f8:	4b01      	ldr	r3, [pc, #4]	@ (8012100 <__errno+0x8>)
 80120fa:	6818      	ldr	r0, [r3, #0]
 80120fc:	4770      	bx	lr
 80120fe:	bf00      	nop
 8012100:	20000044 	.word	0x20000044

08012104 <__libc_init_array>:
 8012104:	b570      	push	{r4, r5, r6, lr}
 8012106:	4d0d      	ldr	r5, [pc, #52]	@ (801213c <__libc_init_array+0x38>)
 8012108:	4c0d      	ldr	r4, [pc, #52]	@ (8012140 <__libc_init_array+0x3c>)
 801210a:	1b64      	subs	r4, r4, r5
 801210c:	10a4      	asrs	r4, r4, #2
 801210e:	2600      	movs	r6, #0
 8012110:	42a6      	cmp	r6, r4
 8012112:	d109      	bne.n	8012128 <__libc_init_array+0x24>
 8012114:	4d0b      	ldr	r5, [pc, #44]	@ (8012144 <__libc_init_array+0x40>)
 8012116:	4c0c      	ldr	r4, [pc, #48]	@ (8012148 <__libc_init_array+0x44>)
 8012118:	f000 fc66 	bl	80129e8 <_init>
 801211c:	1b64      	subs	r4, r4, r5
 801211e:	10a4      	asrs	r4, r4, #2
 8012120:	2600      	movs	r6, #0
 8012122:	42a6      	cmp	r6, r4
 8012124:	d105      	bne.n	8012132 <__libc_init_array+0x2e>
 8012126:	bd70      	pop	{r4, r5, r6, pc}
 8012128:	f855 3b04 	ldr.w	r3, [r5], #4
 801212c:	4798      	blx	r3
 801212e:	3601      	adds	r6, #1
 8012130:	e7ee      	b.n	8012110 <__libc_init_array+0xc>
 8012132:	f855 3b04 	ldr.w	r3, [r5], #4
 8012136:	4798      	blx	r3
 8012138:	3601      	adds	r6, #1
 801213a:	e7f2      	b.n	8012122 <__libc_init_array+0x1e>
 801213c:	08014708 	.word	0x08014708
 8012140:	08014708 	.word	0x08014708
 8012144:	08014708 	.word	0x08014708
 8012148:	0801470c 	.word	0x0801470c

0801214c <__retarget_lock_acquire_recursive>:
 801214c:	4770      	bx	lr

0801214e <__retarget_lock_release_recursive>:
 801214e:	4770      	bx	lr

08012150 <memcpy>:
 8012150:	440a      	add	r2, r1
 8012152:	4291      	cmp	r1, r2
 8012154:	f100 33ff 	add.w	r3, r0, #4294967295
 8012158:	d100      	bne.n	801215c <memcpy+0xc>
 801215a:	4770      	bx	lr
 801215c:	b510      	push	{r4, lr}
 801215e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012166:	4291      	cmp	r1, r2
 8012168:	d1f9      	bne.n	801215e <memcpy+0xe>
 801216a:	bd10      	pop	{r4, pc}

0801216c <_free_r>:
 801216c:	b538      	push	{r3, r4, r5, lr}
 801216e:	4605      	mov	r5, r0
 8012170:	2900      	cmp	r1, #0
 8012172:	d041      	beq.n	80121f8 <_free_r+0x8c>
 8012174:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012178:	1f0c      	subs	r4, r1, #4
 801217a:	2b00      	cmp	r3, #0
 801217c:	bfb8      	it	lt
 801217e:	18e4      	addlt	r4, r4, r3
 8012180:	f000 f8e0 	bl	8012344 <__malloc_lock>
 8012184:	4a1d      	ldr	r2, [pc, #116]	@ (80121fc <_free_r+0x90>)
 8012186:	6813      	ldr	r3, [r2, #0]
 8012188:	b933      	cbnz	r3, 8012198 <_free_r+0x2c>
 801218a:	6063      	str	r3, [r4, #4]
 801218c:	6014      	str	r4, [r2, #0]
 801218e:	4628      	mov	r0, r5
 8012190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012194:	f000 b8dc 	b.w	8012350 <__malloc_unlock>
 8012198:	42a3      	cmp	r3, r4
 801219a:	d908      	bls.n	80121ae <_free_r+0x42>
 801219c:	6820      	ldr	r0, [r4, #0]
 801219e:	1821      	adds	r1, r4, r0
 80121a0:	428b      	cmp	r3, r1
 80121a2:	bf01      	itttt	eq
 80121a4:	6819      	ldreq	r1, [r3, #0]
 80121a6:	685b      	ldreq	r3, [r3, #4]
 80121a8:	1809      	addeq	r1, r1, r0
 80121aa:	6021      	streq	r1, [r4, #0]
 80121ac:	e7ed      	b.n	801218a <_free_r+0x1e>
 80121ae:	461a      	mov	r2, r3
 80121b0:	685b      	ldr	r3, [r3, #4]
 80121b2:	b10b      	cbz	r3, 80121b8 <_free_r+0x4c>
 80121b4:	42a3      	cmp	r3, r4
 80121b6:	d9fa      	bls.n	80121ae <_free_r+0x42>
 80121b8:	6811      	ldr	r1, [r2, #0]
 80121ba:	1850      	adds	r0, r2, r1
 80121bc:	42a0      	cmp	r0, r4
 80121be:	d10b      	bne.n	80121d8 <_free_r+0x6c>
 80121c0:	6820      	ldr	r0, [r4, #0]
 80121c2:	4401      	add	r1, r0
 80121c4:	1850      	adds	r0, r2, r1
 80121c6:	4283      	cmp	r3, r0
 80121c8:	6011      	str	r1, [r2, #0]
 80121ca:	d1e0      	bne.n	801218e <_free_r+0x22>
 80121cc:	6818      	ldr	r0, [r3, #0]
 80121ce:	685b      	ldr	r3, [r3, #4]
 80121d0:	6053      	str	r3, [r2, #4]
 80121d2:	4408      	add	r0, r1
 80121d4:	6010      	str	r0, [r2, #0]
 80121d6:	e7da      	b.n	801218e <_free_r+0x22>
 80121d8:	d902      	bls.n	80121e0 <_free_r+0x74>
 80121da:	230c      	movs	r3, #12
 80121dc:	602b      	str	r3, [r5, #0]
 80121de:	e7d6      	b.n	801218e <_free_r+0x22>
 80121e0:	6820      	ldr	r0, [r4, #0]
 80121e2:	1821      	adds	r1, r4, r0
 80121e4:	428b      	cmp	r3, r1
 80121e6:	bf04      	itt	eq
 80121e8:	6819      	ldreq	r1, [r3, #0]
 80121ea:	685b      	ldreq	r3, [r3, #4]
 80121ec:	6063      	str	r3, [r4, #4]
 80121ee:	bf04      	itt	eq
 80121f0:	1809      	addeq	r1, r1, r0
 80121f2:	6021      	streq	r1, [r4, #0]
 80121f4:	6054      	str	r4, [r2, #4]
 80121f6:	e7ca      	b.n	801218e <_free_r+0x22>
 80121f8:	bd38      	pop	{r3, r4, r5, pc}
 80121fa:	bf00      	nop
 80121fc:	20004bf8 	.word	0x20004bf8

08012200 <sbrk_aligned>:
 8012200:	b570      	push	{r4, r5, r6, lr}
 8012202:	4e0f      	ldr	r6, [pc, #60]	@ (8012240 <sbrk_aligned+0x40>)
 8012204:	460c      	mov	r4, r1
 8012206:	6831      	ldr	r1, [r6, #0]
 8012208:	4605      	mov	r5, r0
 801220a:	b911      	cbnz	r1, 8012212 <sbrk_aligned+0x12>
 801220c:	f000 fba6 	bl	801295c <_sbrk_r>
 8012210:	6030      	str	r0, [r6, #0]
 8012212:	4621      	mov	r1, r4
 8012214:	4628      	mov	r0, r5
 8012216:	f000 fba1 	bl	801295c <_sbrk_r>
 801221a:	1c43      	adds	r3, r0, #1
 801221c:	d103      	bne.n	8012226 <sbrk_aligned+0x26>
 801221e:	f04f 34ff 	mov.w	r4, #4294967295
 8012222:	4620      	mov	r0, r4
 8012224:	bd70      	pop	{r4, r5, r6, pc}
 8012226:	1cc4      	adds	r4, r0, #3
 8012228:	f024 0403 	bic.w	r4, r4, #3
 801222c:	42a0      	cmp	r0, r4
 801222e:	d0f8      	beq.n	8012222 <sbrk_aligned+0x22>
 8012230:	1a21      	subs	r1, r4, r0
 8012232:	4628      	mov	r0, r5
 8012234:	f000 fb92 	bl	801295c <_sbrk_r>
 8012238:	3001      	adds	r0, #1
 801223a:	d1f2      	bne.n	8012222 <sbrk_aligned+0x22>
 801223c:	e7ef      	b.n	801221e <sbrk_aligned+0x1e>
 801223e:	bf00      	nop
 8012240:	20004bf4 	.word	0x20004bf4

08012244 <_malloc_r>:
 8012244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012248:	1ccd      	adds	r5, r1, #3
 801224a:	f025 0503 	bic.w	r5, r5, #3
 801224e:	3508      	adds	r5, #8
 8012250:	2d0c      	cmp	r5, #12
 8012252:	bf38      	it	cc
 8012254:	250c      	movcc	r5, #12
 8012256:	2d00      	cmp	r5, #0
 8012258:	4606      	mov	r6, r0
 801225a:	db01      	blt.n	8012260 <_malloc_r+0x1c>
 801225c:	42a9      	cmp	r1, r5
 801225e:	d904      	bls.n	801226a <_malloc_r+0x26>
 8012260:	230c      	movs	r3, #12
 8012262:	6033      	str	r3, [r6, #0]
 8012264:	2000      	movs	r0, #0
 8012266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801226a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8012340 <_malloc_r+0xfc>
 801226e:	f000 f869 	bl	8012344 <__malloc_lock>
 8012272:	f8d8 3000 	ldr.w	r3, [r8]
 8012276:	461c      	mov	r4, r3
 8012278:	bb44      	cbnz	r4, 80122cc <_malloc_r+0x88>
 801227a:	4629      	mov	r1, r5
 801227c:	4630      	mov	r0, r6
 801227e:	f7ff ffbf 	bl	8012200 <sbrk_aligned>
 8012282:	1c43      	adds	r3, r0, #1
 8012284:	4604      	mov	r4, r0
 8012286:	d158      	bne.n	801233a <_malloc_r+0xf6>
 8012288:	f8d8 4000 	ldr.w	r4, [r8]
 801228c:	4627      	mov	r7, r4
 801228e:	2f00      	cmp	r7, #0
 8012290:	d143      	bne.n	801231a <_malloc_r+0xd6>
 8012292:	2c00      	cmp	r4, #0
 8012294:	d04b      	beq.n	801232e <_malloc_r+0xea>
 8012296:	6823      	ldr	r3, [r4, #0]
 8012298:	4639      	mov	r1, r7
 801229a:	4630      	mov	r0, r6
 801229c:	eb04 0903 	add.w	r9, r4, r3
 80122a0:	f000 fb5c 	bl	801295c <_sbrk_r>
 80122a4:	4581      	cmp	r9, r0
 80122a6:	d142      	bne.n	801232e <_malloc_r+0xea>
 80122a8:	6821      	ldr	r1, [r4, #0]
 80122aa:	1a6d      	subs	r5, r5, r1
 80122ac:	4629      	mov	r1, r5
 80122ae:	4630      	mov	r0, r6
 80122b0:	f7ff ffa6 	bl	8012200 <sbrk_aligned>
 80122b4:	3001      	adds	r0, #1
 80122b6:	d03a      	beq.n	801232e <_malloc_r+0xea>
 80122b8:	6823      	ldr	r3, [r4, #0]
 80122ba:	442b      	add	r3, r5
 80122bc:	6023      	str	r3, [r4, #0]
 80122be:	f8d8 3000 	ldr.w	r3, [r8]
 80122c2:	685a      	ldr	r2, [r3, #4]
 80122c4:	bb62      	cbnz	r2, 8012320 <_malloc_r+0xdc>
 80122c6:	f8c8 7000 	str.w	r7, [r8]
 80122ca:	e00f      	b.n	80122ec <_malloc_r+0xa8>
 80122cc:	6822      	ldr	r2, [r4, #0]
 80122ce:	1b52      	subs	r2, r2, r5
 80122d0:	d420      	bmi.n	8012314 <_malloc_r+0xd0>
 80122d2:	2a0b      	cmp	r2, #11
 80122d4:	d917      	bls.n	8012306 <_malloc_r+0xc2>
 80122d6:	1961      	adds	r1, r4, r5
 80122d8:	42a3      	cmp	r3, r4
 80122da:	6025      	str	r5, [r4, #0]
 80122dc:	bf18      	it	ne
 80122de:	6059      	strne	r1, [r3, #4]
 80122e0:	6863      	ldr	r3, [r4, #4]
 80122e2:	bf08      	it	eq
 80122e4:	f8c8 1000 	streq.w	r1, [r8]
 80122e8:	5162      	str	r2, [r4, r5]
 80122ea:	604b      	str	r3, [r1, #4]
 80122ec:	4630      	mov	r0, r6
 80122ee:	f000 f82f 	bl	8012350 <__malloc_unlock>
 80122f2:	f104 000b 	add.w	r0, r4, #11
 80122f6:	1d23      	adds	r3, r4, #4
 80122f8:	f020 0007 	bic.w	r0, r0, #7
 80122fc:	1ac2      	subs	r2, r0, r3
 80122fe:	bf1c      	itt	ne
 8012300:	1a1b      	subne	r3, r3, r0
 8012302:	50a3      	strne	r3, [r4, r2]
 8012304:	e7af      	b.n	8012266 <_malloc_r+0x22>
 8012306:	6862      	ldr	r2, [r4, #4]
 8012308:	42a3      	cmp	r3, r4
 801230a:	bf0c      	ite	eq
 801230c:	f8c8 2000 	streq.w	r2, [r8]
 8012310:	605a      	strne	r2, [r3, #4]
 8012312:	e7eb      	b.n	80122ec <_malloc_r+0xa8>
 8012314:	4623      	mov	r3, r4
 8012316:	6864      	ldr	r4, [r4, #4]
 8012318:	e7ae      	b.n	8012278 <_malloc_r+0x34>
 801231a:	463c      	mov	r4, r7
 801231c:	687f      	ldr	r7, [r7, #4]
 801231e:	e7b6      	b.n	801228e <_malloc_r+0x4a>
 8012320:	461a      	mov	r2, r3
 8012322:	685b      	ldr	r3, [r3, #4]
 8012324:	42a3      	cmp	r3, r4
 8012326:	d1fb      	bne.n	8012320 <_malloc_r+0xdc>
 8012328:	2300      	movs	r3, #0
 801232a:	6053      	str	r3, [r2, #4]
 801232c:	e7de      	b.n	80122ec <_malloc_r+0xa8>
 801232e:	230c      	movs	r3, #12
 8012330:	6033      	str	r3, [r6, #0]
 8012332:	4630      	mov	r0, r6
 8012334:	f000 f80c 	bl	8012350 <__malloc_unlock>
 8012338:	e794      	b.n	8012264 <_malloc_r+0x20>
 801233a:	6005      	str	r5, [r0, #0]
 801233c:	e7d6      	b.n	80122ec <_malloc_r+0xa8>
 801233e:	bf00      	nop
 8012340:	20004bf8 	.word	0x20004bf8

08012344 <__malloc_lock>:
 8012344:	4801      	ldr	r0, [pc, #4]	@ (801234c <__malloc_lock+0x8>)
 8012346:	f7ff bf01 	b.w	801214c <__retarget_lock_acquire_recursive>
 801234a:	bf00      	nop
 801234c:	20004bf0 	.word	0x20004bf0

08012350 <__malloc_unlock>:
 8012350:	4801      	ldr	r0, [pc, #4]	@ (8012358 <__malloc_unlock+0x8>)
 8012352:	f7ff befc 	b.w	801214e <__retarget_lock_release_recursive>
 8012356:	bf00      	nop
 8012358:	20004bf0 	.word	0x20004bf0

0801235c <__ssputs_r>:
 801235c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012360:	688e      	ldr	r6, [r1, #8]
 8012362:	461f      	mov	r7, r3
 8012364:	42be      	cmp	r6, r7
 8012366:	680b      	ldr	r3, [r1, #0]
 8012368:	4682      	mov	sl, r0
 801236a:	460c      	mov	r4, r1
 801236c:	4690      	mov	r8, r2
 801236e:	d82d      	bhi.n	80123cc <__ssputs_r+0x70>
 8012370:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012374:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012378:	d026      	beq.n	80123c8 <__ssputs_r+0x6c>
 801237a:	6965      	ldr	r5, [r4, #20]
 801237c:	6909      	ldr	r1, [r1, #16]
 801237e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012382:	eba3 0901 	sub.w	r9, r3, r1
 8012386:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801238a:	1c7b      	adds	r3, r7, #1
 801238c:	444b      	add	r3, r9
 801238e:	106d      	asrs	r5, r5, #1
 8012390:	429d      	cmp	r5, r3
 8012392:	bf38      	it	cc
 8012394:	461d      	movcc	r5, r3
 8012396:	0553      	lsls	r3, r2, #21
 8012398:	d527      	bpl.n	80123ea <__ssputs_r+0x8e>
 801239a:	4629      	mov	r1, r5
 801239c:	f7ff ff52 	bl	8012244 <_malloc_r>
 80123a0:	4606      	mov	r6, r0
 80123a2:	b360      	cbz	r0, 80123fe <__ssputs_r+0xa2>
 80123a4:	6921      	ldr	r1, [r4, #16]
 80123a6:	464a      	mov	r2, r9
 80123a8:	f7ff fed2 	bl	8012150 <memcpy>
 80123ac:	89a3      	ldrh	r3, [r4, #12]
 80123ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80123b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80123b6:	81a3      	strh	r3, [r4, #12]
 80123b8:	6126      	str	r6, [r4, #16]
 80123ba:	6165      	str	r5, [r4, #20]
 80123bc:	444e      	add	r6, r9
 80123be:	eba5 0509 	sub.w	r5, r5, r9
 80123c2:	6026      	str	r6, [r4, #0]
 80123c4:	60a5      	str	r5, [r4, #8]
 80123c6:	463e      	mov	r6, r7
 80123c8:	42be      	cmp	r6, r7
 80123ca:	d900      	bls.n	80123ce <__ssputs_r+0x72>
 80123cc:	463e      	mov	r6, r7
 80123ce:	6820      	ldr	r0, [r4, #0]
 80123d0:	4632      	mov	r2, r6
 80123d2:	4641      	mov	r1, r8
 80123d4:	f000 faa8 	bl	8012928 <memmove>
 80123d8:	68a3      	ldr	r3, [r4, #8]
 80123da:	1b9b      	subs	r3, r3, r6
 80123dc:	60a3      	str	r3, [r4, #8]
 80123de:	6823      	ldr	r3, [r4, #0]
 80123e0:	4433      	add	r3, r6
 80123e2:	6023      	str	r3, [r4, #0]
 80123e4:	2000      	movs	r0, #0
 80123e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123ea:	462a      	mov	r2, r5
 80123ec:	f000 fac6 	bl	801297c <_realloc_r>
 80123f0:	4606      	mov	r6, r0
 80123f2:	2800      	cmp	r0, #0
 80123f4:	d1e0      	bne.n	80123b8 <__ssputs_r+0x5c>
 80123f6:	6921      	ldr	r1, [r4, #16]
 80123f8:	4650      	mov	r0, sl
 80123fa:	f7ff feb7 	bl	801216c <_free_r>
 80123fe:	230c      	movs	r3, #12
 8012400:	f8ca 3000 	str.w	r3, [sl]
 8012404:	89a3      	ldrh	r3, [r4, #12]
 8012406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801240a:	81a3      	strh	r3, [r4, #12]
 801240c:	f04f 30ff 	mov.w	r0, #4294967295
 8012410:	e7e9      	b.n	80123e6 <__ssputs_r+0x8a>
	...

08012414 <_svfiprintf_r>:
 8012414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012418:	4698      	mov	r8, r3
 801241a:	898b      	ldrh	r3, [r1, #12]
 801241c:	061b      	lsls	r3, r3, #24
 801241e:	b09d      	sub	sp, #116	@ 0x74
 8012420:	4607      	mov	r7, r0
 8012422:	460d      	mov	r5, r1
 8012424:	4614      	mov	r4, r2
 8012426:	d510      	bpl.n	801244a <_svfiprintf_r+0x36>
 8012428:	690b      	ldr	r3, [r1, #16]
 801242a:	b973      	cbnz	r3, 801244a <_svfiprintf_r+0x36>
 801242c:	2140      	movs	r1, #64	@ 0x40
 801242e:	f7ff ff09 	bl	8012244 <_malloc_r>
 8012432:	6028      	str	r0, [r5, #0]
 8012434:	6128      	str	r0, [r5, #16]
 8012436:	b930      	cbnz	r0, 8012446 <_svfiprintf_r+0x32>
 8012438:	230c      	movs	r3, #12
 801243a:	603b      	str	r3, [r7, #0]
 801243c:	f04f 30ff 	mov.w	r0, #4294967295
 8012440:	b01d      	add	sp, #116	@ 0x74
 8012442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012446:	2340      	movs	r3, #64	@ 0x40
 8012448:	616b      	str	r3, [r5, #20]
 801244a:	2300      	movs	r3, #0
 801244c:	9309      	str	r3, [sp, #36]	@ 0x24
 801244e:	2320      	movs	r3, #32
 8012450:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012454:	f8cd 800c 	str.w	r8, [sp, #12]
 8012458:	2330      	movs	r3, #48	@ 0x30
 801245a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80125f8 <_svfiprintf_r+0x1e4>
 801245e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012462:	f04f 0901 	mov.w	r9, #1
 8012466:	4623      	mov	r3, r4
 8012468:	469a      	mov	sl, r3
 801246a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801246e:	b10a      	cbz	r2, 8012474 <_svfiprintf_r+0x60>
 8012470:	2a25      	cmp	r2, #37	@ 0x25
 8012472:	d1f9      	bne.n	8012468 <_svfiprintf_r+0x54>
 8012474:	ebba 0b04 	subs.w	fp, sl, r4
 8012478:	d00b      	beq.n	8012492 <_svfiprintf_r+0x7e>
 801247a:	465b      	mov	r3, fp
 801247c:	4622      	mov	r2, r4
 801247e:	4629      	mov	r1, r5
 8012480:	4638      	mov	r0, r7
 8012482:	f7ff ff6b 	bl	801235c <__ssputs_r>
 8012486:	3001      	adds	r0, #1
 8012488:	f000 80a7 	beq.w	80125da <_svfiprintf_r+0x1c6>
 801248c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801248e:	445a      	add	r2, fp
 8012490:	9209      	str	r2, [sp, #36]	@ 0x24
 8012492:	f89a 3000 	ldrb.w	r3, [sl]
 8012496:	2b00      	cmp	r3, #0
 8012498:	f000 809f 	beq.w	80125da <_svfiprintf_r+0x1c6>
 801249c:	2300      	movs	r3, #0
 801249e:	f04f 32ff 	mov.w	r2, #4294967295
 80124a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80124a6:	f10a 0a01 	add.w	sl, sl, #1
 80124aa:	9304      	str	r3, [sp, #16]
 80124ac:	9307      	str	r3, [sp, #28]
 80124ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80124b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80124b4:	4654      	mov	r4, sl
 80124b6:	2205      	movs	r2, #5
 80124b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80124bc:	484e      	ldr	r0, [pc, #312]	@ (80125f8 <_svfiprintf_r+0x1e4>)
 80124be:	f7ed fea7 	bl	8000210 <memchr>
 80124c2:	9a04      	ldr	r2, [sp, #16]
 80124c4:	b9d8      	cbnz	r0, 80124fe <_svfiprintf_r+0xea>
 80124c6:	06d0      	lsls	r0, r2, #27
 80124c8:	bf44      	itt	mi
 80124ca:	2320      	movmi	r3, #32
 80124cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124d0:	0711      	lsls	r1, r2, #28
 80124d2:	bf44      	itt	mi
 80124d4:	232b      	movmi	r3, #43	@ 0x2b
 80124d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80124da:	f89a 3000 	ldrb.w	r3, [sl]
 80124de:	2b2a      	cmp	r3, #42	@ 0x2a
 80124e0:	d015      	beq.n	801250e <_svfiprintf_r+0xfa>
 80124e2:	9a07      	ldr	r2, [sp, #28]
 80124e4:	4654      	mov	r4, sl
 80124e6:	2000      	movs	r0, #0
 80124e8:	f04f 0c0a 	mov.w	ip, #10
 80124ec:	4621      	mov	r1, r4
 80124ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80124f2:	3b30      	subs	r3, #48	@ 0x30
 80124f4:	2b09      	cmp	r3, #9
 80124f6:	d94b      	bls.n	8012590 <_svfiprintf_r+0x17c>
 80124f8:	b1b0      	cbz	r0, 8012528 <_svfiprintf_r+0x114>
 80124fa:	9207      	str	r2, [sp, #28]
 80124fc:	e014      	b.n	8012528 <_svfiprintf_r+0x114>
 80124fe:	eba0 0308 	sub.w	r3, r0, r8
 8012502:	fa09 f303 	lsl.w	r3, r9, r3
 8012506:	4313      	orrs	r3, r2
 8012508:	9304      	str	r3, [sp, #16]
 801250a:	46a2      	mov	sl, r4
 801250c:	e7d2      	b.n	80124b4 <_svfiprintf_r+0xa0>
 801250e:	9b03      	ldr	r3, [sp, #12]
 8012510:	1d19      	adds	r1, r3, #4
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	9103      	str	r1, [sp, #12]
 8012516:	2b00      	cmp	r3, #0
 8012518:	bfbb      	ittet	lt
 801251a:	425b      	neglt	r3, r3
 801251c:	f042 0202 	orrlt.w	r2, r2, #2
 8012520:	9307      	strge	r3, [sp, #28]
 8012522:	9307      	strlt	r3, [sp, #28]
 8012524:	bfb8      	it	lt
 8012526:	9204      	strlt	r2, [sp, #16]
 8012528:	7823      	ldrb	r3, [r4, #0]
 801252a:	2b2e      	cmp	r3, #46	@ 0x2e
 801252c:	d10a      	bne.n	8012544 <_svfiprintf_r+0x130>
 801252e:	7863      	ldrb	r3, [r4, #1]
 8012530:	2b2a      	cmp	r3, #42	@ 0x2a
 8012532:	d132      	bne.n	801259a <_svfiprintf_r+0x186>
 8012534:	9b03      	ldr	r3, [sp, #12]
 8012536:	1d1a      	adds	r2, r3, #4
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	9203      	str	r2, [sp, #12]
 801253c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012540:	3402      	adds	r4, #2
 8012542:	9305      	str	r3, [sp, #20]
 8012544:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012608 <_svfiprintf_r+0x1f4>
 8012548:	7821      	ldrb	r1, [r4, #0]
 801254a:	2203      	movs	r2, #3
 801254c:	4650      	mov	r0, sl
 801254e:	f7ed fe5f 	bl	8000210 <memchr>
 8012552:	b138      	cbz	r0, 8012564 <_svfiprintf_r+0x150>
 8012554:	9b04      	ldr	r3, [sp, #16]
 8012556:	eba0 000a 	sub.w	r0, r0, sl
 801255a:	2240      	movs	r2, #64	@ 0x40
 801255c:	4082      	lsls	r2, r0
 801255e:	4313      	orrs	r3, r2
 8012560:	3401      	adds	r4, #1
 8012562:	9304      	str	r3, [sp, #16]
 8012564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012568:	4824      	ldr	r0, [pc, #144]	@ (80125fc <_svfiprintf_r+0x1e8>)
 801256a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801256e:	2206      	movs	r2, #6
 8012570:	f7ed fe4e 	bl	8000210 <memchr>
 8012574:	2800      	cmp	r0, #0
 8012576:	d036      	beq.n	80125e6 <_svfiprintf_r+0x1d2>
 8012578:	4b21      	ldr	r3, [pc, #132]	@ (8012600 <_svfiprintf_r+0x1ec>)
 801257a:	bb1b      	cbnz	r3, 80125c4 <_svfiprintf_r+0x1b0>
 801257c:	9b03      	ldr	r3, [sp, #12]
 801257e:	3307      	adds	r3, #7
 8012580:	f023 0307 	bic.w	r3, r3, #7
 8012584:	3308      	adds	r3, #8
 8012586:	9303      	str	r3, [sp, #12]
 8012588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801258a:	4433      	add	r3, r6
 801258c:	9309      	str	r3, [sp, #36]	@ 0x24
 801258e:	e76a      	b.n	8012466 <_svfiprintf_r+0x52>
 8012590:	fb0c 3202 	mla	r2, ip, r2, r3
 8012594:	460c      	mov	r4, r1
 8012596:	2001      	movs	r0, #1
 8012598:	e7a8      	b.n	80124ec <_svfiprintf_r+0xd8>
 801259a:	2300      	movs	r3, #0
 801259c:	3401      	adds	r4, #1
 801259e:	9305      	str	r3, [sp, #20]
 80125a0:	4619      	mov	r1, r3
 80125a2:	f04f 0c0a 	mov.w	ip, #10
 80125a6:	4620      	mov	r0, r4
 80125a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80125ac:	3a30      	subs	r2, #48	@ 0x30
 80125ae:	2a09      	cmp	r2, #9
 80125b0:	d903      	bls.n	80125ba <_svfiprintf_r+0x1a6>
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d0c6      	beq.n	8012544 <_svfiprintf_r+0x130>
 80125b6:	9105      	str	r1, [sp, #20]
 80125b8:	e7c4      	b.n	8012544 <_svfiprintf_r+0x130>
 80125ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80125be:	4604      	mov	r4, r0
 80125c0:	2301      	movs	r3, #1
 80125c2:	e7f0      	b.n	80125a6 <_svfiprintf_r+0x192>
 80125c4:	ab03      	add	r3, sp, #12
 80125c6:	9300      	str	r3, [sp, #0]
 80125c8:	462a      	mov	r2, r5
 80125ca:	4b0e      	ldr	r3, [pc, #56]	@ (8012604 <_svfiprintf_r+0x1f0>)
 80125cc:	a904      	add	r1, sp, #16
 80125ce:	4638      	mov	r0, r7
 80125d0:	f3af 8000 	nop.w
 80125d4:	1c42      	adds	r2, r0, #1
 80125d6:	4606      	mov	r6, r0
 80125d8:	d1d6      	bne.n	8012588 <_svfiprintf_r+0x174>
 80125da:	89ab      	ldrh	r3, [r5, #12]
 80125dc:	065b      	lsls	r3, r3, #25
 80125de:	f53f af2d 	bmi.w	801243c <_svfiprintf_r+0x28>
 80125e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80125e4:	e72c      	b.n	8012440 <_svfiprintf_r+0x2c>
 80125e6:	ab03      	add	r3, sp, #12
 80125e8:	9300      	str	r3, [sp, #0]
 80125ea:	462a      	mov	r2, r5
 80125ec:	4b05      	ldr	r3, [pc, #20]	@ (8012604 <_svfiprintf_r+0x1f0>)
 80125ee:	a904      	add	r1, sp, #16
 80125f0:	4638      	mov	r0, r7
 80125f2:	f000 f879 	bl	80126e8 <_printf_i>
 80125f6:	e7ed      	b.n	80125d4 <_svfiprintf_r+0x1c0>
 80125f8:	080146cc 	.word	0x080146cc
 80125fc:	080146d6 	.word	0x080146d6
 8012600:	00000000 	.word	0x00000000
 8012604:	0801235d 	.word	0x0801235d
 8012608:	080146d2 	.word	0x080146d2

0801260c <_printf_common>:
 801260c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012610:	4616      	mov	r6, r2
 8012612:	4698      	mov	r8, r3
 8012614:	688a      	ldr	r2, [r1, #8]
 8012616:	690b      	ldr	r3, [r1, #16]
 8012618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801261c:	4293      	cmp	r3, r2
 801261e:	bfb8      	it	lt
 8012620:	4613      	movlt	r3, r2
 8012622:	6033      	str	r3, [r6, #0]
 8012624:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012628:	4607      	mov	r7, r0
 801262a:	460c      	mov	r4, r1
 801262c:	b10a      	cbz	r2, 8012632 <_printf_common+0x26>
 801262e:	3301      	adds	r3, #1
 8012630:	6033      	str	r3, [r6, #0]
 8012632:	6823      	ldr	r3, [r4, #0]
 8012634:	0699      	lsls	r1, r3, #26
 8012636:	bf42      	ittt	mi
 8012638:	6833      	ldrmi	r3, [r6, #0]
 801263a:	3302      	addmi	r3, #2
 801263c:	6033      	strmi	r3, [r6, #0]
 801263e:	6825      	ldr	r5, [r4, #0]
 8012640:	f015 0506 	ands.w	r5, r5, #6
 8012644:	d106      	bne.n	8012654 <_printf_common+0x48>
 8012646:	f104 0a19 	add.w	sl, r4, #25
 801264a:	68e3      	ldr	r3, [r4, #12]
 801264c:	6832      	ldr	r2, [r6, #0]
 801264e:	1a9b      	subs	r3, r3, r2
 8012650:	42ab      	cmp	r3, r5
 8012652:	dc26      	bgt.n	80126a2 <_printf_common+0x96>
 8012654:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012658:	6822      	ldr	r2, [r4, #0]
 801265a:	3b00      	subs	r3, #0
 801265c:	bf18      	it	ne
 801265e:	2301      	movne	r3, #1
 8012660:	0692      	lsls	r2, r2, #26
 8012662:	d42b      	bmi.n	80126bc <_printf_common+0xb0>
 8012664:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012668:	4641      	mov	r1, r8
 801266a:	4638      	mov	r0, r7
 801266c:	47c8      	blx	r9
 801266e:	3001      	adds	r0, #1
 8012670:	d01e      	beq.n	80126b0 <_printf_common+0xa4>
 8012672:	6823      	ldr	r3, [r4, #0]
 8012674:	6922      	ldr	r2, [r4, #16]
 8012676:	f003 0306 	and.w	r3, r3, #6
 801267a:	2b04      	cmp	r3, #4
 801267c:	bf02      	ittt	eq
 801267e:	68e5      	ldreq	r5, [r4, #12]
 8012680:	6833      	ldreq	r3, [r6, #0]
 8012682:	1aed      	subeq	r5, r5, r3
 8012684:	68a3      	ldr	r3, [r4, #8]
 8012686:	bf0c      	ite	eq
 8012688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801268c:	2500      	movne	r5, #0
 801268e:	4293      	cmp	r3, r2
 8012690:	bfc4      	itt	gt
 8012692:	1a9b      	subgt	r3, r3, r2
 8012694:	18ed      	addgt	r5, r5, r3
 8012696:	2600      	movs	r6, #0
 8012698:	341a      	adds	r4, #26
 801269a:	42b5      	cmp	r5, r6
 801269c:	d11a      	bne.n	80126d4 <_printf_common+0xc8>
 801269e:	2000      	movs	r0, #0
 80126a0:	e008      	b.n	80126b4 <_printf_common+0xa8>
 80126a2:	2301      	movs	r3, #1
 80126a4:	4652      	mov	r2, sl
 80126a6:	4641      	mov	r1, r8
 80126a8:	4638      	mov	r0, r7
 80126aa:	47c8      	blx	r9
 80126ac:	3001      	adds	r0, #1
 80126ae:	d103      	bne.n	80126b8 <_printf_common+0xac>
 80126b0:	f04f 30ff 	mov.w	r0, #4294967295
 80126b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80126b8:	3501      	adds	r5, #1
 80126ba:	e7c6      	b.n	801264a <_printf_common+0x3e>
 80126bc:	18e1      	adds	r1, r4, r3
 80126be:	1c5a      	adds	r2, r3, #1
 80126c0:	2030      	movs	r0, #48	@ 0x30
 80126c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80126c6:	4422      	add	r2, r4
 80126c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80126cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80126d0:	3302      	adds	r3, #2
 80126d2:	e7c7      	b.n	8012664 <_printf_common+0x58>
 80126d4:	2301      	movs	r3, #1
 80126d6:	4622      	mov	r2, r4
 80126d8:	4641      	mov	r1, r8
 80126da:	4638      	mov	r0, r7
 80126dc:	47c8      	blx	r9
 80126de:	3001      	adds	r0, #1
 80126e0:	d0e6      	beq.n	80126b0 <_printf_common+0xa4>
 80126e2:	3601      	adds	r6, #1
 80126e4:	e7d9      	b.n	801269a <_printf_common+0x8e>
	...

080126e8 <_printf_i>:
 80126e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80126ec:	7e0f      	ldrb	r7, [r1, #24]
 80126ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80126f0:	2f78      	cmp	r7, #120	@ 0x78
 80126f2:	4691      	mov	r9, r2
 80126f4:	4680      	mov	r8, r0
 80126f6:	460c      	mov	r4, r1
 80126f8:	469a      	mov	sl, r3
 80126fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80126fe:	d807      	bhi.n	8012710 <_printf_i+0x28>
 8012700:	2f62      	cmp	r7, #98	@ 0x62
 8012702:	d80a      	bhi.n	801271a <_printf_i+0x32>
 8012704:	2f00      	cmp	r7, #0
 8012706:	f000 80d2 	beq.w	80128ae <_printf_i+0x1c6>
 801270a:	2f58      	cmp	r7, #88	@ 0x58
 801270c:	f000 80b9 	beq.w	8012882 <_printf_i+0x19a>
 8012710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012714:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012718:	e03a      	b.n	8012790 <_printf_i+0xa8>
 801271a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801271e:	2b15      	cmp	r3, #21
 8012720:	d8f6      	bhi.n	8012710 <_printf_i+0x28>
 8012722:	a101      	add	r1, pc, #4	@ (adr r1, 8012728 <_printf_i+0x40>)
 8012724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012728:	08012781 	.word	0x08012781
 801272c:	08012795 	.word	0x08012795
 8012730:	08012711 	.word	0x08012711
 8012734:	08012711 	.word	0x08012711
 8012738:	08012711 	.word	0x08012711
 801273c:	08012711 	.word	0x08012711
 8012740:	08012795 	.word	0x08012795
 8012744:	08012711 	.word	0x08012711
 8012748:	08012711 	.word	0x08012711
 801274c:	08012711 	.word	0x08012711
 8012750:	08012711 	.word	0x08012711
 8012754:	08012895 	.word	0x08012895
 8012758:	080127bf 	.word	0x080127bf
 801275c:	0801284f 	.word	0x0801284f
 8012760:	08012711 	.word	0x08012711
 8012764:	08012711 	.word	0x08012711
 8012768:	080128b7 	.word	0x080128b7
 801276c:	08012711 	.word	0x08012711
 8012770:	080127bf 	.word	0x080127bf
 8012774:	08012711 	.word	0x08012711
 8012778:	08012711 	.word	0x08012711
 801277c:	08012857 	.word	0x08012857
 8012780:	6833      	ldr	r3, [r6, #0]
 8012782:	1d1a      	adds	r2, r3, #4
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	6032      	str	r2, [r6, #0]
 8012788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801278c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012790:	2301      	movs	r3, #1
 8012792:	e09d      	b.n	80128d0 <_printf_i+0x1e8>
 8012794:	6833      	ldr	r3, [r6, #0]
 8012796:	6820      	ldr	r0, [r4, #0]
 8012798:	1d19      	adds	r1, r3, #4
 801279a:	6031      	str	r1, [r6, #0]
 801279c:	0606      	lsls	r6, r0, #24
 801279e:	d501      	bpl.n	80127a4 <_printf_i+0xbc>
 80127a0:	681d      	ldr	r5, [r3, #0]
 80127a2:	e003      	b.n	80127ac <_printf_i+0xc4>
 80127a4:	0645      	lsls	r5, r0, #25
 80127a6:	d5fb      	bpl.n	80127a0 <_printf_i+0xb8>
 80127a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80127ac:	2d00      	cmp	r5, #0
 80127ae:	da03      	bge.n	80127b8 <_printf_i+0xd0>
 80127b0:	232d      	movs	r3, #45	@ 0x2d
 80127b2:	426d      	negs	r5, r5
 80127b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80127b8:	4859      	ldr	r0, [pc, #356]	@ (8012920 <_printf_i+0x238>)
 80127ba:	230a      	movs	r3, #10
 80127bc:	e011      	b.n	80127e2 <_printf_i+0xfa>
 80127be:	6821      	ldr	r1, [r4, #0]
 80127c0:	6833      	ldr	r3, [r6, #0]
 80127c2:	0608      	lsls	r0, r1, #24
 80127c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80127c8:	d402      	bmi.n	80127d0 <_printf_i+0xe8>
 80127ca:	0649      	lsls	r1, r1, #25
 80127cc:	bf48      	it	mi
 80127ce:	b2ad      	uxthmi	r5, r5
 80127d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80127d2:	4853      	ldr	r0, [pc, #332]	@ (8012920 <_printf_i+0x238>)
 80127d4:	6033      	str	r3, [r6, #0]
 80127d6:	bf14      	ite	ne
 80127d8:	230a      	movne	r3, #10
 80127da:	2308      	moveq	r3, #8
 80127dc:	2100      	movs	r1, #0
 80127de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80127e2:	6866      	ldr	r6, [r4, #4]
 80127e4:	60a6      	str	r6, [r4, #8]
 80127e6:	2e00      	cmp	r6, #0
 80127e8:	bfa2      	ittt	ge
 80127ea:	6821      	ldrge	r1, [r4, #0]
 80127ec:	f021 0104 	bicge.w	r1, r1, #4
 80127f0:	6021      	strge	r1, [r4, #0]
 80127f2:	b90d      	cbnz	r5, 80127f8 <_printf_i+0x110>
 80127f4:	2e00      	cmp	r6, #0
 80127f6:	d04b      	beq.n	8012890 <_printf_i+0x1a8>
 80127f8:	4616      	mov	r6, r2
 80127fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80127fe:	fb03 5711 	mls	r7, r3, r1, r5
 8012802:	5dc7      	ldrb	r7, [r0, r7]
 8012804:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012808:	462f      	mov	r7, r5
 801280a:	42bb      	cmp	r3, r7
 801280c:	460d      	mov	r5, r1
 801280e:	d9f4      	bls.n	80127fa <_printf_i+0x112>
 8012810:	2b08      	cmp	r3, #8
 8012812:	d10b      	bne.n	801282c <_printf_i+0x144>
 8012814:	6823      	ldr	r3, [r4, #0]
 8012816:	07df      	lsls	r7, r3, #31
 8012818:	d508      	bpl.n	801282c <_printf_i+0x144>
 801281a:	6923      	ldr	r3, [r4, #16]
 801281c:	6861      	ldr	r1, [r4, #4]
 801281e:	4299      	cmp	r1, r3
 8012820:	bfde      	ittt	le
 8012822:	2330      	movle	r3, #48	@ 0x30
 8012824:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012828:	f106 36ff 	addle.w	r6, r6, #4294967295
 801282c:	1b92      	subs	r2, r2, r6
 801282e:	6122      	str	r2, [r4, #16]
 8012830:	f8cd a000 	str.w	sl, [sp]
 8012834:	464b      	mov	r3, r9
 8012836:	aa03      	add	r2, sp, #12
 8012838:	4621      	mov	r1, r4
 801283a:	4640      	mov	r0, r8
 801283c:	f7ff fee6 	bl	801260c <_printf_common>
 8012840:	3001      	adds	r0, #1
 8012842:	d14a      	bne.n	80128da <_printf_i+0x1f2>
 8012844:	f04f 30ff 	mov.w	r0, #4294967295
 8012848:	b004      	add	sp, #16
 801284a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801284e:	6823      	ldr	r3, [r4, #0]
 8012850:	f043 0320 	orr.w	r3, r3, #32
 8012854:	6023      	str	r3, [r4, #0]
 8012856:	4833      	ldr	r0, [pc, #204]	@ (8012924 <_printf_i+0x23c>)
 8012858:	2778      	movs	r7, #120	@ 0x78
 801285a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801285e:	6823      	ldr	r3, [r4, #0]
 8012860:	6831      	ldr	r1, [r6, #0]
 8012862:	061f      	lsls	r7, r3, #24
 8012864:	f851 5b04 	ldr.w	r5, [r1], #4
 8012868:	d402      	bmi.n	8012870 <_printf_i+0x188>
 801286a:	065f      	lsls	r7, r3, #25
 801286c:	bf48      	it	mi
 801286e:	b2ad      	uxthmi	r5, r5
 8012870:	6031      	str	r1, [r6, #0]
 8012872:	07d9      	lsls	r1, r3, #31
 8012874:	bf44      	itt	mi
 8012876:	f043 0320 	orrmi.w	r3, r3, #32
 801287a:	6023      	strmi	r3, [r4, #0]
 801287c:	b11d      	cbz	r5, 8012886 <_printf_i+0x19e>
 801287e:	2310      	movs	r3, #16
 8012880:	e7ac      	b.n	80127dc <_printf_i+0xf4>
 8012882:	4827      	ldr	r0, [pc, #156]	@ (8012920 <_printf_i+0x238>)
 8012884:	e7e9      	b.n	801285a <_printf_i+0x172>
 8012886:	6823      	ldr	r3, [r4, #0]
 8012888:	f023 0320 	bic.w	r3, r3, #32
 801288c:	6023      	str	r3, [r4, #0]
 801288e:	e7f6      	b.n	801287e <_printf_i+0x196>
 8012890:	4616      	mov	r6, r2
 8012892:	e7bd      	b.n	8012810 <_printf_i+0x128>
 8012894:	6833      	ldr	r3, [r6, #0]
 8012896:	6825      	ldr	r5, [r4, #0]
 8012898:	6961      	ldr	r1, [r4, #20]
 801289a:	1d18      	adds	r0, r3, #4
 801289c:	6030      	str	r0, [r6, #0]
 801289e:	062e      	lsls	r6, r5, #24
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	d501      	bpl.n	80128a8 <_printf_i+0x1c0>
 80128a4:	6019      	str	r1, [r3, #0]
 80128a6:	e002      	b.n	80128ae <_printf_i+0x1c6>
 80128a8:	0668      	lsls	r0, r5, #25
 80128aa:	d5fb      	bpl.n	80128a4 <_printf_i+0x1bc>
 80128ac:	8019      	strh	r1, [r3, #0]
 80128ae:	2300      	movs	r3, #0
 80128b0:	6123      	str	r3, [r4, #16]
 80128b2:	4616      	mov	r6, r2
 80128b4:	e7bc      	b.n	8012830 <_printf_i+0x148>
 80128b6:	6833      	ldr	r3, [r6, #0]
 80128b8:	1d1a      	adds	r2, r3, #4
 80128ba:	6032      	str	r2, [r6, #0]
 80128bc:	681e      	ldr	r6, [r3, #0]
 80128be:	6862      	ldr	r2, [r4, #4]
 80128c0:	2100      	movs	r1, #0
 80128c2:	4630      	mov	r0, r6
 80128c4:	f7ed fca4 	bl	8000210 <memchr>
 80128c8:	b108      	cbz	r0, 80128ce <_printf_i+0x1e6>
 80128ca:	1b80      	subs	r0, r0, r6
 80128cc:	6060      	str	r0, [r4, #4]
 80128ce:	6863      	ldr	r3, [r4, #4]
 80128d0:	6123      	str	r3, [r4, #16]
 80128d2:	2300      	movs	r3, #0
 80128d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80128d8:	e7aa      	b.n	8012830 <_printf_i+0x148>
 80128da:	6923      	ldr	r3, [r4, #16]
 80128dc:	4632      	mov	r2, r6
 80128de:	4649      	mov	r1, r9
 80128e0:	4640      	mov	r0, r8
 80128e2:	47d0      	blx	sl
 80128e4:	3001      	adds	r0, #1
 80128e6:	d0ad      	beq.n	8012844 <_printf_i+0x15c>
 80128e8:	6823      	ldr	r3, [r4, #0]
 80128ea:	079b      	lsls	r3, r3, #30
 80128ec:	d413      	bmi.n	8012916 <_printf_i+0x22e>
 80128ee:	68e0      	ldr	r0, [r4, #12]
 80128f0:	9b03      	ldr	r3, [sp, #12]
 80128f2:	4298      	cmp	r0, r3
 80128f4:	bfb8      	it	lt
 80128f6:	4618      	movlt	r0, r3
 80128f8:	e7a6      	b.n	8012848 <_printf_i+0x160>
 80128fa:	2301      	movs	r3, #1
 80128fc:	4632      	mov	r2, r6
 80128fe:	4649      	mov	r1, r9
 8012900:	4640      	mov	r0, r8
 8012902:	47d0      	blx	sl
 8012904:	3001      	adds	r0, #1
 8012906:	d09d      	beq.n	8012844 <_printf_i+0x15c>
 8012908:	3501      	adds	r5, #1
 801290a:	68e3      	ldr	r3, [r4, #12]
 801290c:	9903      	ldr	r1, [sp, #12]
 801290e:	1a5b      	subs	r3, r3, r1
 8012910:	42ab      	cmp	r3, r5
 8012912:	dcf2      	bgt.n	80128fa <_printf_i+0x212>
 8012914:	e7eb      	b.n	80128ee <_printf_i+0x206>
 8012916:	2500      	movs	r5, #0
 8012918:	f104 0619 	add.w	r6, r4, #25
 801291c:	e7f5      	b.n	801290a <_printf_i+0x222>
 801291e:	bf00      	nop
 8012920:	080146dd 	.word	0x080146dd
 8012924:	080146ee 	.word	0x080146ee

08012928 <memmove>:
 8012928:	4288      	cmp	r0, r1
 801292a:	b510      	push	{r4, lr}
 801292c:	eb01 0402 	add.w	r4, r1, r2
 8012930:	d902      	bls.n	8012938 <memmove+0x10>
 8012932:	4284      	cmp	r4, r0
 8012934:	4623      	mov	r3, r4
 8012936:	d807      	bhi.n	8012948 <memmove+0x20>
 8012938:	1e43      	subs	r3, r0, #1
 801293a:	42a1      	cmp	r1, r4
 801293c:	d008      	beq.n	8012950 <memmove+0x28>
 801293e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012942:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012946:	e7f8      	b.n	801293a <memmove+0x12>
 8012948:	4402      	add	r2, r0
 801294a:	4601      	mov	r1, r0
 801294c:	428a      	cmp	r2, r1
 801294e:	d100      	bne.n	8012952 <memmove+0x2a>
 8012950:	bd10      	pop	{r4, pc}
 8012952:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012956:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801295a:	e7f7      	b.n	801294c <memmove+0x24>

0801295c <_sbrk_r>:
 801295c:	b538      	push	{r3, r4, r5, lr}
 801295e:	4d06      	ldr	r5, [pc, #24]	@ (8012978 <_sbrk_r+0x1c>)
 8012960:	2300      	movs	r3, #0
 8012962:	4604      	mov	r4, r0
 8012964:	4608      	mov	r0, r1
 8012966:	602b      	str	r3, [r5, #0]
 8012968:	f7f1 f986 	bl	8003c78 <_sbrk>
 801296c:	1c43      	adds	r3, r0, #1
 801296e:	d102      	bne.n	8012976 <_sbrk_r+0x1a>
 8012970:	682b      	ldr	r3, [r5, #0]
 8012972:	b103      	cbz	r3, 8012976 <_sbrk_r+0x1a>
 8012974:	6023      	str	r3, [r4, #0]
 8012976:	bd38      	pop	{r3, r4, r5, pc}
 8012978:	20004bec 	.word	0x20004bec

0801297c <_realloc_r>:
 801297c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012980:	4680      	mov	r8, r0
 8012982:	4615      	mov	r5, r2
 8012984:	460c      	mov	r4, r1
 8012986:	b921      	cbnz	r1, 8012992 <_realloc_r+0x16>
 8012988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801298c:	4611      	mov	r1, r2
 801298e:	f7ff bc59 	b.w	8012244 <_malloc_r>
 8012992:	b92a      	cbnz	r2, 80129a0 <_realloc_r+0x24>
 8012994:	f7ff fbea 	bl	801216c <_free_r>
 8012998:	2400      	movs	r4, #0
 801299a:	4620      	mov	r0, r4
 801299c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80129a0:	f000 f81a 	bl	80129d8 <_malloc_usable_size_r>
 80129a4:	4285      	cmp	r5, r0
 80129a6:	4606      	mov	r6, r0
 80129a8:	d802      	bhi.n	80129b0 <_realloc_r+0x34>
 80129aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80129ae:	d8f4      	bhi.n	801299a <_realloc_r+0x1e>
 80129b0:	4629      	mov	r1, r5
 80129b2:	4640      	mov	r0, r8
 80129b4:	f7ff fc46 	bl	8012244 <_malloc_r>
 80129b8:	4607      	mov	r7, r0
 80129ba:	2800      	cmp	r0, #0
 80129bc:	d0ec      	beq.n	8012998 <_realloc_r+0x1c>
 80129be:	42b5      	cmp	r5, r6
 80129c0:	462a      	mov	r2, r5
 80129c2:	4621      	mov	r1, r4
 80129c4:	bf28      	it	cs
 80129c6:	4632      	movcs	r2, r6
 80129c8:	f7ff fbc2 	bl	8012150 <memcpy>
 80129cc:	4621      	mov	r1, r4
 80129ce:	4640      	mov	r0, r8
 80129d0:	f7ff fbcc 	bl	801216c <_free_r>
 80129d4:	463c      	mov	r4, r7
 80129d6:	e7e0      	b.n	801299a <_realloc_r+0x1e>

080129d8 <_malloc_usable_size_r>:
 80129d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80129dc:	1f18      	subs	r0, r3, #4
 80129de:	2b00      	cmp	r3, #0
 80129e0:	bfbc      	itt	lt
 80129e2:	580b      	ldrlt	r3, [r1, r0]
 80129e4:	18c0      	addlt	r0, r0, r3
 80129e6:	4770      	bx	lr

080129e8 <_init>:
 80129e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129ea:	bf00      	nop
 80129ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129ee:	bc08      	pop	{r3}
 80129f0:	469e      	mov	lr, r3
 80129f2:	4770      	bx	lr

080129f4 <_fini>:
 80129f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129f6:	bf00      	nop
 80129f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80129fa:	bc08      	pop	{r3}
 80129fc:	469e      	mov	lr, r3
 80129fe:	4770      	bx	lr
