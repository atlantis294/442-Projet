
Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013538  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021e0  08013708  08013708  00014708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080158e8  080158e8  0001709c  2**0
                  CONTENTS
  4 .ARM          00000008  080158e8  080158e8  000168e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080158f0  080158f0  0001709c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080158f0  080158f0  000168f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080158f4  080158f4  000168f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  080158f8  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00011fc8  2000009c  08015994  0001709c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012064  08015994  00018064  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001709c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038104  00000000  00000000  000170cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008404  00000000  00000000  0004f1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002dc8  00000000  00000000  000575d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002322  00000000  00000000  0005a3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031c32  00000000  00000000  0005c6c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003e5e5  00000000  00000000  0008e2f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011c1b4  00000000  00000000  000cc8d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e8a8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c214  00000000  00000000  001e8ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001f4ce4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080136f0 	.word	0x080136f0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	080136f0 	.word	0x080136f0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <MX_ADC1_Init+0xa0>)
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000602:	f004 fe1d 	bl	8005240 <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800060c:	f001 ff4e 	bl	80024ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000622:	f004 ffb7 	bl	8005594 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800062c:	f001 ff3e 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000b8 	.word	0x200000b8
 800063c:	40012000 	.word	0x40012000
 8000640:	0f000001 	.word	0x0f000001

08000644 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <MX_ADC3_Init+0x9c>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC3_Init+0x98>)
 800065e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000662:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_ADC3_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <MX_ADC3_Init+0xa0>)
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ADC3_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a6:	f004 fdcb 	bl	8005240 <HAL_ADC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006b0:	f001 fefc 	bl	80024ac <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b4:	2306      	movs	r3, #6
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006c6:	f004 ff65 	bl	8005594 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006d0:	f001 feec 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000100 	.word	0x20000100
 80006e0:	40012200 	.word	0x40012200
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	@ 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d124      	bne.n	8000754 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000714:	6453      	str	r3, [r2, #68]	@ 0x44
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	481a      	ldr	r0, [pc, #104]	@ (80007b8 <HAL_ADC_MspInit+0xd0>)
 800074e:	f006 f8e3 	bl	8006918 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000752:	e029      	b.n	80007a8 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <HAL_ADC_MspInit+0xd4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d124      	bne.n	80007a8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000768:	6453      	str	r3, [r2, #68]	@ 0x44
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 800078e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <HAL_ADC_MspInit+0xd8>)
 80007a4:	f006 f8b8 	bl	8006918 <HAL_GPIO_Init>
}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	@ 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40012000 	.word	0x40012000
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40012200 	.word	0x40012200
 80007c0:	40021400 	.word	0x40021400

080007c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_DMA_Init+0x48>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a0f      	ldr	r2, [pc, #60]	@ (800080c <MX_DMA_Init+0x48>)
 80007d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <MX_DMA_Init+0x48>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 6, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2106      	movs	r1, #6
 80007e6:	203b      	movs	r0, #59	@ 0x3b
 80007e8:	f005 f9dc 	bl	8005ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007ec:	203b      	movs	r0, #59	@ 0x3b
 80007ee:	f005 f9f5 	bl	8005bdc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 6, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2106      	movs	r1, #6
 80007f6:	2045      	movs	r0, #69	@ 0x45
 80007f8:	f005 f9d4 	bl	8005ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80007fc:	2045      	movs	r0, #69	@ 0x45
 80007fe:	f005 f9ed 	bl	8005bdc <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000814:	4b15      	ldr	r3, [pc, #84]	@ (800086c <MX_DMA2D_Init+0x5c>)
 8000816:	4a16      	ldr	r2, [pc, #88]	@ (8000870 <MX_DMA2D_Init+0x60>)
 8000818:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_DMA2D_Init+0x5c>)
 800081c:	2200      	movs	r2, #0
 800081e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_DMA2D_Init+0x5c>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_DMA2D_Init+0x5c>)
 8000828:	2200      	movs	r2, #0
 800082a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_DMA2D_Init+0x5c>)
 800082e:	2200      	movs	r2, #0
 8000830:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_DMA2D_Init+0x5c>)
 8000834:	2200      	movs	r2, #0
 8000836:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000838:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_DMA2D_Init+0x5c>)
 800083a:	2200      	movs	r2, #0
 800083c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800083e:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <MX_DMA2D_Init+0x5c>)
 8000840:	2200      	movs	r2, #0
 8000842:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000844:	4809      	ldr	r0, [pc, #36]	@ (800086c <MX_DMA2D_Init+0x5c>)
 8000846:	f005 fddb 	bl	8006400 <HAL_DMA2D_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000850:	f001 fe2c 	bl	80024ac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000854:	2101      	movs	r1, #1
 8000856:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_DMA2D_Init+0x5c>)
 8000858:	f005 ff30 	bl	80066bc <HAL_DMA2D_ConfigLayer>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000862:	f001 fe23 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000148 	.word	0x20000148
 8000870:	4002b000 	.word	0x4002b000

08000874 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0a      	ldr	r2, [pc, #40]	@ (80008ac <HAL_DMA2D_MspInit+0x38>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d10b      	bne.n	800089e <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000886:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <HAL_DMA2D_MspInit+0x3c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a09      	ldr	r2, [pc, #36]	@ (80008b0 <HAL_DMA2D_MspInit+0x3c>)
 800088c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <HAL_DMA2D_MspInit+0x3c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800089a:	60fb      	str	r3, [r7, #12]
 800089c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800089e:	bf00      	nop
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	4002b000 	.word	0x4002b000
 80008b0:	40023800 	.word	0x40023800

080008b4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b088      	sub	sp, #32
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
 80008c8:	615a      	str	r2, [r3, #20]
 80008ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80008cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <MX_FMC_Init+0x94>)
 80008ce:	4a1f      	ldr	r2, [pc, #124]	@ (800094c <MX_FMC_Init+0x98>)
 80008d0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80008d2:	4b1d      	ldr	r3, [pc, #116]	@ (8000948 <MX_FMC_Init+0x94>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80008d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000948 <MX_FMC_Init+0x94>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80008de:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <MX_FMC_Init+0x94>)
 80008e0:	2204      	movs	r2, #4
 80008e2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <MX_FMC_Init+0x94>)
 80008e6:	2210      	movs	r2, #16
 80008e8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80008ea:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <MX_FMC_Init+0x94>)
 80008ec:	2240      	movs	r2, #64	@ 0x40
 80008ee:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80008f0:	4b15      	ldr	r3, [pc, #84]	@ (8000948 <MX_FMC_Init+0x94>)
 80008f2:	2280      	movs	r2, #128	@ 0x80
 80008f4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80008f6:	4b14      	ldr	r3, [pc, #80]	@ (8000948 <MX_FMC_Init+0x94>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80008fc:	4b12      	ldr	r3, [pc, #72]	@ (8000948 <MX_FMC_Init+0x94>)
 80008fe:	2200      	movs	r2, #0
 8000900:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000902:	4b11      	ldr	r3, [pc, #68]	@ (8000948 <MX_FMC_Init+0x94>)
 8000904:	2200      	movs	r2, #0
 8000906:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000908:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <MX_FMC_Init+0x94>)
 800090a:	2200      	movs	r2, #0
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 800090e:	2310      	movs	r3, #16
 8000910:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000912:	2310      	movs	r3, #16
 8000914:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000916:	2310      	movs	r3, #16
 8000918:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800091a:	2310      	movs	r3, #16
 800091c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 800091e:	2310      	movs	r3, #16
 8000920:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000922:	2310      	movs	r3, #16
 8000924:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000926:	2310      	movs	r3, #16
 8000928:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	@ (8000948 <MX_FMC_Init+0x94>)
 8000930:	f00a faca 	bl	800aec8 <HAL_SDRAM_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800093a:	f001 fdb7 	bl	80024ac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800093e:	bf00      	nop
 8000940:	3720      	adds	r7, #32
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000188 	.word	0x20000188
 800094c:	a0000140 	.word	0xa0000140

08000950 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000950:	b580      	push	{r7, lr}
 8000952:	b086      	sub	sp, #24
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000964:	4b3a      	ldr	r3, [pc, #232]	@ (8000a50 <HAL_FMC_MspInit+0x100>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d16d      	bne.n	8000a48 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800096c:	4b38      	ldr	r3, [pc, #224]	@ (8000a50 <HAL_FMC_MspInit+0x100>)
 800096e:	2201      	movs	r2, #1
 8000970:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000972:	4b38      	ldr	r3, [pc, #224]	@ (8000a54 <HAL_FMC_MspInit+0x104>)
 8000974:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000976:	4a37      	ldr	r2, [pc, #220]	@ (8000a54 <HAL_FMC_MspInit+0x104>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6393      	str	r3, [r2, #56]	@ 0x38
 800097e:	4b35      	ldr	r3, [pc, #212]	@ (8000a54 <HAL_FMC_MspInit+0x104>)
 8000980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800098a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800098e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800099c:	230c      	movs	r3, #12
 800099e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	4619      	mov	r1, r3
 80009a4:	482c      	ldr	r0, [pc, #176]	@ (8000a58 <HAL_FMC_MspInit+0x108>)
 80009a6:	f005 ffb7 	bl	8006918 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80009aa:	f248 1333 	movw	r3, #33075	@ 0x8133
 80009ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b0:	2302      	movs	r3, #2
 80009b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b8:	2303      	movs	r3, #3
 80009ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009bc:	230c      	movs	r3, #12
 80009be:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	4619      	mov	r1, r3
 80009c4:	4825      	ldr	r0, [pc, #148]	@ (8000a5c <HAL_FMC_MspInit+0x10c>)
 80009c6:	f005 ffa7 	bl	8006918 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80009ca:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80009ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d0:	2302      	movs	r3, #2
 80009d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d8:	2303      	movs	r3, #3
 80009da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009dc:	230c      	movs	r3, #12
 80009de:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	4619      	mov	r1, r3
 80009e4:	481e      	ldr	r0, [pc, #120]	@ (8000a60 <HAL_FMC_MspInit+0x110>)
 80009e6:	f005 ff97 	bl	8006918 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009ea:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80009ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009fc:	230c      	movs	r3, #12
 80009fe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	4619      	mov	r1, r3
 8000a04:	4817      	ldr	r0, [pc, #92]	@ (8000a64 <HAL_FMC_MspInit+0x114>)
 8000a06:	f005 ff87 	bl	8006918 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8000a0a:	2328      	movs	r3, #40	@ 0x28
 8000a0c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a1a:	230c      	movs	r3, #12
 8000a1c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	4619      	mov	r1, r3
 8000a22:	4811      	ldr	r0, [pc, #68]	@ (8000a68 <HAL_FMC_MspInit+0x118>)
 8000a24:	f005 ff78 	bl	8006918 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a28:	2308      	movs	r3, #8
 8000a2a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	1d3b      	adds	r3, r7, #4
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480a      	ldr	r0, [pc, #40]	@ (8000a6c <HAL_FMC_MspInit+0x11c>)
 8000a42:	f005 ff69 	bl	8006918 <HAL_GPIO_Init>
 8000a46:	e000      	b.n	8000a4a <HAL_FMC_MspInit+0xfa>
    return;
 8000a48:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000a4a:	3718      	adds	r7, #24
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200001bc 	.word	0x200001bc
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40021800 	.word	0x40021800
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	40021400 	.word	0x40021400
 8000a68:	40021c00 	.word	0x40021c00
 8000a6c:	40020800 	.word	0x40020800

08000a70 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000a78:	f7ff ff6a 	bl	8000950 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
 8000a9a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4a07      	ldr	r2, [pc, #28]	@ (8000ae4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000ac8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	4a06      	ldr	r2, [pc, #24]	@ (8000ae8 <vApplicationGetIdleTaskMemory+0x30>)
 8000ace:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2280      	movs	r2, #128	@ 0x80
 8000ad4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ad6:	bf00      	nop
 8000ad8:	3714      	adds	r7, #20
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	2000918c 	.word	0x2000918c
 8000ae8:	20009230 	.word	0x20009230

08000aec <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b0a0      	sub	sp, #128	@ 0x80
 8000af0:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of DeplacementQueue */
  osMessageQDef(DeplacementQueue, 16, mouvement);
 8000af2:	4b2e      	ldr	r3, [pc, #184]	@ (8000bac <MX_FREERTOS_Init+0xc0>)
 8000af4:	f107 0470 	add.w	r4, r7, #112	@ 0x70
 8000af8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000afa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  DeplacementQueueHandle = osMessageCreate(osMessageQ(DeplacementQueue), NULL);
 8000afe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f00f fe35 	bl	8010774 <osMessageCreate>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	4a28      	ldr	r2, [pc, #160]	@ (8000bb0 <MX_FREERTOS_Init+0xc4>)
 8000b0e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b10:	4b28      	ldr	r3, [pc, #160]	@ (8000bb4 <MX_FREERTOS_Init+0xc8>)
 8000b12:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 8000b16:	461d      	mov	r5, r3
 8000b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f00f fdc2 	bl	80106b4 <osThreadCreate>
 8000b30:	4603      	mov	r3, r0
 8000b32:	4a21      	ldr	r2, [pc, #132]	@ (8000bb8 <MX_FREERTOS_Init+0xcc>)
 8000b34:	6013      	str	r3, [r2, #0]

  /* definition and creation of deplacement_tas */
  osThreadDef(deplacement_tas, deplacement_function, osPriorityRealtime, 0, 1024);
 8000b36:	4b21      	ldr	r3, [pc, #132]	@ (8000bbc <MX_FREERTOS_Init+0xd0>)
 8000b38:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000b3c:	461d      	mov	r5, r3
 8000b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b46:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  deplacement_tasHandle = osThreadCreate(osThread(deplacement_tas), NULL);
 8000b4a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f00f fdaf 	bl	80106b4 <osThreadCreate>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a19      	ldr	r2, [pc, #100]	@ (8000bc0 <MX_FREERTOS_Init+0xd4>)
 8000b5a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Display */
  osThreadDef(Display, Display_fonction, osPriorityIdle, 0, 4096);
 8000b5c:	4b19      	ldr	r3, [pc, #100]	@ (8000bc4 <MX_FREERTOS_Init+0xd8>)
 8000b5e:	f107 041c 	add.w	r4, r7, #28
 8000b62:	461d      	mov	r5, r3
 8000b64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b68:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b6c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayHandle = osThreadCreate(osThread(Display), NULL);
 8000b70:	f107 031c 	add.w	r3, r7, #28
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f00f fd9c 	bl	80106b4 <osThreadCreate>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	4a12      	ldr	r2, [pc, #72]	@ (8000bc8 <MX_FREERTOS_Init+0xdc>)
 8000b80:	6013      	str	r3, [r2, #0]

  /* definition and creation of Joystick_task */
  osThreadDef(Joystick_task, joystick_function, osPriorityHigh, 0, 1024);
 8000b82:	4b12      	ldr	r3, [pc, #72]	@ (8000bcc <MX_FREERTOS_Init+0xe0>)
 8000b84:	463c      	mov	r4, r7
 8000b86:	461d      	mov	r5, r3
 8000b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b8c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b90:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Joystick_taskHandle = osThreadCreate(osThread(Joystick_task), NULL);
 8000b94:	463b      	mov	r3, r7
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f00f fd8b 	bl	80106b4 <osThreadCreate>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a0b      	ldr	r2, [pc, #44]	@ (8000bd0 <MX_FREERTOS_Init+0xe4>)
 8000ba2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000ba4:	bf00      	nop
 8000ba6:	3780      	adds	r7, #128	@ 0x80
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bdb0      	pop	{r4, r5, r7, pc}
 8000bac:	08013708 	.word	0x08013708
 8000bb0:	20009188 	.word	0x20009188
 8000bb4:	08013724 	.word	0x08013724
 8000bb8:	20009178 	.word	0x20009178
 8000bbc:	08013750 	.word	0x08013750
 8000bc0:	2000917c 	.word	0x2000917c
 8000bc4:	08013774 	.word	0x08013774
 8000bc8:	20009180 	.word	0x20009180
 8000bcc:	080137a0 	.word	0x080137a0
 8000bd0:	20009184 	.word	0x20009184

08000bd4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000bdc:	2064      	movs	r0, #100	@ 0x64
 8000bde:	f00f fdb5 	bl	801074c <osDelay>
 8000be2:	e7fb      	b.n	8000bdc <StartDefaultTask+0x8>

08000be4 <deplacement_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_deplacement_function */
void deplacement_function(void const * argument)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b096      	sub	sp, #88	@ 0x58
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN deplacement_fonction */
	TS_StateTypeDef TS_State;
	int32_t x1=0,y1=0,x0=0,y0=0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	657b      	str	r3, [r7, #84]	@ 0x54
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint8_t verrouillage=0,touch=0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000c02:	2300      	movs	r3, #0
 8000c04:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	position point;

	/* Infinite loop */
	for(;;)
	{
		BSP_TS_GetState(&TS_State);
 8000c08:	f107 0318 	add.w	r3, r7, #24
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f003 fa7f 	bl	8004110 <BSP_TS_GetState>
		if(TS_State.touchDetected){
 8000c12:	7e3b      	ldrb	r3, [r7, #24]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d076      	beq.n	8000d06 <deplacement_function+0x122>
			// sprintf(text,"x %d y %d            ",TS_State.touchX[0],TS_State.touchY[0]);
			// BSP_LCD_DisplayStringAtLine(4, (uint8_t*) text);
			if ((TS_State.touchX[0]<50)&& (TS_State.touchY[0]<50)){
 8000c18:	8b7b      	ldrh	r3, [r7, #26]
 8000c1a:	2b31      	cmp	r3, #49	@ 0x31
 8000c1c:	d812      	bhi.n	8000c44 <deplacement_function+0x60>
 8000c1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c20:	2b31      	cmp	r3, #49	@ 0x31
 8000c22:	d80f      	bhi.n	8000c44 <deplacement_function+0x60>
				if (verrouillage==1) verrouillage=0;
 8000c24:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d103      	bne.n	8000c34 <deplacement_function+0x50>
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8000c32:	e002      	b.n	8000c3a <deplacement_function+0x56>
				else verrouillage=1;
 8000c34:	2301      	movs	r3, #1
 8000c36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
				osDelay(500);
 8000c3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000c3e:	f00f fd85 	bl	801074c <osDelay>
 8000c42:	e077      	b.n	8000d34 <deplacement_function+0x150>
			}
			else if ((TS_State.touchX[0]<50)&& (TS_State.touchY[0]>250)){
 8000c44:	8b7b      	ldrh	r3, [r7, #26]
 8000c46:	2b31      	cmp	r3, #49	@ 0x31
 8000c48:	d819      	bhi.n	8000c7e <deplacement_function+0x9a>
 8000c4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000c4c:	2bfa      	cmp	r3, #250	@ 0xfa
 8000c4e:	d916      	bls.n	8000c7e <deplacement_function+0x9a>
				remplissage=0;
 8000c50:	4b3e      	ldr	r3, [pc, #248]	@ (8000d4c <deplacement_function+0x168>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	701a      	strb	r2, [r3, #0]
				indexremplissage=0;
 8000c56:	4b3e      	ldr	r3, [pc, #248]	@ (8000d50 <deplacement_function+0x16c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
				deplacement.dx=0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	613b      	str	r3, [r7, #16]
				deplacement.dy=0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
				xQueueSend(DeplacementQueueHandle, &deplacement, 0);
 8000c64:	4b3b      	ldr	r3, [pc, #236]	@ (8000d54 <deplacement_function+0x170>)
 8000c66:	6818      	ldr	r0, [r3, #0]
 8000c68:	f107 0110 	add.w	r1, r7, #16
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f010 f866 	bl	8010d40 <xQueueGenericSend>
				osDelay(300);
 8000c74:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c78:	f00f fd68 	bl	801074c <osDelay>
 8000c7c:	e05a      	b.n	8000d34 <deplacement_function+0x150>
			}
			else if (verrouillage!=0){
 8000c7e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d02e      	beq.n	8000ce4 <deplacement_function+0x100>
				BSP_LCD_FillCircle(TS_State.touchX[0], TS_State.touchY[0], 2);
 8000c86:	8b7b      	ldrh	r3, [r7, #26]
 8000c88:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fd4d 	bl	800372c <BSP_LCD_FillCircle>
				point.x=TS_State.touchX[0]+x;
 8000c92:	8b7a      	ldrh	r2, [r7, #26]
 8000c94:	4b30      	ldr	r3, [pc, #192]	@ (8000d58 <deplacement_function+0x174>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4413      	add	r3, r2
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	81bb      	strh	r3, [r7, #12]
				point.y=272+34-TS_State.touchY[0]+y;
 8000ca0:	4b2e      	ldr	r3, [pc, #184]	@ (8000d5c <deplacement_function+0x178>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000ca8:	1ad3      	subs	r3, r2, r3
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	81fb      	strh	r3, [r7, #14]
				toucher[indexremplissage]=point;
 8000cb4:	4b26      	ldr	r3, [pc, #152]	@ (8000d50 <deplacement_function+0x16c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4a29      	ldr	r2, [pc, #164]	@ (8000d60 <deplacement_function+0x17c>)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				indexremplissage++;
 8000cc2:	4b23      	ldr	r3, [pc, #140]	@ (8000d50 <deplacement_function+0x16c>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b21      	ldr	r3, [pc, #132]	@ (8000d50 <deplacement_function+0x16c>)
 8000ccc:	701a      	strb	r2, [r3, #0]
				if (indexremplissage==1000)indexremplissage=0;
				if (indexremplissage>remplissage) remplissage=indexremplissage;
 8000cce:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <deplacement_function+0x16c>)
 8000cd0:	781a      	ldrb	r2, [r3, #0]
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <deplacement_function+0x168>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d92c      	bls.n	8000d34 <deplacement_function+0x150>
 8000cda:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <deplacement_function+0x16c>)
 8000cdc:	781a      	ldrb	r2, [r3, #0]
 8000cde:	4b1b      	ldr	r3, [pc, #108]	@ (8000d4c <deplacement_function+0x168>)
 8000ce0:	701a      	strb	r2, [r3, #0]
 8000ce2:	e027      	b.n	8000d34 <deplacement_function+0x150>
			}
			else{
				if (touch==0){
 8000ce4:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d107      	bne.n	8000cfc <deplacement_function+0x118>
					x0=TS_State.touchX[0];
 8000cec:	8b7b      	ldrh	r3, [r7, #26]
 8000cee:	64fb      	str	r3, [r7, #76]	@ 0x4c
					y0=TS_State.touchY[0];
 8000cf0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
					touch=1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8000cfa:	e01b      	b.n	8000d34 <deplacement_function+0x150>
				}
				else{
					x1=TS_State.touchX[0];
 8000cfc:	8b7b      	ldrh	r3, [r7, #26]
 8000cfe:	657b      	str	r3, [r7, #84]	@ 0x54
					y1=TS_State.touchY[0];
 8000d00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000d02:	653b      	str	r3, [r7, #80]	@ 0x50
 8000d04:	e016      	b.n	8000d34 <deplacement_function+0x150>
				}
			}
		}
		else if(touch!=0) {
 8000d06:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d012      	beq.n	8000d34 <deplacement_function+0x150>
			touch=0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
			deplacement.dx=x0-x1;
 8000d14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000d16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	613b      	str	r3, [r7, #16]
			deplacement.dy=y1-y0;
 8000d1c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000d1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d20:	1ad3      	subs	r3, r2, r3
 8000d22:	617b      	str	r3, [r7, #20]
			//			BSP_LCD_DisplayStringAtLine(1, (uint8_t*) text);
			//			sprintf(text,"f: x %d y %d            ",x,y);
			//			BSP_LCD_DisplayStringAtLine(2, (uint8_t*) text);
			//			sprintf(text,"d: x %d y %d            ",x0,y0);
			//			BSP_LCD_DisplayStringAtLine(3, (uint8_t*) text);
			xQueueSend(DeplacementQueueHandle, &deplacement, 0);
 8000d24:	4b0b      	ldr	r3, [pc, #44]	@ (8000d54 <deplacement_function+0x170>)
 8000d26:	6818      	ldr	r0, [r3, #0]
 8000d28:	f107 0110 	add.w	r1, r7, #16
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f010 f806 	bl	8010d40 <xQueueGenericSend>
		}
		//if (verrouillage!=0)BSP_LCD_DisplayStringAtLine(1, (uint8_t*) "verrouillage");
		HAL_GPIO_WritePin(LED14_GPIO_Port, LED14_Pin,verrouillage);
 8000d34:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000d38:	461a      	mov	r2, r3
 8000d3a:	2120      	movs	r1, #32
 8000d3c:	4809      	ldr	r0, [pc, #36]	@ (8000d64 <deplacement_function+0x180>)
 8000d3e:	f006 f8bb 	bl	8006eb8 <HAL_GPIO_WritePin>
		osDelay(10);
 8000d42:	200a      	movs	r0, #10
 8000d44:	f00f fd02 	bl	801074c <osDelay>
		BSP_TS_GetState(&TS_State);
 8000d48:	e75e      	b.n	8000c08 <deplacement_function+0x24>
 8000d4a:	bf00      	nop
 8000d4c:	2000916c 	.word	0x2000916c
 8000d50:	2000916d 	.word	0x2000916d
 8000d54:	20009188 	.word	0x20009188
 8000d58:	20009170 	.word	0x20009170
 8000d5c:	20009174 	.word	0x20009174
 8000d60:	200081cc 	.word	0x200081cc
 8000d64:	40021000 	.word	0x40021000

08000d68 <Display_fonction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display_fonction */
void Display_fonction(void const * argument)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b096      	sub	sp, #88	@ 0x58
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display_fonction */
	mouvement deplacement;
	uint16_t hauteur=272,index=0;
 8000d70:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8000d74:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
	//char image[32778];	//32778

	char text[50]={};
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	f107 0310 	add.w	r3, r7, #16
 8000d86:	222e      	movs	r2, #46	@ 0x2e
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f011 ffda 	bl	8012d44 <memset>
	position point;
	FabriquerEntete(image);
 8000d90:	4870      	ldr	r0, [pc, #448]	@ (8000f54 <Display_fonction+0x1ec>)
 8000d92:	f000 fa13 	bl	80011bc <FabriquerEntete>
	for (int i=0;i<=8;i++){
 8000d96:	2300      	movs	r3, #0
 8000d98:	653b      	str	r3, [r7, #80]	@ 0x50
 8000d9a:	e01e      	b.n	8000dda <Display_fonction+0x72>
		RemplirImage(x,y+34*i,image);
 8000d9c:	4b6e      	ldr	r3, [pc, #440]	@ (8000f58 <Display_fonction+0x1f0>)
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000da2:	4613      	mov	r3, r2
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	4413      	add	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b6b      	ldr	r3, [pc, #428]	@ (8000f5c <Display_fonction+0x1f4>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4413      	add	r3, r2
 8000db2:	4a68      	ldr	r2, [pc, #416]	@ (8000f54 <Display_fonction+0x1ec>)
 8000db4:	4619      	mov	r1, r3
 8000db6:	f000 f94f 	bl	8001058 <RemplirImage>
		BSP_LCD_DrawBitmap(0, hauteur-34*i, (uint8_t*) image);
 8000dba:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000dc0:	f06f 0121 	mvn.w	r1, #33	@ 0x21
 8000dc4:	fb01 f303 	mul.w	r3, r1, r3
 8000dc8:	4413      	add	r3, r2
 8000dca:	4a62      	ldr	r2, [pc, #392]	@ (8000f54 <Display_fonction+0x1ec>)
 8000dcc:	4619      	mov	r1, r3
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f002 fbfa 	bl	80035c8 <BSP_LCD_DrawBitmap>
	for (int i=0;i<=8;i++){
 8000dd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8000dda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ddc:	2b08      	cmp	r3, #8
 8000dde:	dddd      	ble.n	8000d9c <Display_fonction+0x34>
	}
	/* Infinite loop */
	for (;;) {
		if (xQueueReceive(DeplacementQueueHandle, &deplacement, 0)) {
 8000de0:	4b5f      	ldr	r3, [pc, #380]	@ (8000f60 <Display_fonction+0x1f8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8000de8:	2200      	movs	r2, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f010 f956 	bl	801109c <xQueueReceive>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f000 80a9 	beq.w	8000f4a <Display_fonction+0x1e2>
			HAL_GPIO_TogglePin(LED13_GPIO_Port, LED13_Pin);
 8000df8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dfc:	4859      	ldr	r0, [pc, #356]	@ (8000f64 <Display_fonction+0x1fc>)
 8000dfe:	f006 f874 	bl	8006eea <HAL_GPIO_TogglePin>
			x+=deplacement.dx;
 8000e02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000e04:	4b54      	ldr	r3, [pc, #336]	@ (8000f58 <Display_fonction+0x1f0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4413      	add	r3, r2
 8000e0a:	4a53      	ldr	r2, [pc, #332]	@ (8000f58 <Display_fonction+0x1f0>)
 8000e0c:	6013      	str	r3, [r2, #0]
			y+=deplacement.dy;
 8000e0e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000e10:	4b52      	ldr	r3, [pc, #328]	@ (8000f5c <Display_fonction+0x1f4>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4413      	add	r3, r2
 8000e16:	4a51      	ldr	r2, [pc, #324]	@ (8000f5c <Display_fonction+0x1f4>)
 8000e18:	6013      	str	r3, [r2, #0]
			if (x<0) x=0;
 8000e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8000f58 <Display_fonction+0x1f0>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	da02      	bge.n	8000e28 <Display_fonction+0xc0>
 8000e22:	4b4d      	ldr	r3, [pc, #308]	@ (8000f58 <Display_fonction+0x1f0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
			if (x>1227) x=1227;//1707-480
 8000e28:	4b4b      	ldr	r3, [pc, #300]	@ (8000f58 <Display_fonction+0x1f0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 8000e30:	4293      	cmp	r3, r2
 8000e32:	dd03      	ble.n	8000e3c <Display_fonction+0xd4>
 8000e34:	4b48      	ldr	r3, [pc, #288]	@ (8000f58 <Display_fonction+0x1f0>)
 8000e36:	f240 42cb 	movw	r2, #1227	@ 0x4cb
 8000e3a:	601a      	str	r2, [r3, #0]
			if (y<0) y=0;
 8000e3c:	4b47      	ldr	r3, [pc, #284]	@ (8000f5c <Display_fonction+0x1f4>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	da02      	bge.n	8000e4a <Display_fonction+0xe2>
 8000e44:	4b45      	ldr	r3, [pc, #276]	@ (8000f5c <Display_fonction+0x1f4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	601a      	str	r2, [r3, #0]
			if (y>394) y=394;//700-272
 8000e4a:	4b44      	ldr	r3, [pc, #272]	@ (8000f5c <Display_fonction+0x1f4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f5b3 7fc5 	cmp.w	r3, #394	@ 0x18a
 8000e52:	dd03      	ble.n	8000e5c <Display_fonction+0xf4>
 8000e54:	4b41      	ldr	r3, [pc, #260]	@ (8000f5c <Display_fonction+0x1f4>)
 8000e56:	f44f 72c5 	mov.w	r2, #394	@ 0x18a
 8000e5a:	601a      	str	r2, [r3, #0]
			for (int i=0;i<=8;i++){
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000e60:	e01e      	b.n	8000ea0 <Display_fonction+0x138>
				RemplirImage(x,y+34*i,image);
 8000e62:	4b3d      	ldr	r3, [pc, #244]	@ (8000f58 <Display_fonction+0x1f0>)
 8000e64:	6818      	ldr	r0, [r3, #0]
 8000e66:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000e68:	4613      	mov	r3, r2
 8000e6a:	011b      	lsls	r3, r3, #4
 8000e6c:	4413      	add	r3, r2
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b3a      	ldr	r3, [pc, #232]	@ (8000f5c <Display_fonction+0x1f4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a36      	ldr	r2, [pc, #216]	@ (8000f54 <Display_fonction+0x1ec>)
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f000 f8ec 	bl	8001058 <RemplirImage>
				BSP_LCD_DrawBitmap(0, hauteur-34*i, (uint8_t*) image);
 8000e80:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8000e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e86:	f06f 0121 	mvn.w	r1, #33	@ 0x21
 8000e8a:	fb01 f303 	mul.w	r3, r1, r3
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a30      	ldr	r2, [pc, #192]	@ (8000f54 <Display_fonction+0x1ec>)
 8000e92:	4619      	mov	r1, r3
 8000e94:	2000      	movs	r0, #0
 8000e96:	f002 fb97 	bl	80035c8 <BSP_LCD_DrawBitmap>
			for (int i=0;i<=8;i++){
 8000e9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ea2:	2b08      	cmp	r3, #8
 8000ea4:	dddd      	ble.n	8000e62 <Display_fonction+0xfa>
			}
			sprintf(text,"x=%4ld y=%4ld",x,y);
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <Display_fonction+0x1f0>)
 8000ea8:	681a      	ldr	r2, [r3, #0]
 8000eaa:	4b2c      	ldr	r3, [pc, #176]	@ (8000f5c <Display_fonction+0x1f4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f107 000c 	add.w	r0, r7, #12
 8000eb2:	492d      	ldr	r1, [pc, #180]	@ (8000f68 <Display_fonction+0x200>)
 8000eb4:	f011 ff26 	bl	8012d04 <siprintf>
			BSP_LCD_DisplayStringAtLine(0, (uint8_t*) text);
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f002 f9da 	bl	8003278 <BSP_LCD_DisplayStringAtLine>
			for (index=0;index<remplissage;index++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000eca:	e037      	b.n	8000f3c <Display_fonction+0x1d4>
				point=toucher[index];
 8000ecc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000ed0:	4a26      	ldr	r2, [pc, #152]	@ (8000f6c <Display_fonction+0x204>)
 8000ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed6:	60bb      	str	r3, [r7, #8]
				if ((x+5<point.x)&&(point.x<x+480-5) && (y+5<point.y)&&(point.y<y+306-5)){
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f58 <Display_fonction+0x1f0>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3305      	adds	r3, #5
 8000ede:	893a      	ldrh	r2, [r7, #8]
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	da26      	bge.n	8000f32 <Display_fonction+0x1ca>
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f58 <Display_fonction+0x1f0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f503 73ed 	add.w	r3, r3, #474	@ 0x1da
 8000eec:	893a      	ldrh	r2, [r7, #8]
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	db1f      	blt.n	8000f32 <Display_fonction+0x1ca>
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <Display_fonction+0x1f4>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	3305      	adds	r3, #5
 8000ef8:	897a      	ldrh	r2, [r7, #10]
 8000efa:	4293      	cmp	r3, r2
 8000efc:	da19      	bge.n	8000f32 <Display_fonction+0x1ca>
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <Display_fonction+0x1f4>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8000f06:	897a      	ldrh	r2, [r7, #10]
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	db12      	blt.n	8000f32 <Display_fonction+0x1ca>
					BSP_LCD_FillCircle(point.x-x,306-point.y+y,2);
 8000f0c:	893a      	ldrh	r2, [r7, #8]
 8000f0e:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <Display_fonction+0x1f0>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	b298      	uxth	r0, r3
 8000f18:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <Display_fonction+0x1f4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	897b      	ldrh	r3, [r7, #10]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	f503 7399 	add.w	r3, r3, #306	@ 0x132
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	f002 fbfd 	bl	800372c <BSP_LCD_FillCircle>
			for (index=0;index<remplissage;index++){
 8000f32:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000f36:	3301      	adds	r3, #1
 8000f38:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f70 <Display_fonction+0x208>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	461a      	mov	r2, r3
 8000f42:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d3c0      	bcc.n	8000ecc <Display_fonction+0x164>
				}
			}
		}
		osDelay(200);
 8000f4a:	20c8      	movs	r0, #200	@ 0xc8
 8000f4c:	f00f fbfe 	bl	801074c <osDelay>
		if (xQueueReceive(DeplacementQueueHandle, &deplacement, 0)) {
 8000f50:	e746      	b.n	8000de0 <Display_fonction+0x78>
 8000f52:	bf00      	nop
 8000f54:	200001c0 	.word	0x200001c0
 8000f58:	20009170 	.word	0x20009170
 8000f5c:	20009174 	.word	0x20009174
 8000f60:	20009188 	.word	0x20009188
 8000f64:	40021c00 	.word	0x40021c00
 8000f68:	080137bc 	.word	0x080137bc
 8000f6c:	200081cc 	.word	0x200081cc
 8000f70:	2000916c 	.word	0x2000916c

08000f74 <joystick_function>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_joystick_function */
void joystick_function(void const * argument)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN joystick_function */
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f7c:	f107 0310 	add.w	r3, r7, #16
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	61bb      	str	r3, [r7, #24]
	sConfig.Channel = ADC_CHANNEL_8;
 8000f92:	2308      	movs	r3, #8
 8000f94:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	482b      	ldr	r0, [pc, #172]	@ (800104c <joystick_function+0xd8>)
 8000f9e:	f004 faf9 	bl	8005594 <HAL_ADC_ConfigChannel>
	sConfig.Channel = ADC_CHANNEL_0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8000fa6:	f107 0310 	add.w	r3, r7, #16
 8000faa:	4619      	mov	r1, r3
 8000fac:	4828      	ldr	r0, [pc, #160]	@ (8001050 <joystick_function+0xdc>)
 8000fae:	f004 faf1 	bl	8005594 <HAL_ADC_ConfigChannel>
	mouvement deplacement;
	/* Infinite loop */
	for(;;)
	{

		HAL_ADC_Start(&hadc3);
 8000fb2:	4826      	ldr	r0, [pc, #152]	@ (800104c <joystick_function+0xd8>)
 8000fb4:	f004 f988 	bl	80052c8 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8000fb8:	bf00      	nop
 8000fba:	2164      	movs	r1, #100	@ 0x64
 8000fbc:	4823      	ldr	r0, [pc, #140]	@ (800104c <joystick_function+0xd8>)
 8000fbe:	f004 fa51 	bl	8005464 <HAL_ADC_PollForConversion>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f8      	bne.n	8000fba <joystick_function+0x46>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8000fc8:	4820      	ldr	r0, [pc, #128]	@ (800104c <joystick_function+0xd8>)
 8000fca:	f004 fad6 	bl	800557a <HAL_ADC_GetValue>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	627b      	str	r3, [r7, #36]	@ 0x24

		HAL_ADC_Start(&hadc1);
 8000fd2:	481f      	ldr	r0, [pc, #124]	@ (8001050 <joystick_function+0xdc>)
 8000fd4:	f004 f978 	bl	80052c8 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8000fd8:	bf00      	nop
 8000fda:	2164      	movs	r1, #100	@ 0x64
 8000fdc:	481c      	ldr	r0, [pc, #112]	@ (8001050 <joystick_function+0xdc>)
 8000fde:	f004 fa41 	bl	8005464 <HAL_ADC_PollForConversion>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f8      	bne.n	8000fda <joystick_function+0x66>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8000fe8:	4819      	ldr	r0, [pc, #100]	@ (8001050 <joystick_function+0xdc>)
 8000fea:	f004 fac6 	bl	800557a <HAL_ADC_GetValue>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	623b      	str	r3, [r7, #32]

		deplacement.dx=-(joystick_h-2048)/8;
 8000ff2:	6a3b      	ldr	r3, [r7, #32]
 8000ff4:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	da00      	bge.n	8000ffe <joystick_function+0x8a>
 8000ffc:	3307      	adds	r3, #7
 8000ffe:	10db      	asrs	r3, r3, #3
 8001000:	60bb      	str	r3, [r7, #8]
		deplacement.dy=(joystick_v-2048)/8;
 8001002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001004:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001008:	2b00      	cmp	r3, #0
 800100a:	da00      	bge.n	800100e <joystick_function+0x9a>
 800100c:	3307      	adds	r3, #7
 800100e:	10db      	asrs	r3, r3, #3
 8001010:	60fb      	str	r3, [r7, #12]
		if ((abs(deplacement.dx)>100)||(abs(deplacement.dy)>100)){
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2b00      	cmp	r3, #0
 8001016:	bfb8      	it	lt
 8001018:	425b      	neglt	r3, r3
 800101a:	2b64      	cmp	r3, #100	@ 0x64
 800101c:	dc05      	bgt.n	800102a <joystick_function+0xb6>
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b00      	cmp	r3, #0
 8001022:	bfb8      	it	lt
 8001024:	425b      	neglt	r3, r3
 8001026:	2b64      	cmp	r3, #100	@ 0x64
 8001028:	dd0b      	ble.n	8001042 <joystick_function+0xce>
			xQueueSend(DeplacementQueueHandle, &deplacement, 0);
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <joystick_function+0xe0>)
 800102c:	6818      	ldr	r0, [r3, #0]
 800102e:	f107 0108 	add.w	r1, r7, #8
 8001032:	2300      	movs	r3, #0
 8001034:	2200      	movs	r2, #0
 8001036:	f00f fe83 	bl	8010d40 <xQueueGenericSend>
			osDelay(500);
 800103a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800103e:	f00f fb85 	bl	801074c <osDelay>
		}

//		sprintf(text, "joy_v : %4ld joy_h : %ld", deplacement.dy, deplacement.dx);
//		BSP_LCD_DisplayStringAtLine(9, (uint8_t*) text);
		osDelay(100);
 8001042:	2064      	movs	r0, #100	@ 0x64
 8001044:	f00f fb82 	bl	801074c <osDelay>
		HAL_ADC_Start(&hadc3);
 8001048:	e7b3      	b.n	8000fb2 <joystick_function+0x3e>
 800104a:	bf00      	nop
 800104c:	20000100 	.word	0x20000100
 8001050:	200000b8 	.word	0x200000b8
 8001054:	20009188 	.word	0x20009188

08001058 <RemplirImage>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void RemplirImage(int32_t x, int32_t y, char* image){
 8001058:	b580      	push	{r7, lr}
 800105a:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 800105e:	af00      	add	r7, sp, #0
 8001060:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8001064:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001068:	6018      	str	r0, [r3, #0]
 800106a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800106e:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8001072:	6019      	str	r1, [r3, #0]
 8001074:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8001078:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800107c:	601a      	str	r2, [r3, #0]
	int16_t largeur=480,hauteur=272,h=700,l=1707,offset=image[10];
 800107e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001082:	f8a7 34be 	strh.w	r3, [r7, #1214]	@ 0x4be
 8001086:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800108a:	f8a7 34bc 	strh.w	r3, [r7, #1212]	@ 0x4bc
 800108e:	f44f 732f 	mov.w	r3, #700	@ 0x2bc
 8001092:	f8a7 34ba 	strh.w	r3, [r7, #1210]	@ 0x4ba
 8001096:	f240 63ab 	movw	r3, #1707	@ 0x6ab
 800109a:	f8a7 34b8 	strh.w	r3, [r7, #1208]	@ 0x4b8
 800109e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80010a2:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	330a      	adds	r3, #10
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	f8a7 34b6 	strh.w	r3, [r7, #1206]	@ 0x4b6
	uint32_t k,index=offset,j;
 80010b0:	f9b7 34b6 	ldrsh.w	r3, [r7, #1206]	@ 0x4b6
 80010b4:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
	FIL file;
	char text[50]={};
 80010b8:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80010bc:	f5a3 7320 	sub.w	r3, r3, #640	@ 0x280
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	3304      	adds	r3, #4
 80010c6:	222e      	movs	r2, #46	@ 0x2e
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f011 fe3a 	bl	8012d44 <memset>
	UINT br;
	FRESULT val0,val1,val2,val3;

//	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0) {
		/*##-2- Initialize the Directory Files pointers (heap) ###################*/
		val0 = f_mount(&fs0, "", 0);
 80010d0:	f107 0318 	add.w	r3, r7, #24
 80010d4:	2200      	movs	r2, #0
 80010d6:	4937      	ldr	r1, [pc, #220]	@ (80011b4 <RemplirImage+0x15c>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f00e fc53 	bl	800f984 <f_mount>
 80010de:	4603      	mov	r3, r0
 80010e0:	f887 34b5 	strb.w	r3, [r7, #1205]	@ 0x4b5
		val1 = f_open(&file,"mapENS.bmp",FA_READ);
 80010e4:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 80010e8:	2201      	movs	r2, #1
 80010ea:	4933      	ldr	r1, [pc, #204]	@ (80011b8 <RemplirImage+0x160>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f00e fc8f 	bl	800fa10 <f_open>
 80010f2:	4603      	mov	r3, r0
 80010f4:	f887 34b4 	strb.w	r3, [r7, #1204]	@ 0x4b4
		for(j=y;j<y+34;j++){//Chaque ligne  		y+hauteur
 80010f8:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 80010fc:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
 8001106:	e040      	b.n	800118a <RemplirImage+0x132>
//			if (j==34)

			k=offset+2*(j*(l+1)+x);
 8001108:	f9b7 24b6 	ldrsh.w	r2, [r7, #1206]	@ 0x4b6
 800110c:	f9b7 34b8 	ldrsh.w	r3, [r7, #1208]	@ 0x4b8
 8001110:	3301      	adds	r3, #1
 8001112:	4619      	mov	r1, r3
 8001114:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8001118:	fb03 f101 	mul.w	r1, r3, r1
 800111c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8001120:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	440b      	add	r3, r1
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	f8c7 34b0 	str.w	r3, [r7, #1200]	@ 0x4b0
//			sprintf(text,"j: %lu k %lu   %lu         ",j,k,f_size(&file));
//			BSP_LCD_DisplayStringAtLine(6, (uint8_t*) text);

			val2=f_lseek(&file,k);
 8001130:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 8001134:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 8001138:	4618      	mov	r0, r3
 800113a:	f00f f80a 	bl	8010152 <f_lseek>
 800113e:	4603      	mov	r3, r0
 8001140:	f887 34af 	strb.w	r3, [r7, #1199]	@ 0x4af
			val3=f_read(&file,(TCHAR *)image+index,2*largeur,&br);
 8001144:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8001148:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 8001152:	18d1      	adds	r1, r2, r3
 8001154:	f9b7 34be 	ldrsh.w	r3, [r7, #1214]	@ 0x4be
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	461a      	mov	r2, r3
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	f507 701f 	add.w	r0, r7, #636	@ 0x27c
 8001164:	f00e fe0e 	bl	800fd84 <f_read>
 8001168:	4603      	mov	r3, r0
 800116a:	f887 34ae 	strb.w	r3, [r7, #1198]	@ 0x4ae
			// for(i=0;i<2*largeur;i++){
			// 	image[index]=data[i];
			index=index+2*largeur;
 800116e:	f9b7 34be 	ldrsh.w	r3, [r7, #1214]	@ 0x4be
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	461a      	mov	r2, r3
 8001176:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800117a:	4413      	add	r3, r2
 800117c:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
		for(j=y;j<y+34;j++){//Chaque ligne  		y+hauteur
 8001180:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 8001184:	3301      	adds	r3, #1
 8001186:	f8c7 34c0 	str.w	r3, [r7, #1216]	@ 0x4c0
 800118a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800118e:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3322      	adds	r3, #34	@ 0x22
 8001196:	461a      	mov	r2, r3
 8001198:	f8d7 34c0 	ldr.w	r3, [r7, #1216]	@ 0x4c0
 800119c:	4293      	cmp	r3, r2
 800119e:	d3b3      	bcc.n	8001108 <RemplirImage+0xb0>
			// }
		}
		//			f_read(&file,(TCHAR *)entete,sizeof entete,&br);
		f_close(&file);
 80011a0:	f507 731f 	add.w	r3, r7, #636	@ 0x27c
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00e ffaa 	bl	80100fe <f_close>
	//			image[index]=data[j];
	//			index++;
	//		}
	//	}
	//	f_close(&file);
}
 80011aa:	bf00      	nop
 80011ac:	f507 6799 	add.w	r7, r7, #1224	@ 0x4c8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	080137cc 	.word	0x080137cc
 80011b8:	080137d0 	.word	0x080137d0

080011bc <FabriquerEntete>:

void FabriquerEntete(char* image){
 80011bc:	b580      	push	{r7, lr}
 80011be:	f5ad 6da0 	sub.w	sp, sp, #1280	@ 0x500
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80011c8:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 80011cc:	6018      	str	r0, [r3, #0]
//	uwInternelBuffer = (uint8_t*) 0xC0260000;
	//unsigned int byteRead;
	//TCHAR pathfile[]="mapENS.bmp";


	if (FATFS_LinkDriver(&SD_Driver, SDPath) == 0) {
 80011ce:	4943      	ldr	r1, [pc, #268]	@ (80012dc <FabriquerEntete+0x120>)
 80011d0:	4843      	ldr	r0, [pc, #268]	@ (80012e0 <FabriquerEntete+0x124>)
 80011d2:	f00f fa13 	bl	80105fc <FATFS_LinkDriver>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d11c      	bne.n	8001216 <FabriquerEntete+0x5a>
		/*##-2- Initialize the Directory Files pointers (heap) ###################*/
		f_mount(&fs0, "", 0);
 80011dc:	f107 0310 	add.w	r3, r7, #16
 80011e0:	2200      	movs	r2, #0
 80011e2:	4940      	ldr	r1, [pc, #256]	@ (80012e4 <FabriquerEntete+0x128>)
 80011e4:	4618      	mov	r0, r3
 80011e6:	f00e fbcd 	bl	800f984 <f_mount>
		f_open(&file,"mapENS.bmp",FA_READ);
 80011ea:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80011ee:	2201      	movs	r2, #1
 80011f0:	493d      	ldr	r1, [pc, #244]	@ (80012e8 <FabriquerEntete+0x12c>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00e fc0c 	bl	800fa10 <f_open>
		f_read(&file,(TCHAR *)entete,sizeof entete,&br);
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8001200:	f507 7010 	add.w	r0, r7, #576	@ 0x240
 8001204:	228a      	movs	r2, #138	@ 0x8a
 8001206:	f00e fdbd 	bl	800fd84 <f_read>
		f_close(&file);
 800120a:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800120e:	4618      	mov	r0, r3
 8001210:	f00e ff75 	bl	80100fe <f_close>
 8001214:	e001      	b.n	800121a <FabriquerEntete+0x5e>
	} else {
		/* FatFs Initialization Error */
		Error_Handler();
 8001216:	f001 f949 	bl	80024ac <Error_Handler>
	}

	//f_open(&file,pathfile,FA_READ); // on ne prend que le fichier
	//f_read(&file, (TCHAR*) entete, 138, &byteRead);
	for(int i=0;i<138;i++){
 800121a:	2300      	movs	r3, #0
 800121c:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 8001220:	e013      	b.n	800124a <FabriquerEntete+0x8e>
		image[i]=entete[i];
 8001222:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8001226:	f507 62a0 	add.w	r2, r7, #1280	@ 0x500
 800122a:	f2a2 42fc 	subw	r2, r2, #1276	@ 0x4fc
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	4413      	add	r3, r2
 8001232:	f507 618e 	add.w	r1, r7, #1136	@ 0x470
 8001236:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	@ 0x4fc
 800123a:	440a      	add	r2, r1
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<138;i++){
 8001240:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 8001244:	3301      	adds	r3, #1
 8001246:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 800124a:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	@ 0x4fc
 800124e:	2b89      	cmp	r3, #137	@ 0x89
 8001250:	dde7      	ble.n	8001222 <FabriquerEntete+0x66>
	}
	image[18]=0xE0;
 8001252:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001256:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	3312      	adds	r3, #18
 800125e:	22e0      	movs	r2, #224	@ 0xe0
 8001260:	701a      	strb	r2, [r3, #0]
	image[19]=0x01;
 8001262:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001266:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	3313      	adds	r3, #19
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
	image[20]=0x00;
 8001272:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001276:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3314      	adds	r3, #20
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
	image[21]=0x00;
 8001282:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001286:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3315      	adds	r3, #21
 800128e:	2200      	movs	r2, #0
 8001290:	701a      	strb	r2, [r3, #0]

	image[22]=0x22;
 8001292:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8001296:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3316      	adds	r3, #22
 800129e:	2222      	movs	r2, #34	@ 0x22
 80012a0:	701a      	strb	r2, [r3, #0]
	image[23]=0x00;
 80012a2:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80012a6:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3317      	adds	r3, #23
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
//	image[22]=0x10;
//	image[23]=0x01;
	image[24]=0x00;
 80012b2:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80012b6:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	3318      	adds	r3, #24
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]
	image[25]=0x00;
 80012c2:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 80012c6:	f2a3 43fc 	subw	r3, r3, #1276	@ 0x4fc
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3319      	adds	r3, #25
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
	//f_close(&file);
}
 80012d2:	bf00      	nop
 80012d4:	f507 67a0 	add.w	r7, r7, #1280	@ 0x500
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20009d8c 	.word	0x20009d8c
 80012e0:	080138f4 	.word	0x080138f4
 80012e4:	080137cc 	.word	0x080137cc
 80012e8:	080137d0 	.word	0x080137d0

080012ec <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	4603      	mov	r3, r0
 80012f4:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80012f6:	20c8      	movs	r0, #200	@ 0xc8
 80012f8:	f001 fd14 	bl	8002d24 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80012fc:	f000 fa7a 	bl	80017f4 <ft5336_I2C_InitializeIfRequired>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8001312:	bf00      	nop
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8001330:	2300      	movs	r3, #0
 8001332:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8001334:	f000 fa5e 	bl	80017f4 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8001338:	2300      	movs	r3, #0
 800133a:	73fb      	strb	r3, [r7, #15]
 800133c:	e010      	b.n	8001360 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	b2db      	uxtb	r3, r3
 8001342:	21a8      	movs	r1, #168	@ 0xa8
 8001344:	4618      	mov	r0, r3
 8001346:	f001 fccf 	bl	8002ce8 <TS_IO_Read>
 800134a:	4603      	mov	r3, r0
 800134c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800134e:	7b7b      	ldrb	r3, [r7, #13]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	2b51      	cmp	r3, #81	@ 0x51
 8001354:	d101      	bne.n	800135a <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8001356:	2301      	movs	r3, #1
 8001358:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800135a:	7bfb      	ldrb	r3, [r7, #15]
 800135c:	3301      	adds	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d802      	bhi.n	800136c <ft5336_ReadID+0x4e>
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d0e8      	beq.n	800133e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800136c:	7b7b      	ldrb	r3, [r7, #13]
 800136e:	b2db      	uxtb	r3, r3
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fa45 	bl	8001814 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800138a:	88fb      	ldrh	r3, [r7, #6]
 800138c:	4618      	mov	r0, r3
 800138e:	f000 f933 	bl	80015f8 <ft5336_TS_DisableIT>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	2102      	movs	r1, #2
 80013b0:	4618      	mov	r0, r3
 80013b2:	f001 fc99 	bl	8002ce8 <TS_IO_Read>
 80013b6:	4603      	mov	r3, r0
 80013b8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d901      	bls.n	80013d2 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80013d2:	7bfb      	ldrb	r3, [r7, #15]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <ft5336_TS_DetectTouch+0x50>)
 80013d8:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80013da:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <ft5336_TS_DetectTouch+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80013e0:	7bfb      	ldrb	r3, [r7, #15]
 80013e2:	b2db      	uxtb	r3, r3
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20009430 	.word	0x20009430

080013f0 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
 80013fc:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8001402:	2300      	movs	r3, #0
 8001404:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8001412:	4b6d      	ldr	r3, [pc, #436]	@ (80015c8 <ft5336_TS_GetXY+0x1d8>)
 8001414:	789a      	ldrb	r2, [r3, #2]
 8001416:	4b6c      	ldr	r3, [pc, #432]	@ (80015c8 <ft5336_TS_GetXY+0x1d8>)
 8001418:	785b      	ldrb	r3, [r3, #1]
 800141a:	429a      	cmp	r2, r3
 800141c:	f080 80cf 	bcs.w	80015be <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8001420:	4b69      	ldr	r3, [pc, #420]	@ (80015c8 <ft5336_TS_GetXY+0x1d8>)
 8001422:	789b      	ldrb	r3, [r3, #2]
 8001424:	2b09      	cmp	r3, #9
 8001426:	d871      	bhi.n	800150c <ft5336_TS_GetXY+0x11c>
 8001428:	a201      	add	r2, pc, #4	@ (adr r2, 8001430 <ft5336_TS_GetXY+0x40>)
 800142a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800142e:	bf00      	nop
 8001430:	08001459 	.word	0x08001459
 8001434:	0800146b 	.word	0x0800146b
 8001438:	0800147d 	.word	0x0800147d
 800143c:	0800148f 	.word	0x0800148f
 8001440:	080014a1 	.word	0x080014a1
 8001444:	080014b3 	.word	0x080014b3
 8001448:	080014c5 	.word	0x080014c5
 800144c:	080014d7 	.word	0x080014d7
 8001450:	080014e9 	.word	0x080014e9
 8001454:	080014fb 	.word	0x080014fb
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001458:	2304      	movs	r3, #4
 800145a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 800145c:	2303      	movs	r3, #3
 800145e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001460:	2306      	movs	r3, #6
 8001462:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001464:	2305      	movs	r3, #5
 8001466:	753b      	strb	r3, [r7, #20]
      break;
 8001468:	e051      	b.n	800150e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800146a:	230a      	movs	r3, #10
 800146c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800146e:	2309      	movs	r3, #9
 8001470:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001472:	230c      	movs	r3, #12
 8001474:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001476:	230b      	movs	r3, #11
 8001478:	753b      	strb	r3, [r7, #20]
      break;
 800147a:	e048      	b.n	800150e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 800147c:	2310      	movs	r3, #16
 800147e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001480:	230f      	movs	r3, #15
 8001482:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001484:	2312      	movs	r3, #18
 8001486:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001488:	2311      	movs	r3, #17
 800148a:	753b      	strb	r3, [r7, #20]
      break;
 800148c:	e03f      	b.n	800150e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800148e:	2316      	movs	r3, #22
 8001490:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001492:	2315      	movs	r3, #21
 8001494:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001496:	2318      	movs	r3, #24
 8001498:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800149a:	2317      	movs	r3, #23
 800149c:	753b      	strb	r3, [r7, #20]
      break;
 800149e:	e036      	b.n	800150e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80014a0:	231c      	movs	r3, #28
 80014a2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80014a4:	231b      	movs	r3, #27
 80014a6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80014a8:	231e      	movs	r3, #30
 80014aa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80014ac:	231d      	movs	r3, #29
 80014ae:	753b      	strb	r3, [r7, #20]
      break;
 80014b0:	e02d      	b.n	800150e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80014b2:	2322      	movs	r3, #34	@ 0x22
 80014b4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80014b6:	2321      	movs	r3, #33	@ 0x21
 80014b8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80014ba:	2324      	movs	r3, #36	@ 0x24
 80014bc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80014be:	2323      	movs	r3, #35	@ 0x23
 80014c0:	753b      	strb	r3, [r7, #20]
      break;
 80014c2:	e024      	b.n	800150e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80014c4:	2328      	movs	r3, #40	@ 0x28
 80014c6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80014c8:	2327      	movs	r3, #39	@ 0x27
 80014ca:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80014cc:	232a      	movs	r3, #42	@ 0x2a
 80014ce:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80014d0:	2329      	movs	r3, #41	@ 0x29
 80014d2:	753b      	strb	r3, [r7, #20]
      break;
 80014d4:	e01b      	b.n	800150e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 80014d6:	232e      	movs	r3, #46	@ 0x2e
 80014d8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 80014da:	232d      	movs	r3, #45	@ 0x2d
 80014dc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80014de:	2330      	movs	r3, #48	@ 0x30
 80014e0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80014e2:	232f      	movs	r3, #47	@ 0x2f
 80014e4:	753b      	strb	r3, [r7, #20]
      break;
 80014e6:	e012      	b.n	800150e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80014e8:	2334      	movs	r3, #52	@ 0x34
 80014ea:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80014ec:	2333      	movs	r3, #51	@ 0x33
 80014ee:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80014f0:	2336      	movs	r3, #54	@ 0x36
 80014f2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80014f4:	2335      	movs	r3, #53	@ 0x35
 80014f6:	753b      	strb	r3, [r7, #20]
      break;
 80014f8:	e009      	b.n	800150e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80014fa:	233a      	movs	r3, #58	@ 0x3a
 80014fc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80014fe:	2339      	movs	r3, #57	@ 0x39
 8001500:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8001502:	233c      	movs	r3, #60	@ 0x3c
 8001504:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8001506:	233b      	movs	r3, #59	@ 0x3b
 8001508:	753b      	strb	r3, [r7, #20]
      break;
 800150a:	e000      	b.n	800150e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 800150c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800150e:	89fb      	ldrh	r3, [r7, #14]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	7dfa      	ldrb	r2, [r7, #23]
 8001514:	4611      	mov	r1, r2
 8001516:	4618      	mov	r0, r3
 8001518:	f001 fbe6 	bl	8002ce8 <TS_IO_Read>
 800151c:	4603      	mov	r3, r0
 800151e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001520:	7cfb      	ldrb	r3, [r7, #19]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	461a      	mov	r2, r3
 8001526:	4b29      	ldr	r3, [pc, #164]	@ (80015cc <ft5336_TS_GetXY+0x1dc>)
 8001528:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800152a:	89fb      	ldrh	r3, [r7, #14]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	7dba      	ldrb	r2, [r7, #22]
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f001 fbd8 	bl	8002ce8 <TS_IO_Read>
 8001538:	4603      	mov	r3, r0
 800153a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800153c:	7cfb      	ldrb	r3, [r7, #19]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	021b      	lsls	r3, r3, #8
 8001542:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001546:	b21a      	sxth	r2, r3
 8001548:	4b20      	ldr	r3, [pc, #128]	@ (80015cc <ft5336_TS_GetXY+0x1dc>)
 800154a:	881b      	ldrh	r3, [r3, #0]
 800154c:	b21b      	sxth	r3, r3
 800154e:	4313      	orrs	r3, r2
 8001550:	b21b      	sxth	r3, r3
 8001552:	b29a      	uxth	r2, r3
 8001554:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <ft5336_TS_GetXY+0x1dc>)
 8001556:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001558:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <ft5336_TS_GetXY+0x1dc>)
 800155a:	881a      	ldrh	r2, [r3, #0]
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001560:	89fb      	ldrh	r3, [r7, #14]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	7d7a      	ldrb	r2, [r7, #21]
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f001 fbbd 	bl	8002ce8 <TS_IO_Read>
 800156e:	4603      	mov	r3, r0
 8001570:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001572:	7cfb      	ldrb	r3, [r7, #19]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	461a      	mov	r2, r3
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <ft5336_TS_GetXY+0x1dc>)
 800157a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800157c:	89fb      	ldrh	r3, [r7, #14]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	7d3a      	ldrb	r2, [r7, #20]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f001 fbaf 	bl	8002ce8 <TS_IO_Read>
 800158a:	4603      	mov	r3, r0
 800158c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800158e:	7cfb      	ldrb	r3, [r7, #19]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001598:	b21a      	sxth	r2, r3
 800159a:	4b0c      	ldr	r3, [pc, #48]	@ (80015cc <ft5336_TS_GetXY+0x1dc>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	b21b      	sxth	r3, r3
 80015a0:	4313      	orrs	r3, r2
 80015a2:	b21b      	sxth	r3, r3
 80015a4:	b29a      	uxth	r2, r3
 80015a6:	4b09      	ldr	r3, [pc, #36]	@ (80015cc <ft5336_TS_GetXY+0x1dc>)
 80015a8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80015aa:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <ft5336_TS_GetXY+0x1dc>)
 80015ac:	881a      	ldrh	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80015b2:	4b05      	ldr	r3, [pc, #20]	@ (80015c8 <ft5336_TS_GetXY+0x1d8>)
 80015b4:	789b      	ldrb	r3, [r3, #2]
 80015b6:	3301      	adds	r3, #1
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <ft5336_TS_GetXY+0x1d8>)
 80015bc:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80015be:	bf00      	nop
 80015c0:	3718      	adds	r7, #24
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	20009430 	.word	0x20009430
 80015cc:	20009434 	.word	0x20009434

080015d0 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80015de:	2301      	movs	r3, #1
 80015e0:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80015e2:	88fb      	ldrh	r3, [r7, #6]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	7bfa      	ldrb	r2, [r7, #15]
 80015e8:	21a4      	movs	r1, #164	@ 0xa4
 80015ea:	4618      	mov	r0, r3
 80015ec:	f001 fb62 	bl	8002cb4 <TS_IO_Write>
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8001602:	2300      	movs	r3, #0
 8001604:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8001606:	2300      	movs	r3, #0
 8001608:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	21a4      	movs	r1, #164	@ 0xa4
 8001612:	4618      	mov	r0, r3
 8001614:	f001 fb4e 	bl	8002cb4 <TS_IO_Write>
}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 800162a:	2300      	movs	r3, #0
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	6039      	str	r1, [r7, #0]
 8001658:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800165a:	2300      	movs	r3, #0
 800165c:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	2101      	movs	r1, #1
 8001664:	4618      	mov	r0, r3
 8001666:	f001 fb3f 	bl	8002ce8 <TS_IO_Read>
 800166a:	4603      	mov	r3, r0
 800166c:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
 8001670:	b2db      	uxtb	r3, r3
 8001672:	461a      	mov	r2, r3
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	601a      	str	r2, [r3, #0]
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	4603      	mov	r3, r0
 800168e:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001698:	2300      	movs	r3, #0
 800169a:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 80016a0:	4b4d      	ldr	r3, [pc, #308]	@ (80017d8 <ft5336_TS_GetTouchInfo+0x158>)
 80016a2:	785b      	ldrb	r3, [r3, #1]
 80016a4:	461a      	mov	r2, r3
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	4293      	cmp	r3, r2
 80016aa:	f080 8090 	bcs.w	80017ce <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	2b09      	cmp	r3, #9
 80016b2:	d85d      	bhi.n	8001770 <ft5336_TS_GetTouchInfo+0xf0>
 80016b4:	a201      	add	r2, pc, #4	@ (adr r2, 80016bc <ft5336_TS_GetTouchInfo+0x3c>)
 80016b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ba:	bf00      	nop
 80016bc:	080016e5 	.word	0x080016e5
 80016c0:	080016f3 	.word	0x080016f3
 80016c4:	08001701 	.word	0x08001701
 80016c8:	0800170f 	.word	0x0800170f
 80016cc:	0800171d 	.word	0x0800171d
 80016d0:	0800172b 	.word	0x0800172b
 80016d4:	08001739 	.word	0x08001739
 80016d8:	08001747 	.word	0x08001747
 80016dc:	08001755 	.word	0x08001755
 80016e0:	08001763 	.word	0x08001763
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80016e4:	2303      	movs	r3, #3
 80016e6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80016e8:	2307      	movs	r3, #7
 80016ea:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80016ec:	2308      	movs	r3, #8
 80016ee:	757b      	strb	r3, [r7, #21]
      break;
 80016f0:	e03f      	b.n	8001772 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80016f2:	2309      	movs	r3, #9
 80016f4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80016f6:	230d      	movs	r3, #13
 80016f8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80016fa:	230e      	movs	r3, #14
 80016fc:	757b      	strb	r3, [r7, #21]
      break;
 80016fe:	e038      	b.n	8001772 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8001700:	230f      	movs	r3, #15
 8001702:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8001704:	2313      	movs	r3, #19
 8001706:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8001708:	2314      	movs	r3, #20
 800170a:	757b      	strb	r3, [r7, #21]
      break;
 800170c:	e031      	b.n	8001772 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 800170e:	2315      	movs	r3, #21
 8001710:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8001712:	2319      	movs	r3, #25
 8001714:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8001716:	231a      	movs	r3, #26
 8001718:	757b      	strb	r3, [r7, #21]
      break;
 800171a:	e02a      	b.n	8001772 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 800171c:	231b      	movs	r3, #27
 800171e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8001720:	231f      	movs	r3, #31
 8001722:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8001724:	2320      	movs	r3, #32
 8001726:	757b      	strb	r3, [r7, #21]
      break;
 8001728:	e023      	b.n	8001772 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 800172a:	2321      	movs	r3, #33	@ 0x21
 800172c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 800172e:	2325      	movs	r3, #37	@ 0x25
 8001730:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8001732:	2326      	movs	r3, #38	@ 0x26
 8001734:	757b      	strb	r3, [r7, #21]
      break;
 8001736:	e01c      	b.n	8001772 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001738:	2327      	movs	r3, #39	@ 0x27
 800173a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 800173c:	232b      	movs	r3, #43	@ 0x2b
 800173e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8001740:	232c      	movs	r3, #44	@ 0x2c
 8001742:	757b      	strb	r3, [r7, #21]
      break;
 8001744:	e015      	b.n	8001772 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001746:	232d      	movs	r3, #45	@ 0x2d
 8001748:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 800174a:	2331      	movs	r3, #49	@ 0x31
 800174c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800174e:	2332      	movs	r3, #50	@ 0x32
 8001750:	757b      	strb	r3, [r7, #21]
      break;
 8001752:	e00e      	b.n	8001772 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001754:	2333      	movs	r3, #51	@ 0x33
 8001756:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001758:	2337      	movs	r3, #55	@ 0x37
 800175a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 800175c:	2338      	movs	r3, #56	@ 0x38
 800175e:	757b      	strb	r3, [r7, #21]
      break;
 8001760:	e007      	b.n	8001772 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8001762:	2339      	movs	r3, #57	@ 0x39
 8001764:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001766:	233d      	movs	r3, #61	@ 0x3d
 8001768:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 800176a:	233e      	movs	r3, #62	@ 0x3e
 800176c:	757b      	strb	r3, [r7, #21]
      break;
 800176e:	e000      	b.n	8001772 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8001770:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8001772:	89fb      	ldrh	r3, [r7, #14]
 8001774:	b2db      	uxtb	r3, r3
 8001776:	7dfa      	ldrb	r2, [r7, #23]
 8001778:	4611      	mov	r1, r2
 800177a:	4618      	mov	r0, r3
 800177c:	f001 fab4 	bl	8002ce8 <TS_IO_Read>
 8001780:	4603      	mov	r3, r0
 8001782:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001784:	7d3b      	ldrb	r3, [r7, #20]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	119b      	asrs	r3, r3, #6
 800178a:	f003 0203 	and.w	r2, r3, #3
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8001792:	89fb      	ldrh	r3, [r7, #14]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	7dba      	ldrb	r2, [r7, #22]
 8001798:	4611      	mov	r1, r2
 800179a:	4618      	mov	r0, r3
 800179c:	f001 faa4 	bl	8002ce8 <TS_IO_Read>
 80017a0:	4603      	mov	r3, r0
 80017a2:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 80017a4:	7d3b      	ldrb	r3, [r7, #20]
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	7d7a      	ldrb	r2, [r7, #21]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fa96 	bl	8002ce8 <TS_IO_Read>
 80017bc:	4603      	mov	r3, r0
 80017be:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 80017c0:	7d3b      	ldrb	r3, [r7, #20]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	111b      	asrs	r3, r3, #4
 80017c6:	f003 0204 	and.w	r2, r3, #4
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 80017ce:	bf00      	nop
 80017d0:	3718      	adds	r7, #24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20009430 	.word	0x20009430

080017dc <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80017e0:	4b03      	ldr	r3, [pc, #12]	@ (80017f0 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20009430 	.word	0x20009430

080017f4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80017f8:	f7ff fff0 	bl	80017dc <ft5336_Get_I2C_InitializedStatus>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d104      	bne.n	800180c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001802:	f001 fa4d 	bl	8002ca0 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001806:	4b02      	ldr	r3, [pc, #8]	@ (8001810 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
  }
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}
 8001810:	20009430 	.word	0x20009430

08001814 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800181e:	2300      	movs	r3, #0
 8001820:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b090      	sub	sp, #64	@ 0x40
 8001834:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001836:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001846:	4bb0      	ldr	r3, [pc, #704]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4aaf      	ldr	r2, [pc, #700]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 800184c:	f043 0310 	orr.w	r3, r3, #16
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4bad      	ldr	r3, [pc, #692]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0310 	and.w	r3, r3, #16
 800185a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800185c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	4baa      	ldr	r3, [pc, #680]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4aa9      	ldr	r2, [pc, #676]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001864:	f043 0302 	orr.w	r3, r3, #2
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4ba7      	ldr	r3, [pc, #668]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
 8001874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001876:	4ba4      	ldr	r3, [pc, #656]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	4aa3      	ldr	r2, [pc, #652]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6313      	str	r3, [r2, #48]	@ 0x30
 8001882:	4ba1      	ldr	r3, [pc, #644]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	623b      	str	r3, [r7, #32]
 800188c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b9e      	ldr	r3, [pc, #632]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	4a9d      	ldr	r2, [pc, #628]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6313      	str	r3, [r2, #48]	@ 0x30
 800189a:	4b9b      	ldr	r3, [pc, #620]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018a6:	4b98      	ldr	r3, [pc, #608]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018aa:	4a97      	ldr	r2, [pc, #604]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 80018ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018b2:	4b95      	ldr	r3, [pc, #596]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018ba:	61bb      	str	r3, [r7, #24]
 80018bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80018be:	4b92      	ldr	r3, [pc, #584]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	4a91      	ldr	r2, [pc, #580]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 80018c4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018ca:	4b8f      	ldr	r3, [pc, #572]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d6:	4b8c      	ldr	r3, [pc, #560]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a8b      	ldr	r2, [pc, #556]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 80018dc:	f043 0308 	orr.w	r3, r3, #8
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b89      	ldr	r3, [pc, #548]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80018ee:	4b86      	ldr	r3, [pc, #536]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a85      	ldr	r2, [pc, #532]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b83      	ldr	r3, [pc, #524]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001906:	4b80      	ldr	r3, [pc, #512]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a7f      	ldr	r2, [pc, #508]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 800190c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b7d      	ldr	r3, [pc, #500]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800191e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001922:	4a79      	ldr	r2, [pc, #484]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001924:	f043 0320 	orr.w	r3, r3, #32
 8001928:	6313      	str	r3, [r2, #48]	@ 0x30
 800192a:	4b77      	ldr	r3, [pc, #476]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800192e:	f003 0320 	and.w	r3, r3, #32
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001936:	4b74      	ldr	r3, [pc, #464]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193a:	4a73      	ldr	r2, [pc, #460]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 800193c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001940:	6313      	str	r3, [r2, #48]	@ 0x30
 8001942:	4b71      	ldr	r3, [pc, #452]	@ (8001b08 <MX_GPIO_Init+0x2d8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001946:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	2160      	movs	r1, #96	@ 0x60
 8001952:	486e      	ldr	r0, [pc, #440]	@ (8001b0c <MX_GPIO_Init+0x2dc>)
 8001954:	f005 fab0 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001958:	2201      	movs	r2, #1
 800195a:	2120      	movs	r1, #32
 800195c:	486c      	ldr	r0, [pc, #432]	@ (8001b10 <MX_GPIO_Init+0x2e0>)
 800195e:	f005 faab 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001962:	2200      	movs	r2, #0
 8001964:	2108      	movs	r1, #8
 8001966:	486a      	ldr	r0, [pc, #424]	@ (8001b10 <MX_GPIO_Init+0x2e0>)
 8001968:	f005 faa6 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	2108      	movs	r1, #8
 8001970:	4868      	ldr	r0, [pc, #416]	@ (8001b14 <MX_GPIO_Init+0x2e4>)
 8001972:	f005 faa1 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001976:	2201      	movs	r2, #1
 8001978:	2108      	movs	r1, #8
 800197a:	4867      	ldr	r0, [pc, #412]	@ (8001b18 <MX_GPIO_Init+0x2e8>)
 800197c:	f005 fa9c 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001980:	2201      	movs	r2, #1
 8001982:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001986:	4863      	ldr	r0, [pc, #396]	@ (8001b14 <MX_GPIO_Init+0x2e4>)
 8001988:	f005 fa96 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800198c:	2200      	movs	r2, #0
 800198e:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8001992:	4862      	ldr	r0, [pc, #392]	@ (8001b1c <MX_GPIO_Init+0x2ec>)
 8001994:	f005 fa90 	bl	8006eb8 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	2108      	movs	r1, #8
 800199c:	4860      	ldr	r0, [pc, #384]	@ (8001b20 <MX_GPIO_Init+0x2f0>)
 800199e:	f005 fa8b 	bl	8006eb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019a2:	2308      	movs	r3, #8
 80019a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a6:	2300      	movs	r3, #0
 80019a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019b2:	4619      	mov	r1, r3
 80019b4:	4855      	ldr	r0, [pc, #340]	@ (8001b0c <MX_GPIO_Init+0x2dc>)
 80019b6:	f004 ffaf 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80019ba:	f643 0323 	movw	r3, #14371	@ 0x3823
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c0:	2302      	movs	r3, #2
 80019c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80019cc:	230a      	movs	r3, #10
 80019ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019d4:	4619      	mov	r1, r3
 80019d6:	4853      	ldr	r0, [pc, #332]	@ (8001b24 <MX_GPIO_Init+0x2f4>)
 80019d8:	f004 ff9e 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 80019dc:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80019e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e2:	2300      	movs	r3, #0
 80019e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ee:	4619      	mov	r1, r3
 80019f0:	484d      	ldr	r0, [pc, #308]	@ (8001b28 <MX_GPIO_Init+0x2f8>)
 80019f2:	f004 ff91 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80019f6:	2360      	movs	r3, #96	@ 0x60
 80019f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fa:	2301      	movs	r3, #1
 80019fc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a02:	2300      	movs	r3, #0
 8001a04:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	483f      	ldr	r0, [pc, #252]	@ (8001b0c <MX_GPIO_Init+0x2dc>)
 8001a0e:	f004 ff83 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001a12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a24:	4619      	mov	r1, r3
 8001a26:	4841      	ldr	r0, [pc, #260]	@ (8001b2c <MX_GPIO_Init+0x2fc>)
 8001a28:	f004 ff76 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a2c:	2340      	movs	r3, #64	@ 0x40
 8001a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a30:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a34:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4833      	ldr	r0, [pc, #204]	@ (8001b10 <MX_GPIO_Init+0x2e0>)
 8001a42:	f004 ff69 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001a46:	2328      	movs	r3, #40	@ 0x28
 8001a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2300      	movs	r3, #0
 8001a54:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a56:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	482c      	ldr	r0, [pc, #176]	@ (8001b10 <MX_GPIO_Init+0x2e0>)
 8001a5e:	f004 ff5b 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001a62:	f241 0308 	movw	r3, #4104	@ 0x1008
 8001a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2300      	movs	r3, #0
 8001a72:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4826      	ldr	r0, [pc, #152]	@ (8001b14 <MX_GPIO_Init+0x2e4>)
 8001a7c:	f004 ff4c 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a86:	2300      	movs	r3, #0
 8001a88:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a92:	4619      	mov	r1, r3
 8001a94:	4826      	ldr	r0, [pc, #152]	@ (8001b30 <MX_GPIO_Init+0x300>)
 8001a96:	f004 ff3f 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a9a:	2308      	movs	r3, #8
 8001a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001aaa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4819      	ldr	r0, [pc, #100]	@ (8001b18 <MX_GPIO_Init+0x2e8>)
 8001ab2:	f004 ff31 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001ab6:	2310      	movs	r3, #16
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aba:	2300      	movs	r3, #0
 8001abc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ac2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4811      	ldr	r0, [pc, #68]	@ (8001b10 <MX_GPIO_Init+0x2e0>)
 8001aca:	f004 ff25 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001ace:	f248 0304 	movw	r3, #32772	@ 0x8004
 8001ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001adc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480e      	ldr	r0, [pc, #56]	@ (8001b1c <MX_GPIO_Init+0x2ec>)
 8001ae4:	f004 ff18 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001ae8:	f645 6340 	movw	r3, #24128	@ 0x5e40
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001afa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001afe:	4619      	mov	r1, r3
 8001b00:	4806      	ldr	r0, [pc, #24]	@ (8001b1c <MX_GPIO_Init+0x2ec>)
 8001b02:	f004 ff09 	bl	8006918 <HAL_GPIO_Init>
 8001b06:	e015      	b.n	8001b34 <MX_GPIO_Init+0x304>
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40020c00 	.word	0x40020c00
 8001b14:	40022000 	.word	0x40022000
 8001b18:	40022800 	.word	0x40022800
 8001b1c:	40021c00 	.word	0x40021c00
 8001b20:	40021800 	.word	0x40021800
 8001b24:	40020400 	.word	0x40020400
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	40022400 	.word	0x40022400
 8001b30:	40020800 	.word	0x40020800

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b3a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b3e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4832      	ldr	r0, [pc, #200]	@ (8001c14 <MX_GPIO_Init+0x3e4>)
 8001b4c:	f004 fee4 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b50:	2310      	movs	r3, #16
 8001b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b60:	230a      	movs	r3, #10
 8001b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b68:	4619      	mov	r1, r3
 8001b6a:	482b      	ldr	r0, [pc, #172]	@ (8001c18 <MX_GPIO_Init+0x3e8>)
 8001b6c:	f004 fed4 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001b70:	2384      	movs	r3, #132	@ 0x84
 8001b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b74:	2300      	movs	r3, #0
 8001b76:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b80:	4619      	mov	r1, r3
 8001b82:	4826      	ldr	r0, [pc, #152]	@ (8001c1c <MX_GPIO_Init+0x3ec>)
 8001b84:	f004 fec8 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001b88:	2305      	movs	r3, #5
 8001b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	2302      	movs	r3, #2
 8001b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b94:	2303      	movs	r3, #3
 8001b96:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b98:	230a      	movs	r3, #10
 8001b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	481f      	ldr	r0, [pc, #124]	@ (8001c20 <MX_GPIO_Init+0x3f0>)
 8001ba4:	f004 feb8 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001ba8:	2308      	movs	r3, #8
 8001baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bac:	2301      	movs	r3, #1
 8001bae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001bb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4817      	ldr	r0, [pc, #92]	@ (8001c1c <MX_GPIO_Init+0x3ec>)
 8001bc0:	f004 feaa 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bc4:	2310      	movs	r3, #16
 8001bc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4813      	ldr	r0, [pc, #76]	@ (8001c24 <MX_GPIO_Init+0x3f4>)
 8001bd8:	f004 fe9e 	bl	8006918 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001bdc:	2328      	movs	r3, #40	@ 0x28
 8001bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bec:	230a      	movs	r3, #10
 8001bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	480b      	ldr	r0, [pc, #44]	@ (8001c24 <MX_GPIO_Init+0x3f4>)
 8001bf8:	f004 fe8e 	bl	8006918 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2105      	movs	r1, #5
 8001c00:	2028      	movs	r0, #40	@ 0x28
 8001c02:	f003 ffcf 	bl	8005ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c06:	2028      	movs	r0, #40	@ 0x28
 8001c08:	f003 ffe8 	bl	8005bdc <HAL_NVIC_EnableIRQ>

}
 8001c0c:	bf00      	nop
 8001c0e:	3740      	adds	r7, #64	@ 0x40
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40022000 	.word	0x40022000
 8001c18:	40021c00 	.word	0x40021c00
 8001c1c:	40021800 	.word	0x40021800
 8001c20:	40020800 	.word	0x40020800
 8001c24:	40020000 	.word	0x40020000

08001c28 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8001c9c <MX_I2C1_Init+0x74>)
 8001c2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ca0 <MX_I2C1_Init+0x78>)
 8001c30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001c32:	4b1a      	ldr	r3, [pc, #104]	@ (8001c9c <MX_I2C1_Init+0x74>)
 8001c34:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca4 <MX_I2C1_Init+0x7c>)
 8001c36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001c38:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <MX_I2C1_Init+0x74>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3e:	4b17      	ldr	r3, [pc, #92]	@ (8001c9c <MX_I2C1_Init+0x74>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c44:	4b15      	ldr	r3, [pc, #84]	@ (8001c9c <MX_I2C1_Init+0x74>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4a:	4b14      	ldr	r3, [pc, #80]	@ (8001c9c <MX_I2C1_Init+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c50:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <MX_I2C1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c56:	4b11      	ldr	r3, [pc, #68]	@ (8001c9c <MX_I2C1_Init+0x74>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c9c <MX_I2C1_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c62:	480e      	ldr	r0, [pc, #56]	@ (8001c9c <MX_I2C1_Init+0x74>)
 8001c64:	f005 f980 	bl	8006f68 <HAL_I2C_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001c6e:	f000 fc1d 	bl	80024ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c72:	2100      	movs	r1, #0
 8001c74:	4809      	ldr	r0, [pc, #36]	@ (8001c9c <MX_I2C1_Init+0x74>)
 8001c76:	f005 ff0d 	bl	8007a94 <HAL_I2CEx_ConfigAnalogFilter>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001c80:	f000 fc14 	bl	80024ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001c84:	2100      	movs	r1, #0
 8001c86:	4805      	ldr	r0, [pc, #20]	@ (8001c9c <MX_I2C1_Init+0x74>)
 8001c88:	f005 ff4f 	bl	8007b2a <HAL_I2CEx_ConfigDigitalFilter>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001c92:	f000 fc0b 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20009438 	.word	0x20009438
 8001ca0:	40005400 	.word	0x40005400
 8001ca4:	00c0eaff 	.word	0x00c0eaff

08001ca8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001cac:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <MX_I2C3_Init+0x74>)
 8001cae:	4a1c      	ldr	r2, [pc, #112]	@ (8001d20 <MX_I2C3_Init+0x78>)
 8001cb0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d1c <MX_I2C3_Init+0x74>)
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d24 <MX_I2C3_Init+0x7c>)
 8001cb6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001cb8:	4b18      	ldr	r3, [pc, #96]	@ (8001d1c <MX_I2C3_Init+0x74>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cbe:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <MX_I2C3_Init+0x74>)
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc4:	4b15      	ldr	r3, [pc, #84]	@ (8001d1c <MX_I2C3_Init+0x74>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001cca:	4b14      	ldr	r3, [pc, #80]	@ (8001d1c <MX_I2C3_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <MX_I2C3_Init+0x74>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cd6:	4b11      	ldr	r3, [pc, #68]	@ (8001d1c <MX_I2C3_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8001d1c <MX_I2C3_Init+0x74>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001ce2:	480e      	ldr	r0, [pc, #56]	@ (8001d1c <MX_I2C3_Init+0x74>)
 8001ce4:	f005 f940 	bl	8006f68 <HAL_I2C_Init>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001cee:	f000 fbdd 	bl	80024ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001cf2:	2100      	movs	r1, #0
 8001cf4:	4809      	ldr	r0, [pc, #36]	@ (8001d1c <MX_I2C3_Init+0x74>)
 8001cf6:	f005 fecd 	bl	8007a94 <HAL_I2CEx_ConfigAnalogFilter>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001d00:	f000 fbd4 	bl	80024ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001d04:	2100      	movs	r1, #0
 8001d06:	4805      	ldr	r0, [pc, #20]	@ (8001d1c <MX_I2C3_Init+0x74>)
 8001d08:	f005 ff0f 	bl	8007b2a <HAL_I2CEx_ConfigDigitalFilter>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001d12:	f000 fbcb 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	2000948c 	.word	0x2000948c
 8001d20:	40005c00 	.word	0x40005c00
 8001d24:	00c0eaff 	.word	0x00c0eaff

08001d28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b0ac      	sub	sp, #176	@ 0xb0
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d30:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
 8001d3a:	609a      	str	r2, [r3, #8]
 8001d3c:	60da      	str	r2, [r3, #12]
 8001d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d40:	f107 0318 	add.w	r3, r7, #24
 8001d44:	2284      	movs	r2, #132	@ 0x84
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f010 fffb 	bl	8012d44 <memset>
  if(i2cHandle->Instance==I2C1)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a44      	ldr	r2, [pc, #272]	@ (8001e64 <HAL_I2C_MspInit+0x13c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d13d      	bne.n	8001dd4 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d58:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d5c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	4618      	mov	r0, r3
 8001d68:	f006 ffc0 	bl	8008cec <HAL_RCCEx_PeriphCLKConfig>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001d72:	f000 fb9b 	bl	80024ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d76:	4b3c      	ldr	r3, [pc, #240]	@ (8001e68 <HAL_I2C_MspInit+0x140>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a3b      	ldr	r2, [pc, #236]	@ (8001e68 <HAL_I2C_MspInit+0x140>)
 8001d7c:	f043 0302 	orr.w	r3, r3, #2
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b39      	ldr	r3, [pc, #228]	@ (8001e68 <HAL_I2C_MspInit+0x140>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	617b      	str	r3, [r7, #20]
 8001d8c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8001d8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d92:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d96:	2312      	movs	r3, #18
 8001d98:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001da8:	2304      	movs	r3, #4
 8001daa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001db2:	4619      	mov	r1, r3
 8001db4:	482d      	ldr	r0, [pc, #180]	@ (8001e6c <HAL_I2C_MspInit+0x144>)
 8001db6:	f004 fdaf 	bl	8006918 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dba:	4b2b      	ldr	r3, [pc, #172]	@ (8001e68 <HAL_I2C_MspInit+0x140>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	4a2a      	ldr	r2, [pc, #168]	@ (8001e68 <HAL_I2C_MspInit+0x140>)
 8001dc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dc4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dc6:	4b28      	ldr	r3, [pc, #160]	@ (8001e68 <HAL_I2C_MspInit+0x140>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001dd2:	e042      	b.n	8001e5a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a25      	ldr	r2, [pc, #148]	@ (8001e70 <HAL_I2C_MspInit+0x148>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d13d      	bne.n	8001e5a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001dde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001de2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dea:	f107 0318 	add.w	r3, r7, #24
 8001dee:	4618      	mov	r0, r3
 8001df0:	f006 ff7c 	bl	8008cec <HAL_RCCEx_PeriphCLKConfig>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001dfa:	f000 fb57 	bl	80024ac <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dfe:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <HAL_I2C_MspInit+0x140>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	4a19      	ldr	r2, [pc, #100]	@ (8001e68 <HAL_I2C_MspInit+0x140>)
 8001e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e0a:	4b17      	ldr	r3, [pc, #92]	@ (8001e68 <HAL_I2C_MspInit+0x140>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001e16:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001e1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e1e:	2312      	movs	r3, #18
 8001e20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e30:	2304      	movs	r3, #4
 8001e32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480d      	ldr	r0, [pc, #52]	@ (8001e74 <HAL_I2C_MspInit+0x14c>)
 8001e3e:	f004 fd6b 	bl	8006918 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <HAL_I2C_MspInit+0x140>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a08      	ldr	r2, [pc, #32]	@ (8001e68 <HAL_I2C_MspInit+0x140>)
 8001e48:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <HAL_I2C_MspInit+0x140>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001e56:	60bb      	str	r3, [r7, #8]
 8001e58:	68bb      	ldr	r3, [r7, #8]
}
 8001e5a:	bf00      	nop
 8001e5c:	37b0      	adds	r7, #176	@ 0xb0
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40005400 	.word	0x40005400
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40005c00 	.word	0x40005c00
 8001e74:	40021c00 	.word	0x40021c00

08001e78 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a15      	ldr	r2, [pc, #84]	@ (8001edc <HAL_I2C_MspDeInit+0x64>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d110      	bne.n	8001eac <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001e8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <HAL_I2C_MspDeInit+0x68>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a14      	ldr	r2, [pc, #80]	@ (8001ee0 <HAL_I2C_MspDeInit+0x68>)
 8001e90:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8001e96:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e9a:	4812      	ldr	r0, [pc, #72]	@ (8001ee4 <HAL_I2C_MspDeInit+0x6c>)
 8001e9c:	f004 fee8 	bl	8006c70 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8001ea0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ea4:	480f      	ldr	r0, [pc, #60]	@ (8001ee4 <HAL_I2C_MspDeInit+0x6c>)
 8001ea6:	f004 fee3 	bl	8006c70 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001eaa:	e013      	b.n	8001ed4 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ee8 <HAL_I2C_MspDeInit+0x70>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_I2C_MspDeInit+0x68>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	4a09      	ldr	r2, [pc, #36]	@ (8001ee0 <HAL_I2C_MspDeInit+0x68>)
 8001ebc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ec0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001ec2:	2180      	movs	r1, #128	@ 0x80
 8001ec4:	4809      	ldr	r0, [pc, #36]	@ (8001eec <HAL_I2C_MspDeInit+0x74>)
 8001ec6:	f004 fed3 	bl	8006c70 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8001eca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ece:	4807      	ldr	r0, [pc, #28]	@ (8001eec <HAL_I2C_MspDeInit+0x74>)
 8001ed0:	f004 fece 	bl	8006c70 <HAL_GPIO_DeInit>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40005400 	.word	0x40005400
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020400 	.word	0x40020400
 8001ee8:	40005c00 	.word	0x40005c00
 8001eec:	40021c00 	.word	0x40021c00

08001ef0 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b08e      	sub	sp, #56	@ 0x38
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2234      	movs	r2, #52	@ 0x34
 8001efa:	2100      	movs	r1, #0
 8001efc:	4618      	mov	r0, r3
 8001efe:	f010 ff21 	bl	8012d44 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001f02:	4b3a      	ldr	r3, [pc, #232]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f04:	4a3a      	ldr	r2, [pc, #232]	@ (8001ff0 <MX_LTDC_Init+0x100>)
 8001f06:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f08:	4b38      	ldr	r3, [pc, #224]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f0e:	4b37      	ldr	r3, [pc, #220]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f14:	4b35      	ldr	r3, [pc, #212]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f1a:	4b34      	ldr	r3, [pc, #208]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001f20:	4b32      	ldr	r3, [pc, #200]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f22:	2228      	movs	r2, #40	@ 0x28
 8001f24:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001f26:	4b31      	ldr	r3, [pc, #196]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f28:	2209      	movs	r2, #9
 8001f2a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f2e:	2235      	movs	r2, #53	@ 0x35
 8001f30:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001f32:	4b2e      	ldr	r3, [pc, #184]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f34:	220b      	movs	r2, #11
 8001f36:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001f38:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f3a:	f240 2215 	movw	r2, #533	@ 0x215
 8001f3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001f40:	4b2a      	ldr	r3, [pc, #168]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f42:	f240 121b 	movw	r2, #283	@ 0x11b
 8001f46:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001f48:	4b28      	ldr	r3, [pc, #160]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f4a:	f240 2235 	movw	r2, #565	@ 0x235
 8001f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001f50:	4b26      	ldr	r3, [pc, #152]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f52:	f240 121d 	movw	r2, #285	@ 0x11d
 8001f56:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001f58:	4b24      	ldr	r3, [pc, #144]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001f60:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001f68:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001f70:	481e      	ldr	r0, [pc, #120]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001f72:	f005 fe27 	bl	8007bc4 <HAL_LTDC_Init>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001f7c:	f000 fa96 	bl	80024ac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001f80:	2300      	movs	r3, #0
 8001f82:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001f84:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001f88:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001f8e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001f92:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001f94:	2302      	movs	r3, #2
 8001f96:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001f98:	23ff      	movs	r3, #255	@ 0xff
 8001f9a:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001fa0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001fa4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001faa:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001fae:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001fb0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001fb6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001fba:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4805      	ldr	r0, [pc, #20]	@ (8001fec <MX_LTDC_Init+0xfc>)
 8001fd6:	f005 ff87 	bl	8007ee8 <HAL_LTDC_ConfigLayer>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001fe0:	f000 fa64 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001fe4:	bf00      	nop
 8001fe6:	3738      	adds	r7, #56	@ 0x38
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200094e0 	.word	0x200094e0
 8001ff0:	40016800 	.word	0x40016800

08001ff4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b08e      	sub	sp, #56	@ 0x38
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
 800200a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a55      	ldr	r2, [pc, #340]	@ (8002168 <HAL_LTDC_MspInit+0x174>)
 8002012:	4293      	cmp	r3, r2
 8002014:	f040 80a3 	bne.w	800215e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002018:	4b54      	ldr	r3, [pc, #336]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 800201a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201c:	4a53      	ldr	r2, [pc, #332]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 800201e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002022:	6453      	str	r3, [r2, #68]	@ 0x44
 8002024:	4b51      	ldr	r3, [pc, #324]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 8002026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002028:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800202c:	623b      	str	r3, [r7, #32]
 800202e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002030:	4b4e      	ldr	r3, [pc, #312]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 8002032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002034:	4a4d      	ldr	r2, [pc, #308]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 8002036:	f043 0310 	orr.w	r3, r3, #16
 800203a:	6313      	str	r3, [r2, #48]	@ 0x30
 800203c:	4b4b      	ldr	r3, [pc, #300]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 800203e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002048:	4b48      	ldr	r3, [pc, #288]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204c:	4a47      	ldr	r2, [pc, #284]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 800204e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002052:	6313      	str	r3, [r2, #48]	@ 0x30
 8002054:	4b45      	ldr	r3, [pc, #276]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002058:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8002060:	4b42      	ldr	r3, [pc, #264]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	4a41      	ldr	r2, [pc, #260]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 8002066:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800206a:	6313      	str	r3, [r2, #48]	@ 0x30
 800206c:	4b3f      	ldr	r3, [pc, #252]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 800206e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002078:	4b3c      	ldr	r3, [pc, #240]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	4a3b      	ldr	r2, [pc, #236]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 800207e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002082:	6313      	str	r3, [r2, #48]	@ 0x30
 8002084:	4b39      	ldr	r3, [pc, #228]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208c:	613b      	str	r3, [r7, #16]
 800208e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002090:	4b36      	ldr	r3, [pc, #216]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002094:	4a35      	ldr	r2, [pc, #212]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800209a:	6313      	str	r3, [r2, #48]	@ 0x30
 800209c:	4b33      	ldr	r3, [pc, #204]	@ (800216c <HAL_LTDC_MspInit+0x178>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a4:	60fb      	str	r3, [r7, #12]
 80020a6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80020a8:	2310      	movs	r3, #16
 80020aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ac:	2302      	movs	r3, #2
 80020ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b4:	2300      	movs	r3, #0
 80020b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020b8:	230e      	movs	r3, #14
 80020ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80020bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c0:	4619      	mov	r1, r3
 80020c2:	482b      	ldr	r0, [pc, #172]	@ (8002170 <HAL_LTDC_MspInit+0x17c>)
 80020c4:	f004 fc28 	bl	8006918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80020c8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80020cc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ce:	2302      	movs	r3, #2
 80020d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d6:	2300      	movs	r3, #0
 80020d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020da:	230e      	movs	r3, #14
 80020dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80020de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020e2:	4619      	mov	r1, r3
 80020e4:	4823      	ldr	r0, [pc, #140]	@ (8002174 <HAL_LTDC_MspInit+0x180>)
 80020e6:	f004 fc17 	bl	8006918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80020ea:	23f7      	movs	r3, #247	@ 0xf7
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ee:	2302      	movs	r3, #2
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f2:	2300      	movs	r3, #0
 80020f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f6:	2300      	movs	r3, #0
 80020f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80020fa:	230e      	movs	r3, #14
 80020fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80020fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002102:	4619      	mov	r1, r3
 8002104:	481c      	ldr	r0, [pc, #112]	@ (8002178 <HAL_LTDC_MspInit+0x184>)
 8002106:	f004 fc07 	bl	8006918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800210a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800210e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002114:	2300      	movs	r3, #0
 8002116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002118:	2300      	movs	r3, #0
 800211a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800211c:	2309      	movs	r3, #9
 800211e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8002120:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002124:	4619      	mov	r1, r3
 8002126:	4815      	ldr	r0, [pc, #84]	@ (800217c <HAL_LTDC_MspInit+0x188>)
 8002128:	f004 fbf6 	bl	8006918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 800212c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8002130:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800213a:	2300      	movs	r3, #0
 800213c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800213e:	230e      	movs	r3, #14
 8002140:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002142:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002146:	4619      	mov	r1, r3
 8002148:	480d      	ldr	r0, [pc, #52]	@ (8002180 <HAL_LTDC_MspInit+0x18c>)
 800214a:	f004 fbe5 	bl	8006918 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2105      	movs	r1, #5
 8002152:	2058      	movs	r0, #88	@ 0x58
 8002154:	f003 fd26 	bl	8005ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8002158:	2058      	movs	r0, #88	@ 0x58
 800215a:	f003 fd3f 	bl	8005bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800215e:	bf00      	nop
 8002160:	3738      	adds	r7, #56	@ 0x38
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40016800 	.word	0x40016800
 800216c:	40023800 	.word	0x40023800
 8002170:	40021000 	.word	0x40021000
 8002174:	40022400 	.word	0x40022400
 8002178:	40022800 	.word	0x40022800
 800217c:	40021800 	.word	0x40021800
 8002180:	40022000 	.word	0x40022000

08002184 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002188:	f3bf 8f4f 	dsb	sy
}
 800218c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800218e:	f3bf 8f6f 	isb	sy
}
 8002192:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002194:	4b0d      	ldr	r3, [pc, #52]	@ (80021cc <SCB_EnableICache+0x48>)
 8002196:	2200      	movs	r2, #0
 8002198:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800219c:	f3bf 8f4f 	dsb	sy
}
 80021a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021a2:	f3bf 8f6f 	isb	sy
}
 80021a6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80021a8:	4b08      	ldr	r3, [pc, #32]	@ (80021cc <SCB_EnableICache+0x48>)
 80021aa:	695b      	ldr	r3, [r3, #20]
 80021ac:	4a07      	ldr	r2, [pc, #28]	@ (80021cc <SCB_EnableICache+0x48>)
 80021ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80021b4:	f3bf 8f4f 	dsb	sy
}
 80021b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80021ba:	f3bf 8f6f 	isb	sy
}
 80021be:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80021d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002254 <SCB_EnableDCache+0x84>)
 80021d8:	2200      	movs	r2, #0
 80021da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80021de:	f3bf 8f4f 	dsb	sy
}
 80021e2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80021e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002254 <SCB_EnableDCache+0x84>)
 80021e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021ea:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0b5b      	lsrs	r3, r3, #13
 80021f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80021f4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	08db      	lsrs	r3, r3, #3
 80021fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021fe:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	015a      	lsls	r2, r3, #5
 8002204:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8002208:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800220e:	4911      	ldr	r1, [pc, #68]	@ (8002254 <SCB_EnableDCache+0x84>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	1e5a      	subs	r2, r3, #1
 800221a:	60ba      	str	r2, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1ef      	bne.n	8002200 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	1e5a      	subs	r2, r3, #1
 8002224:	60fa      	str	r2, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e5      	bne.n	80021f6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800222a:	f3bf 8f4f 	dsb	sy
}
 800222e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002230:	4b08      	ldr	r3, [pc, #32]	@ (8002254 <SCB_EnableDCache+0x84>)
 8002232:	695b      	ldr	r3, [r3, #20]
 8002234:	4a07      	ldr	r2, [pc, #28]	@ (8002254 <SCB_EnableDCache+0x84>)
 8002236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800223a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800223c:	f3bf 8f4f 	dsb	sy
}
 8002240:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002242:	f3bf 8f6f 	isb	sy
}
 8002246:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002258:	b598      	push	{r3, r4, r7, lr}
 800225a:	af00      	add	r7, sp, #0
//	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
  /* USER CODE END 1 */
/* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800225c:	f7ff ff92 	bl	8002184 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8002260:	f7ff ffb6 	bl	80021d0 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002264:	f002 ff9b 	bl	800519e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002268:	f000 f86c 	bl	8002344 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800226c:	f000 f8dc 	bl	8002428 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002270:	f7ff fade 	bl	8001830 <MX_GPIO_Init>
  MX_DMA_Init();
 8002274:	f7fe faa6 	bl	80007c4 <MX_DMA_Init>
  MX_ADC3_Init();
 8002278:	f7fe f9e4 	bl	8000644 <MX_ADC3_Init>
  MX_I2C1_Init();
 800227c:	f7ff fcd4 	bl	8001c28 <MX_I2C1_Init>
  MX_I2C3_Init();
 8002280:	f7ff fd12 	bl	8001ca8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8002284:	f7ff fe34 	bl	8001ef0 <MX_LTDC_Init>
  MX_RTC_Init();
 8002288:	f000 f928 	bl	80024dc <MX_RTC_Init>
  MX_SPI2_Init();
 800228c:	f000 fb02 	bl	8002894 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002290:	f002 fac8 	bl	8004824 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002294:	f002 fb1a 	bl	80048cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8002298:	f002 fb66 	bl	8004968 <MX_TIM3_Init>
  MX_TIM5_Init();
 800229c:	f002 fbf2 	bl	8004a84 <MX_TIM5_Init>
  MX_TIM8_Init();
 80022a0:	f002 fc3e 	bl	8004b20 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80022a4:	f002 fde2 	bl	8004e6c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80022a8:	f002 fe10 	bl	8004ecc <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80022ac:	f7fe f978 	bl	80005a0 <MX_ADC1_Init>
  MX_UART7_Init();
 80022b0:	f002 fdac 	bl	8004e0c <MX_UART7_Init>
  MX_FMC_Init();
 80022b4:	f7fe fafe 	bl	80008b4 <MX_FMC_Init>
  MX_DMA2D_Init();
 80022b8:	f7fe faaa 	bl	8000810 <MX_DMA2D_Init>
  MX_SDMMC1_SD_Init();
 80022bc:	f000 f9e0 	bl	8002680 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80022c0:	f00b fbb2 	bl	800da28 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 80022c4:	f000 fd3a 	bl	8002d3c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80022c8:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 80022cc:	2000      	movs	r0, #0
 80022ce:	f000 fdcd 	bl	8002e6c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
	LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 80022d2:	f000 fda3 	bl	8002e1c <BSP_LCD_GetXSize>
 80022d6:	4604      	mov	r4, r0
 80022d8:	f000 fdb4 	bl	8002e44 <BSP_LCD_GetYSize>
 80022dc:	4603      	mov	r3, r0
 80022de:	fb04 f303 	mul.w	r3, r4, r3
 80022e2:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	4619      	mov	r1, r3
 80022ea:	2001      	movs	r0, #1
 80022ec:	f000 fdbe 	bl	8002e6c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80022f0:	f001 fabc 	bl	800386c <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f000 fe19 	bl	8002f2c <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 80022fa:	f04f 30ff 	mov.w	r0, #4294967295
 80022fe:	f000 fe87 	bl	8003010 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8002302:	480e      	ldr	r0, [pc, #56]	@ (800233c <main+0xe4>)
 8002304:	f000 fe54 	bl	8002fb0 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8002308:	480d      	ldr	r0, [pc, #52]	@ (8002340 <main+0xe8>)
 800230a:	f000 fe1f 	bl	8002f4c <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800230e:	f04f 30ff 	mov.w	r0, #4294967295
 8002312:	f000 fe33 	bl	8002f7c <BSP_LCD_SetBackColor>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8002316:	f000 fd81 	bl	8002e1c <BSP_LCD_GetXSize>
 800231a:	4603      	mov	r3, r0
 800231c:	b29c      	uxth	r4, r3
 800231e:	f000 fd91 	bl	8002e44 <BSP_LCD_GetYSize>
 8002322:	4603      	mov	r3, r0
 8002324:	b29b      	uxth	r3, r3
 8002326:	4619      	mov	r1, r3
 8002328:	4620      	mov	r0, r4
 800232a:	f001 feb1 	bl	8004090 <BSP_TS_Init>
//	BSP_SD_Init();

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800232e:	f7fe fbdd 	bl	8000aec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002332:	f00e f99c 	bl	801066e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8002336:	bf00      	nop
 8002338:	e7fd      	b.n	8002336 <main+0xde>
 800233a:	bf00      	nop
 800233c:	20000038 	.word	0x20000038
 8002340:	ffff0000 	.word	0xffff0000

08002344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b094      	sub	sp, #80	@ 0x50
 8002348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800234a:	f107 0320 	add.w	r3, r7, #32
 800234e:	2230      	movs	r2, #48	@ 0x30
 8002350:	2100      	movs	r1, #0
 8002352:	4618      	mov	r0, r3
 8002354:	f010 fcf6 	bl	8012d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002358:	f107 030c 	add.w	r3, r7, #12
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002368:	f005 ffa4 	bl	80082b4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	4b2c      	ldr	r3, [pc, #176]	@ (8002420 <SystemClock_Config+0xdc>)
 800236e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002370:	4a2b      	ldr	r2, [pc, #172]	@ (8002420 <SystemClock_Config+0xdc>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002376:	6413      	str	r3, [r2, #64]	@ 0x40
 8002378:	4b29      	ldr	r3, [pc, #164]	@ (8002420 <SystemClock_Config+0xdc>)
 800237a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002384:	4b27      	ldr	r3, [pc, #156]	@ (8002424 <SystemClock_Config+0xe0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a26      	ldr	r2, [pc, #152]	@ (8002424 <SystemClock_Config+0xe0>)
 800238a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b24      	ldr	r3, [pc, #144]	@ (8002424 <SystemClock_Config+0xe0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002398:	607b      	str	r3, [r7, #4]
 800239a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800239c:	2309      	movs	r3, #9
 800239e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80023a6:	2301      	movs	r3, #1
 80023a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023aa:	2302      	movs	r3, #2
 80023ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80023b4:	2319      	movs	r3, #25
 80023b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 80023b8:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80023bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023be:	2302      	movs	r3, #2
 80023c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80023c2:	2309      	movs	r3, #9
 80023c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023c6:	f107 0320 	add.w	r3, r7, #32
 80023ca:	4618      	mov	r0, r3
 80023cc:	f005 ffd2 	bl	8008374 <HAL_RCC_OscConfig>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80023d6:	f000 f869 	bl	80024ac <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80023da:	f005 ff7b 	bl	80082d4 <HAL_PWREx_EnableOverDrive>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80023e4:	f000 f862 	bl	80024ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023e8:	230f      	movs	r3, #15
 80023ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023ec:	2302      	movs	r3, #2
 80023ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80023f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80023f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80023fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002400:	f107 030c 	add.w	r3, r7, #12
 8002404:	2106      	movs	r1, #6
 8002406:	4618      	mov	r0, r3
 8002408:	f006 fa58 	bl	80088bc <HAL_RCC_ClockConfig>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002412:	f000 f84b 	bl	80024ac <Error_Handler>
  }
}
 8002416:	bf00      	nop
 8002418:	3750      	adds	r7, #80	@ 0x50
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40007000 	.word	0x40007000

08002428 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b0a2      	sub	sp, #136	@ 0x88
 800242c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	2284      	movs	r2, #132	@ 0x84
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f010 fc85 	bl	8012d44 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC1
 800243a:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <PeriphCommonClock_Config+0x5c>)
 800243c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 800243e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002442:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8002444:	2305      	movs	r3, #5
 8002446:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002448:	2302      	movs	r3, #2
 800244a:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800244c:	2303      	movs	r3, #3
 800244e:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002450:	2301      	movs	r3, #1
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002454:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002458:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800245a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800245e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8002462:	2300      	movs	r3, #0
 8002464:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002468:	1d3b      	adds	r3, r7, #4
 800246a:	4618      	mov	r0, r3
 800246c:	f006 fc3e 	bl	8008cec <HAL_RCCEx_PeriphCLKConfig>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8002476:	f000 f819 	bl	80024ac <Error_Handler>
  }
}
 800247a:	bf00      	nop
 800247c:	3788      	adds	r7, #136	@ 0x88
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	00a00008 	.word	0x00a00008

08002488 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a04      	ldr	r2, [pc, #16]	@ (80024a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800249a:	f002 fe8d 	bl	80051b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40001000 	.word	0x40001000

080024ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80024b0:	b672      	cpsid	i
}
 80024b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	BSP_LCD_DisplayStringAtLine(5,
 80024b4:	4906      	ldr	r1, [pc, #24]	@ (80024d0 <Error_Handler+0x24>)
 80024b6:	2005      	movs	r0, #5
 80024b8:	f000 fede 	bl	8003278 <BSP_LCD_DisplayStringAtLine>
			(uint8_t*) " ERREUR                                            ");
	BSP_LCD_DisplayStringAtLine(6,
 80024bc:	4905      	ldr	r1, [pc, #20]	@ (80024d4 <Error_Handler+0x28>)
 80024be:	2006      	movs	r0, #6
 80024c0:	f000 feda 	bl	8003278 <BSP_LCD_DisplayStringAtLine>
			(uint8_t*) " Verifiez que la carte SD est bien inseree         ");
	BSP_LCD_DisplayStringAtLine(7,
 80024c4:	4904      	ldr	r1, [pc, #16]	@ (80024d8 <Error_Handler+0x2c>)
 80024c6:	2007      	movs	r0, #7
 80024c8:	f000 fed6 	bl	8003278 <BSP_LCD_DisplayStringAtLine>
			(uint8_t*) " Verifiez que les images sont au bon format (.BMP) ");
	while (1) { //On vient mourir ici lorsqu'il y a une erreur
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <Error_Handler+0x20>
 80024d0:	080137dc 	.word	0x080137dc
 80024d4:	08013810 	.word	0x08013810
 80024d8:	08013844 	.word	0x08013844

080024dc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b090      	sub	sp, #64	@ 0x40
 80024e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80024e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]
 80024ee:	60da      	str	r2, [r3, #12]
 80024f0:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80024f2:	2300      	movs	r3, #0
 80024f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80024f6:	463b      	mov	r3, r7
 80024f8:	2228      	movs	r2, #40	@ 0x28
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f010 fc21 	bl	8012d44 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002502:	4b46      	ldr	r3, [pc, #280]	@ (800261c <MX_RTC_Init+0x140>)
 8002504:	4a46      	ldr	r2, [pc, #280]	@ (8002620 <MX_RTC_Init+0x144>)
 8002506:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002508:	4b44      	ldr	r3, [pc, #272]	@ (800261c <MX_RTC_Init+0x140>)
 800250a:	2200      	movs	r2, #0
 800250c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800250e:	4b43      	ldr	r3, [pc, #268]	@ (800261c <MX_RTC_Init+0x140>)
 8002510:	227f      	movs	r2, #127	@ 0x7f
 8002512:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002514:	4b41      	ldr	r3, [pc, #260]	@ (800261c <MX_RTC_Init+0x140>)
 8002516:	22ff      	movs	r2, #255	@ 0xff
 8002518:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800251a:	4b40      	ldr	r3, [pc, #256]	@ (800261c <MX_RTC_Init+0x140>)
 800251c:	2200      	movs	r2, #0
 800251e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002520:	4b3e      	ldr	r3, [pc, #248]	@ (800261c <MX_RTC_Init+0x140>)
 8002522:	2200      	movs	r2, #0
 8002524:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002526:	4b3d      	ldr	r3, [pc, #244]	@ (800261c <MX_RTC_Init+0x140>)
 8002528:	2200      	movs	r2, #0
 800252a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800252c:	483b      	ldr	r0, [pc, #236]	@ (800261c <MX_RTC_Init+0x140>)
 800252e:	f006 ffcd 	bl	80094cc <HAL_RTC_Init>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8002538:	f7ff ffb8 	bl	80024ac <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800253c:	2300      	movs	r3, #0
 800253e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 8002542:	2300      	movs	r3, #0
 8002544:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 8002548:	2300      	movs	r3, #0
 800254a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800254e:	2300      	movs	r3, #0
 8002550:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8002556:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800255a:	2201      	movs	r2, #1
 800255c:	4619      	mov	r1, r3
 800255e:	482f      	ldr	r0, [pc, #188]	@ (800261c <MX_RTC_Init+0x140>)
 8002560:	f007 f838 	bl	80095d4 <HAL_RTC_SetTime>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800256a:	f7ff ff9f 	bl	80024ac <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800256e:	2301      	movs	r3, #1
 8002570:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002574:	2301      	movs	r3, #1
 8002576:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800257a:	2301      	movs	r3, #1
 800257c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002580:	2300      	movs	r3, #0
 8002582:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002586:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800258a:	2201      	movs	r2, #1
 800258c:	4619      	mov	r1, r3
 800258e:	4823      	ldr	r0, [pc, #140]	@ (800261c <MX_RTC_Init+0x140>)
 8002590:	f007 f8ba 	bl	8009708 <HAL_RTC_SetDate>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d001      	beq.n	800259e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800259a:	f7ff ff87 	bl	80024ac <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800259e:	2300      	movs	r3, #0
 80025a0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80025a2:	2300      	movs	r3, #0
 80025a4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80025be:	2300      	movs	r3, #0
 80025c0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80025c2:	2301      	movs	r3, #1
 80025c4:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80025c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80025ce:	463b      	mov	r3, r7
 80025d0:	2201      	movs	r2, #1
 80025d2:	4619      	mov	r1, r3
 80025d4:	4811      	ldr	r0, [pc, #68]	@ (800261c <MX_RTC_Init+0x140>)
 80025d6:	f007 f91b 	bl	8009810 <HAL_RTC_SetAlarm>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 80025e0:	f7ff ff64 	bl	80024ac <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 80025e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80025ea:	463b      	mov	r3, r7
 80025ec:	2201      	movs	r2, #1
 80025ee:	4619      	mov	r1, r3
 80025f0:	480a      	ldr	r0, [pc, #40]	@ (800261c <MX_RTC_Init+0x140>)
 80025f2:	f007 f90d 	bl	8009810 <HAL_RTC_SetAlarm>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80025fc:	f7ff ff56 	bl	80024ac <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002600:	2202      	movs	r2, #2
 8002602:	2100      	movs	r1, #0
 8002604:	4805      	ldr	r0, [pc, #20]	@ (800261c <MX_RTC_Init+0x140>)
 8002606:	f007 facf 	bl	8009ba8 <HAL_RTCEx_SetTimeStamp>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002610:	f7ff ff4c 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002614:	bf00      	nop
 8002616:	3740      	adds	r7, #64	@ 0x40
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20009588 	.word	0x20009588
 8002620:	40002800 	.word	0x40002800

08002624 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b0a4      	sub	sp, #144	@ 0x90
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800262c:	f107 030c 	add.w	r3, r7, #12
 8002630:	2284      	movs	r2, #132	@ 0x84
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f010 fb85 	bl	8012d44 <memset>
  if(rtcHandle->Instance==RTC)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a0e      	ldr	r2, [pc, #56]	@ (8002678 <HAL_RTC_MspInit+0x54>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d114      	bne.n	800266e <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002644:	2320      	movs	r3, #32
 8002646:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002648:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800264c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	4618      	mov	r0, r3
 8002654:	f006 fb4a 	bl	8008cec <HAL_RCCEx_PeriphCLKConfig>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800265e:	f7ff ff25 	bl	80024ac <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_RTC_MspInit+0x58>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	4a05      	ldr	r2, [pc, #20]	@ (800267c <HAL_RTC_MspInit+0x58>)
 8002668:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800266c:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800266e:	bf00      	nop
 8002670:	3790      	adds	r7, #144	@ 0x90
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	40002800 	.word	0x40002800
 800267c:	40023800 	.word	0x40023800

08002680 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002684:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <MX_SDMMC1_SD_Init+0x38>)
 8002686:	4a0d      	ldr	r2, [pc, #52]	@ (80026bc <MX_SDMMC1_SD_Init+0x3c>)
 8002688:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800268a:	4b0b      	ldr	r3, [pc, #44]	@ (80026b8 <MX_SDMMC1_SD_Init+0x38>)
 800268c:	2200      	movs	r2, #0
 800268e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002690:	4b09      	ldr	r3, [pc, #36]	@ (80026b8 <MX_SDMMC1_SD_Init+0x38>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002696:	4b08      	ldr	r3, [pc, #32]	@ (80026b8 <MX_SDMMC1_SD_Init+0x38>)
 8002698:	2200      	movs	r2, #0
 800269a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800269c:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <MX_SDMMC1_SD_Init+0x38>)
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80026a2:	4b05      	ldr	r3, [pc, #20]	@ (80026b8 <MX_SDMMC1_SD_Init+0x38>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80026a8:	4b03      	ldr	r3, [pc, #12]	@ (80026b8 <MX_SDMMC1_SD_Init+0x38>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80026ae:	bf00      	nop
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	200095a8 	.word	0x200095a8
 80026bc:	40012c00 	.word	0x40012c00

080026c0 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	@ 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a65      	ldr	r2, [pc, #404]	@ (8002874 <HAL_SD_MspInit+0x1b4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	f040 80c3 	bne.w	800286a <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80026e4:	4b64      	ldr	r3, [pc, #400]	@ (8002878 <HAL_SD_MspInit+0x1b8>)
 80026e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026e8:	4a63      	ldr	r2, [pc, #396]	@ (8002878 <HAL_SD_MspInit+0x1b8>)
 80026ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80026ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80026f0:	4b61      	ldr	r3, [pc, #388]	@ (8002878 <HAL_SD_MspInit+0x1b8>)
 80026f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002878 <HAL_SD_MspInit+0x1b8>)
 80026fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002700:	4a5d      	ldr	r2, [pc, #372]	@ (8002878 <HAL_SD_MspInit+0x1b8>)
 8002702:	f043 0304 	orr.w	r3, r3, #4
 8002706:	6313      	str	r3, [r2, #48]	@ 0x30
 8002708:	4b5b      	ldr	r3, [pc, #364]	@ (8002878 <HAL_SD_MspInit+0x1b8>)
 800270a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002714:	4b58      	ldr	r3, [pc, #352]	@ (8002878 <HAL_SD_MspInit+0x1b8>)
 8002716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002718:	4a57      	ldr	r2, [pc, #348]	@ (8002878 <HAL_SD_MspInit+0x1b8>)
 800271a:	f043 0308 	orr.w	r3, r3, #8
 800271e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002720:	4b55      	ldr	r3, [pc, #340]	@ (8002878 <HAL_SD_MspInit+0x1b8>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	68bb      	ldr	r3, [r7, #8]
    /**SDMMC1 GPIO Configuration
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_8;
 800272c:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8002730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002732:	2302      	movs	r3, #2
 8002734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273a:	2303      	movs	r3, #3
 800273c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800273e:	230c      	movs	r3, #12
 8002740:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4619      	mov	r1, r3
 8002748:	484c      	ldr	r0, [pc, #304]	@ (800287c <HAL_SD_MspInit+0x1bc>)
 800274a:	f004 f8e5 	bl	8006918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800274e:	2304      	movs	r3, #4
 8002750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800275e:	230c      	movs	r3, #12
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	4619      	mov	r1, r3
 8002768:	4845      	ldr	r0, [pc, #276]	@ (8002880 <HAL_SD_MspInit+0x1c0>)
 800276a:	f004 f8d5 	bl	8006918 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800276e:	4b45      	ldr	r3, [pc, #276]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 8002770:	4a45      	ldr	r2, [pc, #276]	@ (8002888 <HAL_SD_MspInit+0x1c8>)
 8002772:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002774:	4b43      	ldr	r3, [pc, #268]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 8002776:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800277a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800277c:	4b41      	ldr	r3, [pc, #260]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 800277e:	2200      	movs	r2, #0
 8002780:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002782:	4b40      	ldr	r3, [pc, #256]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 8002784:	2200      	movs	r2, #0
 8002786:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002788:	4b3e      	ldr	r3, [pc, #248]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 800278a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800278e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002790:	4b3c      	ldr	r3, [pc, #240]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 8002792:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002796:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002798:	4b3a      	ldr	r3, [pc, #232]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 800279a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800279e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80027a0:	4b38      	ldr	r3, [pc, #224]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 80027a2:	2220      	movs	r2, #32
 80027a4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027a6:	4b37      	ldr	r3, [pc, #220]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80027ac:	4b35      	ldr	r3, [pc, #212]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 80027ae:	2204      	movs	r2, #4
 80027b0:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80027b2:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 80027b4:	2203      	movs	r2, #3
 80027b6:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80027b8:	4b32      	ldr	r3, [pc, #200]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 80027ba:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80027be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80027c0:	4b30      	ldr	r3, [pc, #192]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 80027c2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80027c8:	482e      	ldr	r0, [pc, #184]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 80027ca:	f003 fa15 	bl	8005bf8 <HAL_DMA_Init>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80027d4:	f7ff fe6a 	bl	80024ac <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a2a      	ldr	r2, [pc, #168]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 80027dc:	641a      	str	r2, [r3, #64]	@ 0x40
 80027de:	4a29      	ldr	r2, [pc, #164]	@ (8002884 <HAL_SD_MspInit+0x1c4>)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80027e4:	4b29      	ldr	r3, [pc, #164]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 80027e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002890 <HAL_SD_MspInit+0x1d0>)
 80027e8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80027ea:	4b28      	ldr	r3, [pc, #160]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 80027ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80027f0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027f2:	4b26      	ldr	r3, [pc, #152]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 80027f4:	2240      	movs	r2, #64	@ 0x40
 80027f6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f8:	4b24      	ldr	r3, [pc, #144]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027fe:	4b23      	ldr	r3, [pc, #140]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 8002800:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002804:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002806:	4b21      	ldr	r3, [pc, #132]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 8002808:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800280c:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800280e:	4b1f      	ldr	r3, [pc, #124]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 8002810:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002814:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002816:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 8002818:	2220      	movs	r2, #32
 800281a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800281c:	4b1b      	ldr	r3, [pc, #108]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 800281e:	2200      	movs	r2, #0
 8002820:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002822:	4b1a      	ldr	r3, [pc, #104]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 8002824:	2204      	movs	r2, #4
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002828:	4b18      	ldr	r3, [pc, #96]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 800282a:	2203      	movs	r2, #3
 800282c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800282e:	4b17      	ldr	r3, [pc, #92]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 8002830:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002834:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002836:	4b15      	ldr	r3, [pc, #84]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 8002838:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800283c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800283e:	4813      	ldr	r0, [pc, #76]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 8002840:	f003 f9da 	bl	8005bf8 <HAL_DMA_Init>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800284a:	f7ff fe2f 	bl	80024ac <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a0e      	ldr	r2, [pc, #56]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 8002852:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002854:	4a0d      	ldr	r2, [pc, #52]	@ (800288c <HAL_SD_MspInit+0x1cc>)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800285a:	2200      	movs	r2, #0
 800285c:	2105      	movs	r1, #5
 800285e:	2031      	movs	r0, #49	@ 0x31
 8002860:	f003 f9a0 	bl	8005ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8002864:	2031      	movs	r0, #49	@ 0x31
 8002866:	f003 f9b9 	bl	8005bdc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800286a:	bf00      	nop
 800286c:	3728      	adds	r7, #40	@ 0x28
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40012c00 	.word	0x40012c00
 8002878:	40023800 	.word	0x40023800
 800287c:	40020800 	.word	0x40020800
 8002880:	40020c00 	.word	0x40020c00
 8002884:	2000962c 	.word	0x2000962c
 8002888:	40026458 	.word	0x40026458
 800288c:	2000968c 	.word	0x2000968c
 8002890:	400264a0 	.word	0x400264a0

08002894 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8002898:	4b1b      	ldr	r3, [pc, #108]	@ (8002908 <MX_SPI2_Init+0x74>)
 800289a:	4a1c      	ldr	r2, [pc, #112]	@ (800290c <MX_SPI2_Init+0x78>)
 800289c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800289e:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80028a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80028a6:	4b18      	ldr	r3, [pc, #96]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80028ac:	4b16      	ldr	r3, [pc, #88]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028ae:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80028b2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028b4:	4b14      	ldr	r3, [pc, #80]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028ba:	4b13      	ldr	r3, [pc, #76]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028bc:	2200      	movs	r2, #0
 80028be:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80028c0:	4b11      	ldr	r3, [pc, #68]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028c2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80028c6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80028ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80028d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028da:	4b0b      	ldr	r3, [pc, #44]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028dc:	2200      	movs	r2, #0
 80028de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80028e0:	4b09      	ldr	r3, [pc, #36]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028e2:	2207      	movs	r2, #7
 80028e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80028e6:	4b08      	ldr	r3, [pc, #32]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80028ec:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028ee:	2208      	movs	r2, #8
 80028f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80028f2:	4805      	ldr	r0, [pc, #20]	@ (8002908 <MX_SPI2_Init+0x74>)
 80028f4:	f008 fb79 	bl	800afea <HAL_SPI_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80028fe:	f7ff fdd5 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	200096ec 	.word	0x200096ec
 800290c:	40003800 	.word	0x40003800

08002910 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	@ 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	2200      	movs	r2, #0
 800291e:	601a      	str	r2, [r3, #0]
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	609a      	str	r2, [r3, #8]
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2d      	ldr	r2, [pc, #180]	@ (80029e4 <HAL_SPI_MspInit+0xd4>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d154      	bne.n	80029dc <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002932:	4b2d      	ldr	r3, [pc, #180]	@ (80029e8 <HAL_SPI_MspInit+0xd8>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	4a2c      	ldr	r2, [pc, #176]	@ (80029e8 <HAL_SPI_MspInit+0xd8>)
 8002938:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800293c:	6413      	str	r3, [r2, #64]	@ 0x40
 800293e:	4b2a      	ldr	r3, [pc, #168]	@ (80029e8 <HAL_SPI_MspInit+0xd8>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002942:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800294a:	4b27      	ldr	r3, [pc, #156]	@ (80029e8 <HAL_SPI_MspInit+0xd8>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	4a26      	ldr	r2, [pc, #152]	@ (80029e8 <HAL_SPI_MspInit+0xd8>)
 8002950:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002954:	6313      	str	r3, [r2, #48]	@ 0x30
 8002956:	4b24      	ldr	r3, [pc, #144]	@ (80029e8 <HAL_SPI_MspInit+0xd8>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002962:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <HAL_SPI_MspInit+0xd8>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4a20      	ldr	r2, [pc, #128]	@ (80029e8 <HAL_SPI_MspInit+0xd8>)
 8002968:	f043 0302 	orr.w	r3, r3, #2
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4b1e      	ldr	r3, [pc, #120]	@ (80029e8 <HAL_SPI_MspInit+0xd8>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800297a:	2302      	movs	r3, #2
 800297c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297e:	2302      	movs	r3, #2
 8002980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002982:	2300      	movs	r3, #0
 8002984:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002986:	2300      	movs	r3, #0
 8002988:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800298a:	2305      	movs	r3, #5
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800298e:	f107 0314 	add.w	r3, r7, #20
 8002992:	4619      	mov	r1, r3
 8002994:	4815      	ldr	r0, [pc, #84]	@ (80029ec <HAL_SPI_MspInit+0xdc>)
 8002996:	f003 ffbf 	bl	8006918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800299a:	2301      	movs	r3, #1
 800299c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a6:	2303      	movs	r3, #3
 80029a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029aa:	2305      	movs	r3, #5
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	4619      	mov	r1, r3
 80029b4:	480d      	ldr	r0, [pc, #52]	@ (80029ec <HAL_SPI_MspInit+0xdc>)
 80029b6:	f003 ffaf 	bl	8006918 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80029ba:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80029be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c0:	2302      	movs	r3, #2
 80029c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029c8:	2303      	movs	r3, #3
 80029ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029cc:	2305      	movs	r3, #5
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029d0:	f107 0314 	add.w	r3, r7, #20
 80029d4:	4619      	mov	r1, r3
 80029d6:	4806      	ldr	r0, [pc, #24]	@ (80029f0 <HAL_SPI_MspInit+0xe0>)
 80029d8:	f003 ff9e 	bl	8006918 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80029dc:	bf00      	nop
 80029de:	3728      	adds	r7, #40	@ 0x28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40003800 	.word	0x40003800
 80029e8:	40023800 	.word	0x40023800
 80029ec:	40022000 	.word	0x40022000
 80029f0:	40020400 	.word	0x40020400

080029f4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08c      	sub	sp, #48	@ 0x30
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a51      	ldr	r2, [pc, #324]	@ (8002b44 <I2Cx_MspInit+0x150>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d14d      	bne.n	8002aa0 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002a04:	4b50      	ldr	r3, [pc, #320]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a08:	4a4f      	ldr	r2, [pc, #316]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002a0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a10:	4b4d      	ldr	r3, [pc, #308]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a18:	61bb      	str	r3, [r7, #24]
 8002a1a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002a20:	2312      	movs	r3, #18
 8002a22:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002a30:	f107 031c 	add.w	r3, r7, #28
 8002a34:	4619      	mov	r1, r3
 8002a36:	4845      	ldr	r0, [pc, #276]	@ (8002b4c <I2Cx_MspInit+0x158>)
 8002a38:	f003 ff6e 	bl	8006918 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002a3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002a42:	f107 031c 	add.w	r3, r7, #28
 8002a46:	4619      	mov	r1, r3
 8002a48:	4840      	ldr	r0, [pc, #256]	@ (8002b4c <I2Cx_MspInit+0x158>)
 8002a4a:	f003 ff65 	bl	8006918 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002a4e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a52:	4a3d      	ldr	r2, [pc, #244]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002a54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a5a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002a66:	4b38      	ldr	r3, [pc, #224]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a37      	ldr	r2, [pc, #220]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002a6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a70:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002a72:	4b35      	ldr	r3, [pc, #212]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	4a34      	ldr	r2, [pc, #208]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002a78:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002a7c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002a7e:	2200      	movs	r2, #0
 8002a80:	210f      	movs	r1, #15
 8002a82:	2048      	movs	r0, #72	@ 0x48
 8002a84:	f003 f88e 	bl	8005ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002a88:	2048      	movs	r0, #72	@ 0x48
 8002a8a:	f003 f8a7 	bl	8005bdc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	210f      	movs	r1, #15
 8002a92:	2049      	movs	r0, #73	@ 0x49
 8002a94:	f003 f886 	bl	8005ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002a98:	2049      	movs	r0, #73	@ 0x49
 8002a9a:	f003 f89f 	bl	8005bdc <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002a9e:	e04d      	b.n	8002b3c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002aa0:	4b29      	ldr	r3, [pc, #164]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa4:	4a28      	ldr	r2, [pc, #160]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aac:	4b26      	ldr	r3, [pc, #152]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002ab8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002abc:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002abe:	2312      	movs	r3, #18
 8002ac0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002aca:	2304      	movs	r3, #4
 8002acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ace:	f107 031c 	add.w	r3, r7, #28
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	481e      	ldr	r0, [pc, #120]	@ (8002b50 <I2Cx_MspInit+0x15c>)
 8002ad6:	f003 ff1f 	bl	8006918 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002ada:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ade:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002ae0:	f107 031c 	add.w	r3, r7, #28
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	481a      	ldr	r0, [pc, #104]	@ (8002b50 <I2Cx_MspInit+0x15c>)
 8002ae8:	f003 ff16 	bl	8006918 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002aec:	4b16      	ldr	r3, [pc, #88]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	4a15      	ldr	r2, [pc, #84]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002af2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002af6:	6413      	str	r3, [r2, #64]	@ 0x40
 8002af8:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b00:	60fb      	str	r3, [r7, #12]
 8002b02:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002b04:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	4a0f      	ldr	r2, [pc, #60]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002b0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002b0e:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002b10:	4b0d      	ldr	r3, [pc, #52]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	4a0c      	ldr	r2, [pc, #48]	@ (8002b48 <I2Cx_MspInit+0x154>)
 8002b16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b1a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	210f      	movs	r1, #15
 8002b20:	201f      	movs	r0, #31
 8002b22:	f003 f83f 	bl	8005ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002b26:	201f      	movs	r0, #31
 8002b28:	f003 f858 	bl	8005bdc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	210f      	movs	r1, #15
 8002b30:	2020      	movs	r0, #32
 8002b32:	f003 f837 	bl	8005ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002b36:	2020      	movs	r0, #32
 8002b38:	f003 f850 	bl	8005bdc <HAL_NVIC_EnableIRQ>
}
 8002b3c:	bf00      	nop
 8002b3e:	3730      	adds	r7, #48	@ 0x30
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	20009750 	.word	0x20009750
 8002b48:	40023800 	.word	0x40023800
 8002b4c:	40021c00 	.word	0x40021c00
 8002b50:	40020400 	.word	0x40020400

08002b54 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f004 fcf1 	bl	8007544 <HAL_I2C_GetState>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d125      	bne.n	8002bb4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a14      	ldr	r2, [pc, #80]	@ (8002bbc <I2Cx_Init+0x68>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d103      	bne.n	8002b78 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a13      	ldr	r2, [pc, #76]	@ (8002bc0 <I2Cx_Init+0x6c>)
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e002      	b.n	8002b7e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a12      	ldr	r2, [pc, #72]	@ (8002bc4 <I2Cx_Init+0x70>)
 8002b7c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a11      	ldr	r2, [pc, #68]	@ (8002bc8 <I2Cx_Init+0x74>)
 8002b82:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ff23 	bl	80029f4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f004 f9da 	bl	8006f68 <HAL_I2C_Init>
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20009750 	.word	0x20009750
 8002bc0:	40005c00 	.word	0x40005c00
 8002bc4:	40005400 	.word	0x40005400
 8002bc8:	40912732 	.word	0x40912732

08002bcc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b08a      	sub	sp, #40	@ 0x28
 8002bd0:	af04      	add	r7, sp, #16
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	72fb      	strb	r3, [r7, #11]
 8002bde:	460b      	mov	r3, r1
 8002be0:	813b      	strh	r3, [r7, #8]
 8002be2:	4613      	mov	r3, r2
 8002be4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002bea:	7afb      	ldrb	r3, [r7, #11]
 8002bec:	b299      	uxth	r1, r3
 8002bee:	88f8      	ldrh	r0, [r7, #6]
 8002bf0:	893a      	ldrh	r2, [r7, #8]
 8002bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bf6:	9302      	str	r3, [sp, #8]
 8002bf8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	4603      	mov	r3, r0
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f004 fb84 	bl	8007310 <HAL_I2C_Mem_Read>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002c0c:	7dfb      	ldrb	r3, [r7, #23]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d004      	beq.n	8002c1c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002c12:	7afb      	ldrb	r3, [r7, #11]
 8002c14:	4619      	mov	r1, r3
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 f832 	bl	8002c80 <I2Cx_Error>
  }
  return status;    
 8002c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b08a      	sub	sp, #40	@ 0x28
 8002c2a:	af04      	add	r7, sp, #16
 8002c2c:	60f8      	str	r0, [r7, #12]
 8002c2e:	4608      	mov	r0, r1
 8002c30:	4611      	mov	r1, r2
 8002c32:	461a      	mov	r2, r3
 8002c34:	4603      	mov	r3, r0
 8002c36:	72fb      	strb	r3, [r7, #11]
 8002c38:	460b      	mov	r3, r1
 8002c3a:	813b      	strh	r3, [r7, #8]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002c44:	7afb      	ldrb	r3, [r7, #11]
 8002c46:	b299      	uxth	r1, r3
 8002c48:	88f8      	ldrh	r0, [r7, #6]
 8002c4a:	893a      	ldrh	r2, [r7, #8]
 8002c4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c50:	9302      	str	r3, [sp, #8]
 8002c52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f004 fa43 	bl	80070e8 <HAL_I2C_Mem_Write>
 8002c62:	4603      	mov	r3, r0
 8002c64:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002c66:	7dfb      	ldrb	r3, [r7, #23]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d004      	beq.n	8002c76 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002c6c:	7afb      	ldrb	r3, [r7, #11]
 8002c6e:	4619      	mov	r1, r3
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f805 	bl	8002c80 <I2Cx_Error>
  }
  return status;
 8002c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3718      	adds	r7, #24
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	460b      	mov	r3, r1
 8002c8a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f004 f9fb 	bl	8007088 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f7ff ff5e 	bl	8002b54 <I2Cx_Init>
}
 8002c98:	bf00      	nop
 8002c9a:	3708      	adds	r7, #8
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002ca4:	4802      	ldr	r0, [pc, #8]	@ (8002cb0 <TS_IO_Init+0x10>)
 8002ca6:	f7ff ff55 	bl	8002b54 <I2Cx_Init>
}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20009750 	.word	0x20009750

08002cb4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	4603      	mov	r3, r0
 8002cbc:	71fb      	strb	r3, [r7, #7]
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	71bb      	strb	r3, [r7, #6]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002cc6:	79bb      	ldrb	r3, [r7, #6]
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	79f9      	ldrb	r1, [r7, #7]
 8002ccc:	2301      	movs	r3, #1
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	1d7b      	adds	r3, r7, #5
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	4803      	ldr	r0, [pc, #12]	@ (8002ce4 <TS_IO_Write+0x30>)
 8002cd8:	f7ff ffa5 	bl	8002c26 <I2Cx_WriteMultiple>
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20009750 	.word	0x20009750

08002ce8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af02      	add	r7, sp, #8
 8002cee:	4603      	mov	r3, r0
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	71fb      	strb	r3, [r7, #7]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002cfc:	79bb      	ldrb	r3, [r7, #6]
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	79f9      	ldrb	r1, [r7, #7]
 8002d02:	2301      	movs	r3, #1
 8002d04:	9301      	str	r3, [sp, #4]
 8002d06:	f107 030f 	add.w	r3, r7, #15
 8002d0a:	9300      	str	r3, [sp, #0]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	4804      	ldr	r0, [pc, #16]	@ (8002d20 <TS_IO_Read+0x38>)
 8002d10:	f7ff ff5c 	bl	8002bcc <I2Cx_ReadMultiple>

  return read_value;
 8002d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20009750 	.word	0x20009750

08002d24 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f002 fa63 	bl	80051f8 <HAL_Delay>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002d40:	4b31      	ldr	r3, [pc, #196]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d42:	2228      	movs	r2, #40	@ 0x28
 8002d44:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002d46:	4b30      	ldr	r3, [pc, #192]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d48:	2209      	movs	r2, #9
 8002d4a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d4e:	2235      	movs	r2, #53	@ 0x35
 8002d50:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002d52:	4b2d      	ldr	r3, [pc, #180]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d54:	220b      	movs	r2, #11
 8002d56:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002d58:	4b2b      	ldr	r3, [pc, #172]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d5a:	f240 121b 	movw	r2, #283	@ 0x11b
 8002d5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002d60:	4b29      	ldr	r3, [pc, #164]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d62:	f240 2215 	movw	r2, #533	@ 0x215
 8002d66:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002d68:	4b27      	ldr	r3, [pc, #156]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d6a:	f240 121d 	movw	r2, #285	@ 0x11d
 8002d6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002d70:	4b25      	ldr	r3, [pc, #148]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d72:	f240 2235 	movw	r2, #565	@ 0x235
 8002d76:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002d78:	2100      	movs	r1, #0
 8002d7a:	4823      	ldr	r0, [pc, #140]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d7c:	f000 fe6e 	bl	8003a5c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002d80:	4b21      	ldr	r3, [pc, #132]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d82:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002d86:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002d88:	4b1f      	ldr	r3, [pc, #124]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d8a:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8002d8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002d90:	4b1d      	ldr	r3, [pc, #116]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002d98:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002da0:	4b19      	ldr	r3, [pc, #100]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002da8:	4b17      	ldr	r3, [pc, #92]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002dae:	4b16      	ldr	r3, [pc, #88]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002db4:	4b14      	ldr	r3, [pc, #80]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002dba:	4b13      	ldr	r3, [pc, #76]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002dc0:	4b11      	ldr	r3, [pc, #68]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002dc2:	4a12      	ldr	r2, [pc, #72]	@ (8002e0c <BSP_LCD_Init+0xd0>)
 8002dc4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002dc6:	4810      	ldr	r0, [pc, #64]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002dc8:	f005 f8cc 	bl	8007f64 <HAL_LTDC_GetState>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	480c      	ldr	r0, [pc, #48]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002dd6:	f000 fd67 	bl	80038a8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002dda:	480b      	ldr	r0, [pc, #44]	@ (8002e08 <BSP_LCD_Init+0xcc>)
 8002ddc:	f004 fef2 	bl	8007bc4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002de0:	2201      	movs	r2, #1
 8002de2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002de6:	480a      	ldr	r0, [pc, #40]	@ (8002e10 <BSP_LCD_Init+0xd4>)
 8002de8:	f004 f866 	bl	8006eb8 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002dec:	2201      	movs	r2, #1
 8002dee:	2108      	movs	r1, #8
 8002df0:	4808      	ldr	r0, [pc, #32]	@ (8002e14 <BSP_LCD_Init+0xd8>)
 8002df2:	f004 f861 	bl	8006eb8 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002df6:	f000 ff95 	bl	8003d24 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002dfa:	4807      	ldr	r0, [pc, #28]	@ (8002e18 <BSP_LCD_Init+0xdc>)
 8002dfc:	f000 f8d8 	bl	8002fb0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200097a4 	.word	0x200097a4
 8002e0c:	40016800 	.word	0x40016800
 8002e10:	40022000 	.word	0x40022000
 8002e14:	40022800 	.word	0x40022800
 8002e18:	20000040 	.word	0x20000040

08002e1c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002e20:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <BSP_LCD_GetXSize+0x20>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a06      	ldr	r2, [pc, #24]	@ (8002e40 <BSP_LCD_GetXSize+0x24>)
 8002e26:	2134      	movs	r1, #52	@ 0x34
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3360      	adds	r3, #96	@ 0x60
 8002e30:	681b      	ldr	r3, [r3, #0]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	2000988c 	.word	0x2000988c
 8002e40:	200097a4 	.word	0x200097a4

08002e44 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002e48:	4b06      	ldr	r3, [pc, #24]	@ (8002e64 <BSP_LCD_GetYSize+0x20>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a06      	ldr	r2, [pc, #24]	@ (8002e68 <BSP_LCD_GetYSize+0x24>)
 8002e4e:	2134      	movs	r1, #52	@ 0x34
 8002e50:	fb01 f303 	mul.w	r3, r1, r3
 8002e54:	4413      	add	r3, r2
 8002e56:	3364      	adds	r3, #100	@ 0x64
 8002e58:	681b      	ldr	r3, [r3, #0]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	2000988c 	.word	0x2000988c
 8002e68:	200097a4 	.word	0x200097a4

08002e6c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b090      	sub	sp, #64	@ 0x40
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	6039      	str	r1, [r7, #0]
 8002e76:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002e7c:	f7ff ffce 	bl	8002e1c <BSP_LCD_GetXSize>
 8002e80:	4603      	mov	r3, r0
 8002e82:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002e88:	f7ff ffdc 	bl	8002e44 <BSP_LCD_GetYSize>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e90:	2300      	movs	r3, #0
 8002e92:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8002e98:	23ff      	movs	r3, #255	@ 0xff
 8002e9a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002eb2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002eb8:	2307      	movs	r3, #7
 8002eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002ebc:	f7ff ffae 	bl	8002e1c <BSP_LCD_GetXSize>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002ec4:	f7ff ffbe 	bl	8002e44 <BSP_LCD_GetYSize>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	f107 030c 	add.w	r3, r7, #12
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4812      	ldr	r0, [pc, #72]	@ (8002f20 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002ed6:	f005 f807 	bl	8007ee8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002eda:	88fa      	ldrh	r2, [r7, #6]
 8002edc:	4911      	ldr	r1, [pc, #68]	@ (8002f24 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3304      	adds	r3, #4
 8002eea:	f04f 32ff 	mov.w	r2, #4294967295
 8002eee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002ef0:	88fa      	ldrh	r2, [r7, #6]
 8002ef2:	490c      	ldr	r1, [pc, #48]	@ (8002f24 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	3308      	adds	r3, #8
 8002f00:	4a09      	ldr	r2, [pc, #36]	@ (8002f28 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002f02:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	4907      	ldr	r1, [pc, #28]	@ (8002f24 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002f08:	4613      	mov	r3, r2
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8002f16:	601a      	str	r2, [r3, #0]
}
 8002f18:	bf00      	nop
 8002f1a:	3740      	adds	r7, #64	@ 0x40
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	200097a4 	.word	0x200097a4
 8002f24:	20009890 	.word	0x20009890
 8002f28:	20000040 	.word	0x20000040

08002f2c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002f34:	4a04      	ldr	r2, [pc, #16]	@ (8002f48 <BSP_LCD_SelectLayer+0x1c>)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6013      	str	r3, [r2, #0]
} 
 8002f3a:	bf00      	nop
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	2000988c 	.word	0x2000988c

08002f4c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002f54:	4b07      	ldr	r3, [pc, #28]	@ (8002f74 <BSP_LCD_SetTextColor+0x28>)
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	4907      	ldr	r1, [pc, #28]	@ (8002f78 <BSP_LCD_SetTextColor+0x2c>)
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	4413      	add	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	440b      	add	r3, r1
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	601a      	str	r2, [r3, #0]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	2000988c 	.word	0x2000988c
 8002f78:	20009890 	.word	0x20009890

08002f7c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f84:	4b08      	ldr	r3, [pc, #32]	@ (8002fa8 <BSP_LCD_SetBackColor+0x2c>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4908      	ldr	r1, [pc, #32]	@ (8002fac <BSP_LCD_SetBackColor+0x30>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	3304      	adds	r3, #4
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	601a      	str	r2, [r3, #0]
}
 8002f9a:	bf00      	nop
 8002f9c:	370c      	adds	r7, #12
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
 8002fa6:	bf00      	nop
 8002fa8:	2000988c 	.word	0x2000988c
 8002fac:	20009890 	.word	0x20009890

08002fb0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002fb8:	4b08      	ldr	r3, [pc, #32]	@ (8002fdc <BSP_LCD_SetFont+0x2c>)
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4908      	ldr	r1, [pc, #32]	@ (8002fe0 <BSP_LCD_SetFont+0x30>)
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	005b      	lsls	r3, r3, #1
 8002fc2:	4413      	add	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	3308      	adds	r3, #8
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	601a      	str	r2, [r3, #0]
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	2000988c 	.word	0x2000988c
 8002fe0:	20009890 	.word	0x20009890

08002fe4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002fe8:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <BSP_LCD_GetFont+0x24>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4907      	ldr	r1, [pc, #28]	@ (800300c <BSP_LCD_GetFont+0x28>)
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	3308      	adds	r3, #8
 8002ffa:	681b      	ldr	r3, [r3, #0]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	2000988c 	.word	0x2000988c
 800300c:	20009890 	.word	0x20009890

08003010 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003012:	b085      	sub	sp, #20
 8003014:	af02      	add	r7, sp, #8
 8003016:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8003018:	4b0f      	ldr	r3, [pc, #60]	@ (8003058 <BSP_LCD_Clear+0x48>)
 800301a:	681c      	ldr	r4, [r3, #0]
 800301c:	4b0e      	ldr	r3, [pc, #56]	@ (8003058 <BSP_LCD_Clear+0x48>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a0e      	ldr	r2, [pc, #56]	@ (800305c <BSP_LCD_Clear+0x4c>)
 8003022:	2134      	movs	r1, #52	@ 0x34
 8003024:	fb01 f303 	mul.w	r3, r1, r3
 8003028:	4413      	add	r3, r2
 800302a:	335c      	adds	r3, #92	@ 0x5c
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461e      	mov	r6, r3
 8003030:	f7ff fef4 	bl	8002e1c <BSP_LCD_GetXSize>
 8003034:	4605      	mov	r5, r0
 8003036:	f7ff ff05 	bl	8002e44 <BSP_LCD_GetYSize>
 800303a:	4602      	mov	r2, r0
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	2300      	movs	r3, #0
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	4613      	mov	r3, r2
 8003046:	462a      	mov	r2, r5
 8003048:	4631      	mov	r1, r6
 800304a:	4620      	mov	r0, r4
 800304c:	f000 fdda 	bl	8003c04 <LL_FillBuffer>
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003058:	2000988c 	.word	0x2000988c
 800305c:	200097a4 	.word	0x200097a4

08003060 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003060:	b590      	push	{r4, r7, lr}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	4603      	mov	r3, r0
 8003068:	80fb      	strh	r3, [r7, #6]
 800306a:	460b      	mov	r3, r1
 800306c:	80bb      	strh	r3, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003072:	4b1b      	ldr	r3, [pc, #108]	@ (80030e0 <BSP_LCD_DisplayChar+0x80>)
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	491b      	ldr	r1, [pc, #108]	@ (80030e4 <BSP_LCD_DisplayChar+0x84>)
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3308      	adds	r3, #8
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6819      	ldr	r1, [r3, #0]
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800308e:	4b14      	ldr	r3, [pc, #80]	@ (80030e0 <BSP_LCD_DisplayChar+0x80>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	4c14      	ldr	r4, [pc, #80]	@ (80030e4 <BSP_LCD_DisplayChar+0x84>)
 8003094:	4613      	mov	r3, r2
 8003096:	005b      	lsls	r3, r3, #1
 8003098:	4413      	add	r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	4423      	add	r3, r4
 800309e:	3308      	adds	r3, #8
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80030a4:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80030a8:	4b0d      	ldr	r3, [pc, #52]	@ (80030e0 <BSP_LCD_DisplayChar+0x80>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4c0d      	ldr	r4, [pc, #52]	@ (80030e4 <BSP_LCD_DisplayChar+0x84>)
 80030ae:	4613      	mov	r3, r2
 80030b0:	005b      	lsls	r3, r3, #1
 80030b2:	4413      	add	r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4423      	add	r3, r4
 80030b8:	3308      	adds	r3, #8
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	889b      	ldrh	r3, [r3, #4]
 80030be:	3307      	adds	r3, #7
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	da00      	bge.n	80030c6 <BSP_LCD_DisplayChar+0x66>
 80030c4:	3307      	adds	r3, #7
 80030c6:	10db      	asrs	r3, r3, #3
 80030c8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80030cc:	18ca      	adds	r2, r1, r3
 80030ce:	88b9      	ldrh	r1, [r7, #4]
 80030d0:	88fb      	ldrh	r3, [r7, #6]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fcde 	bl	8003a94 <DrawChar>
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	2000988c 	.word	0x2000988c
 80030e4:	20009890 	.word	0x20009890

080030e8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80030e8:	b5b0      	push	{r4, r5, r7, lr}
 80030ea:	b088      	sub	sp, #32
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60ba      	str	r2, [r7, #8]
 80030f0:	461a      	mov	r2, r3
 80030f2:	4603      	mov	r3, r0
 80030f4:	81fb      	strh	r3, [r7, #14]
 80030f6:	460b      	mov	r3, r1
 80030f8:	81bb      	strh	r3, [r7, #12]
 80030fa:	4613      	mov	r3, r2
 80030fc:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80030fe:	2301      	movs	r3, #1
 8003100:	83fb      	strh	r3, [r7, #30]
 8003102:	2300      	movs	r3, #0
 8003104:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003112:	e002      	b.n	800311a <BSP_LCD_DisplayStringAt+0x32>
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	3301      	adds	r3, #1
 8003118:	61bb      	str	r3, [r7, #24]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	1c5a      	adds	r2, r3, #1
 800311e:	617a      	str	r2, [r7, #20]
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f6      	bne.n	8003114 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003126:	f7ff fe79 	bl	8002e1c <BSP_LCD_GetXSize>
 800312a:	4601      	mov	r1, r0
 800312c:	4b50      	ldr	r3, [pc, #320]	@ (8003270 <BSP_LCD_DisplayStringAt+0x188>)
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	4850      	ldr	r0, [pc, #320]	@ (8003274 <BSP_LCD_DisplayStringAt+0x18c>)
 8003132:	4613      	mov	r3, r2
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	4413      	add	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4403      	add	r3, r0
 800313c:	3308      	adds	r3, #8
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	889b      	ldrh	r3, [r3, #4]
 8003142:	fbb1 f3f3 	udiv	r3, r1, r3
 8003146:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d01c      	beq.n	8003188 <BSP_LCD_DisplayStringAt+0xa0>
 800314e:	2b03      	cmp	r3, #3
 8003150:	dc33      	bgt.n	80031ba <BSP_LCD_DisplayStringAt+0xd2>
 8003152:	2b01      	cmp	r3, #1
 8003154:	d002      	beq.n	800315c <BSP_LCD_DisplayStringAt+0x74>
 8003156:	2b02      	cmp	r3, #2
 8003158:	d019      	beq.n	800318e <BSP_LCD_DisplayStringAt+0xa6>
 800315a:	e02e      	b.n	80031ba <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	1ad1      	subs	r1, r2, r3
 8003162:	4b43      	ldr	r3, [pc, #268]	@ (8003270 <BSP_LCD_DisplayStringAt+0x188>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	4843      	ldr	r0, [pc, #268]	@ (8003274 <BSP_LCD_DisplayStringAt+0x18c>)
 8003168:	4613      	mov	r3, r2
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4403      	add	r3, r0
 8003172:	3308      	adds	r3, #8
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	889b      	ldrh	r3, [r3, #4]
 8003178:	fb01 f303 	mul.w	r3, r1, r3
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	89fb      	ldrh	r3, [r7, #14]
 8003182:	4413      	add	r3, r2
 8003184:	83fb      	strh	r3, [r7, #30]
      break;
 8003186:	e01b      	b.n	80031c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003188:	89fb      	ldrh	r3, [r7, #14]
 800318a:	83fb      	strh	r3, [r7, #30]
      break;
 800318c:	e018      	b.n	80031c0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	b299      	uxth	r1, r3
 8003196:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <BSP_LCD_DisplayStringAt+0x188>)
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	4836      	ldr	r0, [pc, #216]	@ (8003274 <BSP_LCD_DisplayStringAt+0x18c>)
 800319c:	4613      	mov	r3, r2
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	4403      	add	r3, r0
 80031a6:	3308      	adds	r3, #8
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	889b      	ldrh	r3, [r3, #4]
 80031ac:	fb11 f303 	smulbb	r3, r1, r3
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	89fb      	ldrh	r3, [r7, #14]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	83fb      	strh	r3, [r7, #30]
      break;
 80031b8:	e002      	b.n	80031c0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80031ba:	89fb      	ldrh	r3, [r7, #14]
 80031bc:	83fb      	strh	r3, [r7, #30]
      break;
 80031be:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80031c0:	8bfb      	ldrh	r3, [r7, #30]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <BSP_LCD_DisplayStringAt+0xe6>
 80031c6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	da1d      	bge.n	800320a <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80031ce:	2301      	movs	r3, #1
 80031d0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80031d2:	e01a      	b.n	800320a <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	89b9      	ldrh	r1, [r7, #12]
 80031da:	8bfb      	ldrh	r3, [r7, #30]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff3f 	bl	8003060 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80031e2:	4b23      	ldr	r3, [pc, #140]	@ (8003270 <BSP_LCD_DisplayStringAt+0x188>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4923      	ldr	r1, [pc, #140]	@ (8003274 <BSP_LCD_DisplayStringAt+0x18c>)
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	3308      	adds	r3, #8
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	889a      	ldrh	r2, [r3, #4]
 80031f8:	8bfb      	ldrh	r3, [r7, #30]
 80031fa:	4413      	add	r3, r2
 80031fc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3301      	adds	r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
    i++;
 8003204:	8bbb      	ldrh	r3, [r7, #28]
 8003206:	3301      	adds	r3, #1
 8003208:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	bf14      	ite	ne
 8003212:	2301      	movne	r3, #1
 8003214:	2300      	moveq	r3, #0
 8003216:	b2dc      	uxtb	r4, r3
 8003218:	f7ff fe00 	bl	8002e1c <BSP_LCD_GetXSize>
 800321c:	8bb9      	ldrh	r1, [r7, #28]
 800321e:	4b14      	ldr	r3, [pc, #80]	@ (8003270 <BSP_LCD_DisplayStringAt+0x188>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	4d14      	ldr	r5, [pc, #80]	@ (8003274 <BSP_LCD_DisplayStringAt+0x18c>)
 8003224:	4613      	mov	r3, r2
 8003226:	005b      	lsls	r3, r3, #1
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	442b      	add	r3, r5
 800322e:	3308      	adds	r3, #8
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	889b      	ldrh	r3, [r3, #4]
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	1ac3      	subs	r3, r0, r3
 800323a:	b299      	uxth	r1, r3
 800323c:	4b0c      	ldr	r3, [pc, #48]	@ (8003270 <BSP_LCD_DisplayStringAt+0x188>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	480c      	ldr	r0, [pc, #48]	@ (8003274 <BSP_LCD_DisplayStringAt+0x18c>)
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4403      	add	r3, r0
 800324c:	3308      	adds	r3, #8
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	889b      	ldrh	r3, [r3, #4]
 8003252:	4299      	cmp	r1, r3
 8003254:	bf2c      	ite	cs
 8003256:	2301      	movcs	r3, #1
 8003258:	2300      	movcc	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	4023      	ands	r3, r4
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1b7      	bne.n	80031d4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	3720      	adds	r7, #32
 800326a:	46bd      	mov	sp, r7
 800326c:	bdb0      	pop	{r4, r5, r7, pc}
 800326e:	bf00      	nop
 8003270:	2000988c 	.word	0x2000988c
 8003274:	20009890 	.word	0x20009890

08003278 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0
 800327e:	4603      	mov	r3, r0
 8003280:	6039      	str	r1, [r7, #0]
 8003282:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003284:	f7ff feae 	bl	8002fe4 <BSP_LCD_GetFont>
 8003288:	4603      	mov	r3, r0
 800328a:	88db      	ldrh	r3, [r3, #6]
 800328c:	88fa      	ldrh	r2, [r7, #6]
 800328e:	fb12 f303 	smulbb	r3, r2, r3
 8003292:	b299      	uxth	r1, r3
 8003294:	2303      	movs	r3, #3
 8003296:	683a      	ldr	r2, [r7, #0]
 8003298:	2000      	movs	r0, #0
 800329a:	f7ff ff25 	bl	80030e8 <BSP_LCD_DisplayStringAt>
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80032a8:	b5b0      	push	{r4, r5, r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	4603      	mov	r3, r0
 80032b0:	80fb      	strh	r3, [r7, #6]
 80032b2:	460b      	mov	r3, r1
 80032b4:	80bb      	strh	r3, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80032be:	4b26      	ldr	r3, [pc, #152]	@ (8003358 <BSP_LCD_DrawHLine+0xb0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a26      	ldr	r2, [pc, #152]	@ (800335c <BSP_LCD_DrawHLine+0xb4>)
 80032c4:	2134      	movs	r1, #52	@ 0x34
 80032c6:	fb01 f303 	mul.w	r3, r1, r3
 80032ca:	4413      	add	r3, r2
 80032cc:	3348      	adds	r3, #72	@ 0x48
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d114      	bne.n	80032fe <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80032d4:	4b20      	ldr	r3, [pc, #128]	@ (8003358 <BSP_LCD_DrawHLine+0xb0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a20      	ldr	r2, [pc, #128]	@ (800335c <BSP_LCD_DrawHLine+0xb4>)
 80032da:	2134      	movs	r1, #52	@ 0x34
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	4413      	add	r3, r2
 80032e2:	335c      	adds	r3, #92	@ 0x5c
 80032e4:	681c      	ldr	r4, [r3, #0]
 80032e6:	f7ff fd99 	bl	8002e1c <BSP_LCD_GetXSize>
 80032ea:	4602      	mov	r2, r0
 80032ec:	88bb      	ldrh	r3, [r7, #4]
 80032ee:	fb03 f202 	mul.w	r2, r3, r2
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	4413      	add	r3, r2
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	4423      	add	r3, r4
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e013      	b.n	8003326 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80032fe:	4b16      	ldr	r3, [pc, #88]	@ (8003358 <BSP_LCD_DrawHLine+0xb0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a16      	ldr	r2, [pc, #88]	@ (800335c <BSP_LCD_DrawHLine+0xb4>)
 8003304:	2134      	movs	r1, #52	@ 0x34
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	4413      	add	r3, r2
 800330c:	335c      	adds	r3, #92	@ 0x5c
 800330e:	681c      	ldr	r4, [r3, #0]
 8003310:	f7ff fd84 	bl	8002e1c <BSP_LCD_GetXSize>
 8003314:	4602      	mov	r2, r0
 8003316:	88bb      	ldrh	r3, [r7, #4]
 8003318:	fb03 f202 	mul.w	r2, r3, r2
 800331c:	88fb      	ldrh	r3, [r7, #6]
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	4423      	add	r3, r4
 8003324:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003326:	4b0c      	ldr	r3, [pc, #48]	@ (8003358 <BSP_LCD_DrawHLine+0xb0>)
 8003328:	6818      	ldr	r0, [r3, #0]
 800332a:	68f9      	ldr	r1, [r7, #12]
 800332c:	887c      	ldrh	r4, [r7, #2]
 800332e:	4b0a      	ldr	r3, [pc, #40]	@ (8003358 <BSP_LCD_DrawHLine+0xb0>)
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	4d0b      	ldr	r5, [pc, #44]	@ (8003360 <BSP_LCD_DrawHLine+0xb8>)
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	442b      	add	r3, r5
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	9301      	str	r3, [sp, #4]
 8003342:	2300      	movs	r3, #0
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	2301      	movs	r3, #1
 8003348:	4622      	mov	r2, r4
 800334a:	f000 fc5b 	bl	8003c04 <LL_FillBuffer>
}
 800334e:	bf00      	nop
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bdb0      	pop	{r4, r5, r7, pc}
 8003356:	bf00      	nop
 8003358:	2000988c 	.word	0x2000988c
 800335c:	200097a4 	.word	0x200097a4
 8003360:	20009890 	.word	0x20009890

08003364 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	4603      	mov	r3, r0
 800336c:	80fb      	strh	r3, [r7, #6]
 800336e:	460b      	mov	r3, r1
 8003370:	80bb      	strh	r3, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003376:	887b      	ldrh	r3, [r7, #2]
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	f1c3 0303 	rsb	r3, r3, #3
 800337e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003384:	887b      	ldrh	r3, [r7, #2]
 8003386:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003388:	e0c7      	b.n	800351a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	b29a      	uxth	r2, r3
 800338e:	88fb      	ldrh	r3, [r7, #6]
 8003390:	4413      	add	r3, r2
 8003392:	b298      	uxth	r0, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	b29b      	uxth	r3, r3
 8003398:	88ba      	ldrh	r2, [r7, #4]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	b299      	uxth	r1, r3
 800339e:	4b64      	ldr	r3, [pc, #400]	@ (8003530 <BSP_LCD_DrawCircle+0x1cc>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	4c64      	ldr	r4, [pc, #400]	@ (8003534 <BSP_LCD_DrawCircle+0x1d0>)
 80033a4:	4613      	mov	r3, r2
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4423      	add	r3, r4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f000 f8c1 	bl	8003538 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	88fa      	ldrh	r2, [r7, #6]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	b298      	uxth	r0, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	88ba      	ldrh	r2, [r7, #4]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	b299      	uxth	r1, r3
 80033ca:	4b59      	ldr	r3, [pc, #356]	@ (8003530 <BSP_LCD_DrawCircle+0x1cc>)
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4c59      	ldr	r4, [pc, #356]	@ (8003534 <BSP_LCD_DrawCircle+0x1d0>)
 80033d0:	4613      	mov	r3, r2
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	4413      	add	r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4423      	add	r3, r4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	461a      	mov	r2, r3
 80033de:	f000 f8ab 	bl	8003538 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	88fb      	ldrh	r3, [r7, #6]
 80033e8:	4413      	add	r3, r2
 80033ea:	b298      	uxth	r0, r3
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	88ba      	ldrh	r2, [r7, #4]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	b299      	uxth	r1, r3
 80033f6:	4b4e      	ldr	r3, [pc, #312]	@ (8003530 <BSP_LCD_DrawCircle+0x1cc>)
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	4c4e      	ldr	r4, [pc, #312]	@ (8003534 <BSP_LCD_DrawCircle+0x1d0>)
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4423      	add	r3, r4
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	461a      	mov	r2, r3
 800340a:	f000 f895 	bl	8003538 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	b29b      	uxth	r3, r3
 8003412:	88fa      	ldrh	r2, [r7, #6]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	b298      	uxth	r0, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	b29b      	uxth	r3, r3
 800341c:	88ba      	ldrh	r2, [r7, #4]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	b299      	uxth	r1, r3
 8003422:	4b43      	ldr	r3, [pc, #268]	@ (8003530 <BSP_LCD_DrawCircle+0x1cc>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	4c43      	ldr	r4, [pc, #268]	@ (8003534 <BSP_LCD_DrawCircle+0x1d0>)
 8003428:	4613      	mov	r3, r2
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4423      	add	r3, r4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	461a      	mov	r2, r3
 8003436:	f000 f87f 	bl	8003538 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	b29a      	uxth	r2, r3
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	4413      	add	r3, r2
 8003442:	b298      	uxth	r0, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	b29a      	uxth	r2, r3
 8003448:	88bb      	ldrh	r3, [r7, #4]
 800344a:	4413      	add	r3, r2
 800344c:	b299      	uxth	r1, r3
 800344e:	4b38      	ldr	r3, [pc, #224]	@ (8003530 <BSP_LCD_DrawCircle+0x1cc>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4c38      	ldr	r4, [pc, #224]	@ (8003534 <BSP_LCD_DrawCircle+0x1d0>)
 8003454:	4613      	mov	r3, r2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4423      	add	r3, r4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	f000 f869 	bl	8003538 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	b29b      	uxth	r3, r3
 800346a:	88fa      	ldrh	r2, [r7, #6]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	b298      	uxth	r0, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	b29a      	uxth	r2, r3
 8003474:	88bb      	ldrh	r3, [r7, #4]
 8003476:	4413      	add	r3, r2
 8003478:	b299      	uxth	r1, r3
 800347a:	4b2d      	ldr	r3, [pc, #180]	@ (8003530 <BSP_LCD_DrawCircle+0x1cc>)
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4c2d      	ldr	r4, [pc, #180]	@ (8003534 <BSP_LCD_DrawCircle+0x1d0>)
 8003480:	4613      	mov	r3, r2
 8003482:	005b      	lsls	r3, r3, #1
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4423      	add	r3, r4
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	f000 f853 	bl	8003538 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	b29a      	uxth	r2, r3
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	4413      	add	r3, r2
 800349a:	b298      	uxth	r0, r3
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	b29a      	uxth	r2, r3
 80034a0:	88bb      	ldrh	r3, [r7, #4]
 80034a2:	4413      	add	r3, r2
 80034a4:	b299      	uxth	r1, r3
 80034a6:	4b22      	ldr	r3, [pc, #136]	@ (8003530 <BSP_LCD_DrawCircle+0x1cc>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	4c22      	ldr	r4, [pc, #136]	@ (8003534 <BSP_LCD_DrawCircle+0x1d0>)
 80034ac:	4613      	mov	r3, r2
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4423      	add	r3, r4
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	f000 f83d 	bl	8003538 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	b298      	uxth	r0, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	88bb      	ldrh	r3, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	b299      	uxth	r1, r3
 80034d2:	4b17      	ldr	r3, [pc, #92]	@ (8003530 <BSP_LCD_DrawCircle+0x1cc>)
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	4c17      	ldr	r4, [pc, #92]	@ (8003534 <BSP_LCD_DrawCircle+0x1d0>)
 80034d8:	4613      	mov	r3, r2
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4423      	add	r3, r4
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	461a      	mov	r2, r3
 80034e6:	f000 f827 	bl	8003538 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	da06      	bge.n	80034fe <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	009a      	lsls	r2, r3, #2
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	4413      	add	r3, r2
 80034f8:	3306      	adds	r3, #6
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e00a      	b.n	8003514 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80034fe:	693a      	ldr	r2, [r7, #16]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	009a      	lsls	r2, r3, #2
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	4413      	add	r3, r2
 800350a:	330a      	adds	r3, #10
 800350c:	617b      	str	r3, [r7, #20]
      current_y--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3b01      	subs	r3, #1
 8003512:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	3301      	adds	r3, #1
 8003518:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	429a      	cmp	r2, r3
 8003520:	f67f af33 	bls.w	800338a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop
 8003528:	371c      	adds	r7, #28
 800352a:	46bd      	mov	sp, r7
 800352c:	bd90      	pop	{r4, r7, pc}
 800352e:	bf00      	nop
 8003530:	2000988c 	.word	0x2000988c
 8003534:	20009890 	.word	0x20009890

08003538 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003538:	b5b0      	push	{r4, r5, r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	603a      	str	r2, [r7, #0]
 8003542:	80fb      	strh	r3, [r7, #6]
 8003544:	460b      	mov	r3, r1
 8003546:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003548:	4b1d      	ldr	r3, [pc, #116]	@ (80035c0 <BSP_LCD_DrawPixel+0x88>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a1d      	ldr	r2, [pc, #116]	@ (80035c4 <BSP_LCD_DrawPixel+0x8c>)
 800354e:	2134      	movs	r1, #52	@ 0x34
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	4413      	add	r3, r2
 8003556:	3348      	adds	r3, #72	@ 0x48
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d116      	bne.n	800358c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800355e:	4b18      	ldr	r3, [pc, #96]	@ (80035c0 <BSP_LCD_DrawPixel+0x88>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a18      	ldr	r2, [pc, #96]	@ (80035c4 <BSP_LCD_DrawPixel+0x8c>)
 8003564:	2134      	movs	r1, #52	@ 0x34
 8003566:	fb01 f303 	mul.w	r3, r1, r3
 800356a:	4413      	add	r3, r2
 800356c:	335c      	adds	r3, #92	@ 0x5c
 800356e:	681c      	ldr	r4, [r3, #0]
 8003570:	88bd      	ldrh	r5, [r7, #4]
 8003572:	f7ff fc53 	bl	8002e1c <BSP_LCD_GetXSize>
 8003576:	4603      	mov	r3, r0
 8003578:	fb03 f205 	mul.w	r2, r3, r5
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	4413      	add	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4423      	add	r3, r4
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	b292      	uxth	r2, r2
 8003588:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800358a:	e015      	b.n	80035b8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800358c:	4b0c      	ldr	r3, [pc, #48]	@ (80035c0 <BSP_LCD_DrawPixel+0x88>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a0c      	ldr	r2, [pc, #48]	@ (80035c4 <BSP_LCD_DrawPixel+0x8c>)
 8003592:	2134      	movs	r1, #52	@ 0x34
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	4413      	add	r3, r2
 800359a:	335c      	adds	r3, #92	@ 0x5c
 800359c:	681c      	ldr	r4, [r3, #0]
 800359e:	88bd      	ldrh	r5, [r7, #4]
 80035a0:	f7ff fc3c 	bl	8002e1c <BSP_LCD_GetXSize>
 80035a4:	4603      	mov	r3, r0
 80035a6:	fb03 f205 	mul.w	r2, r3, r5
 80035aa:	88fb      	ldrh	r3, [r7, #6]
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4423      	add	r3, r4
 80035b2:	461a      	mov	r2, r3
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6013      	str	r3, [r2, #0]
}
 80035b8:	bf00      	nop
 80035ba:	3708      	adds	r7, #8
 80035bc:	46bd      	mov	sp, r7
 80035be:	bdb0      	pop	{r4, r5, r7, pc}
 80035c0:	2000988c 	.word	0x2000988c
 80035c4:	200097a4 	.word	0x200097a4

080035c8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b08b      	sub	sp, #44	@ 0x2c
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80035d8:	2300      	movs	r3, #0
 80035da:	61bb      	str	r3, [r7, #24]
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
 80035e0:	2300      	movs	r3, #0
 80035e2:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 80035e4:	2300      	movs	r3, #0
 80035e6:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	330a      	adds	r3, #10
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	461a      	mov	r2, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	330b      	adds	r3, #11
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	021b      	lsls	r3, r3, #8
 80035f8:	441a      	add	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	330c      	adds	r3, #12
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	441a      	add	r2, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	330d      	adds	r3, #13
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	061b      	lsls	r3, r3, #24
 800360c:	4413      	add	r3, r2
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	3312      	adds	r3, #18
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3313      	adds	r3, #19
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	021b      	lsls	r3, r3, #8
 8003620:	441a      	add	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3314      	adds	r3, #20
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	441a      	add	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	3315      	adds	r3, #21
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	061b      	lsls	r3, r3, #24
 8003634:	4413      	add	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3316      	adds	r3, #22
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	461a      	mov	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	3317      	adds	r3, #23
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	441a      	add	r2, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3318      	adds	r3, #24
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	441a      	add	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3319      	adds	r3, #25
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	061b      	lsls	r3, r3, #24
 800365c:	4413      	add	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	331c      	adds	r3, #28
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	331d      	adds	r3, #29
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	021b      	lsls	r3, r3, #8
 8003670:	4413      	add	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003674:	4b2b      	ldr	r3, [pc, #172]	@ (8003724 <BSP_LCD_DrawBitmap+0x15c>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a2b      	ldr	r2, [pc, #172]	@ (8003728 <BSP_LCD_DrawBitmap+0x160>)
 800367a:	2134      	movs	r1, #52	@ 0x34
 800367c:	fb01 f303 	mul.w	r3, r1, r3
 8003680:	4413      	add	r3, r2
 8003682:	335c      	adds	r3, #92	@ 0x5c
 8003684:	681c      	ldr	r4, [r3, #0]
 8003686:	f7ff fbc9 	bl	8002e1c <BSP_LCD_GetXSize>
 800368a:	4602      	mov	r2, r0
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	fb03 f202 	mul.w	r2, r3, r2
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	4413      	add	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4423      	add	r3, r4
 800369a:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	3b20      	subs	r3, #32
 80036a0:	2b07      	cmp	r3, #7
 80036a2:	d802      	bhi.n	80036aa <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
 80036a8:	e008      	b.n	80036bc <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	3b10      	subs	r3, #16
 80036ae:	2b07      	cmp	r3, #7
 80036b0:	d802      	bhi.n	80036b8 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80036b2:	2302      	movs	r3, #2
 80036b4:	61fb      	str	r3, [r7, #28]
 80036b6:	e001      	b.n	80036bc <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80036b8:	2301      	movs	r3, #1
 80036ba:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	3b01      	subs	r3, #1
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	08d2      	lsrs	r2, r2, #3
 80036ca:	fb03 f202 	mul.w	r2, r3, r2
 80036ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d0:	4413      	add	r3, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	4413      	add	r3, r2
 80036d6:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80036d8:	2300      	movs	r3, #0
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
 80036dc:	e018      	b.n	8003710 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80036de:	6a39      	ldr	r1, [r7, #32]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fad9 	bl	8003c9c <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80036ea:	f7ff fb97 	bl	8002e1c <BSP_LCD_GetXSize>
 80036ee:	4603      	mov	r3, r0
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	6a3a      	ldr	r2, [r7, #32]
 80036f4:	4413      	add	r3, r2
 80036f6:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	08db      	lsrs	r3, r3, #3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	425b      	negs	r3, r3
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	4413      	add	r3, r2
 8003708:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 800370a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370c:	3301      	adds	r3, #1
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	d3e2      	bcc.n	80036de <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	372c      	adds	r7, #44	@ 0x2c
 800371e:	46bd      	mov	sp, r7
 8003720:	bd90      	pop	{r4, r7, pc}
 8003722:	bf00      	nop
 8003724:	2000988c 	.word	0x2000988c
 8003728:	200097a4 	.word	0x200097a4

0800372c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	80fb      	strh	r3, [r7, #6]
 8003736:	460b      	mov	r3, r1
 8003738:	80bb      	strh	r3, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	f1c3 0303 	rsb	r3, r3, #3
 8003746:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003748:	2300      	movs	r3, #0
 800374a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800374c:	887b      	ldrh	r3, [r7, #2]
 800374e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003750:	4b44      	ldr	r3, [pc, #272]	@ (8003864 <BSP_LCD_FillCircle+0x138>)
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	4944      	ldr	r1, [pc, #272]	@ (8003868 <BSP_LCD_FillCircle+0x13c>)
 8003756:	4613      	mov	r3, r2
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	4413      	add	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4618      	mov	r0, r3
 8003764:	f7ff fbf2 	bl	8002f4c <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003768:	e061      	b.n	800382e <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d021      	beq.n	80037b4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	b29b      	uxth	r3, r3
 8003774:	88fa      	ldrh	r2, [r7, #6]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	b298      	uxth	r0, r3
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	b29a      	uxth	r2, r3
 800377e:	88bb      	ldrh	r3, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	b299      	uxth	r1, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	b29b      	uxth	r3, r3
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	b29b      	uxth	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	f7ff fd8b 	bl	80032a8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	b29b      	uxth	r3, r3
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	b298      	uxth	r0, r3
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	b29b      	uxth	r3, r3
 80037a0:	88ba      	ldrh	r2, [r7, #4]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	b299      	uxth	r1, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	f7ff fd7a 	bl	80032a8 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d021      	beq.n	80037fe <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	88fa      	ldrh	r2, [r7, #6]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	b298      	uxth	r0, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	88ba      	ldrh	r2, [r7, #4]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	b299      	uxth	r1, r3
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	f7ff fd66 	bl	80032a8 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	b29b      	uxth	r3, r3
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	b298      	uxth	r0, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	88bb      	ldrh	r3, [r7, #4]
 80037ec:	4413      	add	r3, r2
 80037ee:	b299      	uxth	r1, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	b29b      	uxth	r3, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	f7ff fd55 	bl	80032a8 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	da06      	bge.n	8003812 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	009a      	lsls	r2, r3, #2
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	4413      	add	r3, r2
 800380c:	3306      	adds	r3, #6
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	e00a      	b.n	8003828 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003812:	693a      	ldr	r2, [r7, #16]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	009a      	lsls	r2, r3, #2
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	4413      	add	r3, r2
 800381e:	330a      	adds	r3, #10
 8003820:	617b      	str	r3, [r7, #20]
      current_y--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3b01      	subs	r3, #1
 8003826:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	3301      	adds	r3, #1
 800382c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	429a      	cmp	r2, r3
 8003834:	d999      	bls.n	800376a <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003836:	4b0b      	ldr	r3, [pc, #44]	@ (8003864 <BSP_LCD_FillCircle+0x138>)
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	490b      	ldr	r1, [pc, #44]	@ (8003868 <BSP_LCD_FillCircle+0x13c>)
 800383c:	4613      	mov	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff fb7f 	bl	8002f4c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800384e:	887a      	ldrh	r2, [r7, #2]
 8003850:	88b9      	ldrh	r1, [r7, #4]
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff fd85 	bl	8003364 <BSP_LCD_DrawCircle>
}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	2000988c 	.word	0x2000988c
 8003868:	20009890 	.word	0x20009890

0800386c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003870:	4b0a      	ldr	r3, [pc, #40]	@ (800389c <BSP_LCD_DisplayOn+0x30>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	4b09      	ldr	r3, [pc, #36]	@ (800389c <BSP_LCD_DisplayOn+0x30>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003880:	2201      	movs	r2, #1
 8003882:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003886:	4806      	ldr	r0, [pc, #24]	@ (80038a0 <BSP_LCD_DisplayOn+0x34>)
 8003888:	f003 fb16 	bl	8006eb8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800388c:	2201      	movs	r2, #1
 800388e:	2108      	movs	r1, #8
 8003890:	4804      	ldr	r0, [pc, #16]	@ (80038a4 <BSP_LCD_DisplayOn+0x38>)
 8003892:	f003 fb11 	bl	8006eb8 <HAL_GPIO_WritePin>
}
 8003896:	bf00      	nop
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	200097a4 	.word	0x200097a4
 80038a0:	40022000 	.word	0x40022000
 80038a4:	40022800 	.word	0x40022800

080038a8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b090      	sub	sp, #64	@ 0x40
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80038b2:	4b64      	ldr	r3, [pc, #400]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b6:	4a63      	ldr	r2, [pc, #396]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 80038b8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80038bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80038be:	4b61      	ldr	r3, [pc, #388]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80038c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80038ca:	4b5e      	ldr	r3, [pc, #376]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ce:	4a5d      	ldr	r2, [pc, #372]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 80038d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80038d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80038d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038de:	627b      	str	r3, [r7, #36]	@ 0x24
 80038e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038e2:	4b58      	ldr	r3, [pc, #352]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	4a57      	ldr	r2, [pc, #348]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 80038e8:	f043 0310 	orr.w	r3, r3, #16
 80038ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80038ee:	4b55      	ldr	r3, [pc, #340]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	623b      	str	r3, [r7, #32]
 80038f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80038fa:	4b52      	ldr	r3, [pc, #328]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fe:	4a51      	ldr	r2, [pc, #324]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003904:	6313      	str	r3, [r2, #48]	@ 0x30
 8003906:	4b4f      	ldr	r3, [pc, #316]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390e:	61fb      	str	r3, [r7, #28]
 8003910:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003912:	4b4c      	ldr	r3, [pc, #304]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003916:	4a4b      	ldr	r2, [pc, #300]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003918:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800391c:	6313      	str	r3, [r2, #48]	@ 0x30
 800391e:	4b49      	ldr	r3, [pc, #292]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003926:	61bb      	str	r3, [r7, #24]
 8003928:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800392a:	4b46      	ldr	r3, [pc, #280]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	4a45      	ldr	r2, [pc, #276]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003930:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003934:	6313      	str	r3, [r2, #48]	@ 0x30
 8003936:	4b43      	ldr	r3, [pc, #268]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800393a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800393e:	617b      	str	r3, [r7, #20]
 8003940:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003942:	4b40      	ldr	r3, [pc, #256]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003946:	4a3f      	ldr	r2, [pc, #252]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003948:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800394c:	6313      	str	r3, [r2, #48]	@ 0x30
 800394e:	4b3d      	ldr	r3, [pc, #244]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003956:	613b      	str	r3, [r7, #16]
 8003958:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800395a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	4a39      	ldr	r2, [pc, #228]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003964:	6313      	str	r3, [r2, #48]	@ 0x30
 8003966:	4b37      	ldr	r3, [pc, #220]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003972:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003976:	4a33      	ldr	r2, [pc, #204]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003978:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800397c:	6313      	str	r3, [r2, #48]	@ 0x30
 800397e:	4b31      	ldr	r3, [pc, #196]	@ (8003a44 <BSP_LCD_MspInit+0x19c>)
 8003980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003982:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800398a:	2310      	movs	r3, #16
 800398c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800398e:	2302      	movs	r3, #2
 8003990:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003992:	2300      	movs	r3, #0
 8003994:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003996:	2302      	movs	r3, #2
 8003998:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800399a:	230e      	movs	r3, #14
 800399c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800399e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039a2:	4619      	mov	r1, r3
 80039a4:	4828      	ldr	r0, [pc, #160]	@ (8003a48 <BSP_LCD_MspInit+0x1a0>)
 80039a6:	f002 ffb7 	bl	8006918 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80039aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80039ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80039b4:	2309      	movs	r3, #9
 80039b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80039b8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039bc:	4619      	mov	r1, r3
 80039be:	4823      	ldr	r0, [pc, #140]	@ (8003a4c <BSP_LCD_MspInit+0x1a4>)
 80039c0:	f002 ffaa 	bl	8006918 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80039c4:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 80039c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80039ca:	2302      	movs	r3, #2
 80039cc:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80039ce:	230e      	movs	r3, #14
 80039d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80039d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039d6:	4619      	mov	r1, r3
 80039d8:	481d      	ldr	r0, [pc, #116]	@ (8003a50 <BSP_LCD_MspInit+0x1a8>)
 80039da:	f002 ff9d 	bl	8006918 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80039de:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 80039e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80039e8:	230e      	movs	r3, #14
 80039ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80039ec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80039f0:	4619      	mov	r1, r3
 80039f2:	4818      	ldr	r0, [pc, #96]	@ (8003a54 <BSP_LCD_MspInit+0x1ac>)
 80039f4:	f002 ff90 	bl	8006918 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80039f8:	23f7      	movs	r3, #247	@ 0xf7
 80039fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003a00:	230e      	movs	r3, #14
 8003a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003a04:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4813      	ldr	r0, [pc, #76]	@ (8003a58 <BSP_LCD_MspInit+0x1b0>)
 8003a0c:	f002 ff84 	bl	8006918 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003a10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003a16:	2301      	movs	r3, #1
 8003a18:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 8003a1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a1e:	4619      	mov	r1, r3
 8003a20:	480b      	ldr	r0, [pc, #44]	@ (8003a50 <BSP_LCD_MspInit+0x1a8>)
 8003a22:	f002 ff79 	bl	8006918 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003a26:	2308      	movs	r3, #8
 8003a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003a2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003a32:	4619      	mov	r1, r3
 8003a34:	4808      	ldr	r0, [pc, #32]	@ (8003a58 <BSP_LCD_MspInit+0x1b0>)
 8003a36:	f002 ff6f 	bl	8006918 <HAL_GPIO_Init>
}
 8003a3a:	bf00      	nop
 8003a3c:	3740      	adds	r7, #64	@ 0x40
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40021800 	.word	0x40021800
 8003a50:	40022000 	.word	0x40022000
 8003a54:	40022400 	.word	0x40022400
 8003a58:	40022800 	.word	0x40022800

08003a5c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003a66:	4b0a      	ldr	r3, [pc, #40]	@ (8003a90 <BSP_LCD_ClockConfig+0x34>)
 8003a68:	2208      	movs	r2, #8
 8003a6a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003a6c:	4b08      	ldr	r3, [pc, #32]	@ (8003a90 <BSP_LCD_ClockConfig+0x34>)
 8003a6e:	22c0      	movs	r2, #192	@ 0xc0
 8003a70:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003a72:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <BSP_LCD_ClockConfig+0x34>)
 8003a74:	2205      	movs	r2, #5
 8003a76:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003a78:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <BSP_LCD_ClockConfig+0x34>)
 8003a7a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003a7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003a80:	4803      	ldr	r0, [pc, #12]	@ (8003a90 <BSP_LCD_ClockConfig+0x34>)
 8003a82:	f005 f933 	bl	8008cec <HAL_RCCEx_PeriphCLKConfig>
}
 8003a86:	bf00      	nop
 8003a88:	3708      	adds	r7, #8
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200098a8 	.word	0x200098a8

08003a94 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	603a      	str	r2, [r7, #0]
 8003a9e:	80fb      	strh	r3, [r7, #6]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	61fb      	str	r3, [r7, #28]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003aac:	4b53      	ldr	r3, [pc, #332]	@ (8003bfc <DrawChar+0x168>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	4953      	ldr	r1, [pc, #332]	@ (8003c00 <DrawChar+0x16c>)
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	3308      	adds	r3, #8
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	88db      	ldrh	r3, [r3, #6]
 8003ac2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8003bfc <DrawChar+0x168>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	494d      	ldr	r1, [pc, #308]	@ (8003c00 <DrawChar+0x16c>)
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	889b      	ldrh	r3, [r3, #4]
 8003ada:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003adc:	8a3b      	ldrh	r3, [r7, #16]
 8003ade:	3307      	adds	r3, #7
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	da00      	bge.n	8003ae6 <DrawChar+0x52>
 8003ae4:	3307      	adds	r3, #7
 8003ae6:	10db      	asrs	r3, r3, #3
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	b2da      	uxtb	r2, r3
 8003aee:	8a3b      	ldrh	r3, [r7, #16]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e076      	b.n	8003bea <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003afc:	8a3b      	ldrh	r3, [r7, #16]
 8003afe:	3307      	adds	r3, #7
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	da00      	bge.n	8003b06 <DrawChar+0x72>
 8003b04:	3307      	adds	r3, #7
 8003b06:	10db      	asrs	r3, r3, #3
 8003b08:	461a      	mov	r2, r3
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	fb02 f303 	mul.w	r3, r2, r3
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003b16:	8a3b      	ldrh	r3, [r7, #16]
 8003b18:	3307      	adds	r3, #7
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	da00      	bge.n	8003b20 <DrawChar+0x8c>
 8003b1e:	3307      	adds	r3, #7
 8003b20:	10db      	asrs	r3, r3, #3
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d002      	beq.n	8003b2c <DrawChar+0x98>
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d004      	beq.n	8003b34 <DrawChar+0xa0>
 8003b2a:	e00c      	b.n	8003b46 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	617b      	str	r3, [r7, #20]
      break;
 8003b32:	e016      	b.n	8003b62 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	3201      	adds	r2, #1
 8003b3e:	7812      	ldrb	r2, [r2, #0]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
      break;
 8003b44:	e00d      	b.n	8003b62 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	041a      	lsls	r2, r3, #16
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	3301      	adds	r3, #1
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	021b      	lsls	r3, r3, #8
 8003b54:	4313      	orrs	r3, r2
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	3202      	adds	r2, #2
 8003b5a:	7812      	ldrb	r2, [r2, #0]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]
      break;
 8003b60:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003b62:	2300      	movs	r3, #0
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	e036      	b.n	8003bd6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003b68:	8a3a      	ldrh	r2, [r7, #16]
 8003b6a:	69bb      	ldr	r3, [r7, #24]
 8003b6c:	1ad2      	subs	r2, r2, r3
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	4413      	add	r3, r2
 8003b72:	3b01      	subs	r3, #1
 8003b74:	2201      	movs	r2, #1
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d012      	beq.n	8003baa <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	88fb      	ldrh	r3, [r7, #6]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	b298      	uxth	r0, r3
 8003b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8003bfc <DrawChar+0x168>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	491b      	ldr	r1, [pc, #108]	@ (8003c00 <DrawChar+0x16c>)
 8003b94:	4613      	mov	r3, r2
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	88bb      	ldrh	r3, [r7, #4]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	f7ff fcc8 	bl	8003538 <BSP_LCD_DrawPixel>
 8003ba8:	e012      	b.n	8003bd0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	88fb      	ldrh	r3, [r7, #6]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	b298      	uxth	r0, r3
 8003bb4:	4b11      	ldr	r3, [pc, #68]	@ (8003bfc <DrawChar+0x168>)
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	4911      	ldr	r1, [pc, #68]	@ (8003c00 <DrawChar+0x16c>)
 8003bba:	4613      	mov	r3, r2
 8003bbc:	005b      	lsls	r3, r3, #1
 8003bbe:	4413      	add	r3, r2
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	440b      	add	r3, r1
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	88bb      	ldrh	r3, [r7, #4]
 8003bca:	4619      	mov	r1, r3
 8003bcc:	f7ff fcb4 	bl	8003538 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	8a3b      	ldrh	r3, [r7, #16]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d3c4      	bcc.n	8003b68 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003bde:	88bb      	ldrh	r3, [r7, #4]
 8003be0:	3301      	adds	r3, #1
 8003be2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	3301      	adds	r3, #1
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	8a7b      	ldrh	r3, [r7, #18]
 8003bec:	69fa      	ldr	r2, [r7, #28]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d384      	bcc.n	8003afc <DrawChar+0x68>
  }
}
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	2000988c 	.word	0x2000988c
 8003c00:	20009890 	.word	0x20009890

08003c04 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003c12:	4b1e      	ldr	r3, [pc, #120]	@ (8003c8c <LL_FillBuffer+0x88>)
 8003c14:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003c18:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8003c90 <LL_FillBuffer+0x8c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003c94 <LL_FillBuffer+0x90>)
 8003c20:	2134      	movs	r1, #52	@ 0x34
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	4413      	add	r3, r2
 8003c28:	3348      	adds	r3, #72	@ 0x48
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d103      	bne.n	8003c38 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003c30:	4b16      	ldr	r3, [pc, #88]	@ (8003c8c <LL_FillBuffer+0x88>)
 8003c32:	2202      	movs	r2, #2
 8003c34:	609a      	str	r2, [r3, #8]
 8003c36:	e002      	b.n	8003c3e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003c38:	4b14      	ldr	r3, [pc, #80]	@ (8003c8c <LL_FillBuffer+0x88>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003c3e:	4a13      	ldr	r2, [pc, #76]	@ (8003c8c <LL_FillBuffer+0x88>)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003c44:	4b11      	ldr	r3, [pc, #68]	@ (8003c8c <LL_FillBuffer+0x88>)
 8003c46:	4a14      	ldr	r2, [pc, #80]	@ (8003c98 <LL_FillBuffer+0x94>)
 8003c48:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003c4a:	4810      	ldr	r0, [pc, #64]	@ (8003c8c <LL_FillBuffer+0x88>)
 8003c4c:	f002 fbd8 	bl	8006400 <HAL_DMA2D_Init>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d115      	bne.n	8003c82 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003c56:	68f9      	ldr	r1, [r7, #12]
 8003c58:	480c      	ldr	r0, [pc, #48]	@ (8003c8c <LL_FillBuffer+0x88>)
 8003c5a:	f002 fd2f 	bl	80066bc <HAL_DMA2D_ConfigLayer>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10e      	bne.n	8003c82 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003c64:	68ba      	ldr	r2, [r7, #8]
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	69f9      	ldr	r1, [r7, #28]
 8003c6e:	4807      	ldr	r0, [pc, #28]	@ (8003c8c <LL_FillBuffer+0x88>)
 8003c70:	f002 fc10 	bl	8006494 <HAL_DMA2D_Start>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d103      	bne.n	8003c82 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003c7a:	210a      	movs	r1, #10
 8003c7c:	4803      	ldr	r0, [pc, #12]	@ (8003c8c <LL_FillBuffer+0x88>)
 8003c7e:	f002 fc34 	bl	80064ea <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	2000984c 	.word	0x2000984c
 8003c90:	2000988c 	.word	0x2000988c
 8003c94:	200097a4 	.word	0x200097a4
 8003c98:	4002b000 	.word	0x4002b000

08003c9c <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 8003caa:	4b1c      	ldr	r3, [pc, #112]	@ (8003d1c <LL_ConvertLineToARGB8888+0x80>)
 8003cac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003cb0:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8003d1c <LL_ConvertLineToARGB8888+0x80>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 8003cb8:	4b18      	ldr	r3, [pc, #96]	@ (8003d1c <LL_ConvertLineToARGB8888+0x80>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8003cbe:	4b17      	ldr	r3, [pc, #92]	@ (8003d1c <LL_ConvertLineToARGB8888+0x80>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	@ 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8003cc4:	4b15      	ldr	r3, [pc, #84]	@ (8003d1c <LL_ConvertLineToARGB8888+0x80>)
 8003cc6:	22ff      	movs	r2, #255	@ 0xff
 8003cc8:	635a      	str	r2, [r3, #52]	@ 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 8003cca:	4a14      	ldr	r2, [pc, #80]	@ (8003d1c <LL_ConvertLineToARGB8888+0x80>)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	62d3      	str	r3, [r2, #44]	@ 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	@ (8003d1c <LL_ConvertLineToARGB8888+0x80>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	629a      	str	r2, [r3, #40]	@ 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 8003cd6:	4b11      	ldr	r3, [pc, #68]	@ (8003d1c <LL_ConvertLineToARGB8888+0x80>)
 8003cd8:	4a11      	ldr	r2, [pc, #68]	@ (8003d20 <LL_ConvertLineToARGB8888+0x84>)
 8003cda:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003cdc:	480f      	ldr	r0, [pc, #60]	@ (8003d1c <LL_ConvertLineToARGB8888+0x80>)
 8003cde:	f002 fb8f 	bl	8006400 <HAL_DMA2D_Init>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d115      	bne.n	8003d14 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 8003ce8:	2101      	movs	r1, #1
 8003cea:	480c      	ldr	r0, [pc, #48]	@ (8003d1c <LL_ConvertLineToARGB8888+0x80>)
 8003cec:	f002 fce6 	bl	80066bc <HAL_DMA2D_ConfigLayer>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10e      	bne.n	8003d14 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8003cf6:	68f9      	ldr	r1, [r7, #12]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4806      	ldr	r0, [pc, #24]	@ (8003d1c <LL_ConvertLineToARGB8888+0x80>)
 8003d02:	f002 fbc7 	bl	8006494 <HAL_DMA2D_Start>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d103      	bne.n	8003d14 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003d0c:	210a      	movs	r1, #10
 8003d0e:	4803      	ldr	r0, [pc, #12]	@ (8003d1c <LL_ConvertLineToARGB8888+0x80>)
 8003d10:	f002 fbeb 	bl	80064ea <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003d14:	bf00      	nop
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	2000984c 	.word	0x2000984c
 8003d20:	4002b000 	.word	0x4002b000

08003d24 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003d24:	b580      	push	{r7, lr}
 8003d26:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003d28:	4b29      	ldr	r3, [pc, #164]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003d2a:	4a2a      	ldr	r2, [pc, #168]	@ (8003dd4 <BSP_SDRAM_Init+0xb0>)
 8003d2c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003dd8 <BSP_SDRAM_Init+0xb4>)
 8003d30:	2202      	movs	r2, #2
 8003d32:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003d34:	4b28      	ldr	r3, [pc, #160]	@ (8003dd8 <BSP_SDRAM_Init+0xb4>)
 8003d36:	2207      	movs	r2, #7
 8003d38:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003d3a:	4b27      	ldr	r3, [pc, #156]	@ (8003dd8 <BSP_SDRAM_Init+0xb4>)
 8003d3c:	2204      	movs	r2, #4
 8003d3e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003d40:	4b25      	ldr	r3, [pc, #148]	@ (8003dd8 <BSP_SDRAM_Init+0xb4>)
 8003d42:	2207      	movs	r2, #7
 8003d44:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003d46:	4b24      	ldr	r3, [pc, #144]	@ (8003dd8 <BSP_SDRAM_Init+0xb4>)
 8003d48:	2202      	movs	r2, #2
 8003d4a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003d4c:	4b22      	ldr	r3, [pc, #136]	@ (8003dd8 <BSP_SDRAM_Init+0xb4>)
 8003d4e:	2202      	movs	r2, #2
 8003d50:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003d52:	4b21      	ldr	r3, [pc, #132]	@ (8003dd8 <BSP_SDRAM_Init+0xb4>)
 8003d54:	2202      	movs	r2, #2
 8003d56:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003d58:	4b1d      	ldr	r3, [pc, #116]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003d64:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003d66:	2204      	movs	r2, #4
 8003d68:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003d6a:	4b19      	ldr	r3, [pc, #100]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003d70:	4b17      	ldr	r3, [pc, #92]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003d72:	2240      	movs	r2, #64	@ 0x40
 8003d74:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003d76:	4b16      	ldr	r3, [pc, #88]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003d78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003d7c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003d7e:	4b14      	ldr	r3, [pc, #80]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003d84:	4b12      	ldr	r3, [pc, #72]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003d86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d8a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003d8c:	4b10      	ldr	r3, [pc, #64]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003d8e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003d92:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003d94:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	480c      	ldr	r0, [pc, #48]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003d9e:	f000 f87f 	bl	8003ea0 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003da2:	490d      	ldr	r1, [pc, #52]	@ (8003dd8 <BSP_SDRAM_Init+0xb4>)
 8003da4:	480a      	ldr	r0, [pc, #40]	@ (8003dd0 <BSP_SDRAM_Init+0xac>)
 8003da6:	f007 f88f 	bl	800aec8 <HAL_SDRAM_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d003      	beq.n	8003db8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003db0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ddc <BSP_SDRAM_Init+0xb8>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e002      	b.n	8003dbe <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003db8:	4b08      	ldr	r3, [pc, #32]	@ (8003ddc <BSP_SDRAM_Init+0xb8>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003dbe:	f240 6003 	movw	r0, #1539	@ 0x603
 8003dc2:	f000 f80d 	bl	8003de0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003dc6:	4b05      	ldr	r3, [pc, #20]	@ (8003ddc <BSP_SDRAM_Init+0xb8>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	2000992c 	.word	0x2000992c
 8003dd4:	a0000140 	.word	0xa0000140
 8003dd8:	20009960 	.word	0x20009960
 8003ddc:	20000028 	.word	0x20000028

08003de0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003de8:	2300      	movs	r3, #0
 8003dea:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003dec:	4b2a      	ldr	r3, [pc, #168]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003df2:	4b29      	ldr	r3, [pc, #164]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003df4:	2210      	movs	r2, #16
 8003df6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003df8:	4b27      	ldr	r3, [pc, #156]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003dfe:	4b26      	ldr	r3, [pc, #152]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e08:	4923      	ldr	r1, [pc, #140]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e0a:	4824      	ldr	r0, [pc, #144]	@ (8003e9c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e0c:	f007 f890 	bl	800af30 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003e10:	2001      	movs	r0, #1
 8003e12:	f001 f9f1 	bl	80051f8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003e16:	4b20      	ldr	r3, [pc, #128]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e18:	2202      	movs	r2, #2
 8003e1a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e1e:	2210      	movs	r2, #16
 8003e20:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003e22:	4b1d      	ldr	r3, [pc, #116]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e24:	2201      	movs	r2, #1
 8003e26:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003e28:	4b1b      	ldr	r3, [pc, #108]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003e2e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e32:	4919      	ldr	r1, [pc, #100]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e34:	4819      	ldr	r0, [pc, #100]	@ (8003e9c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e36:	f007 f87b 	bl	800af30 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003e3a:	4b17      	ldr	r3, [pc, #92]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e3c:	2203      	movs	r2, #3
 8003e3e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e40:	4b15      	ldr	r3, [pc, #84]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e42:	2210      	movs	r2, #16
 8003e44:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003e46:	4b14      	ldr	r3, [pc, #80]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e48:	2208      	movs	r2, #8
 8003e4a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003e4c:	4b12      	ldr	r3, [pc, #72]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e56:	4910      	ldr	r1, [pc, #64]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e58:	4810      	ldr	r0, [pc, #64]	@ (8003e9c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e5a:	f007 f869 	bl	800af30 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003e5e:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8003e62:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003e64:	4b0c      	ldr	r3, [pc, #48]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e66:	2204      	movs	r2, #4
 8003e68:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003e70:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4a07      	ldr	r2, [pc, #28]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e7a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003e80:	4905      	ldr	r1, [pc, #20]	@ (8003e98 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e82:	4806      	ldr	r0, [pc, #24]	@ (8003e9c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e84:	f007 f854 	bl	800af30 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4804      	ldr	r0, [pc, #16]	@ (8003e9c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e8c:	f007 f885 	bl	800af9a <HAL_SDRAM_ProgramRefreshRate>
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	2000997c 	.word	0x2000997c
 8003e9c:	2000992c 	.word	0x2000992c

08003ea0 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b090      	sub	sp, #64	@ 0x40
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003eaa:	4b70      	ldr	r3, [pc, #448]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eae:	4a6f      	ldr	r2, [pc, #444]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003eb0:	f043 0301 	orr.w	r3, r3, #1
 8003eb4:	6393      	str	r3, [r2, #56]	@ 0x38
 8003eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec6:	4a69      	ldr	r2, [pc, #420]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003ec8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ece:	4b67      	ldr	r3, [pc, #412]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003eda:	4b64      	ldr	r3, [pc, #400]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ede:	4a63      	ldr	r2, [pc, #396]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003ee0:	f043 0304 	orr.w	r3, r3, #4
 8003ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ee6:	4b61      	ldr	r3, [pc, #388]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	623b      	str	r3, [r7, #32]
 8003ef0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ef2:	4b5e      	ldr	r3, [pc, #376]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef6:	4a5d      	ldr	r2, [pc, #372]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003ef8:	f043 0308 	orr.w	r3, r3, #8
 8003efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003efe:	4b5b      	ldr	r3, [pc, #364]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	f003 0308 	and.w	r3, r3, #8
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003f0a:	4b58      	ldr	r3, [pc, #352]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f0e:	4a57      	ldr	r2, [pc, #348]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f10:	f043 0310 	orr.w	r3, r3, #16
 8003f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f16:	4b55      	ldr	r3, [pc, #340]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	61bb      	str	r3, [r7, #24]
 8003f20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f22:	4b52      	ldr	r3, [pc, #328]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f26:	4a51      	ldr	r2, [pc, #324]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f28:	f043 0320 	orr.w	r3, r3, #32
 8003f2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f2e:	4b4f      	ldr	r3, [pc, #316]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f3a:	4b4c      	ldr	r3, [pc, #304]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3e:	4a4b      	ldr	r2, [pc, #300]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f46:	4b49      	ldr	r3, [pc, #292]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f52:	4b46      	ldr	r3, [pc, #280]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	4a45      	ldr	r2, [pc, #276]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f5e:	4b43      	ldr	r3, [pc, #268]	@ (800406c <BSP_SDRAM_MspInit+0x1cc>)
 8003f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003f72:	2302      	movs	r3, #2
 8003f74:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003f76:	230c      	movs	r3, #12
 8003f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003f7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f82:	4619      	mov	r1, r3
 8003f84:	483a      	ldr	r0, [pc, #232]	@ (8004070 <BSP_SDRAM_MspInit+0x1d0>)
 8003f86:	f002 fcc7 	bl	8006918 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003f8a:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003f90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003f94:	4619      	mov	r1, r3
 8003f96:	4837      	ldr	r0, [pc, #220]	@ (8004074 <BSP_SDRAM_MspInit+0x1d4>)
 8003f98:	f002 fcbe 	bl	8006918 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003f9c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003fa2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4833      	ldr	r0, [pc, #204]	@ (8004078 <BSP_SDRAM_MspInit+0x1d8>)
 8003faa:	f002 fcb5 	bl	8006918 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003fae:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8003fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003fb4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fb8:	4619      	mov	r1, r3
 8003fba:	4830      	ldr	r0, [pc, #192]	@ (800407c <BSP_SDRAM_MspInit+0x1dc>)
 8003fbc:	f002 fcac 	bl	8006918 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003fc0:	f248 1333 	movw	r3, #33075	@ 0x8133
 8003fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003fc6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fca:	4619      	mov	r1, r3
 8003fcc:	482c      	ldr	r0, [pc, #176]	@ (8004080 <BSP_SDRAM_MspInit+0x1e0>)
 8003fce:	f002 fca3 	bl	8006918 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003fd2:	2328      	movs	r3, #40	@ 0x28
 8003fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003fd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4829      	ldr	r0, [pc, #164]	@ (8004084 <BSP_SDRAM_MspInit+0x1e4>)
 8003fde:	f002 fc9b 	bl	8006918 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003fe2:	4b29      	ldr	r3, [pc, #164]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003fe8:	4b27      	ldr	r3, [pc, #156]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8003fea:	2280      	movs	r2, #128	@ 0x80
 8003fec:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003fee:	4b26      	ldr	r3, [pc, #152]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8003ff0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ff4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003ff6:	4b24      	ldr	r3, [pc, #144]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8003ff8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ffc:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ffe:	4b22      	ldr	r3, [pc, #136]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8004000:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004004:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004006:	4b20      	ldr	r3, [pc, #128]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8004008:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800400c:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800400e:	4b1e      	ldr	r3, [pc, #120]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8004010:	2200      	movs	r2, #0
 8004012:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004014:	4b1c      	ldr	r3, [pc, #112]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8004016:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800401a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 800401c:	4b1a      	ldr	r3, [pc, #104]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 800401e:	2200      	movs	r2, #0
 8004020:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004022:	4b19      	ldr	r3, [pc, #100]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8004024:	2203      	movs	r2, #3
 8004026:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004028:	4b17      	ldr	r3, [pc, #92]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 800402a:	2200      	movs	r2, #0
 800402c:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800402e:	4b16      	ldr	r3, [pc, #88]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8004030:	2200      	movs	r2, #0
 8004032:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004034:	4b14      	ldr	r3, [pc, #80]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8004036:	4a15      	ldr	r2, [pc, #84]	@ (800408c <BSP_SDRAM_MspInit+0x1ec>)
 8004038:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a12      	ldr	r2, [pc, #72]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 800403e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004040:	4a11      	ldr	r2, [pc, #68]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004046:	4810      	ldr	r0, [pc, #64]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 8004048:	f001 fe84 	bl	8005d54 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 800404c:	480e      	ldr	r0, [pc, #56]	@ (8004088 <BSP_SDRAM_MspInit+0x1e8>)
 800404e:	f001 fdd3 	bl	8005bf8 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004052:	2200      	movs	r2, #0
 8004054:	210f      	movs	r1, #15
 8004056:	2038      	movs	r0, #56	@ 0x38
 8004058:	f001 fda4 	bl	8005ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800405c:	2038      	movs	r0, #56	@ 0x38
 800405e:	f001 fdbd 	bl	8005bdc <HAL_NVIC_EnableIRQ>
}
 8004062:	bf00      	nop
 8004064:	3740      	adds	r7, #64	@ 0x40
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800
 8004070:	40020800 	.word	0x40020800
 8004074:	40020c00 	.word	0x40020c00
 8004078:	40021000 	.word	0x40021000
 800407c:	40021400 	.word	0x40021400
 8004080:	40021800 	.word	0x40021800
 8004084:	40021c00 	.word	0x40021c00
 8004088:	2000998c 	.word	0x2000998c
 800408c:	40026410 	.word	0x40026410

08004090 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b084      	sub	sp, #16
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	460a      	mov	r2, r1
 800409a:	80fb      	strh	r3, [r7, #6]
 800409c:	4613      	mov	r3, r2
 800409e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 80040a4:	4a14      	ldr	r2, [pc, #80]	@ (80040f8 <BSP_TS_Init+0x68>)
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 80040aa:	4a14      	ldr	r2, [pc, #80]	@ (80040fc <BSP_TS_Init+0x6c>)
 80040ac:	88bb      	ldrh	r3, [r7, #4]
 80040ae:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 80040b0:	4b13      	ldr	r3, [pc, #76]	@ (8004100 <BSP_TS_Init+0x70>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2070      	movs	r0, #112	@ 0x70
 80040b6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80040b8:	4b11      	ldr	r3, [pc, #68]	@ (8004100 <BSP_TS_Init+0x70>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2070      	movs	r0, #112	@ 0x70
 80040be:	4798      	blx	r3
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b51      	cmp	r3, #81	@ 0x51
 80040c4:	d110      	bne.n	80040e8 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80040c6:	4b0f      	ldr	r3, [pc, #60]	@ (8004104 <BSP_TS_Init+0x74>)
 80040c8:	4a0d      	ldr	r2, [pc, #52]	@ (8004100 <BSP_TS_Init+0x70>)
 80040ca:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80040cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004108 <BSP_TS_Init+0x78>)
 80040ce:	2270      	movs	r2, #112	@ 0x70
 80040d0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80040d2:	4b0e      	ldr	r3, [pc, #56]	@ (800410c <BSP_TS_Init+0x7c>)
 80040d4:	2208      	movs	r2, #8
 80040d6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80040d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004104 <BSP_TS_Init+0x74>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	4a0a      	ldr	r2, [pc, #40]	@ (8004108 <BSP_TS_Init+0x78>)
 80040e0:	7812      	ldrb	r2, [r2, #0]
 80040e2:	4610      	mov	r0, r2
 80040e4:	4798      	blx	r3
 80040e6:	e001      	b.n	80040ec <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80040e8:	2303      	movs	r3, #3
 80040ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80040ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	200099f0 	.word	0x200099f0
 80040fc:	200099f2 	.word	0x200099f2
 8004100:	20000000 	.word	0x20000000
 8004104:	200099ec 	.word	0x200099ec
 8004108:	200099f5 	.word	0x200099f5
 800410c:	200099f4 	.word	0x200099f4

08004110 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	b097      	sub	sp, #92	@ 0x5c
 8004114:	af02      	add	r7, sp, #8
 8004116:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8004118:	2300      	movs	r3, #0
 800411a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 800411e:	2300      	movs	r3, #0
 8004120:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 800412a:	4bb8      	ldr	r3, [pc, #736]	@ (800440c <BSP_TS_GetState+0x2fc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	4ab7      	ldr	r2, [pc, #732]	@ (8004410 <BSP_TS_GetState+0x300>)
 8004132:	7812      	ldrb	r2, [r2, #0]
 8004134:	4610      	mov	r0, r2
 8004136:	4798      	blx	r3
 8004138:	4603      	mov	r3, r0
 800413a:	461a      	mov	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 8198 	beq.w	800447a <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 800414a:	2300      	movs	r3, #0
 800414c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800414e:	e187      	b.n	8004460 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8004150:	4bae      	ldr	r3, [pc, #696]	@ (800440c <BSP_TS_GetState+0x2fc>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	4aae      	ldr	r2, [pc, #696]	@ (8004410 <BSP_TS_GetState+0x300>)
 8004158:	7812      	ldrb	r2, [r2, #0]
 800415a:	4614      	mov	r4, r2
 800415c:	f107 0120 	add.w	r1, r7, #32
 8004160:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004162:	0052      	lsls	r2, r2, #1
 8004164:	1888      	adds	r0, r1, r2
 8004166:	f107 0114 	add.w	r1, r7, #20
 800416a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800416c:	0052      	lsls	r2, r2, #1
 800416e:	440a      	add	r2, r1
 8004170:	4601      	mov	r1, r0
 8004172:	4620      	mov	r0, r4
 8004174:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8004176:	4ba7      	ldr	r3, [pc, #668]	@ (8004414 <BSP_TS_GetState+0x304>)
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d117      	bne.n	80041ae <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 800417e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004180:	005b      	lsls	r3, r3, #1
 8004182:	3350      	adds	r3, #80	@ 0x50
 8004184:	443b      	add	r3, r7
 8004186:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800418a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	3350      	adds	r3, #80	@ 0x50
 8004190:	443b      	add	r3, r7
 8004192:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8004196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	3350      	adds	r3, #80	@ 0x50
 800419c:	443b      	add	r3, r7
 800419e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80041a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	3350      	adds	r3, #80	@ 0x50
 80041a8:	443b      	add	r3, r7
 80041aa:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 80041ae:	4b99      	ldr	r3, [pc, #612]	@ (8004414 <BSP_TS_GetState+0x304>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00e      	beq.n	80041d8 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 80041ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041bc:	005b      	lsls	r3, r3, #1
 80041be:	3350      	adds	r3, #80	@ 0x50
 80041c0:	443b      	add	r3, r7
 80041c2:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80041c6:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041ce:	005b      	lsls	r3, r3, #1
 80041d0:	3350      	adds	r3, #80	@ 0x50
 80041d2:	443b      	add	r3, r7
 80041d4:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80041d8:	4b8e      	ldr	r3, [pc, #568]	@ (8004414 <BSP_TS_GetState+0x304>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 80041e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	3350      	adds	r3, #80	@ 0x50
 80041ea:	443b      	add	r3, r7
 80041ec:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80041f0:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	3350      	adds	r3, #80	@ 0x50
 80041fc:	443b      	add	r3, r7
 80041fe:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8004202:	4b84      	ldr	r3, [pc, #528]	@ (8004414 <BSP_TS_GetState+0x304>)
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	f003 0308 	and.w	r3, r3, #8
 800420a:	2b00      	cmp	r3, #0
 800420c:	d017      	beq.n	800423e <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 800420e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	3350      	adds	r3, #80	@ 0x50
 8004214:	443b      	add	r3, r7
 8004216:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 800421a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	3350      	adds	r3, #80	@ 0x50
 8004220:	443b      	add	r3, r7
 8004222:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8004226:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	3350      	adds	r3, #80	@ 0x50
 800422c:	443b      	add	r3, r7
 800422e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8004232:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	3350      	adds	r3, #80	@ 0x50
 8004238:	443b      	add	r3, r7
 800423a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 800423e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	3350      	adds	r3, #80	@ 0x50
 8004244:	443b      	add	r3, r7
 8004246:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800424a:	4619      	mov	r1, r3
 800424c:	4a72      	ldr	r2, [pc, #456]	@ (8004418 <BSP_TS_GetState+0x308>)
 800424e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004254:	4299      	cmp	r1, r3
 8004256:	d90d      	bls.n	8004274 <BSP_TS_GetState+0x164>
 8004258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	3350      	adds	r3, #80	@ 0x50
 800425e:	443b      	add	r3, r7
 8004260:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8004264:	496c      	ldr	r1, [pc, #432]	@ (8004418 <BSP_TS_GetState+0x308>)
 8004266:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004268:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800426c:	b29b      	uxth	r3, r3
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	b29b      	uxth	r3, r3
 8004272:	e00c      	b.n	800428e <BSP_TS_GetState+0x17e>
 8004274:	4a68      	ldr	r2, [pc, #416]	@ (8004418 <BSP_TS_GetState+0x308>)
 8004276:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800427c:	b29a      	uxth	r2, r3
 800427e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	3350      	adds	r3, #80	@ 0x50
 8004284:	443b      	add	r3, r7
 8004286:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	b29b      	uxth	r3, r3
 800428e:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8004292:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	3350      	adds	r3, #80	@ 0x50
 8004298:	443b      	add	r3, r7
 800429a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 800429e:	4619      	mov	r1, r3
 80042a0:	4a5e      	ldr	r2, [pc, #376]	@ (800441c <BSP_TS_GetState+0x30c>)
 80042a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042a8:	4299      	cmp	r1, r3
 80042aa:	d90d      	bls.n	80042c8 <BSP_TS_GetState+0x1b8>
 80042ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	3350      	adds	r3, #80	@ 0x50
 80042b2:	443b      	add	r3, r7
 80042b4:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80042b8:	4958      	ldr	r1, [pc, #352]	@ (800441c <BSP_TS_GetState+0x30c>)
 80042ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	e00c      	b.n	80042e2 <BSP_TS_GetState+0x1d2>
 80042c8:	4a54      	ldr	r2, [pc, #336]	@ (800441c <BSP_TS_GetState+0x30c>)
 80042ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042d4:	005b      	lsls	r3, r3, #1
 80042d6:	3350      	adds	r3, #80	@ 0x50
 80042d8:	443b      	add	r3, r7
 80042da:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 80042e6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80042ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80042ee:	4413      	add	r3, r2
 80042f0:	2b05      	cmp	r3, #5
 80042f2:	dd15      	ble.n	8004320 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 80042f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	3350      	adds	r3, #80	@ 0x50
 80042fa:	443b      	add	r3, r7
 80042fc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004300:	4619      	mov	r1, r3
 8004302:	4a45      	ldr	r2, [pc, #276]	@ (8004418 <BSP_TS_GetState+0x308>)
 8004304:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004306:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 800430a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800430c:	005b      	lsls	r3, r3, #1
 800430e:	3350      	adds	r3, #80	@ 0x50
 8004310:	443b      	add	r3, r7
 8004312:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8004316:	4619      	mov	r1, r3
 8004318:	4a40      	ldr	r2, [pc, #256]	@ (800441c <BSP_TS_GetState+0x30c>)
 800431a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800431c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8004320:	4b3b      	ldr	r3, [pc, #236]	@ (8004410 <BSP_TS_GetState+0x300>)
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b70      	cmp	r3, #112	@ 0x70
 8004326:	d119      	bne.n	800435c <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8004328:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	3350      	adds	r3, #80	@ 0x50
 800432e:	443b      	add	r3, r7
 8004330:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	4413      	add	r3, r2
 800433c:	460a      	mov	r2, r1
 800433e:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8004340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	3350      	adds	r3, #80	@ 0x50
 8004346:	443b      	add	r3, r7
 8004348:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004350:	3304      	adds	r3, #4
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	4413      	add	r3, r2
 8004356:	460a      	mov	r2, r1
 8004358:	809a      	strh	r2, [r3, #4]
 800435a:	e022      	b.n	80043a2 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 800435c:	4b30      	ldr	r3, [pc, #192]	@ (8004420 <BSP_TS_GetState+0x310>)
 800435e:	881b      	ldrh	r3, [r3, #0]
 8004360:	4619      	mov	r1, r3
 8004362:	4a2d      	ldr	r2, [pc, #180]	@ (8004418 <BSP_TS_GetState+0x308>)
 8004364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800436a:	fb01 f303 	mul.w	r3, r1, r3
 800436e:	0b1b      	lsrs	r3, r3, #12
 8004370:	b299      	uxth	r1, r3
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	4413      	add	r3, r2
 800437a:	460a      	mov	r2, r1
 800437c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 800437e:	4b29      	ldr	r3, [pc, #164]	@ (8004424 <BSP_TS_GetState+0x314>)
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	4619      	mov	r1, r3
 8004384:	4a25      	ldr	r2, [pc, #148]	@ (800441c <BSP_TS_GetState+0x30c>)
 8004386:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	0b1b      	lsrs	r3, r3, #12
 8004392:	b299      	uxth	r1, r3
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004398:	3304      	adds	r3, #4
 800439a:	005b      	lsls	r3, r3, #1
 800439c:	4413      	add	r3, r2
 800439e:	460a      	mov	r2, r1
 80043a0:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80043a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004410 <BSP_TS_GetState+0x300>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f107 010c 	add.w	r1, r7, #12
 80043ac:	f107 0210 	add.w	r2, r7, #16
 80043b0:	f107 0308 	add.w	r3, r7, #8
 80043b4:	9300      	str	r3, [sp, #0]
 80043b6:	460b      	mov	r3, r1
 80043b8:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80043ba:	f7fd f961 	bl	8001680 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	b2d9      	uxtb	r1, r3
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043c6:	4413      	add	r3, r2
 80043c8:	3316      	adds	r3, #22
 80043ca:	460a      	mov	r2, r1
 80043cc:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	b2d9      	uxtb	r1, r3
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043d6:	4413      	add	r3, r2
 80043d8:	3320      	adds	r3, #32
 80043da:	460a      	mov	r2, r1
 80043dc:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	2b03      	cmp	r3, #3
 80043e2:	d836      	bhi.n	8004452 <BSP_TS_GetState+0x342>
 80043e4:	a201      	add	r2, pc, #4	@ (adr r2, 80043ec <BSP_TS_GetState+0x2dc>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	080043fd 	.word	0x080043fd
 80043f0:	08004429 	.word	0x08004429
 80043f4:	08004437 	.word	0x08004437
 80043f8:	08004445 	.word	0x08004445
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004400:	4413      	add	r3, r2
 8004402:	331b      	adds	r3, #27
 8004404:	2201      	movs	r2, #1
 8004406:	701a      	strb	r2, [r3, #0]
          break;
 8004408:	e027      	b.n	800445a <BSP_TS_GetState+0x34a>
 800440a:	bf00      	nop
 800440c:	200099ec 	.word	0x200099ec
 8004410:	200099f5 	.word	0x200099f5
 8004414:	200099f4 	.word	0x200099f4
 8004418:	200099f8 	.word	0x200099f8
 800441c:	20009a0c 	.word	0x20009a0c
 8004420:	200099f0 	.word	0x200099f0
 8004424:	200099f2 	.word	0x200099f2
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800442c:	4413      	add	r3, r2
 800442e:	331b      	adds	r3, #27
 8004430:	2202      	movs	r2, #2
 8004432:	701a      	strb	r2, [r3, #0]
          break;
 8004434:	e011      	b.n	800445a <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800443a:	4413      	add	r3, r2
 800443c:	331b      	adds	r3, #27
 800443e:	2203      	movs	r2, #3
 8004440:	701a      	strb	r2, [r3, #0]
          break;
 8004442:	e00a      	b.n	800445a <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004448:	4413      	add	r3, r2
 800444a:	331b      	adds	r3, #27
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
          break;
 8004450:	e003      	b.n	800445a <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8004458:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 800445a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800445c:	3301      	adds	r3, #1
 800445e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004468:	4293      	cmp	r3, r2
 800446a:	f4ff ae71 	bcc.w	8004150 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f80a 	bl	8004488 <BSP_TS_Get_GestureId>
 8004474:	4603      	mov	r3, r0
 8004476:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 800447a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 800447e:	4618      	mov	r0, r3
 8004480:	3754      	adds	r7, #84	@ 0x54
 8004482:	46bd      	mov	sp, r7
 8004484:	bd90      	pop	{r4, r7, pc}
 8004486:	bf00      	nop

08004488 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8004490:	2300      	movs	r3, #0
 8004492:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8004498:	4b3b      	ldr	r3, [pc, #236]	@ (8004588 <BSP_TS_Get_GestureId+0x100>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	461a      	mov	r2, r3
 800449e:	f107 0308 	add.w	r3, r7, #8
 80044a2:	4619      	mov	r1, r3
 80044a4:	4610      	mov	r0, r2
 80044a6:	f7fd f8d2 	bl	800164e <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	2b49      	cmp	r3, #73	@ 0x49
 80044ae:	d05e      	beq.n	800456e <BSP_TS_Get_GestureId+0xe6>
 80044b0:	2b49      	cmp	r3, #73	@ 0x49
 80044b2:	d860      	bhi.n	8004576 <BSP_TS_Get_GestureId+0xee>
 80044b4:	2b1c      	cmp	r3, #28
 80044b6:	d83f      	bhi.n	8004538 <BSP_TS_Get_GestureId+0xb0>
 80044b8:	2b1c      	cmp	r3, #28
 80044ba:	d85c      	bhi.n	8004576 <BSP_TS_Get_GestureId+0xee>
 80044bc:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <BSP_TS_Get_GestureId+0x3c>)
 80044be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c2:	bf00      	nop
 80044c4:	0800453f 	.word	0x0800453f
 80044c8:	08004577 	.word	0x08004577
 80044cc:	08004577 	.word	0x08004577
 80044d0:	08004577 	.word	0x08004577
 80044d4:	08004577 	.word	0x08004577
 80044d8:	08004577 	.word	0x08004577
 80044dc:	08004577 	.word	0x08004577
 80044e0:	08004577 	.word	0x08004577
 80044e4:	08004577 	.word	0x08004577
 80044e8:	08004577 	.word	0x08004577
 80044ec:	08004577 	.word	0x08004577
 80044f0:	08004577 	.word	0x08004577
 80044f4:	08004577 	.word	0x08004577
 80044f8:	08004577 	.word	0x08004577
 80044fc:	08004577 	.word	0x08004577
 8004500:	08004577 	.word	0x08004577
 8004504:	08004547 	.word	0x08004547
 8004508:	08004577 	.word	0x08004577
 800450c:	08004577 	.word	0x08004577
 8004510:	08004577 	.word	0x08004577
 8004514:	0800454f 	.word	0x0800454f
 8004518:	08004577 	.word	0x08004577
 800451c:	08004577 	.word	0x08004577
 8004520:	08004577 	.word	0x08004577
 8004524:	08004557 	.word	0x08004557
 8004528:	08004577 	.word	0x08004577
 800452c:	08004577 	.word	0x08004577
 8004530:	08004577 	.word	0x08004577
 8004534:	0800455f 	.word	0x0800455f
 8004538:	2b40      	cmp	r3, #64	@ 0x40
 800453a:	d014      	beq.n	8004566 <BSP_TS_Get_GestureId+0xde>
 800453c:	e01b      	b.n	8004576 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004544:	e01a      	b.n	800457c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800454c:	e016      	b.n	800457c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004554:	e012      	b.n	800457c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2203      	movs	r2, #3
 800455a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800455c:	e00e      	b.n	800457c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2204      	movs	r2, #4
 8004562:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004564:	e00a      	b.n	800457c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2205      	movs	r2, #5
 800456a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 800456c:	e006      	b.n	800457c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2206      	movs	r2, #6
 8004572:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8004574:	e002      	b.n	800457c <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
      break;
 800457a:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 800457c:	7bfb      	ldrb	r3, [r7, #15]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	200099f5 	.word	0x200099f5

0800458c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b082      	sub	sp, #8
 8004590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004592:	4b11      	ldr	r3, [pc, #68]	@ (80045d8 <HAL_MspInit+0x4c>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004596:	4a10      	ldr	r2, [pc, #64]	@ (80045d8 <HAL_MspInit+0x4c>)
 8004598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800459c:	6413      	str	r3, [r2, #64]	@ 0x40
 800459e:	4b0e      	ldr	r3, [pc, #56]	@ (80045d8 <HAL_MspInit+0x4c>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045a6:	607b      	str	r3, [r7, #4]
 80045a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045aa:	4b0b      	ldr	r3, [pc, #44]	@ (80045d8 <HAL_MspInit+0x4c>)
 80045ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ae:	4a0a      	ldr	r2, [pc, #40]	@ (80045d8 <HAL_MspInit+0x4c>)
 80045b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80045b6:	4b08      	ldr	r3, [pc, #32]	@ (80045d8 <HAL_MspInit+0x4c>)
 80045b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80045c2:	2200      	movs	r2, #0
 80045c4:	210f      	movs	r1, #15
 80045c6:	f06f 0001 	mvn.w	r0, #1
 80045ca:	f001 faeb 	bl	8005ba4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	40023800 	.word	0x40023800

080045dc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b08e      	sub	sp, #56	@ 0x38
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80045ec:	4b33      	ldr	r3, [pc, #204]	@ (80046bc <HAL_InitTick+0xe0>)
 80045ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f0:	4a32      	ldr	r2, [pc, #200]	@ (80046bc <HAL_InitTick+0xe0>)
 80045f2:	f043 0310 	orr.w	r3, r3, #16
 80045f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80045f8:	4b30      	ldr	r3, [pc, #192]	@ (80046bc <HAL_InitTick+0xe0>)
 80045fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004604:	f107 0210 	add.w	r2, r7, #16
 8004608:	f107 0314 	add.w	r3, r7, #20
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f004 fb3a 	bl	8008c88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004614:	6a3b      	ldr	r3, [r7, #32]
 8004616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800461e:	f004 fb0b 	bl	8008c38 <HAL_RCC_GetPCLK1Freq>
 8004622:	6378      	str	r0, [r7, #52]	@ 0x34
 8004624:	e004      	b.n	8004630 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004626:	f004 fb07 	bl	8008c38 <HAL_RCC_GetPCLK1Freq>
 800462a:	4603      	mov	r3, r0
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004632:	4a23      	ldr	r2, [pc, #140]	@ (80046c0 <HAL_InitTick+0xe4>)
 8004634:	fba2 2303 	umull	r2, r3, r2, r3
 8004638:	0c9b      	lsrs	r3, r3, #18
 800463a:	3b01      	subs	r3, #1
 800463c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800463e:	4b21      	ldr	r3, [pc, #132]	@ (80046c4 <HAL_InitTick+0xe8>)
 8004640:	4a21      	ldr	r2, [pc, #132]	@ (80046c8 <HAL_InitTick+0xec>)
 8004642:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004644:	4b1f      	ldr	r3, [pc, #124]	@ (80046c4 <HAL_InitTick+0xe8>)
 8004646:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800464a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800464c:	4a1d      	ldr	r2, [pc, #116]	@ (80046c4 <HAL_InitTick+0xe8>)
 800464e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004650:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004652:	4b1c      	ldr	r3, [pc, #112]	@ (80046c4 <HAL_InitTick+0xe8>)
 8004654:	2200      	movs	r2, #0
 8004656:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004658:	4b1a      	ldr	r3, [pc, #104]	@ (80046c4 <HAL_InitTick+0xe8>)
 800465a:	2200      	movs	r2, #0
 800465c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800465e:	4b19      	ldr	r3, [pc, #100]	@ (80046c4 <HAL_InitTick+0xe8>)
 8004660:	2200      	movs	r2, #0
 8004662:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004664:	4817      	ldr	r0, [pc, #92]	@ (80046c4 <HAL_InitTick+0xe8>)
 8004666:	f006 fd6b 	bl	800b140 <HAL_TIM_Base_Init>
 800466a:	4603      	mov	r3, r0
 800466c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8004670:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004674:	2b00      	cmp	r3, #0
 8004676:	d11b      	bne.n	80046b0 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8004678:	4812      	ldr	r0, [pc, #72]	@ (80046c4 <HAL_InitTick+0xe8>)
 800467a:	f006 fdb9 	bl	800b1f0 <HAL_TIM_Base_Start_IT>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8004684:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004688:	2b00      	cmp	r3, #0
 800468a:	d111      	bne.n	80046b0 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800468c:	2036      	movs	r0, #54	@ 0x36
 800468e:	f001 faa5 	bl	8005bdc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b0f      	cmp	r3, #15
 8004696:	d808      	bhi.n	80046aa <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8004698:	2200      	movs	r2, #0
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	2036      	movs	r0, #54	@ 0x36
 800469e:	f001 fa81 	bl	8005ba4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80046a2:	4a0a      	ldr	r2, [pc, #40]	@ (80046cc <HAL_InitTick+0xf0>)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	e002      	b.n	80046b0 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80046b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	3738      	adds	r7, #56	@ 0x38
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	40023800 	.word	0x40023800
 80046c0:	431bde83 	.word	0x431bde83
 80046c4:	20009a20 	.word	0x20009a20
 80046c8:	40001000 	.word	0x40001000
 80046cc:	20000030 	.word	0x20000030

080046d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80046d4:	bf00      	nop
 80046d6:	e7fd      	b.n	80046d4 <NMI_Handler+0x4>

080046d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046dc:	bf00      	nop
 80046de:	e7fd      	b.n	80046dc <HardFault_Handler+0x4>

080046e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046e4:	bf00      	nop
 80046e6:	e7fd      	b.n	80046e4 <MemManage_Handler+0x4>

080046e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046ec:	bf00      	nop
 80046ee:	e7fd      	b.n	80046ec <BusFault_Handler+0x4>

080046f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046f4:	bf00      	nop
 80046f6:	e7fd      	b.n	80046f4 <UsageFault_Handler+0x4>

080046f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80046fc:	bf00      	nop
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
	...

08004708 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	HAL_GPIO_TogglePin(LED11_GPIO_Port, LED11_Pin);
 800470c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004710:	4804      	ldr	r0, [pc, #16]	@ (8004724 <EXTI15_10_IRQHandler+0x1c>)
 8004712:	f002 fbea 	bl	8006eea <HAL_GPIO_TogglePin>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_INT_Pin);
 8004716:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800471a:	f002 fc01 	bl	8006f20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800471e:	bf00      	nop
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	40021c00 	.word	0x40021c00

08004728 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 800472c:	4802      	ldr	r0, [pc, #8]	@ (8004738 <SDMMC1_IRQHandler+0x10>)
 800472e:	f005 fd23 	bl	800a178 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	200095a8 	.word	0x200095a8

0800473c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004740:	4802      	ldr	r0, [pc, #8]	@ (800474c <TIM6_DAC_IRQHandler+0x10>)
 8004742:	f006 fe2e 	bl	800b3a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20009a20 	.word	0x20009a20

08004750 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8004754:	4802      	ldr	r0, [pc, #8]	@ (8004760 <DMA2_Stream3_IRQHandler+0x10>)
 8004756:	f001 fbdd 	bl	8005f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800475a:	bf00      	nop
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	2000962c 	.word	0x2000962c

08004764 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004768:	4802      	ldr	r0, [pc, #8]	@ (8004774 <DMA2_Stream6_IRQHandler+0x10>)
 800476a:	f001 fbd3 	bl	8005f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800476e:	bf00      	nop
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	2000968c 	.word	0x2000968c

08004778 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800477c:	4802      	ldr	r0, [pc, #8]	@ (8004788 <LTDC_IRQHandler+0x10>)
 800477e:	f003 faf1 	bl	8007d64 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	200094e0 	.word	0x200094e0

0800478c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004794:	4a14      	ldr	r2, [pc, #80]	@ (80047e8 <_sbrk+0x5c>)
 8004796:	4b15      	ldr	r3, [pc, #84]	@ (80047ec <_sbrk+0x60>)
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80047a0:	4b13      	ldr	r3, [pc, #76]	@ (80047f0 <_sbrk+0x64>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d102      	bne.n	80047ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80047a8:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <_sbrk+0x64>)
 80047aa:	4a12      	ldr	r2, [pc, #72]	@ (80047f4 <_sbrk+0x68>)
 80047ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80047ae:	4b10      	ldr	r3, [pc, #64]	@ (80047f0 <_sbrk+0x64>)
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4413      	add	r3, r2
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d207      	bcs.n	80047cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80047bc:	f00e fb20 	bl	8012e00 <__errno>
 80047c0:	4603      	mov	r3, r0
 80047c2:	220c      	movs	r2, #12
 80047c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80047c6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ca:	e009      	b.n	80047e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047cc:	4b08      	ldr	r3, [pc, #32]	@ (80047f0 <_sbrk+0x64>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047d2:	4b07      	ldr	r3, [pc, #28]	@ (80047f0 <_sbrk+0x64>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4413      	add	r3, r2
 80047da:	4a05      	ldr	r2, [pc, #20]	@ (80047f0 <_sbrk+0x64>)
 80047dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047de:	68fb      	ldr	r3, [r7, #12]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3718      	adds	r7, #24
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}
 80047e8:	20050000 	.word	0x20050000
 80047ec:	00000400 	.word	0x00000400
 80047f0:	20009a6c 	.word	0x20009a6c
 80047f4:	20012068 	.word	0x20012068

080047f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047fc:	4b08      	ldr	r3, [pc, #32]	@ (8004820 <SystemInit+0x28>)
 80047fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004802:	4a07      	ldr	r2, [pc, #28]	@ (8004820 <SystemInit+0x28>)
 8004804:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004808:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800480c:	4b04      	ldr	r3, [pc, #16]	@ (8004820 <SystemInit+0x28>)
 800480e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004812:	609a      	str	r2, [r3, #8]
#endif
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	e000ed00 	.word	0xe000ed00

08004824 <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b088      	sub	sp, #32
 8004828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800482a:	f107 0310 	add.w	r3, r7, #16
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	605a      	str	r2, [r3, #4]
 8004834:	609a      	str	r2, [r3, #8]
 8004836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004838:	1d3b      	adds	r3, r7, #4
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
 800483e:	605a      	str	r2, [r3, #4]
 8004840:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004842:	4b20      	ldr	r3, [pc, #128]	@ (80048c4 <MX_TIM1_Init+0xa0>)
 8004844:	4a20      	ldr	r2, [pc, #128]	@ (80048c8 <MX_TIM1_Init+0xa4>)
 8004846:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004848:	4b1e      	ldr	r3, [pc, #120]	@ (80048c4 <MX_TIM1_Init+0xa0>)
 800484a:	2200      	movs	r2, #0
 800484c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800484e:	4b1d      	ldr	r3, [pc, #116]	@ (80048c4 <MX_TIM1_Init+0xa0>)
 8004850:	2200      	movs	r2, #0
 8004852:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8004854:	4b1b      	ldr	r3, [pc, #108]	@ (80048c4 <MX_TIM1_Init+0xa0>)
 8004856:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800485a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800485c:	4b19      	ldr	r3, [pc, #100]	@ (80048c4 <MX_TIM1_Init+0xa0>)
 800485e:	2200      	movs	r2, #0
 8004860:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004862:	4b18      	ldr	r3, [pc, #96]	@ (80048c4 <MX_TIM1_Init+0xa0>)
 8004864:	2200      	movs	r2, #0
 8004866:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004868:	4b16      	ldr	r3, [pc, #88]	@ (80048c4 <MX_TIM1_Init+0xa0>)
 800486a:	2200      	movs	r2, #0
 800486c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800486e:	4815      	ldr	r0, [pc, #84]	@ (80048c4 <MX_TIM1_Init+0xa0>)
 8004870:	f006 fc66 	bl	800b140 <HAL_TIM_Base_Init>
 8004874:	4603      	mov	r3, r0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d001      	beq.n	800487e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800487a:	f7fd fe17 	bl	80024ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800487e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004882:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004884:	f107 0310 	add.w	r3, r7, #16
 8004888:	4619      	mov	r1, r3
 800488a:	480e      	ldr	r0, [pc, #56]	@ (80048c4 <MX_TIM1_Init+0xa0>)
 800488c:	f006 ffbc 	bl	800b808 <HAL_TIM_ConfigClockSource>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8004896:	f7fd fe09 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800489a:	2300      	movs	r3, #0
 800489c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800489e:	2300      	movs	r3, #0
 80048a0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80048a6:	1d3b      	adds	r3, r7, #4
 80048a8:	4619      	mov	r1, r3
 80048aa:	4806      	ldr	r0, [pc, #24]	@ (80048c4 <MX_TIM1_Init+0xa0>)
 80048ac:	f007 fd0c 	bl	800c2c8 <HAL_TIMEx_MasterConfigSynchronization>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80048b6:	f7fd fdf9 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80048ba:	bf00      	nop
 80048bc:	3720      	adds	r7, #32
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	20009a70 	.word	0x20009a70
 80048c8:	40010000 	.word	0x40010000

080048cc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048d2:	f107 0310 	add.w	r3, r7, #16
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	605a      	str	r2, [r3, #4]
 80048dc:	609a      	str	r2, [r3, #8]
 80048de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048e0:	1d3b      	adds	r3, r7, #4
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80048ea:	4b1e      	ldr	r3, [pc, #120]	@ (8004964 <MX_TIM2_Init+0x98>)
 80048ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80048f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80048f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004964 <MX_TIM2_Init+0x98>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004964 <MX_TIM2_Init+0x98>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80048fe:	4b19      	ldr	r3, [pc, #100]	@ (8004964 <MX_TIM2_Init+0x98>)
 8004900:	f04f 32ff 	mov.w	r2, #4294967295
 8004904:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004906:	4b17      	ldr	r3, [pc, #92]	@ (8004964 <MX_TIM2_Init+0x98>)
 8004908:	2200      	movs	r2, #0
 800490a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800490c:	4b15      	ldr	r3, [pc, #84]	@ (8004964 <MX_TIM2_Init+0x98>)
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004912:	4814      	ldr	r0, [pc, #80]	@ (8004964 <MX_TIM2_Init+0x98>)
 8004914:	f006 fc14 	bl	800b140 <HAL_TIM_Base_Init>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800491e:	f7fd fdc5 	bl	80024ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004922:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004926:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004928:	f107 0310 	add.w	r3, r7, #16
 800492c:	4619      	mov	r1, r3
 800492e:	480d      	ldr	r0, [pc, #52]	@ (8004964 <MX_TIM2_Init+0x98>)
 8004930:	f006 ff6a 	bl	800b808 <HAL_TIM_ConfigClockSource>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800493a:	f7fd fdb7 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800493e:	2300      	movs	r3, #0
 8004940:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	4619      	mov	r1, r3
 800494a:	4806      	ldr	r0, [pc, #24]	@ (8004964 <MX_TIM2_Init+0x98>)
 800494c:	f007 fcbc 	bl	800c2c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004956:	f7fd fda9 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800495a:	bf00      	nop
 800495c:	3720      	adds	r7, #32
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	20009abc 	.word	0x20009abc

08004968 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b094      	sub	sp, #80	@ 0x50
 800496c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800496e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	605a      	str	r2, [r3, #4]
 8004978:	609a      	str	r2, [r3, #8]
 800497a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800497c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	605a      	str	r2, [r3, #4]
 8004986:	609a      	str	r2, [r3, #8]
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800498c:	f107 0320 	add.w	r3, r7, #32
 8004990:	2200      	movs	r2, #0
 8004992:	601a      	str	r2, [r3, #0]
 8004994:	605a      	str	r2, [r3, #4]
 8004996:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004998:	1d3b      	adds	r3, r7, #4
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	605a      	str	r2, [r3, #4]
 80049a0:	609a      	str	r2, [r3, #8]
 80049a2:	60da      	str	r2, [r3, #12]
 80049a4:	611a      	str	r2, [r3, #16]
 80049a6:	615a      	str	r2, [r3, #20]
 80049a8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80049aa:	4b34      	ldr	r3, [pc, #208]	@ (8004a7c <MX_TIM3_Init+0x114>)
 80049ac:	4a34      	ldr	r2, [pc, #208]	@ (8004a80 <MX_TIM3_Init+0x118>)
 80049ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80049b0:	4b32      	ldr	r3, [pc, #200]	@ (8004a7c <MX_TIM3_Init+0x114>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049b6:	4b31      	ldr	r3, [pc, #196]	@ (8004a7c <MX_TIM3_Init+0x114>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80049bc:	4b2f      	ldr	r3, [pc, #188]	@ (8004a7c <MX_TIM3_Init+0x114>)
 80049be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80049c4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a7c <MX_TIM3_Init+0x114>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80049ca:	4b2c      	ldr	r3, [pc, #176]	@ (8004a7c <MX_TIM3_Init+0x114>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80049d0:	482a      	ldr	r0, [pc, #168]	@ (8004a7c <MX_TIM3_Init+0x114>)
 80049d2:	f006 fbb5 	bl	800b140 <HAL_TIM_Base_Init>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80049dc:	f7fd fd66 	bl	80024ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80049e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80049e4:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80049e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80049ea:	4619      	mov	r1, r3
 80049ec:	4823      	ldr	r0, [pc, #140]	@ (8004a7c <MX_TIM3_Init+0x114>)
 80049ee:	f006 ff0b 	bl	800b808 <HAL_TIM_ConfigClockSource>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80049f8:	f7fd fd58 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80049fc:	481f      	ldr	r0, [pc, #124]	@ (8004a7c <MX_TIM3_Init+0x114>)
 80049fe:	f006 fc6f 	bl	800b2e0 <HAL_TIM_PWM_Init>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8004a08:	f7fd fd50 	bl	80024ac <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8004a10:	2300      	movs	r3, #0
 8004a12:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8004a14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4818      	ldr	r0, [pc, #96]	@ (8004a7c <MX_TIM3_Init+0x114>)
 8004a1c:	f006 ffbe 	bl	800b99c <HAL_TIM_SlaveConfigSynchro>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8004a26:	f7fd fd41 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004a32:	f107 0320 	add.w	r3, r7, #32
 8004a36:	4619      	mov	r1, r3
 8004a38:	4810      	ldr	r0, [pc, #64]	@ (8004a7c <MX_TIM3_Init+0x114>)
 8004a3a:	f007 fc45 	bl	800c2c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8004a44:	f7fd fd32 	bl	80024ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004a48:	2360      	movs	r3, #96	@ 0x60
 8004a4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004a50:	2300      	movs	r3, #0
 8004a52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004a58:	1d3b      	adds	r3, r7, #4
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4807      	ldr	r0, [pc, #28]	@ (8004a7c <MX_TIM3_Init+0x114>)
 8004a60:	f006 fdbe 	bl	800b5e0 <HAL_TIM_PWM_ConfigChannel>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 8004a6a:	f7fd fd1f 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8004a6e:	4803      	ldr	r0, [pc, #12]	@ (8004a7c <MX_TIM3_Init+0x114>)
 8004a70:	f000 f96e 	bl	8004d50 <HAL_TIM_MspPostInit>

}
 8004a74:	bf00      	nop
 8004a76:	3750      	adds	r7, #80	@ 0x50
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	20009b08 	.word	0x20009b08
 8004a80:	40000400 	.word	0x40000400

08004a84 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a8a:	f107 0310 	add.w	r3, r7, #16
 8004a8e:	2200      	movs	r2, #0
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	605a      	str	r2, [r3, #4]
 8004a94:	609a      	str	r2, [r3, #8]
 8004a96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004a98:	1d3b      	adds	r3, r7, #4
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8004aa2:	4b1d      	ldr	r3, [pc, #116]	@ (8004b18 <MX_TIM5_Init+0x94>)
 8004aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8004b1c <MX_TIM5_Init+0x98>)
 8004aa6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8004aa8:	4b1b      	ldr	r3, [pc, #108]	@ (8004b18 <MX_TIM5_Init+0x94>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004aae:	4b1a      	ldr	r3, [pc, #104]	@ (8004b18 <MX_TIM5_Init+0x94>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8004ab4:	4b18      	ldr	r3, [pc, #96]	@ (8004b18 <MX_TIM5_Init+0x94>)
 8004ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8004aba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004abc:	4b16      	ldr	r3, [pc, #88]	@ (8004b18 <MX_TIM5_Init+0x94>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ac2:	4b15      	ldr	r3, [pc, #84]	@ (8004b18 <MX_TIM5_Init+0x94>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004ac8:	4813      	ldr	r0, [pc, #76]	@ (8004b18 <MX_TIM5_Init+0x94>)
 8004aca:	f006 fb39 	bl	800b140 <HAL_TIM_Base_Init>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8004ad4:	f7fd fcea 	bl	80024ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004adc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004ade:	f107 0310 	add.w	r3, r7, #16
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	480c      	ldr	r0, [pc, #48]	@ (8004b18 <MX_TIM5_Init+0x94>)
 8004ae6:	f006 fe8f 	bl	800b808 <HAL_TIM_ConfigClockSource>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004af0:	f7fd fcdc 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004af4:	2300      	movs	r3, #0
 8004af6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004afc:	1d3b      	adds	r3, r7, #4
 8004afe:	4619      	mov	r1, r3
 8004b00:	4805      	ldr	r0, [pc, #20]	@ (8004b18 <MX_TIM5_Init+0x94>)
 8004b02:	f007 fbe1 	bl	800c2c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004b0c:	f7fd fcce 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004b10:	bf00      	nop
 8004b12:	3720      	adds	r7, #32
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	20009b54 	.word	0x20009b54
 8004b1c:	40000c00 	.word	0x40000c00

08004b20 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b09a      	sub	sp, #104	@ 0x68
 8004b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004b26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
 8004b2e:	605a      	str	r2, [r3, #4]
 8004b30:	609a      	str	r2, [r3, #8]
 8004b32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004b34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004b40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	605a      	str	r2, [r3, #4]
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	60da      	str	r2, [r3, #12]
 8004b4e:	611a      	str	r2, [r3, #16]
 8004b50:	615a      	str	r2, [r3, #20]
 8004b52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004b54:	1d3b      	adds	r3, r7, #4
 8004b56:	222c      	movs	r2, #44	@ 0x2c
 8004b58:	2100      	movs	r1, #0
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f00e f8f2 	bl	8012d44 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004b60:	4b42      	ldr	r3, [pc, #264]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004b62:	4a43      	ldr	r2, [pc, #268]	@ (8004c70 <MX_TIM8_Init+0x150>)
 8004b64:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8004b66:	4b41      	ldr	r3, [pc, #260]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b6c:	4b3f      	ldr	r3, [pc, #252]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004b6e:	2200      	movs	r2, #0
 8004b70:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004b72:	4b3e      	ldr	r3, [pc, #248]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004b74:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004b78:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b7a:	4b3c      	ldr	r3, [pc, #240]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004b80:	4b3a      	ldr	r3, [pc, #232]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004b86:	4b39      	ldr	r3, [pc, #228]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8004b8c:	4837      	ldr	r0, [pc, #220]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004b8e:	f006 fad7 	bl	800b140 <HAL_TIM_Base_Init>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d001      	beq.n	8004b9c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8004b98:	f7fd fc88 	bl	80024ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8004ba2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4830      	ldr	r0, [pc, #192]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004baa:	f006 fe2d 	bl	800b808 <HAL_TIM_ConfigClockSource>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8004bb4:	f7fd fc7a 	bl	80024ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004bb8:	482c      	ldr	r0, [pc, #176]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004bba:	f006 fb91 	bl	800b2e0 <HAL_TIM_PWM_Init>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8004bc4:	f7fd fc72 	bl	80024ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8004bd4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4824      	ldr	r0, [pc, #144]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004bdc:	f007 fb74 	bl	800c2c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d001      	beq.n	8004bea <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8004be6:	f7fd fc61 	bl	80024ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bea:	2360      	movs	r3, #96	@ 0x60
 8004bec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004c02:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c06:	220c      	movs	r2, #12
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4818      	ldr	r0, [pc, #96]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004c0c:	f006 fce8 	bl	800b5e0 <HAL_TIM_PWM_ConfigChannel>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8004c16:	f7fd fc49 	bl	80024ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004c3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c40:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004c42:	2300      	movs	r3, #0
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004c4a:	1d3b      	adds	r3, r7, #4
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	4807      	ldr	r0, [pc, #28]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004c50:	f007 fbc8 	bl	800c3e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8004c5a:	f7fd fc27 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004c5e:	4803      	ldr	r0, [pc, #12]	@ (8004c6c <MX_TIM8_Init+0x14c>)
 8004c60:	f000 f876 	bl	8004d50 <HAL_TIM_MspPostInit>

}
 8004c64:	bf00      	nop
 8004c66:	3768      	adds	r7, #104	@ 0x68
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	20009ba0 	.word	0x20009ba0
 8004c70:	40010400 	.word	0x40010400

08004c74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b089      	sub	sp, #36	@ 0x24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a2e      	ldr	r2, [pc, #184]	@ (8004d3c <HAL_TIM_Base_MspInit+0xc8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10c      	bne.n	8004ca0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c86:	4b2e      	ldr	r3, [pc, #184]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004c88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c8a:	4a2d      	ldr	r2, [pc, #180]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004c8c:	f043 0301 	orr.w	r3, r3, #1
 8004c90:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c92:	4b2b      	ldr	r3, [pc, #172]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8004c9e:	e046      	b.n	8004d2e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca8:	d10c      	bne.n	8004cc4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004caa:	4b25      	ldr	r3, [pc, #148]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	4a24      	ldr	r2, [pc, #144]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cb6:	4b22      	ldr	r3, [pc, #136]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	69bb      	ldr	r3, [r7, #24]
}
 8004cc2:	e034      	b.n	8004d2e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM3)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d44 <HAL_TIM_Base_MspInit+0xd0>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004cce:	4b1c      	ldr	r3, [pc, #112]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd2:	4a1b      	ldr	r2, [pc, #108]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004cd4:	f043 0302 	orr.w	r3, r3, #2
 8004cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cda:	4b19      	ldr	r3, [pc, #100]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	617b      	str	r3, [r7, #20]
 8004ce4:	697b      	ldr	r3, [r7, #20]
}
 8004ce6:	e022      	b.n	8004d2e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM5)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a16      	ldr	r2, [pc, #88]	@ (8004d48 <HAL_TIM_Base_MspInit+0xd4>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d10c      	bne.n	8004d0c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004cf2:	4b13      	ldr	r3, [pc, #76]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf6:	4a12      	ldr	r2, [pc, #72]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004cf8:	f043 0308 	orr.w	r3, r3, #8
 8004cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cfe:	4b10      	ldr	r3, [pc, #64]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	693b      	ldr	r3, [r7, #16]
}
 8004d0a:	e010      	b.n	8004d2e <HAL_TIM_Base_MspInit+0xba>
  else if(tim_baseHandle->Instance==TIM8)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a0e      	ldr	r2, [pc, #56]	@ (8004d4c <HAL_TIM_Base_MspInit+0xd8>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d10b      	bne.n	8004d2e <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004d16:	4b0a      	ldr	r3, [pc, #40]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1a:	4a09      	ldr	r2, [pc, #36]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004d1c:	f043 0302 	orr.w	r3, r3, #2
 8004d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d22:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <HAL_TIM_Base_MspInit+0xcc>)
 8004d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
}
 8004d2e:	bf00      	nop
 8004d30:	3724      	adds	r7, #36	@ 0x24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	40010000 	.word	0x40010000
 8004d40:	40023800 	.word	0x40023800
 8004d44:	40000400 	.word	0x40000400
 8004d48:	40000c00 	.word	0x40000c00
 8004d4c:	40010400 	.word	0x40010400

08004d50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b08a      	sub	sp, #40	@ 0x28
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d58:	f107 0314 	add.w	r3, r7, #20
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	609a      	str	r2, [r3, #8]
 8004d64:	60da      	str	r2, [r3, #12]
 8004d66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a22      	ldr	r2, [pc, #136]	@ (8004df8 <HAL_TIM_MspPostInit+0xa8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d11c      	bne.n	8004dac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d72:	4b22      	ldr	r3, [pc, #136]	@ (8004dfc <HAL_TIM_MspPostInit+0xac>)
 8004d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d76:	4a21      	ldr	r2, [pc, #132]	@ (8004dfc <HAL_TIM_MspPostInit+0xac>)
 8004d78:	f043 0302 	orr.w	r3, r3, #2
 8004d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8004dfc <HAL_TIM_MspPostInit+0xac>)
 8004d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	613b      	str	r3, [r7, #16]
 8004d88:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004d8a:	2310      	movs	r3, #16
 8004d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d8e:	2302      	movs	r3, #2
 8004d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d96:	2300      	movs	r3, #0
 8004d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d9e:	f107 0314 	add.w	r3, r7, #20
 8004da2:	4619      	mov	r1, r3
 8004da4:	4816      	ldr	r0, [pc, #88]	@ (8004e00 <HAL_TIM_MspPostInit+0xb0>)
 8004da6:	f001 fdb7 	bl	8006918 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004daa:	e020      	b.n	8004dee <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM8)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a14      	ldr	r2, [pc, #80]	@ (8004e04 <HAL_TIM_MspPostInit+0xb4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d11b      	bne.n	8004dee <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004db6:	4b11      	ldr	r3, [pc, #68]	@ (8004dfc <HAL_TIM_MspPostInit+0xac>)
 8004db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dba:	4a10      	ldr	r2, [pc, #64]	@ (8004dfc <HAL_TIM_MspPostInit+0xac>)
 8004dbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004dfc <HAL_TIM_MspPostInit+0xac>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dca:	60fb      	str	r3, [r7, #12]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004dce:	2304      	movs	r3, #4
 8004dd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dd2:	2302      	movs	r3, #2
 8004dd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004dde:	2303      	movs	r3, #3
 8004de0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004de2:	f107 0314 	add.w	r3, r7, #20
 8004de6:	4619      	mov	r1, r3
 8004de8:	4807      	ldr	r0, [pc, #28]	@ (8004e08 <HAL_TIM_MspPostInit+0xb8>)
 8004dea:	f001 fd95 	bl	8006918 <HAL_GPIO_Init>
}
 8004dee:	bf00      	nop
 8004df0:	3728      	adds	r7, #40	@ 0x28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40000400 	.word	0x40000400
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	40020400 	.word	0x40020400
 8004e04:	40010400 	.word	0x40010400
 8004e08:	40022000 	.word	0x40022000

08004e0c <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004e10:	4b14      	ldr	r3, [pc, #80]	@ (8004e64 <MX_UART7_Init+0x58>)
 8004e12:	4a15      	ldr	r2, [pc, #84]	@ (8004e68 <MX_UART7_Init+0x5c>)
 8004e14:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004e16:	4b13      	ldr	r3, [pc, #76]	@ (8004e64 <MX_UART7_Init+0x58>)
 8004e18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e1c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004e1e:	4b11      	ldr	r3, [pc, #68]	@ (8004e64 <MX_UART7_Init+0x58>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004e24:	4b0f      	ldr	r3, [pc, #60]	@ (8004e64 <MX_UART7_Init+0x58>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8004e64 <MX_UART7_Init+0x58>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004e30:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <MX_UART7_Init+0x58>)
 8004e32:	220c      	movs	r2, #12
 8004e34:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e36:	4b0b      	ldr	r3, [pc, #44]	@ (8004e64 <MX_UART7_Init+0x58>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e3c:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <MX_UART7_Init+0x58>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e42:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <MX_UART7_Init+0x58>)
 8004e44:	2200      	movs	r2, #0
 8004e46:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e48:	4b06      	ldr	r3, [pc, #24]	@ (8004e64 <MX_UART7_Init+0x58>)
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004e4e:	4805      	ldr	r0, [pc, #20]	@ (8004e64 <MX_UART7_Init+0x58>)
 8004e50:	f007 fb64 	bl	800c51c <HAL_UART_Init>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d001      	beq.n	8004e5e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8004e5a:	f7fd fb27 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	20009bec 	.word	0x20009bec
 8004e68:	40007800 	.word	0x40007800

08004e6c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004e70:	4b14      	ldr	r3, [pc, #80]	@ (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e72:	4a15      	ldr	r2, [pc, #84]	@ (8004ec8 <MX_USART1_UART_Init+0x5c>)
 8004e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004e76:	4b13      	ldr	r3, [pc, #76]	@ (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e7e:	4b11      	ldr	r3, [pc, #68]	@ (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004e84:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e86:	2200      	movs	r2, #0
 8004e88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004e8a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004e90:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e92:	220c      	movs	r2, #12
 8004e94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e96:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e9c:	4b09      	ldr	r3, [pc, #36]	@ (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ea2:	4b08      	ldr	r3, [pc, #32]	@ (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ea8:	4b06      	ldr	r3, [pc, #24]	@ (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004eae:	4805      	ldr	r0, [pc, #20]	@ (8004ec4 <MX_USART1_UART_Init+0x58>)
 8004eb0:	f007 fb34 	bl	800c51c <HAL_UART_Init>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004eba:	f7fd faf7 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20009c74 	.word	0x20009c74
 8004ec8:	40011000 	.word	0x40011000

08004ecc <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8004ed0:	4b14      	ldr	r3, [pc, #80]	@ (8004f24 <MX_USART6_UART_Init+0x58>)
 8004ed2:	4a15      	ldr	r2, [pc, #84]	@ (8004f28 <MX_USART6_UART_Init+0x5c>)
 8004ed4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004ed6:	4b13      	ldr	r3, [pc, #76]	@ (8004f24 <MX_USART6_UART_Init+0x58>)
 8004ed8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004edc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004ede:	4b11      	ldr	r3, [pc, #68]	@ (8004f24 <MX_USART6_UART_Init+0x58>)
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004ee4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f24 <MX_USART6_UART_Init+0x58>)
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004eea:	4b0e      	ldr	r3, [pc, #56]	@ (8004f24 <MX_USART6_UART_Init+0x58>)
 8004eec:	2200      	movs	r2, #0
 8004eee:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004ef0:	4b0c      	ldr	r3, [pc, #48]	@ (8004f24 <MX_USART6_UART_Init+0x58>)
 8004ef2:	220c      	movs	r2, #12
 8004ef4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8004f24 <MX_USART6_UART_Init+0x58>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004efc:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <MX_USART6_UART_Init+0x58>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004f02:	4b08      	ldr	r3, [pc, #32]	@ (8004f24 <MX_USART6_UART_Init+0x58>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004f08:	4b06      	ldr	r3, [pc, #24]	@ (8004f24 <MX_USART6_UART_Init+0x58>)
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004f0e:	4805      	ldr	r0, [pc, #20]	@ (8004f24 <MX_USART6_UART_Init+0x58>)
 8004f10:	f007 fb04 	bl	800c51c <HAL_UART_Init>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004f1a:	f7fd fac7 	bl	80024ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004f1e:	bf00      	nop
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20009cfc 	.word	0x20009cfc
 8004f28:	40011400 	.word	0x40011400

08004f2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b0b0      	sub	sp, #192	@ 0xc0
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f34:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004f38:	2200      	movs	r2, #0
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	605a      	str	r2, [r3, #4]
 8004f3e:	609a      	str	r2, [r3, #8]
 8004f40:	60da      	str	r2, [r3, #12]
 8004f42:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f44:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f48:	2284      	movs	r2, #132	@ 0x84
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f00d fef9 	bl	8012d44 <memset>
  if(uartHandle->Instance==UART7)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a75      	ldr	r2, [pc, #468]	@ (800512c <HAL_UART_MspInit+0x200>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d13d      	bne.n	8004fd8 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004f62:	2300      	movs	r3, #0
 8004f64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f68:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f003 febd 	bl	8008cec <HAL_RCCEx_PeriphCLKConfig>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004f78:	f7fd fa98 	bl	80024ac <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004f7c:	4b6c      	ldr	r3, [pc, #432]	@ (8005130 <HAL_UART_MspInit+0x204>)
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	4a6b      	ldr	r2, [pc, #428]	@ (8005130 <HAL_UART_MspInit+0x204>)
 8004f82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f88:	4b69      	ldr	r3, [pc, #420]	@ (8005130 <HAL_UART_MspInit+0x204>)
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f94:	4b66      	ldr	r3, [pc, #408]	@ (8005130 <HAL_UART_MspInit+0x204>)
 8004f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f98:	4a65      	ldr	r2, [pc, #404]	@ (8005130 <HAL_UART_MspInit+0x204>)
 8004f9a:	f043 0320 	orr.w	r3, r3, #32
 8004f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fa0:	4b63      	ldr	r3, [pc, #396]	@ (8005130 <HAL_UART_MspInit+0x204>)
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fa4:	f003 0320 	and.w	r3, r3, #32
 8004fa8:	623b      	str	r3, [r7, #32]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004fac:	23c0      	movs	r3, #192	@ 0xc0
 8004fae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb8:	2300      	movs	r3, #0
 8004fba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004fca:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4858      	ldr	r0, [pc, #352]	@ (8005134 <HAL_UART_MspInit+0x208>)
 8004fd2:	f001 fca1 	bl	8006918 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8004fd6:	e0a4      	b.n	8005122 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a56      	ldr	r2, [pc, #344]	@ (8005138 <HAL_UART_MspInit+0x20c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d15d      	bne.n	800509e <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004fe2:	2340      	movs	r3, #64	@ 0x40
 8004fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004fea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f003 fe7c 	bl	8008cec <HAL_RCCEx_PeriphCLKConfig>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004ffa:	f7fd fa57 	bl	80024ac <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ffe:	4b4c      	ldr	r3, [pc, #304]	@ (8005130 <HAL_UART_MspInit+0x204>)
 8005000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005002:	4a4b      	ldr	r2, [pc, #300]	@ (8005130 <HAL_UART_MspInit+0x204>)
 8005004:	f043 0310 	orr.w	r3, r3, #16
 8005008:	6453      	str	r3, [r2, #68]	@ 0x44
 800500a:	4b49      	ldr	r3, [pc, #292]	@ (8005130 <HAL_UART_MspInit+0x204>)
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	f003 0310 	and.w	r3, r3, #16
 8005012:	61fb      	str	r3, [r7, #28]
 8005014:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005016:	4b46      	ldr	r3, [pc, #280]	@ (8005130 <HAL_UART_MspInit+0x204>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800501a:	4a45      	ldr	r2, [pc, #276]	@ (8005130 <HAL_UART_MspInit+0x204>)
 800501c:	f043 0302 	orr.w	r3, r3, #2
 8005020:	6313      	str	r3, [r2, #48]	@ 0x30
 8005022:	4b43      	ldr	r3, [pc, #268]	@ (8005130 <HAL_UART_MspInit+0x204>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005026:	f003 0302 	and.w	r3, r3, #2
 800502a:	61bb      	str	r3, [r7, #24]
 800502c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800502e:	4b40      	ldr	r3, [pc, #256]	@ (8005130 <HAL_UART_MspInit+0x204>)
 8005030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005032:	4a3f      	ldr	r2, [pc, #252]	@ (8005130 <HAL_UART_MspInit+0x204>)
 8005034:	f043 0301 	orr.w	r3, r3, #1
 8005038:	6313      	str	r3, [r2, #48]	@ 0x30
 800503a:	4b3d      	ldr	r3, [pc, #244]	@ (8005130 <HAL_UART_MspInit+0x204>)
 800503c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8005046:	2380      	movs	r3, #128	@ 0x80
 8005048:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504c:	2302      	movs	r3, #2
 800504e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005052:	2300      	movs	r3, #0
 8005054:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005058:	2300      	movs	r3, #0
 800505a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800505e:	2307      	movs	r3, #7
 8005060:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8005064:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005068:	4619      	mov	r1, r3
 800506a:	4834      	ldr	r0, [pc, #208]	@ (800513c <HAL_UART_MspInit+0x210>)
 800506c:	f001 fc54 	bl	8006918 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8005070:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005074:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005078:	2302      	movs	r3, #2
 800507a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507e:	2300      	movs	r3, #0
 8005080:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005084:	2300      	movs	r3, #0
 8005086:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800508a:	2307      	movs	r3, #7
 800508c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005090:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8005094:	4619      	mov	r1, r3
 8005096:	482a      	ldr	r0, [pc, #168]	@ (8005140 <HAL_UART_MspInit+0x214>)
 8005098:	f001 fc3e 	bl	8006918 <HAL_GPIO_Init>
}
 800509c:	e041      	b.n	8005122 <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a28      	ldr	r2, [pc, #160]	@ (8005144 <HAL_UART_MspInit+0x218>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d13c      	bne.n	8005122 <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80050a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80050ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80050ae:	2300      	movs	r3, #0
 80050b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050b4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80050b8:	4618      	mov	r0, r3
 80050ba:	f003 fe17 	bl	8008cec <HAL_RCCEx_PeriphCLKConfig>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d001      	beq.n	80050c8 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80050c4:	f7fd f9f2 	bl	80024ac <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80050c8:	4b19      	ldr	r3, [pc, #100]	@ (8005130 <HAL_UART_MspInit+0x204>)
 80050ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050cc:	4a18      	ldr	r2, [pc, #96]	@ (8005130 <HAL_UART_MspInit+0x204>)
 80050ce:	f043 0320 	orr.w	r3, r3, #32
 80050d2:	6453      	str	r3, [r2, #68]	@ 0x44
 80050d4:	4b16      	ldr	r3, [pc, #88]	@ (8005130 <HAL_UART_MspInit+0x204>)
 80050d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d8:	f003 0320 	and.w	r3, r3, #32
 80050dc:	613b      	str	r3, [r7, #16]
 80050de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050e0:	4b13      	ldr	r3, [pc, #76]	@ (8005130 <HAL_UART_MspInit+0x204>)
 80050e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e4:	4a12      	ldr	r2, [pc, #72]	@ (8005130 <HAL_UART_MspInit+0x204>)
 80050e6:	f043 0304 	orr.w	r3, r3, #4
 80050ea:	6313      	str	r3, [r2, #48]	@ 0x30
 80050ec:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <HAL_UART_MspInit+0x204>)
 80050ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f0:	f003 0304 	and.w	r3, r3, #4
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80050f8:	23c0      	movs	r3, #192	@ 0xc0
 80050fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050fe:	2302      	movs	r3, #2
 8005100:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005104:	2300      	movs	r3, #0
 8005106:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800510a:	2303      	movs	r3, #3
 800510c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005110:	2308      	movs	r3, #8
 8005112:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005116:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 800511a:	4619      	mov	r1, r3
 800511c:	480a      	ldr	r0, [pc, #40]	@ (8005148 <HAL_UART_MspInit+0x21c>)
 800511e:	f001 fbfb 	bl	8006918 <HAL_GPIO_Init>
}
 8005122:	bf00      	nop
 8005124:	37c0      	adds	r7, #192	@ 0xc0
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40007800 	.word	0x40007800
 8005130:	40023800 	.word	0x40023800
 8005134:	40021400 	.word	0x40021400
 8005138:	40011000 	.word	0x40011000
 800513c:	40020400 	.word	0x40020400
 8005140:	40020000 	.word	0x40020000
 8005144:	40011400 	.word	0x40011400
 8005148:	40020800 	.word	0x40020800

0800514c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800514c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005184 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005150:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005152:	e003      	b.n	800515c <LoopCopyDataInit>

08005154 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005154:	4b0c      	ldr	r3, [pc, #48]	@ (8005188 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005156:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005158:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800515a:	3104      	adds	r1, #4

0800515c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800515c:	480b      	ldr	r0, [pc, #44]	@ (800518c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800515e:	4b0c      	ldr	r3, [pc, #48]	@ (8005190 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005160:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005162:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005164:	d3f6      	bcc.n	8005154 <CopyDataInit>
  ldr  r2, =_sbss
 8005166:	4a0b      	ldr	r2, [pc, #44]	@ (8005194 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005168:	e002      	b.n	8005170 <LoopFillZerobss>

0800516a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800516a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800516c:	f842 3b04 	str.w	r3, [r2], #4

08005170 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005170:	4b09      	ldr	r3, [pc, #36]	@ (8005198 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005172:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005174:	d3f9      	bcc.n	800516a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005176:	f7ff fb3f 	bl	80047f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800517a:	f00d fe47 	bl	8012e0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800517e:	f7fd f86b 	bl	8002258 <main>
  bx  lr    
 8005182:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005184:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005188:	080158f8 	.word	0x080158f8
  ldr  r0, =_sdata
 800518c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005190:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8005194:	2000009c 	.word	0x2000009c
  ldr  r3, = _ebss
 8005198:	20012064 	.word	0x20012064

0800519c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800519c:	e7fe      	b.n	800519c <ADC_IRQHandler>

0800519e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051a2:	2003      	movs	r0, #3
 80051a4:	f000 fcf3 	bl	8005b8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80051a8:	200f      	movs	r0, #15
 80051aa:	f7ff fa17 	bl	80045dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80051ae:	f7ff f9ed 	bl	800458c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051bc:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <HAL_IncTick+0x20>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	461a      	mov	r2, r3
 80051c2:	4b06      	ldr	r3, [pc, #24]	@ (80051dc <HAL_IncTick+0x24>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4413      	add	r3, r2
 80051c8:	4a04      	ldr	r2, [pc, #16]	@ (80051dc <HAL_IncTick+0x24>)
 80051ca:	6013      	str	r3, [r2, #0]
}
 80051cc:	bf00      	nop
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	20000034 	.word	0x20000034
 80051dc:	20009d84 	.word	0x20009d84

080051e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  return uwTick;
 80051e4:	4b03      	ldr	r3, [pc, #12]	@ (80051f4 <HAL_GetTick+0x14>)
 80051e6:	681b      	ldr	r3, [r3, #0]
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	20009d84 	.word	0x20009d84

080051f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005200:	f7ff ffee 	bl	80051e0 <HAL_GetTick>
 8005204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005210:	d005      	beq.n	800521e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005212:	4b0a      	ldr	r3, [pc, #40]	@ (800523c <HAL_Delay+0x44>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	461a      	mov	r2, r3
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800521e:	bf00      	nop
 8005220:	f7ff ffde 	bl	80051e0 <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	429a      	cmp	r2, r3
 800522e:	d8f7      	bhi.n	8005220 <HAL_Delay+0x28>
  {
  }
}
 8005230:	bf00      	nop
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000034 	.word	0x20000034

08005240 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e031      	b.n	80052ba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d109      	bne.n	8005272 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fb fa42 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	2b00      	cmp	r3, #0
 800527c:	d116      	bne.n	80052ac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005282:	4b10      	ldr	r3, [pc, #64]	@ (80052c4 <HAL_ADC_Init+0x84>)
 8005284:	4013      	ands	r3, r2
 8005286:	f043 0202 	orr.w	r2, r3, #2
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 fad6 	bl	8005840 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	f043 0201 	orr.w	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	641a      	str	r2, [r3, #64]	@ 0x40
 80052aa:	e001      	b.n	80052b0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3710      	adds	r7, #16
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	ffffeefd 	.word	0xffffeefd

080052c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80052d0:	2300      	movs	r3, #0
 80052d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d101      	bne.n	80052e2 <HAL_ADC_Start+0x1a>
 80052de:	2302      	movs	r3, #2
 80052e0:	e0ad      	b.n	800543e <HAL_ADC_Start+0x176>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d018      	beq.n	800532a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689a      	ldr	r2, [r3, #8]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005308:	4b50      	ldr	r3, [pc, #320]	@ (800544c <HAL_ADC_Start+0x184>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a50      	ldr	r2, [pc, #320]	@ (8005450 <HAL_ADC_Start+0x188>)
 800530e:	fba2 2303 	umull	r2, r3, r2, r3
 8005312:	0c9a      	lsrs	r2, r3, #18
 8005314:	4613      	mov	r3, r2
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	4413      	add	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800531c:	e002      	b.n	8005324 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3b01      	subs	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1f9      	bne.n	800531e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d175      	bne.n	8005424 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800533c:	4b45      	ldr	r3, [pc, #276]	@ (8005454 <HAL_ADC_Start+0x18c>)
 800533e:	4013      	ands	r3, r2
 8005340:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800535a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800535e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800536e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005372:	d106      	bne.n	8005382 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005378:	f023 0206 	bic.w	r2, r3, #6
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	645a      	str	r2, [r3, #68]	@ 0x44
 8005380:	e002      	b.n	8005388 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8005398:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 800539a:	4b2f      	ldr	r3, [pc, #188]	@ (8005458 <HAL_ADC_Start+0x190>)
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f003 031f 	and.w	r3, r3, #31
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d10f      	bne.n	80053c6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d143      	bne.n	800543c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689a      	ldr	r2, [r3, #8]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80053c2:	609a      	str	r2, [r3, #8]
 80053c4:	e03a      	b.n	800543c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a24      	ldr	r2, [pc, #144]	@ (800545c <HAL_ADC_Start+0x194>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10e      	bne.n	80053ee <HAL_ADC_Start+0x126>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d107      	bne.n	80053ee <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80053ec:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80053ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005458 <HAL_ADC_Start+0x190>)
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f003 0310 	and.w	r3, r3, #16
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d120      	bne.n	800543c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a18      	ldr	r2, [pc, #96]	@ (8005460 <HAL_ADC_Start+0x198>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d11b      	bne.n	800543c <HAL_ADC_Start+0x174>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	d114      	bne.n	800543c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8005420:	609a      	str	r2, [r3, #8]
 8005422:	e00b      	b.n	800543c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005428:	f043 0210 	orr.w	r2, r3, #16
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005434:	f043 0201 	orr.w	r2, r3, #1
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	2000002c 	.word	0x2000002c
 8005450:	431bde83 	.word	0x431bde83
 8005454:	fffff8fe 	.word	0xfffff8fe
 8005458:	40012300 	.word	0x40012300
 800545c:	40012000 	.word	0x40012000
 8005460:	40012200 	.word	0x40012200

08005464 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800547c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005480:	d113      	bne.n	80054aa <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800548c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005490:	d10b      	bne.n	80054aa <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005496:	f043 0220 	orr.w	r2, r3, #32
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e063      	b.n	8005572 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80054aa:	f7ff fe99 	bl	80051e0 <HAL_GetTick>
 80054ae:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80054b0:	e021      	b.n	80054f6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b8:	d01d      	beq.n	80054f6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <HAL_ADC_PollForConversion+0x6c>
 80054c0:	f7ff fe8e 	bl	80051e0 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d212      	bcs.n	80054f6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d00b      	beq.n	80054f6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	f043 0204 	orr.w	r2, r3, #4
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e03d      	b.n	8005572 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f003 0302 	and.w	r3, r3, #2
 8005500:	2b02      	cmp	r3, #2
 8005502:	d1d6      	bne.n	80054b2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0212 	mvn.w	r2, #18
 800550c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005512:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d123      	bne.n	8005570 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800552c:	2b00      	cmp	r3, #0
 800552e:	d11f      	bne.n	8005570 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800553a:	2b00      	cmp	r3, #0
 800553c:	d006      	beq.n	800554c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005548:	2b00      	cmp	r3, #0
 800554a:	d111      	bne.n	8005570 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005550:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d105      	bne.n	8005570 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005568:	f043 0201 	orr.w	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	3710      	adds	r7, #16
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}

0800557a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8005588:	4618      	mov	r0, r3
 800558a:	370c      	adds	r7, #12
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800559e:	2300      	movs	r3, #0
 80055a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <HAL_ADC_ConfigChannel+0x1c>
 80055ac:	2302      	movs	r3, #2
 80055ae:	e136      	b.n	800581e <HAL_ADC_ConfigChannel+0x28a>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b09      	cmp	r3, #9
 80055be:	d93a      	bls.n	8005636 <HAL_ADC_ConfigChannel+0xa2>
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055c8:	d035      	beq.n	8005636 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68d9      	ldr	r1, [r3, #12]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	4613      	mov	r3, r2
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	4413      	add	r3, r2
 80055de:	3b1e      	subs	r3, #30
 80055e0:	2207      	movs	r2, #7
 80055e2:	fa02 f303 	lsl.w	r3, r2, r3
 80055e6:	43da      	mvns	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	400a      	ands	r2, r1
 80055ee:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a8d      	ldr	r2, [pc, #564]	@ (800582c <HAL_ADC_ConfigChannel+0x298>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d10a      	bne.n	8005610 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68d9      	ldr	r1, [r3, #12]
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	061a      	lsls	r2, r3, #24
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	430a      	orrs	r2, r1
 800560c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800560e:	e035      	b.n	800567c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68d9      	ldr	r1, [r3, #12]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	689a      	ldr	r2, [r3, #8]
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	b29b      	uxth	r3, r3
 8005620:	4618      	mov	r0, r3
 8005622:	4603      	mov	r3, r0
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	4403      	add	r3, r0
 8005628:	3b1e      	subs	r3, #30
 800562a:	409a      	lsls	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	430a      	orrs	r2, r1
 8005632:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005634:	e022      	b.n	800567c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6919      	ldr	r1, [r3, #16]
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	b29b      	uxth	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	4613      	mov	r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	4413      	add	r3, r2
 800564a:	2207      	movs	r2, #7
 800564c:	fa02 f303 	lsl.w	r3, r2, r3
 8005650:	43da      	mvns	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	400a      	ands	r2, r1
 8005658:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6919      	ldr	r1, [r3, #16]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	4618      	mov	r0, r3
 800566c:	4603      	mov	r3, r0
 800566e:	005b      	lsls	r3, r3, #1
 8005670:	4403      	add	r3, r0
 8005672:	409a      	lsls	r2, r3
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	430a      	orrs	r2, r1
 800567a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2b06      	cmp	r3, #6
 8005682:	d824      	bhi.n	80056ce <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	3b05      	subs	r3, #5
 8005696:	221f      	movs	r2, #31
 8005698:	fa02 f303 	lsl.w	r3, r2, r3
 800569c:	43da      	mvns	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	400a      	ands	r2, r1
 80056a4:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	4618      	mov	r0, r3
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	4613      	mov	r3, r2
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	3b05      	subs	r3, #5
 80056c0:	fa00 f203 	lsl.w	r2, r0, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	635a      	str	r2, [r3, #52]	@ 0x34
 80056cc:	e04c      	b.n	8005768 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b0c      	cmp	r3, #12
 80056d4:	d824      	bhi.n	8005720 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685a      	ldr	r2, [r3, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	4413      	add	r3, r2
 80056e6:	3b23      	subs	r3, #35	@ 0x23
 80056e8:	221f      	movs	r2, #31
 80056ea:	fa02 f303 	lsl.w	r3, r2, r3
 80056ee:	43da      	mvns	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	400a      	ands	r2, r1
 80056f6:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	4618      	mov	r0, r3
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	3b23      	subs	r3, #35	@ 0x23
 8005712:	fa00 f203 	lsl.w	r2, r0, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	631a      	str	r2, [r3, #48]	@ 0x30
 800571e:	e023      	b.n	8005768 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	685a      	ldr	r2, [r3, #4]
 800572a:	4613      	mov	r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	4413      	add	r3, r2
 8005730:	3b41      	subs	r3, #65	@ 0x41
 8005732:	221f      	movs	r2, #31
 8005734:	fa02 f303 	lsl.w	r3, r2, r3
 8005738:	43da      	mvns	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	400a      	ands	r2, r1
 8005740:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	b29b      	uxth	r3, r3
 800574e:	4618      	mov	r0, r3
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	4613      	mov	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	4413      	add	r3, r2
 800575a:	3b41      	subs	r3, #65	@ 0x41
 800575c:	fa00 f203 	lsl.w	r2, r0, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a30      	ldr	r2, [pc, #192]	@ (8005830 <HAL_ADC_ConfigChannel+0x29c>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d10a      	bne.n	8005788 <HAL_ADC_ConfigChannel+0x1f4>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800577a:	d105      	bne.n	8005788 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800577c:	4b2d      	ldr	r3, [pc, #180]	@ (8005834 <HAL_ADC_ConfigChannel+0x2a0>)
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	4a2c      	ldr	r2, [pc, #176]	@ (8005834 <HAL_ADC_ConfigChannel+0x2a0>)
 8005782:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8005786:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a28      	ldr	r2, [pc, #160]	@ (8005830 <HAL_ADC_ConfigChannel+0x29c>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d10f      	bne.n	80057b2 <HAL_ADC_ConfigChannel+0x21e>
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	2b12      	cmp	r3, #18
 8005798:	d10b      	bne.n	80057b2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800579a:	4b26      	ldr	r3, [pc, #152]	@ (8005834 <HAL_ADC_ConfigChannel+0x2a0>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4a25      	ldr	r2, [pc, #148]	@ (8005834 <HAL_ADC_ConfigChannel+0x2a0>)
 80057a0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80057a4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80057a6:	4b23      	ldr	r3, [pc, #140]	@ (8005834 <HAL_ADC_ConfigChannel+0x2a0>)
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	4a22      	ldr	r2, [pc, #136]	@ (8005834 <HAL_ADC_ConfigChannel+0x2a0>)
 80057ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80057b0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005830 <HAL_ADC_ConfigChannel+0x29c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d12b      	bne.n	8005814 <HAL_ADC_ConfigChannel+0x280>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a1a      	ldr	r2, [pc, #104]	@ (800582c <HAL_ADC_ConfigChannel+0x298>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d003      	beq.n	80057ce <HAL_ADC_ConfigChannel+0x23a>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b11      	cmp	r3, #17
 80057cc:	d122      	bne.n	8005814 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80057ce:	4b19      	ldr	r3, [pc, #100]	@ (8005834 <HAL_ADC_ConfigChannel+0x2a0>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	4a18      	ldr	r2, [pc, #96]	@ (8005834 <HAL_ADC_ConfigChannel+0x2a0>)
 80057d4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80057d8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80057da:	4b16      	ldr	r3, [pc, #88]	@ (8005834 <HAL_ADC_ConfigChannel+0x2a0>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4a15      	ldr	r2, [pc, #84]	@ (8005834 <HAL_ADC_ConfigChannel+0x2a0>)
 80057e0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80057e4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a10      	ldr	r2, [pc, #64]	@ (800582c <HAL_ADC_ConfigChannel+0x298>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d111      	bne.n	8005814 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80057f0:	4b11      	ldr	r3, [pc, #68]	@ (8005838 <HAL_ADC_ConfigChannel+0x2a4>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a11      	ldr	r2, [pc, #68]	@ (800583c <HAL_ADC_ConfigChannel+0x2a8>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	0c9a      	lsrs	r2, r3, #18
 80057fc:	4613      	mov	r3, r2
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	4413      	add	r3, r2
 8005802:	005b      	lsls	r3, r3, #1
 8005804:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005806:	e002      	b.n	800580e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	3b01      	subs	r3, #1
 800580c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d1f9      	bne.n	8005808 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	10000012 	.word	0x10000012
 8005830:	40012000 	.word	0x40012000
 8005834:	40012300 	.word	0x40012300
 8005838:	2000002c 	.word	0x2000002c
 800583c:	431bde83 	.word	0x431bde83

08005840 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005848:	4b78      	ldr	r3, [pc, #480]	@ (8005a2c <ADC_Init+0x1ec>)
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	4a77      	ldr	r2, [pc, #476]	@ (8005a2c <ADC_Init+0x1ec>)
 800584e:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8005852:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005854:	4b75      	ldr	r3, [pc, #468]	@ (8005a2c <ADC_Init+0x1ec>)
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	4973      	ldr	r1, [pc, #460]	@ (8005a2c <ADC_Init+0x1ec>)
 800585e:	4313      	orrs	r3, r2
 8005860:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005870:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	6859      	ldr	r1, [r3, #4]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	021a      	lsls	r2, r3, #8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8005894:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6859      	ldr	r1, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689a      	ldr	r2, [r3, #8]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6899      	ldr	r1, [r3, #8]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68da      	ldr	r2, [r3, #12]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ce:	4a58      	ldr	r2, [pc, #352]	@ (8005a30 <ADC_Init+0x1f0>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d022      	beq.n	800591a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80058e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6899      	ldr	r1, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005904:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6899      	ldr	r1, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	430a      	orrs	r2, r1
 8005916:	609a      	str	r2, [r3, #8]
 8005918:	e00f      	b.n	800593a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005928:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8005938:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f022 0202 	bic.w	r2, r2, #2
 8005948:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6899      	ldr	r1, [r3, #8]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	699b      	ldr	r3, [r3, #24]
 8005954:	005a      	lsls	r2, r3, #1
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d01b      	beq.n	80059a0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005976:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8005986:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6859      	ldr	r1, [r3, #4]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005992:	3b01      	subs	r3, #1
 8005994:	035a      	lsls	r2, r3, #13
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	430a      	orrs	r2, r1
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	e007      	b.n	80059b0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80059be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	69db      	ldr	r3, [r3, #28]
 80059ca:	3b01      	subs	r3, #1
 80059cc:	051a      	lsls	r2, r3, #20
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689a      	ldr	r2, [r3, #8]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80059e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	6899      	ldr	r1, [r3, #8]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059f2:	025a      	lsls	r2, r3, #9
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6899      	ldr	r1, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	029a      	lsls	r2, r3, #10
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	40012300 	.word	0x40012300
 8005a30:	0f000001 	.word	0x0f000001

08005a34 <__NVIC_SetPriorityGrouping>:
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a44:	4b0b      	ldr	r3, [pc, #44]	@ (8005a74 <__NVIC_SetPriorityGrouping+0x40>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a4a:	68ba      	ldr	r2, [r7, #8]
 8005a4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005a50:	4013      	ands	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a5c:	4b06      	ldr	r3, [pc, #24]	@ (8005a78 <__NVIC_SetPriorityGrouping+0x44>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a62:	4a04      	ldr	r2, [pc, #16]	@ (8005a74 <__NVIC_SetPriorityGrouping+0x40>)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	60d3      	str	r3, [r2, #12]
}
 8005a68:	bf00      	nop
 8005a6a:	3714      	adds	r7, #20
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	e000ed00 	.word	0xe000ed00
 8005a78:	05fa0000 	.word	0x05fa0000

08005a7c <__NVIC_GetPriorityGrouping>:
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a80:	4b04      	ldr	r3, [pc, #16]	@ (8005a94 <__NVIC_GetPriorityGrouping+0x18>)
 8005a82:	68db      	ldr	r3, [r3, #12]
 8005a84:	0a1b      	lsrs	r3, r3, #8
 8005a86:	f003 0307 	and.w	r3, r3, #7
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	e000ed00 	.word	0xe000ed00

08005a98 <__NVIC_EnableIRQ>:
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	db0b      	blt.n	8005ac2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	f003 021f 	and.w	r2, r3, #31
 8005ab0:	4907      	ldr	r1, [pc, #28]	@ (8005ad0 <__NVIC_EnableIRQ+0x38>)
 8005ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	2001      	movs	r0, #1
 8005aba:	fa00 f202 	lsl.w	r2, r0, r2
 8005abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ac2:	bf00      	nop
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	e000e100 	.word	0xe000e100

08005ad4 <__NVIC_SetPriority>:
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	4603      	mov	r3, r0
 8005adc:	6039      	str	r1, [r7, #0]
 8005ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	db0a      	blt.n	8005afe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	490c      	ldr	r1, [pc, #48]	@ (8005b20 <__NVIC_SetPriority+0x4c>)
 8005aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af2:	0112      	lsls	r2, r2, #4
 8005af4:	b2d2      	uxtb	r2, r2
 8005af6:	440b      	add	r3, r1
 8005af8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005afc:	e00a      	b.n	8005b14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	4908      	ldr	r1, [pc, #32]	@ (8005b24 <__NVIC_SetPriority+0x50>)
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	f003 030f 	and.w	r3, r3, #15
 8005b0a:	3b04      	subs	r3, #4
 8005b0c:	0112      	lsls	r2, r2, #4
 8005b0e:	b2d2      	uxtb	r2, r2
 8005b10:	440b      	add	r3, r1
 8005b12:	761a      	strb	r2, [r3, #24]
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	e000e100 	.word	0xe000e100
 8005b24:	e000ed00 	.word	0xe000ed00

08005b28 <NVIC_EncodePriority>:
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b089      	sub	sp, #36	@ 0x24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f003 0307 	and.w	r3, r3, #7
 8005b3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b3c:	69fb      	ldr	r3, [r7, #28]
 8005b3e:	f1c3 0307 	rsb	r3, r3, #7
 8005b42:	2b04      	cmp	r3, #4
 8005b44:	bf28      	it	cs
 8005b46:	2304      	movcs	r3, #4
 8005b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	3304      	adds	r3, #4
 8005b4e:	2b06      	cmp	r3, #6
 8005b50:	d902      	bls.n	8005b58 <NVIC_EncodePriority+0x30>
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	3b03      	subs	r3, #3
 8005b56:	e000      	b.n	8005b5a <NVIC_EncodePriority+0x32>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	fa02 f303 	lsl.w	r3, r2, r3
 8005b66:	43da      	mvns	r2, r3
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	401a      	ands	r2, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b70:	f04f 31ff 	mov.w	r1, #4294967295
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	fa01 f303 	lsl.w	r3, r1, r3
 8005b7a:	43d9      	mvns	r1, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b80:	4313      	orrs	r3, r2
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3724      	adds	r7, #36	@ 0x24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f7ff ff4c 	bl	8005a34 <__NVIC_SetPriorityGrouping>
}
 8005b9c:	bf00      	nop
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b086      	sub	sp, #24
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	4603      	mov	r3, r0
 8005bac:	60b9      	str	r1, [r7, #8]
 8005bae:	607a      	str	r2, [r7, #4]
 8005bb0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bb6:	f7ff ff61 	bl	8005a7c <__NVIC_GetPriorityGrouping>
 8005bba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	6978      	ldr	r0, [r7, #20]
 8005bc2:	f7ff ffb1 	bl	8005b28 <NVIC_EncodePriority>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff ff80 	bl	8005ad4 <__NVIC_SetPriority>
}
 8005bd4:	bf00      	nop
 8005bd6:	3718      	adds	r7, #24
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}

08005bdc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	4603      	mov	r3, r0
 8005be4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff ff54 	bl	8005a98 <__NVIC_EnableIRQ>
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c04:	f7ff faec 	bl	80051e0 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d101      	bne.n	8005c14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e099      	b.n	8005d48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2202      	movs	r2, #2
 8005c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2200      	movs	r2, #0
 8005c20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 0201 	bic.w	r2, r2, #1
 8005c32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c34:	e00f      	b.n	8005c56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c36:	f7ff fad3 	bl	80051e0 <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b05      	cmp	r3, #5
 8005c42:	d908      	bls.n	8005c56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2220      	movs	r2, #32
 8005c48:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2203      	movs	r2, #3
 8005c4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005c52:	2303      	movs	r3, #3
 8005c54:	e078      	b.n	8005d48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e8      	bne.n	8005c36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	4b38      	ldr	r3, [pc, #224]	@ (8005d50 <HAL_DMA_Init+0x158>)
 8005c70:	4013      	ands	r3, r2
 8005c72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	691b      	ldr	r3, [r3, #16]
 8005c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a1b      	ldr	r3, [r3, #32]
 8005ca0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	d107      	bne.n	8005cc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f023 0307 	bic.w	r3, r3, #7
 8005cd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cdc:	697a      	ldr	r2, [r7, #20]
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce6:	2b04      	cmp	r3, #4
 8005ce8:	d117      	bne.n	8005d1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00e      	beq.n	8005d1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fb03 	bl	8006308 <DMA_CheckFifoParam>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2240      	movs	r2, #64	@ 0x40
 8005d0c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005d16:	2301      	movs	r3, #1
 8005d18:	e016      	b.n	8005d48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 faba 	bl	800629c <DMA_CalcBaseAndBitshift>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d30:	223f      	movs	r2, #63	@ 0x3f
 8005d32:	409a      	lsls	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3718      	adds	r7, #24
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	f010803f 	.word	0xf010803f

08005d54 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e050      	b.n	8005e08 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d101      	bne.n	8005d76 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005d72:	2302      	movs	r3, #2
 8005d74:	e048      	b.n	8005e08 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0201 	bic.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2200      	movs	r2, #0
 8005d94:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2200      	movs	r2, #0
 8005da4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	2200      	movs	r2, #0
 8005dac:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2221      	movs	r2, #33	@ 0x21
 8005db4:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fa70 	bl	800629c <DMA_CalcBaseAndBitshift>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc4:	223f      	movs	r2, #63	@ 0x3f
 8005dc6:	409a      	lsls	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005e06:	2300      	movs	r3, #0
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d101      	bne.n	8005e36 <HAL_DMA_Start_IT+0x26>
 8005e32:	2302      	movs	r3, #2
 8005e34:	e048      	b.n	8005ec8 <HAL_DMA_Start_IT+0xb8>
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d137      	bne.n	8005eba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f9ee 	bl	8006240 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e68:	223f      	movs	r2, #63	@ 0x3f
 8005e6a:	409a      	lsls	r2, r3
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0216 	orr.w	r2, r2, #22
 8005e7e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695a      	ldr	r2, [r3, #20]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e8e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f042 0208 	orr.w	r2, r2, #8
 8005ea6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f042 0201 	orr.w	r2, r2, #1
 8005eb6:	601a      	str	r2, [r3, #0]
 8005eb8:	e005      	b.n	8005ec6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005ec2:	2302      	movs	r3, #2
 8005ec4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3718      	adds	r7, #24
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b02      	cmp	r3, #2
 8005ee2:	d004      	beq.n	8005eee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2280      	movs	r2, #128	@ 0x80
 8005ee8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e00c      	b.n	8005f08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2205      	movs	r2, #5
 8005ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0201 	bic.w	r2, r2, #1
 8005f04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005f20:	4b8e      	ldr	r3, [pc, #568]	@ (800615c <HAL_DMA_IRQHandler+0x248>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a8e      	ldr	r2, [pc, #568]	@ (8006160 <HAL_DMA_IRQHandler+0x24c>)
 8005f26:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2a:	0a9b      	lsrs	r3, r3, #10
 8005f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3e:	2208      	movs	r2, #8
 8005f40:	409a      	lsls	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4013      	ands	r3, r2
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01a      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d013      	beq.n	8005f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0204 	bic.w	r2, r2, #4
 8005f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f6c:	2208      	movs	r2, #8
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f78:	f043 0201 	orr.w	r2, r3, #1
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f84:	2201      	movs	r2, #1
 8005f86:	409a      	lsls	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	4013      	ands	r3, r2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d012      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00b      	beq.n	8005fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	409a      	lsls	r2, r3
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fae:	f043 0202 	orr.w	r2, r3, #2
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fba:	2204      	movs	r2, #4
 8005fbc:	409a      	lsls	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d012      	beq.n	8005fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0302 	and.w	r3, r3, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00b      	beq.n	8005fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fd8:	2204      	movs	r2, #4
 8005fda:	409a      	lsls	r2, r3
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe4:	f043 0204 	orr.w	r2, r3, #4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4013      	ands	r3, r2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d043      	beq.n	8006084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d03c      	beq.n	8006084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800600e:	2210      	movs	r2, #16
 8006010:	409a      	lsls	r2, r3
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d018      	beq.n	8006056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800602e:	2b00      	cmp	r3, #0
 8006030:	d108      	bne.n	8006044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006036:	2b00      	cmp	r3, #0
 8006038:	d024      	beq.n	8006084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	4798      	blx	r3
 8006042:	e01f      	b.n	8006084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006048:	2b00      	cmp	r3, #0
 800604a:	d01b      	beq.n	8006084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
 8006054:	e016      	b.n	8006084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006060:	2b00      	cmp	r3, #0
 8006062:	d107      	bne.n	8006074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0208 	bic.w	r2, r2, #8
 8006072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006088:	2220      	movs	r2, #32
 800608a:	409a      	lsls	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4013      	ands	r3, r2
 8006090:	2b00      	cmp	r3, #0
 8006092:	f000 808f 	beq.w	80061b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0310 	and.w	r3, r3, #16
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8087 	beq.w	80061b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060aa:	2220      	movs	r2, #32
 80060ac:	409a      	lsls	r2, r3
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b05      	cmp	r3, #5
 80060bc:	d136      	bne.n	800612c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0216 	bic.w	r2, r2, #22
 80060cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695a      	ldr	r2, [r3, #20]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d103      	bne.n	80060ee <HAL_DMA_IRQHandler+0x1da>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d007      	beq.n	80060fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0208 	bic.w	r2, r2, #8
 80060fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006102:	223f      	movs	r2, #63	@ 0x3f
 8006104:	409a      	lsls	r2, r3
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800611e:	2b00      	cmp	r3, #0
 8006120:	d07e      	beq.n	8006220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	4798      	blx	r3
        }
        return;
 800612a:	e079      	b.n	8006220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d01d      	beq.n	8006176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10d      	bne.n	8006164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614c:	2b00      	cmp	r3, #0
 800614e:	d031      	beq.n	80061b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	4798      	blx	r3
 8006158:	e02c      	b.n	80061b4 <HAL_DMA_IRQHandler+0x2a0>
 800615a:	bf00      	nop
 800615c:	2000002c 	.word	0x2000002c
 8006160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d023      	beq.n	80061b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	4798      	blx	r3
 8006174:	e01e      	b.n	80061b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006180:	2b00      	cmp	r3, #0
 8006182:	d10f      	bne.n	80061a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f022 0210 	bic.w	r2, r2, #16
 8006192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d032      	beq.n	8006222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d022      	beq.n	800620e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2205      	movs	r2, #5
 80061cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d307      	bcc.n	80061fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0301 	and.w	r3, r3, #1
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1f2      	bne.n	80061e0 <HAL_DMA_IRQHandler+0x2cc>
 80061fa:	e000      	b.n	80061fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80061fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	4798      	blx	r3
 800621e:	e000      	b.n	8006222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006220:	bf00      	nop
    }
  }
}
 8006222:	3718      	adds	r7, #24
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	60f8      	str	r0, [r7, #12]
 8006248:	60b9      	str	r1, [r7, #8]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800625c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b40      	cmp	r3, #64	@ 0x40
 800626c:	d108      	bne.n	8006280 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800627e:	e007      	b.n	8006290 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68ba      	ldr	r2, [r7, #8]
 8006286:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	60da      	str	r2, [r3, #12]
}
 8006290:	bf00      	nop
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800629c:	b480      	push	{r7}
 800629e:	b085      	sub	sp, #20
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	3b10      	subs	r3, #16
 80062ac:	4a13      	ldr	r2, [pc, #76]	@ (80062fc <DMA_CalcBaseAndBitshift+0x60>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	091b      	lsrs	r3, r3, #4
 80062b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80062b6:	4a12      	ldr	r2, [pc, #72]	@ (8006300 <DMA_CalcBaseAndBitshift+0x64>)
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	4413      	add	r3, r2
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	461a      	mov	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d908      	bls.n	80062dc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006304 <DMA_CalcBaseAndBitshift+0x68>)
 80062d2:	4013      	ands	r3, r2
 80062d4:	1d1a      	adds	r2, r3, #4
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	659a      	str	r2, [r3, #88]	@ 0x58
 80062da:	e006      	b.n	80062ea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	461a      	mov	r2, r3
 80062e2:	4b08      	ldr	r3, [pc, #32]	@ (8006304 <DMA_CalcBaseAndBitshift+0x68>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	aaaaaaab 	.word	0xaaaaaaab
 8006300:	080138ec 	.word	0x080138ec
 8006304:	fffffc00 	.word	0xfffffc00

08006308 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006308:	b480      	push	{r7}
 800630a:	b085      	sub	sp, #20
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006318:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d11f      	bne.n	8006362 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b03      	cmp	r3, #3
 8006326:	d856      	bhi.n	80063d6 <DMA_CheckFifoParam+0xce>
 8006328:	a201      	add	r2, pc, #4	@ (adr r2, 8006330 <DMA_CheckFifoParam+0x28>)
 800632a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632e:	bf00      	nop
 8006330:	08006341 	.word	0x08006341
 8006334:	08006353 	.word	0x08006353
 8006338:	08006341 	.word	0x08006341
 800633c:	080063d7 	.word	0x080063d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d046      	beq.n	80063da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006350:	e043      	b.n	80063da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006356:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800635a:	d140      	bne.n	80063de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006360:	e03d      	b.n	80063de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800636a:	d121      	bne.n	80063b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	2b03      	cmp	r3, #3
 8006370:	d837      	bhi.n	80063e2 <DMA_CheckFifoParam+0xda>
 8006372:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <DMA_CheckFifoParam+0x70>)
 8006374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006378:	08006389 	.word	0x08006389
 800637c:	0800638f 	.word	0x0800638f
 8006380:	08006389 	.word	0x08006389
 8006384:	080063a1 	.word	0x080063a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	73fb      	strb	r3, [r7, #15]
      break;
 800638c:	e030      	b.n	80063f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006392:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d025      	beq.n	80063e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800639e:	e022      	b.n	80063e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80063a8:	d11f      	bne.n	80063ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80063ae:	e01c      	b.n	80063ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d903      	bls.n	80063be <DMA_CheckFifoParam+0xb6>
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b03      	cmp	r3, #3
 80063ba:	d003      	beq.n	80063c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80063bc:	e018      	b.n	80063f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	73fb      	strb	r3, [r7, #15]
      break;
 80063c2:	e015      	b.n	80063f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063c8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00e      	beq.n	80063ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
      break;
 80063d4:	e00b      	b.n	80063ee <DMA_CheckFifoParam+0xe6>
      break;
 80063d6:	bf00      	nop
 80063d8:	e00a      	b.n	80063f0 <DMA_CheckFifoParam+0xe8>
      break;
 80063da:	bf00      	nop
 80063dc:	e008      	b.n	80063f0 <DMA_CheckFifoParam+0xe8>
      break;
 80063de:	bf00      	nop
 80063e0:	e006      	b.n	80063f0 <DMA_CheckFifoParam+0xe8>
      break;
 80063e2:	bf00      	nop
 80063e4:	e004      	b.n	80063f0 <DMA_CheckFifoParam+0xe8>
      break;
 80063e6:	bf00      	nop
 80063e8:	e002      	b.n	80063f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80063ea:	bf00      	nop
 80063ec:	e000      	b.n	80063f0 <DMA_CheckFifoParam+0xe8>
      break;
 80063ee:	bf00      	nop
    }
  } 
  
  return status; 
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3714      	adds	r7, #20
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop

08006400 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e039      	b.n	8006486 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b00      	cmp	r3, #0
 800641c:	d106      	bne.n	800642c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f7fa fa24 	bl	8000874 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006450:	f023 0107 	bic.w	r1, r3, #7
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	689a      	ldr	r2, [r3, #8]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	430a      	orrs	r2, r1
 800645e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006466:	4b0a      	ldr	r3, [pc, #40]	@ (8006490 <HAL_DMA2D_Init+0x90>)
 8006468:	4013      	ands	r3, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	68d1      	ldr	r1, [r2, #12]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	430b      	orrs	r3, r1
 8006474:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3708      	adds	r7, #8
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	ffffc000 	.word	0xffffc000

08006494 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af02      	add	r7, sp, #8
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d101      	bne.n	80064b0 <HAL_DMA2D_Start+0x1c>
 80064ac:	2302      	movs	r3, #2
 80064ae:	e018      	b.n	80064e2 <HAL_DMA2D_Start+0x4e>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	68b9      	ldr	r1, [r7, #8]
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f988 	bl	80067e0 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0201 	orr.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b086      	sub	sp, #24
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80064f4:	2300      	movs	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b00      	cmp	r3, #0
 8006504:	d056      	beq.n	80065b4 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006506:	f7fe fe6b 	bl	80051e0 <HAL_GetTick>
 800650a:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800650c:	e04b      	b.n	80065a6 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800651c:	2b00      	cmp	r3, #0
 800651e:	d023      	beq.n	8006568 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b00      	cmp	r3, #0
 8006528:	d005      	beq.n	8006536 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652e:	f043 0202 	orr.w	r2, r3, #2
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d005      	beq.n	800654c <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006544:	f043 0201 	orr.w	r2, r3, #1
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2221      	movs	r2, #33	@ 0x21
 8006552:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2204      	movs	r2, #4
 8006558:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e0a5      	b.n	80066b4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d01a      	beq.n	80065a6 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006570:	f7fe fe36 	bl	80051e0 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d302      	bcc.n	8006586 <HAL_DMA2D_PollForTransfer+0x9c>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10f      	bne.n	80065a6 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800658a:	f043 0220 	orr.w	r2, r3, #32
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2203      	movs	r2, #3
 8006596:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e086      	b.n	80066b4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0ac      	beq.n	800650e <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d061      	beq.n	800669a <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80065d6:	f7fe fe03 	bl	80051e0 <HAL_GetTick>
 80065da:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80065dc:	e056      	b.n	800668c <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d02e      	beq.n	800664e <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f003 0308 	and.w	r3, r3, #8
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d005      	beq.n	8006606 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065fe:	f043 0204 	orr.w	r2, r3, #4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f003 0320 	and.w	r3, r3, #32
 800660c:	2b00      	cmp	r3, #0
 800660e:	d005      	beq.n	800661c <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006614:	f043 0202 	orr.w	r2, r3, #2
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d005      	beq.n	8006632 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800662a:	f043 0201 	orr.w	r2, r3, #1
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2229      	movs	r2, #41	@ 0x29
 8006638:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2204      	movs	r2, #4
 800663e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e032      	b.n	80066b4 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006654:	d01a      	beq.n	800668c <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006656:	f7fe fdc3 	bl	80051e0 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	683a      	ldr	r2, [r7, #0]
 8006662:	429a      	cmp	r2, r3
 8006664:	d302      	bcc.n	800666c <HAL_DMA2D_PollForTransfer+0x182>
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10f      	bne.n	800668c <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006670:	f043 0220 	orr.w	r2, r3, #32
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2203      	movs	r2, #3
 800667c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8006688:	2303      	movs	r3, #3
 800668a:	e013      	b.n	80066b4 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b00      	cmp	r3, #0
 8006698:	d0a1      	beq.n	80065de <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2212      	movs	r2, #18
 80066a0:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_DMA2D_ConfigLayer+0x20>
 80066d8:	2302      	movs	r3, #2
 80066da:	e079      	b.n	80067d0 <HAL_DMA2D_ConfigLayer+0x114>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2202      	movs	r2, #2
 80066e8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	3318      	adds	r3, #24
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4413      	add	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	041b      	lsls	r3, r3, #16
 8006702:	4313      	orrs	r3, r2
 8006704:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006706:	4b35      	ldr	r3, [pc, #212]	@ (80067dc <HAL_DMA2D_ConfigLayer+0x120>)
 8006708:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	685b      	ldr	r3, [r3, #4]
 800670e:	2b0a      	cmp	r3, #10
 8006710:	d003      	beq.n	800671a <HAL_DMA2D_ConfigLayer+0x5e>
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	2b09      	cmp	r3, #9
 8006718:	d107      	bne.n	800672a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]
 8006728:	e005      	b.n	8006736 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	061b      	lsls	r3, r3, #24
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d120      	bne.n	800677e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	43db      	mvns	r3, r3
 8006746:	ea02 0103 	and.w	r1, r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	430a      	orrs	r2, r1
 8006752:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	693a      	ldr	r2, [r7, #16]
 800675a:	6812      	ldr	r2, [r2, #0]
 800675c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2b0a      	cmp	r3, #10
 8006764:	d003      	beq.n	800676e <HAL_DMA2D_ConfigLayer+0xb2>
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	2b09      	cmp	r3, #9
 800676c:	d127      	bne.n	80067be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800677a:	629a      	str	r2, [r3, #40]	@ 0x28
 800677c:	e01f      	b.n	80067be <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	69da      	ldr	r2, [r3, #28]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	43db      	mvns	r3, r3
 8006788:	ea02 0103 	and.w	r1, r2, r3
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	430a      	orrs	r2, r1
 8006794:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	6812      	ldr	r2, [r2, #0]
 800679e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	2b0a      	cmp	r3, #10
 80067a6:	d003      	beq.n	80067b0 <HAL_DMA2D_ConfigLayer+0xf4>
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b09      	cmp	r3, #9
 80067ae:	d106      	bne.n	80067be <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80067bc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	371c      	adds	r7, #28
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	ff03000f 	.word	0xff03000f

080067e0 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b08b      	sub	sp, #44	@ 0x2c
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
 80067ec:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067f4:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	041a      	lsls	r2, r3, #16
 80067fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067fe:	431a      	orrs	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006818:	d174      	bne.n	8006904 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8006820:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006828:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006830:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	b2db      	uxtb	r3, r3
 8006836:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d108      	bne.n	8006852 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	431a      	orrs	r2, r3
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	4313      	orrs	r3, r2
 800684a:	697a      	ldr	r2, [r7, #20]
 800684c:	4313      	orrs	r3, r2
 800684e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006850:	e053      	b.n	80068fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d106      	bne.n	8006868 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800685a:	69ba      	ldr	r2, [r7, #24]
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4313      	orrs	r3, r2
 8006860:	697a      	ldr	r2, [r7, #20]
 8006862:	4313      	orrs	r3, r2
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
 8006866:	e048      	b.n	80068fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d111      	bne.n	8006894 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	0cdb      	lsrs	r3, r3, #19
 8006874:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	0a9b      	lsrs	r3, r3, #10
 800687a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	08db      	lsrs	r3, r3, #3
 8006880:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	02db      	lsls	r3, r3, #11
 800688a:	4313      	orrs	r3, r2
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	4313      	orrs	r3, r2
 8006890:	627b      	str	r3, [r7, #36]	@ 0x24
 8006892:	e032      	b.n	80068fa <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	2b03      	cmp	r3, #3
 800689a:	d117      	bne.n	80068cc <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	0fdb      	lsrs	r3, r3, #31
 80068a0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	0cdb      	lsrs	r3, r3, #19
 80068a6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	0adb      	lsrs	r3, r3, #11
 80068ac:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	08db      	lsrs	r3, r3, #3
 80068b2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	015a      	lsls	r2, r3, #5
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	029b      	lsls	r3, r3, #10
 80068bc:	431a      	orrs	r2, r3
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	03db      	lsls	r3, r3, #15
 80068c2:	4313      	orrs	r3, r2
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ca:	e016      	b.n	80068fa <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80068cc:	6a3b      	ldr	r3, [r7, #32]
 80068ce:	0f1b      	lsrs	r3, r3, #28
 80068d0:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	0d1b      	lsrs	r3, r3, #20
 80068d6:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	0b1b      	lsrs	r3, r3, #12
 80068dc:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	091b      	lsrs	r3, r3, #4
 80068e2:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	011a      	lsls	r2, r3, #4
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	431a      	orrs	r2, r3
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	031b      	lsls	r3, r3, #12
 80068f2:	4313      	orrs	r3, r2
 80068f4:	697a      	ldr	r2, [r7, #20]
 80068f6:	4313      	orrs	r3, r2
 80068f8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006900:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006902:	e003      	b.n	800690c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	60da      	str	r2, [r3, #12]
}
 800690c:	bf00      	nop
 800690e:	372c      	adds	r7, #44	@ 0x2c
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006918:	b480      	push	{r7}
 800691a:	b089      	sub	sp, #36	@ 0x24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006922:	2300      	movs	r3, #0
 8006924:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006926:	2300      	movs	r3, #0
 8006928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800692a:	2300      	movs	r3, #0
 800692c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006932:	2300      	movs	r3, #0
 8006934:	61fb      	str	r3, [r7, #28]
 8006936:	e175      	b.n	8006c24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006938:	2201      	movs	r2, #1
 800693a:	69fb      	ldr	r3, [r7, #28]
 800693c:	fa02 f303 	lsl.w	r3, r2, r3
 8006940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	4013      	ands	r3, r2
 800694a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	429a      	cmp	r2, r3
 8006952:	f040 8164 	bne.w	8006c1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f003 0303 	and.w	r3, r3, #3
 800695e:	2b01      	cmp	r3, #1
 8006960:	d005      	beq.n	800696e <HAL_GPIO_Init+0x56>
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f003 0303 	and.w	r3, r3, #3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d130      	bne.n	80069d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	005b      	lsls	r3, r3, #1
 8006978:	2203      	movs	r2, #3
 800697a:	fa02 f303 	lsl.w	r3, r2, r3
 800697e:	43db      	mvns	r3, r3
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	4013      	ands	r3, r2
 8006984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68da      	ldr	r2, [r3, #12]
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	fa02 f303 	lsl.w	r3, r2, r3
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	4313      	orrs	r3, r2
 8006996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80069a4:	2201      	movs	r2, #1
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	43db      	mvns	r3, r3
 80069ae:	69ba      	ldr	r2, [r7, #24]
 80069b0:	4013      	ands	r3, r2
 80069b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	091b      	lsrs	r3, r3, #4
 80069ba:	f003 0201 	and.w	r2, r3, #1
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	fa02 f303 	lsl.w	r3, r2, r3
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	69ba      	ldr	r2, [r7, #24]
 80069ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f003 0303 	and.w	r3, r3, #3
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d017      	beq.n	8006a0c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	2203      	movs	r2, #3
 80069e8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ec:	43db      	mvns	r3, r3
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	4013      	ands	r3, r2
 80069f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	689a      	ldr	r2, [r3, #8]
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	005b      	lsls	r3, r3, #1
 80069fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006a00:	69ba      	ldr	r2, [r7, #24]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69ba      	ldr	r2, [r7, #24]
 8006a0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 0303 	and.w	r3, r3, #3
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d123      	bne.n	8006a60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	08da      	lsrs	r2, r3, #3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3208      	adds	r2, #8
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f003 0307 	and.w	r3, r3, #7
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	220f      	movs	r2, #15
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	43db      	mvns	r3, r3
 8006a36:	69ba      	ldr	r2, [r7, #24]
 8006a38:	4013      	ands	r3, r2
 8006a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	691a      	ldr	r2, [r3, #16]
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	f003 0307 	and.w	r3, r3, #7
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	08da      	lsrs	r2, r3, #3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3208      	adds	r2, #8
 8006a5a:	69b9      	ldr	r1, [r7, #24]
 8006a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	005b      	lsls	r3, r3, #1
 8006a6a:	2203      	movs	r2, #3
 8006a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a70:	43db      	mvns	r3, r3
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	4013      	ands	r3, r2
 8006a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f003 0203 	and.w	r2, r3, #3
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	005b      	lsls	r3, r3, #1
 8006a84:	fa02 f303 	lsl.w	r3, r2, r3
 8006a88:	69ba      	ldr	r2, [r7, #24]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80be 	beq.w	8006c1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006aa2:	4b66      	ldr	r3, [pc, #408]	@ (8006c3c <HAL_GPIO_Init+0x324>)
 8006aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006aa6:	4a65      	ldr	r2, [pc, #404]	@ (8006c3c <HAL_GPIO_Init+0x324>)
 8006aa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006aac:	6453      	str	r3, [r2, #68]	@ 0x44
 8006aae:	4b63      	ldr	r3, [pc, #396]	@ (8006c3c <HAL_GPIO_Init+0x324>)
 8006ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ab2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006aba:	4a61      	ldr	r2, [pc, #388]	@ (8006c40 <HAL_GPIO_Init+0x328>)
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	089b      	lsrs	r3, r3, #2
 8006ac0:	3302      	adds	r3, #2
 8006ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	f003 0303 	and.w	r3, r3, #3
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	220f      	movs	r2, #15
 8006ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ad6:	43db      	mvns	r3, r3
 8006ad8:	69ba      	ldr	r2, [r7, #24]
 8006ada:	4013      	ands	r3, r2
 8006adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a58      	ldr	r2, [pc, #352]	@ (8006c44 <HAL_GPIO_Init+0x32c>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d037      	beq.n	8006b56 <HAL_GPIO_Init+0x23e>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a57      	ldr	r2, [pc, #348]	@ (8006c48 <HAL_GPIO_Init+0x330>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d031      	beq.n	8006b52 <HAL_GPIO_Init+0x23a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a56      	ldr	r2, [pc, #344]	@ (8006c4c <HAL_GPIO_Init+0x334>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d02b      	beq.n	8006b4e <HAL_GPIO_Init+0x236>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a55      	ldr	r2, [pc, #340]	@ (8006c50 <HAL_GPIO_Init+0x338>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d025      	beq.n	8006b4a <HAL_GPIO_Init+0x232>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a54      	ldr	r2, [pc, #336]	@ (8006c54 <HAL_GPIO_Init+0x33c>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d01f      	beq.n	8006b46 <HAL_GPIO_Init+0x22e>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a53      	ldr	r2, [pc, #332]	@ (8006c58 <HAL_GPIO_Init+0x340>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d019      	beq.n	8006b42 <HAL_GPIO_Init+0x22a>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a52      	ldr	r2, [pc, #328]	@ (8006c5c <HAL_GPIO_Init+0x344>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d013      	beq.n	8006b3e <HAL_GPIO_Init+0x226>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a51      	ldr	r2, [pc, #324]	@ (8006c60 <HAL_GPIO_Init+0x348>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d00d      	beq.n	8006b3a <HAL_GPIO_Init+0x222>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a50      	ldr	r2, [pc, #320]	@ (8006c64 <HAL_GPIO_Init+0x34c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d007      	beq.n	8006b36 <HAL_GPIO_Init+0x21e>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	4a4f      	ldr	r2, [pc, #316]	@ (8006c68 <HAL_GPIO_Init+0x350>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d101      	bne.n	8006b32 <HAL_GPIO_Init+0x21a>
 8006b2e:	2309      	movs	r3, #9
 8006b30:	e012      	b.n	8006b58 <HAL_GPIO_Init+0x240>
 8006b32:	230a      	movs	r3, #10
 8006b34:	e010      	b.n	8006b58 <HAL_GPIO_Init+0x240>
 8006b36:	2308      	movs	r3, #8
 8006b38:	e00e      	b.n	8006b58 <HAL_GPIO_Init+0x240>
 8006b3a:	2307      	movs	r3, #7
 8006b3c:	e00c      	b.n	8006b58 <HAL_GPIO_Init+0x240>
 8006b3e:	2306      	movs	r3, #6
 8006b40:	e00a      	b.n	8006b58 <HAL_GPIO_Init+0x240>
 8006b42:	2305      	movs	r3, #5
 8006b44:	e008      	b.n	8006b58 <HAL_GPIO_Init+0x240>
 8006b46:	2304      	movs	r3, #4
 8006b48:	e006      	b.n	8006b58 <HAL_GPIO_Init+0x240>
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e004      	b.n	8006b58 <HAL_GPIO_Init+0x240>
 8006b4e:	2302      	movs	r3, #2
 8006b50:	e002      	b.n	8006b58 <HAL_GPIO_Init+0x240>
 8006b52:	2301      	movs	r3, #1
 8006b54:	e000      	b.n	8006b58 <HAL_GPIO_Init+0x240>
 8006b56:	2300      	movs	r3, #0
 8006b58:	69fa      	ldr	r2, [r7, #28]
 8006b5a:	f002 0203 	and.w	r2, r2, #3
 8006b5e:	0092      	lsls	r2, r2, #2
 8006b60:	4093      	lsls	r3, r2
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006b68:	4935      	ldr	r1, [pc, #212]	@ (8006c40 <HAL_GPIO_Init+0x328>)
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	089b      	lsrs	r3, r3, #2
 8006b6e:	3302      	adds	r3, #2
 8006b70:	69ba      	ldr	r2, [r7, #24]
 8006b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b76:	4b3d      	ldr	r3, [pc, #244]	@ (8006c6c <HAL_GPIO_Init+0x354>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	43db      	mvns	r3, r3
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	4013      	ands	r3, r2
 8006b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d003      	beq.n	8006b9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006b92:	69ba      	ldr	r2, [r7, #24]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b9a:	4a34      	ldr	r2, [pc, #208]	@ (8006c6c <HAL_GPIO_Init+0x354>)
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ba0:	4b32      	ldr	r3, [pc, #200]	@ (8006c6c <HAL_GPIO_Init+0x354>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4013      	ands	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006bc4:	4a29      	ldr	r2, [pc, #164]	@ (8006c6c <HAL_GPIO_Init+0x354>)
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006bca:	4b28      	ldr	r3, [pc, #160]	@ (8006c6c <HAL_GPIO_Init+0x354>)
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	43db      	mvns	r3, r3
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	4013      	ands	r3, r2
 8006bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bee:	4a1f      	ldr	r2, [pc, #124]	@ (8006c6c <HAL_GPIO_Init+0x354>)
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8006c6c <HAL_GPIO_Init+0x354>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	43db      	mvns	r3, r3
 8006bfe:	69ba      	ldr	r2, [r7, #24]
 8006c00:	4013      	ands	r3, r2
 8006c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c18:	4a14      	ldr	r2, [pc, #80]	@ (8006c6c <HAL_GPIO_Init+0x354>)
 8006c1a:	69bb      	ldr	r3, [r7, #24]
 8006c1c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006c1e:	69fb      	ldr	r3, [r7, #28]
 8006c20:	3301      	adds	r3, #1
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	2b0f      	cmp	r3, #15
 8006c28:	f67f ae86 	bls.w	8006938 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	3724      	adds	r7, #36	@ 0x24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40023800 	.word	0x40023800
 8006c40:	40013800 	.word	0x40013800
 8006c44:	40020000 	.word	0x40020000
 8006c48:	40020400 	.word	0x40020400
 8006c4c:	40020800 	.word	0x40020800
 8006c50:	40020c00 	.word	0x40020c00
 8006c54:	40021000 	.word	0x40021000
 8006c58:	40021400 	.word	0x40021400
 8006c5c:	40021800 	.word	0x40021800
 8006c60:	40021c00 	.word	0x40021c00
 8006c64:	40022000 	.word	0x40022000
 8006c68:	40022400 	.word	0x40022400
 8006c6c:	40013c00 	.word	0x40013c00

08006c70 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006c82:	2300      	movs	r3, #0
 8006c84:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006c86:	2300      	movs	r3, #0
 8006c88:	617b      	str	r3, [r7, #20]
 8006c8a:	e0d9      	b.n	8006e40 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	fa02 f303 	lsl.w	r3, r2, r3
 8006c94:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	f040 80c9 	bne.w	8006e3a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006ca8:	4a6b      	ldr	r2, [pc, #428]	@ (8006e58 <HAL_GPIO_DeInit+0x1e8>)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	089b      	lsrs	r3, r3, #2
 8006cae:	3302      	adds	r3, #2
 8006cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cb4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f003 0303 	and.w	r3, r3, #3
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	220f      	movs	r2, #15
 8006cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	4a63      	ldr	r2, [pc, #396]	@ (8006e5c <HAL_GPIO_DeInit+0x1ec>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d037      	beq.n	8006d42 <HAL_GPIO_DeInit+0xd2>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a62      	ldr	r2, [pc, #392]	@ (8006e60 <HAL_GPIO_DeInit+0x1f0>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d031      	beq.n	8006d3e <HAL_GPIO_DeInit+0xce>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	4a61      	ldr	r2, [pc, #388]	@ (8006e64 <HAL_GPIO_DeInit+0x1f4>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d02b      	beq.n	8006d3a <HAL_GPIO_DeInit+0xca>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	4a60      	ldr	r2, [pc, #384]	@ (8006e68 <HAL_GPIO_DeInit+0x1f8>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d025      	beq.n	8006d36 <HAL_GPIO_DeInit+0xc6>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a5f      	ldr	r2, [pc, #380]	@ (8006e6c <HAL_GPIO_DeInit+0x1fc>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d01f      	beq.n	8006d32 <HAL_GPIO_DeInit+0xc2>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a5e      	ldr	r2, [pc, #376]	@ (8006e70 <HAL_GPIO_DeInit+0x200>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d019      	beq.n	8006d2e <HAL_GPIO_DeInit+0xbe>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a5d      	ldr	r2, [pc, #372]	@ (8006e74 <HAL_GPIO_DeInit+0x204>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <HAL_GPIO_DeInit+0xba>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a5c      	ldr	r2, [pc, #368]	@ (8006e78 <HAL_GPIO_DeInit+0x208>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d00d      	beq.n	8006d26 <HAL_GPIO_DeInit+0xb6>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a5b      	ldr	r2, [pc, #364]	@ (8006e7c <HAL_GPIO_DeInit+0x20c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d007      	beq.n	8006d22 <HAL_GPIO_DeInit+0xb2>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a5a      	ldr	r2, [pc, #360]	@ (8006e80 <HAL_GPIO_DeInit+0x210>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d101      	bne.n	8006d1e <HAL_GPIO_DeInit+0xae>
 8006d1a:	2309      	movs	r3, #9
 8006d1c:	e012      	b.n	8006d44 <HAL_GPIO_DeInit+0xd4>
 8006d1e:	230a      	movs	r3, #10
 8006d20:	e010      	b.n	8006d44 <HAL_GPIO_DeInit+0xd4>
 8006d22:	2308      	movs	r3, #8
 8006d24:	e00e      	b.n	8006d44 <HAL_GPIO_DeInit+0xd4>
 8006d26:	2307      	movs	r3, #7
 8006d28:	e00c      	b.n	8006d44 <HAL_GPIO_DeInit+0xd4>
 8006d2a:	2306      	movs	r3, #6
 8006d2c:	e00a      	b.n	8006d44 <HAL_GPIO_DeInit+0xd4>
 8006d2e:	2305      	movs	r3, #5
 8006d30:	e008      	b.n	8006d44 <HAL_GPIO_DeInit+0xd4>
 8006d32:	2304      	movs	r3, #4
 8006d34:	e006      	b.n	8006d44 <HAL_GPIO_DeInit+0xd4>
 8006d36:	2303      	movs	r3, #3
 8006d38:	e004      	b.n	8006d44 <HAL_GPIO_DeInit+0xd4>
 8006d3a:	2302      	movs	r3, #2
 8006d3c:	e002      	b.n	8006d44 <HAL_GPIO_DeInit+0xd4>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <HAL_GPIO_DeInit+0xd4>
 8006d42:	2300      	movs	r3, #0
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	f002 0203 	and.w	r2, r2, #3
 8006d4a:	0092      	lsls	r2, r2, #2
 8006d4c:	4093      	lsls	r3, r2
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d132      	bne.n	8006dba <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006d54:	4b4b      	ldr	r3, [pc, #300]	@ (8006e84 <HAL_GPIO_DeInit+0x214>)
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	43db      	mvns	r3, r3
 8006d5c:	4949      	ldr	r1, [pc, #292]	@ (8006e84 <HAL_GPIO_DeInit+0x214>)
 8006d5e:	4013      	ands	r3, r2
 8006d60:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006d62:	4b48      	ldr	r3, [pc, #288]	@ (8006e84 <HAL_GPIO_DeInit+0x214>)
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	4946      	ldr	r1, [pc, #280]	@ (8006e84 <HAL_GPIO_DeInit+0x214>)
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006d70:	4b44      	ldr	r3, [pc, #272]	@ (8006e84 <HAL_GPIO_DeInit+0x214>)
 8006d72:	68da      	ldr	r2, [r3, #12]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	43db      	mvns	r3, r3
 8006d78:	4942      	ldr	r1, [pc, #264]	@ (8006e84 <HAL_GPIO_DeInit+0x214>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006d7e:	4b41      	ldr	r3, [pc, #260]	@ (8006e84 <HAL_GPIO_DeInit+0x214>)
 8006d80:	689a      	ldr	r2, [r3, #8]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	43db      	mvns	r3, r3
 8006d86:	493f      	ldr	r1, [pc, #252]	@ (8006e84 <HAL_GPIO_DeInit+0x214>)
 8006d88:	4013      	ands	r3, r2
 8006d8a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f003 0303 	and.w	r3, r3, #3
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	220f      	movs	r2, #15
 8006d96:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006d9c:	4a2e      	ldr	r2, [pc, #184]	@ (8006e58 <HAL_GPIO_DeInit+0x1e8>)
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	089b      	lsrs	r3, r3, #2
 8006da2:	3302      	adds	r3, #2
 8006da4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	43da      	mvns	r2, r3
 8006dac:	482a      	ldr	r0, [pc, #168]	@ (8006e58 <HAL_GPIO_DeInit+0x1e8>)
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	089b      	lsrs	r3, r3, #2
 8006db2:	400a      	ands	r2, r1
 8006db4:	3302      	adds	r3, #2
 8006db6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	2103      	movs	r1, #3
 8006dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8006dc8:	43db      	mvns	r3, r3
 8006dca:	401a      	ands	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	08da      	lsrs	r2, r3, #3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3208      	adds	r2, #8
 8006dd8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	220f      	movs	r2, #15
 8006de6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dea:	43db      	mvns	r3, r3
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	08d2      	lsrs	r2, r2, #3
 8006df0:	4019      	ands	r1, r3
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	3208      	adds	r2, #8
 8006df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	005b      	lsls	r3, r3, #1
 8006e02:	2103      	movs	r1, #3
 8006e04:	fa01 f303 	lsl.w	r3, r1, r3
 8006e08:	43db      	mvns	r3, r3
 8006e0a:	401a      	ands	r2, r3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	2101      	movs	r1, #1
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	fa01 f303 	lsl.w	r3, r1, r3
 8006e1c:	43db      	mvns	r3, r3
 8006e1e:	401a      	ands	r2, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	2103      	movs	r1, #3
 8006e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e32:	43db      	mvns	r3, r3
 8006e34:	401a      	ands	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	3301      	adds	r3, #1
 8006e3e:	617b      	str	r3, [r7, #20]
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2b0f      	cmp	r3, #15
 8006e44:	f67f af22 	bls.w	8006c8c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	40013800 	.word	0x40013800
 8006e5c:	40020000 	.word	0x40020000
 8006e60:	40020400 	.word	0x40020400
 8006e64:	40020800 	.word	0x40020800
 8006e68:	40020c00 	.word	0x40020c00
 8006e6c:	40021000 	.word	0x40021000
 8006e70:	40021400 	.word	0x40021400
 8006e74:	40021800 	.word	0x40021800
 8006e78:	40021c00 	.word	0x40021c00
 8006e7c:	40022000 	.word	0x40022000
 8006e80:	40022400 	.word	0x40022400
 8006e84:	40013c00 	.word	0x40013c00

08006e88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	460b      	mov	r3, r1
 8006e92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691a      	ldr	r2, [r3, #16]
 8006e98:	887b      	ldrh	r3, [r7, #2]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	e001      	b.n	8006eaa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3714      	adds	r7, #20
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	807b      	strh	r3, [r7, #2]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006ec8:	787b      	ldrb	r3, [r7, #1]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ece:	887a      	ldrh	r2, [r7, #2]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006ed4:	e003      	b.n	8006ede <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006ed6:	887b      	ldrh	r3, [r7, #2]
 8006ed8:	041a      	lsls	r2, r3, #16
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	619a      	str	r2, [r3, #24]
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b085      	sub	sp, #20
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
 8006ef2:	460b      	mov	r3, r1
 8006ef4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006efc:	887a      	ldrh	r2, [r7, #2]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	4013      	ands	r3, r2
 8006f02:	041a      	lsls	r2, r3, #16
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	43d9      	mvns	r1, r3
 8006f08:	887b      	ldrh	r3, [r7, #2]
 8006f0a:	400b      	ands	r3, r1
 8006f0c:	431a      	orrs	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	619a      	str	r2, [r3, #24]
}
 8006f12:	bf00      	nop
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr
	...

08006f20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	4603      	mov	r3, r0
 8006f28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006f2a:	4b08      	ldr	r3, [pc, #32]	@ (8006f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f2c:	695a      	ldr	r2, [r3, #20]
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	4013      	ands	r3, r2
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d006      	beq.n	8006f44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f36:	4a05      	ldr	r2, [pc, #20]	@ (8006f4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f3c:	88fb      	ldrh	r3, [r7, #6]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f000 f806 	bl	8006f50 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f44:	bf00      	nop
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	40013c00 	.word	0x40013c00

08006f50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006f5a:	bf00      	nop
 8006f5c:	370c      	adds	r7, #12
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006f76:	2301      	movs	r3, #1
 8006f78:	e07f      	b.n	800707a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d106      	bne.n	8006f94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f7fa feca 	bl	8001d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2224      	movs	r2, #36	@ 0x24
 8006f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f022 0201 	bic.w	r2, r2, #1
 8006faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685a      	ldr	r2, [r3, #4]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006fb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	689a      	ldr	r2, [r3, #8]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006fc8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d107      	bne.n	8006fe2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	689a      	ldr	r2, [r3, #8]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006fde:	609a      	str	r2, [r3, #8]
 8006fe0:	e006      	b.n	8006ff0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	689a      	ldr	r2, [r3, #8]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006fee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d104      	bne.n	8007002 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007000:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6859      	ldr	r1, [r3, #4]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	4b1d      	ldr	r3, [pc, #116]	@ (8007084 <HAL_I2C_Init+0x11c>)
 800700e:	430b      	orrs	r3, r1
 8007010:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	68da      	ldr	r2, [r3, #12]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007020:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	691a      	ldr	r2, [r3, #16]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	695b      	ldr	r3, [r3, #20]
 800702a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	69d9      	ldr	r1, [r3, #28]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a1a      	ldr	r2, [r3, #32]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2220      	movs	r2, #32
 8007066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	02008000 	.word	0x02008000

08007088 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e021      	b.n	80070de <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2224      	movs	r2, #36	@ 0x24
 800709e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7fa fee0 	bl	8001e78 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
	...

080070e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	4608      	mov	r0, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	461a      	mov	r2, r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	817b      	strh	r3, [r7, #10]
 80070fa:	460b      	mov	r3, r1
 80070fc:	813b      	strh	r3, [r7, #8]
 80070fe:	4613      	mov	r3, r2
 8007100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b20      	cmp	r3, #32
 800710c:	f040 80f9 	bne.w	8007302 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <HAL_I2C_Mem_Write+0x34>
 8007116:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	d105      	bne.n	8007128 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007122:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e0ed      	b.n	8007304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800712e:	2b01      	cmp	r3, #1
 8007130:	d101      	bne.n	8007136 <HAL_I2C_Mem_Write+0x4e>
 8007132:	2302      	movs	r3, #2
 8007134:	e0e6      	b.n	8007304 <HAL_I2C_Mem_Write+0x21c>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800713e:	f7fe f84f 	bl	80051e0 <HAL_GetTick>
 8007142:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	2319      	movs	r3, #25
 800714a:	2201      	movs	r2, #1
 800714c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fad1 	bl	80076f8 <I2C_WaitOnFlagUntilTimeout>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	e0d1      	b.n	8007304 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2221      	movs	r2, #33	@ 0x21
 8007164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2240      	movs	r2, #64	@ 0x40
 800716c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2200      	movs	r2, #0
 8007174:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6a3a      	ldr	r2, [r7, #32]
 800717a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007180:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007188:	88f8      	ldrh	r0, [r7, #6]
 800718a:	893a      	ldrh	r2, [r7, #8]
 800718c:	8979      	ldrh	r1, [r7, #10]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	9301      	str	r3, [sp, #4]
 8007192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007194:	9300      	str	r3, [sp, #0]
 8007196:	4603      	mov	r3, r0
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 f9e1 	bl	8007560 <I2C_RequestMemoryWrite>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d005      	beq.n	80071b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e0a9      	b.n	8007304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	2bff      	cmp	r3, #255	@ 0xff
 80071b8:	d90e      	bls.n	80071d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	22ff      	movs	r2, #255	@ 0xff
 80071be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	8979      	ldrh	r1, [r7, #10]
 80071c8:	2300      	movs	r3, #0
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 fc2d 	bl	8007a30 <I2C_TransferConfig>
 80071d6:	e00f      	b.n	80071f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80071dc:	b29a      	uxth	r2, r3
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	8979      	ldrh	r1, [r7, #10]
 80071ea:	2300      	movs	r3, #0
 80071ec:	9300      	str	r3, [sp, #0]
 80071ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 fc1c 	bl	8007a30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071f8:	697a      	ldr	r2, [r7, #20]
 80071fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 fabb 	bl	8007778 <I2C_WaitOnTXISFlagUntilTimeout>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d001      	beq.n	800720c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	e07b      	b.n	8007304 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007210:	781a      	ldrb	r2, [r3, #0]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007226:	b29b      	uxth	r3, r3
 8007228:	3b01      	subs	r3, #1
 800722a:	b29a      	uxth	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007234:	3b01      	subs	r3, #1
 8007236:	b29a      	uxth	r2, r3
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007240:	b29b      	uxth	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	d034      	beq.n	80072b0 <HAL_I2C_Mem_Write+0x1c8>
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800724a:	2b00      	cmp	r3, #0
 800724c:	d130      	bne.n	80072b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007254:	2200      	movs	r2, #0
 8007256:	2180      	movs	r1, #128	@ 0x80
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 fa4d 	bl	80076f8 <I2C_WaitOnFlagUntilTimeout>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d001      	beq.n	8007268 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e04d      	b.n	8007304 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800726c:	b29b      	uxth	r3, r3
 800726e:	2bff      	cmp	r3, #255	@ 0xff
 8007270:	d90e      	bls.n	8007290 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	22ff      	movs	r2, #255	@ 0xff
 8007276:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800727c:	b2da      	uxtb	r2, r3
 800727e:	8979      	ldrh	r1, [r7, #10]
 8007280:	2300      	movs	r3, #0
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fbd1 	bl	8007a30 <I2C_TransferConfig>
 800728e:	e00f      	b.n	80072b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007294:	b29a      	uxth	r2, r3
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800729e:	b2da      	uxtb	r2, r3
 80072a0:	8979      	ldrh	r1, [r7, #10]
 80072a2:	2300      	movs	r3, #0
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80072aa:	68f8      	ldr	r0, [r7, #12]
 80072ac:	f000 fbc0 	bl	8007a30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d19e      	bne.n	80071f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80072ba:	697a      	ldr	r2, [r7, #20]
 80072bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fa9a 	bl	80077f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	e01a      	b.n	8007304 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2220      	movs	r2, #32
 80072d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6859      	ldr	r1, [r3, #4]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	4b0a      	ldr	r3, [pc, #40]	@ (800730c <HAL_I2C_Mem_Write+0x224>)
 80072e2:	400b      	ands	r3, r1
 80072e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2220      	movs	r2, #32
 80072ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2200      	movs	r2, #0
 80072f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80072fe:	2300      	movs	r3, #0
 8007300:	e000      	b.n	8007304 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007302:	2302      	movs	r3, #2
  }
}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	fe00e800 	.word	0xfe00e800

08007310 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af02      	add	r7, sp, #8
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	4608      	mov	r0, r1
 800731a:	4611      	mov	r1, r2
 800731c:	461a      	mov	r2, r3
 800731e:	4603      	mov	r3, r0
 8007320:	817b      	strh	r3, [r7, #10]
 8007322:	460b      	mov	r3, r1
 8007324:	813b      	strh	r3, [r7, #8]
 8007326:	4613      	mov	r3, r2
 8007328:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007330:	b2db      	uxtb	r3, r3
 8007332:	2b20      	cmp	r3, #32
 8007334:	f040 80fd 	bne.w	8007532 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <HAL_I2C_Mem_Read+0x34>
 800733e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007340:	2b00      	cmp	r3, #0
 8007342:	d105      	bne.n	8007350 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800734a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800734c:	2301      	movs	r3, #1
 800734e:	e0f1      	b.n	8007534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007356:	2b01      	cmp	r3, #1
 8007358:	d101      	bne.n	800735e <HAL_I2C_Mem_Read+0x4e>
 800735a:	2302      	movs	r3, #2
 800735c:	e0ea      	b.n	8007534 <HAL_I2C_Mem_Read+0x224>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007366:	f7fd ff3b 	bl	80051e0 <HAL_GetTick>
 800736a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	9300      	str	r3, [sp, #0]
 8007370:	2319      	movs	r3, #25
 8007372:	2201      	movs	r2, #1
 8007374:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f9bd 	bl	80076f8 <I2C_WaitOnFlagUntilTimeout>
 800737e:	4603      	mov	r3, r0
 8007380:	2b00      	cmp	r3, #0
 8007382:	d001      	beq.n	8007388 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007384:	2301      	movs	r3, #1
 8007386:	e0d5      	b.n	8007534 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2222      	movs	r2, #34	@ 0x22
 800738c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2240      	movs	r2, #64	@ 0x40
 8007394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6a3a      	ldr	r2, [r7, #32]
 80073a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80073a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2200      	movs	r2, #0
 80073ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80073b0:	88f8      	ldrh	r0, [r7, #6]
 80073b2:	893a      	ldrh	r2, [r7, #8]
 80073b4:	8979      	ldrh	r1, [r7, #10]
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073bc:	9300      	str	r3, [sp, #0]
 80073be:	4603      	mov	r3, r0
 80073c0:	68f8      	ldr	r0, [r7, #12]
 80073c2:	f000 f921 	bl	8007608 <I2C_RequestMemoryRead>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d005      	beq.n	80073d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2200      	movs	r2, #0
 80073d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e0ad      	b.n	8007534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80073dc:	b29b      	uxth	r3, r3
 80073de:	2bff      	cmp	r3, #255	@ 0xff
 80073e0:	d90e      	bls.n	8007400 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	22ff      	movs	r2, #255	@ 0xff
 80073e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	8979      	ldrh	r1, [r7, #10]
 80073f0:	4b52      	ldr	r3, [pc, #328]	@ (800753c <HAL_I2C_Mem_Read+0x22c>)
 80073f2:	9300      	str	r3, [sp, #0]
 80073f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 fb19 	bl	8007a30 <I2C_TransferConfig>
 80073fe:	e00f      	b.n	8007420 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007404:	b29a      	uxth	r2, r3
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800740e:	b2da      	uxtb	r2, r3
 8007410:	8979      	ldrh	r1, [r7, #10]
 8007412:	4b4a      	ldr	r3, [pc, #296]	@ (800753c <HAL_I2C_Mem_Read+0x22c>)
 8007414:	9300      	str	r3, [sp, #0]
 8007416:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fb08 	bl	8007a30 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007426:	2200      	movs	r2, #0
 8007428:	2104      	movs	r1, #4
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 f964 	bl	80076f8 <I2C_WaitOnFlagUntilTimeout>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d001      	beq.n	800743a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007436:	2301      	movs	r3, #1
 8007438:	e07c      	b.n	8007534 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007444:	b2d2      	uxtb	r2, r2
 8007446:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800744c:	1c5a      	adds	r2, r3, #1
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007456:	3b01      	subs	r3, #1
 8007458:	b29a      	uxth	r2, r3
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007462:	b29b      	uxth	r3, r3
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007470:	b29b      	uxth	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d034      	beq.n	80074e0 <HAL_I2C_Mem_Read+0x1d0>
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800747a:	2b00      	cmp	r3, #0
 800747c:	d130      	bne.n	80074e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007484:	2200      	movs	r2, #0
 8007486:	2180      	movs	r1, #128	@ 0x80
 8007488:	68f8      	ldr	r0, [r7, #12]
 800748a:	f000 f935 	bl	80076f8 <I2C_WaitOnFlagUntilTimeout>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	e04d      	b.n	8007534 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800749c:	b29b      	uxth	r3, r3
 800749e:	2bff      	cmp	r3, #255	@ 0xff
 80074a0:	d90e      	bls.n	80074c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	22ff      	movs	r2, #255	@ 0xff
 80074a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ac:	b2da      	uxtb	r2, r3
 80074ae:	8979      	ldrh	r1, [r7, #10]
 80074b0:	2300      	movs	r3, #0
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f000 fab9 	bl	8007a30 <I2C_TransferConfig>
 80074be:	e00f      	b.n	80074e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074c4:	b29a      	uxth	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	8979      	ldrh	r1, [r7, #10]
 80074d2:	2300      	movs	r3, #0
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80074da:	68f8      	ldr	r0, [r7, #12]
 80074dc:	f000 faa8 	bl	8007a30 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d19a      	bne.n	8007420 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80074ea:	697a      	ldr	r2, [r7, #20]
 80074ec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 f982 	bl	80077f8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80074fa:	2301      	movs	r3, #1
 80074fc:	e01a      	b.n	8007534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	2220      	movs	r2, #32
 8007504:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	6859      	ldr	r1, [r3, #4]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	4b0b      	ldr	r3, [pc, #44]	@ (8007540 <HAL_I2C_Mem_Read+0x230>)
 8007512:	400b      	ands	r3, r1
 8007514:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2220      	movs	r2, #32
 800751a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800752e:	2300      	movs	r3, #0
 8007530:	e000      	b.n	8007534 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007532:	2302      	movs	r3, #2
  }
}
 8007534:	4618      	mov	r0, r3
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	80002400 	.word	0x80002400
 8007540:	fe00e800 	.word	0xfe00e800

08007544 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007544:	b480      	push	{r7}
 8007546:	b083      	sub	sp, #12
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007552:	b2db      	uxtb	r3, r3
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr

08007560 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af02      	add	r7, sp, #8
 8007566:	60f8      	str	r0, [r7, #12]
 8007568:	4608      	mov	r0, r1
 800756a:	4611      	mov	r1, r2
 800756c:	461a      	mov	r2, r3
 800756e:	4603      	mov	r3, r0
 8007570:	817b      	strh	r3, [r7, #10]
 8007572:	460b      	mov	r3, r1
 8007574:	813b      	strh	r3, [r7, #8]
 8007576:	4613      	mov	r3, r2
 8007578:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800757a:	88fb      	ldrh	r3, [r7, #6]
 800757c:	b2da      	uxtb	r2, r3
 800757e:	8979      	ldrh	r1, [r7, #10]
 8007580:	4b20      	ldr	r3, [pc, #128]	@ (8007604 <I2C_RequestMemoryWrite+0xa4>)
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007588:	68f8      	ldr	r0, [r7, #12]
 800758a:	f000 fa51 	bl	8007a30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800758e:	69fa      	ldr	r2, [r7, #28]
 8007590:	69b9      	ldr	r1, [r7, #24]
 8007592:	68f8      	ldr	r0, [r7, #12]
 8007594:	f000 f8f0 	bl	8007778 <I2C_WaitOnTXISFlagUntilTimeout>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d001      	beq.n	80075a2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	e02c      	b.n	80075fc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80075a2:	88fb      	ldrh	r3, [r7, #6]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d105      	bne.n	80075b4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075a8:	893b      	ldrh	r3, [r7, #8]
 80075aa:	b2da      	uxtb	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80075b2:	e015      	b.n	80075e0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80075b4:	893b      	ldrh	r3, [r7, #8]
 80075b6:	0a1b      	lsrs	r3, r3, #8
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	69b9      	ldr	r1, [r7, #24]
 80075c6:	68f8      	ldr	r0, [r7, #12]
 80075c8:	f000 f8d6 	bl	8007778 <I2C_WaitOnTXISFlagUntilTimeout>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e012      	b.n	80075fc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80075d6:	893b      	ldrh	r3, [r7, #8]
 80075d8:	b2da      	uxtb	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	2200      	movs	r2, #0
 80075e8:	2180      	movs	r1, #128	@ 0x80
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f000 f884 	bl	80076f8 <I2C_WaitOnFlagUntilTimeout>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d001      	beq.n	80075fa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e000      	b.n	80075fc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}
 8007604:	80002000 	.word	0x80002000

08007608 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af02      	add	r7, sp, #8
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	4608      	mov	r0, r1
 8007612:	4611      	mov	r1, r2
 8007614:	461a      	mov	r2, r3
 8007616:	4603      	mov	r3, r0
 8007618:	817b      	strh	r3, [r7, #10]
 800761a:	460b      	mov	r3, r1
 800761c:	813b      	strh	r3, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	b2da      	uxtb	r2, r3
 8007626:	8979      	ldrh	r1, [r7, #10]
 8007628:	4b20      	ldr	r3, [pc, #128]	@ (80076ac <I2C_RequestMemoryRead+0xa4>)
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	2300      	movs	r3, #0
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 f9fe 	bl	8007a30 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007634:	69fa      	ldr	r2, [r7, #28]
 8007636:	69b9      	ldr	r1, [r7, #24]
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 f89d 	bl	8007778 <I2C_WaitOnTXISFlagUntilTimeout>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d001      	beq.n	8007648 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007644:	2301      	movs	r3, #1
 8007646:	e02c      	b.n	80076a2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007648:	88fb      	ldrh	r3, [r7, #6]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d105      	bne.n	800765a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800764e:	893b      	ldrh	r3, [r7, #8]
 8007650:	b2da      	uxtb	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	629a      	str	r2, [r3, #40]	@ 0x28
 8007658:	e015      	b.n	8007686 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800765a:	893b      	ldrh	r3, [r7, #8]
 800765c:	0a1b      	lsrs	r3, r3, #8
 800765e:	b29b      	uxth	r3, r3
 8007660:	b2da      	uxtb	r2, r3
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007668:	69fa      	ldr	r2, [r7, #28]
 800766a:	69b9      	ldr	r1, [r7, #24]
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f883 	bl	8007778 <I2C_WaitOnTXISFlagUntilTimeout>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e012      	b.n	80076a2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800767c:	893b      	ldrh	r3, [r7, #8]
 800767e:	b2da      	uxtb	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	2200      	movs	r2, #0
 800768e:	2140      	movs	r1, #64	@ 0x40
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f000 f831 	bl	80076f8 <I2C_WaitOnFlagUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d001      	beq.n	80076a0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e000      	b.n	80076a2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	80002000 	.word	0x80002000

080076b0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	f003 0302 	and.w	r3, r3, #2
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	d103      	bne.n	80076ce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2200      	movs	r2, #0
 80076cc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	699b      	ldr	r3, [r3, #24]
 80076d4:	f003 0301 	and.w	r3, r3, #1
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d007      	beq.n	80076ec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	699a      	ldr	r2, [r3, #24]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f042 0201 	orr.w	r2, r2, #1
 80076ea:	619a      	str	r2, [r3, #24]
  }
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	603b      	str	r3, [r7, #0]
 8007704:	4613      	mov	r3, r2
 8007706:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007708:	e022      	b.n	8007750 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007710:	d01e      	beq.n	8007750 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007712:	f7fd fd65 	bl	80051e0 <HAL_GetTick>
 8007716:	4602      	mov	r2, r0
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	683a      	ldr	r2, [r7, #0]
 800771e:	429a      	cmp	r2, r3
 8007720:	d302      	bcc.n	8007728 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d113      	bne.n	8007750 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800772c:	f043 0220 	orr.w	r2, r3, #32
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2220      	movs	r2, #32
 8007738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e00f      	b.n	8007770 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	699a      	ldr	r2, [r3, #24]
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	4013      	ands	r3, r2
 800775a:	68ba      	ldr	r2, [r7, #8]
 800775c:	429a      	cmp	r2, r3
 800775e:	bf0c      	ite	eq
 8007760:	2301      	moveq	r3, #1
 8007762:	2300      	movne	r3, #0
 8007764:	b2db      	uxtb	r3, r3
 8007766:	461a      	mov	r2, r3
 8007768:	79fb      	ldrb	r3, [r7, #7]
 800776a:	429a      	cmp	r2, r3
 800776c:	d0cd      	beq.n	800770a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800776e:	2300      	movs	r3, #0
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007784:	e02c      	b.n	80077e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	68b9      	ldr	r1, [r7, #8]
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f000 f870 	bl	8007870 <I2C_IsErrorOccurred>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e02a      	b.n	80077f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077a0:	d01e      	beq.n	80077e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077a2:	f7fd fd1d 	bl	80051e0 <HAL_GetTick>
 80077a6:	4602      	mov	r2, r0
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	1ad3      	subs	r3, r2, r3
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d302      	bcc.n	80077b8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d113      	bne.n	80077e0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077bc:	f043 0220 	orr.w	r2, r3, #32
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e007      	b.n	80077f0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f003 0302 	and.w	r3, r3, #2
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d1cb      	bne.n	8007786 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b084      	sub	sp, #16
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	60f8      	str	r0, [r7, #12]
 8007800:	60b9      	str	r1, [r7, #8]
 8007802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007804:	e028      	b.n	8007858 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	68b9      	ldr	r1, [r7, #8]
 800780a:	68f8      	ldr	r0, [r7, #12]
 800780c:	f000 f830 	bl	8007870 <I2C_IsErrorOccurred>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d001      	beq.n	800781a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e026      	b.n	8007868 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800781a:	f7fd fce1 	bl	80051e0 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	68ba      	ldr	r2, [r7, #8]
 8007826:	429a      	cmp	r2, r3
 8007828:	d302      	bcc.n	8007830 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d113      	bne.n	8007858 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007834:	f043 0220 	orr.w	r2, r3, #32
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2220      	movs	r2, #32
 8007840:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2200      	movs	r2, #0
 8007850:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e007      	b.n	8007868 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	f003 0320 	and.w	r3, r3, #32
 8007862:	2b20      	cmp	r3, #32
 8007864:	d1cf      	bne.n	8007806 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b08a      	sub	sp, #40	@ 0x28
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	f003 0310 	and.w	r3, r3, #16
 8007898:	2b00      	cmp	r3, #0
 800789a:	d068      	beq.n	800796e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	2210      	movs	r2, #16
 80078a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80078a4:	e049      	b.n	800793a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ac:	d045      	beq.n	800793a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80078ae:	f7fd fc97 	bl	80051e0 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	68ba      	ldr	r2, [r7, #8]
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d302      	bcc.n	80078c4 <I2C_IsErrorOccurred+0x54>
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d13a      	bne.n	800793a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80078d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078e6:	d121      	bne.n	800792c <I2C_IsErrorOccurred+0xbc>
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80078ee:	d01d      	beq.n	800792c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80078f0:	7cfb      	ldrb	r3, [r7, #19]
 80078f2:	2b20      	cmp	r3, #32
 80078f4:	d01a      	beq.n	800792c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007904:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007906:	f7fd fc6b 	bl	80051e0 <HAL_GetTick>
 800790a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800790c:	e00e      	b.n	800792c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800790e:	f7fd fc67 	bl	80051e0 <HAL_GetTick>
 8007912:	4602      	mov	r2, r0
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	1ad3      	subs	r3, r2, r3
 8007918:	2b19      	cmp	r3, #25
 800791a:	d907      	bls.n	800792c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	f043 0320 	orr.w	r3, r3, #32
 8007922:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800792a:	e006      	b.n	800793a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f003 0320 	and.w	r3, r3, #32
 8007936:	2b20      	cmp	r3, #32
 8007938:	d1e9      	bne.n	800790e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b20      	cmp	r3, #32
 8007946:	d003      	beq.n	8007950 <I2C_IsErrorOccurred+0xe0>
 8007948:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800794c:	2b00      	cmp	r3, #0
 800794e:	d0aa      	beq.n	80078a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007954:	2b00      	cmp	r3, #0
 8007956:	d103      	bne.n	8007960 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2220      	movs	r2, #32
 800795e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007960:	6a3b      	ldr	r3, [r7, #32]
 8007962:	f043 0304 	orr.w	r3, r3, #4
 8007966:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007976:	69bb      	ldr	r3, [r7, #24]
 8007978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00b      	beq.n	8007998 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	f043 0301 	orr.w	r3, r3, #1
 8007986:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007990:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00b      	beq.n	80079ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80079a2:	6a3b      	ldr	r3, [r7, #32]
 80079a4:	f043 0308 	orr.w	r3, r3, #8
 80079a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80079b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079b4:	2301      	movs	r3, #1
 80079b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80079ba:	69bb      	ldr	r3, [r7, #24]
 80079bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d00b      	beq.n	80079dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80079c4:	6a3b      	ldr	r3, [r7, #32]
 80079c6:	f043 0302 	orr.w	r3, r3, #2
 80079ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80079dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d01c      	beq.n	8007a1e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80079e4:	68f8      	ldr	r0, [r7, #12]
 80079e6:	f7ff fe63 	bl	80076b0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	6859      	ldr	r1, [r3, #4]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	4b0d      	ldr	r3, [pc, #52]	@ (8007a2c <I2C_IsErrorOccurred+0x1bc>)
 80079f6:	400b      	ands	r3, r1
 80079f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80079fe:	6a3b      	ldr	r3, [r7, #32]
 8007a00:	431a      	orrs	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3728      	adds	r7, #40	@ 0x28
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	fe00e800 	.word	0xfe00e800

08007a30 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	607b      	str	r3, [r7, #4]
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	817b      	strh	r3, [r7, #10]
 8007a3e:	4613      	mov	r3, r2
 8007a40:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a42:	897b      	ldrh	r3, [r7, #10]
 8007a44:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a48:	7a7b      	ldrb	r3, [r7, #9]
 8007a4a:	041b      	lsls	r3, r3, #16
 8007a4c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a50:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a5e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685a      	ldr	r2, [r3, #4]
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	0d5b      	lsrs	r3, r3, #21
 8007a6a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8007a6e:	4b08      	ldr	r3, [pc, #32]	@ (8007a90 <I2C_TransferConfig+0x60>)
 8007a70:	430b      	orrs	r3, r1
 8007a72:	43db      	mvns	r3, r3
 8007a74:	ea02 0103 	and.w	r1, r2, r3
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007a82:	bf00      	nop
 8007a84:	371c      	adds	r7, #28
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	03ff63ff 	.word	0x03ff63ff

08007a94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d138      	bne.n	8007b1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e032      	b.n	8007b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2224      	movs	r2, #36	@ 0x24
 8007ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f022 0201 	bic.w	r2, r2, #1
 8007ad6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007ae6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6819      	ldr	r1, [r3, #0]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	683a      	ldr	r2, [r7, #0]
 8007af4:	430a      	orrs	r2, r1
 8007af6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e000      	b.n	8007b1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007b1c:	2302      	movs	r3, #2
  }
}
 8007b1e:	4618      	mov	r0, r3
 8007b20:	370c      	adds	r7, #12
 8007b22:	46bd      	mov	sp, r7
 8007b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b28:	4770      	bx	lr

08007b2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007b2a:	b480      	push	{r7}
 8007b2c:	b085      	sub	sp, #20
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
 8007b32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b3a:	b2db      	uxtb	r3, r3
 8007b3c:	2b20      	cmp	r3, #32
 8007b3e:	d139      	bne.n	8007bb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d101      	bne.n	8007b4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007b4a:	2302      	movs	r3, #2
 8007b4c:	e033      	b.n	8007bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2201      	movs	r2, #1
 8007b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2224      	movs	r2, #36	@ 0x24
 8007b5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0201 	bic.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8007b7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	021b      	lsls	r3, r3, #8
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	4313      	orrs	r3, r2
 8007b86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68fa      	ldr	r2, [r7, #12]
 8007b8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0201 	orr.w	r2, r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2220      	movs	r2, #32
 8007ba4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	e000      	b.n	8007bb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007bb4:	2302      	movs	r3, #2
  }
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
	...

08007bc4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e0bf      	b.n	8007d56 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d106      	bne.n	8007bf0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fa fa02 	bl	8001ff4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2202      	movs	r2, #2
 8007bf4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699a      	ldr	r2, [r3, #24]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8007c06:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6999      	ldr	r1, [r3, #24]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c1c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6899      	ldr	r1, [r3, #8]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	4b4a      	ldr	r3, [pc, #296]	@ (8007d60 <HAL_LTDC_Init+0x19c>)
 8007c38:	400b      	ands	r3, r1
 8007c3a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	695b      	ldr	r3, [r3, #20]
 8007c40:	041b      	lsls	r3, r3, #16
 8007c42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6899      	ldr	r1, [r3, #8]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	699a      	ldr	r2, [r3, #24]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	431a      	orrs	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68d9      	ldr	r1, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681a      	ldr	r2, [r3, #0]
 8007c64:	4b3e      	ldr	r3, [pc, #248]	@ (8007d60 <HAL_LTDC_Init+0x19c>)
 8007c66:	400b      	ands	r3, r1
 8007c68:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	69db      	ldr	r3, [r3, #28]
 8007c6e:	041b      	lsls	r3, r3, #16
 8007c70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	68d9      	ldr	r1, [r3, #12]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a1a      	ldr	r2, [r3, #32]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	430a      	orrs	r2, r1
 8007c86:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6919      	ldr	r1, [r3, #16]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4b33      	ldr	r3, [pc, #204]	@ (8007d60 <HAL_LTDC_Init+0x19c>)
 8007c94:	400b      	ands	r3, r1
 8007c96:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c9c:	041b      	lsls	r3, r3, #16
 8007c9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6919      	ldr	r1, [r3, #16]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	431a      	orrs	r2, r3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6959      	ldr	r1, [r3, #20]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	4b27      	ldr	r3, [pc, #156]	@ (8007d60 <HAL_LTDC_Init+0x19c>)
 8007cc2:	400b      	ands	r3, r1
 8007cc4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cca:	041b      	lsls	r3, r3, #16
 8007ccc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	6959      	ldr	r1, [r3, #20]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	431a      	orrs	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	430a      	orrs	r2, r1
 8007ce2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007cea:	021b      	lsls	r3, r3, #8
 8007cec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8007cf4:	041b      	lsls	r3, r3, #16
 8007cf6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8007d06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8007d0e:	68ba      	ldr	r2, [r7, #8]
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	430a      	orrs	r2, r1
 8007d22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0206 	orr.w	r2, r2, #6
 8007d32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f042 0201 	orr.w	r2, r2, #1
 8007d42:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	f000f800 	.word	0xf000f800

08007d64 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d72:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d7a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	f003 0304 	and.w	r3, r3, #4
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d023      	beq.n	8007dce <HAL_LTDC_IRQHandler+0x6a>
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d01e      	beq.n	8007dce <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f022 0204 	bic.w	r2, r2, #4
 8007d9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2204      	movs	r2, #4
 8007da6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007dae:	f043 0201 	orr.w	r2, r3, #1
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2204      	movs	r2, #4
 8007dbc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007dc8:	6878      	ldr	r0, [r7, #4]
 8007dca:	f000 f86f 	bl	8007eac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d023      	beq.n	8007e20 <HAL_LTDC_IRQHandler+0xbc>
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	f003 0302 	and.w	r3, r3, #2
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d01e      	beq.n	8007e20 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0202 	bic.w	r2, r2, #2
 8007df0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2202      	movs	r2, #2
 8007df8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007e00:	f043 0202 	orr.w	r2, r3, #2
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2204      	movs	r2, #4
 8007e0e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f000 f846 	bl	8007eac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d01b      	beq.n	8007e62 <HAL_LTDC_IRQHandler+0xfe>
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d016      	beq.n	8007e62 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 0201 	bic.w	r2, r2, #1
 8007e42:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2201      	movs	r2, #1
 8007e50:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f82f 	bl	8007ec0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f003 0308 	and.w	r3, r3, #8
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d01b      	beq.n	8007ea4 <HAL_LTDC_IRQHandler+0x140>
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	f003 0308 	and.w	r3, r3, #8
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d016      	beq.n	8007ea4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f022 0208 	bic.w	r2, r2, #8
 8007e84:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	2208      	movs	r2, #8
 8007e8c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f818 	bl	8007ed4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007ea4:	bf00      	nop
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007eb4:	bf00      	nop
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b083      	sub	sp, #12
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007ec8:	bf00      	nop
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007edc:	bf00      	nop
 8007ede:	370c      	adds	r7, #12
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007ee8:	b5b0      	push	{r4, r5, r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d101      	bne.n	8007f02 <HAL_LTDC_ConfigLayer+0x1a>
 8007efe:	2302      	movs	r3, #2
 8007f00:	e02c      	b.n	8007f5c <HAL_LTDC_ConfigLayer+0x74>
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2201      	movs	r2, #1
 8007f06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2134      	movs	r1, #52	@ 0x34
 8007f18:	fb01 f303 	mul.w	r3, r1, r3
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	4614      	mov	r4, r2
 8007f26:	461d      	mov	r5, r3
 8007f28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f34:	682b      	ldr	r3, [r5, #0]
 8007f36:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f81f 	bl	8007f80 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2201      	movs	r2, #1
 8007f48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bdb0      	pop	{r4, r5, r7, pc}

08007f64 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007f72:	b2db      	uxtb	r3, r3
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b089      	sub	sp, #36	@ 0x24
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	0c1b      	lsrs	r3, r3, #16
 8007f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f9c:	4413      	add	r3, r2
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	01db      	lsls	r3, r3, #7
 8007fac:	4413      	add	r3, r2
 8007fae:	3384      	adds	r3, #132	@ 0x84
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	68fa      	ldr	r2, [r7, #12]
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	4611      	mov	r1, r2
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	01d2      	lsls	r2, r2, #7
 8007fbc:	440a      	add	r2, r1
 8007fbe:	3284      	adds	r2, #132	@ 0x84
 8007fc0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007fc4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	0c1b      	lsrs	r3, r3, #16
 8007fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fd6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007fd8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4619      	mov	r1, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	01db      	lsls	r3, r3, #7
 8007fe4:	440b      	add	r3, r1
 8007fe6:	3384      	adds	r3, #132	@ 0x84
 8007fe8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007fee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	68da      	ldr	r2, [r3, #12]
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	68db      	ldr	r3, [r3, #12]
 8007ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ffe:	4413      	add	r3, r2
 8008000:	041b      	lsls	r3, r3, #16
 8008002:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	461a      	mov	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	01db      	lsls	r3, r3, #7
 800800e:	4413      	add	r3, r2
 8008010:	3384      	adds	r3, #132	@ 0x84
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	6812      	ldr	r2, [r2, #0]
 8008018:	4611      	mov	r1, r2
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	01d2      	lsls	r2, r2, #7
 800801e:	440a      	add	r2, r1
 8008020:	3284      	adds	r2, #132	@ 0x84
 8008022:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8008026:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	68db      	ldr	r3, [r3, #12]
 8008032:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008036:	4413      	add	r3, r2
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4619      	mov	r1, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	01db      	lsls	r3, r3, #7
 8008044:	440b      	add	r3, r1
 8008046:	3384      	adds	r3, #132	@ 0x84
 8008048:	4619      	mov	r1, r3
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	4313      	orrs	r3, r2
 800804e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	01db      	lsls	r3, r3, #7
 800805a:	4413      	add	r3, r2
 800805c:	3384      	adds	r3, #132	@ 0x84
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	6812      	ldr	r2, [r2, #0]
 8008064:	4611      	mov	r1, r2
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	01d2      	lsls	r2, r2, #7
 800806a:	440a      	add	r2, r1
 800806c:	3284      	adds	r2, #132	@ 0x84
 800806e:	f023 0307 	bic.w	r3, r3, #7
 8008072:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	461a      	mov	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	01db      	lsls	r3, r3, #7
 800807e:	4413      	add	r3, r2
 8008080:	3384      	adds	r3, #132	@ 0x84
 8008082:	461a      	mov	r2, r3
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800809a:	041b      	lsls	r3, r3, #16
 800809c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	061b      	lsls	r3, r3, #24
 80080a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	461a      	mov	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	01db      	lsls	r3, r3, #7
 80080b0:	4413      	add	r3, r2
 80080b2:	3384      	adds	r3, #132	@ 0x84
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	01db      	lsls	r3, r3, #7
 80080c0:	4413      	add	r3, r2
 80080c2:	3384      	adds	r3, #132	@ 0x84
 80080c4:	461a      	mov	r2, r3
 80080c6:	2300      	movs	r3, #0
 80080c8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80080d0:	461a      	mov	r2, r3
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	431a      	orrs	r2, r3
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	431a      	orrs	r2, r3
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	4619      	mov	r1, r3
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	01db      	lsls	r3, r3, #7
 80080e4:	440b      	add	r3, r1
 80080e6:	3384      	adds	r3, #132	@ 0x84
 80080e8:	4619      	mov	r1, r3
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	4313      	orrs	r3, r2
 80080ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	461a      	mov	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	01db      	lsls	r3, r3, #7
 80080fa:	4413      	add	r3, r2
 80080fc:	3384      	adds	r3, #132	@ 0x84
 80080fe:	695b      	ldr	r3, [r3, #20]
 8008100:	68fa      	ldr	r2, [r7, #12]
 8008102:	6812      	ldr	r2, [r2, #0]
 8008104:	4611      	mov	r1, r2
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	01d2      	lsls	r2, r2, #7
 800810a:	440a      	add	r2, r1
 800810c:	3284      	adds	r2, #132	@ 0x84
 800810e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8008112:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	461a      	mov	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	01db      	lsls	r3, r3, #7
 800811e:	4413      	add	r3, r2
 8008120:	3384      	adds	r3, #132	@ 0x84
 8008122:	461a      	mov	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	695b      	ldr	r3, [r3, #20]
 8008128:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	461a      	mov	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	01db      	lsls	r3, r3, #7
 8008134:	4413      	add	r3, r2
 8008136:	3384      	adds	r3, #132	@ 0x84
 8008138:	69da      	ldr	r2, [r3, #28]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4619      	mov	r1, r3
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	01db      	lsls	r3, r3, #7
 8008144:	440b      	add	r3, r1
 8008146:	3384      	adds	r3, #132	@ 0x84
 8008148:	4619      	mov	r1, r3
 800814a:	4b58      	ldr	r3, [pc, #352]	@ (80082ac <LTDC_SetConfig+0x32c>)
 800814c:	4013      	ands	r3, r2
 800814e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	69da      	ldr	r2, [r3, #28]
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	6a1b      	ldr	r3, [r3, #32]
 8008158:	68f9      	ldr	r1, [r7, #12]
 800815a:	6809      	ldr	r1, [r1, #0]
 800815c:	4608      	mov	r0, r1
 800815e:	6879      	ldr	r1, [r7, #4]
 8008160:	01c9      	lsls	r1, r1, #7
 8008162:	4401      	add	r1, r0
 8008164:	3184      	adds	r1, #132	@ 0x84
 8008166:	4313      	orrs	r3, r2
 8008168:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	461a      	mov	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	01db      	lsls	r3, r3, #7
 8008174:	4413      	add	r3, r2
 8008176:	3384      	adds	r3, #132	@ 0x84
 8008178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	01db      	lsls	r3, r3, #7
 8008184:	4413      	add	r3, r2
 8008186:	3384      	adds	r3, #132	@ 0x84
 8008188:	461a      	mov	r2, r3
 800818a:	2300      	movs	r3, #0
 800818c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	01db      	lsls	r3, r3, #7
 8008198:	4413      	add	r3, r2
 800819a:	3384      	adds	r3, #132	@ 0x84
 800819c:	461a      	mov	r2, r3
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a2:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d102      	bne.n	80081b2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80081ac:	2304      	movs	r3, #4
 80081ae:	61fb      	str	r3, [r7, #28]
 80081b0:	e01b      	b.n	80081ea <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d102      	bne.n	80081c0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80081ba:	2303      	movs	r3, #3
 80081bc:	61fb      	str	r3, [r7, #28]
 80081be:	e014      	b.n	80081ea <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	691b      	ldr	r3, [r3, #16]
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	d00b      	beq.n	80081e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80081cc:	2b02      	cmp	r3, #2
 80081ce:	d007      	beq.n	80081e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d003      	beq.n	80081e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80081dc:	2b07      	cmp	r3, #7
 80081de:	d102      	bne.n	80081e6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80081e0:	2302      	movs	r3, #2
 80081e2:	61fb      	str	r3, [r7, #28]
 80081e4:	e001      	b.n	80081ea <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80081e6:	2301      	movs	r3, #1
 80081e8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	01db      	lsls	r3, r3, #7
 80081f4:	4413      	add	r3, r2
 80081f6:	3384      	adds	r3, #132	@ 0x84
 80081f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	6812      	ldr	r2, [r2, #0]
 80081fe:	4611      	mov	r1, r2
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	01d2      	lsls	r2, r2, #7
 8008204:	440a      	add	r2, r1
 8008206:	3284      	adds	r2, #132	@ 0x84
 8008208:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800820c:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008212:	69fa      	ldr	r2, [r7, #28]
 8008214:	fb02 f303 	mul.w	r3, r2, r3
 8008218:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	6859      	ldr	r1, [r3, #4]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	1acb      	subs	r3, r1, r3
 8008224:	69f9      	ldr	r1, [r7, #28]
 8008226:	fb01 f303 	mul.w	r3, r1, r3
 800822a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800822c:	68f9      	ldr	r1, [r7, #12]
 800822e:	6809      	ldr	r1, [r1, #0]
 8008230:	4608      	mov	r0, r1
 8008232:	6879      	ldr	r1, [r7, #4]
 8008234:	01c9      	lsls	r1, r1, #7
 8008236:	4401      	add	r1, r0
 8008238:	3184      	adds	r1, #132	@ 0x84
 800823a:	4313      	orrs	r3, r2
 800823c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	461a      	mov	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	01db      	lsls	r3, r3, #7
 8008248:	4413      	add	r3, r2
 800824a:	3384      	adds	r3, #132	@ 0x84
 800824c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4619      	mov	r1, r3
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	01db      	lsls	r3, r3, #7
 8008258:	440b      	add	r3, r1
 800825a:	3384      	adds	r3, #132	@ 0x84
 800825c:	4619      	mov	r1, r3
 800825e:	4b14      	ldr	r3, [pc, #80]	@ (80082b0 <LTDC_SetConfig+0x330>)
 8008260:	4013      	ands	r3, r2
 8008262:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	01db      	lsls	r3, r3, #7
 800826e:	4413      	add	r3, r2
 8008270:	3384      	adds	r3, #132	@ 0x84
 8008272:	461a      	mov	r2, r3
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008278:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	461a      	mov	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	01db      	lsls	r3, r3, #7
 8008284:	4413      	add	r3, r2
 8008286:	3384      	adds	r3, #132	@ 0x84
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	6812      	ldr	r2, [r2, #0]
 800828e:	4611      	mov	r1, r2
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	01d2      	lsls	r2, r2, #7
 8008294:	440a      	add	r2, r1
 8008296:	3284      	adds	r2, #132	@ 0x84
 8008298:	f043 0301 	orr.w	r3, r3, #1
 800829c:	6013      	str	r3, [r2, #0]
}
 800829e:	bf00      	nop
 80082a0:	3724      	adds	r7, #36	@ 0x24
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	fffff8f8 	.word	0xfffff8f8
 80082b0:	fffff800 	.word	0xfffff800

080082b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80082b4:	b480      	push	{r7}
 80082b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082b8:	4b05      	ldr	r3, [pc, #20]	@ (80082d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a04      	ldr	r2, [pc, #16]	@ (80082d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80082be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082c2:	6013      	str	r3, [r2, #0]
}
 80082c4:	bf00      	nop
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr
 80082ce:	bf00      	nop
 80082d0:	40007000 	.word	0x40007000

080082d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b082      	sub	sp, #8
 80082d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80082da:	2300      	movs	r3, #0
 80082dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80082de:	4b23      	ldr	r3, [pc, #140]	@ (800836c <HAL_PWREx_EnableOverDrive+0x98>)
 80082e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e2:	4a22      	ldr	r2, [pc, #136]	@ (800836c <HAL_PWREx_EnableOverDrive+0x98>)
 80082e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80082ea:	4b20      	ldr	r3, [pc, #128]	@ (800836c <HAL_PWREx_EnableOverDrive+0x98>)
 80082ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082f2:	603b      	str	r3, [r7, #0]
 80082f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80082f6:	4b1e      	ldr	r3, [pc, #120]	@ (8008370 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a1d      	ldr	r2, [pc, #116]	@ (8008370 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008300:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008302:	f7fc ff6d 	bl	80051e0 <HAL_GetTick>
 8008306:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008308:	e009      	b.n	800831e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800830a:	f7fc ff69 	bl	80051e0 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008318:	d901      	bls.n	800831e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e022      	b.n	8008364 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800831e:	4b14      	ldr	r3, [pc, #80]	@ (8008370 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800832a:	d1ee      	bne.n	800830a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800832c:	4b10      	ldr	r3, [pc, #64]	@ (8008370 <HAL_PWREx_EnableOverDrive+0x9c>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a0f      	ldr	r2, [pc, #60]	@ (8008370 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008332:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008336:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008338:	f7fc ff52 	bl	80051e0 <HAL_GetTick>
 800833c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800833e:	e009      	b.n	8008354 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008340:	f7fc ff4e 	bl	80051e0 <HAL_GetTick>
 8008344:	4602      	mov	r2, r0
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800834e:	d901      	bls.n	8008354 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e007      	b.n	8008364 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008354:	4b06      	ldr	r3, [pc, #24]	@ (8008370 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800835c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008360:	d1ee      	bne.n	8008340 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	40023800 	.word	0x40023800
 8008370:	40007000 	.word	0x40007000

08008374 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b086      	sub	sp, #24
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800837c:	2300      	movs	r3, #0
 800837e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e291      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	f000 8087 	beq.w	80084a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008398:	4b96      	ldr	r3, [pc, #600]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f003 030c 	and.w	r3, r3, #12
 80083a0:	2b04      	cmp	r3, #4
 80083a2:	d00c      	beq.n	80083be <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80083a4:	4b93      	ldr	r3, [pc, #588]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f003 030c 	and.w	r3, r3, #12
 80083ac:	2b08      	cmp	r3, #8
 80083ae:	d112      	bne.n	80083d6 <HAL_RCC_OscConfig+0x62>
 80083b0:	4b90      	ldr	r3, [pc, #576]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80083b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80083bc:	d10b      	bne.n	80083d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083be:	4b8d      	ldr	r3, [pc, #564]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d06c      	beq.n	80084a4 <HAL_RCC_OscConfig+0x130>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d168      	bne.n	80084a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e26b      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083de:	d106      	bne.n	80083ee <HAL_RCC_OscConfig+0x7a>
 80083e0:	4b84      	ldr	r3, [pc, #528]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a83      	ldr	r2, [pc, #524]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80083e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80083ea:	6013      	str	r3, [r2, #0]
 80083ec:	e02e      	b.n	800844c <HAL_RCC_OscConfig+0xd8>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10c      	bne.n	8008410 <HAL_RCC_OscConfig+0x9c>
 80083f6:	4b7f      	ldr	r3, [pc, #508]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a7e      	ldr	r2, [pc, #504]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80083fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	4b7c      	ldr	r3, [pc, #496]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a7b      	ldr	r2, [pc, #492]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008408:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	e01d      	b.n	800844c <HAL_RCC_OscConfig+0xd8>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008418:	d10c      	bne.n	8008434 <HAL_RCC_OscConfig+0xc0>
 800841a:	4b76      	ldr	r3, [pc, #472]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a75      	ldr	r2, [pc, #468]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008420:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008424:	6013      	str	r3, [r2, #0]
 8008426:	4b73      	ldr	r3, [pc, #460]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a72      	ldr	r2, [pc, #456]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 800842c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008430:	6013      	str	r3, [r2, #0]
 8008432:	e00b      	b.n	800844c <HAL_RCC_OscConfig+0xd8>
 8008434:	4b6f      	ldr	r3, [pc, #444]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a6e      	ldr	r2, [pc, #440]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 800843a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800843e:	6013      	str	r3, [r2, #0]
 8008440:	4b6c      	ldr	r3, [pc, #432]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a6b      	ldr	r2, [pc, #428]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008446:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800844a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d013      	beq.n	800847c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008454:	f7fc fec4 	bl	80051e0 <HAL_GetTick>
 8008458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800845a:	e008      	b.n	800846e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800845c:	f7fc fec0 	bl	80051e0 <HAL_GetTick>
 8008460:	4602      	mov	r2, r0
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	1ad3      	subs	r3, r2, r3
 8008466:	2b64      	cmp	r3, #100	@ 0x64
 8008468:	d901      	bls.n	800846e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800846a:	2303      	movs	r3, #3
 800846c:	e21f      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800846e:	4b61      	ldr	r3, [pc, #388]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008476:	2b00      	cmp	r3, #0
 8008478:	d0f0      	beq.n	800845c <HAL_RCC_OscConfig+0xe8>
 800847a:	e014      	b.n	80084a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800847c:	f7fc feb0 	bl	80051e0 <HAL_GetTick>
 8008480:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008482:	e008      	b.n	8008496 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008484:	f7fc feac 	bl	80051e0 <HAL_GetTick>
 8008488:	4602      	mov	r2, r0
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	2b64      	cmp	r3, #100	@ 0x64
 8008490:	d901      	bls.n	8008496 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008492:	2303      	movs	r3, #3
 8008494:	e20b      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008496:	4b57      	ldr	r3, [pc, #348]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d1f0      	bne.n	8008484 <HAL_RCC_OscConfig+0x110>
 80084a2:	e000      	b.n	80084a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80084a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d069      	beq.n	8008586 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80084b2:	4b50      	ldr	r3, [pc, #320]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f003 030c 	and.w	r3, r3, #12
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d00b      	beq.n	80084d6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80084be:	4b4d      	ldr	r3, [pc, #308]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80084c0:	689b      	ldr	r3, [r3, #8]
 80084c2:	f003 030c 	and.w	r3, r3, #12
 80084c6:	2b08      	cmp	r3, #8
 80084c8:	d11c      	bne.n	8008504 <HAL_RCC_OscConfig+0x190>
 80084ca:	4b4a      	ldr	r3, [pc, #296]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d116      	bne.n	8008504 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80084d6:	4b47      	ldr	r3, [pc, #284]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d005      	beq.n	80084ee <HAL_RCC_OscConfig+0x17a>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d001      	beq.n	80084ee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e1df      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084ee:	4b41      	ldr	r3, [pc, #260]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	691b      	ldr	r3, [r3, #16]
 80084fa:	00db      	lsls	r3, r3, #3
 80084fc:	493d      	ldr	r1, [pc, #244]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008502:	e040      	b.n	8008586 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d023      	beq.n	8008554 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800850c:	4b39      	ldr	r3, [pc, #228]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a38      	ldr	r2, [pc, #224]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008512:	f043 0301 	orr.w	r3, r3, #1
 8008516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008518:	f7fc fe62 	bl	80051e0 <HAL_GetTick>
 800851c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800851e:	e008      	b.n	8008532 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008520:	f7fc fe5e 	bl	80051e0 <HAL_GetTick>
 8008524:	4602      	mov	r2, r0
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	1ad3      	subs	r3, r2, r3
 800852a:	2b02      	cmp	r3, #2
 800852c:	d901      	bls.n	8008532 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e1bd      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008532:	4b30      	ldr	r3, [pc, #192]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f003 0302 	and.w	r3, r3, #2
 800853a:	2b00      	cmp	r3, #0
 800853c:	d0f0      	beq.n	8008520 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800853e:	4b2d      	ldr	r3, [pc, #180]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	00db      	lsls	r3, r3, #3
 800854c:	4929      	ldr	r1, [pc, #164]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 800854e:	4313      	orrs	r3, r2
 8008550:	600b      	str	r3, [r1, #0]
 8008552:	e018      	b.n	8008586 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008554:	4b27      	ldr	r3, [pc, #156]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a26      	ldr	r2, [pc, #152]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 800855a:	f023 0301 	bic.w	r3, r3, #1
 800855e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008560:	f7fc fe3e 	bl	80051e0 <HAL_GetTick>
 8008564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008566:	e008      	b.n	800857a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008568:	f7fc fe3a 	bl	80051e0 <HAL_GetTick>
 800856c:	4602      	mov	r2, r0
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	1ad3      	subs	r3, r2, r3
 8008572:	2b02      	cmp	r3, #2
 8008574:	d901      	bls.n	800857a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e199      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800857a:	4b1e      	ldr	r3, [pc, #120]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0302 	and.w	r3, r3, #2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1f0      	bne.n	8008568 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 0308 	and.w	r3, r3, #8
 800858e:	2b00      	cmp	r3, #0
 8008590:	d038      	beq.n	8008604 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	695b      	ldr	r3, [r3, #20]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d019      	beq.n	80085ce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800859a:	4b16      	ldr	r3, [pc, #88]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 800859c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800859e:	4a15      	ldr	r2, [pc, #84]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80085a0:	f043 0301 	orr.w	r3, r3, #1
 80085a4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085a6:	f7fc fe1b 	bl	80051e0 <HAL_GetTick>
 80085aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085ac:	e008      	b.n	80085c0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085ae:	f7fc fe17 	bl	80051e0 <HAL_GetTick>
 80085b2:	4602      	mov	r2, r0
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	1ad3      	subs	r3, r2, r3
 80085b8:	2b02      	cmp	r3, #2
 80085ba:	d901      	bls.n	80085c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80085bc:	2303      	movs	r3, #3
 80085be:	e176      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80085c0:	4b0c      	ldr	r3, [pc, #48]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80085c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085c4:	f003 0302 	and.w	r3, r3, #2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d0f0      	beq.n	80085ae <HAL_RCC_OscConfig+0x23a>
 80085cc:	e01a      	b.n	8008604 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085ce:	4b09      	ldr	r3, [pc, #36]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80085d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085d2:	4a08      	ldr	r2, [pc, #32]	@ (80085f4 <HAL_RCC_OscConfig+0x280>)
 80085d4:	f023 0301 	bic.w	r3, r3, #1
 80085d8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085da:	f7fc fe01 	bl	80051e0 <HAL_GetTick>
 80085de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085e0:	e00a      	b.n	80085f8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085e2:	f7fc fdfd 	bl	80051e0 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2b02      	cmp	r3, #2
 80085ee:	d903      	bls.n	80085f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e15c      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
 80085f4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80085f8:	4b91      	ldr	r3, [pc, #580]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80085fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80085fc:	f003 0302 	and.w	r3, r3, #2
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1ee      	bne.n	80085e2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b00      	cmp	r3, #0
 800860e:	f000 80a4 	beq.w	800875a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008612:	4b8b      	ldr	r3, [pc, #556]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10d      	bne.n	800863a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800861e:	4b88      	ldr	r3, [pc, #544]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008622:	4a87      	ldr	r2, [pc, #540]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008628:	6413      	str	r3, [r2, #64]	@ 0x40
 800862a:	4b85      	ldr	r3, [pc, #532]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 800862c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800862e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008632:	60bb      	str	r3, [r7, #8]
 8008634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008636:	2301      	movs	r3, #1
 8008638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800863a:	4b82      	ldr	r3, [pc, #520]	@ (8008844 <HAL_RCC_OscConfig+0x4d0>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008642:	2b00      	cmp	r3, #0
 8008644:	d118      	bne.n	8008678 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008646:	4b7f      	ldr	r3, [pc, #508]	@ (8008844 <HAL_RCC_OscConfig+0x4d0>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a7e      	ldr	r2, [pc, #504]	@ (8008844 <HAL_RCC_OscConfig+0x4d0>)
 800864c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008652:	f7fc fdc5 	bl	80051e0 <HAL_GetTick>
 8008656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008658:	e008      	b.n	800866c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800865a:	f7fc fdc1 	bl	80051e0 <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	1ad3      	subs	r3, r2, r3
 8008664:	2b64      	cmp	r3, #100	@ 0x64
 8008666:	d901      	bls.n	800866c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e120      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800866c:	4b75      	ldr	r3, [pc, #468]	@ (8008844 <HAL_RCC_OscConfig+0x4d0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008674:	2b00      	cmp	r3, #0
 8008676:	d0f0      	beq.n	800865a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d106      	bne.n	800868e <HAL_RCC_OscConfig+0x31a>
 8008680:	4b6f      	ldr	r3, [pc, #444]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008684:	4a6e      	ldr	r2, [pc, #440]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008686:	f043 0301 	orr.w	r3, r3, #1
 800868a:	6713      	str	r3, [r2, #112]	@ 0x70
 800868c:	e02d      	b.n	80086ea <HAL_RCC_OscConfig+0x376>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	689b      	ldr	r3, [r3, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10c      	bne.n	80086b0 <HAL_RCC_OscConfig+0x33c>
 8008696:	4b6a      	ldr	r3, [pc, #424]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008698:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800869a:	4a69      	ldr	r2, [pc, #420]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 800869c:	f023 0301 	bic.w	r3, r3, #1
 80086a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80086a2:	4b67      	ldr	r3, [pc, #412]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80086a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a6:	4a66      	ldr	r2, [pc, #408]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80086a8:	f023 0304 	bic.w	r3, r3, #4
 80086ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80086ae:	e01c      	b.n	80086ea <HAL_RCC_OscConfig+0x376>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	2b05      	cmp	r3, #5
 80086b6:	d10c      	bne.n	80086d2 <HAL_RCC_OscConfig+0x35e>
 80086b8:	4b61      	ldr	r3, [pc, #388]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80086ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086bc:	4a60      	ldr	r2, [pc, #384]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80086be:	f043 0304 	orr.w	r3, r3, #4
 80086c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80086c4:	4b5e      	ldr	r3, [pc, #376]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80086c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086c8:	4a5d      	ldr	r2, [pc, #372]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80086ca:	f043 0301 	orr.w	r3, r3, #1
 80086ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80086d0:	e00b      	b.n	80086ea <HAL_RCC_OscConfig+0x376>
 80086d2:	4b5b      	ldr	r3, [pc, #364]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80086d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086d6:	4a5a      	ldr	r2, [pc, #360]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80086d8:	f023 0301 	bic.w	r3, r3, #1
 80086dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80086de:	4b58      	ldr	r3, [pc, #352]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80086e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086e2:	4a57      	ldr	r2, [pc, #348]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80086e4:	f023 0304 	bic.w	r3, r3, #4
 80086e8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d015      	beq.n	800871e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f2:	f7fc fd75 	bl	80051e0 <HAL_GetTick>
 80086f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80086f8:	e00a      	b.n	8008710 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086fa:	f7fc fd71 	bl	80051e0 <HAL_GetTick>
 80086fe:	4602      	mov	r2, r0
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	1ad3      	subs	r3, r2, r3
 8008704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008708:	4293      	cmp	r3, r2
 800870a:	d901      	bls.n	8008710 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800870c:	2303      	movs	r3, #3
 800870e:	e0ce      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008710:	4b4b      	ldr	r3, [pc, #300]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008714:	f003 0302 	and.w	r3, r3, #2
 8008718:	2b00      	cmp	r3, #0
 800871a:	d0ee      	beq.n	80086fa <HAL_RCC_OscConfig+0x386>
 800871c:	e014      	b.n	8008748 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800871e:	f7fc fd5f 	bl	80051e0 <HAL_GetTick>
 8008722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008724:	e00a      	b.n	800873c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008726:	f7fc fd5b 	bl	80051e0 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008734:	4293      	cmp	r3, r2
 8008736:	d901      	bls.n	800873c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008738:	2303      	movs	r3, #3
 800873a:	e0b8      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800873c:	4b40      	ldr	r3, [pc, #256]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 800873e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008740:	f003 0302 	and.w	r3, r3, #2
 8008744:	2b00      	cmp	r3, #0
 8008746:	d1ee      	bne.n	8008726 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008748:	7dfb      	ldrb	r3, [r7, #23]
 800874a:	2b01      	cmp	r3, #1
 800874c:	d105      	bne.n	800875a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800874e:	4b3c      	ldr	r3, [pc, #240]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008752:	4a3b      	ldr	r2, [pc, #236]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008754:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008758:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	2b00      	cmp	r3, #0
 8008760:	f000 80a4 	beq.w	80088ac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008764:	4b36      	ldr	r3, [pc, #216]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008766:	689b      	ldr	r3, [r3, #8]
 8008768:	f003 030c 	and.w	r3, r3, #12
 800876c:	2b08      	cmp	r3, #8
 800876e:	d06b      	beq.n	8008848 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	2b02      	cmp	r3, #2
 8008776:	d149      	bne.n	800880c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008778:	4b31      	ldr	r3, [pc, #196]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a30      	ldr	r2, [pc, #192]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 800877e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008782:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008784:	f7fc fd2c 	bl	80051e0 <HAL_GetTick>
 8008788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800878a:	e008      	b.n	800879e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800878c:	f7fc fd28 	bl	80051e0 <HAL_GetTick>
 8008790:	4602      	mov	r2, r0
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	1ad3      	subs	r3, r2, r3
 8008796:	2b02      	cmp	r3, #2
 8008798:	d901      	bls.n	800879e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800879a:	2303      	movs	r3, #3
 800879c:	e087      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800879e:	4b28      	ldr	r3, [pc, #160]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d1f0      	bne.n	800878c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	69da      	ldr	r2, [r3, #28]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	431a      	orrs	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087b8:	019b      	lsls	r3, r3, #6
 80087ba:	431a      	orrs	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c0:	085b      	lsrs	r3, r3, #1
 80087c2:	3b01      	subs	r3, #1
 80087c4:	041b      	lsls	r3, r3, #16
 80087c6:	431a      	orrs	r2, r3
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087cc:	061b      	lsls	r3, r3, #24
 80087ce:	4313      	orrs	r3, r2
 80087d0:	4a1b      	ldr	r2, [pc, #108]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80087d2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087d6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80087d8:	4b19      	ldr	r3, [pc, #100]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a18      	ldr	r2, [pc, #96]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 80087de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80087e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e4:	f7fc fcfc 	bl	80051e0 <HAL_GetTick>
 80087e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087ea:	e008      	b.n	80087fe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087ec:	f7fc fcf8 	bl	80051e0 <HAL_GetTick>
 80087f0:	4602      	mov	r2, r0
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	1ad3      	subs	r3, r2, r3
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d901      	bls.n	80087fe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80087fa:	2303      	movs	r3, #3
 80087fc:	e057      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80087fe:	4b10      	ldr	r3, [pc, #64]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008806:	2b00      	cmp	r3, #0
 8008808:	d0f0      	beq.n	80087ec <HAL_RCC_OscConfig+0x478>
 800880a:	e04f      	b.n	80088ac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800880c:	4b0c      	ldr	r3, [pc, #48]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a0b      	ldr	r2, [pc, #44]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008812:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008818:	f7fc fce2 	bl	80051e0 <HAL_GetTick>
 800881c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800881e:	e008      	b.n	8008832 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008820:	f7fc fcde 	bl	80051e0 <HAL_GetTick>
 8008824:	4602      	mov	r2, r0
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	2b02      	cmp	r3, #2
 800882c:	d901      	bls.n	8008832 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800882e:	2303      	movs	r3, #3
 8008830:	e03d      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008832:	4b03      	ldr	r3, [pc, #12]	@ (8008840 <HAL_RCC_OscConfig+0x4cc>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800883a:	2b00      	cmp	r3, #0
 800883c:	d1f0      	bne.n	8008820 <HAL_RCC_OscConfig+0x4ac>
 800883e:	e035      	b.n	80088ac <HAL_RCC_OscConfig+0x538>
 8008840:	40023800 	.word	0x40023800
 8008844:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008848:	4b1b      	ldr	r3, [pc, #108]	@ (80088b8 <HAL_RCC_OscConfig+0x544>)
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	2b01      	cmp	r3, #1
 8008854:	d028      	beq.n	80088a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008860:	429a      	cmp	r2, r3
 8008862:	d121      	bne.n	80088a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800886e:	429a      	cmp	r2, r3
 8008870:	d11a      	bne.n	80088a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008878:	4013      	ands	r3, r2
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800887e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008880:	4293      	cmp	r3, r2
 8008882:	d111      	bne.n	80088a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800888e:	085b      	lsrs	r3, r3, #1
 8008890:	3b01      	subs	r3, #1
 8008892:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008894:	429a      	cmp	r2, r3
 8008896:	d107      	bne.n	80088a8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d001      	beq.n	80088ac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	e000      	b.n	80088ae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3718      	adds	r7, #24
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	40023800 	.word	0x40023800

080088bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80088c6:	2300      	movs	r3, #0
 80088c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d101      	bne.n	80088d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	e0d0      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80088d4:	4b6a      	ldr	r3, [pc, #424]	@ (8008a80 <HAL_RCC_ClockConfig+0x1c4>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 030f 	and.w	r3, r3, #15
 80088dc:	683a      	ldr	r2, [r7, #0]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d910      	bls.n	8008904 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088e2:	4b67      	ldr	r3, [pc, #412]	@ (8008a80 <HAL_RCC_ClockConfig+0x1c4>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f023 020f 	bic.w	r2, r3, #15
 80088ea:	4965      	ldr	r1, [pc, #404]	@ (8008a80 <HAL_RCC_ClockConfig+0x1c4>)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	4313      	orrs	r3, r2
 80088f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80088f2:	4b63      	ldr	r3, [pc, #396]	@ (8008a80 <HAL_RCC_ClockConfig+0x1c4>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f003 030f 	and.w	r3, r3, #15
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d001      	beq.n	8008904 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008900:	2301      	movs	r3, #1
 8008902:	e0b8      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f003 0302 	and.w	r3, r3, #2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d020      	beq.n	8008952 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f003 0304 	and.w	r3, r3, #4
 8008918:	2b00      	cmp	r3, #0
 800891a:	d005      	beq.n	8008928 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800891c:	4b59      	ldr	r3, [pc, #356]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	4a58      	ldr	r2, [pc, #352]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008922:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008926:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 0308 	and.w	r3, r3, #8
 8008930:	2b00      	cmp	r3, #0
 8008932:	d005      	beq.n	8008940 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008934:	4b53      	ldr	r3, [pc, #332]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	4a52      	ldr	r2, [pc, #328]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 800893a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800893e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008940:	4b50      	ldr	r3, [pc, #320]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	689b      	ldr	r3, [r3, #8]
 800894c:	494d      	ldr	r1, [pc, #308]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 800894e:	4313      	orrs	r3, r2
 8008950:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	d040      	beq.n	80089e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d107      	bne.n	8008976 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008966:	4b47      	ldr	r3, [pc, #284]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d115      	bne.n	800899e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e07f      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	2b02      	cmp	r3, #2
 800897c:	d107      	bne.n	800898e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800897e:	4b41      	ldr	r3, [pc, #260]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008986:	2b00      	cmp	r3, #0
 8008988:	d109      	bne.n	800899e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e073      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800898e:	4b3d      	ldr	r3, [pc, #244]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e06b      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800899e:	4b39      	ldr	r3, [pc, #228]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f023 0203 	bic.w	r2, r3, #3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	4936      	ldr	r1, [pc, #216]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 80089ac:	4313      	orrs	r3, r2
 80089ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089b0:	f7fc fc16 	bl	80051e0 <HAL_GetTick>
 80089b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089b6:	e00a      	b.n	80089ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089b8:	f7fc fc12 	bl	80051e0 <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e053      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089ce:	4b2d      	ldr	r3, [pc, #180]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 80089d0:	689b      	ldr	r3, [r3, #8]
 80089d2:	f003 020c 	and.w	r2, r3, #12
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	429a      	cmp	r2, r3
 80089de:	d1eb      	bne.n	80089b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089e0:	4b27      	ldr	r3, [pc, #156]	@ (8008a80 <HAL_RCC_ClockConfig+0x1c4>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 030f 	and.w	r3, r3, #15
 80089e8:	683a      	ldr	r2, [r7, #0]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d210      	bcs.n	8008a10 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ee:	4b24      	ldr	r3, [pc, #144]	@ (8008a80 <HAL_RCC_ClockConfig+0x1c4>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f023 020f 	bic.w	r2, r3, #15
 80089f6:	4922      	ldr	r1, [pc, #136]	@ (8008a80 <HAL_RCC_ClockConfig+0x1c4>)
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089fe:	4b20      	ldr	r3, [pc, #128]	@ (8008a80 <HAL_RCC_ClockConfig+0x1c4>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 030f 	and.w	r3, r3, #15
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d001      	beq.n	8008a10 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	e032      	b.n	8008a76 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0304 	and.w	r3, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d008      	beq.n	8008a2e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a1c:	4b19      	ldr	r3, [pc, #100]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	4916      	ldr	r1, [pc, #88]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0308 	and.w	r3, r3, #8
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d009      	beq.n	8008a4e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008a3a:	4b12      	ldr	r3, [pc, #72]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008a3c:	689b      	ldr	r3, [r3, #8]
 8008a3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	00db      	lsls	r3, r3, #3
 8008a48:	490e      	ldr	r1, [pc, #56]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008a4e:	f000 f821 	bl	8008a94 <HAL_RCC_GetSysClockFreq>
 8008a52:	4602      	mov	r2, r0
 8008a54:	4b0b      	ldr	r3, [pc, #44]	@ (8008a84 <HAL_RCC_ClockConfig+0x1c8>)
 8008a56:	689b      	ldr	r3, [r3, #8]
 8008a58:	091b      	lsrs	r3, r3, #4
 8008a5a:	f003 030f 	and.w	r3, r3, #15
 8008a5e:	490a      	ldr	r1, [pc, #40]	@ (8008a88 <HAL_RCC_ClockConfig+0x1cc>)
 8008a60:	5ccb      	ldrb	r3, [r1, r3]
 8008a62:	fa22 f303 	lsr.w	r3, r2, r3
 8008a66:	4a09      	ldr	r2, [pc, #36]	@ (8008a8c <HAL_RCC_ClockConfig+0x1d0>)
 8008a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008a6a:	4b09      	ldr	r3, [pc, #36]	@ (8008a90 <HAL_RCC_ClockConfig+0x1d4>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fb fdb4 	bl	80045dc <HAL_InitTick>

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	40023c00 	.word	0x40023c00
 8008a84:	40023800 	.word	0x40023800
 8008a88:	080138d4 	.word	0x080138d4
 8008a8c:	2000002c 	.word	0x2000002c
 8008a90:	20000030 	.word	0x20000030

08008a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a98:	b090      	sub	sp, #64	@ 0x40
 8008a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008aac:	4b59      	ldr	r3, [pc, #356]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f003 030c 	and.w	r3, r3, #12
 8008ab4:	2b08      	cmp	r3, #8
 8008ab6:	d00d      	beq.n	8008ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	f200 80a1 	bhi.w	8008c00 <HAL_RCC_GetSysClockFreq+0x16c>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d002      	beq.n	8008ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d003      	beq.n	8008ace <HAL_RCC_GetSysClockFreq+0x3a>
 8008ac6:	e09b      	b.n	8008c00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008ac8:	4b53      	ldr	r3, [pc, #332]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8008aca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008acc:	e09b      	b.n	8008c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008ace:	4b53      	ldr	r3, [pc, #332]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8008ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008ad2:	e098      	b.n	8008c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008adc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008ade:	4b4d      	ldr	r3, [pc, #308]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d028      	beq.n	8008b3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008aea:	4b4a      	ldr	r3, [pc, #296]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8008aec:	685b      	ldr	r3, [r3, #4]
 8008aee:	099b      	lsrs	r3, r3, #6
 8008af0:	2200      	movs	r2, #0
 8008af2:	623b      	str	r3, [r7, #32]
 8008af4:	627a      	str	r2, [r7, #36]	@ 0x24
 8008af6:	6a3b      	ldr	r3, [r7, #32]
 8008af8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008afc:	2100      	movs	r1, #0
 8008afe:	4b47      	ldr	r3, [pc, #284]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8008b00:	fb03 f201 	mul.w	r2, r3, r1
 8008b04:	2300      	movs	r3, #0
 8008b06:	fb00 f303 	mul.w	r3, r0, r3
 8008b0a:	4413      	add	r3, r2
 8008b0c:	4a43      	ldr	r2, [pc, #268]	@ (8008c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8008b0e:	fba0 1202 	umull	r1, r2, r0, r2
 8008b12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b14:	460a      	mov	r2, r1
 8008b16:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008b18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b1a:	4413      	add	r3, r2
 8008b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008b1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b20:	2200      	movs	r2, #0
 8008b22:	61bb      	str	r3, [r7, #24]
 8008b24:	61fa      	str	r2, [r7, #28]
 8008b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008b2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008b2e:	f7f7 fbbf 	bl	80002b0 <__aeabi_uldivmod>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	4613      	mov	r3, r2
 8008b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008b3a:	e053      	b.n	8008be4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008b3c:	4b35      	ldr	r3, [pc, #212]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	099b      	lsrs	r3, r3, #6
 8008b42:	2200      	movs	r2, #0
 8008b44:	613b      	str	r3, [r7, #16]
 8008b46:	617a      	str	r2, [r7, #20]
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008b4e:	f04f 0b00 	mov.w	fp, #0
 8008b52:	4652      	mov	r2, sl
 8008b54:	465b      	mov	r3, fp
 8008b56:	f04f 0000 	mov.w	r0, #0
 8008b5a:	f04f 0100 	mov.w	r1, #0
 8008b5e:	0159      	lsls	r1, r3, #5
 8008b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008b64:	0150      	lsls	r0, r2, #5
 8008b66:	4602      	mov	r2, r0
 8008b68:	460b      	mov	r3, r1
 8008b6a:	ebb2 080a 	subs.w	r8, r2, sl
 8008b6e:	eb63 090b 	sbc.w	r9, r3, fp
 8008b72:	f04f 0200 	mov.w	r2, #0
 8008b76:	f04f 0300 	mov.w	r3, #0
 8008b7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008b7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008b82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008b86:	ebb2 0408 	subs.w	r4, r2, r8
 8008b8a:	eb63 0509 	sbc.w	r5, r3, r9
 8008b8e:	f04f 0200 	mov.w	r2, #0
 8008b92:	f04f 0300 	mov.w	r3, #0
 8008b96:	00eb      	lsls	r3, r5, #3
 8008b98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b9c:	00e2      	lsls	r2, r4, #3
 8008b9e:	4614      	mov	r4, r2
 8008ba0:	461d      	mov	r5, r3
 8008ba2:	eb14 030a 	adds.w	r3, r4, sl
 8008ba6:	603b      	str	r3, [r7, #0]
 8008ba8:	eb45 030b 	adc.w	r3, r5, fp
 8008bac:	607b      	str	r3, [r7, #4]
 8008bae:	f04f 0200 	mov.w	r2, #0
 8008bb2:	f04f 0300 	mov.w	r3, #0
 8008bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008bba:	4629      	mov	r1, r5
 8008bbc:	028b      	lsls	r3, r1, #10
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008bc4:	4621      	mov	r1, r4
 8008bc6:	028a      	lsls	r2, r1, #10
 8008bc8:	4610      	mov	r0, r2
 8008bca:	4619      	mov	r1, r3
 8008bcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bce:	2200      	movs	r2, #0
 8008bd0:	60bb      	str	r3, [r7, #8]
 8008bd2:	60fa      	str	r2, [r7, #12]
 8008bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008bd8:	f7f7 fb6a 	bl	80002b0 <__aeabi_uldivmod>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	460b      	mov	r3, r1
 8008be0:	4613      	mov	r3, r2
 8008be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008be4:	4b0b      	ldr	r3, [pc, #44]	@ (8008c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	0c1b      	lsrs	r3, r3, #16
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	3301      	adds	r3, #1
 8008bf0:	005b      	lsls	r3, r3, #1
 8008bf2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008bfe:	e002      	b.n	8008c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008c00:	4b05      	ldr	r3, [pc, #20]	@ (8008c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8008c02:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008c06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008c08:	4618      	mov	r0, r3
 8008c0a:	3740      	adds	r7, #64	@ 0x40
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008c12:	bf00      	nop
 8008c14:	40023800 	.word	0x40023800
 8008c18:	00f42400 	.word	0x00f42400
 8008c1c:	017d7840 	.word	0x017d7840

08008c20 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008c24:	4b03      	ldr	r3, [pc, #12]	@ (8008c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8008c26:	681b      	ldr	r3, [r3, #0]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	2000002c 	.word	0x2000002c

08008c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008c3c:	f7ff fff0 	bl	8008c20 <HAL_RCC_GetHCLKFreq>
 8008c40:	4602      	mov	r2, r0
 8008c42:	4b05      	ldr	r3, [pc, #20]	@ (8008c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	0a9b      	lsrs	r3, r3, #10
 8008c48:	f003 0307 	and.w	r3, r3, #7
 8008c4c:	4903      	ldr	r1, [pc, #12]	@ (8008c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008c4e:	5ccb      	ldrb	r3, [r1, r3]
 8008c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	40023800 	.word	0x40023800
 8008c5c:	080138e4 	.word	0x080138e4

08008c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008c64:	f7ff ffdc 	bl	8008c20 <HAL_RCC_GetHCLKFreq>
 8008c68:	4602      	mov	r2, r0
 8008c6a:	4b05      	ldr	r3, [pc, #20]	@ (8008c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	0b5b      	lsrs	r3, r3, #13
 8008c70:	f003 0307 	and.w	r3, r3, #7
 8008c74:	4903      	ldr	r1, [pc, #12]	@ (8008c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008c76:	5ccb      	ldrb	r3, [r1, r3]
 8008c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	40023800 	.word	0x40023800
 8008c84:	080138e4 	.word	0x080138e4

08008c88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	220f      	movs	r2, #15
 8008c96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c98:	4b12      	ldr	r3, [pc, #72]	@ (8008ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	f003 0203 	and.w	r2, r3, #3
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ca4:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008cbc:	4b09      	ldr	r3, [pc, #36]	@ (8008ce4 <HAL_RCC_GetClockConfig+0x5c>)
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	08db      	lsrs	r3, r3, #3
 8008cc2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008cca:	4b07      	ldr	r3, [pc, #28]	@ (8008ce8 <HAL_RCC_GetClockConfig+0x60>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 020f 	and.w	r2, r3, #15
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	601a      	str	r2, [r3, #0]
}
 8008cd6:	bf00      	nop
 8008cd8:	370c      	adds	r7, #12
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop
 8008ce4:	40023800 	.word	0x40023800
 8008ce8:	40023c00 	.word	0x40023c00

08008cec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b088      	sub	sp, #32
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008d04:	2300      	movs	r3, #0
 8008d06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d012      	beq.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008d14:	4b69      	ldr	r3, [pc, #420]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	4a68      	ldr	r2, [pc, #416]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d1a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008d1e:	6093      	str	r3, [r2, #8]
 8008d20:	4b66      	ldr	r3, [pc, #408]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d22:	689a      	ldr	r2, [r3, #8]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d28:	4964      	ldr	r1, [pc, #400]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d101      	bne.n	8008d3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008d36:	2301      	movs	r3, #1
 8008d38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d017      	beq.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008d46:	4b5d      	ldr	r3, [pc, #372]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d4c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d54:	4959      	ldr	r1, [pc, #356]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d60:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d64:	d101      	bne.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008d66:	2301      	movs	r3, #1
 8008d68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008d72:	2301      	movs	r3, #1
 8008d74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d017      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008d82:	4b4e      	ldr	r3, [pc, #312]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d88:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d90:	494a      	ldr	r1, [pc, #296]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d92:	4313      	orrs	r3, r2
 8008d94:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008da0:	d101      	bne.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008da2:	2301      	movs	r3, #1
 8008da4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d101      	bne.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008dae:	2301      	movs	r3, #1
 8008db0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d001      	beq.n	8008dc2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f003 0320 	and.w	r3, r3, #32
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f000 808b 	beq.w	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008dd0:	4b3a      	ldr	r3, [pc, #232]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd4:	4a39      	ldr	r2, [pc, #228]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dda:	6413      	str	r3, [r2, #64]	@ 0x40
 8008ddc:	4b37      	ldr	r3, [pc, #220]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008de4:	60bb      	str	r3, [r7, #8]
 8008de6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008de8:	4b35      	ldr	r3, [pc, #212]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a34      	ldr	r2, [pc, #208]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008df2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008df4:	f7fc f9f4 	bl	80051e0 <HAL_GetTick>
 8008df8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008dfa:	e008      	b.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008dfc:	f7fc f9f0 	bl	80051e0 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b64      	cmp	r3, #100	@ 0x64
 8008e08:	d901      	bls.n	8008e0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e357      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008e0e:	4b2c      	ldr	r3, [pc, #176]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d0f0      	beq.n	8008dfc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008e1a:	4b28      	ldr	r3, [pc, #160]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d035      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	429a      	cmp	r2, r3
 8008e36:	d02e      	beq.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008e38:	4b20      	ldr	r3, [pc, #128]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008e42:	4b1e      	ldr	r3, [pc, #120]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e46:	4a1d      	ldr	r2, [pc, #116]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008e4c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e52:	4a1a      	ldr	r2, [pc, #104]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e58:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008e5a:	4a18      	ldr	r2, [pc, #96]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008e60:	4b16      	ldr	r3, [pc, #88]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e64:	f003 0301 	and.w	r3, r3, #1
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d114      	bne.n	8008e96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6c:	f7fc f9b8 	bl	80051e0 <HAL_GetTick>
 8008e70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e72:	e00a      	b.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e74:	f7fc f9b4 	bl	80051e0 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	697b      	ldr	r3, [r7, #20]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d901      	bls.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e319      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d0ee      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ea2:	d111      	bne.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008ea4:	4b05      	ldr	r3, [pc, #20]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008eb0:	4b04      	ldr	r3, [pc, #16]	@ (8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008eb2:	400b      	ands	r3, r1
 8008eb4:	4901      	ldr	r1, [pc, #4]	@ (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	608b      	str	r3, [r1, #8]
 8008eba:	e00b      	b.n	8008ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008ebc:	40023800 	.word	0x40023800
 8008ec0:	40007000 	.word	0x40007000
 8008ec4:	0ffffcff 	.word	0x0ffffcff
 8008ec8:	4baa      	ldr	r3, [pc, #680]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	4aa9      	ldr	r2, [pc, #676]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ece:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008ed2:	6093      	str	r3, [r2, #8]
 8008ed4:	4ba7      	ldr	r3, [pc, #668]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ed6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008edc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ee0:	49a4      	ldr	r1, [pc, #656]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0310 	and.w	r3, r3, #16
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d010      	beq.n	8008f14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008ef2:	4ba0      	ldr	r3, [pc, #640]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008ef8:	4a9e      	ldr	r2, [pc, #632]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008efa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008efe:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8008f02:	4b9c      	ldr	r3, [pc, #624]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f04:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f0c:	4999      	ldr	r1, [pc, #612]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d00a      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008f20:	4b94      	ldr	r3, [pc, #592]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f2e:	4991      	ldr	r1, [pc, #580]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f30:	4313      	orrs	r3, r2
 8008f32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00a      	beq.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008f42:	4b8c      	ldr	r3, [pc, #560]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f48:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f50:	4988      	ldr	r1, [pc, #544]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f52:	4313      	orrs	r3, r2
 8008f54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00a      	beq.n	8008f7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008f64:	4b83      	ldr	r3, [pc, #524]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f72:	4980      	ldr	r1, [pc, #512]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f74:	4313      	orrs	r3, r2
 8008f76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00a      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008f86:	4b7b      	ldr	r3, [pc, #492]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f8c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f94:	4977      	ldr	r1, [pc, #476]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008f96:	4313      	orrs	r3, r2
 8008f98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00a      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008fa8:	4b72      	ldr	r3, [pc, #456]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fae:	f023 0203 	bic.w	r2, r3, #3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008fb6:	496f      	ldr	r1, [pc, #444]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00a      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008fca:	4b6a      	ldr	r3, [pc, #424]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fd0:	f023 020c 	bic.w	r2, r3, #12
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fd8:	4966      	ldr	r1, [pc, #408]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00a      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008fec:	4b61      	ldr	r3, [pc, #388]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ff2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ffa:	495e      	ldr	r1, [pc, #376]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00a      	beq.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800900e:	4b59      	ldr	r3, [pc, #356]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009014:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800901c:	4955      	ldr	r1, [pc, #340]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800901e:	4313      	orrs	r3, r2
 8009020:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00a      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009030:	4b50      	ldr	r3, [pc, #320]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009036:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800903e:	494d      	ldr	r1, [pc, #308]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009040:	4313      	orrs	r3, r2
 8009042:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009052:	4b48      	ldr	r3, [pc, #288]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009058:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009060:	4944      	ldr	r1, [pc, #272]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009062:	4313      	orrs	r3, r2
 8009064:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009070:	2b00      	cmp	r3, #0
 8009072:	d00a      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009074:	4b3f      	ldr	r3, [pc, #252]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800907a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009082:	493c      	ldr	r1, [pc, #240]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009084:	4313      	orrs	r3, r2
 8009086:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00a      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009096:	4b37      	ldr	r3, [pc, #220]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800909c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090a4:	4933      	ldr	r1, [pc, #204]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090a6:	4313      	orrs	r3, r2
 80090a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d00a      	beq.n	80090ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090b8:	4b2e      	ldr	r3, [pc, #184]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090be:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80090c6:	492b      	ldr	r1, [pc, #172]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d011      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80090da:	4b26      	ldr	r3, [pc, #152]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090e0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090e8:	4922      	ldr	r1, [pc, #136]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090ea:	4313      	orrs	r3, r2
 80090ec:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80090f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80090f8:	d101      	bne.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80090fa:	2301      	movs	r3, #1
 80090fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0308 	and.w	r3, r3, #8
 8009106:	2b00      	cmp	r3, #0
 8009108:	d001      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800910a:	2301      	movs	r3, #1
 800910c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00a      	beq.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800911a:	4b16      	ldr	r3, [pc, #88]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800911c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009120:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009128:	4912      	ldr	r1, [pc, #72]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800912a:	4313      	orrs	r3, r2
 800912c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009138:	2b00      	cmp	r3, #0
 800913a:	d00b      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800913c:	4b0d      	ldr	r3, [pc, #52]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800913e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009142:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800914c:	4909      	ldr	r1, [pc, #36]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800914e:	4313      	orrs	r3, r2
 8009150:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009154:	69fb      	ldr	r3, [r7, #28]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d006      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 80d9 	beq.w	800931a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009168:	4b02      	ldr	r3, [pc, #8]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a01      	ldr	r2, [pc, #4]	@ (8009174 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800916e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009172:	e001      	b.n	8009178 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009174:	40023800 	.word	0x40023800
 8009178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800917a:	f7fc f831 	bl	80051e0 <HAL_GetTick>
 800917e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009180:	e008      	b.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009182:	f7fc f82d 	bl	80051e0 <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b64      	cmp	r3, #100	@ 0x64
 800918e:	d901      	bls.n	8009194 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e194      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009194:	4b6c      	ldr	r3, [pc, #432]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800919c:	2b00      	cmp	r3, #0
 800919e:	d1f0      	bne.n	8009182 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0301 	and.w	r3, r3, #1
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d021      	beq.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d11d      	bne.n	80091f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80091b4:	4b64      	ldr	r3, [pc, #400]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091ba:	0c1b      	lsrs	r3, r3, #16
 80091bc:	f003 0303 	and.w	r3, r3, #3
 80091c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80091c2:	4b61      	ldr	r3, [pc, #388]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80091c8:	0e1b      	lsrs	r3, r3, #24
 80091ca:	f003 030f 	and.w	r3, r3, #15
 80091ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	019a      	lsls	r2, r3, #6
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	041b      	lsls	r3, r3, #16
 80091da:	431a      	orrs	r2, r3
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	061b      	lsls	r3, r3, #24
 80091e0:	431a      	orrs	r2, r3
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	071b      	lsls	r3, r3, #28
 80091e8:	4957      	ldr	r1, [pc, #348]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d004      	beq.n	8009206 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009200:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009204:	d00a      	beq.n	800921c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800920e:	2b00      	cmp	r3, #0
 8009210:	d02e      	beq.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009216:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800921a:	d129      	bne.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800921c:	4b4a      	ldr	r3, [pc, #296]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800921e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009222:	0c1b      	lsrs	r3, r3, #16
 8009224:	f003 0303 	and.w	r3, r3, #3
 8009228:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800922a:	4b47      	ldr	r3, [pc, #284]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800922c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009230:	0f1b      	lsrs	r3, r3, #28
 8009232:	f003 0307 	and.w	r3, r3, #7
 8009236:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	685b      	ldr	r3, [r3, #4]
 800923c:	019a      	lsls	r2, r3, #6
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	041b      	lsls	r3, r3, #16
 8009242:	431a      	orrs	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	061b      	lsls	r3, r3, #24
 800924a:	431a      	orrs	r2, r3
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	071b      	lsls	r3, r3, #28
 8009250:	493d      	ldr	r1, [pc, #244]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009252:	4313      	orrs	r3, r2
 8009254:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009258:	4b3b      	ldr	r3, [pc, #236]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800925a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800925e:	f023 021f 	bic.w	r2, r3, #31
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009266:	3b01      	subs	r3, #1
 8009268:	4937      	ldr	r1, [pc, #220]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800926a:	4313      	orrs	r3, r2
 800926c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009278:	2b00      	cmp	r3, #0
 800927a:	d01d      	beq.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800927c:	4b32      	ldr	r3, [pc, #200]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800927e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009282:	0e1b      	lsrs	r3, r3, #24
 8009284:	f003 030f 	and.w	r3, r3, #15
 8009288:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800928a:	4b2f      	ldr	r3, [pc, #188]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800928c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009290:	0f1b      	lsrs	r3, r3, #28
 8009292:	f003 0307 	and.w	r3, r3, #7
 8009296:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	019a      	lsls	r2, r3, #6
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	041b      	lsls	r3, r3, #16
 80092a4:	431a      	orrs	r2, r3
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	061b      	lsls	r3, r3, #24
 80092aa:	431a      	orrs	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	071b      	lsls	r3, r3, #28
 80092b0:	4925      	ldr	r1, [pc, #148]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092b2:	4313      	orrs	r3, r2
 80092b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d011      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	019a      	lsls	r2, r3, #6
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	041b      	lsls	r3, r3, #16
 80092d0:	431a      	orrs	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	68db      	ldr	r3, [r3, #12]
 80092d6:	061b      	lsls	r3, r3, #24
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	071b      	lsls	r3, r3, #28
 80092e0:	4919      	ldr	r1, [pc, #100]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092e2:	4313      	orrs	r3, r2
 80092e4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80092e8:	4b17      	ldr	r3, [pc, #92]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a16      	ldr	r2, [pc, #88]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80092ee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80092f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092f4:	f7fb ff74 	bl	80051e0 <HAL_GetTick>
 80092f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80092fa:	e008      	b.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80092fc:	f7fb ff70 	bl	80051e0 <HAL_GetTick>
 8009300:	4602      	mov	r2, r0
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	2b64      	cmp	r3, #100	@ 0x64
 8009308:	d901      	bls.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800930a:	2303      	movs	r3, #3
 800930c:	e0d7      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800930e:	4b0e      	ldr	r3, [pc, #56]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009316:	2b00      	cmp	r3, #0
 8009318:	d0f0      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	2b01      	cmp	r3, #1
 800931e:	f040 80cd 	bne.w	80094bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009322:	4b09      	ldr	r3, [pc, #36]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4a08      	ldr	r2, [pc, #32]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009328:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800932c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800932e:	f7fb ff57 	bl	80051e0 <HAL_GetTick>
 8009332:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009334:	e00a      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009336:	f7fb ff53 	bl	80051e0 <HAL_GetTick>
 800933a:	4602      	mov	r2, r0
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	1ad3      	subs	r3, r2, r3
 8009340:	2b64      	cmp	r3, #100	@ 0x64
 8009342:	d903      	bls.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009344:	2303      	movs	r3, #3
 8009346:	e0ba      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009348:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800934c:	4b5e      	ldr	r3, [pc, #376]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009354:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009358:	d0ed      	beq.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d003      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800936a:	2b00      	cmp	r3, #0
 800936c:	d009      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009376:	2b00      	cmp	r3, #0
 8009378:	d02e      	beq.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937e:	2b00      	cmp	r3, #0
 8009380:	d12a      	bne.n	80093d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009382:	4b51      	ldr	r3, [pc, #324]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009388:	0c1b      	lsrs	r3, r3, #16
 800938a:	f003 0303 	and.w	r3, r3, #3
 800938e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009390:	4b4d      	ldr	r3, [pc, #308]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009396:	0f1b      	lsrs	r3, r3, #28
 8009398:	f003 0307 	and.w	r3, r3, #7
 800939c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	695b      	ldr	r3, [r3, #20]
 80093a2:	019a      	lsls	r2, r3, #6
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	041b      	lsls	r3, r3, #16
 80093a8:	431a      	orrs	r2, r3
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	061b      	lsls	r3, r3, #24
 80093b0:	431a      	orrs	r2, r3
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	071b      	lsls	r3, r3, #28
 80093b6:	4944      	ldr	r1, [pc, #272]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093b8:	4313      	orrs	r3, r2
 80093ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80093be:	4b42      	ldr	r3, [pc, #264]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093c4:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093cc:	3b01      	subs	r3, #1
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	493d      	ldr	r1, [pc, #244]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d022      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80093ec:	d11d      	bne.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80093ee:	4b36      	ldr	r3, [pc, #216]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80093f4:	0e1b      	lsrs	r3, r3, #24
 80093f6:	f003 030f 	and.w	r3, r3, #15
 80093fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80093fc:	4b32      	ldr	r3, [pc, #200]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009402:	0f1b      	lsrs	r3, r3, #28
 8009404:	f003 0307 	and.w	r3, r3, #7
 8009408:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	019a      	lsls	r2, r3, #6
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a1b      	ldr	r3, [r3, #32]
 8009414:	041b      	lsls	r3, r3, #16
 8009416:	431a      	orrs	r2, r3
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	061b      	lsls	r3, r3, #24
 800941c:	431a      	orrs	r2, r3
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	071b      	lsls	r3, r3, #28
 8009422:	4929      	ldr	r1, [pc, #164]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009424:	4313      	orrs	r3, r2
 8009426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 0308 	and.w	r3, r3, #8
 8009432:	2b00      	cmp	r3, #0
 8009434:	d028      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009436:	4b24      	ldr	r3, [pc, #144]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800943c:	0e1b      	lsrs	r3, r3, #24
 800943e:	f003 030f 	and.w	r3, r3, #15
 8009442:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009444:	4b20      	ldr	r3, [pc, #128]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009446:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800944a:	0c1b      	lsrs	r3, r3, #16
 800944c:	f003 0303 	and.w	r3, r3, #3
 8009450:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	019a      	lsls	r2, r3, #6
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	041b      	lsls	r3, r3, #16
 800945c:	431a      	orrs	r2, r3
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	061b      	lsls	r3, r3, #24
 8009462:	431a      	orrs	r2, r3
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	69db      	ldr	r3, [r3, #28]
 8009468:	071b      	lsls	r3, r3, #28
 800946a:	4917      	ldr	r1, [pc, #92]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800946c:	4313      	orrs	r3, r2
 800946e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009472:	4b15      	ldr	r3, [pc, #84]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009474:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009478:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009480:	4911      	ldr	r1, [pc, #68]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009482:	4313      	orrs	r3, r2
 8009484:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009488:	4b0f      	ldr	r3, [pc, #60]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a0e      	ldr	r2, [pc, #56]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800948e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009492:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009494:	f7fb fea4 	bl	80051e0 <HAL_GetTick>
 8009498:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800949a:	e008      	b.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800949c:	f7fb fea0 	bl	80051e0 <HAL_GetTick>
 80094a0:	4602      	mov	r2, r0
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	1ad3      	subs	r3, r2, r3
 80094a6:	2b64      	cmp	r3, #100	@ 0x64
 80094a8:	d901      	bls.n	80094ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e007      	b.n	80094be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80094ae:	4b06      	ldr	r3, [pc, #24]	@ (80094c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80094ba:	d1ef      	bne.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80094bc:	2300      	movs	r3, #0
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3720      	adds	r7, #32
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	40023800 	.word	0x40023800

080094cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d101      	bne.n	80094e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	e071      	b.n	80095c6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	7f5b      	ldrb	r3, [r3, #29]
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d105      	bne.n	80094f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f7f9 f896 	bl	8002624 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2202      	movs	r2, #2
 80094fc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	f003 0310 	and.w	r3, r3, #16
 8009508:	2b10      	cmp	r3, #16
 800950a:	d053      	beq.n	80095b4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	22ca      	movs	r2, #202	@ 0xca
 8009512:	625a      	str	r2, [r3, #36]	@ 0x24
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2253      	movs	r2, #83	@ 0x53
 800951a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fac9 	bl	8009ab4 <RTC_EnterInitMode>
 8009522:	4603      	mov	r3, r0
 8009524:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8009526:	7bfb      	ldrb	r3, [r7, #15]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d12a      	bne.n	8009582 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6899      	ldr	r1, [r3, #8]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	4b26      	ldr	r3, [pc, #152]	@ (80095d0 <HAL_RTC_Init+0x104>)
 8009538:	400b      	ands	r3, r1
 800953a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	6899      	ldr	r1, [r3, #8]
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	691b      	ldr	r3, [r3, #16]
 800954a:	431a      	orrs	r2, r3
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	695b      	ldr	r3, [r3, #20]
 8009550:	431a      	orrs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	430a      	orrs	r2, r1
 8009558:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	68d2      	ldr	r2, [r2, #12]
 8009562:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	6919      	ldr	r1, [r3, #16]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	041a      	lsls	r2, r3, #16
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	430a      	orrs	r2, r1
 8009576:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 fad2 	bl	8009b22 <RTC_ExitInitMode>
 800957e:	4603      	mov	r3, r0
 8009580:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d110      	bne.n	80095aa <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 0208 	bic.w	r2, r2, #8
 8009596:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	699a      	ldr	r2, [r3, #24]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	22ff      	movs	r2, #255	@ 0xff
 80095b0:	625a      	str	r2, [r3, #36]	@ 0x24
 80095b2:	e001      	b.n	80095b8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80095b4:	2300      	movs	r3, #0
 80095b6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d102      	bne.n	80095c4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2201      	movs	r2, #1
 80095c2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80095c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3710      	adds	r7, #16
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd80      	pop	{r7, pc}
 80095ce:	bf00      	nop
 80095d0:	ff8fffbf 	.word	0xff8fffbf

080095d4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80095d4:	b590      	push	{r4, r7, lr}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	60f8      	str	r0, [r7, #12]
 80095dc:	60b9      	str	r1, [r7, #8]
 80095de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80095e0:	2300      	movs	r3, #0
 80095e2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	7f1b      	ldrb	r3, [r3, #28]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d101      	bne.n	80095f0 <HAL_RTC_SetTime+0x1c>
 80095ec:	2302      	movs	r3, #2
 80095ee:	e085      	b.n	80096fc <HAL_RTC_SetTime+0x128>
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2201      	movs	r2, #1
 80095f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2202      	movs	r2, #2
 80095fa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d126      	bne.n	8009650 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	689b      	ldr	r3, [r3, #8]
 8009608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800960c:	2b00      	cmp	r3, #0
 800960e:	d102      	bne.n	8009616 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	2200      	movs	r2, #0
 8009614:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	4618      	mov	r0, r3
 800961c:	f000 faa6 	bl	8009b6c <RTC_ByteToBcd2>
 8009620:	4603      	mov	r3, r0
 8009622:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	785b      	ldrb	r3, [r3, #1]
 8009628:	4618      	mov	r0, r3
 800962a:	f000 fa9f 	bl	8009b6c <RTC_ByteToBcd2>
 800962e:	4603      	mov	r3, r0
 8009630:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009632:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	789b      	ldrb	r3, [r3, #2]
 8009638:	4618      	mov	r0, r3
 800963a:	f000 fa97 	bl	8009b6c <RTC_ByteToBcd2>
 800963e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009640:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	78db      	ldrb	r3, [r3, #3]
 8009648:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800964a:	4313      	orrs	r3, r2
 800964c:	617b      	str	r3, [r7, #20]
 800964e:	e018      	b.n	8009682 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800965a:	2b00      	cmp	r3, #0
 800965c:	d102      	bne.n	8009664 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	2200      	movs	r2, #0
 8009662:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	785b      	ldrb	r3, [r3, #1]
 800966e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009670:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009676:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	78db      	ldrb	r3, [r3, #3]
 800967c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800967e:	4313      	orrs	r3, r2
 8009680:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	22ca      	movs	r2, #202	@ 0xca
 8009688:	625a      	str	r2, [r3, #36]	@ 0x24
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2253      	movs	r2, #83	@ 0x53
 8009690:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009692:	68f8      	ldr	r0, [r7, #12]
 8009694:	f000 fa0e 	bl	8009ab4 <RTC_EnterInitMode>
 8009698:	4603      	mov	r3, r0
 800969a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800969c:	7cfb      	ldrb	r3, [r7, #19]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d11e      	bne.n	80096e0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681a      	ldr	r2, [r3, #0]
 80096a6:	6979      	ldr	r1, [r7, #20]
 80096a8:	4b16      	ldr	r3, [pc, #88]	@ (8009704 <HAL_RTC_SetTime+0x130>)
 80096aa:	400b      	ands	r3, r1
 80096ac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	689a      	ldr	r2, [r3, #8]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80096bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6899      	ldr	r1, [r3, #8]
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	68da      	ldr	r2, [r3, #12]
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	431a      	orrs	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f000 fa23 	bl	8009b22 <RTC_ExitInitMode>
 80096dc:	4603      	mov	r3, r0
 80096de:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80096e0:	7cfb      	ldrb	r3, [r7, #19]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d102      	bne.n	80096ec <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	22ff      	movs	r2, #255	@ 0xff
 80096f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2200      	movs	r2, #0
 80096f8:	771a      	strb	r2, [r3, #28]

  return status;
 80096fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	371c      	adds	r7, #28
 8009700:	46bd      	mov	sp, r7
 8009702:	bd90      	pop	{r4, r7, pc}
 8009704:	007f7f7f 	.word	0x007f7f7f

08009708 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009708:	b590      	push	{r4, r7, lr}
 800970a:	b087      	sub	sp, #28
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009714:	2300      	movs	r3, #0
 8009716:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	7f1b      	ldrb	r3, [r3, #28]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d101      	bne.n	8009724 <HAL_RTC_SetDate+0x1c>
 8009720:	2302      	movs	r3, #2
 8009722:	e06f      	b.n	8009804 <HAL_RTC_SetDate+0xfc>
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2201      	movs	r2, #1
 8009728:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2202      	movs	r2, #2
 800972e:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d10e      	bne.n	8009754 <HAL_RTC_SetDate+0x4c>
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	785b      	ldrb	r3, [r3, #1]
 800973a:	f003 0310 	and.w	r3, r3, #16
 800973e:	2b00      	cmp	r3, #0
 8009740:	d008      	beq.n	8009754 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	785b      	ldrb	r3, [r3, #1]
 8009746:	f023 0310 	bic.w	r3, r3, #16
 800974a:	b2db      	uxtb	r3, r3
 800974c:	330a      	adds	r3, #10
 800974e:	b2da      	uxtb	r2, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d11c      	bne.n	8009794 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	78db      	ldrb	r3, [r3, #3]
 800975e:	4618      	mov	r0, r3
 8009760:	f000 fa04 	bl	8009b6c <RTC_ByteToBcd2>
 8009764:	4603      	mov	r3, r0
 8009766:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	785b      	ldrb	r3, [r3, #1]
 800976c:	4618      	mov	r0, r3
 800976e:	f000 f9fd 	bl	8009b6c <RTC_ByteToBcd2>
 8009772:	4603      	mov	r3, r0
 8009774:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8009776:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	789b      	ldrb	r3, [r3, #2]
 800977c:	4618      	mov	r0, r3
 800977e:	f000 f9f5 	bl	8009b6c <RTC_ByteToBcd2>
 8009782:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8009784:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800978e:	4313      	orrs	r3, r2
 8009790:	617b      	str	r3, [r7, #20]
 8009792:	e00e      	b.n	80097b2 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	78db      	ldrb	r3, [r3, #3]
 8009798:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	785b      	ldrb	r3, [r3, #1]
 800979e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80097a0:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80097a6:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	781b      	ldrb	r3, [r3, #0]
 80097ac:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80097ae:	4313      	orrs	r3, r2
 80097b0:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	22ca      	movs	r2, #202	@ 0xca
 80097b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2253      	movs	r2, #83	@ 0x53
 80097c0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 f976 	bl	8009ab4 <RTC_EnterInitMode>
 80097c8:	4603      	mov	r3, r0
 80097ca:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80097cc:	7cfb      	ldrb	r3, [r7, #19]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10a      	bne.n	80097e8 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	6979      	ldr	r1, [r7, #20]
 80097d8:	4b0c      	ldr	r3, [pc, #48]	@ (800980c <HAL_RTC_SetDate+0x104>)
 80097da:	400b      	ands	r3, r1
 80097dc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80097de:	68f8      	ldr	r0, [r7, #12]
 80097e0:	f000 f99f 	bl	8009b22 <RTC_ExitInitMode>
 80097e4:	4603      	mov	r3, r0
 80097e6:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80097e8:	7cfb      	ldrb	r3, [r7, #19]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d102      	bne.n	80097f4 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2201      	movs	r2, #1
 80097f2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	22ff      	movs	r2, #255	@ 0xff
 80097fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2200      	movs	r2, #0
 8009800:	771a      	strb	r2, [r3, #28]

  return status;
 8009802:	7cfb      	ldrb	r3, [r7, #19]
}
 8009804:	4618      	mov	r0, r3
 8009806:	371c      	adds	r7, #28
 8009808:	46bd      	mov	sp, r7
 800980a:	bd90      	pop	{r4, r7, pc}
 800980c:	00ffff3f 	.word	0x00ffff3f

08009810 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009810:	b590      	push	{r4, r7, lr}
 8009812:	b089      	sub	sp, #36	@ 0x24
 8009814:	af00      	add	r7, sp, #0
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	60b9      	str	r1, [r7, #8]
 800981a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800981c:	2300      	movs	r3, #0
 800981e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8009820:	2300      	movs	r3, #0
 8009822:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009824:	2300      	movs	r3, #0
 8009826:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	7f1b      	ldrb	r3, [r3, #28]
 800982c:	2b01      	cmp	r3, #1
 800982e:	d101      	bne.n	8009834 <HAL_RTC_SetAlarm+0x24>
 8009830:	2302      	movs	r3, #2
 8009832:	e113      	b.n	8009a5c <HAL_RTC_SetAlarm+0x24c>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2201      	movs	r2, #1
 8009838:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2202      	movs	r2, #2
 800983e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d137      	bne.n	80098b6 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009850:	2b00      	cmp	r3, #0
 8009852:	d102      	bne.n	800985a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	2200      	movs	r2, #0
 8009858:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	4618      	mov	r0, r3
 8009860:	f000 f984 	bl	8009b6c <RTC_ByteToBcd2>
 8009864:	4603      	mov	r3, r0
 8009866:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	785b      	ldrb	r3, [r3, #1]
 800986c:	4618      	mov	r0, r3
 800986e:	f000 f97d 	bl	8009b6c <RTC_ByteToBcd2>
 8009872:	4603      	mov	r3, r0
 8009874:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8009876:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	789b      	ldrb	r3, [r3, #2]
 800987c:	4618      	mov	r0, r3
 800987e:	f000 f975 	bl	8009b6c <RTC_ByteToBcd2>
 8009882:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8009884:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	78db      	ldrb	r3, [r3, #3]
 800988c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800988e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009898:	4618      	mov	r0, r3
 800989a:	f000 f967 	bl	8009b6c <RTC_ByteToBcd2>
 800989e:	4603      	mov	r3, r0
 80098a0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80098a2:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80098aa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80098b0:	4313      	orrs	r3, r2
 80098b2:	61fb      	str	r3, [r7, #28]
 80098b4:	e023      	b.n	80098fe <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d102      	bne.n	80098ca <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	2200      	movs	r2, #0
 80098c8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	785b      	ldrb	r3, [r3, #1]
 80098d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80098d6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80098d8:	68ba      	ldr	r2, [r7, #8]
 80098da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 80098dc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	78db      	ldrb	r3, [r3, #3]
 80098e2:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 80098e4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098ec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 80098ee:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 80098f4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 80098fa:	4313      	orrs	r3, r2
 80098fc:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009906:	4313      	orrs	r3, r2
 8009908:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	22ca      	movs	r2, #202	@ 0xca
 8009910:	625a      	str	r2, [r3, #36]	@ 0x24
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	2253      	movs	r2, #83	@ 0x53
 8009918:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800991e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009922:	d148      	bne.n	80099b6 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	689a      	ldr	r2, [r3, #8]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009932:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	689a      	ldr	r2, [r3, #8]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009942:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	b2da      	uxtb	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009954:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009956:	f7fb fc43 	bl	80051e0 <HAL_GetTick>
 800995a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800995c:	e013      	b.n	8009986 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800995e:	f7fb fc3f 	bl	80051e0 <HAL_GetTick>
 8009962:	4602      	mov	r2, r0
 8009964:	69bb      	ldr	r3, [r7, #24]
 8009966:	1ad3      	subs	r3, r2, r3
 8009968:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800996c:	d90b      	bls.n	8009986 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	22ff      	movs	r2, #255	@ 0xff
 8009974:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2203      	movs	r2, #3
 800997a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e06a      	b.n	8009a5c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	f003 0301 	and.w	r3, r3, #1
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0e4      	beq.n	800995e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	69fa      	ldr	r2, [r7, #28]
 800999a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	697a      	ldr	r2, [r7, #20]
 80099a2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	689a      	ldr	r2, [r3, #8]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80099b2:	609a      	str	r2, [r3, #8]
 80099b4:	e047      	b.n	8009a46 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	689a      	ldr	r2, [r3, #8]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80099c4:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	689a      	ldr	r2, [r3, #8]
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80099d4:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	b2da      	uxtb	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f462 7220 	orn	r2, r2, #640	@ 0x280
 80099e6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80099e8:	f7fb fbfa 	bl	80051e0 <HAL_GetTick>
 80099ec:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80099ee:	e013      	b.n	8009a18 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80099f0:	f7fb fbf6 	bl	80051e0 <HAL_GetTick>
 80099f4:	4602      	mov	r2, r0
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80099fe:	d90b      	bls.n	8009a18 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	22ff      	movs	r2, #255	@ 0xff
 8009a06:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2203      	movs	r2, #3
 8009a0c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2200      	movs	r2, #0
 8009a12:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	e021      	b.n	8009a5c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68db      	ldr	r3, [r3, #12]
 8009a1e:	f003 0302 	and.w	r3, r3, #2
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d0e4      	beq.n	80099f0 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	69fa      	ldr	r2, [r7, #28]
 8009a2c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	697a      	ldr	r2, [r7, #20]
 8009a34:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009a44:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	22ff      	movs	r2, #255	@ 0xff
 8009a4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2201      	movs	r2, #1
 8009a52:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	2200      	movs	r2, #0
 8009a58:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009a5a:	2300      	movs	r3, #0
}
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	3724      	adds	r7, #36	@ 0x24
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd90      	pop	{r4, r7, pc}

08009a64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8009a7e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009a80:	f7fb fbae 	bl	80051e0 <HAL_GetTick>
 8009a84:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009a86:	e009      	b.n	8009a9c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009a88:	f7fb fbaa 	bl	80051e0 <HAL_GetTick>
 8009a8c:	4602      	mov	r2, r0
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	1ad3      	subs	r3, r2, r3
 8009a92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009a96:	d901      	bls.n	8009a9c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e007      	b.n	8009aac <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	f003 0320 	and.w	r3, r3, #32
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d0ee      	beq.n	8009a88 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3710      	adds	r7, #16
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009abc:	2300      	movs	r3, #0
 8009abe:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d122      	bne.n	8009b18 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	68da      	ldr	r2, [r3, #12]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009ae0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ae2:	f7fb fb7d 	bl	80051e0 <HAL_GetTick>
 8009ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009ae8:	e00c      	b.n	8009b04 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009aea:	f7fb fb79 	bl	80051e0 <HAL_GetTick>
 8009aee:	4602      	mov	r2, r0
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009af8:	d904      	bls.n	8009b04 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2204      	movs	r2, #4
 8009afe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68db      	ldr	r3, [r3, #12]
 8009b0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d102      	bne.n	8009b18 <RTC_EnterInitMode+0x64>
 8009b12:	7bfb      	ldrb	r3, [r7, #15]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d1e8      	bne.n	8009aea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	68da      	ldr	r2, [r3, #12]
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009b3c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	f003 0320 	and.w	r3, r3, #32
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d10a      	bne.n	8009b62 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff ff89 	bl	8009a64 <HAL_RTC_WaitForSynchro>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d004      	beq.n	8009b62 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2204      	movs	r2, #4
 8009b5c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8009b5e:	2301      	movs	r3, #1
 8009b60:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8009b7a:	e005      	b.n	8009b88 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009b82:	79fb      	ldrb	r3, [r7, #7]
 8009b84:	3b0a      	subs	r3, #10
 8009b86:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009b88:	79fb      	ldrb	r3, [r7, #7]
 8009b8a:	2b09      	cmp	r3, #9
 8009b8c:	d8f6      	bhi.n	8009b7c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	79fb      	ldrb	r3, [r7, #7]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	b2db      	uxtb	r3, r3
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3714      	adds	r7, #20
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr

08009ba8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b087      	sub	sp, #28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	7f1b      	ldrb	r3, [r3, #28]
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d101      	bne.n	8009bc4 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	e050      	b.n	8009c66 <HAL_RTCEx_SetTimeStamp+0xbe>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2202      	movs	r2, #2
 8009bce:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f022 0206 	bic.w	r2, r2, #6
 8009bde:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	430a      	orrs	r2, r1
 8009bee:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	689a      	ldr	r2, [r3, #8]
 8009bf6:	4b1f      	ldr	r3, [pc, #124]	@ (8009c74 <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009bf8:	4013      	ands	r3, r2
 8009bfa:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	4313      	orrs	r3, r2
 8009c02:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	22ca      	movs	r2, #202	@ 0xca
 8009c0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2253      	movs	r2, #83	@ 0x53
 8009c12:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	b2da      	uxtb	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 8009c2c:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	68db      	ldr	r3, [r3, #12]
 8009c34:	b2da      	uxtb	r2, r3
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 8009c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689a      	ldr	r2, [r3, #8]
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009c4e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	22ff      	movs	r2, #255	@ 0xff
 8009c56:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009c64:	2300      	movs	r3, #0
}
 8009c66:	4618      	mov	r0, r3
 8009c68:	371c      	adds	r7, #28
 8009c6a:	46bd      	mov	sp, r7
 8009c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c70:	4770      	bx	lr
 8009c72:	bf00      	nop
 8009c74:	fffff7f7 	.word	0xfffff7f7

08009c78 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d101      	bne.n	8009c8a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e022      	b.n	8009cd0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d105      	bne.n	8009ca2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f7f8 fd0f 	bl	80026c0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	2203      	movs	r2, #3
 8009ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 f814 	bl	8009cd8 <HAL_SD_InitCard>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d001      	beq.n	8009cba <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	e00a      	b.n	8009cd0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009cd8:	b5b0      	push	{r4, r5, r7, lr}
 8009cda:	b08e      	sub	sp, #56	@ 0x38
 8009cdc:	af04      	add	r7, sp, #16
 8009cde:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8009cec:	2300      	movs	r3, #0
 8009cee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8009cf4:	2376      	movs	r3, #118	@ 0x76
 8009cf6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681d      	ldr	r5, [r3, #0]
 8009cfc:	466c      	mov	r4, sp
 8009cfe:	f107 0314 	add.w	r3, r7, #20
 8009d02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009d06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009d0a:	f107 0308 	add.w	r3, r7, #8
 8009d0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009d10:	4628      	mov	r0, r5
 8009d12:	f003 f957 	bl	800cfc4 <SDMMC_Init>
 8009d16:	4603      	mov	r3, r0
 8009d18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8009d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d001      	beq.n	8009d28 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8009d24:	2301      	movs	r3, #1
 8009d26:	e059      	b.n	8009ddc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	685a      	ldr	r2, [r3, #4]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009d36:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f003 f98b 	bl	800d058 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009d50:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009d52:	2002      	movs	r0, #2
 8009d54:	f7fb fa50 	bl	80051f8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f000 ff59 	bl	800ac10 <SD_PowerON>
 8009d5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d00b      	beq.n	8009d7e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2201      	movs	r2, #1
 8009d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	431a      	orrs	r2, r3
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e02e      	b.n	8009ddc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fe78 	bl	800aa74 <SD_InitCard>
 8009d84:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d86:	6a3b      	ldr	r3, [r7, #32]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d00b      	beq.n	8009da4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2201      	movs	r2, #1
 8009d90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d98:	6a3b      	ldr	r3, [r7, #32]
 8009d9a:	431a      	orrs	r2, r3
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009da0:	2301      	movs	r3, #1
 8009da2:	e01b      	b.n	8009ddc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009dac:	4618      	mov	r0, r3
 8009dae:	f003 f9e5 	bl	800d17c <SDMMC_CmdBlockLength>
 8009db2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009db4:	6a3b      	ldr	r3, [r7, #32]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d00f      	beq.n	8009dda <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	4a09      	ldr	r2, [pc, #36]	@ (8009de4 <HAL_SD_InitCard+0x10c>)
 8009dc0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e000      	b.n	8009ddc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8009dda:	2300      	movs	r3, #0
}
 8009ddc:	4618      	mov	r0, r3
 8009dde:	3728      	adds	r7, #40	@ 0x28
 8009de0:	46bd      	mov	sp, r7
 8009de2:	bdb0      	pop	{r4, r5, r7, pc}
 8009de4:	004005ff 	.word	0x004005ff

08009de8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08c      	sub	sp, #48	@ 0x30
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
 8009df4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d107      	bne.n	8009e10 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e04:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e0c3      	b.n	8009f98 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009e16:	b2db      	uxtb	r3, r3
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	f040 80bc 	bne.w	8009f96 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009e24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	441a      	add	r2, r3
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e2e:	429a      	cmp	r2, r3
 8009e30:	d907      	bls.n	8009e42 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e36:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e0aa      	b.n	8009f98 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2203      	movs	r2, #3
 8009e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2200      	movs	r2, #0
 8009e50:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009e60:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e66:	4a4e      	ldr	r2, [pc, #312]	@ (8009fa0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009e68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e6e:	4a4d      	ldr	r2, [pc, #308]	@ (8009fa4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009e70:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e76:	2200      	movs	r2, #0
 8009e78:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e7e:	2200      	movs	r2, #0
 8009e80:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	430a      	orrs	r2, r1
 8009e9c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	3380      	adds	r3, #128	@ 0x80
 8009ea8:	4619      	mov	r1, r3
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	025b      	lsls	r3, r3, #9
 8009eb0:	089b      	lsrs	r3, r3, #2
 8009eb2:	f7fb ffad 	bl	8005e10 <HAL_DMA_Start_IT>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d017      	beq.n	8009eec <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8009eca:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a35      	ldr	r2, [pc, #212]	@ (8009fa8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009ed2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ed8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e055      	b.n	8009f98 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f042 0208 	orr.w	r2, r2, #8
 8009efa:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d002      	beq.n	8009f0a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8009f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f06:	025b      	lsls	r3, r3, #9
 8009f08:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8009f0e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	025b      	lsls	r3, r3, #9
 8009f14:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009f16:	2390      	movs	r3, #144	@ 0x90
 8009f18:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8009f22:	2301      	movs	r3, #1
 8009f24:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f107 0210 	add.w	r2, r7, #16
 8009f2e:	4611      	mov	r1, r2
 8009f30:	4618      	mov	r0, r3
 8009f32:	f003 f8f7 	bl	800d124 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d90a      	bls.n	8009f52 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2282      	movs	r2, #130	@ 0x82
 8009f40:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f003 f95b 	bl	800d204 <SDMMC_CmdReadMultiBlock>
 8009f4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009f50:	e009      	b.n	8009f66 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2281      	movs	r2, #129	@ 0x81
 8009f56:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f003 f92e 	bl	800d1c0 <SDMMC_CmdReadSingleBlock>
 8009f64:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d012      	beq.n	8009f92 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a0d      	ldr	r2, [pc, #52]	@ (8009fa8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009f72:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f7a:	431a      	orrs	r2, r3
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2201      	movs	r2, #1
 8009f84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e002      	b.n	8009f98 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	e000      	b.n	8009f98 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8009f96:	2302      	movs	r3, #2
  }
}
 8009f98:	4618      	mov	r0, r3
 8009f9a:	3730      	adds	r7, #48	@ 0x30
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	0800a883 	.word	0x0800a883
 8009fa4:	0800a8f5 	.word	0x0800a8f5
 8009fa8:	004005ff 	.word	0x004005ff

08009fac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08c      	sub	sp, #48	@ 0x30
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8009fbe:	68bb      	ldr	r3, [r7, #8]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d107      	bne.n	8009fd4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fc8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	e0c6      	b.n	800a162 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009fda:	b2db      	uxtb	r3, r3
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	f040 80bf 	bne.w	800a160 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009fe8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	441a      	add	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d907      	bls.n	800a006 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ffa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e0ad      	b.n	800a162 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	2203      	movs	r2, #3
 800a00a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2200      	movs	r2, #0
 800a014:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f042 021a 	orr.w	r2, r2, #26
 800a024:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a02a:	4a50      	ldr	r2, [pc, #320]	@ (800a16c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a02c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a032:	4a4f      	ldr	r2, [pc, #316]	@ (800a170 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a034:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a03a:	2200      	movs	r2, #0
 800a03c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a042:	2b01      	cmp	r3, #1
 800a044:	d002      	beq.n	800a04c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a048:	025b      	lsls	r3, r3, #9
 800a04a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d90a      	bls.n	800a068 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	22a0      	movs	r2, #160	@ 0xa0
 800a056:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a05e:	4618      	mov	r0, r3
 800a060:	f003 f914 	bl	800d28c <SDMMC_CmdWriteMultiBlock>
 800a064:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a066:	e009      	b.n	800a07c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2290      	movs	r2, #144	@ 0x90
 800a06c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a074:	4618      	mov	r0, r3
 800a076:	f003 f8e7 	bl	800d248 <SDMMC_CmdWriteSingleBlock>
 800a07a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a07c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d012      	beq.n	800a0a8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	4a3b      	ldr	r2, [pc, #236]	@ (800a174 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a088:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a08e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a090:	431a      	orrs	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2201      	movs	r2, #1
 800a09a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e05c      	b.n	800a162 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	f042 0208 	orr.w	r2, r2, #8
 800a0b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0bc:	2240      	movs	r2, #64	@ 0x40
 800a0be:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0d0:	689a      	ldr	r2, [r3, #8]
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	430a      	orrs	r2, r1
 800a0da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a0e0:	68b9      	ldr	r1, [r7, #8]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3380      	adds	r3, #128	@ 0x80
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	025b      	lsls	r3, r3, #9
 800a0ee:	089b      	lsrs	r3, r3, #2
 800a0f0:	f7fb fe8e 	bl	8005e10 <HAL_DMA_Start_IT>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d01a      	beq.n	800a130 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f022 021a 	bic.w	r2, r2, #26
 800a108:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a19      	ldr	r2, [pc, #100]	@ (800a174 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a110:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a116:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	e018      	b.n	800a162 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a130:	f04f 33ff 	mov.w	r3, #4294967295
 800a134:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	025b      	lsls	r3, r3, #9
 800a13a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a13c:	2390      	movs	r3, #144	@ 0x90
 800a13e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a140:	2300      	movs	r3, #0
 800a142:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a144:	2300      	movs	r3, #0
 800a146:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a148:	2301      	movs	r3, #1
 800a14a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f107 0210 	add.w	r2, r7, #16
 800a154:	4611      	mov	r1, r2
 800a156:	4618      	mov	r0, r3
 800a158:	f002 ffe4 	bl	800d124 <SDMMC_ConfigData>

      return HAL_OK;
 800a15c:	2300      	movs	r3, #0
 800a15e:	e000      	b.n	800a162 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a160:	2302      	movs	r3, #2
  }
}
 800a162:	4618      	mov	r0, r3
 800a164:	3730      	adds	r7, #48	@ 0x30
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	0800a859 	.word	0x0800a859
 800a170:	0800a8f5 	.word	0x0800a8f5
 800a174:	004005ff 	.word	0x004005ff

0800a178 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b084      	sub	sp, #16
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a184:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a18c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a190:	2b00      	cmp	r3, #0
 800a192:	d008      	beq.n	800a1a6 <HAL_SD_IRQHandler+0x2e>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f003 0308 	and.w	r3, r3, #8
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d003      	beq.n	800a1a6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f000 fdec 	bl	800ad7c <SD_Read_IT>
 800a1a4:	e15a      	b.n	800a45c <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a1ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 808d 	beq.w	800a2d0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a1be:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	4b9a      	ldr	r3, [pc, #616]	@ (800a434 <HAL_SD_IRQHandler+0x2bc>)
 800a1cc:	400b      	ands	r3, r1
 800a1ce:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f022 0201 	bic.w	r2, r2, #1
 800a1de:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f003 0308 	and.w	r3, r3, #8
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d039      	beq.n	800a25e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	f003 0302 	and.w	r3, r3, #2
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d104      	bne.n	800a1fe <HAL_SD_IRQHandler+0x86>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f003 0320 	and.w	r3, r3, #32
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d011      	beq.n	800a222 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4618      	mov	r0, r3
 800a204:	f003 f864 	bl	800d2d0 <SDMMC_CmdStopTransfer>
 800a208:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d008      	beq.n	800a222 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	431a      	orrs	r2, r3
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f000 f921 	bl	800a464 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a22a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2201      	movs	r2, #1
 800a230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f003 0301 	and.w	r3, r3, #1
 800a240:	2b00      	cmp	r3, #0
 800a242:	d104      	bne.n	800a24e <HAL_SD_IRQHandler+0xd6>
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f003 0302 	and.w	r3, r3, #2
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d003      	beq.n	800a256 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f003 fc82 	bl	800db58 <HAL_SD_RxCpltCallback>
 800a254:	e102      	b.n	800a45c <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f003 fc74 	bl	800db44 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a25c:	e0fe      	b.n	800a45c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 80f9 	beq.w	800a45c <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f003 0320 	and.w	r3, r3, #32
 800a270:	2b00      	cmp	r3, #0
 800a272:	d011      	beq.n	800a298 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4618      	mov	r0, r3
 800a27a:	f003 f829 	bl	800d2d0 <SDMMC_CmdStopTransfer>
 800a27e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d008      	beq.n	800a298 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	431a      	orrs	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f8e6 	bl	800a464 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	f040 80dc 	bne.w	800a45c <HAL_SD_IRQHandler+0x2e4>
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f003 0302 	and.w	r3, r3, #2
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	f040 80d6 	bne.w	800a45c <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f022 0208 	bic.w	r2, r2, #8
 800a2be:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2201      	movs	r2, #1
 800a2c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f003 fc3b 	bl	800db44 <HAL_SD_TxCpltCallback>
}
 800a2ce:	e0c5      	b.n	800a45c <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d008      	beq.n	800a2f0 <HAL_SD_IRQHandler+0x178>
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f003 0308 	and.w	r3, r3, #8
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d003      	beq.n	800a2f0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f000 fd98 	bl	800ae1e <SD_Write_IT>
 800a2ee:	e0b5      	b.n	800a45c <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2f6:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 80ae 	beq.w	800a45c <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a306:	f003 0302 	and.w	r3, r3, #2
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d005      	beq.n	800a31a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a312:	f043 0202 	orr.w	r2, r3, #2
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a320:	f003 0308 	and.w	r3, r3, #8
 800a324:	2b00      	cmp	r3, #0
 800a326:	d005      	beq.n	800a334 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a32c:	f043 0208 	orr.w	r2, r3, #8
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a33a:	f003 0320 	and.w	r3, r3, #32
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d005      	beq.n	800a34e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a346:	f043 0220 	orr.w	r2, r3, #32
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a354:	f003 0310 	and.w	r3, r3, #16
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d005      	beq.n	800a368 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a360:	f043 0210 	orr.w	r2, r3, #16
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a370:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a380:	63da      	str	r2, [r3, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4618      	mov	r0, r3
 800a388:	f002 ffa2 	bl	800d2d0 <SDMMC_CmdStopTransfer>
 800a38c:	4602      	mov	r2, r0
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a392:	431a      	orrs	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f003 0308 	and.w	r3, r3, #8
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00a      	beq.n	800a3b8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2201      	movs	r2, #1
 800a3a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 f857 	bl	800a464 <HAL_SD_ErrorCallback>
}
 800a3b6:	e051      	b.n	800a45c <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d04c      	beq.n	800a45c <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f003 0310 	and.w	r3, r3, #16
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d104      	bne.n	800a3d6 <HAL_SD_IRQHandler+0x25e>
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d011      	beq.n	800a3fa <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3da:	4a17      	ldr	r2, [pc, #92]	@ (800a438 <HAL_SD_IRQHandler+0x2c0>)
 800a3dc:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f7fb fd74 	bl	8005ed0 <HAL_DMA_Abort_IT>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d036      	beq.n	800a45c <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f000 fad0 	bl	800a998 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a3f8:	e030      	b.n	800a45c <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	f003 0301 	and.w	r3, r3, #1
 800a400:	2b00      	cmp	r3, #0
 800a402:	d104      	bne.n	800a40e <HAL_SD_IRQHandler+0x296>
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f003 0302 	and.w	r3, r3, #2
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d018      	beq.n	800a440 <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a412:	4a0a      	ldr	r2, [pc, #40]	@ (800a43c <HAL_SD_IRQHandler+0x2c4>)
 800a414:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fb fd58 	bl	8005ed0 <HAL_DMA_Abort_IT>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d01a      	beq.n	800a45c <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 faeb 	bl	800aa06 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a430:	e014      	b.n	800a45c <HAL_SD_IRQHandler+0x2e4>
 800a432:	bf00      	nop
 800a434:	ffff3ec5 	.word	0xffff3ec5
 800a438:	0800a999 	.word	0x0800a999
 800a43c:	0800aa07 	.word	0x0800aa07
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2200      	movs	r2, #0
 800a444:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2201      	movs	r2, #1
 800a44a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	2200      	movs	r2, #0
 800a452:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f003 fb6b 	bl	800db30 <HAL_SD_AbortCallback>
}
 800a45a:	e7ff      	b.n	800a45c <HAL_SD_IRQHandler+0x2e4>
 800a45c:	bf00      	nop
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a46c:	bf00      	nop
 800a46e:	370c      	adds	r7, #12
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr

0800a478 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a486:	0f9b      	lsrs	r3, r3, #30
 800a488:	b2da      	uxtb	r2, r3
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a492:	0e9b      	lsrs	r3, r3, #26
 800a494:	b2db      	uxtb	r3, r3
 800a496:	f003 030f 	and.w	r3, r3, #15
 800a49a:	b2da      	uxtb	r2, r3
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4a4:	0e1b      	lsrs	r3, r3, #24
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	f003 0303 	and.w	r3, r3, #3
 800a4ac:	b2da      	uxtb	r2, r3
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4b6:	0c1b      	lsrs	r3, r3, #16
 800a4b8:	b2da      	uxtb	r2, r3
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4c2:	0a1b      	lsrs	r3, r3, #8
 800a4c4:	b2da      	uxtb	r2, r3
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4ce:	b2da      	uxtb	r2, r3
 800a4d0:	683b      	ldr	r3, [r7, #0]
 800a4d2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4d8:	0d1b      	lsrs	r3, r3, #20
 800a4da:	b29a      	uxth	r2, r3
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4e4:	0c1b      	lsrs	r3, r3, #16
 800a4e6:	b2db      	uxtb	r3, r3
 800a4e8:	f003 030f 	and.w	r3, r3, #15
 800a4ec:	b2da      	uxtb	r2, r3
 800a4ee:	683b      	ldr	r3, [r7, #0]
 800a4f0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a4f6:	0bdb      	lsrs	r3, r3, #15
 800a4f8:	b2db      	uxtb	r3, r3
 800a4fa:	f003 0301 	and.w	r3, r3, #1
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a508:	0b9b      	lsrs	r3, r3, #14
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	f003 0301 	and.w	r3, r3, #1
 800a510:	b2da      	uxtb	r2, r3
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a51a:	0b5b      	lsrs	r3, r3, #13
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	f003 0301 	and.w	r3, r3, #1
 800a522:	b2da      	uxtb	r2, r3
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a52c:	0b1b      	lsrs	r3, r3, #12
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	b2da      	uxtb	r2, r3
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	2200      	movs	r2, #0
 800a53e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a544:	2b00      	cmp	r3, #0
 800a546:	d163      	bne.n	800a610 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a54c:	009a      	lsls	r2, r3, #2
 800a54e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800a552:	4013      	ands	r3, r2
 800a554:	687a      	ldr	r2, [r7, #4]
 800a556:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800a558:	0f92      	lsrs	r2, r2, #30
 800a55a:	431a      	orrs	r2, r3
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a564:	0edb      	lsrs	r3, r3, #27
 800a566:	b2db      	uxtb	r3, r3
 800a568:	f003 0307 	and.w	r3, r3, #7
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a576:	0e1b      	lsrs	r3, r3, #24
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	f003 0307 	and.w	r3, r3, #7
 800a57e:	b2da      	uxtb	r2, r3
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a588:	0d5b      	lsrs	r3, r3, #21
 800a58a:	b2db      	uxtb	r3, r3
 800a58c:	f003 0307 	and.w	r3, r3, #7
 800a590:	b2da      	uxtb	r2, r3
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a59a:	0c9b      	lsrs	r3, r3, #18
 800a59c:	b2db      	uxtb	r3, r3
 800a59e:	f003 0307 	and.w	r3, r3, #7
 800a5a2:	b2da      	uxtb	r2, r3
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a5ac:	0bdb      	lsrs	r3, r3, #15
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	f003 0307 	and.w	r3, r3, #7
 800a5b4:	b2da      	uxtb	r2, r3
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	1c5a      	adds	r2, r3, #1
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	7e1b      	ldrb	r3, [r3, #24]
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	f003 0307 	and.w	r3, r3, #7
 800a5ce:	3302      	adds	r3, #2
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5d6:	687a      	ldr	r2, [r7, #4]
 800a5d8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800a5da:	fb03 f202 	mul.w	r2, r3, r2
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	7a1b      	ldrb	r3, [r3, #8]
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	f003 030f 	and.w	r3, r3, #15
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	409a      	lsls	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800a5fc:	0a52      	lsrs	r2, r2, #9
 800a5fe:	fb03 f202 	mul.w	r2, r3, r2
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a60c:	661a      	str	r2, [r3, #96]	@ 0x60
 800a60e:	e031      	b.n	800a674 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a614:	2b01      	cmp	r3, #1
 800a616:	d11d      	bne.n	800a654 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a61c:	041b      	lsls	r3, r3, #16
 800a61e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a626:	0c1b      	lsrs	r3, r3, #16
 800a628:	431a      	orrs	r2, r3
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	3301      	adds	r3, #1
 800a634:	029a      	lsls	r2, r3, #10
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a648:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	661a      	str	r2, [r3, #96]	@ 0x60
 800a652:	e00f      	b.n	800a674 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	4a58      	ldr	r2, [pc, #352]	@ (800a7bc <HAL_SD_GetCardCSD+0x344>)
 800a65a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a660:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2201      	movs	r2, #1
 800a66c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e09d      	b.n	800a7b0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a678:	0b9b      	lsrs	r3, r3, #14
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	f003 0301 	and.w	r3, r3, #1
 800a680:	b2da      	uxtb	r2, r3
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a68a:	09db      	lsrs	r3, r3, #7
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a692:	b2da      	uxtb	r2, r3
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a69c:	b2db      	uxtb	r3, r3
 800a69e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a6a2:	b2da      	uxtb	r2, r3
 800a6a4:	683b      	ldr	r3, [r7, #0]
 800a6a6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6ac:	0fdb      	lsrs	r3, r3, #31
 800a6ae:	b2da      	uxtb	r2, r3
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6b8:	0f5b      	lsrs	r3, r3, #29
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	f003 0303 	and.w	r3, r3, #3
 800a6c0:	b2da      	uxtb	r2, r3
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6ca:	0e9b      	lsrs	r3, r3, #26
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	f003 0307 	and.w	r3, r3, #7
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6dc:	0d9b      	lsrs	r3, r3, #22
 800a6de:	b2db      	uxtb	r3, r3
 800a6e0:	f003 030f 	and.w	r3, r3, #15
 800a6e4:	b2da      	uxtb	r2, r3
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a6ee:	0d5b      	lsrs	r3, r3, #21
 800a6f0:	b2db      	uxtb	r3, r3
 800a6f2:	f003 0301 	and.w	r3, r3, #1
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	2200      	movs	r2, #0
 800a702:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a70a:	0c1b      	lsrs	r3, r3, #16
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	b2da      	uxtb	r2, r3
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a71e:	0bdb      	lsrs	r3, r3, #15
 800a720:	b2db      	uxtb	r3, r3
 800a722:	f003 0301 	and.w	r3, r3, #1
 800a726:	b2da      	uxtb	r2, r3
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a732:	0b9b      	lsrs	r3, r3, #14
 800a734:	b2db      	uxtb	r3, r3
 800a736:	f003 0301 	and.w	r3, r3, #1
 800a73a:	b2da      	uxtb	r2, r3
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a746:	0b5b      	lsrs	r3, r3, #13
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	b2da      	uxtb	r2, r3
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a75a:	0b1b      	lsrs	r3, r3, #12
 800a75c:	b2db      	uxtb	r3, r3
 800a75e:	f003 0301 	and.w	r3, r3, #1
 800a762:	b2da      	uxtb	r2, r3
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a76e:	0a9b      	lsrs	r3, r3, #10
 800a770:	b2db      	uxtb	r3, r3
 800a772:	f003 0303 	and.w	r3, r3, #3
 800a776:	b2da      	uxtb	r2, r3
 800a778:	683b      	ldr	r3, [r7, #0]
 800a77a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a782:	0a1b      	lsrs	r3, r3, #8
 800a784:	b2db      	uxtb	r3, r3
 800a786:	f003 0303 	and.w	r3, r3, #3
 800a78a:	b2da      	uxtb	r2, r3
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a796:	085b      	lsrs	r3, r3, #1
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a79e:	b2da      	uxtb	r2, r3
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800a7ae:	2300      	movs	r3, #0
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	370c      	adds	r7, #12
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	004005ff 	.word	0x004005ff

0800a7c0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	370c      	adds	r7, #12
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b086      	sub	sp, #24
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800a824:	f107 030c 	add.w	r3, r7, #12
 800a828:	4619      	mov	r1, r3
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fa7e 	bl	800ad2c <SD_SendStatus>
 800a830:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d005      	beq.n	800a844 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a83c:	697b      	ldr	r3, [r7, #20]
 800a83e:	431a      	orrs	r2, r3
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	0a5b      	lsrs	r3, r3, #9
 800a848:	f003 030f 	and.w	r3, r3, #15
 800a84c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800a84e:	693b      	ldr	r3, [r7, #16]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3718      	adds	r7, #24
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a864:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a874:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800a876:	bf00      	nop
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr

0800a882 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a882:	b580      	push	{r7, lr}
 800a884:	b084      	sub	sp, #16
 800a886:	af00      	add	r7, sp, #0
 800a888:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a88e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a894:	2b82      	cmp	r3, #130	@ 0x82
 800a896:	d111      	bne.n	800a8bc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4618      	mov	r0, r3
 800a89e:	f002 fd17 	bl	800d2d0 <SDMMC_CmdStopTransfer>
 800a8a2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800a8a4:	68bb      	ldr	r3, [r7, #8]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d008      	beq.n	800a8bc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a8ae:	68bb      	ldr	r3, [r7, #8]
 800a8b0:	431a      	orrs	r2, r3
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800a8b6:	68f8      	ldr	r0, [r7, #12]
 800a8b8:	f7ff fdd4 	bl	800a464 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f022 0208 	bic.w	r2, r2, #8
 800a8ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a8d4:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800a8e4:	68f8      	ldr	r0, [r7, #12]
 800a8e6:	f003 f937 	bl	800db58 <HAL_SD_RxCpltCallback>
#endif
}
 800a8ea:	bf00      	nop
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
	...

0800a8f4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a900:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7fb fc90 	bl	8006228 <HAL_DMA_GetError>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b02      	cmp	r3, #2
 800a90c:	d03e      	beq.n	800a98c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a914:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a91a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a91c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	2b01      	cmp	r3, #1
 800a922:	d002      	beq.n	800a92a <SD_DMAError+0x36>
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	2b01      	cmp	r3, #1
 800a928:	d12d      	bne.n	800a986 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	4a19      	ldr	r2, [pc, #100]	@ (800a994 <SD_DMAError+0xa0>)
 800a930:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800a940:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a942:	697b      	ldr	r3, [r7, #20]
 800a944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a946:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a94a:	697b      	ldr	r3, [r7, #20]
 800a94c:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800a94e:	6978      	ldr	r0, [r7, #20]
 800a950:	f7ff ff62 	bl	800a818 <HAL_SD_GetCardState>
 800a954:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	2b06      	cmp	r3, #6
 800a95a:	d002      	beq.n	800a962 <SD_DMAError+0x6e>
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	2b05      	cmp	r3, #5
 800a960:	d10a      	bne.n	800a978 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a962:	697b      	ldr	r3, [r7, #20]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4618      	mov	r0, r3
 800a968:	f002 fcb2 	bl	800d2d0 <SDMMC_CmdStopTransfer>
 800a96c:	4602      	mov	r2, r0
 800a96e:	697b      	ldr	r3, [r7, #20]
 800a970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a972:	431a      	orrs	r2, r3
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	2201      	movs	r2, #1
 800a97c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	2200      	movs	r2, #0
 800a984:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800a986:	6978      	ldr	r0, [r7, #20]
 800a988:	f7ff fd6c 	bl	800a464 <HAL_SD_ErrorCallback>
#endif
  }
}
 800a98c:	bf00      	nop
 800a98e:	3718      	adds	r7, #24
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	004005ff 	.word	0x004005ff

0800a998 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	f240 523a 	movw	r2, #1338	@ 0x53a
 800a9ae:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800a9b0:	68f8      	ldr	r0, [r7, #12]
 800a9b2:	f7ff ff31 	bl	800a818 <HAL_SD_GetCardState>
 800a9b6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	2b06      	cmp	r3, #6
 800a9ca:	d002      	beq.n	800a9d2 <SD_DMATxAbort+0x3a>
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2b05      	cmp	r3, #5
 800a9d0:	d10a      	bne.n	800a9e8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f002 fc7a 	bl	800d2d0 <SDMMC_CmdStopTransfer>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9e2:	431a      	orrs	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d103      	bne.n	800a9f8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f003 f89d 	bl	800db30 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800a9f6:	e002      	b.n	800a9fe <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7ff fd33 	bl	800a464 <HAL_SD_ErrorCallback>
}
 800a9fe:	bf00      	nop
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b084      	sub	sp, #16
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa12:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f240 523a 	movw	r2, #1338	@ 0x53a
 800aa1c:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f7ff fefa 	bl	800a818 <HAL_SD_GetCardState>
 800aa24:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2b06      	cmp	r3, #6
 800aa38:	d002      	beq.n	800aa40 <SD_DMARxAbort+0x3a>
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	2b05      	cmp	r3, #5
 800aa3e:	d10a      	bne.n	800aa56 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4618      	mov	r0, r3
 800aa46:	f002 fc43 	bl	800d2d0 <SDMMC_CmdStopTransfer>
 800aa4a:	4602      	mov	r2, r0
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa50:	431a      	orrs	r2, r3
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d103      	bne.n	800aa66 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f003 f866 	bl	800db30 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800aa64:	e002      	b.n	800aa6c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800aa66:	68f8      	ldr	r0, [r7, #12]
 800aa68:	f7ff fcfc 	bl	800a464 <HAL_SD_ErrorCallback>
}
 800aa6c:	bf00      	nop
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800aa74:	b5b0      	push	{r4, r5, r7, lr}
 800aa76:	b094      	sub	sp, #80	@ 0x50
 800aa78:	af04      	add	r7, sp, #16
 800aa7a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4618      	mov	r0, r3
 800aa86:	f002 faf5 	bl	800d074 <SDMMC_GetPowerState>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d102      	bne.n	800aa96 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800aa90:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800aa94:	e0b8      	b.n	800ac08 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa9a:	2b03      	cmp	r3, #3
 800aa9c:	d02f      	beq.n	800aafe <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	f002 fcdc 	bl	800d460 <SDMMC_CmdSendCID>
 800aaa8:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800aaaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d001      	beq.n	800aab4 <SD_InitCard+0x40>
    {
      return errorstate;
 800aab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aab2:	e0a9      	b.n	800ac08 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	2100      	movs	r1, #0
 800aaba:	4618      	mov	r0, r3
 800aabc:	f002 fb1f 	bl	800d0fe <SDMMC_GetResponse>
 800aac0:	4602      	mov	r2, r0
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2104      	movs	r1, #4
 800aacc:	4618      	mov	r0, r3
 800aace:	f002 fb16 	bl	800d0fe <SDMMC_GetResponse>
 800aad2:	4602      	mov	r2, r0
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	2108      	movs	r1, #8
 800aade:	4618      	mov	r0, r3
 800aae0:	f002 fb0d 	bl	800d0fe <SDMMC_GetResponse>
 800aae4:	4602      	mov	r2, r0
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	210c      	movs	r1, #12
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f002 fb04 	bl	800d0fe <SDMMC_GetResponse>
 800aaf6:	4602      	mov	r2, r0
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d00d      	beq.n	800ab22 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f107 020e 	add.w	r2, r7, #14
 800ab0e:	4611      	mov	r1, r2
 800ab10:	4618      	mov	r0, r3
 800ab12:	f002 fce2 	bl	800d4da <SDMMC_CmdSetRelAdd>
 800ab16:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <SD_InitCard+0xae>
    {
      return errorstate;
 800ab1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab20:	e072      	b.n	800ac08 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab26:	2b03      	cmp	r3, #3
 800ab28:	d036      	beq.n	800ab98 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800ab2a:	89fb      	ldrh	r3, [r7, #14]
 800ab2c:	461a      	mov	r2, r3
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ab3a:	041b      	lsls	r3, r3, #16
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	4610      	mov	r0, r2
 800ab40:	f002 fcac 	bl	800d49c <SDMMC_CmdSendCSD>
 800ab44:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ab46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d001      	beq.n	800ab50 <SD_InitCard+0xdc>
    {
      return errorstate;
 800ab4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab4e:	e05b      	b.n	800ac08 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	2100      	movs	r1, #0
 800ab56:	4618      	mov	r0, r3
 800ab58:	f002 fad1 	bl	800d0fe <SDMMC_GetResponse>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2104      	movs	r1, #4
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f002 fac8 	bl	800d0fe <SDMMC_GetResponse>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	2108      	movs	r1, #8
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f002 fabf 	bl	800d0fe <SDMMC_GetResponse>
 800ab80:	4602      	mov	r2, r0
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	210c      	movs	r1, #12
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f002 fab6 	bl	800d0fe <SDMMC_GetResponse>
 800ab92:	4602      	mov	r2, r0
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2104      	movs	r1, #4
 800ab9e:	4618      	mov	r0, r3
 800aba0:	f002 faad 	bl	800d0fe <SDMMC_GetResponse>
 800aba4:	4603      	mov	r3, r0
 800aba6:	0d1a      	lsrs	r2, r3, #20
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800abac:	f107 0310 	add.w	r3, r7, #16
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7ff fc60 	bl	800a478 <HAL_SD_GetCardCSD>
 800abb8:	4603      	mov	r3, r0
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d002      	beq.n	800abc4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800abbe:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800abc2:	e021      	b.n	800ac08 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6819      	ldr	r1, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800abcc:	041b      	lsls	r3, r3, #16
 800abce:	2200      	movs	r2, #0
 800abd0:	461c      	mov	r4, r3
 800abd2:	4615      	mov	r5, r2
 800abd4:	4622      	mov	r2, r4
 800abd6:	462b      	mov	r3, r5
 800abd8:	4608      	mov	r0, r1
 800abda:	f002 fb9b 	bl	800d314 <SDMMC_CmdSelDesel>
 800abde:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800abe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d001      	beq.n	800abea <SD_InitCard+0x176>
  {
    return errorstate;
 800abe6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800abe8:	e00e      	b.n	800ac08 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681d      	ldr	r5, [r3, #0]
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	466c      	mov	r4, sp
 800abf2:	f103 0210 	add.w	r2, r3, #16
 800abf6:	ca07      	ldmia	r2, {r0, r1, r2}
 800abf8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800abfc:	3304      	adds	r3, #4
 800abfe:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac00:	4628      	mov	r0, r5
 800ac02:	f002 f9df 	bl	800cfc4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3740      	adds	r7, #64	@ 0x40
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bdb0      	pop	{r4, r5, r7, pc}

0800ac10 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b086      	sub	sp, #24
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	617b      	str	r3, [r7, #20]
 800ac20:	2300      	movs	r3, #0
 800ac22:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f002 fb96 	bl	800d35a <SDMMC_CmdGoIdleState>
 800ac2e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d001      	beq.n	800ac3a <SD_PowerON+0x2a>
  {
    return errorstate;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	e072      	b.n	800ad20 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f002 fba9 	bl	800d396 <SDMMC_CmdOperCond>
 800ac44:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d00d      	beq.n	800ac68 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2200      	movs	r2, #0
 800ac50:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f002 fb7f 	bl	800d35a <SDMMC_CmdGoIdleState>
 800ac5c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d004      	beq.n	800ac6e <SD_PowerON+0x5e>
    {
      return errorstate;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	e05b      	b.n	800ad20 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d137      	bne.n	800ace6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2100      	movs	r1, #0
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f002 fba9 	bl	800d3d4 <SDMMC_CmdAppCommand>
 800ac82:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d02d      	beq.n	800ace6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac8a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800ac8e:	e047      	b.n	800ad20 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2100      	movs	r1, #0
 800ac96:	4618      	mov	r0, r3
 800ac98:	f002 fb9c 	bl	800d3d4 <SDMMC_CmdAppCommand>
 800ac9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d001      	beq.n	800aca8 <SD_PowerON+0x98>
    {
      return errorstate;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	e03b      	b.n	800ad20 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	491e      	ldr	r1, [pc, #120]	@ (800ad28 <SD_PowerON+0x118>)
 800acae:	4618      	mov	r0, r3
 800acb0:	f002 fbb2 	bl	800d418 <SDMMC_CmdAppOperCommand>
 800acb4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d002      	beq.n	800acc2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acbc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800acc0:	e02e      	b.n	800ad20 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2100      	movs	r1, #0
 800acc8:	4618      	mov	r0, r3
 800acca:	f002 fa18 	bl	800d0fe <SDMMC_GetResponse>
 800acce:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	0fdb      	lsrs	r3, r3, #31
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d101      	bne.n	800acdc <SD_PowerON+0xcc>
 800acd8:	2301      	movs	r3, #1
 800acda:	e000      	b.n	800acde <SD_PowerON+0xce>
 800acdc:	2300      	movs	r3, #0
 800acde:	613b      	str	r3, [r7, #16]

    count++;
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	3301      	adds	r3, #1
 800ace4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800acec:	4293      	cmp	r3, r2
 800acee:	d802      	bhi.n	800acf6 <SD_PowerON+0xe6>
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d0cc      	beq.n	800ac90 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800acfc:	4293      	cmp	r3, r2
 800acfe:	d902      	bls.n	800ad06 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ad00:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ad04:	e00c      	b.n	800ad20 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d003      	beq.n	800ad18 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	645a      	str	r2, [r3, #68]	@ 0x44
 800ad16:	e002      	b.n	800ad1e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3718      	adds	r7, #24
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	c1100000 	.word	0xc1100000

0800ad2c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b084      	sub	sp, #16
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d102      	bne.n	800ad42 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ad3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ad40:	e018      	b.n	800ad74 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad4a:	041b      	lsls	r3, r3, #16
 800ad4c:	4619      	mov	r1, r3
 800ad4e:	4610      	mov	r0, r2
 800ad50:	f002 fbe4 	bl	800d51c <SDMMC_CmdSendStatus>
 800ad54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d001      	beq.n	800ad60 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	e009      	b.n	800ad74 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2100      	movs	r1, #0
 800ad66:	4618      	mov	r0, r3
 800ad68:	f002 f9c9 	bl	800d0fe <SDMMC_GetResponse>
 800ad6c:	4602      	mov	r2, r0
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b086      	sub	sp, #24
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad88:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad8e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d03f      	beq.n	800ae16 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ad96:	2300      	movs	r3, #0
 800ad98:	617b      	str	r3, [r7, #20]
 800ad9a:	e033      	b.n	800ae04 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f002 f93b 	bl	800d01c <SDMMC_ReadFIFO>
 800ada6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	b2da      	uxtb	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	701a      	strb	r2, [r3, #0]
      tmp++;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	3301      	adds	r3, #1
 800adb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	3b01      	subs	r3, #1
 800adba:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	0a1b      	lsrs	r3, r3, #8
 800adc0:	b2da      	uxtb	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	3301      	adds	r3, #1
 800adca:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	3b01      	subs	r3, #1
 800add0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	0c1b      	lsrs	r3, r3, #16
 800add6:	b2da      	uxtb	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	701a      	strb	r2, [r3, #0]
      tmp++;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	3301      	adds	r3, #1
 800ade0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	3b01      	subs	r3, #1
 800ade6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	0e1b      	lsrs	r3, r3, #24
 800adec:	b2da      	uxtb	r2, r3
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	3301      	adds	r3, #1
 800adf6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	3b01      	subs	r3, #1
 800adfc:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	3301      	adds	r3, #1
 800ae02:	617b      	str	r3, [r7, #20]
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	2b07      	cmp	r3, #7
 800ae08:	d9c8      	bls.n	800ad9c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 800ae16:	bf00      	nop
 800ae18:	3718      	adds	r7, #24
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b086      	sub	sp, #24
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae30:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d043      	beq.n	800aec0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800ae38:	2300      	movs	r3, #0
 800ae3a:	617b      	str	r3, [r7, #20]
 800ae3c:	e037      	b.n	800aeae <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	781b      	ldrb	r3, [r3, #0]
 800ae42:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	3301      	adds	r3, #1
 800ae48:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	3b01      	subs	r3, #1
 800ae4e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	021a      	lsls	r2, r3, #8
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	3b01      	subs	r3, #1
 800ae66:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	041a      	lsls	r2, r3, #16
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	4313      	orrs	r3, r2
 800ae72:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	3301      	adds	r3, #1
 800ae78:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	3b01      	subs	r3, #1
 800ae7e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	061a      	lsls	r2, r3, #24
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	4313      	orrs	r3, r2
 800ae8a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	3301      	adds	r3, #1
 800ae90:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	3b01      	subs	r3, #1
 800ae96:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	f107 0208 	add.w	r2, r7, #8
 800aea0:	4611      	mov	r1, r2
 800aea2:	4618      	mov	r0, r3
 800aea4:	f002 f8c7 	bl	800d036 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	3301      	adds	r3, #1
 800aeac:	617b      	str	r3, [r7, #20]
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	2b07      	cmp	r3, #7
 800aeb2:	d9c4      	bls.n	800ae3e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	68fa      	ldr	r2, [r7, #12]
 800aeb8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	693a      	ldr	r2, [r7, #16]
 800aebe:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 800aec0:	bf00      	nop
 800aec2:	3718      	adds	r7, #24
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d101      	bne.n	800aedc <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	e025      	b.n	800af28 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d106      	bne.n	800aef6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f7f5 fdbd 	bl	8000a70 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2202      	movs	r2, #2
 800aefa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	3304      	adds	r3, #4
 800af06:	4619      	mov	r1, r3
 800af08:	4610      	mov	r0, r2
 800af0a:	f001 ff59 	bl	800cdc0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6818      	ldr	r0, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	461a      	mov	r2, r3
 800af18:	6839      	ldr	r1, [r7, #0]
 800af1a:	f001 ffad 	bl	800ce78 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2201      	movs	r2, #1
 800af22:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3708      	adds	r7, #8
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800af42:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800af44:	7dfb      	ldrb	r3, [r7, #23]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d101      	bne.n	800af4e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800af4a:	2302      	movs	r3, #2
 800af4c:	e021      	b.n	800af92 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800af4e:	7dfb      	ldrb	r3, [r7, #23]
 800af50:	2b01      	cmp	r3, #1
 800af52:	d002      	beq.n	800af5a <HAL_SDRAM_SendCommand+0x2a>
 800af54:	7dfb      	ldrb	r3, [r7, #23]
 800af56:	2b05      	cmp	r3, #5
 800af58:	d118      	bne.n	800af8c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2202      	movs	r2, #2
 800af5e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	687a      	ldr	r2, [r7, #4]
 800af68:	68b9      	ldr	r1, [r7, #8]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f001 ffee 	bl	800cf4c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b02      	cmp	r3, #2
 800af76:	d104      	bne.n	800af82 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2205      	movs	r2, #5
 800af7c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800af80:	e006      	b.n	800af90 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2201      	movs	r2, #1
 800af86:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800af8a:	e001      	b.n	800af90 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800af8c:	2301      	movs	r3, #1
 800af8e:	e000      	b.n	800af92 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800af90:	2300      	movs	r3, #0
}
 800af92:	4618      	mov	r0, r3
 800af94:	3718      	adds	r7, #24
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}

0800af9a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800af9a:	b580      	push	{r7, lr}
 800af9c:	b082      	sub	sp, #8
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800afaa:	b2db      	uxtb	r3, r3
 800afac:	2b02      	cmp	r3, #2
 800afae:	d101      	bne.n	800afb4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800afb0:	2302      	movs	r3, #2
 800afb2:	e016      	b.n	800afe2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d10f      	bne.n	800afe0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2202      	movs	r2, #2
 800afc4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	6839      	ldr	r1, [r7, #0]
 800afce:	4618      	mov	r0, r3
 800afd0:	f001 ffe0 	bl	800cf94 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800afdc:	2300      	movs	r3, #0
 800afde:	e000      	b.n	800afe2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
}
 800afe2:	4618      	mov	r0, r3
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b084      	sub	sp, #16
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d101      	bne.n	800affc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800aff8:	2301      	movs	r3, #1
 800affa:	e09d      	b.n	800b138 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b000:	2b00      	cmp	r3, #0
 800b002:	d108      	bne.n	800b016 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b00c:	d009      	beq.n	800b022 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	61da      	str	r2, [r3, #28]
 800b014:	e005      	b.n	800b022 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2200      	movs	r2, #0
 800b020:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	2b00      	cmp	r3, #0
 800b032:	d106      	bne.n	800b042 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	2200      	movs	r2, #0
 800b038:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7f7 fc67 	bl	8002910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2202      	movs	r2, #2
 800b046:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b058:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	68db      	ldr	r3, [r3, #12]
 800b05e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b062:	d902      	bls.n	800b06a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b064:	2300      	movs	r3, #0
 800b066:	60fb      	str	r3, [r7, #12]
 800b068:	e002      	b.n	800b070 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b06a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b06e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	68db      	ldr	r3, [r3, #12]
 800b074:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800b078:	d007      	beq.n	800b08a <HAL_SPI_Init+0xa0>
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800b082:	d002      	beq.n	800b08a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2200      	movs	r2, #0
 800b088:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b09a:	431a      	orrs	r2, r3
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	691b      	ldr	r3, [r3, #16]
 800b0a0:	f003 0302 	and.w	r3, r3, #2
 800b0a4:	431a      	orrs	r2, r3
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	695b      	ldr	r3, [r3, #20]
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	699b      	ldr	r3, [r3, #24]
 800b0b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b0b8:	431a      	orrs	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	69db      	ldr	r3, [r3, #28]
 800b0be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b0c2:	431a      	orrs	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6a1b      	ldr	r3, [r3, #32]
 800b0c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0cc:	ea42 0103 	orr.w	r1, r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	430a      	orrs	r2, r1
 800b0de:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	0c1b      	lsrs	r3, r3, #16
 800b0e6:	f003 0204 	and.w	r2, r3, #4
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0ee:	f003 0310 	and.w	r3, r3, #16
 800b0f2:	431a      	orrs	r2, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0f8:	f003 0308 	and.w	r3, r3, #8
 800b0fc:	431a      	orrs	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800b106:	ea42 0103 	orr.w	r1, r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	430a      	orrs	r2, r1
 800b116:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	69da      	ldr	r2, [r3, #28]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b126:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2201      	movs	r2, #1
 800b132:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e049      	b.n	800b1e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b158:	b2db      	uxtb	r3, r3
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d106      	bne.n	800b16c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	f7f9 fd84 	bl	8004c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2202      	movs	r2, #2
 800b170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681a      	ldr	r2, [r3, #0]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3304      	adds	r3, #4
 800b17c:	4619      	mov	r1, r3
 800b17e:	4610      	mov	r0, r2
 800b180:	f000 fc76 	bl	800ba70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2201      	movs	r2, #1
 800b1a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2201      	movs	r2, #1
 800b1b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2201      	movs	r2, #1
 800b1c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2201      	movs	r2, #1
 800b1c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b1e4:	2300      	movs	r3, #0
}
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	3708      	adds	r7, #8
 800b1ea:	46bd      	mov	sp, r7
 800b1ec:	bd80      	pop	{r7, pc}
	...

0800b1f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b1fe:	b2db      	uxtb	r3, r3
 800b200:	2b01      	cmp	r3, #1
 800b202:	d001      	beq.n	800b208 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b204:	2301      	movs	r3, #1
 800b206:	e054      	b.n	800b2b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2202      	movs	r2, #2
 800b20c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	68da      	ldr	r2, [r3, #12]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f042 0201 	orr.w	r2, r2, #1
 800b21e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a26      	ldr	r2, [pc, #152]	@ (800b2c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d022      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b232:	d01d      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a22      	ldr	r2, [pc, #136]	@ (800b2c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d018      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	4a21      	ldr	r2, [pc, #132]	@ (800b2c8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d013      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	4a1f      	ldr	r2, [pc, #124]	@ (800b2cc <HAL_TIM_Base_Start_IT+0xdc>)
 800b24e:	4293      	cmp	r3, r2
 800b250:	d00e      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	4a1e      	ldr	r2, [pc, #120]	@ (800b2d0 <HAL_TIM_Base_Start_IT+0xe0>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d009      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a1c      	ldr	r2, [pc, #112]	@ (800b2d4 <HAL_TIM_Base_Start_IT+0xe4>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d004      	beq.n	800b270 <HAL_TIM_Base_Start_IT+0x80>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	4a1b      	ldr	r2, [pc, #108]	@ (800b2d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d115      	bne.n	800b29c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	689a      	ldr	r2, [r3, #8]
 800b276:	4b19      	ldr	r3, [pc, #100]	@ (800b2dc <HAL_TIM_Base_Start_IT+0xec>)
 800b278:	4013      	ands	r3, r2
 800b27a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2b06      	cmp	r3, #6
 800b280:	d015      	beq.n	800b2ae <HAL_TIM_Base_Start_IT+0xbe>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b288:	d011      	beq.n	800b2ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f042 0201 	orr.w	r2, r2, #1
 800b298:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b29a:	e008      	b.n	800b2ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f042 0201 	orr.w	r2, r2, #1
 800b2aa:	601a      	str	r2, [r3, #0]
 800b2ac:	e000      	b.n	800b2b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b2b0:	2300      	movs	r3, #0
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	3714      	adds	r7, #20
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
 800b2be:	bf00      	nop
 800b2c0:	40010000 	.word	0x40010000
 800b2c4:	40000400 	.word	0x40000400
 800b2c8:	40000800 	.word	0x40000800
 800b2cc:	40000c00 	.word	0x40000c00
 800b2d0:	40010400 	.word	0x40010400
 800b2d4:	40014000 	.word	0x40014000
 800b2d8:	40001800 	.word	0x40001800
 800b2dc:	00010007 	.word	0x00010007

0800b2e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b082      	sub	sp, #8
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e049      	b.n	800b386 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b2f8:	b2db      	uxtb	r3, r3
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d106      	bne.n	800b30c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2200      	movs	r2, #0
 800b302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 f841 	bl	800b38e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2202      	movs	r2, #2
 800b310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	3304      	adds	r3, #4
 800b31c:	4619      	mov	r1, r3
 800b31e:	4610      	mov	r0, r2
 800b320:	f000 fba6 	bl	800ba70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2201      	movs	r2, #1
 800b328:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2201      	movs	r2, #1
 800b380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3708      	adds	r7, #8
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}

0800b38e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b38e:	b480      	push	{r7}
 800b390:	b083      	sub	sp, #12
 800b392:	af00      	add	r7, sp, #0
 800b394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b396:	bf00      	nop
 800b398:	370c      	adds	r7, #12
 800b39a:	46bd      	mov	sp, r7
 800b39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a0:	4770      	bx	lr

0800b3a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b3a2:	b580      	push	{r7, lr}
 800b3a4:	b082      	sub	sp, #8
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	691b      	ldr	r3, [r3, #16]
 800b3b0:	f003 0302 	and.w	r3, r3, #2
 800b3b4:	2b02      	cmp	r3, #2
 800b3b6:	d122      	bne.n	800b3fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	f003 0302 	and.w	r3, r3, #2
 800b3c2:	2b02      	cmp	r3, #2
 800b3c4:	d11b      	bne.n	800b3fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	f06f 0202 	mvn.w	r2, #2
 800b3ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	f003 0303 	and.w	r3, r3, #3
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d003      	beq.n	800b3ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 fb25 	bl	800ba34 <HAL_TIM_IC_CaptureCallback>
 800b3ea:	e005      	b.n	800b3f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f000 fb17 	bl	800ba20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3f2:	6878      	ldr	r0, [r7, #4]
 800b3f4:	f000 fb28 	bl	800ba48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	f003 0304 	and.w	r3, r3, #4
 800b408:	2b04      	cmp	r3, #4
 800b40a:	d122      	bne.n	800b452 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	68db      	ldr	r3, [r3, #12]
 800b412:	f003 0304 	and.w	r3, r3, #4
 800b416:	2b04      	cmp	r3, #4
 800b418:	d11b      	bne.n	800b452 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f06f 0204 	mvn.w	r2, #4
 800b422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2202      	movs	r2, #2
 800b428:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	699b      	ldr	r3, [r3, #24]
 800b430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b434:	2b00      	cmp	r3, #0
 800b436:	d003      	beq.n	800b440 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b438:	6878      	ldr	r0, [r7, #4]
 800b43a:	f000 fafb 	bl	800ba34 <HAL_TIM_IC_CaptureCallback>
 800b43e:	e005      	b.n	800b44c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 faed 	bl	800ba20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b446:	6878      	ldr	r0, [r7, #4]
 800b448:	f000 fafe 	bl	800ba48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	691b      	ldr	r3, [r3, #16]
 800b458:	f003 0308 	and.w	r3, r3, #8
 800b45c:	2b08      	cmp	r3, #8
 800b45e:	d122      	bne.n	800b4a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	f003 0308 	and.w	r3, r3, #8
 800b46a:	2b08      	cmp	r3, #8
 800b46c:	d11b      	bne.n	800b4a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	f06f 0208 	mvn.w	r2, #8
 800b476:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2204      	movs	r2, #4
 800b47c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	69db      	ldr	r3, [r3, #28]
 800b484:	f003 0303 	and.w	r3, r3, #3
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d003      	beq.n	800b494 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f000 fad1 	bl	800ba34 <HAL_TIM_IC_CaptureCallback>
 800b492:	e005      	b.n	800b4a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fac3 	bl	800ba20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f000 fad4 	bl	800ba48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	f003 0310 	and.w	r3, r3, #16
 800b4b0:	2b10      	cmp	r3, #16
 800b4b2:	d122      	bne.n	800b4fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	f003 0310 	and.w	r3, r3, #16
 800b4be:	2b10      	cmp	r3, #16
 800b4c0:	d11b      	bne.n	800b4fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f06f 0210 	mvn.w	r2, #16
 800b4ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2208      	movs	r2, #8
 800b4d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	69db      	ldr	r3, [r3, #28]
 800b4d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d003      	beq.n	800b4e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f000 faa7 	bl	800ba34 <HAL_TIM_IC_CaptureCallback>
 800b4e6:	e005      	b.n	800b4f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 fa99 	bl	800ba20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 faaa 	bl	800ba48 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	f003 0301 	and.w	r3, r3, #1
 800b504:	2b01      	cmp	r3, #1
 800b506:	d10e      	bne.n	800b526 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	f003 0301 	and.w	r3, r3, #1
 800b512:	2b01      	cmp	r3, #1
 800b514:	d107      	bne.n	800b526 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f06f 0201 	mvn.w	r2, #1
 800b51e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7f6 ffb1 	bl	8002488 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b530:	2b80      	cmp	r3, #128	@ 0x80
 800b532:	d10e      	bne.n	800b552 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b53e:	2b80      	cmp	r3, #128	@ 0x80
 800b540:	d107      	bne.n	800b552 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800b54a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f000 ffd1 	bl	800c4f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	691b      	ldr	r3, [r3, #16]
 800b558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b55c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b560:	d10e      	bne.n	800b580 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68db      	ldr	r3, [r3, #12]
 800b568:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b56c:	2b80      	cmp	r3, #128	@ 0x80
 800b56e:	d107      	bne.n	800b580 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	f000 ffc4 	bl	800c508 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b58a:	2b40      	cmp	r3, #64	@ 0x40
 800b58c:	d10e      	bne.n	800b5ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b598:	2b40      	cmp	r3, #64	@ 0x40
 800b59a:	d107      	bne.n	800b5ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b5a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 fa58 	bl	800ba5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	691b      	ldr	r3, [r3, #16]
 800b5b2:	f003 0320 	and.w	r3, r3, #32
 800b5b6:	2b20      	cmp	r3, #32
 800b5b8:	d10e      	bne.n	800b5d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68db      	ldr	r3, [r3, #12]
 800b5c0:	f003 0320 	and.w	r3, r3, #32
 800b5c4:	2b20      	cmp	r3, #32
 800b5c6:	d107      	bne.n	800b5d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	f06f 0220 	mvn.w	r2, #32
 800b5d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 ff84 	bl	800c4e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b5d8:	bf00      	nop
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b086      	sub	sp, #24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	60f8      	str	r0, [r7, #12]
 800b5e8:	60b9      	str	r1, [r7, #8]
 800b5ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d101      	bne.n	800b5fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	e0ff      	b.n	800b7fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2201      	movs	r2, #1
 800b602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2b14      	cmp	r3, #20
 800b60a:	f200 80f0 	bhi.w	800b7ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800b60e:	a201      	add	r2, pc, #4	@ (adr r2, 800b614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b614:	0800b669 	.word	0x0800b669
 800b618:	0800b7ef 	.word	0x0800b7ef
 800b61c:	0800b7ef 	.word	0x0800b7ef
 800b620:	0800b7ef 	.word	0x0800b7ef
 800b624:	0800b6a9 	.word	0x0800b6a9
 800b628:	0800b7ef 	.word	0x0800b7ef
 800b62c:	0800b7ef 	.word	0x0800b7ef
 800b630:	0800b7ef 	.word	0x0800b7ef
 800b634:	0800b6eb 	.word	0x0800b6eb
 800b638:	0800b7ef 	.word	0x0800b7ef
 800b63c:	0800b7ef 	.word	0x0800b7ef
 800b640:	0800b7ef 	.word	0x0800b7ef
 800b644:	0800b72b 	.word	0x0800b72b
 800b648:	0800b7ef 	.word	0x0800b7ef
 800b64c:	0800b7ef 	.word	0x0800b7ef
 800b650:	0800b7ef 	.word	0x0800b7ef
 800b654:	0800b76d 	.word	0x0800b76d
 800b658:	0800b7ef 	.word	0x0800b7ef
 800b65c:	0800b7ef 	.word	0x0800b7ef
 800b660:	0800b7ef 	.word	0x0800b7ef
 800b664:	0800b7ad 	.word	0x0800b7ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	68b9      	ldr	r1, [r7, #8]
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 fa9e 	bl	800bbb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	699a      	ldr	r2, [r3, #24]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f042 0208 	orr.w	r2, r2, #8
 800b682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	699a      	ldr	r2, [r3, #24]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	f022 0204 	bic.w	r2, r2, #4
 800b692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	6999      	ldr	r1, [r3, #24]
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	691a      	ldr	r2, [r3, #16]
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	430a      	orrs	r2, r1
 800b6a4:	619a      	str	r2, [r3, #24]
      break;
 800b6a6:	e0a5      	b.n	800b7f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	68b9      	ldr	r1, [r7, #8]
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f000 faf0 	bl	800bc94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	699a      	ldr	r2, [r3, #24]
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b6c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	699a      	ldr	r2, [r3, #24]
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b6d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	6999      	ldr	r1, [r3, #24]
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	691b      	ldr	r3, [r3, #16]
 800b6de:	021a      	lsls	r2, r3, #8
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	430a      	orrs	r2, r1
 800b6e6:	619a      	str	r2, [r3, #24]
      break;
 800b6e8:	e084      	b.n	800b7f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	68b9      	ldr	r1, [r7, #8]
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	f000 fb47 	bl	800bd84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	69da      	ldr	r2, [r3, #28]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f042 0208 	orr.w	r2, r2, #8
 800b704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	69da      	ldr	r2, [r3, #28]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f022 0204 	bic.w	r2, r2, #4
 800b714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	69d9      	ldr	r1, [r3, #28]
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	691a      	ldr	r2, [r3, #16]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	430a      	orrs	r2, r1
 800b726:	61da      	str	r2, [r3, #28]
      break;
 800b728:	e064      	b.n	800b7f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	68b9      	ldr	r1, [r7, #8]
 800b730:	4618      	mov	r0, r3
 800b732:	f000 fb9d 	bl	800be70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	69da      	ldr	r2, [r3, #28]
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	69da      	ldr	r2, [r3, #28]
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	69d9      	ldr	r1, [r3, #28]
 800b75c:	68bb      	ldr	r3, [r7, #8]
 800b75e:	691b      	ldr	r3, [r3, #16]
 800b760:	021a      	lsls	r2, r3, #8
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	430a      	orrs	r2, r1
 800b768:	61da      	str	r2, [r3, #28]
      break;
 800b76a:	e043      	b.n	800b7f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68b9      	ldr	r1, [r7, #8]
 800b772:	4618      	mov	r0, r3
 800b774:	f000 fbd4 	bl	800bf20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f042 0208 	orr.w	r2, r2, #8
 800b786:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f022 0204 	bic.w	r2, r2, #4
 800b796:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	691a      	ldr	r2, [r3, #16]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	430a      	orrs	r2, r1
 800b7a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b7aa:	e023      	b.n	800b7f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	68b9      	ldr	r1, [r7, #8]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f000 fc06 	bl	800bfc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b7c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b7d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	021a      	lsls	r2, r3, #8
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	430a      	orrs	r2, r1
 800b7ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800b7ec:	e002      	b.n	800b7f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	75fb      	strb	r3, [r7, #23]
      break;
 800b7f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	3718      	adds	r7, #24
 800b802:	46bd      	mov	sp, r7
 800b804:	bd80      	pop	{r7, pc}
 800b806:	bf00      	nop

0800b808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d101      	bne.n	800b824 <HAL_TIM_ConfigClockSource+0x1c>
 800b820:	2302      	movs	r3, #2
 800b822:	e0b4      	b.n	800b98e <HAL_TIM_ConfigClockSource+0x186>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2202      	movs	r2, #2
 800b830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	4b56      	ldr	r3, [pc, #344]	@ (800b998 <HAL_TIM_ConfigClockSource+0x190>)
 800b840:	4013      	ands	r3, r2
 800b842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b84a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	68ba      	ldr	r2, [r7, #8]
 800b852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b85c:	d03e      	beq.n	800b8dc <HAL_TIM_ConfigClockSource+0xd4>
 800b85e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b862:	f200 8087 	bhi.w	800b974 <HAL_TIM_ConfigClockSource+0x16c>
 800b866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b86a:	f000 8086 	beq.w	800b97a <HAL_TIM_ConfigClockSource+0x172>
 800b86e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b872:	d87f      	bhi.n	800b974 <HAL_TIM_ConfigClockSource+0x16c>
 800b874:	2b70      	cmp	r3, #112	@ 0x70
 800b876:	d01a      	beq.n	800b8ae <HAL_TIM_ConfigClockSource+0xa6>
 800b878:	2b70      	cmp	r3, #112	@ 0x70
 800b87a:	d87b      	bhi.n	800b974 <HAL_TIM_ConfigClockSource+0x16c>
 800b87c:	2b60      	cmp	r3, #96	@ 0x60
 800b87e:	d050      	beq.n	800b922 <HAL_TIM_ConfigClockSource+0x11a>
 800b880:	2b60      	cmp	r3, #96	@ 0x60
 800b882:	d877      	bhi.n	800b974 <HAL_TIM_ConfigClockSource+0x16c>
 800b884:	2b50      	cmp	r3, #80	@ 0x50
 800b886:	d03c      	beq.n	800b902 <HAL_TIM_ConfigClockSource+0xfa>
 800b888:	2b50      	cmp	r3, #80	@ 0x50
 800b88a:	d873      	bhi.n	800b974 <HAL_TIM_ConfigClockSource+0x16c>
 800b88c:	2b40      	cmp	r3, #64	@ 0x40
 800b88e:	d058      	beq.n	800b942 <HAL_TIM_ConfigClockSource+0x13a>
 800b890:	2b40      	cmp	r3, #64	@ 0x40
 800b892:	d86f      	bhi.n	800b974 <HAL_TIM_ConfigClockSource+0x16c>
 800b894:	2b30      	cmp	r3, #48	@ 0x30
 800b896:	d064      	beq.n	800b962 <HAL_TIM_ConfigClockSource+0x15a>
 800b898:	2b30      	cmp	r3, #48	@ 0x30
 800b89a:	d86b      	bhi.n	800b974 <HAL_TIM_ConfigClockSource+0x16c>
 800b89c:	2b20      	cmp	r3, #32
 800b89e:	d060      	beq.n	800b962 <HAL_TIM_ConfigClockSource+0x15a>
 800b8a0:	2b20      	cmp	r3, #32
 800b8a2:	d867      	bhi.n	800b974 <HAL_TIM_ConfigClockSource+0x16c>
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d05c      	beq.n	800b962 <HAL_TIM_ConfigClockSource+0x15a>
 800b8a8:	2b10      	cmp	r3, #16
 800b8aa:	d05a      	beq.n	800b962 <HAL_TIM_ConfigClockSource+0x15a>
 800b8ac:	e062      	b.n	800b974 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8be:	f000 fce3 	bl	800c288 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b8d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68ba      	ldr	r2, [r7, #8]
 800b8d8:	609a      	str	r2, [r3, #8]
      break;
 800b8da:	e04f      	b.n	800b97c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b8ec:	f000 fccc 	bl	800c288 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	689a      	ldr	r2, [r3, #8]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b8fe:	609a      	str	r2, [r3, #8]
      break;
 800b900:	e03c      	b.n	800b97c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b90e:	461a      	mov	r2, r3
 800b910:	f000 fc40 	bl	800c194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2150      	movs	r1, #80	@ 0x50
 800b91a:	4618      	mov	r0, r3
 800b91c:	f000 fc99 	bl	800c252 <TIM_ITRx_SetConfig>
      break;
 800b920:	e02c      	b.n	800b97c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b92e:	461a      	mov	r2, r3
 800b930:	f000 fc5f 	bl	800c1f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2160      	movs	r1, #96	@ 0x60
 800b93a:	4618      	mov	r0, r3
 800b93c:	f000 fc89 	bl	800c252 <TIM_ITRx_SetConfig>
      break;
 800b940:	e01c      	b.n	800b97c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b94e:	461a      	mov	r2, r3
 800b950:	f000 fc20 	bl	800c194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	2140      	movs	r1, #64	@ 0x40
 800b95a:	4618      	mov	r0, r3
 800b95c:	f000 fc79 	bl	800c252 <TIM_ITRx_SetConfig>
      break;
 800b960:	e00c      	b.n	800b97c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681a      	ldr	r2, [r3, #0]
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4619      	mov	r1, r3
 800b96c:	4610      	mov	r0, r2
 800b96e:	f000 fc70 	bl	800c252 <TIM_ITRx_SetConfig>
      break;
 800b972:	e003      	b.n	800b97c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b974:	2301      	movs	r3, #1
 800b976:	73fb      	strb	r3, [r7, #15]
      break;
 800b978:	e000      	b.n	800b97c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b97a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2200      	movs	r2, #0
 800b988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b98c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b98e:	4618      	mov	r0, r3
 800b990:	3710      	adds	r7, #16
 800b992:	46bd      	mov	sp, r7
 800b994:	bd80      	pop	{r7, pc}
 800b996:	bf00      	nop
 800b998:	fffeff88 	.word	0xfffeff88

0800b99c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
 800b9a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b9ac:	2b01      	cmp	r3, #1
 800b9ae:	d101      	bne.n	800b9b4 <HAL_TIM_SlaveConfigSynchro+0x18>
 800b9b0:	2302      	movs	r3, #2
 800b9b2:	e031      	b.n	800ba18 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2201      	movs	r2, #1
 800b9b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2202      	movs	r2, #2
 800b9c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800b9c4:	6839      	ldr	r1, [r7, #0]
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 fb50 	bl	800c06c <TIM_SlaveTimer_SetConfig>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d009      	beq.n	800b9e6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800b9e2:	2301      	movs	r3, #1
 800b9e4:	e018      	b.n	800ba18 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68da      	ldr	r2, [r3, #12]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b9f4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68da      	ldr	r2, [r3, #12]
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ba04:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2201      	movs	r2, #1
 800ba0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ba16:	2300      	movs	r3, #0
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba28:	bf00      	nop
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba64:	bf00      	nop
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b085      	sub	sp, #20
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4a40      	ldr	r2, [pc, #256]	@ (800bb84 <TIM_Base_SetConfig+0x114>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d013      	beq.n	800bab0 <TIM_Base_SetConfig+0x40>
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ba8e:	d00f      	beq.n	800bab0 <TIM_Base_SetConfig+0x40>
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a3d      	ldr	r2, [pc, #244]	@ (800bb88 <TIM_Base_SetConfig+0x118>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d00b      	beq.n	800bab0 <TIM_Base_SetConfig+0x40>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a3c      	ldr	r2, [pc, #240]	@ (800bb8c <TIM_Base_SetConfig+0x11c>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d007      	beq.n	800bab0 <TIM_Base_SetConfig+0x40>
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	4a3b      	ldr	r2, [pc, #236]	@ (800bb90 <TIM_Base_SetConfig+0x120>)
 800baa4:	4293      	cmp	r3, r2
 800baa6:	d003      	beq.n	800bab0 <TIM_Base_SetConfig+0x40>
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	4a3a      	ldr	r2, [pc, #232]	@ (800bb94 <TIM_Base_SetConfig+0x124>)
 800baac:	4293      	cmp	r3, r2
 800baae:	d108      	bne.n	800bac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	4313      	orrs	r3, r2
 800bac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a2f      	ldr	r2, [pc, #188]	@ (800bb84 <TIM_Base_SetConfig+0x114>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d02b      	beq.n	800bb22 <TIM_Base_SetConfig+0xb2>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bad0:	d027      	beq.n	800bb22 <TIM_Base_SetConfig+0xb2>
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a2c      	ldr	r2, [pc, #176]	@ (800bb88 <TIM_Base_SetConfig+0x118>)
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d023      	beq.n	800bb22 <TIM_Base_SetConfig+0xb2>
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a2b      	ldr	r2, [pc, #172]	@ (800bb8c <TIM_Base_SetConfig+0x11c>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d01f      	beq.n	800bb22 <TIM_Base_SetConfig+0xb2>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	4a2a      	ldr	r2, [pc, #168]	@ (800bb90 <TIM_Base_SetConfig+0x120>)
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d01b      	beq.n	800bb22 <TIM_Base_SetConfig+0xb2>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a29      	ldr	r2, [pc, #164]	@ (800bb94 <TIM_Base_SetConfig+0x124>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d017      	beq.n	800bb22 <TIM_Base_SetConfig+0xb2>
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	4a28      	ldr	r2, [pc, #160]	@ (800bb98 <TIM_Base_SetConfig+0x128>)
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d013      	beq.n	800bb22 <TIM_Base_SetConfig+0xb2>
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	4a27      	ldr	r2, [pc, #156]	@ (800bb9c <TIM_Base_SetConfig+0x12c>)
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d00f      	beq.n	800bb22 <TIM_Base_SetConfig+0xb2>
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	4a26      	ldr	r2, [pc, #152]	@ (800bba0 <TIM_Base_SetConfig+0x130>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d00b      	beq.n	800bb22 <TIM_Base_SetConfig+0xb2>
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a25      	ldr	r2, [pc, #148]	@ (800bba4 <TIM_Base_SetConfig+0x134>)
 800bb0e:	4293      	cmp	r3, r2
 800bb10:	d007      	beq.n	800bb22 <TIM_Base_SetConfig+0xb2>
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	4a24      	ldr	r2, [pc, #144]	@ (800bba8 <TIM_Base_SetConfig+0x138>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d003      	beq.n	800bb22 <TIM_Base_SetConfig+0xb2>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	4a23      	ldr	r2, [pc, #140]	@ (800bbac <TIM_Base_SetConfig+0x13c>)
 800bb1e:	4293      	cmp	r3, r2
 800bb20:	d108      	bne.n	800bb34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bb28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	68db      	ldr	r3, [r3, #12]
 800bb2e:	68fa      	ldr	r2, [r7, #12]
 800bb30:	4313      	orrs	r3, r2
 800bb32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	68fa      	ldr	r2, [r7, #12]
 800bb46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	689a      	ldr	r2, [r3, #8]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	4a0a      	ldr	r2, [pc, #40]	@ (800bb84 <TIM_Base_SetConfig+0x114>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d003      	beq.n	800bb68 <TIM_Base_SetConfig+0xf8>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	4a0c      	ldr	r2, [pc, #48]	@ (800bb94 <TIM_Base_SetConfig+0x124>)
 800bb64:	4293      	cmp	r3, r2
 800bb66:	d103      	bne.n	800bb70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	691a      	ldr	r2, [r3, #16]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2201      	movs	r2, #1
 800bb74:	615a      	str	r2, [r3, #20]
}
 800bb76:	bf00      	nop
 800bb78:	3714      	adds	r7, #20
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	40010000 	.word	0x40010000
 800bb88:	40000400 	.word	0x40000400
 800bb8c:	40000800 	.word	0x40000800
 800bb90:	40000c00 	.word	0x40000c00
 800bb94:	40010400 	.word	0x40010400
 800bb98:	40014000 	.word	0x40014000
 800bb9c:	40014400 	.word	0x40014400
 800bba0:	40014800 	.word	0x40014800
 800bba4:	40001800 	.word	0x40001800
 800bba8:	40001c00 	.word	0x40001c00
 800bbac:	40002000 	.word	0x40002000

0800bbb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bbb0:	b480      	push	{r7}
 800bbb2:	b087      	sub	sp, #28
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6a1b      	ldr	r3, [r3, #32]
 800bbbe:	f023 0201 	bic.w	r2, r3, #1
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	4b2b      	ldr	r3, [pc, #172]	@ (800bc88 <TIM_OC1_SetConfig+0xd8>)
 800bbdc:	4013      	ands	r3, r2
 800bbde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	f023 0303 	bic.w	r3, r3, #3
 800bbe6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bbf2:	697b      	ldr	r3, [r7, #20]
 800bbf4:	f023 0302 	bic.w	r3, r3, #2
 800bbf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bbfa:	683b      	ldr	r3, [r7, #0]
 800bbfc:	689b      	ldr	r3, [r3, #8]
 800bbfe:	697a      	ldr	r2, [r7, #20]
 800bc00:	4313      	orrs	r3, r2
 800bc02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	4a21      	ldr	r2, [pc, #132]	@ (800bc8c <TIM_OC1_SetConfig+0xdc>)
 800bc08:	4293      	cmp	r3, r2
 800bc0a:	d003      	beq.n	800bc14 <TIM_OC1_SetConfig+0x64>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	4a20      	ldr	r2, [pc, #128]	@ (800bc90 <TIM_OC1_SetConfig+0xe0>)
 800bc10:	4293      	cmp	r3, r2
 800bc12:	d10c      	bne.n	800bc2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	f023 0308 	bic.w	r3, r3, #8
 800bc1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	68db      	ldr	r3, [r3, #12]
 800bc20:	697a      	ldr	r2, [r7, #20]
 800bc22:	4313      	orrs	r3, r2
 800bc24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	f023 0304 	bic.w	r3, r3, #4
 800bc2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a16      	ldr	r2, [pc, #88]	@ (800bc8c <TIM_OC1_SetConfig+0xdc>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d003      	beq.n	800bc3e <TIM_OC1_SetConfig+0x8e>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a15      	ldr	r2, [pc, #84]	@ (800bc90 <TIM_OC1_SetConfig+0xe0>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d111      	bne.n	800bc62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bc44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bc4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	695b      	ldr	r3, [r3, #20]
 800bc52:	693a      	ldr	r2, [r7, #16]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	699b      	ldr	r3, [r3, #24]
 800bc5c:	693a      	ldr	r2, [r7, #16]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	693a      	ldr	r2, [r7, #16]
 800bc66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	68fa      	ldr	r2, [r7, #12]
 800bc6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	685a      	ldr	r2, [r3, #4]
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	697a      	ldr	r2, [r7, #20]
 800bc7a:	621a      	str	r2, [r3, #32]
}
 800bc7c:	bf00      	nop
 800bc7e:	371c      	adds	r7, #28
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr
 800bc88:	fffeff8f 	.word	0xfffeff8f
 800bc8c:	40010000 	.word	0x40010000
 800bc90:	40010400 	.word	0x40010400

0800bc94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b087      	sub	sp, #28
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a1b      	ldr	r3, [r3, #32]
 800bca2:	f023 0210 	bic.w	r2, r3, #16
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6a1b      	ldr	r3, [r3, #32]
 800bcae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	699b      	ldr	r3, [r3, #24]
 800bcba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bcbc:	68fa      	ldr	r2, [r7, #12]
 800bcbe:	4b2e      	ldr	r3, [pc, #184]	@ (800bd78 <TIM_OC2_SetConfig+0xe4>)
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bcca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bccc:	683b      	ldr	r3, [r7, #0]
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	021b      	lsls	r3, r3, #8
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	f023 0320 	bic.w	r3, r3, #32
 800bcde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	011b      	lsls	r3, r3, #4
 800bce6:	697a      	ldr	r2, [r7, #20]
 800bce8:	4313      	orrs	r3, r2
 800bcea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a23      	ldr	r2, [pc, #140]	@ (800bd7c <TIM_OC2_SetConfig+0xe8>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d003      	beq.n	800bcfc <TIM_OC2_SetConfig+0x68>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	4a22      	ldr	r2, [pc, #136]	@ (800bd80 <TIM_OC2_SetConfig+0xec>)
 800bcf8:	4293      	cmp	r3, r2
 800bcfa:	d10d      	bne.n	800bd18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	68db      	ldr	r3, [r3, #12]
 800bd08:	011b      	lsls	r3, r3, #4
 800bd0a:	697a      	ldr	r2, [r7, #20]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	4a18      	ldr	r2, [pc, #96]	@ (800bd7c <TIM_OC2_SetConfig+0xe8>)
 800bd1c:	4293      	cmp	r3, r2
 800bd1e:	d003      	beq.n	800bd28 <TIM_OC2_SetConfig+0x94>
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	4a17      	ldr	r2, [pc, #92]	@ (800bd80 <TIM_OC2_SetConfig+0xec>)
 800bd24:	4293      	cmp	r3, r2
 800bd26:	d113      	bne.n	800bd50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bd2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bd36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	695b      	ldr	r3, [r3, #20]
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	693a      	ldr	r2, [r7, #16]
 800bd40:	4313      	orrs	r3, r2
 800bd42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	699b      	ldr	r3, [r3, #24]
 800bd48:	009b      	lsls	r3, r3, #2
 800bd4a:	693a      	ldr	r2, [r7, #16]
 800bd4c:	4313      	orrs	r3, r2
 800bd4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	693a      	ldr	r2, [r7, #16]
 800bd54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	685a      	ldr	r2, [r3, #4]
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	621a      	str	r2, [r3, #32]
}
 800bd6a:	bf00      	nop
 800bd6c:	371c      	adds	r7, #28
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr
 800bd76:	bf00      	nop
 800bd78:	feff8fff 	.word	0xfeff8fff
 800bd7c:	40010000 	.word	0x40010000
 800bd80:	40010400 	.word	0x40010400

0800bd84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b087      	sub	sp, #28
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6a1b      	ldr	r3, [r3, #32]
 800bd92:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6a1b      	ldr	r3, [r3, #32]
 800bd9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	69db      	ldr	r3, [r3, #28]
 800bdaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bdac:	68fa      	ldr	r2, [r7, #12]
 800bdae:	4b2d      	ldr	r3, [pc, #180]	@ (800be64 <TIM_OC3_SetConfig+0xe0>)
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	f023 0303 	bic.w	r3, r3, #3
 800bdba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	68fa      	ldr	r2, [r7, #12]
 800bdc2:	4313      	orrs	r3, r2
 800bdc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bdc6:	697b      	ldr	r3, [r7, #20]
 800bdc8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800bdcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	021b      	lsls	r3, r3, #8
 800bdd4:	697a      	ldr	r2, [r7, #20]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	4a22      	ldr	r2, [pc, #136]	@ (800be68 <TIM_OC3_SetConfig+0xe4>)
 800bdde:	4293      	cmp	r3, r2
 800bde0:	d003      	beq.n	800bdea <TIM_OC3_SetConfig+0x66>
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	4a21      	ldr	r2, [pc, #132]	@ (800be6c <TIM_OC3_SetConfig+0xe8>)
 800bde6:	4293      	cmp	r3, r2
 800bde8:	d10d      	bne.n	800be06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800bdf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	68db      	ldr	r3, [r3, #12]
 800bdf6:	021b      	lsls	r3, r3, #8
 800bdf8:	697a      	ldr	r2, [r7, #20]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800be04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	4a17      	ldr	r2, [pc, #92]	@ (800be68 <TIM_OC3_SetConfig+0xe4>)
 800be0a:	4293      	cmp	r3, r2
 800be0c:	d003      	beq.n	800be16 <TIM_OC3_SetConfig+0x92>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	4a16      	ldr	r2, [pc, #88]	@ (800be6c <TIM_OC3_SetConfig+0xe8>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d113      	bne.n	800be3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800be1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800be24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	695b      	ldr	r3, [r3, #20]
 800be2a:	011b      	lsls	r3, r3, #4
 800be2c:	693a      	ldr	r2, [r7, #16]
 800be2e:	4313      	orrs	r3, r2
 800be30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	699b      	ldr	r3, [r3, #24]
 800be36:	011b      	lsls	r3, r3, #4
 800be38:	693a      	ldr	r2, [r7, #16]
 800be3a:	4313      	orrs	r3, r2
 800be3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	693a      	ldr	r2, [r7, #16]
 800be42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	685a      	ldr	r2, [r3, #4]
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	697a      	ldr	r2, [r7, #20]
 800be56:	621a      	str	r2, [r3, #32]
}
 800be58:	bf00      	nop
 800be5a:	371c      	adds	r7, #28
 800be5c:	46bd      	mov	sp, r7
 800be5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be62:	4770      	bx	lr
 800be64:	fffeff8f 	.word	0xfffeff8f
 800be68:	40010000 	.word	0x40010000
 800be6c:	40010400 	.word	0x40010400

0800be70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800be70:	b480      	push	{r7}
 800be72:	b087      	sub	sp, #28
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6a1b      	ldr	r3, [r3, #32]
 800be7e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6a1b      	ldr	r3, [r3, #32]
 800be8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	685b      	ldr	r3, [r3, #4]
 800be90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	69db      	ldr	r3, [r3, #28]
 800be96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	4b1e      	ldr	r3, [pc, #120]	@ (800bf14 <TIM_OC4_SetConfig+0xa4>)
 800be9c:	4013      	ands	r3, r2
 800be9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bea6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	021b      	lsls	r3, r3, #8
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	4313      	orrs	r3, r2
 800beb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800beba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	689b      	ldr	r3, [r3, #8]
 800bec0:	031b      	lsls	r3, r3, #12
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a13      	ldr	r2, [pc, #76]	@ (800bf18 <TIM_OC4_SetConfig+0xa8>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d003      	beq.n	800bed8 <TIM_OC4_SetConfig+0x68>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a12      	ldr	r2, [pc, #72]	@ (800bf1c <TIM_OC4_SetConfig+0xac>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d109      	bne.n	800beec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bed8:	697b      	ldr	r3, [r7, #20]
 800beda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800bede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	695b      	ldr	r3, [r3, #20]
 800bee4:	019b      	lsls	r3, r3, #6
 800bee6:	697a      	ldr	r2, [r7, #20]
 800bee8:	4313      	orrs	r3, r2
 800beea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	697a      	ldr	r2, [r7, #20]
 800bef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	685a      	ldr	r2, [r3, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	693a      	ldr	r2, [r7, #16]
 800bf04:	621a      	str	r2, [r3, #32]
}
 800bf06:	bf00      	nop
 800bf08:	371c      	adds	r7, #28
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	feff8fff 	.word	0xfeff8fff
 800bf18:	40010000 	.word	0x40010000
 800bf1c:	40010400 	.word	0x40010400

0800bf20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bf20:	b480      	push	{r7}
 800bf22:	b087      	sub	sp, #28
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
 800bf28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	6a1b      	ldr	r3, [r3, #32]
 800bf2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a1b      	ldr	r3, [r3, #32]
 800bf3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	4b1b      	ldr	r3, [pc, #108]	@ (800bfb8 <TIM_OC5_SetConfig+0x98>)
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	4313      	orrs	r3, r2
 800bf58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800bf5a:	693b      	ldr	r3, [r7, #16]
 800bf5c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800bf60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	689b      	ldr	r3, [r3, #8]
 800bf66:	041b      	lsls	r3, r3, #16
 800bf68:	693a      	ldr	r2, [r7, #16]
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	4a12      	ldr	r2, [pc, #72]	@ (800bfbc <TIM_OC5_SetConfig+0x9c>)
 800bf72:	4293      	cmp	r3, r2
 800bf74:	d003      	beq.n	800bf7e <TIM_OC5_SetConfig+0x5e>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	4a11      	ldr	r2, [pc, #68]	@ (800bfc0 <TIM_OC5_SetConfig+0xa0>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d109      	bne.n	800bf92 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bf84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	695b      	ldr	r3, [r3, #20]
 800bf8a:	021b      	lsls	r3, r3, #8
 800bf8c:	697a      	ldr	r2, [r7, #20]
 800bf8e:	4313      	orrs	r3, r2
 800bf90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	697a      	ldr	r2, [r7, #20]
 800bf96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	68fa      	ldr	r2, [r7, #12]
 800bf9c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	685a      	ldr	r2, [r3, #4]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	693a      	ldr	r2, [r7, #16]
 800bfaa:	621a      	str	r2, [r3, #32]
}
 800bfac:	bf00      	nop
 800bfae:	371c      	adds	r7, #28
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr
 800bfb8:	fffeff8f 	.word	0xfffeff8f
 800bfbc:	40010000 	.word	0x40010000
 800bfc0:	40010400 	.word	0x40010400

0800bfc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b087      	sub	sp, #28
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6a1b      	ldr	r3, [r3, #32]
 800bfd2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a1b      	ldr	r3, [r3, #32]
 800bfde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800bfec:	68fa      	ldr	r2, [r7, #12]
 800bfee:	4b1c      	ldr	r3, [pc, #112]	@ (800c060 <TIM_OC6_SetConfig+0x9c>)
 800bff0:	4013      	ands	r3, r2
 800bff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	021b      	lsls	r3, r3, #8
 800bffa:	68fa      	ldr	r2, [r7, #12]
 800bffc:	4313      	orrs	r3, r2
 800bffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c000:	693b      	ldr	r3, [r7, #16]
 800c002:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	051b      	lsls	r3, r3, #20
 800c00e:	693a      	ldr	r2, [r7, #16]
 800c010:	4313      	orrs	r3, r2
 800c012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4a13      	ldr	r2, [pc, #76]	@ (800c064 <TIM_OC6_SetConfig+0xa0>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d003      	beq.n	800c024 <TIM_OC6_SetConfig+0x60>
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	4a12      	ldr	r2, [pc, #72]	@ (800c068 <TIM_OC6_SetConfig+0xa4>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d109      	bne.n	800c038 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c02a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	695b      	ldr	r3, [r3, #20]
 800c030:	029b      	lsls	r3, r3, #10
 800c032:	697a      	ldr	r2, [r7, #20]
 800c034:	4313      	orrs	r3, r2
 800c036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	697a      	ldr	r2, [r7, #20]
 800c03c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	685a      	ldr	r2, [r3, #4]
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	693a      	ldr	r2, [r7, #16]
 800c050:	621a      	str	r2, [r3, #32]
}
 800c052:	bf00      	nop
 800c054:	371c      	adds	r7, #28
 800c056:	46bd      	mov	sp, r7
 800c058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05c:	4770      	bx	lr
 800c05e:	bf00      	nop
 800c060:	feff8fff 	.word	0xfeff8fff
 800c064:	40010000 	.word	0x40010000
 800c068:	40010400 	.word	0x40010400

0800c06c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c076:	2300      	movs	r3, #0
 800c078:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c088:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	693a      	ldr	r2, [r7, #16]
 800c090:	4313      	orrs	r3, r2
 800c092:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800c094:	693a      	ldr	r2, [r7, #16]
 800c096:	4b3e      	ldr	r3, [pc, #248]	@ (800c190 <TIM_SlaveTimer_SetConfig+0x124>)
 800c098:	4013      	ands	r3, r2
 800c09a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	693a      	ldr	r2, [r7, #16]
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	685b      	ldr	r3, [r3, #4]
 800c0b2:	2b70      	cmp	r3, #112	@ 0x70
 800c0b4:	d01a      	beq.n	800c0ec <TIM_SlaveTimer_SetConfig+0x80>
 800c0b6:	2b70      	cmp	r3, #112	@ 0x70
 800c0b8:	d860      	bhi.n	800c17c <TIM_SlaveTimer_SetConfig+0x110>
 800c0ba:	2b60      	cmp	r3, #96	@ 0x60
 800c0bc:	d054      	beq.n	800c168 <TIM_SlaveTimer_SetConfig+0xfc>
 800c0be:	2b60      	cmp	r3, #96	@ 0x60
 800c0c0:	d85c      	bhi.n	800c17c <TIM_SlaveTimer_SetConfig+0x110>
 800c0c2:	2b50      	cmp	r3, #80	@ 0x50
 800c0c4:	d046      	beq.n	800c154 <TIM_SlaveTimer_SetConfig+0xe8>
 800c0c6:	2b50      	cmp	r3, #80	@ 0x50
 800c0c8:	d858      	bhi.n	800c17c <TIM_SlaveTimer_SetConfig+0x110>
 800c0ca:	2b40      	cmp	r3, #64	@ 0x40
 800c0cc:	d019      	beq.n	800c102 <TIM_SlaveTimer_SetConfig+0x96>
 800c0ce:	2b40      	cmp	r3, #64	@ 0x40
 800c0d0:	d854      	bhi.n	800c17c <TIM_SlaveTimer_SetConfig+0x110>
 800c0d2:	2b30      	cmp	r3, #48	@ 0x30
 800c0d4:	d055      	beq.n	800c182 <TIM_SlaveTimer_SetConfig+0x116>
 800c0d6:	2b30      	cmp	r3, #48	@ 0x30
 800c0d8:	d850      	bhi.n	800c17c <TIM_SlaveTimer_SetConfig+0x110>
 800c0da:	2b20      	cmp	r3, #32
 800c0dc:	d051      	beq.n	800c182 <TIM_SlaveTimer_SetConfig+0x116>
 800c0de:	2b20      	cmp	r3, #32
 800c0e0:	d84c      	bhi.n	800c17c <TIM_SlaveTimer_SetConfig+0x110>
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d04d      	beq.n	800c182 <TIM_SlaveTimer_SetConfig+0x116>
 800c0e6:	2b10      	cmp	r3, #16
 800c0e8:	d04b      	beq.n	800c182 <TIM_SlaveTimer_SetConfig+0x116>
 800c0ea:	e047      	b.n	800c17c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800c0f8:	683b      	ldr	r3, [r7, #0]
 800c0fa:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800c0fc:	f000 f8c4 	bl	800c288 <TIM_ETR_SetConfig>
      break;
 800c100:	e040      	b.n	800c184 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	2b05      	cmp	r3, #5
 800c108:	d101      	bne.n	800c10e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
 800c10c:	e03b      	b.n	800c186 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	6a1b      	ldr	r3, [r3, #32]
 800c114:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	6a1a      	ldr	r2, [r3, #32]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f022 0201 	bic.w	r2, r2, #1
 800c124:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	699b      	ldr	r3, [r3, #24]
 800c12c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c12e:	68bb      	ldr	r3, [r7, #8]
 800c130:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c134:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	011b      	lsls	r3, r3, #4
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	4313      	orrs	r3, r2
 800c140:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68fa      	ldr	r2, [r7, #12]
 800c150:	621a      	str	r2, [r3, #32]
      break;
 800c152:	e017      	b.n	800c184 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c160:	461a      	mov	r2, r3
 800c162:	f000 f817 	bl	800c194 <TIM_TI1_ConfigInputStage>
      break;
 800c166:	e00d      	b.n	800c184 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c174:	461a      	mov	r2, r3
 800c176:	f000 f83c 	bl	800c1f2 <TIM_TI2_ConfigInputStage>
      break;
 800c17a:	e003      	b.n	800c184 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800c17c:	2301      	movs	r3, #1
 800c17e:	75fb      	strb	r3, [r7, #23]
      break;
 800c180:	e000      	b.n	800c184 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800c182:	bf00      	nop
  }

  return status;
 800c184:	7dfb      	ldrb	r3, [r7, #23]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3718      	adds	r7, #24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	fffefff8 	.word	0xfffefff8

0800c194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c194:	b480      	push	{r7}
 800c196:	b087      	sub	sp, #28
 800c198:	af00      	add	r7, sp, #0
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	6a1b      	ldr	r3, [r3, #32]
 800c1a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	f023 0201 	bic.w	r2, r3, #1
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	699b      	ldr	r3, [r3, #24]
 800c1b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c1be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	011b      	lsls	r3, r3, #4
 800c1c4:	693a      	ldr	r2, [r7, #16]
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	f023 030a 	bic.w	r3, r3, #10
 800c1d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c1d2:	697a      	ldr	r2, [r7, #20]
 800c1d4:	68bb      	ldr	r3, [r7, #8]
 800c1d6:	4313      	orrs	r3, r2
 800c1d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	693a      	ldr	r2, [r7, #16]
 800c1de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	697a      	ldr	r2, [r7, #20]
 800c1e4:	621a      	str	r2, [r3, #32]
}
 800c1e6:	bf00      	nop
 800c1e8:	371c      	adds	r7, #28
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b087      	sub	sp, #28
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	60f8      	str	r0, [r7, #12]
 800c1fa:	60b9      	str	r1, [r7, #8]
 800c1fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	6a1b      	ldr	r3, [r3, #32]
 800c202:	f023 0210 	bic.w	r2, r3, #16
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	699b      	ldr	r3, [r3, #24]
 800c20e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	6a1b      	ldr	r3, [r3, #32]
 800c214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c216:	697b      	ldr	r3, [r7, #20]
 800c218:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c21c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	031b      	lsls	r3, r3, #12
 800c222:	697a      	ldr	r2, [r7, #20]
 800c224:	4313      	orrs	r3, r2
 800c226:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c22e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	011b      	lsls	r3, r3, #4
 800c234:	693a      	ldr	r2, [r7, #16]
 800c236:	4313      	orrs	r3, r2
 800c238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	697a      	ldr	r2, [r7, #20]
 800c23e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	693a      	ldr	r2, [r7, #16]
 800c244:	621a      	str	r2, [r3, #32]
}
 800c246:	bf00      	nop
 800c248:	371c      	adds	r7, #28
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr

0800c252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c252:	b480      	push	{r7}
 800c254:	b085      	sub	sp, #20
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c26a:	683a      	ldr	r2, [r7, #0]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	4313      	orrs	r3, r2
 800c270:	f043 0307 	orr.w	r3, r3, #7
 800c274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	609a      	str	r2, [r3, #8]
}
 800c27c:	bf00      	nop
 800c27e:	3714      	adds	r7, #20
 800c280:	46bd      	mov	sp, r7
 800c282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c286:	4770      	bx	lr

0800c288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c288:	b480      	push	{r7}
 800c28a:	b087      	sub	sp, #28
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	60f8      	str	r0, [r7, #12]
 800c290:	60b9      	str	r1, [r7, #8]
 800c292:	607a      	str	r2, [r7, #4]
 800c294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c2a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	021a      	lsls	r2, r3, #8
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	431a      	orrs	r2, r3
 800c2ac:	68bb      	ldr	r3, [r7, #8]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	697a      	ldr	r2, [r7, #20]
 800c2ba:	609a      	str	r2, [r3, #8]
}
 800c2bc:	bf00      	nop
 800c2be:	371c      	adds	r7, #28
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d101      	bne.n	800c2e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c2dc:	2302      	movs	r3, #2
 800c2de:	e06d      	b.n	800c3bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2202      	movs	r2, #2
 800c2ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	689b      	ldr	r3, [r3, #8]
 800c2fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	4a30      	ldr	r2, [pc, #192]	@ (800c3c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d004      	beq.n	800c314 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4a2f      	ldr	r2, [pc, #188]	@ (800c3cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d108      	bne.n	800c326 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c31a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c31c:	683b      	ldr	r3, [r7, #0]
 800c31e:	685b      	ldr	r3, [r3, #4]
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	4313      	orrs	r3, r2
 800c324:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c32c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	4313      	orrs	r3, r2
 800c336:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4a20      	ldr	r2, [pc, #128]	@ (800c3c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d022      	beq.n	800c390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c352:	d01d      	beq.n	800c390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4a1d      	ldr	r2, [pc, #116]	@ (800c3d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c35a:	4293      	cmp	r3, r2
 800c35c:	d018      	beq.n	800c390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	4a1c      	ldr	r2, [pc, #112]	@ (800c3d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d013      	beq.n	800c390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a1a      	ldr	r2, [pc, #104]	@ (800c3d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d00e      	beq.n	800c390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4a15      	ldr	r2, [pc, #84]	@ (800c3cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c378:	4293      	cmp	r3, r2
 800c37a:	d009      	beq.n	800c390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	4a16      	ldr	r2, [pc, #88]	@ (800c3dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c382:	4293      	cmp	r3, r2
 800c384:	d004      	beq.n	800c390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	4a15      	ldr	r2, [pc, #84]	@ (800c3e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d10c      	bne.n	800c3aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c396:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2201      	movs	r2, #1
 800c3ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3714      	adds	r7, #20
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c6:	4770      	bx	lr
 800c3c8:	40010000 	.word	0x40010000
 800c3cc:	40010400 	.word	0x40010400
 800c3d0:	40000400 	.word	0x40000400
 800c3d4:	40000800 	.word	0x40000800
 800c3d8:	40000c00 	.word	0x40000c00
 800c3dc:	40014000 	.word	0x40014000
 800c3e0:	40001800 	.word	0x40001800

0800c3e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d101      	bne.n	800c400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	e065      	b.n	800c4cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2201      	movs	r2, #1
 800c404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	68db      	ldr	r3, [r3, #12]
 800c412:	4313      	orrs	r3, r2
 800c414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	4313      	orrs	r3, r2
 800c422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	685b      	ldr	r3, [r3, #4]
 800c42e:	4313      	orrs	r3, r2
 800c430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4313      	orrs	r3, r2
 800c43e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	4313      	orrs	r3, r2
 800c44c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	695b      	ldr	r3, [r3, #20]
 800c458:	4313      	orrs	r3, r2
 800c45a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c466:	4313      	orrs	r3, r2
 800c468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	041b      	lsls	r3, r3, #16
 800c476:	4313      	orrs	r3, r2
 800c478:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	4a16      	ldr	r2, [pc, #88]	@ (800c4d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d004      	beq.n	800c48e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	4a14      	ldr	r2, [pc, #80]	@ (800c4dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d115      	bne.n	800c4ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c498:	051b      	lsls	r3, r3, #20
 800c49a:	4313      	orrs	r3, r2
 800c49c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	69db      	ldr	r3, [r3, #28]
 800c4a8:	4313      	orrs	r3, r2
 800c4aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	6a1b      	ldr	r3, [r3, #32]
 800c4b6:	4313      	orrs	r3, r2
 800c4b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c4ca:	2300      	movs	r3, #0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3714      	adds	r7, #20
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	40010000 	.word	0x40010000
 800c4dc:	40010400 	.word	0x40010400

0800c4e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c4fc:	bf00      	nop
 800c4fe:	370c      	adds	r7, #12
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c508:	b480      	push	{r7}
 800c50a:	b083      	sub	sp, #12
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c510:	bf00      	nop
 800c512:	370c      	adds	r7, #12
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b082      	sub	sp, #8
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c52a:	2301      	movs	r3, #1
 800c52c:	e040      	b.n	800c5b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c532:	2b00      	cmp	r3, #0
 800c534:	d106      	bne.n	800c544 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c53e:	6878      	ldr	r0, [r7, #4]
 800c540:	f7f8 fcf4 	bl	8004f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	2224      	movs	r2, #36	@ 0x24
 800c548:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	f022 0201 	bic.w	r2, r2, #1
 800c558:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f82c 	bl	800c5b8 <UART_SetConfig>
 800c560:	4603      	mov	r3, r0
 800c562:	2b01      	cmp	r3, #1
 800c564:	d101      	bne.n	800c56a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c566:	2301      	movs	r3, #1
 800c568:	e022      	b.n	800c5b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d002      	beq.n	800c578 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c572:	6878      	ldr	r0, [r7, #4]
 800c574:	f000 fa84 	bl	800ca80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	689a      	ldr	r2, [r3, #8]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f042 0201 	orr.w	r2, r2, #1
 800c5a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f000 fb0b 	bl	800cbc4 <UART_CheckIdleState>
 800c5ae:	4603      	mov	r3, r0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b088      	sub	sp, #32
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	689a      	ldr	r2, [r3, #8]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	691b      	ldr	r3, [r3, #16]
 800c5cc:	431a      	orrs	r2, r3
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	695b      	ldr	r3, [r3, #20]
 800c5d2:	431a      	orrs	r2, r3
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	69db      	ldr	r3, [r3, #28]
 800c5d8:	4313      	orrs	r3, r2
 800c5da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	4ba6      	ldr	r3, [pc, #664]	@ (800c87c <UART_SetConfig+0x2c4>)
 800c5e4:	4013      	ands	r3, r2
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	6812      	ldr	r2, [r2, #0]
 800c5ea:	6979      	ldr	r1, [r7, #20]
 800c5ec:	430b      	orrs	r3, r1
 800c5ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	68da      	ldr	r2, [r3, #12]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	430a      	orrs	r2, r1
 800c604:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	699b      	ldr	r3, [r3, #24]
 800c60a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6a1b      	ldr	r3, [r3, #32]
 800c610:	697a      	ldr	r2, [r7, #20]
 800c612:	4313      	orrs	r3, r2
 800c614:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	689b      	ldr	r3, [r3, #8]
 800c61c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	697a      	ldr	r2, [r7, #20]
 800c626:	430a      	orrs	r2, r1
 800c628:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	4a94      	ldr	r2, [pc, #592]	@ (800c880 <UART_SetConfig+0x2c8>)
 800c630:	4293      	cmp	r3, r2
 800c632:	d120      	bne.n	800c676 <UART_SetConfig+0xbe>
 800c634:	4b93      	ldr	r3, [pc, #588]	@ (800c884 <UART_SetConfig+0x2cc>)
 800c636:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c63a:	f003 0303 	and.w	r3, r3, #3
 800c63e:	2b03      	cmp	r3, #3
 800c640:	d816      	bhi.n	800c670 <UART_SetConfig+0xb8>
 800c642:	a201      	add	r2, pc, #4	@ (adr r2, 800c648 <UART_SetConfig+0x90>)
 800c644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c648:	0800c659 	.word	0x0800c659
 800c64c:	0800c665 	.word	0x0800c665
 800c650:	0800c65f 	.word	0x0800c65f
 800c654:	0800c66b 	.word	0x0800c66b
 800c658:	2301      	movs	r3, #1
 800c65a:	77fb      	strb	r3, [r7, #31]
 800c65c:	e150      	b.n	800c900 <UART_SetConfig+0x348>
 800c65e:	2302      	movs	r3, #2
 800c660:	77fb      	strb	r3, [r7, #31]
 800c662:	e14d      	b.n	800c900 <UART_SetConfig+0x348>
 800c664:	2304      	movs	r3, #4
 800c666:	77fb      	strb	r3, [r7, #31]
 800c668:	e14a      	b.n	800c900 <UART_SetConfig+0x348>
 800c66a:	2308      	movs	r3, #8
 800c66c:	77fb      	strb	r3, [r7, #31]
 800c66e:	e147      	b.n	800c900 <UART_SetConfig+0x348>
 800c670:	2310      	movs	r3, #16
 800c672:	77fb      	strb	r3, [r7, #31]
 800c674:	e144      	b.n	800c900 <UART_SetConfig+0x348>
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	4a83      	ldr	r2, [pc, #524]	@ (800c888 <UART_SetConfig+0x2d0>)
 800c67c:	4293      	cmp	r3, r2
 800c67e:	d132      	bne.n	800c6e6 <UART_SetConfig+0x12e>
 800c680:	4b80      	ldr	r3, [pc, #512]	@ (800c884 <UART_SetConfig+0x2cc>)
 800c682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c686:	f003 030c 	and.w	r3, r3, #12
 800c68a:	2b0c      	cmp	r3, #12
 800c68c:	d828      	bhi.n	800c6e0 <UART_SetConfig+0x128>
 800c68e:	a201      	add	r2, pc, #4	@ (adr r2, 800c694 <UART_SetConfig+0xdc>)
 800c690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c694:	0800c6c9 	.word	0x0800c6c9
 800c698:	0800c6e1 	.word	0x0800c6e1
 800c69c:	0800c6e1 	.word	0x0800c6e1
 800c6a0:	0800c6e1 	.word	0x0800c6e1
 800c6a4:	0800c6d5 	.word	0x0800c6d5
 800c6a8:	0800c6e1 	.word	0x0800c6e1
 800c6ac:	0800c6e1 	.word	0x0800c6e1
 800c6b0:	0800c6e1 	.word	0x0800c6e1
 800c6b4:	0800c6cf 	.word	0x0800c6cf
 800c6b8:	0800c6e1 	.word	0x0800c6e1
 800c6bc:	0800c6e1 	.word	0x0800c6e1
 800c6c0:	0800c6e1 	.word	0x0800c6e1
 800c6c4:	0800c6db 	.word	0x0800c6db
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	77fb      	strb	r3, [r7, #31]
 800c6cc:	e118      	b.n	800c900 <UART_SetConfig+0x348>
 800c6ce:	2302      	movs	r3, #2
 800c6d0:	77fb      	strb	r3, [r7, #31]
 800c6d2:	e115      	b.n	800c900 <UART_SetConfig+0x348>
 800c6d4:	2304      	movs	r3, #4
 800c6d6:	77fb      	strb	r3, [r7, #31]
 800c6d8:	e112      	b.n	800c900 <UART_SetConfig+0x348>
 800c6da:	2308      	movs	r3, #8
 800c6dc:	77fb      	strb	r3, [r7, #31]
 800c6de:	e10f      	b.n	800c900 <UART_SetConfig+0x348>
 800c6e0:	2310      	movs	r3, #16
 800c6e2:	77fb      	strb	r3, [r7, #31]
 800c6e4:	e10c      	b.n	800c900 <UART_SetConfig+0x348>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4a68      	ldr	r2, [pc, #416]	@ (800c88c <UART_SetConfig+0x2d4>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d120      	bne.n	800c732 <UART_SetConfig+0x17a>
 800c6f0:	4b64      	ldr	r3, [pc, #400]	@ (800c884 <UART_SetConfig+0x2cc>)
 800c6f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c6f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c6fa:	2b30      	cmp	r3, #48	@ 0x30
 800c6fc:	d013      	beq.n	800c726 <UART_SetConfig+0x16e>
 800c6fe:	2b30      	cmp	r3, #48	@ 0x30
 800c700:	d814      	bhi.n	800c72c <UART_SetConfig+0x174>
 800c702:	2b20      	cmp	r3, #32
 800c704:	d009      	beq.n	800c71a <UART_SetConfig+0x162>
 800c706:	2b20      	cmp	r3, #32
 800c708:	d810      	bhi.n	800c72c <UART_SetConfig+0x174>
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d002      	beq.n	800c714 <UART_SetConfig+0x15c>
 800c70e:	2b10      	cmp	r3, #16
 800c710:	d006      	beq.n	800c720 <UART_SetConfig+0x168>
 800c712:	e00b      	b.n	800c72c <UART_SetConfig+0x174>
 800c714:	2300      	movs	r3, #0
 800c716:	77fb      	strb	r3, [r7, #31]
 800c718:	e0f2      	b.n	800c900 <UART_SetConfig+0x348>
 800c71a:	2302      	movs	r3, #2
 800c71c:	77fb      	strb	r3, [r7, #31]
 800c71e:	e0ef      	b.n	800c900 <UART_SetConfig+0x348>
 800c720:	2304      	movs	r3, #4
 800c722:	77fb      	strb	r3, [r7, #31]
 800c724:	e0ec      	b.n	800c900 <UART_SetConfig+0x348>
 800c726:	2308      	movs	r3, #8
 800c728:	77fb      	strb	r3, [r7, #31]
 800c72a:	e0e9      	b.n	800c900 <UART_SetConfig+0x348>
 800c72c:	2310      	movs	r3, #16
 800c72e:	77fb      	strb	r3, [r7, #31]
 800c730:	e0e6      	b.n	800c900 <UART_SetConfig+0x348>
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	4a56      	ldr	r2, [pc, #344]	@ (800c890 <UART_SetConfig+0x2d8>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d120      	bne.n	800c77e <UART_SetConfig+0x1c6>
 800c73c:	4b51      	ldr	r3, [pc, #324]	@ (800c884 <UART_SetConfig+0x2cc>)
 800c73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c742:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800c746:	2bc0      	cmp	r3, #192	@ 0xc0
 800c748:	d013      	beq.n	800c772 <UART_SetConfig+0x1ba>
 800c74a:	2bc0      	cmp	r3, #192	@ 0xc0
 800c74c:	d814      	bhi.n	800c778 <UART_SetConfig+0x1c0>
 800c74e:	2b80      	cmp	r3, #128	@ 0x80
 800c750:	d009      	beq.n	800c766 <UART_SetConfig+0x1ae>
 800c752:	2b80      	cmp	r3, #128	@ 0x80
 800c754:	d810      	bhi.n	800c778 <UART_SetConfig+0x1c0>
 800c756:	2b00      	cmp	r3, #0
 800c758:	d002      	beq.n	800c760 <UART_SetConfig+0x1a8>
 800c75a:	2b40      	cmp	r3, #64	@ 0x40
 800c75c:	d006      	beq.n	800c76c <UART_SetConfig+0x1b4>
 800c75e:	e00b      	b.n	800c778 <UART_SetConfig+0x1c0>
 800c760:	2300      	movs	r3, #0
 800c762:	77fb      	strb	r3, [r7, #31]
 800c764:	e0cc      	b.n	800c900 <UART_SetConfig+0x348>
 800c766:	2302      	movs	r3, #2
 800c768:	77fb      	strb	r3, [r7, #31]
 800c76a:	e0c9      	b.n	800c900 <UART_SetConfig+0x348>
 800c76c:	2304      	movs	r3, #4
 800c76e:	77fb      	strb	r3, [r7, #31]
 800c770:	e0c6      	b.n	800c900 <UART_SetConfig+0x348>
 800c772:	2308      	movs	r3, #8
 800c774:	77fb      	strb	r3, [r7, #31]
 800c776:	e0c3      	b.n	800c900 <UART_SetConfig+0x348>
 800c778:	2310      	movs	r3, #16
 800c77a:	77fb      	strb	r3, [r7, #31]
 800c77c:	e0c0      	b.n	800c900 <UART_SetConfig+0x348>
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4a44      	ldr	r2, [pc, #272]	@ (800c894 <UART_SetConfig+0x2dc>)
 800c784:	4293      	cmp	r3, r2
 800c786:	d125      	bne.n	800c7d4 <UART_SetConfig+0x21c>
 800c788:	4b3e      	ldr	r3, [pc, #248]	@ (800c884 <UART_SetConfig+0x2cc>)
 800c78a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c78e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c792:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c796:	d017      	beq.n	800c7c8 <UART_SetConfig+0x210>
 800c798:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c79c:	d817      	bhi.n	800c7ce <UART_SetConfig+0x216>
 800c79e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7a2:	d00b      	beq.n	800c7bc <UART_SetConfig+0x204>
 800c7a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c7a8:	d811      	bhi.n	800c7ce <UART_SetConfig+0x216>
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d003      	beq.n	800c7b6 <UART_SetConfig+0x1fe>
 800c7ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c7b2:	d006      	beq.n	800c7c2 <UART_SetConfig+0x20a>
 800c7b4:	e00b      	b.n	800c7ce <UART_SetConfig+0x216>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	77fb      	strb	r3, [r7, #31]
 800c7ba:	e0a1      	b.n	800c900 <UART_SetConfig+0x348>
 800c7bc:	2302      	movs	r3, #2
 800c7be:	77fb      	strb	r3, [r7, #31]
 800c7c0:	e09e      	b.n	800c900 <UART_SetConfig+0x348>
 800c7c2:	2304      	movs	r3, #4
 800c7c4:	77fb      	strb	r3, [r7, #31]
 800c7c6:	e09b      	b.n	800c900 <UART_SetConfig+0x348>
 800c7c8:	2308      	movs	r3, #8
 800c7ca:	77fb      	strb	r3, [r7, #31]
 800c7cc:	e098      	b.n	800c900 <UART_SetConfig+0x348>
 800c7ce:	2310      	movs	r3, #16
 800c7d0:	77fb      	strb	r3, [r7, #31]
 800c7d2:	e095      	b.n	800c900 <UART_SetConfig+0x348>
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	4a2f      	ldr	r2, [pc, #188]	@ (800c898 <UART_SetConfig+0x2e0>)
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d125      	bne.n	800c82a <UART_SetConfig+0x272>
 800c7de:	4b29      	ldr	r3, [pc, #164]	@ (800c884 <UART_SetConfig+0x2cc>)
 800c7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800c7e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c7ec:	d017      	beq.n	800c81e <UART_SetConfig+0x266>
 800c7ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c7f2:	d817      	bhi.n	800c824 <UART_SetConfig+0x26c>
 800c7f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7f8:	d00b      	beq.n	800c812 <UART_SetConfig+0x25a>
 800c7fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7fe:	d811      	bhi.n	800c824 <UART_SetConfig+0x26c>
 800c800:	2b00      	cmp	r3, #0
 800c802:	d003      	beq.n	800c80c <UART_SetConfig+0x254>
 800c804:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c808:	d006      	beq.n	800c818 <UART_SetConfig+0x260>
 800c80a:	e00b      	b.n	800c824 <UART_SetConfig+0x26c>
 800c80c:	2301      	movs	r3, #1
 800c80e:	77fb      	strb	r3, [r7, #31]
 800c810:	e076      	b.n	800c900 <UART_SetConfig+0x348>
 800c812:	2302      	movs	r3, #2
 800c814:	77fb      	strb	r3, [r7, #31]
 800c816:	e073      	b.n	800c900 <UART_SetConfig+0x348>
 800c818:	2304      	movs	r3, #4
 800c81a:	77fb      	strb	r3, [r7, #31]
 800c81c:	e070      	b.n	800c900 <UART_SetConfig+0x348>
 800c81e:	2308      	movs	r3, #8
 800c820:	77fb      	strb	r3, [r7, #31]
 800c822:	e06d      	b.n	800c900 <UART_SetConfig+0x348>
 800c824:	2310      	movs	r3, #16
 800c826:	77fb      	strb	r3, [r7, #31]
 800c828:	e06a      	b.n	800c900 <UART_SetConfig+0x348>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	4a1b      	ldr	r2, [pc, #108]	@ (800c89c <UART_SetConfig+0x2e4>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d138      	bne.n	800c8a6 <UART_SetConfig+0x2ee>
 800c834:	4b13      	ldr	r3, [pc, #76]	@ (800c884 <UART_SetConfig+0x2cc>)
 800c836:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c83a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800c83e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c842:	d017      	beq.n	800c874 <UART_SetConfig+0x2bc>
 800c844:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800c848:	d82a      	bhi.n	800c8a0 <UART_SetConfig+0x2e8>
 800c84a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c84e:	d00b      	beq.n	800c868 <UART_SetConfig+0x2b0>
 800c850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c854:	d824      	bhi.n	800c8a0 <UART_SetConfig+0x2e8>
 800c856:	2b00      	cmp	r3, #0
 800c858:	d003      	beq.n	800c862 <UART_SetConfig+0x2aa>
 800c85a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c85e:	d006      	beq.n	800c86e <UART_SetConfig+0x2b6>
 800c860:	e01e      	b.n	800c8a0 <UART_SetConfig+0x2e8>
 800c862:	2300      	movs	r3, #0
 800c864:	77fb      	strb	r3, [r7, #31]
 800c866:	e04b      	b.n	800c900 <UART_SetConfig+0x348>
 800c868:	2302      	movs	r3, #2
 800c86a:	77fb      	strb	r3, [r7, #31]
 800c86c:	e048      	b.n	800c900 <UART_SetConfig+0x348>
 800c86e:	2304      	movs	r3, #4
 800c870:	77fb      	strb	r3, [r7, #31]
 800c872:	e045      	b.n	800c900 <UART_SetConfig+0x348>
 800c874:	2308      	movs	r3, #8
 800c876:	77fb      	strb	r3, [r7, #31]
 800c878:	e042      	b.n	800c900 <UART_SetConfig+0x348>
 800c87a:	bf00      	nop
 800c87c:	efff69f3 	.word	0xefff69f3
 800c880:	40011000 	.word	0x40011000
 800c884:	40023800 	.word	0x40023800
 800c888:	40004400 	.word	0x40004400
 800c88c:	40004800 	.word	0x40004800
 800c890:	40004c00 	.word	0x40004c00
 800c894:	40005000 	.word	0x40005000
 800c898:	40011400 	.word	0x40011400
 800c89c:	40007800 	.word	0x40007800
 800c8a0:	2310      	movs	r3, #16
 800c8a2:	77fb      	strb	r3, [r7, #31]
 800c8a4:	e02c      	b.n	800c900 <UART_SetConfig+0x348>
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	4a72      	ldr	r2, [pc, #456]	@ (800ca74 <UART_SetConfig+0x4bc>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d125      	bne.n	800c8fc <UART_SetConfig+0x344>
 800c8b0:	4b71      	ldr	r3, [pc, #452]	@ (800ca78 <UART_SetConfig+0x4c0>)
 800c8b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c8b6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c8ba:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c8be:	d017      	beq.n	800c8f0 <UART_SetConfig+0x338>
 800c8c0:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800c8c4:	d817      	bhi.n	800c8f6 <UART_SetConfig+0x33e>
 800c8c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8ca:	d00b      	beq.n	800c8e4 <UART_SetConfig+0x32c>
 800c8cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c8d0:	d811      	bhi.n	800c8f6 <UART_SetConfig+0x33e>
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d003      	beq.n	800c8de <UART_SetConfig+0x326>
 800c8d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c8da:	d006      	beq.n	800c8ea <UART_SetConfig+0x332>
 800c8dc:	e00b      	b.n	800c8f6 <UART_SetConfig+0x33e>
 800c8de:	2300      	movs	r3, #0
 800c8e0:	77fb      	strb	r3, [r7, #31]
 800c8e2:	e00d      	b.n	800c900 <UART_SetConfig+0x348>
 800c8e4:	2302      	movs	r3, #2
 800c8e6:	77fb      	strb	r3, [r7, #31]
 800c8e8:	e00a      	b.n	800c900 <UART_SetConfig+0x348>
 800c8ea:	2304      	movs	r3, #4
 800c8ec:	77fb      	strb	r3, [r7, #31]
 800c8ee:	e007      	b.n	800c900 <UART_SetConfig+0x348>
 800c8f0:	2308      	movs	r3, #8
 800c8f2:	77fb      	strb	r3, [r7, #31]
 800c8f4:	e004      	b.n	800c900 <UART_SetConfig+0x348>
 800c8f6:	2310      	movs	r3, #16
 800c8f8:	77fb      	strb	r3, [r7, #31]
 800c8fa:	e001      	b.n	800c900 <UART_SetConfig+0x348>
 800c8fc:	2310      	movs	r3, #16
 800c8fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	69db      	ldr	r3, [r3, #28]
 800c904:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c908:	d15b      	bne.n	800c9c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800c90a:	7ffb      	ldrb	r3, [r7, #31]
 800c90c:	2b08      	cmp	r3, #8
 800c90e:	d828      	bhi.n	800c962 <UART_SetConfig+0x3aa>
 800c910:	a201      	add	r2, pc, #4	@ (adr r2, 800c918 <UART_SetConfig+0x360>)
 800c912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c916:	bf00      	nop
 800c918:	0800c93d 	.word	0x0800c93d
 800c91c:	0800c945 	.word	0x0800c945
 800c920:	0800c94d 	.word	0x0800c94d
 800c924:	0800c963 	.word	0x0800c963
 800c928:	0800c953 	.word	0x0800c953
 800c92c:	0800c963 	.word	0x0800c963
 800c930:	0800c963 	.word	0x0800c963
 800c934:	0800c963 	.word	0x0800c963
 800c938:	0800c95b 	.word	0x0800c95b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c93c:	f7fc f97c 	bl	8008c38 <HAL_RCC_GetPCLK1Freq>
 800c940:	61b8      	str	r0, [r7, #24]
        break;
 800c942:	e013      	b.n	800c96c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c944:	f7fc f98c 	bl	8008c60 <HAL_RCC_GetPCLK2Freq>
 800c948:	61b8      	str	r0, [r7, #24]
        break;
 800c94a:	e00f      	b.n	800c96c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c94c:	4b4b      	ldr	r3, [pc, #300]	@ (800ca7c <UART_SetConfig+0x4c4>)
 800c94e:	61bb      	str	r3, [r7, #24]
        break;
 800c950:	e00c      	b.n	800c96c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c952:	f7fc f89f 	bl	8008a94 <HAL_RCC_GetSysClockFreq>
 800c956:	61b8      	str	r0, [r7, #24]
        break;
 800c958:	e008      	b.n	800c96c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c95a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c95e:	61bb      	str	r3, [r7, #24]
        break;
 800c960:	e004      	b.n	800c96c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800c962:	2300      	movs	r3, #0
 800c964:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	77bb      	strb	r3, [r7, #30]
        break;
 800c96a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c96c:	69bb      	ldr	r3, [r7, #24]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d074      	beq.n	800ca5c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c972:	69bb      	ldr	r3, [r7, #24]
 800c974:	005a      	lsls	r2, r3, #1
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	685b      	ldr	r3, [r3, #4]
 800c97a:	085b      	lsrs	r3, r3, #1
 800c97c:	441a      	add	r2, r3
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	685b      	ldr	r3, [r3, #4]
 800c982:	fbb2 f3f3 	udiv	r3, r2, r3
 800c986:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	2b0f      	cmp	r3, #15
 800c98c:	d916      	bls.n	800c9bc <UART_SetConfig+0x404>
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c994:	d212      	bcs.n	800c9bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	b29b      	uxth	r3, r3
 800c99a:	f023 030f 	bic.w	r3, r3, #15
 800c99e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c9a0:	693b      	ldr	r3, [r7, #16]
 800c9a2:	085b      	lsrs	r3, r3, #1
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	b29a      	uxth	r2, r3
 800c9ac:	89fb      	ldrh	r3, [r7, #14]
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	89fa      	ldrh	r2, [r7, #14]
 800c9b8:	60da      	str	r2, [r3, #12]
 800c9ba:	e04f      	b.n	800ca5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	77bb      	strb	r3, [r7, #30]
 800c9c0:	e04c      	b.n	800ca5c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c9c2:	7ffb      	ldrb	r3, [r7, #31]
 800c9c4:	2b08      	cmp	r3, #8
 800c9c6:	d828      	bhi.n	800ca1a <UART_SetConfig+0x462>
 800c9c8:	a201      	add	r2, pc, #4	@ (adr r2, 800c9d0 <UART_SetConfig+0x418>)
 800c9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9ce:	bf00      	nop
 800c9d0:	0800c9f5 	.word	0x0800c9f5
 800c9d4:	0800c9fd 	.word	0x0800c9fd
 800c9d8:	0800ca05 	.word	0x0800ca05
 800c9dc:	0800ca1b 	.word	0x0800ca1b
 800c9e0:	0800ca0b 	.word	0x0800ca0b
 800c9e4:	0800ca1b 	.word	0x0800ca1b
 800c9e8:	0800ca1b 	.word	0x0800ca1b
 800c9ec:	0800ca1b 	.word	0x0800ca1b
 800c9f0:	0800ca13 	.word	0x0800ca13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c9f4:	f7fc f920 	bl	8008c38 <HAL_RCC_GetPCLK1Freq>
 800c9f8:	61b8      	str	r0, [r7, #24]
        break;
 800c9fa:	e013      	b.n	800ca24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c9fc:	f7fc f930 	bl	8008c60 <HAL_RCC_GetPCLK2Freq>
 800ca00:	61b8      	str	r0, [r7, #24]
        break;
 800ca02:	e00f      	b.n	800ca24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ca04:	4b1d      	ldr	r3, [pc, #116]	@ (800ca7c <UART_SetConfig+0x4c4>)
 800ca06:	61bb      	str	r3, [r7, #24]
        break;
 800ca08:	e00c      	b.n	800ca24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ca0a:	f7fc f843 	bl	8008a94 <HAL_RCC_GetSysClockFreq>
 800ca0e:	61b8      	str	r0, [r7, #24]
        break;
 800ca10:	e008      	b.n	800ca24 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ca12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca16:	61bb      	str	r3, [r7, #24]
        break;
 800ca18:	e004      	b.n	800ca24 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	77bb      	strb	r3, [r7, #30]
        break;
 800ca22:	bf00      	nop
    }

    if (pclk != 0U)
 800ca24:	69bb      	ldr	r3, [r7, #24]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d018      	beq.n	800ca5c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	085a      	lsrs	r2, r3, #1
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	441a      	add	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	2b0f      	cmp	r3, #15
 800ca42:	d909      	bls.n	800ca58 <UART_SetConfig+0x4a0>
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca4a:	d205      	bcs.n	800ca58 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	b29a      	uxth	r2, r3
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	60da      	str	r2, [r3, #12]
 800ca56:	e001      	b.n	800ca5c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800ca58:	2301      	movs	r3, #1
 800ca5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	2200      	movs	r2, #0
 800ca66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ca68:	7fbb      	ldrb	r3, [r7, #30]
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3720      	adds	r7, #32
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	40007c00 	.word	0x40007c00
 800ca78:	40023800 	.word	0x40023800
 800ca7c:	00f42400 	.word	0x00f42400

0800ca80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca8c:	f003 0301 	and.w	r3, r3, #1
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00a      	beq.n	800caaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	430a      	orrs	r2, r1
 800caa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caae:	f003 0302 	and.w	r3, r3, #2
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d00a      	beq.n	800cacc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	685b      	ldr	r3, [r3, #4]
 800cabc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	430a      	orrs	r2, r1
 800caca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cad0:	f003 0304 	and.w	r3, r3, #4
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00a      	beq.n	800caee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	430a      	orrs	r2, r1
 800caec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caf2:	f003 0308 	and.w	r3, r3, #8
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00a      	beq.n	800cb10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	430a      	orrs	r2, r1
 800cb0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb14:	f003 0310 	and.w	r3, r3, #16
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d00a      	beq.n	800cb32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	430a      	orrs	r2, r1
 800cb30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb36:	f003 0320 	and.w	r3, r3, #32
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d00a      	beq.n	800cb54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	689b      	ldr	r3, [r3, #8]
 800cb44:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	430a      	orrs	r2, r1
 800cb52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d01a      	beq.n	800cb96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	430a      	orrs	r2, r1
 800cb74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cb7e:	d10a      	bne.n	800cb96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	430a      	orrs	r2, r1
 800cb94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d00a      	beq.n	800cbb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	685b      	ldr	r3, [r3, #4]
 800cba8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	430a      	orrs	r2, r1
 800cbb6:	605a      	str	r2, [r3, #4]
  }
}
 800cbb8:	bf00      	nop
 800cbba:	370c      	adds	r7, #12
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr

0800cbc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af02      	add	r7, sp, #8
 800cbca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cbd4:	f7f8 fb04 	bl	80051e0 <HAL_GetTick>
 800cbd8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 0308 	and.w	r3, r3, #8
 800cbe4:	2b08      	cmp	r3, #8
 800cbe6:	d10e      	bne.n	800cc06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cbe8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800cbec:	9300      	str	r3, [sp, #0]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f000 f81b 	bl	800cc32 <UART_WaitOnFlagUntilTimeout>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d001      	beq.n	800cc06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cc02:	2303      	movs	r3, #3
 800cc04:	e011      	b.n	800cc2a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2220      	movs	r2, #32
 800cc0a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2220      	movs	r2, #32
 800cc10:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800cc28:	2300      	movs	r3, #0
}
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	3710      	adds	r7, #16
 800cc2e:	46bd      	mov	sp, r7
 800cc30:	bd80      	pop	{r7, pc}

0800cc32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cc32:	b580      	push	{r7, lr}
 800cc34:	b09c      	sub	sp, #112	@ 0x70
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	60f8      	str	r0, [r7, #12]
 800cc3a:	60b9      	str	r1, [r7, #8]
 800cc3c:	603b      	str	r3, [r7, #0]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc42:	e0a7      	b.n	800cd94 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cc44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc4a:	f000 80a3 	beq.w	800cd94 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cc4e:	f7f8 fac7 	bl	80051e0 <HAL_GetTick>
 800cc52:	4602      	mov	r2, r0
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	1ad3      	subs	r3, r2, r3
 800cc58:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800cc5a:	429a      	cmp	r2, r3
 800cc5c:	d302      	bcc.n	800cc64 <UART_WaitOnFlagUntilTimeout+0x32>
 800cc5e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d13f      	bne.n	800cce4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cc6c:	e853 3f00 	ldrex	r3, [r3]
 800cc70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800cc72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cc74:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800cc78:	667b      	str	r3, [r7, #100]	@ 0x64
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cc84:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc86:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800cc88:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800cc8a:	e841 2300 	strex	r3, r2, [r1]
 800cc8e:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800cc90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d1e6      	bne.n	800cc64 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	3308      	adds	r3, #8
 800cc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cca0:	e853 3f00 	ldrex	r3, [r3]
 800cca4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cca8:	f023 0301 	bic.w	r3, r3, #1
 800ccac:	663b      	str	r3, [r7, #96]	@ 0x60
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	3308      	adds	r3, #8
 800ccb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ccb6:	64ba      	str	r2, [r7, #72]	@ 0x48
 800ccb8:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ccbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ccbe:	e841 2300 	strex	r3, r2, [r1]
 800ccc2:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ccc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d1e5      	bne.n	800cc96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2220      	movs	r2, #32
 800ccce:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2220      	movs	r2, #32
 800ccd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800cce0:	2303      	movs	r3, #3
 800cce2:	e068      	b.n	800cdb6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	f003 0304 	and.w	r3, r3, #4
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d050      	beq.n	800cd94 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	69db      	ldr	r3, [r3, #28]
 800ccf8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ccfc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd00:	d148      	bne.n	800cd94 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800cd0a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd14:	e853 3f00 	ldrex	r3, [r3]
 800cd18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd1c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800cd20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	461a      	mov	r2, r3
 800cd28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd2a:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd2c:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd2e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cd30:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd32:	e841 2300 	strex	r3, r2, [r1]
 800cd36:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cd38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d1e6      	bne.n	800cd0c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	3308      	adds	r3, #8
 800cd44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd46:	697b      	ldr	r3, [r7, #20]
 800cd48:	e853 3f00 	ldrex	r3, [r3]
 800cd4c:	613b      	str	r3, [r7, #16]
   return(result);
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	f023 0301 	bic.w	r3, r3, #1
 800cd54:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cd56:	68fb      	ldr	r3, [r7, #12]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	3308      	adds	r3, #8
 800cd5c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800cd5e:	623a      	str	r2, [r7, #32]
 800cd60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd62:	69f9      	ldr	r1, [r7, #28]
 800cd64:	6a3a      	ldr	r2, [r7, #32]
 800cd66:	e841 2300 	strex	r3, r2, [r1]
 800cd6a:	61bb      	str	r3, [r7, #24]
   return(result);
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d1e5      	bne.n	800cd3e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	2220      	movs	r2, #32
 800cd76:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2220      	movs	r2, #32
 800cd7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2220      	movs	r2, #32
 800cd84:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800cd90:	2303      	movs	r3, #3
 800cd92:	e010      	b.n	800cdb6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	69da      	ldr	r2, [r3, #28]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	4013      	ands	r3, r2
 800cd9e:	68ba      	ldr	r2, [r7, #8]
 800cda0:	429a      	cmp	r2, r3
 800cda2:	bf0c      	ite	eq
 800cda4:	2301      	moveq	r3, #1
 800cda6:	2300      	movne	r3, #0
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	461a      	mov	r2, r3
 800cdac:	79fb      	ldrb	r3, [r7, #7]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	f43f af48 	beq.w	800cc44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cdb4:	2300      	movs	r3, #0
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3770      	adds	r7, #112	@ 0x70
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	bd80      	pop	{r7, pc}
	...

0800cdc0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b083      	sub	sp, #12
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d121      	bne.n	800ce16 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681a      	ldr	r2, [r3, #0]
 800cdd6:	4b27      	ldr	r3, [pc, #156]	@ (800ce74 <FMC_SDRAM_Init+0xb4>)
 800cdd8:	4013      	ands	r3, r2
 800cdda:	683a      	ldr	r2, [r7, #0]
 800cddc:	6851      	ldr	r1, [r2, #4]
 800cdde:	683a      	ldr	r2, [r7, #0]
 800cde0:	6892      	ldr	r2, [r2, #8]
 800cde2:	4311      	orrs	r1, r2
 800cde4:	683a      	ldr	r2, [r7, #0]
 800cde6:	68d2      	ldr	r2, [r2, #12]
 800cde8:	4311      	orrs	r1, r2
 800cdea:	683a      	ldr	r2, [r7, #0]
 800cdec:	6912      	ldr	r2, [r2, #16]
 800cdee:	4311      	orrs	r1, r2
 800cdf0:	683a      	ldr	r2, [r7, #0]
 800cdf2:	6952      	ldr	r2, [r2, #20]
 800cdf4:	4311      	orrs	r1, r2
 800cdf6:	683a      	ldr	r2, [r7, #0]
 800cdf8:	6992      	ldr	r2, [r2, #24]
 800cdfa:	4311      	orrs	r1, r2
 800cdfc:	683a      	ldr	r2, [r7, #0]
 800cdfe:	69d2      	ldr	r2, [r2, #28]
 800ce00:	4311      	orrs	r1, r2
 800ce02:	683a      	ldr	r2, [r7, #0]
 800ce04:	6a12      	ldr	r2, [r2, #32]
 800ce06:	4311      	orrs	r1, r2
 800ce08:	683a      	ldr	r2, [r7, #0]
 800ce0a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800ce0c:	430a      	orrs	r2, r1
 800ce0e:	431a      	orrs	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	e026      	b.n	800ce64 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800ce1e:	683b      	ldr	r3, [r7, #0]
 800ce20:	69d9      	ldr	r1, [r3, #28]
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	6a1b      	ldr	r3, [r3, #32]
 800ce26:	4319      	orrs	r1, r3
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce2c:	430b      	orrs	r3, r1
 800ce2e:	431a      	orrs	r2, r3
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	685a      	ldr	r2, [r3, #4]
 800ce38:	4b0e      	ldr	r3, [pc, #56]	@ (800ce74 <FMC_SDRAM_Init+0xb4>)
 800ce3a:	4013      	ands	r3, r2
 800ce3c:	683a      	ldr	r2, [r7, #0]
 800ce3e:	6851      	ldr	r1, [r2, #4]
 800ce40:	683a      	ldr	r2, [r7, #0]
 800ce42:	6892      	ldr	r2, [r2, #8]
 800ce44:	4311      	orrs	r1, r2
 800ce46:	683a      	ldr	r2, [r7, #0]
 800ce48:	68d2      	ldr	r2, [r2, #12]
 800ce4a:	4311      	orrs	r1, r2
 800ce4c:	683a      	ldr	r2, [r7, #0]
 800ce4e:	6912      	ldr	r2, [r2, #16]
 800ce50:	4311      	orrs	r1, r2
 800ce52:	683a      	ldr	r2, [r7, #0]
 800ce54:	6952      	ldr	r2, [r2, #20]
 800ce56:	4311      	orrs	r1, r2
 800ce58:	683a      	ldr	r2, [r7, #0]
 800ce5a:	6992      	ldr	r2, [r2, #24]
 800ce5c:	430a      	orrs	r2, r1
 800ce5e:	431a      	orrs	r2, r3
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800ce64:	2300      	movs	r3, #0
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	370c      	adds	r7, #12
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce70:	4770      	bx	lr
 800ce72:	bf00      	nop
 800ce74:	ffff8000 	.word	0xffff8000

0800ce78 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ce78:	b480      	push	{r7}
 800ce7a:	b085      	sub	sp, #20
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	60f8      	str	r0, [r7, #12]
 800ce80:	60b9      	str	r1, [r7, #8]
 800ce82:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d128      	bne.n	800cedc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	1e59      	subs	r1, r3, #1
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	685b      	ldr	r3, [r3, #4]
 800ce9c:	3b01      	subs	r3, #1
 800ce9e:	011b      	lsls	r3, r3, #4
 800cea0:	4319      	orrs	r1, r3
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	689b      	ldr	r3, [r3, #8]
 800cea6:	3b01      	subs	r3, #1
 800cea8:	021b      	lsls	r3, r3, #8
 800ceaa:	4319      	orrs	r1, r3
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	68db      	ldr	r3, [r3, #12]
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	031b      	lsls	r3, r3, #12
 800ceb4:	4319      	orrs	r1, r3
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	691b      	ldr	r3, [r3, #16]
 800ceba:	3b01      	subs	r3, #1
 800cebc:	041b      	lsls	r3, r3, #16
 800cebe:	4319      	orrs	r1, r3
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	695b      	ldr	r3, [r3, #20]
 800cec4:	3b01      	subs	r3, #1
 800cec6:	051b      	lsls	r3, r3, #20
 800cec8:	4319      	orrs	r1, r3
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	699b      	ldr	r3, [r3, #24]
 800cece:	3b01      	subs	r3, #1
 800ced0:	061b      	lsls	r3, r3, #24
 800ced2:	430b      	orrs	r3, r1
 800ced4:	431a      	orrs	r2, r3
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	609a      	str	r2, [r3, #8]
 800ceda:	e02d      	b.n	800cf38 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	689a      	ldr	r2, [r3, #8]
 800cee0:	4b19      	ldr	r3, [pc, #100]	@ (800cf48 <FMC_SDRAM_Timing_Init+0xd0>)
 800cee2:	4013      	ands	r3, r2
 800cee4:	68ba      	ldr	r2, [r7, #8]
 800cee6:	68d2      	ldr	r2, [r2, #12]
 800cee8:	3a01      	subs	r2, #1
 800ceea:	0311      	lsls	r1, r2, #12
 800ceec:	68ba      	ldr	r2, [r7, #8]
 800ceee:	6952      	ldr	r2, [r2, #20]
 800cef0:	3a01      	subs	r2, #1
 800cef2:	0512      	lsls	r2, r2, #20
 800cef4:	430a      	orrs	r2, r1
 800cef6:	431a      	orrs	r2, r3
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	68db      	ldr	r3, [r3, #12]
 800cf00:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	1e59      	subs	r1, r3, #1
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	011b      	lsls	r3, r3, #4
 800cf12:	4319      	orrs	r1, r3
 800cf14:	68bb      	ldr	r3, [r7, #8]
 800cf16:	689b      	ldr	r3, [r3, #8]
 800cf18:	3b01      	subs	r3, #1
 800cf1a:	021b      	lsls	r3, r3, #8
 800cf1c:	4319      	orrs	r1, r3
 800cf1e:	68bb      	ldr	r3, [r7, #8]
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	041b      	lsls	r3, r3, #16
 800cf26:	4319      	orrs	r1, r3
 800cf28:	68bb      	ldr	r3, [r7, #8]
 800cf2a:	699b      	ldr	r3, [r3, #24]
 800cf2c:	3b01      	subs	r3, #1
 800cf2e:	061b      	lsls	r3, r3, #24
 800cf30:	430b      	orrs	r3, r1
 800cf32:	431a      	orrs	r2, r3
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800cf38:	2300      	movs	r3, #0
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3714      	adds	r7, #20
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	ff0f0fff 	.word	0xff0f0fff

0800cf4c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	691a      	ldr	r2, [r3, #16]
 800cf5c:	4b0c      	ldr	r3, [pc, #48]	@ (800cf90 <FMC_SDRAM_SendCommand+0x44>)
 800cf5e:	4013      	ands	r3, r2
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	6811      	ldr	r1, [r2, #0]
 800cf64:	68ba      	ldr	r2, [r7, #8]
 800cf66:	6852      	ldr	r2, [r2, #4]
 800cf68:	4311      	orrs	r1, r2
 800cf6a:	68ba      	ldr	r2, [r7, #8]
 800cf6c:	6892      	ldr	r2, [r2, #8]
 800cf6e:	3a01      	subs	r2, #1
 800cf70:	0152      	lsls	r2, r2, #5
 800cf72:	4311      	orrs	r1, r2
 800cf74:	68ba      	ldr	r2, [r7, #8]
 800cf76:	68d2      	ldr	r2, [r2, #12]
 800cf78:	0252      	lsls	r2, r2, #9
 800cf7a:	430a      	orrs	r2, r1
 800cf7c:	431a      	orrs	r2, r3
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800cf82:	2300      	movs	r3, #0
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3714      	adds	r7, #20
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr
 800cf90:	ffc00000 	.word	0xffc00000

0800cf94 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b083      	sub	sp, #12
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	695a      	ldr	r2, [r3, #20]
 800cfa2:	4b07      	ldr	r3, [pc, #28]	@ (800cfc0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	683a      	ldr	r2, [r7, #0]
 800cfa8:	0052      	lsls	r2, r2, #1
 800cfaa:	431a      	orrs	r2, r3
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800cfb0:	2300      	movs	r3, #0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	370c      	adds	r7, #12
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr
 800cfbe:	bf00      	nop
 800cfc0:	ffffc001 	.word	0xffffc001

0800cfc4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800cfc4:	b084      	sub	sp, #16
 800cfc6:	b480      	push	{r7}
 800cfc8:	b085      	sub	sp, #20
 800cfca:	af00      	add	r7, sp, #0
 800cfcc:	6078      	str	r0, [r7, #4]
 800cfce:	f107 001c 	add.w	r0, r7, #28
 800cfd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800cfda:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800cfdc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800cfde:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800cfe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800cfe2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800cfe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800cfe6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800cfe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800cfea:	431a      	orrs	r2, r3
             Init.ClockDiv
 800cfec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800cfee:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800cff0:	68fa      	ldr	r2, [r7, #12]
 800cff2:	4313      	orrs	r3, r2
 800cff4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	685a      	ldr	r2, [r3, #4]
 800cffa:	4b07      	ldr	r3, [pc, #28]	@ (800d018 <SDMMC_Init+0x54>)
 800cffc:	4013      	ands	r3, r2
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	431a      	orrs	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3714      	adds	r7, #20
 800d00c:	46bd      	mov	sp, r7
 800d00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d012:	b004      	add	sp, #16
 800d014:	4770      	bx	lr
 800d016:	bf00      	nop
 800d018:	ffff8100 	.word	0xffff8100

0800d01c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b083      	sub	sp, #12
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	370c      	adds	r7, #12
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr

0800d036 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800d036:	b480      	push	{r7}
 800d038:	b083      	sub	sp, #12
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
 800d03e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800d04a:	2300      	movs	r3, #0
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	370c      	adds	r7, #12
 800d050:	46bd      	mov	sp, r7
 800d052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d056:	4770      	bx	lr

0800d058 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	2203      	movs	r2, #3
 800d064:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800d066:	2300      	movs	r3, #0
}
 800d068:	4618      	mov	r0, r3
 800d06a:	370c      	adds	r7, #12
 800d06c:	46bd      	mov	sp, r7
 800d06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d072:	4770      	bx	lr

0800d074 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	f003 0303 	and.w	r3, r3, #3
}
 800d084:	4618      	mov	r0, r3
 800d086:	370c      	adds	r7, #12
 800d088:	46bd      	mov	sp, r7
 800d08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08e:	4770      	bx	lr

0800d090 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800d090:	b480      	push	{r7}
 800d092:	b085      	sub	sp, #20
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d09a:	2300      	movs	r3, #0
 800d09c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	681a      	ldr	r2, [r3, #0]
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d0ae:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800d0b0:	683b      	ldr	r3, [r7, #0]
 800d0b2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800d0b4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800d0ba:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800d0bc:	68fa      	ldr	r2, [r7, #12]
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	68da      	ldr	r2, [r3, #12]
 800d0c6:	4b06      	ldr	r3, [pc, #24]	@ (800d0e0 <SDMMC_SendCommand+0x50>)
 800d0c8:	4013      	ands	r3, r2
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	431a      	orrs	r2, r3
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3714      	adds	r7, #20
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0de:	4770      	bx	lr
 800d0e0:	fffff000 	.word	0xfffff000

0800d0e4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	691b      	ldr	r3, [r3, #16]
 800d0f0:	b2db      	uxtb	r3, r3
}
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	370c      	adds	r7, #12
 800d0f6:	46bd      	mov	sp, r7
 800d0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0fc:	4770      	bx	lr

0800d0fe <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800d0fe:	b480      	push	{r7}
 800d100:	b085      	sub	sp, #20
 800d102:	af00      	add	r7, sp, #0
 800d104:	6078      	str	r0, [r7, #4]
 800d106:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	3314      	adds	r3, #20
 800d10c:	461a      	mov	r2, r3
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	4413      	add	r3, r2
 800d112:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
}  
 800d118:	4618      	mov	r0, r3
 800d11a:	3714      	adds	r7, #20
 800d11c:	46bd      	mov	sp, r7
 800d11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d122:	4770      	bx	lr

0800d124 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800d124:	b480      	push	{r7}
 800d126:	b085      	sub	sp, #20
 800d128:	af00      	add	r7, sp, #0
 800d12a:	6078      	str	r0, [r7, #4]
 800d12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800d12e:	2300      	movs	r3, #0
 800d130:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	681a      	ldr	r2, [r3, #0]
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	685a      	ldr	r2, [r3, #4]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d14a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800d150:	431a      	orrs	r2, r3
                       Data->DPSM);
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800d156:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800d158:	68fa      	ldr	r2, [r7, #12]
 800d15a:	4313      	orrs	r3, r2
 800d15c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d162:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	431a      	orrs	r2, r3
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800d16e:	2300      	movs	r3, #0

}
 800d170:	4618      	mov	r0, r3
 800d172:	3714      	adds	r7, #20
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b088      	sub	sp, #32
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800d186:	683b      	ldr	r3, [r7, #0]
 800d188:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800d18a:	2310      	movs	r3, #16
 800d18c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d18e:	2340      	movs	r3, #64	@ 0x40
 800d190:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d192:	2300      	movs	r3, #0
 800d194:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d196:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d19a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d19c:	f107 0308 	add.w	r3, r7, #8
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f7ff ff74 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800d1a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1ac:	2110      	movs	r1, #16
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 f9d6 	bl	800d560 <SDMMC_GetCmdResp1>
 800d1b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1b6:	69fb      	ldr	r3, [r7, #28]
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3720      	adds	r7, #32
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800d1ce:	2311      	movs	r3, #17
 800d1d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d1d2:	2340      	movs	r3, #64	@ 0x40
 800d1d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d1da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d1e0:	f107 0308 	add.w	r3, r7, #8
 800d1e4:	4619      	mov	r1, r3
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f7ff ff52 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d1ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d1f0:	2111      	movs	r1, #17
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f000 f9b4 	bl	800d560 <SDMMC_GetCmdResp1>
 800d1f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d1fa:	69fb      	ldr	r3, [r7, #28]
}
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	3720      	adds	r7, #32
 800d200:	46bd      	mov	sp, r7
 800d202:	bd80      	pop	{r7, pc}

0800d204 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b088      	sub	sp, #32
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800d212:	2312      	movs	r3, #18
 800d214:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d216:	2340      	movs	r3, #64	@ 0x40
 800d218:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d21a:	2300      	movs	r3, #0
 800d21c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d21e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d222:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d224:	f107 0308 	add.w	r3, r7, #8
 800d228:	4619      	mov	r1, r3
 800d22a:	6878      	ldr	r0, [r7, #4]
 800d22c:	f7ff ff30 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d230:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d234:	2112      	movs	r1, #18
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f000 f992 	bl	800d560 <SDMMC_GetCmdResp1>
 800d23c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d23e:	69fb      	ldr	r3, [r7, #28]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3720      	adds	r7, #32
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b088      	sub	sp, #32
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800d256:	2318      	movs	r3, #24
 800d258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d25a:	2340      	movs	r3, #64	@ 0x40
 800d25c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d25e:	2300      	movs	r3, #0
 800d260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d262:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d266:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d268:	f107 0308 	add.w	r3, r7, #8
 800d26c:	4619      	mov	r1, r3
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7ff ff0e 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800d274:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d278:	2118      	movs	r1, #24
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 f970 	bl	800d560 <SDMMC_GetCmdResp1>
 800d280:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d282:	69fb      	ldr	r3, [r7, #28]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3720      	adds	r7, #32
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}

0800d28c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b088      	sub	sp, #32
 800d290:	af00      	add	r7, sp, #0
 800d292:	6078      	str	r0, [r7, #4]
 800d294:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800d29a:	2319      	movs	r3, #25
 800d29c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d29e:	2340      	movs	r3, #64	@ 0x40
 800d2a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2ac:	f107 0308 	add.w	r3, r7, #8
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7ff feec 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800d2b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2bc:	2119      	movs	r1, #25
 800d2be:	6878      	ldr	r0, [r7, #4]
 800d2c0:	f000 f94e 	bl	800d560 <SDMMC_GetCmdResp1>
 800d2c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d2c6:	69fb      	ldr	r3, [r7, #28]
}
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	3720      	adds	r7, #32
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b088      	sub	sp, #32
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800d2dc:	230c      	movs	r3, #12
 800d2de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d2e0:	2340      	movs	r3, #64	@ 0x40
 800d2e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d2e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d2ec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d2ee:	f107 0308 	add.w	r3, r7, #8
 800d2f2:	4619      	mov	r1, r3
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f7ff fecb 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800d2fa:	4a05      	ldr	r2, [pc, #20]	@ (800d310 <SDMMC_CmdStopTransfer+0x40>)
 800d2fc:	210c      	movs	r1, #12
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f92e 	bl	800d560 <SDMMC_GetCmdResp1>
 800d304:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d306:	69fb      	ldr	r3, [r7, #28]
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3720      	adds	r7, #32
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	05f5e100 	.word	0x05f5e100

0800d314 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b08a      	sub	sp, #40	@ 0x28
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800d324:	2307      	movs	r3, #7
 800d326:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d328:	2340      	movs	r3, #64	@ 0x40
 800d32a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d32c:	2300      	movs	r3, #0
 800d32e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d334:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d336:	f107 0310 	add.w	r3, r7, #16
 800d33a:	4619      	mov	r1, r3
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f7ff fea7 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800d342:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d346:	2107      	movs	r1, #7
 800d348:	68f8      	ldr	r0, [r7, #12]
 800d34a:	f000 f909 	bl	800d560 <SDMMC_GetCmdResp1>
 800d34e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800d350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d352:	4618      	mov	r0, r3
 800d354:	3728      	adds	r7, #40	@ 0x28
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}

0800d35a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800d35a:	b580      	push	{r7, lr}
 800d35c:	b088      	sub	sp, #32
 800d35e:	af00      	add	r7, sp, #0
 800d360:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800d362:	2300      	movs	r3, #0
 800d364:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800d366:	2300      	movs	r3, #0
 800d368:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800d36a:	2300      	movs	r3, #0
 800d36c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d36e:	2300      	movs	r3, #0
 800d370:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d372:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d376:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d378:	f107 0308 	add.w	r3, r7, #8
 800d37c:	4619      	mov	r1, r3
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f7ff fe86 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fb23 	bl	800d9d0 <SDMMC_GetCmdError>
 800d38a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d38c:	69fb      	ldr	r3, [r7, #28]
}
 800d38e:	4618      	mov	r0, r3
 800d390:	3720      	adds	r7, #32
 800d392:	46bd      	mov	sp, r7
 800d394:	bd80      	pop	{r7, pc}

0800d396 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800d396:	b580      	push	{r7, lr}
 800d398:	b088      	sub	sp, #32
 800d39a:	af00      	add	r7, sp, #0
 800d39c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800d39e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800d3a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800d3a4:	2308      	movs	r3, #8
 800d3a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3a8:	2340      	movs	r3, #64	@ 0x40
 800d3aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3b4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3b6:	f107 0308 	add.w	r3, r7, #8
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f7ff fe67 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800d3c2:	6878      	ldr	r0, [r7, #4]
 800d3c4:	f000 fab6 	bl	800d934 <SDMMC_GetCmdResp7>
 800d3c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d3ca:	69fb      	ldr	r3, [r7, #28]
}
 800d3cc:	4618      	mov	r0, r3
 800d3ce:	3720      	adds	r7, #32
 800d3d0:	46bd      	mov	sp, r7
 800d3d2:	bd80      	pop	{r7, pc}

0800d3d4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b088      	sub	sp, #32
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800d3e2:	2337      	movs	r3, #55	@ 0x37
 800d3e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d3e6:	2340      	movs	r3, #64	@ 0x40
 800d3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d3ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d3f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d3f4:	f107 0308 	add.w	r3, r7, #8
 800d3f8:	4619      	mov	r1, r3
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7ff fe48 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800d400:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d404:	2137      	movs	r1, #55	@ 0x37
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f8aa 	bl	800d560 <SDMMC_GetCmdResp1>
 800d40c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d40e:	69fb      	ldr	r3, [r7, #28]
}
 800d410:	4618      	mov	r0, r3
 800d412:	3720      	adds	r7, #32
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b088      	sub	sp, #32
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
 800d420:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800d422:	683a      	ldr	r2, [r7, #0]
 800d424:	4b0d      	ldr	r3, [pc, #52]	@ (800d45c <SDMMC_CmdAppOperCommand+0x44>)
 800d426:	4313      	orrs	r3, r2
 800d428:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800d42a:	2329      	movs	r3, #41	@ 0x29
 800d42c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d42e:	2340      	movs	r3, #64	@ 0x40
 800d430:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d432:	2300      	movs	r3, #0
 800d434:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d436:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d43a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d43c:	f107 0308 	add.w	r3, r7, #8
 800d440:	4619      	mov	r1, r3
 800d442:	6878      	ldr	r0, [r7, #4]
 800d444:	f7ff fe24 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f000 f9bf 	bl	800d7cc <SDMMC_GetCmdResp3>
 800d44e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d450:	69fb      	ldr	r3, [r7, #28]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3720      	adds	r7, #32
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	80100000 	.word	0x80100000

0800d460 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b088      	sub	sp, #32
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800d468:	2300      	movs	r3, #0
 800d46a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800d46c:	2302      	movs	r3, #2
 800d46e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d470:	23c0      	movs	r3, #192	@ 0xc0
 800d472:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d474:	2300      	movs	r3, #0
 800d476:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d478:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d47c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d47e:	f107 0308 	add.w	r3, r7, #8
 800d482:	4619      	mov	r1, r3
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f7ff fe03 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f956 	bl	800d73c <SDMMC_GetCmdResp2>
 800d490:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d492:	69fb      	ldr	r3, [r7, #28]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3720      	adds	r7, #32
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b088      	sub	sp, #32
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800d4a6:	683b      	ldr	r3, [r7, #0]
 800d4a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800d4aa:	2309      	movs	r3, #9
 800d4ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800d4ae:	23c0      	movs	r3, #192	@ 0xc0
 800d4b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4bc:	f107 0308 	add.w	r3, r7, #8
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f7ff fde4 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f000 f937 	bl	800d73c <SDMMC_GetCmdResp2>
 800d4ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d4d0:	69fb      	ldr	r3, [r7, #28]
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3720      	adds	r7, #32
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b088      	sub	sp, #32
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800d4e8:	2303      	movs	r3, #3
 800d4ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d4ec:	2340      	movs	r3, #64	@ 0x40
 800d4ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d4f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d4f8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d4fa:	f107 0308 	add.w	r3, r7, #8
 800d4fe:	4619      	mov	r1, r3
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f7ff fdc5 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	2103      	movs	r1, #3
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 f99c 	bl	800d848 <SDMMC_GetCmdResp6>
 800d510:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d512:	69fb      	ldr	r3, [r7, #28]
}
 800d514:	4618      	mov	r0, r3
 800d516:	3720      	adds	r7, #32
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b088      	sub	sp, #32
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
 800d524:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800d52a:	230d      	movs	r3, #13
 800d52c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800d52e:	2340      	movs	r3, #64	@ 0x40
 800d530:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800d532:	2300      	movs	r3, #0
 800d534:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800d536:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d53a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800d53c:	f107 0308 	add.w	r3, r7, #8
 800d540:	4619      	mov	r1, r3
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f7ff fda4 	bl	800d090 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800d548:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d54c:	210d      	movs	r1, #13
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 f806 	bl	800d560 <SDMMC_GetCmdResp1>
 800d554:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800d556:	69fb      	ldr	r3, [r7, #28]
}
 800d558:	4618      	mov	r0, r3
 800d55a:	3720      	adds	r7, #32
 800d55c:	46bd      	mov	sp, r7
 800d55e:	bd80      	pop	{r7, pc}

0800d560 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b088      	sub	sp, #32
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	460b      	mov	r3, r1
 800d56a:	607a      	str	r2, [r7, #4]
 800d56c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800d56e:	4b70      	ldr	r3, [pc, #448]	@ (800d730 <SDMMC_GetCmdResp1+0x1d0>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	4a70      	ldr	r2, [pc, #448]	@ (800d734 <SDMMC_GetCmdResp1+0x1d4>)
 800d574:	fba2 2303 	umull	r2, r3, r2, r3
 800d578:	0a5a      	lsrs	r2, r3, #9
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	fb02 f303 	mul.w	r3, r2, r3
 800d580:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d582:	69fb      	ldr	r3, [r7, #28]
 800d584:	1e5a      	subs	r2, r3, #1
 800d586:	61fa      	str	r2, [r7, #28]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d102      	bne.n	800d592 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d58c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d590:	e0c9      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d596:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d598:	69bb      	ldr	r3, [r7, #24]
 800d59a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d0ef      	beq.n	800d582 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d5a2:	69bb      	ldr	r3, [r7, #24]
 800d5a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d1ea      	bne.n	800d582 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5b0:	f003 0304 	and.w	r3, r3, #4
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d004      	beq.n	800d5c2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2204      	movs	r2, #4
 800d5bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d5be:	2304      	movs	r3, #4
 800d5c0:	e0b1      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5c6:	f003 0301 	and.w	r3, r3, #1
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d004      	beq.n	800d5d8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	e0a6      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	22c5      	movs	r2, #197	@ 0xc5
 800d5dc:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d5de:	68f8      	ldr	r0, [r7, #12]
 800d5e0:	f7ff fd80 	bl	800d0e4 <SDMMC_GetCommandResponse>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	7afb      	ldrb	r3, [r7, #11]
 800d5ea:	4293      	cmp	r3, r2
 800d5ec:	d001      	beq.n	800d5f2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e099      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	68f8      	ldr	r0, [r7, #12]
 800d5f6:	f7ff fd82 	bl	800d0fe <SDMMC_GetResponse>
 800d5fa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800d5fc:	697a      	ldr	r2, [r7, #20]
 800d5fe:	4b4e      	ldr	r3, [pc, #312]	@ (800d738 <SDMMC_GetCmdResp1+0x1d8>)
 800d600:	4013      	ands	r3, r2
 800d602:	2b00      	cmp	r3, #0
 800d604:	d101      	bne.n	800d60a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800d606:	2300      	movs	r3, #0
 800d608:	e08d      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	da02      	bge.n	800d616 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800d610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800d614:	e087      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d001      	beq.n	800d624 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800d620:	2340      	movs	r3, #64	@ 0x40
 800d622:	e080      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800d624:	697b      	ldr	r3, [r7, #20]
 800d626:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d001      	beq.n	800d632 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800d62e:	2380      	movs	r3, #128	@ 0x80
 800d630:	e079      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800d63c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800d640:	e071      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d002      	beq.n	800d652 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800d64c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d650:	e069      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800d652:	697b      	ldr	r3, [r7, #20]
 800d654:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d002      	beq.n	800d662 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800d65c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d660:	e061      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800d662:	697b      	ldr	r3, [r7, #20]
 800d664:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d002      	beq.n	800d672 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d66c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d670:	e059      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d67c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d680:	e051      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d002      	beq.n	800d692 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d68c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d690:	e049      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d002      	beq.n	800d6a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d69c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800d6a0:	e041      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d002      	beq.n	800d6b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d6ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d6b0:	e039      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d002      	beq.n	800d6c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d6bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800d6c0:	e031      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d002      	beq.n	800d6d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d6cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800d6d0:	e029      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d6d2:	697b      	ldr	r3, [r7, #20]
 800d6d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d002      	beq.n	800d6e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d6dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800d6e0:	e021      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d002      	beq.n	800d6f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d6ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d6f0:	e019      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d002      	beq.n	800d702 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d6fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800d700:	e011      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d702:	697b      	ldr	r3, [r7, #20]
 800d704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d002      	beq.n	800d712 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d70c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800d710:	e009      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	f003 0308 	and.w	r3, r3, #8
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d002      	beq.n	800d722 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d71c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800d720:	e001      	b.n	800d726 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d722:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d726:	4618      	mov	r0, r3
 800d728:	3720      	adds	r7, #32
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	2000002c 	.word	0x2000002c
 800d734:	10624dd3 	.word	0x10624dd3
 800d738:	fdffe008 	.word	0xfdffe008

0800d73c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d73c:	b480      	push	{r7}
 800d73e:	b085      	sub	sp, #20
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d744:	4b1f      	ldr	r3, [pc, #124]	@ (800d7c4 <SDMMC_GetCmdResp2+0x88>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4a1f      	ldr	r2, [pc, #124]	@ (800d7c8 <SDMMC_GetCmdResp2+0x8c>)
 800d74a:	fba2 2303 	umull	r2, r3, r2, r3
 800d74e:	0a5b      	lsrs	r3, r3, #9
 800d750:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d754:	fb02 f303 	mul.w	r3, r2, r3
 800d758:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	1e5a      	subs	r2, r3, #1
 800d75e:	60fa      	str	r2, [r7, #12]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d102      	bne.n	800d76a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d764:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d768:	e026      	b.n	800d7b8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d76e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d770:	68bb      	ldr	r3, [r7, #8]
 800d772:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d776:	2b00      	cmp	r3, #0
 800d778:	d0ef      	beq.n	800d75a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d780:	2b00      	cmp	r3, #0
 800d782:	d1ea      	bne.n	800d75a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d788:	f003 0304 	and.w	r3, r3, #4
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d004      	beq.n	800d79a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2204      	movs	r2, #4
 800d794:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d796:	2304      	movs	r3, #4
 800d798:	e00e      	b.n	800d7b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d79e:	f003 0301 	and.w	r3, r3, #1
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d004      	beq.n	800d7b0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2201      	movs	r2, #1
 800d7aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	e003      	b.n	800d7b8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	22c5      	movs	r2, #197	@ 0xc5
 800d7b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3714      	adds	r7, #20
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr
 800d7c4:	2000002c 	.word	0x2000002c
 800d7c8:	10624dd3 	.word	0x10624dd3

0800d7cc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d7cc:	b480      	push	{r7}
 800d7ce:	b085      	sub	sp, #20
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d7d4:	4b1a      	ldr	r3, [pc, #104]	@ (800d840 <SDMMC_GetCmdResp3+0x74>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	4a1a      	ldr	r2, [pc, #104]	@ (800d844 <SDMMC_GetCmdResp3+0x78>)
 800d7da:	fba2 2303 	umull	r2, r3, r2, r3
 800d7de:	0a5b      	lsrs	r3, r3, #9
 800d7e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d7e4:	fb02 f303 	mul.w	r3, r2, r3
 800d7e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	1e5a      	subs	r2, r3, #1
 800d7ee:	60fa      	str	r2, [r7, #12]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d102      	bne.n	800d7fa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d7f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d7f8:	e01b      	b.n	800d832 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d7fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d806:	2b00      	cmp	r3, #0
 800d808:	d0ef      	beq.n	800d7ea <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d810:	2b00      	cmp	r3, #0
 800d812:	d1ea      	bne.n	800d7ea <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d818:	f003 0304 	and.w	r3, r3, #4
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d004      	beq.n	800d82a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2204      	movs	r2, #4
 800d824:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d826:	2304      	movs	r3, #4
 800d828:	e003      	b.n	800d832 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	22c5      	movs	r2, #197	@ 0xc5
 800d82e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d830:	2300      	movs	r3, #0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3714      	adds	r7, #20
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
 800d83e:	bf00      	nop
 800d840:	2000002c 	.word	0x2000002c
 800d844:	10624dd3 	.word	0x10624dd3

0800d848 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b088      	sub	sp, #32
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	460b      	mov	r3, r1
 800d852:	607a      	str	r2, [r7, #4]
 800d854:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d856:	4b35      	ldr	r3, [pc, #212]	@ (800d92c <SDMMC_GetCmdResp6+0xe4>)
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4a35      	ldr	r2, [pc, #212]	@ (800d930 <SDMMC_GetCmdResp6+0xe8>)
 800d85c:	fba2 2303 	umull	r2, r3, r2, r3
 800d860:	0a5b      	lsrs	r3, r3, #9
 800d862:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d866:	fb02 f303 	mul.w	r3, r2, r3
 800d86a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d86c:	69fb      	ldr	r3, [r7, #28]
 800d86e:	1e5a      	subs	r2, r3, #1
 800d870:	61fa      	str	r2, [r7, #28]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d102      	bne.n	800d87c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d876:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d87a:	e052      	b.n	800d922 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d880:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d882:	69bb      	ldr	r3, [r7, #24]
 800d884:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d0ef      	beq.n	800d86c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d88c:	69bb      	ldr	r3, [r7, #24]
 800d88e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1ea      	bne.n	800d86c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d89a:	f003 0304 	and.w	r3, r3, #4
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d004      	beq.n	800d8ac <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2204      	movs	r2, #4
 800d8a6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d8a8:	2304      	movs	r3, #4
 800d8aa:	e03a      	b.n	800d922 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8b0:	f003 0301 	and.w	r3, r3, #1
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d004      	beq.n	800d8c2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	2201      	movs	r2, #1
 800d8bc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8be:	2301      	movs	r3, #1
 800d8c0:	e02f      	b.n	800d922 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d8c2:	68f8      	ldr	r0, [r7, #12]
 800d8c4:	f7ff fc0e 	bl	800d0e4 <SDMMC_GetCommandResponse>
 800d8c8:	4603      	mov	r3, r0
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	7afb      	ldrb	r3, [r7, #11]
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d001      	beq.n	800d8d6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d8d2:	2301      	movs	r3, #1
 800d8d4:	e025      	b.n	800d922 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	22c5      	movs	r2, #197	@ 0xc5
 800d8da:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d8dc:	2100      	movs	r1, #0
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	f7ff fc0d 	bl	800d0fe <SDMMC_GetResponse>
 800d8e4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d106      	bne.n	800d8fe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d8f0:	697b      	ldr	r3, [r7, #20]
 800d8f2:	0c1b      	lsrs	r3, r3, #16
 800d8f4:	b29a      	uxth	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	e011      	b.n	800d922 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d8fe:	697b      	ldr	r3, [r7, #20]
 800d900:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d904:	2b00      	cmp	r3, #0
 800d906:	d002      	beq.n	800d90e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d908:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d90c:	e009      	b.n	800d922 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d914:	2b00      	cmp	r3, #0
 800d916:	d002      	beq.n	800d91e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d918:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d91c:	e001      	b.n	800d922 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d91e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800d922:	4618      	mov	r0, r3
 800d924:	3720      	adds	r7, #32
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	2000002c 	.word	0x2000002c
 800d930:	10624dd3 	.word	0x10624dd3

0800d934 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d934:	b480      	push	{r7}
 800d936:	b085      	sub	sp, #20
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d93c:	4b22      	ldr	r3, [pc, #136]	@ (800d9c8 <SDMMC_GetCmdResp7+0x94>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	4a22      	ldr	r2, [pc, #136]	@ (800d9cc <SDMMC_GetCmdResp7+0x98>)
 800d942:	fba2 2303 	umull	r2, r3, r2, r3
 800d946:	0a5b      	lsrs	r3, r3, #9
 800d948:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d94c:	fb02 f303 	mul.w	r3, r2, r3
 800d950:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	1e5a      	subs	r2, r3, #1
 800d956:	60fa      	str	r2, [r7, #12]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d102      	bne.n	800d962 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d95c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d960:	e02c      	b.n	800d9bc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d966:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d0ef      	beq.n	800d952 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1ea      	bne.n	800d952 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d980:	f003 0304 	and.w	r3, r3, #4
 800d984:	2b00      	cmp	r3, #0
 800d986:	d004      	beq.n	800d992 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2204      	movs	r2, #4
 800d98c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d98e:	2304      	movs	r3, #4
 800d990:	e014      	b.n	800d9bc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d996:	f003 0301 	and.w	r3, r3, #1
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d004      	beq.n	800d9a8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	2201      	movs	r2, #1
 800d9a2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	e009      	b.n	800d9bc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d002      	beq.n	800d9ba <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2240      	movs	r2, #64	@ 0x40
 800d9b8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d9ba:	2300      	movs	r3, #0
  
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	3714      	adds	r7, #20
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	2000002c 	.word	0x2000002c
 800d9cc:	10624dd3 	.word	0x10624dd3

0800d9d0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800d9d0:	b480      	push	{r7}
 800d9d2:	b085      	sub	sp, #20
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d9d8:	4b11      	ldr	r3, [pc, #68]	@ (800da20 <SDMMC_GetCmdError+0x50>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4a11      	ldr	r2, [pc, #68]	@ (800da24 <SDMMC_GetCmdError+0x54>)
 800d9de:	fba2 2303 	umull	r2, r3, r2, r3
 800d9e2:	0a5b      	lsrs	r3, r3, #9
 800d9e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d9e8:	fb02 f303 	mul.w	r3, r2, r3
 800d9ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	1e5a      	subs	r2, r3, #1
 800d9f2:	60fa      	str	r2, [r7, #12]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d102      	bne.n	800d9fe <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d9f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800d9fc:	e009      	b.n	800da12 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800da02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800da06:	2b00      	cmp	r3, #0
 800da08:	d0f1      	beq.n	800d9ee <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	22c5      	movs	r2, #197	@ 0xc5
 800da0e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3714      	adds	r7, #20
 800da16:	46bd      	mov	sp, r7
 800da18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1c:	4770      	bx	lr
 800da1e:	bf00      	nop
 800da20:	2000002c 	.word	0x2000002c
 800da24:	10624dd3 	.word	0x10624dd3

0800da28 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800da2c:	4904      	ldr	r1, [pc, #16]	@ (800da40 <MX_FATFS_Init+0x18>)
 800da2e:	4805      	ldr	r0, [pc, #20]	@ (800da44 <MX_FATFS_Init+0x1c>)
 800da30:	f002 fde4 	bl	80105fc <FATFS_LinkDriver>
 800da34:	4603      	mov	r3, r0
 800da36:	461a      	mov	r2, r3
 800da38:	4b03      	ldr	r3, [pc, #12]	@ (800da48 <MX_FATFS_Init+0x20>)
 800da3a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800da3c:	bf00      	nop
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	20009d8c 	.word	0x20009d8c
 800da44:	080138f4 	.word	0x080138f4
 800da48:	20009d88 	.word	0x20009d88

0800da4c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800da4c:	b480      	push	{r7}
 800da4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800da50:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800da52:	4618      	mov	r0, r3
 800da54:	46bd      	mov	sp, r7
 800da56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5a:	4770      	bx	lr

0800da5c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b082      	sub	sp, #8
 800da60:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800da62:	2300      	movs	r3, #0
 800da64:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800da66:	f000 f888 	bl	800db7a <BSP_SD_IsDetected>
 800da6a:	4603      	mov	r3, r0
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d001      	beq.n	800da74 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800da70:	2302      	movs	r3, #2
 800da72:	e005      	b.n	800da80 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800da74:	4804      	ldr	r0, [pc, #16]	@ (800da88 <BSP_SD_Init+0x2c>)
 800da76:	f7fc f8ff 	bl	8009c78 <HAL_SD_Init>
 800da7a:	4603      	mov	r3, r0
 800da7c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800da7e:	79fb      	ldrb	r3, [r7, #7]
}
 800da80:	4618      	mov	r0, r3
 800da82:	3708      	adds	r7, #8
 800da84:	46bd      	mov	sp, r7
 800da86:	bd80      	pop	{r7, pc}
 800da88:	200095a8 	.word	0x200095a8

0800da8c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b086      	sub	sp, #24
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800da98:	2300      	movs	r3, #0
 800da9a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	68ba      	ldr	r2, [r7, #8]
 800daa0:	68f9      	ldr	r1, [r7, #12]
 800daa2:	4806      	ldr	r0, [pc, #24]	@ (800dabc <BSP_SD_ReadBlocks_DMA+0x30>)
 800daa4:	f7fc f9a0 	bl	8009de8 <HAL_SD_ReadBlocks_DMA>
 800daa8:	4603      	mov	r3, r0
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d001      	beq.n	800dab2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800daae:	2301      	movs	r3, #1
 800dab0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dab2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dab4:	4618      	mov	r0, r3
 800dab6:	3718      	adds	r7, #24
 800dab8:	46bd      	mov	sp, r7
 800daba:	bd80      	pop	{r7, pc}
 800dabc:	200095a8 	.word	0x200095a8

0800dac0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b086      	sub	sp, #24
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800dacc:	2300      	movs	r3, #0
 800dace:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	68ba      	ldr	r2, [r7, #8]
 800dad4:	68f9      	ldr	r1, [r7, #12]
 800dad6:	4806      	ldr	r0, [pc, #24]	@ (800daf0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800dad8:	f7fc fa68 	bl	8009fac <HAL_SD_WriteBlocks_DMA>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d001      	beq.n	800dae6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dae6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dae8:	4618      	mov	r0, r3
 800daea:	3718      	adds	r7, #24
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	200095a8 	.word	0x200095a8

0800daf4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800daf8:	4805      	ldr	r0, [pc, #20]	@ (800db10 <BSP_SD_GetCardState+0x1c>)
 800dafa:	f7fc fe8d 	bl	800a818 <HAL_SD_GetCardState>
 800dafe:	4603      	mov	r3, r0
 800db00:	2b04      	cmp	r3, #4
 800db02:	bf14      	ite	ne
 800db04:	2301      	movne	r3, #1
 800db06:	2300      	moveq	r3, #0
 800db08:	b2db      	uxtb	r3, r3
}
 800db0a:	4618      	mov	r0, r3
 800db0c:	bd80      	pop	{r7, pc}
 800db0e:	bf00      	nop
 800db10:	200095a8 	.word	0x200095a8

0800db14 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b082      	sub	sp, #8
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800db1c:	6879      	ldr	r1, [r7, #4]
 800db1e:	4803      	ldr	r0, [pc, #12]	@ (800db2c <BSP_SD_GetCardInfo+0x18>)
 800db20:	f7fc fe4e 	bl	800a7c0 <HAL_SD_GetCardInfo>
}
 800db24:	bf00      	nop
 800db26:	3708      	adds	r7, #8
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}
 800db2c:	200095a8 	.word	0x200095a8

0800db30 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b082      	sub	sp, #8
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800db38:	f000 f818 	bl	800db6c <BSP_SD_AbortCallback>
}
 800db3c:	bf00      	nop
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}

0800db44 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800db4c:	f000 f9c4 	bl	800ded8 <BSP_SD_WriteCpltCallback>
}
 800db50:	bf00      	nop
 800db52:	3708      	adds	r7, #8
 800db54:	46bd      	mov	sp, r7
 800db56:	bd80      	pop	{r7, pc}

0800db58 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
 800db5e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800db60:	f000 f9c8 	bl	800def4 <BSP_SD_ReadCpltCallback>
}
 800db64:	bf00      	nop
 800db66:	3708      	adds	r7, #8
 800db68:	46bd      	mov	sp, r7
 800db6a:	bd80      	pop	{r7, pc}

0800db6c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800db6c:	b480      	push	{r7}
 800db6e:	af00      	add	r7, sp, #0

}
 800db70:	bf00      	nop
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr

0800db7a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800db7a:	b580      	push	{r7, lr}
 800db7c:	b082      	sub	sp, #8
 800db7e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800db80:	2301      	movs	r3, #1
 800db82:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800db84:	f000 f80c 	bl	800dba0 <BSP_PlatformIsDetected>
 800db88:	4603      	mov	r3, r0
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d101      	bne.n	800db92 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800db8e:	2300      	movs	r3, #0
 800db90:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800db92:	79fb      	ldrb	r3, [r7, #7]
 800db94:	b2db      	uxtb	r3, r3
}
 800db96:	4618      	mov	r0, r3
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}
	...

0800dba0 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800dba6:	2301      	movs	r3, #1
 800dba8:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800dbaa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800dbae:	4806      	ldr	r0, [pc, #24]	@ (800dbc8 <BSP_PlatformIsDetected+0x28>)
 800dbb0:	f7f9 f96a 	bl	8006e88 <HAL_GPIO_ReadPin>
 800dbb4:	4603      	mov	r3, r0
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d001      	beq.n	800dbbe <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800dbbe:	79fb      	ldrb	r3, [r7, #7]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3708      	adds	r7, #8
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	bd80      	pop	{r7, pc}
 800dbc8:	40020800 	.word	0x40020800

0800dbcc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800dbd4:	f002 fd5e 	bl	8010694 <osKernelSysTick>
 800dbd8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800dbda:	e006      	b.n	800dbea <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dbdc:	f7ff ff8a 	bl	800daf4 <BSP_SD_GetCardState>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	e009      	b.n	800dbfe <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800dbea:	f002 fd53 	bl	8010694 <osKernelSysTick>
 800dbee:	4602      	mov	r2, r0
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	1ad3      	subs	r3, r2, r3
 800dbf4:	687a      	ldr	r2, [r7, #4]
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d8f0      	bhi.n	800dbdc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800dbfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
	...

0800dc08 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	4603      	mov	r3, r0
 800dc10:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dc12:	4b0b      	ldr	r3, [pc, #44]	@ (800dc40 <SD_CheckStatus+0x38>)
 800dc14:	2201      	movs	r2, #1
 800dc16:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dc18:	f7ff ff6c 	bl	800daf4 <BSP_SD_GetCardState>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d107      	bne.n	800dc32 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dc22:	4b07      	ldr	r3, [pc, #28]	@ (800dc40 <SD_CheckStatus+0x38>)
 800dc24:	781b      	ldrb	r3, [r3, #0]
 800dc26:	b2db      	uxtb	r3, r3
 800dc28:	f023 0301 	bic.w	r3, r3, #1
 800dc2c:	b2da      	uxtb	r2, r3
 800dc2e:	4b04      	ldr	r3, [pc, #16]	@ (800dc40 <SD_CheckStatus+0x38>)
 800dc30:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dc32:	4b03      	ldr	r3, [pc, #12]	@ (800dc40 <SD_CheckStatus+0x38>)
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	b2db      	uxtb	r3, r3
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	20000035 	.word	0x20000035

0800dc44 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dc44:	b590      	push	{r4, r7, lr}
 800dc46:	b087      	sub	sp, #28
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	4603      	mov	r3, r0
 800dc4c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dc4e:	4b20      	ldr	r3, [pc, #128]	@ (800dcd0 <SD_initialize+0x8c>)
 800dc50:	2201      	movs	r2, #1
 800dc52:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800dc54:	f002 fd12 	bl	801067c <osKernelRunning>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d030      	beq.n	800dcc0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800dc5e:	f7ff fefd 	bl	800da5c <BSP_SD_Init>
 800dc62:	4603      	mov	r3, r0
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d107      	bne.n	800dc78 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800dc68:	79fb      	ldrb	r3, [r7, #7]
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7ff ffcc 	bl	800dc08 <SD_CheckStatus>
 800dc70:	4603      	mov	r3, r0
 800dc72:	461a      	mov	r2, r3
 800dc74:	4b16      	ldr	r3, [pc, #88]	@ (800dcd0 <SD_initialize+0x8c>)
 800dc76:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800dc78:	4b15      	ldr	r3, [pc, #84]	@ (800dcd0 <SD_initialize+0x8c>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d01e      	beq.n	800dcc0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800dc82:	4b14      	ldr	r3, [pc, #80]	@ (800dcd4 <SD_initialize+0x90>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d10e      	bne.n	800dca8 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800dc8a:	4b13      	ldr	r3, [pc, #76]	@ (800dcd8 <SD_initialize+0x94>)
 800dc8c:	f107 0408 	add.w	r4, r7, #8
 800dc90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800dc92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800dc96:	f107 0308 	add.w	r3, r7, #8
 800dc9a:	2100      	movs	r1, #0
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f002 fd69 	bl	8010774 <osMessageCreate>
 800dca2:	4603      	mov	r3, r0
 800dca4:	4a0b      	ldr	r2, [pc, #44]	@ (800dcd4 <SD_initialize+0x90>)
 800dca6:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800dca8:	4b0a      	ldr	r3, [pc, #40]	@ (800dcd4 <SD_initialize+0x90>)
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d107      	bne.n	800dcc0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800dcb0:	4b07      	ldr	r3, [pc, #28]	@ (800dcd0 <SD_initialize+0x8c>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	f043 0301 	orr.w	r3, r3, #1
 800dcba:	b2da      	uxtb	r2, r3
 800dcbc:	4b04      	ldr	r3, [pc, #16]	@ (800dcd0 <SD_initialize+0x8c>)
 800dcbe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800dcc0:	4b03      	ldr	r3, [pc, #12]	@ (800dcd0 <SD_initialize+0x8c>)
 800dcc2:	781b      	ldrb	r3, [r3, #0]
 800dcc4:	b2db      	uxtb	r3, r3
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	371c      	adds	r7, #28
 800dcca:	46bd      	mov	sp, r7
 800dccc:	bd90      	pop	{r4, r7, pc}
 800dcce:	bf00      	nop
 800dcd0:	20000035 	.word	0x20000035
 800dcd4:	20009d90 	.word	0x20009d90
 800dcd8:	08013878 	.word	0x08013878

0800dcdc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	4603      	mov	r3, r0
 800dce4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dce6:	79fb      	ldrb	r3, [r7, #7]
 800dce8:	4618      	mov	r0, r3
 800dcea:	f7ff ff8d 	bl	800dc08 <SD_CheckStatus>
 800dcee:	4603      	mov	r3, r0
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b08a      	sub	sp, #40	@ 0x28
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	60b9      	str	r1, [r7, #8]
 800dd00:	607a      	str	r2, [r7, #4]
 800dd02:	603b      	str	r3, [r7, #0]
 800dd04:	4603      	mov	r3, r0
 800dd06:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800dd08:	2301      	movs	r3, #1
 800dd0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800dd0e:	f247 5030 	movw	r0, #30000	@ 0x7530
 800dd12:	f7ff ff5b 	bl	800dbcc <SD_CheckStatusWithTimeout>
 800dd16:	4603      	mov	r3, r0
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	da02      	bge.n	800dd22 <SD_read+0x2a>
  {
    return res;
 800dd1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800dd20:	e032      	b.n	800dd88 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800dd22:	683a      	ldr	r2, [r7, #0]
 800dd24:	6879      	ldr	r1, [r7, #4]
 800dd26:	68b8      	ldr	r0, [r7, #8]
 800dd28:	f7ff feb0 	bl	800da8c <BSP_SD_ReadBlocks_DMA>
 800dd2c:	4603      	mov	r3, r0
 800dd2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800dd32:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d124      	bne.n	800dd84 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800dd3a:	4b15      	ldr	r3, [pc, #84]	@ (800dd90 <SD_read+0x98>)
 800dd3c:	6819      	ldr	r1, [r3, #0]
 800dd3e:	f107 0314 	add.w	r3, r7, #20
 800dd42:	f247 5230 	movw	r2, #30000	@ 0x7530
 800dd46:	4618      	mov	r0, r3
 800dd48:	f002 fd7c 	bl	8010844 <osMessageGet>

    if (event.status == osEventMessage)
 800dd4c:	697b      	ldr	r3, [r7, #20]
 800dd4e:	2b10      	cmp	r3, #16
 800dd50:	d118      	bne.n	800dd84 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	2b01      	cmp	r3, #1
 800dd56:	d115      	bne.n	800dd84 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800dd58:	f002 fc9c 	bl	8010694 <osKernelSysTick>
 800dd5c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800dd5e:	e008      	b.n	800dd72 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800dd60:	f7ff fec8 	bl	800daf4 <BSP_SD_GetCardState>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d103      	bne.n	800dd72 <SD_read+0x7a>
              {
                res = RES_OK;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800dd70:	e008      	b.n	800dd84 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800dd72:	f002 fc8f 	bl	8010694 <osKernelSysTick>
 800dd76:	4602      	mov	r2, r0
 800dd78:	6a3b      	ldr	r3, [r7, #32]
 800dd7a:	1ad3      	subs	r3, r2, r3
 800dd7c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800dd80:	4293      	cmp	r3, r2
 800dd82:	d9ed      	bls.n	800dd60 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800dd84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800dd88:	4618      	mov	r0, r3
 800dd8a:	3728      	adds	r7, #40	@ 0x28
 800dd8c:	46bd      	mov	sp, r7
 800dd8e:	bd80      	pop	{r7, pc}
 800dd90:	20009d90 	.word	0x20009d90

0800dd94 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b08a      	sub	sp, #40	@ 0x28
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	60b9      	str	r1, [r7, #8]
 800dd9c:	607a      	str	r2, [r7, #4]
 800dd9e:	603b      	str	r3, [r7, #0]
 800dda0:	4603      	mov	r3, r0
 800dda2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dda4:	2301      	movs	r3, #1
 800dda6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ddaa:	f247 5030 	movw	r0, #30000	@ 0x7530
 800ddae:	f7ff ff0d 	bl	800dbcc <SD_CheckStatusWithTimeout>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	da02      	bge.n	800ddbe <SD_write+0x2a>
  {
    return res;
 800ddb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ddbc:	e02e      	b.n	800de1c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ddbe:	683a      	ldr	r2, [r7, #0]
 800ddc0:	6879      	ldr	r1, [r7, #4]
 800ddc2:	68b8      	ldr	r0, [r7, #8]
 800ddc4:	f7ff fe7c 	bl	800dac0 <BSP_SD_WriteBlocks_DMA>
 800ddc8:	4603      	mov	r3, r0
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d124      	bne.n	800de18 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800ddce:	4b15      	ldr	r3, [pc, #84]	@ (800de24 <SD_write+0x90>)
 800ddd0:	6819      	ldr	r1, [r3, #0]
 800ddd2:	f107 0314 	add.w	r3, r7, #20
 800ddd6:	f247 5230 	movw	r2, #30000	@ 0x7530
 800ddda:	4618      	mov	r0, r3
 800dddc:	f002 fd32 	bl	8010844 <osMessageGet>

    if (event.status == osEventMessage)
 800dde0:	697b      	ldr	r3, [r7, #20]
 800dde2:	2b10      	cmp	r3, #16
 800dde4:	d118      	bne.n	800de18 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d115      	bne.n	800de18 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800ddec:	f002 fc52 	bl	8010694 <osKernelSysTick>
 800ddf0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800ddf2:	e008      	b.n	800de06 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ddf4:	f7ff fe7e 	bl	800daf4 <BSP_SD_GetCardState>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d103      	bne.n	800de06 <SD_write+0x72>
          {
            res = RES_OK;
 800ddfe:	2300      	movs	r3, #0
 800de00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800de04:	e008      	b.n	800de18 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800de06:	f002 fc45 	bl	8010694 <osKernelSysTick>
 800de0a:	4602      	mov	r2, r0
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	1ad3      	subs	r3, r2, r3
 800de10:	f247 522f 	movw	r2, #29999	@ 0x752f
 800de14:	4293      	cmp	r3, r2
 800de16:	d9ed      	bls.n	800ddf4 <SD_write+0x60>
    }

  }
#endif

  return res;
 800de18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	3728      	adds	r7, #40	@ 0x28
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	20009d90 	.word	0x20009d90

0800de28 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b08c      	sub	sp, #48	@ 0x30
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	4603      	mov	r3, r0
 800de30:	603a      	str	r2, [r7, #0]
 800de32:	71fb      	strb	r3, [r7, #7]
 800de34:	460b      	mov	r3, r1
 800de36:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800de38:	2301      	movs	r3, #1
 800de3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800de3e:	4b25      	ldr	r3, [pc, #148]	@ (800ded4 <SD_ioctl+0xac>)
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	b2db      	uxtb	r3, r3
 800de44:	f003 0301 	and.w	r3, r3, #1
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d001      	beq.n	800de50 <SD_ioctl+0x28>
 800de4c:	2303      	movs	r3, #3
 800de4e:	e03c      	b.n	800deca <SD_ioctl+0xa2>

  switch (cmd)
 800de50:	79bb      	ldrb	r3, [r7, #6]
 800de52:	2b03      	cmp	r3, #3
 800de54:	d834      	bhi.n	800dec0 <SD_ioctl+0x98>
 800de56:	a201      	add	r2, pc, #4	@ (adr r2, 800de5c <SD_ioctl+0x34>)
 800de58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de5c:	0800de6d 	.word	0x0800de6d
 800de60:	0800de75 	.word	0x0800de75
 800de64:	0800de8d 	.word	0x0800de8d
 800de68:	0800dea7 	.word	0x0800dea7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800de6c:	2300      	movs	r3, #0
 800de6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800de72:	e028      	b.n	800dec6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800de74:	f107 030c 	add.w	r3, r7, #12
 800de78:	4618      	mov	r0, r3
 800de7a:	f7ff fe4b 	bl	800db14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800de7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800de84:	2300      	movs	r3, #0
 800de86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800de8a:	e01c      	b.n	800dec6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800de8c:	f107 030c 	add.w	r3, r7, #12
 800de90:	4618      	mov	r0, r3
 800de92:	f7ff fe3f 	bl	800db14 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800de96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de98:	b29a      	uxth	r2, r3
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800de9e:	2300      	movs	r3, #0
 800dea0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800dea4:	e00f      	b.n	800dec6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dea6:	f107 030c 	add.w	r3, r7, #12
 800deaa:	4618      	mov	r0, r3
 800deac:	f7ff fe32 	bl	800db14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800deb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deb2:	0a5a      	lsrs	r2, r3, #9
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800deb8:	2300      	movs	r3, #0
 800deba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800debe:	e002      	b.n	800dec6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dec0:	2304      	movs	r3, #4
 800dec2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800dec6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800deca:	4618      	mov	r0, r3
 800decc:	3730      	adds	r7, #48	@ 0x30
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	20000035 	.word	0x20000035

0800ded8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800dedc:	4b04      	ldr	r3, [pc, #16]	@ (800def0 <BSP_SD_WriteCpltCallback+0x18>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2200      	movs	r2, #0
 800dee2:	2102      	movs	r1, #2
 800dee4:	4618      	mov	r0, r3
 800dee6:	f002 fc6d 	bl	80107c4 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800deea:	bf00      	nop
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop
 800def0:	20009d90 	.word	0x20009d90

0800def4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800def8:	4b04      	ldr	r3, [pc, #16]	@ (800df0c <BSP_SD_ReadCpltCallback+0x18>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2200      	movs	r2, #0
 800defe:	2101      	movs	r1, #1
 800df00:	4618      	mov	r0, r3
 800df02:	f002 fc5f 	bl	80107c4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800df06:	bf00      	nop
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	20009d90 	.word	0x20009d90

0800df10 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b084      	sub	sp, #16
 800df14:	af00      	add	r7, sp, #0
 800df16:	4603      	mov	r3, r0
 800df18:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800df1a:	79fb      	ldrb	r3, [r7, #7]
 800df1c:	4a08      	ldr	r2, [pc, #32]	@ (800df40 <disk_status+0x30>)
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	4413      	add	r3, r2
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	685b      	ldr	r3, [r3, #4]
 800df26:	79fa      	ldrb	r2, [r7, #7]
 800df28:	4905      	ldr	r1, [pc, #20]	@ (800df40 <disk_status+0x30>)
 800df2a:	440a      	add	r2, r1
 800df2c:	7b12      	ldrb	r2, [r2, #12]
 800df2e:	4610      	mov	r0, r2
 800df30:	4798      	blx	r3
 800df32:	4603      	mov	r3, r0
 800df34:	73fb      	strb	r3, [r7, #15]
  return stat;
 800df36:	7bfb      	ldrb	r3, [r7, #15]
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3710      	adds	r7, #16
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}
 800df40:	20009dc0 	.word	0x20009dc0

0800df44 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	4603      	mov	r3, r0
 800df4c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800df52:	79fb      	ldrb	r3, [r7, #7]
 800df54:	4a0d      	ldr	r2, [pc, #52]	@ (800df8c <disk_initialize+0x48>)
 800df56:	5cd3      	ldrb	r3, [r2, r3]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d111      	bne.n	800df80 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800df5c:	79fb      	ldrb	r3, [r7, #7]
 800df5e:	4a0b      	ldr	r2, [pc, #44]	@ (800df8c <disk_initialize+0x48>)
 800df60:	2101      	movs	r1, #1
 800df62:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800df64:	79fb      	ldrb	r3, [r7, #7]
 800df66:	4a09      	ldr	r2, [pc, #36]	@ (800df8c <disk_initialize+0x48>)
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	4413      	add	r3, r2
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	79fa      	ldrb	r2, [r7, #7]
 800df72:	4906      	ldr	r1, [pc, #24]	@ (800df8c <disk_initialize+0x48>)
 800df74:	440a      	add	r2, r1
 800df76:	7b12      	ldrb	r2, [r2, #12]
 800df78:	4610      	mov	r0, r2
 800df7a:	4798      	blx	r3
 800df7c:	4603      	mov	r3, r0
 800df7e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800df80:	7bfb      	ldrb	r3, [r7, #15]
}
 800df82:	4618      	mov	r0, r3
 800df84:	3710      	adds	r7, #16
 800df86:	46bd      	mov	sp, r7
 800df88:	bd80      	pop	{r7, pc}
 800df8a:	bf00      	nop
 800df8c:	20009dc0 	.word	0x20009dc0

0800df90 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800df90:	b590      	push	{r4, r7, lr}
 800df92:	b087      	sub	sp, #28
 800df94:	af00      	add	r7, sp, #0
 800df96:	60b9      	str	r1, [r7, #8]
 800df98:	607a      	str	r2, [r7, #4]
 800df9a:	603b      	str	r3, [r7, #0]
 800df9c:	4603      	mov	r3, r0
 800df9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dfa0:	7bfb      	ldrb	r3, [r7, #15]
 800dfa2:	4a0a      	ldr	r2, [pc, #40]	@ (800dfcc <disk_read+0x3c>)
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	4413      	add	r3, r2
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	689c      	ldr	r4, [r3, #8]
 800dfac:	7bfb      	ldrb	r3, [r7, #15]
 800dfae:	4a07      	ldr	r2, [pc, #28]	@ (800dfcc <disk_read+0x3c>)
 800dfb0:	4413      	add	r3, r2
 800dfb2:	7b18      	ldrb	r0, [r3, #12]
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	68b9      	ldr	r1, [r7, #8]
 800dfba:	47a0      	blx	r4
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	75fb      	strb	r3, [r7, #23]
  return res;
 800dfc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dfc2:	4618      	mov	r0, r3
 800dfc4:	371c      	adds	r7, #28
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd90      	pop	{r4, r7, pc}
 800dfca:	bf00      	nop
 800dfcc:	20009dc0 	.word	0x20009dc0

0800dfd0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800dfd0:	b590      	push	{r4, r7, lr}
 800dfd2:	b087      	sub	sp, #28
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	60b9      	str	r1, [r7, #8]
 800dfd8:	607a      	str	r2, [r7, #4]
 800dfda:	603b      	str	r3, [r7, #0]
 800dfdc:	4603      	mov	r3, r0
 800dfde:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800dfe0:	7bfb      	ldrb	r3, [r7, #15]
 800dfe2:	4a0a      	ldr	r2, [pc, #40]	@ (800e00c <disk_write+0x3c>)
 800dfe4:	009b      	lsls	r3, r3, #2
 800dfe6:	4413      	add	r3, r2
 800dfe8:	685b      	ldr	r3, [r3, #4]
 800dfea:	68dc      	ldr	r4, [r3, #12]
 800dfec:	7bfb      	ldrb	r3, [r7, #15]
 800dfee:	4a07      	ldr	r2, [pc, #28]	@ (800e00c <disk_write+0x3c>)
 800dff0:	4413      	add	r3, r2
 800dff2:	7b18      	ldrb	r0, [r3, #12]
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	68b9      	ldr	r1, [r7, #8]
 800dffa:	47a0      	blx	r4
 800dffc:	4603      	mov	r3, r0
 800dffe:	75fb      	strb	r3, [r7, #23]
  return res;
 800e000:	7dfb      	ldrb	r3, [r7, #23]
}
 800e002:	4618      	mov	r0, r3
 800e004:	371c      	adds	r7, #28
 800e006:	46bd      	mov	sp, r7
 800e008:	bd90      	pop	{r4, r7, pc}
 800e00a:	bf00      	nop
 800e00c:	20009dc0 	.word	0x20009dc0

0800e010 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b084      	sub	sp, #16
 800e014:	af00      	add	r7, sp, #0
 800e016:	4603      	mov	r3, r0
 800e018:	603a      	str	r2, [r7, #0]
 800e01a:	71fb      	strb	r3, [r7, #7]
 800e01c:	460b      	mov	r3, r1
 800e01e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e020:	79fb      	ldrb	r3, [r7, #7]
 800e022:	4a09      	ldr	r2, [pc, #36]	@ (800e048 <disk_ioctl+0x38>)
 800e024:	009b      	lsls	r3, r3, #2
 800e026:	4413      	add	r3, r2
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	79fa      	ldrb	r2, [r7, #7]
 800e02e:	4906      	ldr	r1, [pc, #24]	@ (800e048 <disk_ioctl+0x38>)
 800e030:	440a      	add	r2, r1
 800e032:	7b10      	ldrb	r0, [r2, #12]
 800e034:	79b9      	ldrb	r1, [r7, #6]
 800e036:	683a      	ldr	r2, [r7, #0]
 800e038:	4798      	blx	r3
 800e03a:	4603      	mov	r3, r0
 800e03c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e03e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e040:	4618      	mov	r0, r3
 800e042:	3710      	adds	r7, #16
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	20009dc0 	.word	0x20009dc0

0800e04c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e04c:	b480      	push	{r7}
 800e04e:	b085      	sub	sp, #20
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	3301      	adds	r3, #1
 800e058:	781b      	ldrb	r3, [r3, #0]
 800e05a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e05c:	89fb      	ldrh	r3, [r7, #14]
 800e05e:	021b      	lsls	r3, r3, #8
 800e060:	b21a      	sxth	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	781b      	ldrb	r3, [r3, #0]
 800e066:	b21b      	sxth	r3, r3
 800e068:	4313      	orrs	r3, r2
 800e06a:	b21b      	sxth	r3, r3
 800e06c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e06e:	89fb      	ldrh	r3, [r7, #14]
}
 800e070:	4618      	mov	r0, r3
 800e072:	3714      	adds	r7, #20
 800e074:	46bd      	mov	sp, r7
 800e076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e07a:	4770      	bx	lr

0800e07c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	3303      	adds	r3, #3
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	021b      	lsls	r3, r3, #8
 800e090:	687a      	ldr	r2, [r7, #4]
 800e092:	3202      	adds	r2, #2
 800e094:	7812      	ldrb	r2, [r2, #0]
 800e096:	4313      	orrs	r3, r2
 800e098:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	021b      	lsls	r3, r3, #8
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	3201      	adds	r2, #1
 800e0a2:	7812      	ldrb	r2, [r2, #0]
 800e0a4:	4313      	orrs	r3, r2
 800e0a6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	021b      	lsls	r3, r3, #8
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	7812      	ldrb	r2, [r2, #0]
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	60fb      	str	r3, [r7, #12]
	return rv;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
}
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	3714      	adds	r7, #20
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c0:	4770      	bx	lr

0800e0c2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e0c2:	b480      	push	{r7}
 800e0c4:	b083      	sub	sp, #12
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
 800e0ca:	460b      	mov	r3, r1
 800e0cc:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	1c5a      	adds	r2, r3, #1
 800e0d2:	607a      	str	r2, [r7, #4]
 800e0d4:	887a      	ldrh	r2, [r7, #2]
 800e0d6:	b2d2      	uxtb	r2, r2
 800e0d8:	701a      	strb	r2, [r3, #0]
 800e0da:	887b      	ldrh	r3, [r7, #2]
 800e0dc:	0a1b      	lsrs	r3, r3, #8
 800e0de:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	1c5a      	adds	r2, r3, #1
 800e0e4:	607a      	str	r2, [r7, #4]
 800e0e6:	887a      	ldrh	r2, [r7, #2]
 800e0e8:	b2d2      	uxtb	r2, r2
 800e0ea:	701a      	strb	r2, [r3, #0]
}
 800e0ec:	bf00      	nop
 800e0ee:	370c      	adds	r7, #12
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f6:	4770      	bx	lr

0800e0f8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
 800e100:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	1c5a      	adds	r2, r3, #1
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	683a      	ldr	r2, [r7, #0]
 800e10a:	b2d2      	uxtb	r2, r2
 800e10c:	701a      	strb	r2, [r3, #0]
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	0a1b      	lsrs	r3, r3, #8
 800e112:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	1c5a      	adds	r2, r3, #1
 800e118:	607a      	str	r2, [r7, #4]
 800e11a:	683a      	ldr	r2, [r7, #0]
 800e11c:	b2d2      	uxtb	r2, r2
 800e11e:	701a      	strb	r2, [r3, #0]
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	0a1b      	lsrs	r3, r3, #8
 800e124:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	1c5a      	adds	r2, r3, #1
 800e12a:	607a      	str	r2, [r7, #4]
 800e12c:	683a      	ldr	r2, [r7, #0]
 800e12e:	b2d2      	uxtb	r2, r2
 800e130:	701a      	strb	r2, [r3, #0]
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	0a1b      	lsrs	r3, r3, #8
 800e136:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	1c5a      	adds	r2, r3, #1
 800e13c:	607a      	str	r2, [r7, #4]
 800e13e:	683a      	ldr	r2, [r7, #0]
 800e140:	b2d2      	uxtb	r2, r2
 800e142:	701a      	strb	r2, [r3, #0]
}
 800e144:	bf00      	nop
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e150:	b480      	push	{r7}
 800e152:	b087      	sub	sp, #28
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d00d      	beq.n	800e186 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e16a:	693a      	ldr	r2, [r7, #16]
 800e16c:	1c53      	adds	r3, r2, #1
 800e16e:	613b      	str	r3, [r7, #16]
 800e170:	697b      	ldr	r3, [r7, #20]
 800e172:	1c59      	adds	r1, r3, #1
 800e174:	6179      	str	r1, [r7, #20]
 800e176:	7812      	ldrb	r2, [r2, #0]
 800e178:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	3b01      	subs	r3, #1
 800e17e:	607b      	str	r3, [r7, #4]
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d1f1      	bne.n	800e16a <mem_cpy+0x1a>
	}
}
 800e186:	bf00      	nop
 800e188:	371c      	adds	r7, #28
 800e18a:	46bd      	mov	sp, r7
 800e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e190:	4770      	bx	lr

0800e192 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e192:	b480      	push	{r7}
 800e194:	b087      	sub	sp, #28
 800e196:	af00      	add	r7, sp, #0
 800e198:	60f8      	str	r0, [r7, #12]
 800e19a:	60b9      	str	r1, [r7, #8]
 800e19c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	1c5a      	adds	r2, r3, #1
 800e1a6:	617a      	str	r2, [r7, #20]
 800e1a8:	68ba      	ldr	r2, [r7, #8]
 800e1aa:	b2d2      	uxtb	r2, r2
 800e1ac:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	3b01      	subs	r3, #1
 800e1b2:	607b      	str	r3, [r7, #4]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d1f3      	bne.n	800e1a2 <mem_set+0x10>
}
 800e1ba:	bf00      	nop
 800e1bc:	bf00      	nop
 800e1be:	371c      	adds	r7, #28
 800e1c0:	46bd      	mov	sp, r7
 800e1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c6:	4770      	bx	lr

0800e1c8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e1c8:	b480      	push	{r7}
 800e1ca:	b089      	sub	sp, #36	@ 0x24
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	60f8      	str	r0, [r7, #12]
 800e1d0:	60b9      	str	r1, [r7, #8]
 800e1d2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	61fb      	str	r3, [r7, #28]
 800e1d8:	68bb      	ldr	r3, [r7, #8]
 800e1da:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	1c5a      	adds	r2, r3, #1
 800e1e4:	61fa      	str	r2, [r7, #28]
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	69bb      	ldr	r3, [r7, #24]
 800e1ec:	1c5a      	adds	r2, r3, #1
 800e1ee:	61ba      	str	r2, [r7, #24]
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	1acb      	subs	r3, r1, r3
 800e1f4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	3b01      	subs	r3, #1
 800e1fa:	607b      	str	r3, [r7, #4]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d002      	beq.n	800e208 <mem_cmp+0x40>
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	2b00      	cmp	r3, #0
 800e206:	d0eb      	beq.n	800e1e0 <mem_cmp+0x18>

	return r;
 800e208:	697b      	ldr	r3, [r7, #20]
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3724      	adds	r7, #36	@ 0x24
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr

0800e216 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e216:	b480      	push	{r7}
 800e218:	b083      	sub	sp, #12
 800e21a:	af00      	add	r7, sp, #0
 800e21c:	6078      	str	r0, [r7, #4]
 800e21e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e220:	e002      	b.n	800e228 <chk_chr+0x12>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	3301      	adds	r3, #1
 800e226:	607b      	str	r3, [r7, #4]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d005      	beq.n	800e23c <chk_chr+0x26>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	781b      	ldrb	r3, [r3, #0]
 800e234:	461a      	mov	r2, r3
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	4293      	cmp	r3, r2
 800e23a:	d1f2      	bne.n	800e222 <chk_chr+0xc>
	return *str;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	781b      	ldrb	r3, [r3, #0]
}
 800e240:	4618      	mov	r0, r3
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b085      	sub	sp, #20
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e256:	2300      	movs	r3, #0
 800e258:	60bb      	str	r3, [r7, #8]
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	60fb      	str	r3, [r7, #12]
 800e25e:	e029      	b.n	800e2b4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e260:	4a27      	ldr	r2, [pc, #156]	@ (800e300 <chk_lock+0xb4>)
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	011b      	lsls	r3, r3, #4
 800e266:	4413      	add	r3, r2
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d01d      	beq.n	800e2aa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e26e:	4a24      	ldr	r2, [pc, #144]	@ (800e300 <chk_lock+0xb4>)
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	011b      	lsls	r3, r3, #4
 800e274:	4413      	add	r3, r2
 800e276:	681a      	ldr	r2, [r3, #0]
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d116      	bne.n	800e2ae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e280:	4a1f      	ldr	r2, [pc, #124]	@ (800e300 <chk_lock+0xb4>)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	011b      	lsls	r3, r3, #4
 800e286:	4413      	add	r3, r2
 800e288:	3304      	adds	r3, #4
 800e28a:	681a      	ldr	r2, [r3, #0]
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e290:	429a      	cmp	r2, r3
 800e292:	d10c      	bne.n	800e2ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e294:	4a1a      	ldr	r2, [pc, #104]	@ (800e300 <chk_lock+0xb4>)
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	011b      	lsls	r3, r3, #4
 800e29a:	4413      	add	r3, r2
 800e29c:	3308      	adds	r3, #8
 800e29e:	681a      	ldr	r2, [r3, #0]
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e2a4:	429a      	cmp	r2, r3
 800e2a6:	d102      	bne.n	800e2ae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e2a8:	e007      	b.n	800e2ba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	3301      	adds	r3, #1
 800e2b2:	60fb      	str	r3, [r7, #12]
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d9d2      	bls.n	800e260 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	2b02      	cmp	r3, #2
 800e2be:	d109      	bne.n	800e2d4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d102      	bne.n	800e2cc <chk_lock+0x80>
 800e2c6:	683b      	ldr	r3, [r7, #0]
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d101      	bne.n	800e2d0 <chk_lock+0x84>
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	e010      	b.n	800e2f2 <chk_lock+0xa6>
 800e2d0:	2312      	movs	r3, #18
 800e2d2:	e00e      	b.n	800e2f2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d108      	bne.n	800e2ec <chk_lock+0xa0>
 800e2da:	4a09      	ldr	r2, [pc, #36]	@ (800e300 <chk_lock+0xb4>)
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	011b      	lsls	r3, r3, #4
 800e2e0:	4413      	add	r3, r2
 800e2e2:	330c      	adds	r3, #12
 800e2e4:	881b      	ldrh	r3, [r3, #0]
 800e2e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e2ea:	d101      	bne.n	800e2f0 <chk_lock+0xa4>
 800e2ec:	2310      	movs	r3, #16
 800e2ee:	e000      	b.n	800e2f2 <chk_lock+0xa6>
 800e2f0:	2300      	movs	r3, #0
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	3714      	adds	r7, #20
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	20009da0 	.word	0x20009da0

0800e304 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e30a:	2300      	movs	r3, #0
 800e30c:	607b      	str	r3, [r7, #4]
 800e30e:	e002      	b.n	800e316 <enq_lock+0x12>
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	3301      	adds	r3, #1
 800e314:	607b      	str	r3, [r7, #4]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b01      	cmp	r3, #1
 800e31a:	d806      	bhi.n	800e32a <enq_lock+0x26>
 800e31c:	4a09      	ldr	r2, [pc, #36]	@ (800e344 <enq_lock+0x40>)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	011b      	lsls	r3, r3, #4
 800e322:	4413      	add	r3, r2
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1f2      	bne.n	800e310 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2b02      	cmp	r3, #2
 800e32e:	bf14      	ite	ne
 800e330:	2301      	movne	r3, #1
 800e332:	2300      	moveq	r3, #0
 800e334:	b2db      	uxtb	r3, r3
}
 800e336:	4618      	mov	r0, r3
 800e338:	370c      	adds	r7, #12
 800e33a:	46bd      	mov	sp, r7
 800e33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e340:	4770      	bx	lr
 800e342:	bf00      	nop
 800e344:	20009da0 	.word	0x20009da0

0800e348 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e348:	b480      	push	{r7}
 800e34a:	b085      	sub	sp, #20
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
 800e350:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e352:	2300      	movs	r3, #0
 800e354:	60fb      	str	r3, [r7, #12]
 800e356:	e01f      	b.n	800e398 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e358:	4a41      	ldr	r2, [pc, #260]	@ (800e460 <inc_lock+0x118>)
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	011b      	lsls	r3, r3, #4
 800e35e:	4413      	add	r3, r2
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	429a      	cmp	r2, r3
 800e368:	d113      	bne.n	800e392 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e36a:	4a3d      	ldr	r2, [pc, #244]	@ (800e460 <inc_lock+0x118>)
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	011b      	lsls	r3, r3, #4
 800e370:	4413      	add	r3, r2
 800e372:	3304      	adds	r3, #4
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d109      	bne.n	800e392 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e37e:	4a38      	ldr	r2, [pc, #224]	@ (800e460 <inc_lock+0x118>)
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	011b      	lsls	r3, r3, #4
 800e384:	4413      	add	r3, r2
 800e386:	3308      	adds	r3, #8
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e38e:	429a      	cmp	r2, r3
 800e390:	d006      	beq.n	800e3a0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	3301      	adds	r3, #1
 800e396:	60fb      	str	r3, [r7, #12]
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d9dc      	bls.n	800e358 <inc_lock+0x10>
 800e39e:	e000      	b.n	800e3a2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e3a0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2b02      	cmp	r3, #2
 800e3a6:	d132      	bne.n	800e40e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e3a8:	2300      	movs	r3, #0
 800e3aa:	60fb      	str	r3, [r7, #12]
 800e3ac:	e002      	b.n	800e3b4 <inc_lock+0x6c>
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	60fb      	str	r3, [r7, #12]
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d806      	bhi.n	800e3c8 <inc_lock+0x80>
 800e3ba:	4a29      	ldr	r2, [pc, #164]	@ (800e460 <inc_lock+0x118>)
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	011b      	lsls	r3, r3, #4
 800e3c0:	4413      	add	r3, r2
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d1f2      	bne.n	800e3ae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	2b02      	cmp	r3, #2
 800e3cc:	d101      	bne.n	800e3d2 <inc_lock+0x8a>
 800e3ce:	2300      	movs	r3, #0
 800e3d0:	e040      	b.n	800e454 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	4922      	ldr	r1, [pc, #136]	@ (800e460 <inc_lock+0x118>)
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	011b      	lsls	r3, r3, #4
 800e3dc:	440b      	add	r3, r1
 800e3de:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	689a      	ldr	r2, [r3, #8]
 800e3e4:	491e      	ldr	r1, [pc, #120]	@ (800e460 <inc_lock+0x118>)
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	011b      	lsls	r3, r3, #4
 800e3ea:	440b      	add	r3, r1
 800e3ec:	3304      	adds	r3, #4
 800e3ee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	695a      	ldr	r2, [r3, #20]
 800e3f4:	491a      	ldr	r1, [pc, #104]	@ (800e460 <inc_lock+0x118>)
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	011b      	lsls	r3, r3, #4
 800e3fa:	440b      	add	r3, r1
 800e3fc:	3308      	adds	r3, #8
 800e3fe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e400:	4a17      	ldr	r2, [pc, #92]	@ (800e460 <inc_lock+0x118>)
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	011b      	lsls	r3, r3, #4
 800e406:	4413      	add	r3, r2
 800e408:	330c      	adds	r3, #12
 800e40a:	2200      	movs	r2, #0
 800e40c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	2b00      	cmp	r3, #0
 800e412:	d009      	beq.n	800e428 <inc_lock+0xe0>
 800e414:	4a12      	ldr	r2, [pc, #72]	@ (800e460 <inc_lock+0x118>)
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	011b      	lsls	r3, r3, #4
 800e41a:	4413      	add	r3, r2
 800e41c:	330c      	adds	r3, #12
 800e41e:	881b      	ldrh	r3, [r3, #0]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d001      	beq.n	800e428 <inc_lock+0xe0>
 800e424:	2300      	movs	r3, #0
 800e426:	e015      	b.n	800e454 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d108      	bne.n	800e440 <inc_lock+0xf8>
 800e42e:	4a0c      	ldr	r2, [pc, #48]	@ (800e460 <inc_lock+0x118>)
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	011b      	lsls	r3, r3, #4
 800e434:	4413      	add	r3, r2
 800e436:	330c      	adds	r3, #12
 800e438:	881b      	ldrh	r3, [r3, #0]
 800e43a:	3301      	adds	r3, #1
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	e001      	b.n	800e444 <inc_lock+0xfc>
 800e440:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e444:	4906      	ldr	r1, [pc, #24]	@ (800e460 <inc_lock+0x118>)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	011b      	lsls	r3, r3, #4
 800e44a:	440b      	add	r3, r1
 800e44c:	330c      	adds	r3, #12
 800e44e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	3301      	adds	r3, #1
}
 800e454:	4618      	mov	r0, r3
 800e456:	3714      	adds	r7, #20
 800e458:	46bd      	mov	sp, r7
 800e45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45e:	4770      	bx	lr
 800e460:	20009da0 	.word	0x20009da0

0800e464 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e464:	b480      	push	{r7}
 800e466:	b085      	sub	sp, #20
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	3b01      	subs	r3, #1
 800e470:	607b      	str	r3, [r7, #4]
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2b01      	cmp	r3, #1
 800e476:	d825      	bhi.n	800e4c4 <dec_lock+0x60>
		n = Files[i].ctr;
 800e478:	4a17      	ldr	r2, [pc, #92]	@ (800e4d8 <dec_lock+0x74>)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	011b      	lsls	r3, r3, #4
 800e47e:	4413      	add	r3, r2
 800e480:	330c      	adds	r3, #12
 800e482:	881b      	ldrh	r3, [r3, #0]
 800e484:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e486:	89fb      	ldrh	r3, [r7, #14]
 800e488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e48c:	d101      	bne.n	800e492 <dec_lock+0x2e>
 800e48e:	2300      	movs	r3, #0
 800e490:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e492:	89fb      	ldrh	r3, [r7, #14]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d002      	beq.n	800e49e <dec_lock+0x3a>
 800e498:	89fb      	ldrh	r3, [r7, #14]
 800e49a:	3b01      	subs	r3, #1
 800e49c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e49e:	4a0e      	ldr	r2, [pc, #56]	@ (800e4d8 <dec_lock+0x74>)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	011b      	lsls	r3, r3, #4
 800e4a4:	4413      	add	r3, r2
 800e4a6:	330c      	adds	r3, #12
 800e4a8:	89fa      	ldrh	r2, [r7, #14]
 800e4aa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e4ac:	89fb      	ldrh	r3, [r7, #14]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d105      	bne.n	800e4be <dec_lock+0x5a>
 800e4b2:	4a09      	ldr	r2, [pc, #36]	@ (800e4d8 <dec_lock+0x74>)
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	011b      	lsls	r3, r3, #4
 800e4b8:	4413      	add	r3, r2
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	737b      	strb	r3, [r7, #13]
 800e4c2:	e001      	b.n	800e4c8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e4c4:	2302      	movs	r3, #2
 800e4c6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e4c8:	7b7b      	ldrb	r3, [r7, #13]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3714      	adds	r7, #20
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d4:	4770      	bx	lr
 800e4d6:	bf00      	nop
 800e4d8:	20009da0 	.word	0x20009da0

0800e4dc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b085      	sub	sp, #20
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	60fb      	str	r3, [r7, #12]
 800e4e8:	e010      	b.n	800e50c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e4ea:	4a0d      	ldr	r2, [pc, #52]	@ (800e520 <clear_lock+0x44>)
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	011b      	lsls	r3, r3, #4
 800e4f0:	4413      	add	r3, r2
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	687a      	ldr	r2, [r7, #4]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	d105      	bne.n	800e506 <clear_lock+0x2a>
 800e4fa:	4a09      	ldr	r2, [pc, #36]	@ (800e520 <clear_lock+0x44>)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	011b      	lsls	r3, r3, #4
 800e500:	4413      	add	r3, r2
 800e502:	2200      	movs	r2, #0
 800e504:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	3301      	adds	r3, #1
 800e50a:	60fb      	str	r3, [r7, #12]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d9eb      	bls.n	800e4ea <clear_lock+0xe>
	}
}
 800e512:	bf00      	nop
 800e514:	bf00      	nop
 800e516:	3714      	adds	r7, #20
 800e518:	46bd      	mov	sp, r7
 800e51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51e:	4770      	bx	lr
 800e520:	20009da0 	.word	0x20009da0

0800e524 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b086      	sub	sp, #24
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e52c:	2300      	movs	r3, #0
 800e52e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	78db      	ldrb	r3, [r3, #3]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d034      	beq.n	800e5a2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e53c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	7858      	ldrb	r0, [r3, #1]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e548:	2301      	movs	r3, #1
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	f7ff fd40 	bl	800dfd0 <disk_write>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	d002      	beq.n	800e55c <sync_window+0x38>
			res = FR_DISK_ERR;
 800e556:	2301      	movs	r3, #1
 800e558:	73fb      	strb	r3, [r7, #15]
 800e55a:	e022      	b.n	800e5a2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	2200      	movs	r2, #0
 800e560:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6a1b      	ldr	r3, [r3, #32]
 800e566:	697a      	ldr	r2, [r7, #20]
 800e568:	1ad2      	subs	r2, r2, r3
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	699b      	ldr	r3, [r3, #24]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d217      	bcs.n	800e5a2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	789b      	ldrb	r3, [r3, #2]
 800e576:	613b      	str	r3, [r7, #16]
 800e578:	e010      	b.n	800e59c <sync_window+0x78>
					wsect += fs->fsize;
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	699b      	ldr	r3, [r3, #24]
 800e57e:	697a      	ldr	r2, [r7, #20]
 800e580:	4413      	add	r3, r2
 800e582:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	7858      	ldrb	r0, [r3, #1]
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e58e:	2301      	movs	r3, #1
 800e590:	697a      	ldr	r2, [r7, #20]
 800e592:	f7ff fd1d 	bl	800dfd0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e596:	693b      	ldr	r3, [r7, #16]
 800e598:	3b01      	subs	r3, #1
 800e59a:	613b      	str	r3, [r7, #16]
 800e59c:	693b      	ldr	r3, [r7, #16]
 800e59e:	2b01      	cmp	r3, #1
 800e5a0:	d8eb      	bhi.n	800e57a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	3718      	adds	r7, #24
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd80      	pop	{r7, pc}

0800e5ac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5be:	683a      	ldr	r2, [r7, #0]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d01b      	beq.n	800e5fc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e5c4:	6878      	ldr	r0, [r7, #4]
 800e5c6:	f7ff ffad 	bl	800e524 <sync_window>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e5ce:	7bfb      	ldrb	r3, [r7, #15]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d113      	bne.n	800e5fc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	7858      	ldrb	r0, [r3, #1]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e5de:	2301      	movs	r3, #1
 800e5e0:	683a      	ldr	r2, [r7, #0]
 800e5e2:	f7ff fcd5 	bl	800df90 <disk_read>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d004      	beq.n	800e5f6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e5f0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	683a      	ldr	r2, [r7, #0]
 800e5fa:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800e5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fe:	4618      	mov	r0, r3
 800e600:	3710      	adds	r7, #16
 800e602:	46bd      	mov	sp, r7
 800e604:	bd80      	pop	{r7, pc}
	...

0800e608 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e610:	6878      	ldr	r0, [r7, #4]
 800e612:	f7ff ff87 	bl	800e524 <sync_window>
 800e616:	4603      	mov	r3, r0
 800e618:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e61a:	7bfb      	ldrb	r3, [r7, #15]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d158      	bne.n	800e6d2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	781b      	ldrb	r3, [r3, #0]
 800e624:	2b03      	cmp	r3, #3
 800e626:	d148      	bne.n	800e6ba <sync_fs+0xb2>
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	791b      	ldrb	r3, [r3, #4]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d144      	bne.n	800e6ba <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	3330      	adds	r3, #48	@ 0x30
 800e634:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e638:	2100      	movs	r1, #0
 800e63a:	4618      	mov	r0, r3
 800e63c:	f7ff fda9 	bl	800e192 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	3330      	adds	r3, #48	@ 0x30
 800e644:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e648:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800e64c:	4618      	mov	r0, r3
 800e64e:	f7ff fd38 	bl	800e0c2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	3330      	adds	r3, #48	@ 0x30
 800e656:	4921      	ldr	r1, [pc, #132]	@ (800e6dc <sync_fs+0xd4>)
 800e658:	4618      	mov	r0, r3
 800e65a:	f7ff fd4d 	bl	800e0f8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	3330      	adds	r3, #48	@ 0x30
 800e662:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e666:	491e      	ldr	r1, [pc, #120]	@ (800e6e0 <sync_fs+0xd8>)
 800e668:	4618      	mov	r0, r3
 800e66a:	f7ff fd45 	bl	800e0f8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	3330      	adds	r3, #48	@ 0x30
 800e672:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	691b      	ldr	r3, [r3, #16]
 800e67a:	4619      	mov	r1, r3
 800e67c:	4610      	mov	r0, r2
 800e67e:	f7ff fd3b 	bl	800e0f8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	3330      	adds	r3, #48	@ 0x30
 800e686:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	4619      	mov	r1, r3
 800e690:	4610      	mov	r0, r2
 800e692:	f7ff fd31 	bl	800e0f8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	69db      	ldr	r3, [r3, #28]
 800e69a:	1c5a      	adds	r2, r3, #1
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	7858      	ldrb	r0, [r3, #1]
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6ae:	2301      	movs	r3, #1
 800e6b0:	f7ff fc8e 	bl	800dfd0 <disk_write>
			fs->fsi_flag = 0;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	785b      	ldrb	r3, [r3, #1]
 800e6be:	2200      	movs	r2, #0
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7ff fca4 	bl	800e010 <disk_ioctl>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d001      	beq.n	800e6d2 <sync_fs+0xca>
 800e6ce:	2301      	movs	r3, #1
 800e6d0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	41615252 	.word	0x41615252
 800e6e0:	61417272 	.word	0x61417272

0800e6e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b083      	sub	sp, #12
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
 800e6ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	3b02      	subs	r3, #2
 800e6f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	695b      	ldr	r3, [r3, #20]
 800e6f8:	3b02      	subs	r3, #2
 800e6fa:	683a      	ldr	r2, [r7, #0]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d301      	bcc.n	800e704 <clust2sect+0x20>
 800e700:	2300      	movs	r3, #0
 800e702:	e008      	b.n	800e716 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	895b      	ldrh	r3, [r3, #10]
 800e708:	461a      	mov	r2, r3
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	fb03 f202 	mul.w	r2, r3, r2
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e714:	4413      	add	r3, r2
}
 800e716:	4618      	mov	r0, r3
 800e718:	370c      	adds	r7, #12
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr

0800e722 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e722:	b580      	push	{r7, lr}
 800e724:	b086      	sub	sp, #24
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
 800e72a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	2b01      	cmp	r3, #1
 800e736:	d904      	bls.n	800e742 <get_fat+0x20>
 800e738:	693b      	ldr	r3, [r7, #16]
 800e73a:	695b      	ldr	r3, [r3, #20]
 800e73c:	683a      	ldr	r2, [r7, #0]
 800e73e:	429a      	cmp	r2, r3
 800e740:	d302      	bcc.n	800e748 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e742:	2301      	movs	r3, #1
 800e744:	617b      	str	r3, [r7, #20]
 800e746:	e08e      	b.n	800e866 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e748:	f04f 33ff 	mov.w	r3, #4294967295
 800e74c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	2b03      	cmp	r3, #3
 800e754:	d061      	beq.n	800e81a <get_fat+0xf8>
 800e756:	2b03      	cmp	r3, #3
 800e758:	dc7b      	bgt.n	800e852 <get_fat+0x130>
 800e75a:	2b01      	cmp	r3, #1
 800e75c:	d002      	beq.n	800e764 <get_fat+0x42>
 800e75e:	2b02      	cmp	r3, #2
 800e760:	d041      	beq.n	800e7e6 <get_fat+0xc4>
 800e762:	e076      	b.n	800e852 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	60fb      	str	r3, [r7, #12]
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	085b      	lsrs	r3, r3, #1
 800e76c:	68fa      	ldr	r2, [r7, #12]
 800e76e:	4413      	add	r3, r2
 800e770:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e772:	693b      	ldr	r3, [r7, #16]
 800e774:	6a1a      	ldr	r2, [r3, #32]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	0a5b      	lsrs	r3, r3, #9
 800e77a:	4413      	add	r3, r2
 800e77c:	4619      	mov	r1, r3
 800e77e:	6938      	ldr	r0, [r7, #16]
 800e780:	f7ff ff14 	bl	800e5ac <move_window>
 800e784:	4603      	mov	r3, r0
 800e786:	2b00      	cmp	r3, #0
 800e788:	d166      	bne.n	800e858 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	1c5a      	adds	r2, r3, #1
 800e78e:	60fa      	str	r2, [r7, #12]
 800e790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e794:	693a      	ldr	r2, [r7, #16]
 800e796:	4413      	add	r3, r2
 800e798:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e79c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e79e:	693b      	ldr	r3, [r7, #16]
 800e7a0:	6a1a      	ldr	r2, [r3, #32]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	0a5b      	lsrs	r3, r3, #9
 800e7a6:	4413      	add	r3, r2
 800e7a8:	4619      	mov	r1, r3
 800e7aa:	6938      	ldr	r0, [r7, #16]
 800e7ac:	f7ff fefe 	bl	800e5ac <move_window>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d152      	bne.n	800e85c <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7bc:	693a      	ldr	r2, [r7, #16]
 800e7be:	4413      	add	r3, r2
 800e7c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e7c4:	021b      	lsls	r3, r3, #8
 800e7c6:	68ba      	ldr	r2, [r7, #8]
 800e7c8:	4313      	orrs	r3, r2
 800e7ca:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	f003 0301 	and.w	r3, r3, #1
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d002      	beq.n	800e7dc <get_fat+0xba>
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	091b      	lsrs	r3, r3, #4
 800e7da:	e002      	b.n	800e7e2 <get_fat+0xc0>
 800e7dc:	68bb      	ldr	r3, [r7, #8]
 800e7de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7e2:	617b      	str	r3, [r7, #20]
			break;
 800e7e4:	e03f      	b.n	800e866 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e7e6:	693b      	ldr	r3, [r7, #16]
 800e7e8:	6a1a      	ldr	r2, [r3, #32]
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	0a1b      	lsrs	r3, r3, #8
 800e7ee:	4413      	add	r3, r2
 800e7f0:	4619      	mov	r1, r3
 800e7f2:	6938      	ldr	r0, [r7, #16]
 800e7f4:	f7ff feda 	bl	800e5ac <move_window>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d130      	bne.n	800e860 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e7fe:	693b      	ldr	r3, [r7, #16]
 800e800:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	005b      	lsls	r3, r3, #1
 800e808:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e80c:	4413      	add	r3, r2
 800e80e:	4618      	mov	r0, r3
 800e810:	f7ff fc1c 	bl	800e04c <ld_word>
 800e814:	4603      	mov	r3, r0
 800e816:	617b      	str	r3, [r7, #20]
			break;
 800e818:	e025      	b.n	800e866 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e81a:	693b      	ldr	r3, [r7, #16]
 800e81c:	6a1a      	ldr	r2, [r3, #32]
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	09db      	lsrs	r3, r3, #7
 800e822:	4413      	add	r3, r2
 800e824:	4619      	mov	r1, r3
 800e826:	6938      	ldr	r0, [r7, #16]
 800e828:	f7ff fec0 	bl	800e5ac <move_window>
 800e82c:	4603      	mov	r3, r0
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d118      	bne.n	800e864 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e832:	693b      	ldr	r3, [r7, #16]
 800e834:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	009b      	lsls	r3, r3, #2
 800e83c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e840:	4413      	add	r3, r2
 800e842:	4618      	mov	r0, r3
 800e844:	f7ff fc1a 	bl	800e07c <ld_dword>
 800e848:	4603      	mov	r3, r0
 800e84a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800e84e:	617b      	str	r3, [r7, #20]
			break;
 800e850:	e009      	b.n	800e866 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e852:	2301      	movs	r3, #1
 800e854:	617b      	str	r3, [r7, #20]
 800e856:	e006      	b.n	800e866 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e858:	bf00      	nop
 800e85a:	e004      	b.n	800e866 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e85c:	bf00      	nop
 800e85e:	e002      	b.n	800e866 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e860:	bf00      	nop
 800e862:	e000      	b.n	800e866 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e864:	bf00      	nop
		}
	}

	return val;
 800e866:	697b      	ldr	r3, [r7, #20]
}
 800e868:	4618      	mov	r0, r3
 800e86a:	3718      	adds	r7, #24
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e870:	b590      	push	{r4, r7, lr}
 800e872:	b089      	sub	sp, #36	@ 0x24
 800e874:	af00      	add	r7, sp, #0
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e87c:	2302      	movs	r3, #2
 800e87e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	2b01      	cmp	r3, #1
 800e884:	f240 80d9 	bls.w	800ea3a <put_fat+0x1ca>
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	695b      	ldr	r3, [r3, #20]
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	429a      	cmp	r2, r3
 800e890:	f080 80d3 	bcs.w	800ea3a <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	2b03      	cmp	r3, #3
 800e89a:	f000 8096 	beq.w	800e9ca <put_fat+0x15a>
 800e89e:	2b03      	cmp	r3, #3
 800e8a0:	f300 80cb 	bgt.w	800ea3a <put_fat+0x1ca>
 800e8a4:	2b01      	cmp	r3, #1
 800e8a6:	d002      	beq.n	800e8ae <put_fat+0x3e>
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	d06e      	beq.n	800e98a <put_fat+0x11a>
 800e8ac:	e0c5      	b.n	800ea3a <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e8ae:	68bb      	ldr	r3, [r7, #8]
 800e8b0:	61bb      	str	r3, [r7, #24]
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	085b      	lsrs	r3, r3, #1
 800e8b6:	69ba      	ldr	r2, [r7, #24]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6a1a      	ldr	r2, [r3, #32]
 800e8c0:	69bb      	ldr	r3, [r7, #24]
 800e8c2:	0a5b      	lsrs	r3, r3, #9
 800e8c4:	4413      	add	r3, r2
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	68f8      	ldr	r0, [r7, #12]
 800e8ca:	f7ff fe6f 	bl	800e5ac <move_window>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e8d2:	7ffb      	ldrb	r3, [r7, #31]
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	f040 80a9 	bne.w	800ea2c <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e8e0:	69bb      	ldr	r3, [r7, #24]
 800e8e2:	1c59      	adds	r1, r3, #1
 800e8e4:	61b9      	str	r1, [r7, #24]
 800e8e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8ea:	4413      	add	r3, r2
 800e8ec:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e8ee:	68bb      	ldr	r3, [r7, #8]
 800e8f0:	f003 0301 	and.w	r3, r3, #1
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d00d      	beq.n	800e914 <put_fat+0xa4>
 800e8f8:	697b      	ldr	r3, [r7, #20]
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	b25b      	sxtb	r3, r3
 800e8fe:	f003 030f 	and.w	r3, r3, #15
 800e902:	b25a      	sxtb	r2, r3
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	b2db      	uxtb	r3, r3
 800e908:	011b      	lsls	r3, r3, #4
 800e90a:	b25b      	sxtb	r3, r3
 800e90c:	4313      	orrs	r3, r2
 800e90e:	b25b      	sxtb	r3, r3
 800e910:	b2db      	uxtb	r3, r3
 800e912:	e001      	b.n	800e918 <put_fat+0xa8>
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	b2db      	uxtb	r3, r3
 800e918:	697a      	ldr	r2, [r7, #20]
 800e91a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	2201      	movs	r2, #1
 800e920:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	6a1a      	ldr	r2, [r3, #32]
 800e926:	69bb      	ldr	r3, [r7, #24]
 800e928:	0a5b      	lsrs	r3, r3, #9
 800e92a:	4413      	add	r3, r2
 800e92c:	4619      	mov	r1, r3
 800e92e:	68f8      	ldr	r0, [r7, #12]
 800e930:	f7ff fe3c 	bl	800e5ac <move_window>
 800e934:	4603      	mov	r3, r0
 800e936:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e938:	7ffb      	ldrb	r3, [r7, #31]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d178      	bne.n	800ea30 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e94a:	4413      	add	r3, r2
 800e94c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e94e:	68bb      	ldr	r3, [r7, #8]
 800e950:	f003 0301 	and.w	r3, r3, #1
 800e954:	2b00      	cmp	r3, #0
 800e956:	d003      	beq.n	800e960 <put_fat+0xf0>
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	091b      	lsrs	r3, r3, #4
 800e95c:	b2db      	uxtb	r3, r3
 800e95e:	e00e      	b.n	800e97e <put_fat+0x10e>
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	b25b      	sxtb	r3, r3
 800e966:	f023 030f 	bic.w	r3, r3, #15
 800e96a:	b25a      	sxtb	r2, r3
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	0a1b      	lsrs	r3, r3, #8
 800e970:	b25b      	sxtb	r3, r3
 800e972:	f003 030f 	and.w	r3, r3, #15
 800e976:	b25b      	sxtb	r3, r3
 800e978:	4313      	orrs	r3, r2
 800e97a:	b25b      	sxtb	r3, r3
 800e97c:	b2db      	uxtb	r3, r3
 800e97e:	697a      	ldr	r2, [r7, #20]
 800e980:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2201      	movs	r2, #1
 800e986:	70da      	strb	r2, [r3, #3]
			break;
 800e988:	e057      	b.n	800ea3a <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	6a1a      	ldr	r2, [r3, #32]
 800e98e:	68bb      	ldr	r3, [r7, #8]
 800e990:	0a1b      	lsrs	r3, r3, #8
 800e992:	4413      	add	r3, r2
 800e994:	4619      	mov	r1, r3
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f7ff fe08 	bl	800e5ac <move_window>
 800e99c:	4603      	mov	r3, r0
 800e99e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e9a0:	7ffb      	ldrb	r3, [r7, #31]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d146      	bne.n	800ea34 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e9ac:	68bb      	ldr	r3, [r7, #8]
 800e9ae:	005b      	lsls	r3, r3, #1
 800e9b0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800e9b4:	4413      	add	r3, r2
 800e9b6:	687a      	ldr	r2, [r7, #4]
 800e9b8:	b292      	uxth	r2, r2
 800e9ba:	4611      	mov	r1, r2
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f7ff fb80 	bl	800e0c2 <st_word>
			fs->wflag = 1;
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2201      	movs	r2, #1
 800e9c6:	70da      	strb	r2, [r3, #3]
			break;
 800e9c8:	e037      	b.n	800ea3a <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	6a1a      	ldr	r2, [r3, #32]
 800e9ce:	68bb      	ldr	r3, [r7, #8]
 800e9d0:	09db      	lsrs	r3, r3, #7
 800e9d2:	4413      	add	r3, r2
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	68f8      	ldr	r0, [r7, #12]
 800e9d8:	f7ff fde8 	bl	800e5ac <move_window>
 800e9dc:	4603      	mov	r3, r0
 800e9de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e9e0:	7ffb      	ldrb	r3, [r7, #31]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d128      	bne.n	800ea38 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800e9fa:	4413      	add	r3, r2
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7ff fb3d 	bl	800e07c <ld_dword>
 800ea02:	4603      	mov	r3, r0
 800ea04:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800ea08:	4323      	orrs	r3, r4
 800ea0a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ea1a:	4413      	add	r3, r2
 800ea1c:	6879      	ldr	r1, [r7, #4]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7ff fb6a 	bl	800e0f8 <st_dword>
			fs->wflag = 1;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2201      	movs	r2, #1
 800ea28:	70da      	strb	r2, [r3, #3]
			break;
 800ea2a:	e006      	b.n	800ea3a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ea2c:	bf00      	nop
 800ea2e:	e004      	b.n	800ea3a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ea30:	bf00      	nop
 800ea32:	e002      	b.n	800ea3a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ea34:	bf00      	nop
 800ea36:	e000      	b.n	800ea3a <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ea38:	bf00      	nop
		}
	}
	return res;
 800ea3a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3724      	adds	r7, #36	@ 0x24
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd90      	pop	{r4, r7, pc}

0800ea44 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b088      	sub	sp, #32
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	60f8      	str	r0, [r7, #12]
 800ea4c:	60b9      	str	r1, [r7, #8]
 800ea4e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ea50:	2300      	movs	r3, #0
 800ea52:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d904      	bls.n	800ea6a <remove_chain+0x26>
 800ea60:	69bb      	ldr	r3, [r7, #24]
 800ea62:	695b      	ldr	r3, [r3, #20]
 800ea64:	68ba      	ldr	r2, [r7, #8]
 800ea66:	429a      	cmp	r2, r3
 800ea68:	d301      	bcc.n	800ea6e <remove_chain+0x2a>
 800ea6a:	2302      	movs	r3, #2
 800ea6c:	e04b      	b.n	800eb06 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d00c      	beq.n	800ea8e <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ea74:	f04f 32ff 	mov.w	r2, #4294967295
 800ea78:	6879      	ldr	r1, [r7, #4]
 800ea7a:	69b8      	ldr	r0, [r7, #24]
 800ea7c:	f7ff fef8 	bl	800e870 <put_fat>
 800ea80:	4603      	mov	r3, r0
 800ea82:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ea84:	7ffb      	ldrb	r3, [r7, #31]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d001      	beq.n	800ea8e <remove_chain+0x4a>
 800ea8a:	7ffb      	ldrb	r3, [r7, #31]
 800ea8c:	e03b      	b.n	800eb06 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ea8e:	68b9      	ldr	r1, [r7, #8]
 800ea90:	68f8      	ldr	r0, [r7, #12]
 800ea92:	f7ff fe46 	bl	800e722 <get_fat>
 800ea96:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d031      	beq.n	800eb02 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	2b01      	cmp	r3, #1
 800eaa2:	d101      	bne.n	800eaa8 <remove_chain+0x64>
 800eaa4:	2302      	movs	r3, #2
 800eaa6:	e02e      	b.n	800eb06 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800eaa8:	697b      	ldr	r3, [r7, #20]
 800eaaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaae:	d101      	bne.n	800eab4 <remove_chain+0x70>
 800eab0:	2301      	movs	r3, #1
 800eab2:	e028      	b.n	800eb06 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800eab4:	2200      	movs	r2, #0
 800eab6:	68b9      	ldr	r1, [r7, #8]
 800eab8:	69b8      	ldr	r0, [r7, #24]
 800eaba:	f7ff fed9 	bl	800e870 <put_fat>
 800eabe:	4603      	mov	r3, r0
 800eac0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800eac2:	7ffb      	ldrb	r3, [r7, #31]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d001      	beq.n	800eacc <remove_chain+0x88>
 800eac8:	7ffb      	ldrb	r3, [r7, #31]
 800eaca:	e01c      	b.n	800eb06 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800eacc:	69bb      	ldr	r3, [r7, #24]
 800eace:	691a      	ldr	r2, [r3, #16]
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	695b      	ldr	r3, [r3, #20]
 800ead4:	3b02      	subs	r3, #2
 800ead6:	429a      	cmp	r2, r3
 800ead8:	d20b      	bcs.n	800eaf2 <remove_chain+0xae>
			fs->free_clst++;
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	691b      	ldr	r3, [r3, #16]
 800eade:	1c5a      	adds	r2, r3, #1
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	791b      	ldrb	r3, [r3, #4]
 800eae8:	f043 0301 	orr.w	r3, r3, #1
 800eaec:	b2da      	uxtb	r2, r3
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800eaf2:	697b      	ldr	r3, [r7, #20]
 800eaf4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800eaf6:	69bb      	ldr	r3, [r7, #24]
 800eaf8:	695b      	ldr	r3, [r3, #20]
 800eafa:	68ba      	ldr	r2, [r7, #8]
 800eafc:	429a      	cmp	r2, r3
 800eafe:	d3c6      	bcc.n	800ea8e <remove_chain+0x4a>
 800eb00:	e000      	b.n	800eb04 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800eb02:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	3720      	adds	r7, #32
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}

0800eb0e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b088      	sub	sp, #32
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	6078      	str	r0, [r7, #4]
 800eb16:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d10d      	bne.n	800eb40 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800eb24:	693b      	ldr	r3, [r7, #16]
 800eb26:	68db      	ldr	r3, [r3, #12]
 800eb28:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d004      	beq.n	800eb3a <create_chain+0x2c>
 800eb30:	693b      	ldr	r3, [r7, #16]
 800eb32:	695b      	ldr	r3, [r3, #20]
 800eb34:	69ba      	ldr	r2, [r7, #24]
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d31b      	bcc.n	800eb72 <create_chain+0x64>
 800eb3a:	2301      	movs	r3, #1
 800eb3c:	61bb      	str	r3, [r7, #24]
 800eb3e:	e018      	b.n	800eb72 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800eb40:	6839      	ldr	r1, [r7, #0]
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7ff fded 	bl	800e722 <get_fat>
 800eb48:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	d801      	bhi.n	800eb54 <create_chain+0x46>
 800eb50:	2301      	movs	r3, #1
 800eb52:	e070      	b.n	800ec36 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb5a:	d101      	bne.n	800eb60 <create_chain+0x52>
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	e06a      	b.n	800ec36 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800eb60:	693b      	ldr	r3, [r7, #16]
 800eb62:	695b      	ldr	r3, [r3, #20]
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d201      	bcs.n	800eb6e <create_chain+0x60>
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	e063      	b.n	800ec36 <create_chain+0x128>
		scl = clst;
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800eb72:	69bb      	ldr	r3, [r7, #24]
 800eb74:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800eb76:	69fb      	ldr	r3, [r7, #28]
 800eb78:	3301      	adds	r3, #1
 800eb7a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800eb7c:	693b      	ldr	r3, [r7, #16]
 800eb7e:	695b      	ldr	r3, [r3, #20]
 800eb80:	69fa      	ldr	r2, [r7, #28]
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d307      	bcc.n	800eb96 <create_chain+0x88>
				ncl = 2;
 800eb86:	2302      	movs	r3, #2
 800eb88:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800eb8a:	69fa      	ldr	r2, [r7, #28]
 800eb8c:	69bb      	ldr	r3, [r7, #24]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d901      	bls.n	800eb96 <create_chain+0x88>
 800eb92:	2300      	movs	r3, #0
 800eb94:	e04f      	b.n	800ec36 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800eb96:	69f9      	ldr	r1, [r7, #28]
 800eb98:	6878      	ldr	r0, [r7, #4]
 800eb9a:	f7ff fdc2 	bl	800e722 <get_fat>
 800eb9e:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00e      	beq.n	800ebc4 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d003      	beq.n	800ebb4 <create_chain+0xa6>
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebb2:	d101      	bne.n	800ebb8 <create_chain+0xaa>
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	e03e      	b.n	800ec36 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ebb8:	69fa      	ldr	r2, [r7, #28]
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d1da      	bne.n	800eb76 <create_chain+0x68>
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	e038      	b.n	800ec36 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ebc4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ebc6:	f04f 32ff 	mov.w	r2, #4294967295
 800ebca:	69f9      	ldr	r1, [r7, #28]
 800ebcc:	6938      	ldr	r0, [r7, #16]
 800ebce:	f7ff fe4f 	bl	800e870 <put_fat>
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ebd6:	7dfb      	ldrb	r3, [r7, #23]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d109      	bne.n	800ebf0 <create_chain+0xe2>
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d006      	beq.n	800ebf0 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ebe2:	69fa      	ldr	r2, [r7, #28]
 800ebe4:	6839      	ldr	r1, [r7, #0]
 800ebe6:	6938      	ldr	r0, [r7, #16]
 800ebe8:	f7ff fe42 	bl	800e870 <put_fat>
 800ebec:	4603      	mov	r3, r0
 800ebee:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ebf0:	7dfb      	ldrb	r3, [r7, #23]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d116      	bne.n	800ec24 <create_chain+0x116>
		fs->last_clst = ncl;
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	69fa      	ldr	r2, [r7, #28]
 800ebfa:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	691a      	ldr	r2, [r3, #16]
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	695b      	ldr	r3, [r3, #20]
 800ec04:	3b02      	subs	r3, #2
 800ec06:	429a      	cmp	r2, r3
 800ec08:	d804      	bhi.n	800ec14 <create_chain+0x106>
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	691b      	ldr	r3, [r3, #16]
 800ec0e:	1e5a      	subs	r2, r3, #1
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	791b      	ldrb	r3, [r3, #4]
 800ec18:	f043 0301 	orr.w	r3, r3, #1
 800ec1c:	b2da      	uxtb	r2, r3
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	711a      	strb	r2, [r3, #4]
 800ec22:	e007      	b.n	800ec34 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ec24:	7dfb      	ldrb	r3, [r7, #23]
 800ec26:	2b01      	cmp	r3, #1
 800ec28:	d102      	bne.n	800ec30 <create_chain+0x122>
 800ec2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec2e:	e000      	b.n	800ec32 <create_chain+0x124>
 800ec30:	2301      	movs	r3, #1
 800ec32:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ec34:	69fb      	ldr	r3, [r7, #28]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3720      	adds	r7, #32
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}

0800ec3e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ec3e:	b480      	push	{r7}
 800ec40:	b087      	sub	sp, #28
 800ec42:	af00      	add	r7, sp, #0
 800ec44:	6078      	str	r0, [r7, #4]
 800ec46:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec52:	3304      	adds	r3, #4
 800ec54:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ec56:	683b      	ldr	r3, [r7, #0]
 800ec58:	0a5b      	lsrs	r3, r3, #9
 800ec5a:	68fa      	ldr	r2, [r7, #12]
 800ec5c:	8952      	ldrh	r2, [r2, #10]
 800ec5e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec62:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	1d1a      	adds	r2, r3, #4
 800ec68:	613a      	str	r2, [r7, #16]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d101      	bne.n	800ec78 <clmt_clust+0x3a>
 800ec74:	2300      	movs	r3, #0
 800ec76:	e010      	b.n	800ec9a <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ec78:	697a      	ldr	r2, [r7, #20]
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d307      	bcc.n	800ec90 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ec80:	697a      	ldr	r2, [r7, #20]
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	617b      	str	r3, [r7, #20]
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ec8e:	e7e9      	b.n	800ec64 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ec90:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	681a      	ldr	r2, [r3, #0]
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	4413      	add	r3, r2
}
 800ec9a:	4618      	mov	r0, r3
 800ec9c:	371c      	adds	r7, #28
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr

0800eca6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b086      	sub	sp, #24
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
 800ecae:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ecbc:	d204      	bcs.n	800ecc8 <dir_sdi+0x22>
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	f003 031f 	and.w	r3, r3, #31
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d001      	beq.n	800eccc <dir_sdi+0x26>
		return FR_INT_ERR;
 800ecc8:	2302      	movs	r3, #2
 800ecca:	e063      	b.n	800ed94 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	683a      	ldr	r2, [r7, #0]
 800ecd0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	689b      	ldr	r3, [r3, #8]
 800ecd6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d106      	bne.n	800ecec <dir_sdi+0x46>
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	781b      	ldrb	r3, [r3, #0]
 800ece2:	2b02      	cmp	r3, #2
 800ece4:	d902      	bls.n	800ecec <dir_sdi+0x46>
		clst = fs->dirbase;
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecea:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d10c      	bne.n	800ed0c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	095b      	lsrs	r3, r3, #5
 800ecf6:	693a      	ldr	r2, [r7, #16]
 800ecf8:	8912      	ldrh	r2, [r2, #8]
 800ecfa:	4293      	cmp	r3, r2
 800ecfc:	d301      	bcc.n	800ed02 <dir_sdi+0x5c>
 800ecfe:	2302      	movs	r3, #2
 800ed00:	e048      	b.n	800ed94 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	61da      	str	r2, [r3, #28]
 800ed0a:	e029      	b.n	800ed60 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ed0c:	693b      	ldr	r3, [r7, #16]
 800ed0e:	895b      	ldrh	r3, [r3, #10]
 800ed10:	025b      	lsls	r3, r3, #9
 800ed12:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ed14:	e019      	b.n	800ed4a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	6979      	ldr	r1, [r7, #20]
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	f7ff fd01 	bl	800e722 <get_fat>
 800ed20:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed22:	697b      	ldr	r3, [r7, #20]
 800ed24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed28:	d101      	bne.n	800ed2e <dir_sdi+0x88>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	e032      	b.n	800ed94 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d904      	bls.n	800ed3e <dir_sdi+0x98>
 800ed34:	693b      	ldr	r3, [r7, #16]
 800ed36:	695b      	ldr	r3, [r3, #20]
 800ed38:	697a      	ldr	r2, [r7, #20]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d301      	bcc.n	800ed42 <dir_sdi+0x9c>
 800ed3e:	2302      	movs	r3, #2
 800ed40:	e028      	b.n	800ed94 <dir_sdi+0xee>
			ofs -= csz;
 800ed42:	683a      	ldr	r2, [r7, #0]
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	1ad3      	subs	r3, r2, r3
 800ed48:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ed4a:	683a      	ldr	r2, [r7, #0]
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d2e1      	bcs.n	800ed16 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ed52:	6979      	ldr	r1, [r7, #20]
 800ed54:	6938      	ldr	r0, [r7, #16]
 800ed56:	f7ff fcc5 	bl	800e6e4 <clust2sect>
 800ed5a:	4602      	mov	r2, r0
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	697a      	ldr	r2, [r7, #20]
 800ed64:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	69db      	ldr	r3, [r3, #28]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d101      	bne.n	800ed72 <dir_sdi+0xcc>
 800ed6e:	2302      	movs	r3, #2
 800ed70:	e010      	b.n	800ed94 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	69da      	ldr	r2, [r3, #28]
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	0a5b      	lsrs	r3, r3, #9
 800ed7a:	441a      	add	r2, r3
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ed86:	683b      	ldr	r3, [r7, #0]
 800ed88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed8c:	441a      	add	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ed92:	2300      	movs	r3, #0
}
 800ed94:	4618      	mov	r0, r3
 800ed96:	3718      	adds	r7, #24
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	bd80      	pop	{r7, pc}

0800ed9c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b086      	sub	sp, #24
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
 800eda4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	695b      	ldr	r3, [r3, #20]
 800edb0:	3320      	adds	r3, #32
 800edb2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	69db      	ldr	r3, [r3, #28]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d003      	beq.n	800edc4 <dir_next+0x28>
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800edc2:	d301      	bcc.n	800edc8 <dir_next+0x2c>
 800edc4:	2304      	movs	r3, #4
 800edc6:	e0aa      	b.n	800ef1e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800edce:	2b00      	cmp	r3, #0
 800edd0:	f040 8098 	bne.w	800ef04 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	69db      	ldr	r3, [r3, #28]
 800edd8:	1c5a      	adds	r2, r3, #1
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	699b      	ldr	r3, [r3, #24]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d10b      	bne.n	800edfe <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	095b      	lsrs	r3, r3, #5
 800edea:	68fa      	ldr	r2, [r7, #12]
 800edec:	8912      	ldrh	r2, [r2, #8]
 800edee:	4293      	cmp	r3, r2
 800edf0:	f0c0 8088 	bcc.w	800ef04 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	2200      	movs	r2, #0
 800edf8:	61da      	str	r2, [r3, #28]
 800edfa:	2304      	movs	r3, #4
 800edfc:	e08f      	b.n	800ef1e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	0a5b      	lsrs	r3, r3, #9
 800ee02:	68fa      	ldr	r2, [r7, #12]
 800ee04:	8952      	ldrh	r2, [r2, #10]
 800ee06:	3a01      	subs	r2, #1
 800ee08:	4013      	ands	r3, r2
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d17a      	bne.n	800ef04 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ee0e:	687a      	ldr	r2, [r7, #4]
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	699b      	ldr	r3, [r3, #24]
 800ee14:	4619      	mov	r1, r3
 800ee16:	4610      	mov	r0, r2
 800ee18:	f7ff fc83 	bl	800e722 <get_fat>
 800ee1c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ee1e:	697b      	ldr	r3, [r7, #20]
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d801      	bhi.n	800ee28 <dir_next+0x8c>
 800ee24:	2302      	movs	r3, #2
 800ee26:	e07a      	b.n	800ef1e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee2e:	d101      	bne.n	800ee34 <dir_next+0x98>
 800ee30:	2301      	movs	r3, #1
 800ee32:	e074      	b.n	800ef1e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	695b      	ldr	r3, [r3, #20]
 800ee38:	697a      	ldr	r2, [r7, #20]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d358      	bcc.n	800eef0 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ee3e:	683b      	ldr	r3, [r7, #0]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d104      	bne.n	800ee4e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	2200      	movs	r2, #0
 800ee48:	61da      	str	r2, [r3, #28]
 800ee4a:	2304      	movs	r3, #4
 800ee4c:	e067      	b.n	800ef1e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	699b      	ldr	r3, [r3, #24]
 800ee54:	4619      	mov	r1, r3
 800ee56:	4610      	mov	r0, r2
 800ee58:	f7ff fe59 	bl	800eb0e <create_chain>
 800ee5c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d101      	bne.n	800ee68 <dir_next+0xcc>
 800ee64:	2307      	movs	r3, #7
 800ee66:	e05a      	b.n	800ef1e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	2b01      	cmp	r3, #1
 800ee6c:	d101      	bne.n	800ee72 <dir_next+0xd6>
 800ee6e:	2302      	movs	r3, #2
 800ee70:	e055      	b.n	800ef1e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee72:	697b      	ldr	r3, [r7, #20]
 800ee74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee78:	d101      	bne.n	800ee7e <dir_next+0xe2>
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	e04f      	b.n	800ef1e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	f7ff fb50 	bl	800e524 <sync_window>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d001      	beq.n	800ee8e <dir_next+0xf2>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e047      	b.n	800ef1e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	3330      	adds	r3, #48	@ 0x30
 800ee92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ee96:	2100      	movs	r1, #0
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7ff f97a 	bl	800e192 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ee9e:	2300      	movs	r3, #0
 800eea0:	613b      	str	r3, [r7, #16]
 800eea2:	6979      	ldr	r1, [r7, #20]
 800eea4:	68f8      	ldr	r0, [r7, #12]
 800eea6:	f7ff fc1d 	bl	800e6e4 <clust2sect>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	62da      	str	r2, [r3, #44]	@ 0x2c
 800eeb0:	e012      	b.n	800eed8 <dir_next+0x13c>
						fs->wflag = 1;
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f7ff fb33 	bl	800e524 <sync_window>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d001      	beq.n	800eec8 <dir_next+0x12c>
 800eec4:	2301      	movs	r3, #1
 800eec6:	e02a      	b.n	800ef1e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	3301      	adds	r3, #1
 800eecc:	613b      	str	r3, [r7, #16]
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eed2:	1c5a      	adds	r2, r3, #1
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	62da      	str	r2, [r3, #44]	@ 0x2c
 800eed8:	68fb      	ldr	r3, [r7, #12]
 800eeda:	895b      	ldrh	r3, [r3, #10]
 800eedc:	461a      	mov	r2, r3
 800eede:	693b      	ldr	r3, [r7, #16]
 800eee0:	4293      	cmp	r3, r2
 800eee2:	d3e6      	bcc.n	800eeb2 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eee8:	693b      	ldr	r3, [r7, #16]
 800eeea:	1ad2      	subs	r2, r2, r3
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	697a      	ldr	r2, [r7, #20]
 800eef4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800eef6:	6979      	ldr	r1, [r7, #20]
 800eef8:	68f8      	ldr	r0, [r7, #12]
 800eefa:	f7ff fbf3 	bl	800e6e4 <clust2sect>
 800eefe:	4602      	mov	r2, r0
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	68ba      	ldr	r2, [r7, #8]
 800ef08:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ef10:	68bb      	ldr	r3, [r7, #8]
 800ef12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef16:	441a      	add	r2, r3
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ef1c:	2300      	movs	r3, #0
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3718      	adds	r7, #24
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b086      	sub	sp, #24
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
 800ef2e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ef36:	2100      	movs	r1, #0
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f7ff feb4 	bl	800eca6 <dir_sdi>
 800ef3e:	4603      	mov	r3, r0
 800ef40:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ef42:	7dfb      	ldrb	r3, [r7, #23]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d12b      	bne.n	800efa0 <dir_alloc+0x7a>
		n = 0;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	69db      	ldr	r3, [r3, #28]
 800ef50:	4619      	mov	r1, r3
 800ef52:	68f8      	ldr	r0, [r7, #12]
 800ef54:	f7ff fb2a 	bl	800e5ac <move_window>
 800ef58:	4603      	mov	r3, r0
 800ef5a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ef5c:	7dfb      	ldrb	r3, [r7, #23]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d11d      	bne.n	800ef9e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6a1b      	ldr	r3, [r3, #32]
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	2be5      	cmp	r3, #229	@ 0xe5
 800ef6a:	d004      	beq.n	800ef76 <dir_alloc+0x50>
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6a1b      	ldr	r3, [r3, #32]
 800ef70:	781b      	ldrb	r3, [r3, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d107      	bne.n	800ef86 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	3301      	adds	r3, #1
 800ef7a:	613b      	str	r3, [r7, #16]
 800ef7c:	693a      	ldr	r2, [r7, #16]
 800ef7e:	683b      	ldr	r3, [r7, #0]
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d102      	bne.n	800ef8a <dir_alloc+0x64>
 800ef84:	e00c      	b.n	800efa0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ef86:	2300      	movs	r3, #0
 800ef88:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ef8a:	2101      	movs	r1, #1
 800ef8c:	6878      	ldr	r0, [r7, #4]
 800ef8e:	f7ff ff05 	bl	800ed9c <dir_next>
 800ef92:	4603      	mov	r3, r0
 800ef94:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ef96:	7dfb      	ldrb	r3, [r7, #23]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d0d7      	beq.n	800ef4c <dir_alloc+0x26>
 800ef9c:	e000      	b.n	800efa0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ef9e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800efa0:	7dfb      	ldrb	r3, [r7, #23]
 800efa2:	2b04      	cmp	r3, #4
 800efa4:	d101      	bne.n	800efaa <dir_alloc+0x84>
 800efa6:	2307      	movs	r3, #7
 800efa8:	75fb      	strb	r3, [r7, #23]
	return res;
 800efaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800efac:	4618      	mov	r0, r3
 800efae:	3718      	adds	r7, #24
 800efb0:	46bd      	mov	sp, r7
 800efb2:	bd80      	pop	{r7, pc}

0800efb4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b084      	sub	sp, #16
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	331a      	adds	r3, #26
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7ff f842 	bl	800e04c <ld_word>
 800efc8:	4603      	mov	r3, r0
 800efca:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	781b      	ldrb	r3, [r3, #0]
 800efd0:	2b03      	cmp	r3, #3
 800efd2:	d109      	bne.n	800efe8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	3314      	adds	r3, #20
 800efd8:	4618      	mov	r0, r3
 800efda:	f7ff f837 	bl	800e04c <ld_word>
 800efde:	4603      	mov	r3, r0
 800efe0:	041b      	lsls	r3, r3, #16
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	4313      	orrs	r3, r2
 800efe6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800efe8:	68fb      	ldr	r3, [r7, #12]
}
 800efea:	4618      	mov	r0, r3
 800efec:	3710      	adds	r7, #16
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800eff2:	b580      	push	{r7, lr}
 800eff4:	b084      	sub	sp, #16
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	60f8      	str	r0, [r7, #12]
 800effa:	60b9      	str	r1, [r7, #8]
 800effc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	331a      	adds	r3, #26
 800f002:	687a      	ldr	r2, [r7, #4]
 800f004:	b292      	uxth	r2, r2
 800f006:	4611      	mov	r1, r2
 800f008:	4618      	mov	r0, r3
 800f00a:	f7ff f85a 	bl	800e0c2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	781b      	ldrb	r3, [r3, #0]
 800f012:	2b03      	cmp	r3, #3
 800f014:	d109      	bne.n	800f02a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f016:	68bb      	ldr	r3, [r7, #8]
 800f018:	f103 0214 	add.w	r2, r3, #20
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	0c1b      	lsrs	r3, r3, #16
 800f020:	b29b      	uxth	r3, r3
 800f022:	4619      	mov	r1, r3
 800f024:	4610      	mov	r0, r2
 800f026:	f7ff f84c 	bl	800e0c2 <st_word>
	}
}
 800f02a:	bf00      	nop
 800f02c:	3710      	adds	r7, #16
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}

0800f032 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f032:	b580      	push	{r7, lr}
 800f034:	b086      	sub	sp, #24
 800f036:	af00      	add	r7, sp, #0
 800f038:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f040:	2100      	movs	r1, #0
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f7ff fe2f 	bl	800eca6 <dir_sdi>
 800f048:	4603      	mov	r3, r0
 800f04a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f04c:	7dfb      	ldrb	r3, [r7, #23]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d001      	beq.n	800f056 <dir_find+0x24>
 800f052:	7dfb      	ldrb	r3, [r7, #23]
 800f054:	e03e      	b.n	800f0d4 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	69db      	ldr	r3, [r3, #28]
 800f05a:	4619      	mov	r1, r3
 800f05c:	6938      	ldr	r0, [r7, #16]
 800f05e:	f7ff faa5 	bl	800e5ac <move_window>
 800f062:	4603      	mov	r3, r0
 800f064:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f066:	7dfb      	ldrb	r3, [r7, #23]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d12f      	bne.n	800f0cc <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	6a1b      	ldr	r3, [r3, #32]
 800f070:	781b      	ldrb	r3, [r3, #0]
 800f072:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f074:	7bfb      	ldrb	r3, [r7, #15]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d102      	bne.n	800f080 <dir_find+0x4e>
 800f07a:	2304      	movs	r3, #4
 800f07c:	75fb      	strb	r3, [r7, #23]
 800f07e:	e028      	b.n	800f0d2 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6a1b      	ldr	r3, [r3, #32]
 800f084:	330b      	adds	r3, #11
 800f086:	781b      	ldrb	r3, [r3, #0]
 800f088:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f08c:	b2da      	uxtb	r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6a1b      	ldr	r3, [r3, #32]
 800f096:	330b      	adds	r3, #11
 800f098:	781b      	ldrb	r3, [r3, #0]
 800f09a:	f003 0308 	and.w	r3, r3, #8
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d10a      	bne.n	800f0b8 <dir_find+0x86>
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	6a18      	ldr	r0, [r3, #32]
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	3324      	adds	r3, #36	@ 0x24
 800f0aa:	220b      	movs	r2, #11
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	f7ff f88b 	bl	800e1c8 <mem_cmp>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d00b      	beq.n	800f0d0 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f0b8:	2100      	movs	r1, #0
 800f0ba:	6878      	ldr	r0, [r7, #4]
 800f0bc:	f7ff fe6e 	bl	800ed9c <dir_next>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f0c4:	7dfb      	ldrb	r3, [r7, #23]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d0c5      	beq.n	800f056 <dir_find+0x24>
 800f0ca:	e002      	b.n	800f0d2 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f0cc:	bf00      	nop
 800f0ce:	e000      	b.n	800f0d2 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f0d0:	bf00      	nop

	return res;
 800f0d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3718      	adds	r7, #24
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f0ea:	2101      	movs	r1, #1
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7ff ff1a 	bl	800ef26 <dir_alloc>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f0f6:	7bfb      	ldrb	r3, [r7, #15]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d11c      	bne.n	800f136 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	69db      	ldr	r3, [r3, #28]
 800f100:	4619      	mov	r1, r3
 800f102:	68b8      	ldr	r0, [r7, #8]
 800f104:	f7ff fa52 	bl	800e5ac <move_window>
 800f108:	4603      	mov	r3, r0
 800f10a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f10c:	7bfb      	ldrb	r3, [r7, #15]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d111      	bne.n	800f136 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6a1b      	ldr	r3, [r3, #32]
 800f116:	2220      	movs	r2, #32
 800f118:	2100      	movs	r1, #0
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff f839 	bl	800e192 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	6a18      	ldr	r0, [r3, #32]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	3324      	adds	r3, #36	@ 0x24
 800f128:	220b      	movs	r2, #11
 800f12a:	4619      	mov	r1, r3
 800f12c:	f7ff f810 	bl	800e150 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f130:	68bb      	ldr	r3, [r7, #8]
 800f132:	2201      	movs	r2, #1
 800f134:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f136:	7bfb      	ldrb	r3, [r7, #15]
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3710      	adds	r7, #16
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}

0800f140 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b088      	sub	sp, #32
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	60fb      	str	r3, [r7, #12]
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	3324      	adds	r3, #36	@ 0x24
 800f154:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f156:	220b      	movs	r2, #11
 800f158:	2120      	movs	r1, #32
 800f15a:	68b8      	ldr	r0, [r7, #8]
 800f15c:	f7ff f819 	bl	800e192 <mem_set>
	si = i = 0; ni = 8;
 800f160:	2300      	movs	r3, #0
 800f162:	613b      	str	r3, [r7, #16]
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	61fb      	str	r3, [r7, #28]
 800f168:	2308      	movs	r3, #8
 800f16a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f16c:	69fb      	ldr	r3, [r7, #28]
 800f16e:	1c5a      	adds	r2, r3, #1
 800f170:	61fa      	str	r2, [r7, #28]
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	4413      	add	r3, r2
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f17a:	7efb      	ldrb	r3, [r7, #27]
 800f17c:	2b20      	cmp	r3, #32
 800f17e:	d94e      	bls.n	800f21e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f180:	7efb      	ldrb	r3, [r7, #27]
 800f182:	2b2f      	cmp	r3, #47	@ 0x2f
 800f184:	d006      	beq.n	800f194 <create_name+0x54>
 800f186:	7efb      	ldrb	r3, [r7, #27]
 800f188:	2b5c      	cmp	r3, #92	@ 0x5c
 800f18a:	d110      	bne.n	800f1ae <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f18c:	e002      	b.n	800f194 <create_name+0x54>
 800f18e:	69fb      	ldr	r3, [r7, #28]
 800f190:	3301      	adds	r3, #1
 800f192:	61fb      	str	r3, [r7, #28]
 800f194:	68fa      	ldr	r2, [r7, #12]
 800f196:	69fb      	ldr	r3, [r7, #28]
 800f198:	4413      	add	r3, r2
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	2b2f      	cmp	r3, #47	@ 0x2f
 800f19e:	d0f6      	beq.n	800f18e <create_name+0x4e>
 800f1a0:	68fa      	ldr	r2, [r7, #12]
 800f1a2:	69fb      	ldr	r3, [r7, #28]
 800f1a4:	4413      	add	r3, r2
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	2b5c      	cmp	r3, #92	@ 0x5c
 800f1aa:	d0f0      	beq.n	800f18e <create_name+0x4e>
			break;
 800f1ac:	e038      	b.n	800f220 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f1ae:	7efb      	ldrb	r3, [r7, #27]
 800f1b0:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1b2:	d003      	beq.n	800f1bc <create_name+0x7c>
 800f1b4:	693a      	ldr	r2, [r7, #16]
 800f1b6:	697b      	ldr	r3, [r7, #20]
 800f1b8:	429a      	cmp	r2, r3
 800f1ba:	d30c      	bcc.n	800f1d6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	2b0b      	cmp	r3, #11
 800f1c0:	d002      	beq.n	800f1c8 <create_name+0x88>
 800f1c2:	7efb      	ldrb	r3, [r7, #27]
 800f1c4:	2b2e      	cmp	r3, #46	@ 0x2e
 800f1c6:	d001      	beq.n	800f1cc <create_name+0x8c>
 800f1c8:	2306      	movs	r3, #6
 800f1ca:	e044      	b.n	800f256 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800f1cc:	2308      	movs	r3, #8
 800f1ce:	613b      	str	r3, [r7, #16]
 800f1d0:	230b      	movs	r3, #11
 800f1d2:	617b      	str	r3, [r7, #20]
			continue;
 800f1d4:	e022      	b.n	800f21c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800f1d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	da04      	bge.n	800f1e8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800f1de:	7efb      	ldrb	r3, [r7, #27]
 800f1e0:	3b80      	subs	r3, #128	@ 0x80
 800f1e2:	4a1f      	ldr	r2, [pc, #124]	@ (800f260 <create_name+0x120>)
 800f1e4:	5cd3      	ldrb	r3, [r2, r3]
 800f1e6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800f1e8:	7efb      	ldrb	r3, [r7, #27]
 800f1ea:	4619      	mov	r1, r3
 800f1ec:	481d      	ldr	r0, [pc, #116]	@ (800f264 <create_name+0x124>)
 800f1ee:	f7ff f812 	bl	800e216 <chk_chr>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d001      	beq.n	800f1fc <create_name+0xbc>
 800f1f8:	2306      	movs	r3, #6
 800f1fa:	e02c      	b.n	800f256 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800f1fc:	7efb      	ldrb	r3, [r7, #27]
 800f1fe:	2b60      	cmp	r3, #96	@ 0x60
 800f200:	d905      	bls.n	800f20e <create_name+0xce>
 800f202:	7efb      	ldrb	r3, [r7, #27]
 800f204:	2b7a      	cmp	r3, #122	@ 0x7a
 800f206:	d802      	bhi.n	800f20e <create_name+0xce>
 800f208:	7efb      	ldrb	r3, [r7, #27]
 800f20a:	3b20      	subs	r3, #32
 800f20c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800f20e:	693b      	ldr	r3, [r7, #16]
 800f210:	1c5a      	adds	r2, r3, #1
 800f212:	613a      	str	r2, [r7, #16]
 800f214:	68ba      	ldr	r2, [r7, #8]
 800f216:	4413      	add	r3, r2
 800f218:	7efa      	ldrb	r2, [r7, #27]
 800f21a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800f21c:	e7a6      	b.n	800f16c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f21e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	69fb      	ldr	r3, [r7, #28]
 800f224:	441a      	add	r2, r3
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800f22a:	693b      	ldr	r3, [r7, #16]
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d101      	bne.n	800f234 <create_name+0xf4>
 800f230:	2306      	movs	r3, #6
 800f232:	e010      	b.n	800f256 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	2be5      	cmp	r3, #229	@ 0xe5
 800f23a:	d102      	bne.n	800f242 <create_name+0x102>
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	2205      	movs	r2, #5
 800f240:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f242:	7efb      	ldrb	r3, [r7, #27]
 800f244:	2b20      	cmp	r3, #32
 800f246:	d801      	bhi.n	800f24c <create_name+0x10c>
 800f248:	2204      	movs	r2, #4
 800f24a:	e000      	b.n	800f24e <create_name+0x10e>
 800f24c:	2200      	movs	r2, #0
 800f24e:	68bb      	ldr	r3, [r7, #8]
 800f250:	330b      	adds	r3, #11
 800f252:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800f254:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800f256:	4618      	mov	r0, r3
 800f258:	3720      	adds	r7, #32
 800f25a:	46bd      	mov	sp, r7
 800f25c:	bd80      	pop	{r7, pc}
 800f25e:	bf00      	nop
 800f260:	08015834 	.word	0x08015834
 800f264:	08013888 	.word	0x08013888

0800f268 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f276:	693b      	ldr	r3, [r7, #16]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f27c:	e002      	b.n	800f284 <follow_path+0x1c>
 800f27e:	683b      	ldr	r3, [r7, #0]
 800f280:	3301      	adds	r3, #1
 800f282:	603b      	str	r3, [r7, #0]
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	781b      	ldrb	r3, [r3, #0]
 800f288:	2b2f      	cmp	r3, #47	@ 0x2f
 800f28a:	d0f8      	beq.n	800f27e <follow_path+0x16>
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	2b5c      	cmp	r3, #92	@ 0x5c
 800f292:	d0f4      	beq.n	800f27e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f294:	693b      	ldr	r3, [r7, #16]
 800f296:	2200      	movs	r2, #0
 800f298:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	2b1f      	cmp	r3, #31
 800f2a0:	d80a      	bhi.n	800f2b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	2280      	movs	r2, #128	@ 0x80
 800f2a6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800f2aa:	2100      	movs	r1, #0
 800f2ac:	6878      	ldr	r0, [r7, #4]
 800f2ae:	f7ff fcfa 	bl	800eca6 <dir_sdi>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	75fb      	strb	r3, [r7, #23]
 800f2b6:	e043      	b.n	800f340 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f2b8:	463b      	mov	r3, r7
 800f2ba:	4619      	mov	r1, r3
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f7ff ff3f 	bl	800f140 <create_name>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f2c6:	7dfb      	ldrb	r3, [r7, #23]
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d134      	bne.n	800f336 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f2cc:	6878      	ldr	r0, [r7, #4]
 800f2ce:	f7ff feb0 	bl	800f032 <dir_find>
 800f2d2:	4603      	mov	r3, r0
 800f2d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800f2dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f2de:	7dfb      	ldrb	r3, [r7, #23]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d00a      	beq.n	800f2fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f2e4:	7dfb      	ldrb	r3, [r7, #23]
 800f2e6:	2b04      	cmp	r3, #4
 800f2e8:	d127      	bne.n	800f33a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f2ea:	7afb      	ldrb	r3, [r7, #11]
 800f2ec:	f003 0304 	and.w	r3, r3, #4
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d122      	bne.n	800f33a <follow_path+0xd2>
 800f2f4:	2305      	movs	r3, #5
 800f2f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f2f8:	e01f      	b.n	800f33a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f2fa:	7afb      	ldrb	r3, [r7, #11]
 800f2fc:	f003 0304 	and.w	r3, r3, #4
 800f300:	2b00      	cmp	r3, #0
 800f302:	d11c      	bne.n	800f33e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f304:	693b      	ldr	r3, [r7, #16]
 800f306:	799b      	ldrb	r3, [r3, #6]
 800f308:	f003 0310 	and.w	r3, r3, #16
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d102      	bne.n	800f316 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f310:	2305      	movs	r3, #5
 800f312:	75fb      	strb	r3, [r7, #23]
 800f314:	e014      	b.n	800f340 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	695b      	ldr	r3, [r3, #20]
 800f320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f324:	4413      	add	r3, r2
 800f326:	4619      	mov	r1, r3
 800f328:	68f8      	ldr	r0, [r7, #12]
 800f32a:	f7ff fe43 	bl	800efb4 <ld_clust>
 800f32e:	4602      	mov	r2, r0
 800f330:	693b      	ldr	r3, [r7, #16]
 800f332:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f334:	e7c0      	b.n	800f2b8 <follow_path+0x50>
			if (res != FR_OK) break;
 800f336:	bf00      	nop
 800f338:	e002      	b.n	800f340 <follow_path+0xd8>
				break;
 800f33a:	bf00      	nop
 800f33c:	e000      	b.n	800f340 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f33e:	bf00      	nop
			}
		}
	}

	return res;
 800f340:	7dfb      	ldrb	r3, [r7, #23]
}
 800f342:	4618      	mov	r0, r3
 800f344:	3718      	adds	r7, #24
 800f346:	46bd      	mov	sp, r7
 800f348:	bd80      	pop	{r7, pc}

0800f34a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f34a:	b480      	push	{r7}
 800f34c:	b087      	sub	sp, #28
 800f34e:	af00      	add	r7, sp, #0
 800f350:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f352:	f04f 33ff 	mov.w	r3, #4294967295
 800f356:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d031      	beq.n	800f3c4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	617b      	str	r3, [r7, #20]
 800f366:	e002      	b.n	800f36e <get_ldnumber+0x24>
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	3301      	adds	r3, #1
 800f36c:	617b      	str	r3, [r7, #20]
 800f36e:	697b      	ldr	r3, [r7, #20]
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	2b20      	cmp	r3, #32
 800f374:	d903      	bls.n	800f37e <get_ldnumber+0x34>
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	781b      	ldrb	r3, [r3, #0]
 800f37a:	2b3a      	cmp	r3, #58	@ 0x3a
 800f37c:	d1f4      	bne.n	800f368 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f37e:	697b      	ldr	r3, [r7, #20]
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	2b3a      	cmp	r3, #58	@ 0x3a
 800f384:	d11c      	bne.n	800f3c0 <get_ldnumber+0x76>
			tp = *path;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	1c5a      	adds	r2, r3, #1
 800f390:	60fa      	str	r2, [r7, #12]
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	3b30      	subs	r3, #48	@ 0x30
 800f396:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	2b09      	cmp	r3, #9
 800f39c:	d80e      	bhi.n	800f3bc <get_ldnumber+0x72>
 800f39e:	68fa      	ldr	r2, [r7, #12]
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	429a      	cmp	r2, r3
 800f3a4:	d10a      	bne.n	800f3bc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	2b01      	cmp	r3, #1
 800f3aa:	d807      	bhi.n	800f3bc <get_ldnumber+0x72>
					vol = (int)i;
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f3b0:	697b      	ldr	r3, [r7, #20]
 800f3b2:	3301      	adds	r3, #1
 800f3b4:	617b      	str	r3, [r7, #20]
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	697a      	ldr	r2, [r7, #20]
 800f3ba:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	e002      	b.n	800f3c6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f3c4:	693b      	ldr	r3, [r7, #16]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	371c      	adds	r7, #28
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr
	...

0800f3d4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	2200      	movs	r2, #0
 800f3e2:	70da      	strb	r2, [r3, #3]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	f04f 32ff 	mov.w	r2, #4294967295
 800f3ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f3ec:	6839      	ldr	r1, [r7, #0]
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f7ff f8dc 	bl	800e5ac <move_window>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d001      	beq.n	800f3fe <check_fs+0x2a>
 800f3fa:	2304      	movs	r3, #4
 800f3fc:	e038      	b.n	800f470 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	3330      	adds	r3, #48	@ 0x30
 800f402:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f406:	4618      	mov	r0, r3
 800f408:	f7fe fe20 	bl	800e04c <ld_word>
 800f40c:	4603      	mov	r3, r0
 800f40e:	461a      	mov	r2, r3
 800f410:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f414:	429a      	cmp	r2, r3
 800f416:	d001      	beq.n	800f41c <check_fs+0x48>
 800f418:	2303      	movs	r3, #3
 800f41a:	e029      	b.n	800f470 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f422:	2be9      	cmp	r3, #233	@ 0xe9
 800f424:	d009      	beq.n	800f43a <check_fs+0x66>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800f42c:	2beb      	cmp	r3, #235	@ 0xeb
 800f42e:	d11e      	bne.n	800f46e <check_fs+0x9a>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800f436:	2b90      	cmp	r3, #144	@ 0x90
 800f438:	d119      	bne.n	800f46e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	3330      	adds	r3, #48	@ 0x30
 800f43e:	3336      	adds	r3, #54	@ 0x36
 800f440:	4618      	mov	r0, r3
 800f442:	f7fe fe1b 	bl	800e07c <ld_dword>
 800f446:	4603      	mov	r3, r0
 800f448:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f44c:	4a0a      	ldr	r2, [pc, #40]	@ (800f478 <check_fs+0xa4>)
 800f44e:	4293      	cmp	r3, r2
 800f450:	d101      	bne.n	800f456 <check_fs+0x82>
 800f452:	2300      	movs	r3, #0
 800f454:	e00c      	b.n	800f470 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	3330      	adds	r3, #48	@ 0x30
 800f45a:	3352      	adds	r3, #82	@ 0x52
 800f45c:	4618      	mov	r0, r3
 800f45e:	f7fe fe0d 	bl	800e07c <ld_dword>
 800f462:	4603      	mov	r3, r0
 800f464:	4a05      	ldr	r2, [pc, #20]	@ (800f47c <check_fs+0xa8>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d101      	bne.n	800f46e <check_fs+0x9a>
 800f46a:	2300      	movs	r3, #0
 800f46c:	e000      	b.n	800f470 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f46e:	2302      	movs	r3, #2
}
 800f470:	4618      	mov	r0, r3
 800f472:	3708      	adds	r7, #8
 800f474:	46bd      	mov	sp, r7
 800f476:	bd80      	pop	{r7, pc}
 800f478:	00544146 	.word	0x00544146
 800f47c:	33544146 	.word	0x33544146

0800f480 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f480:	b580      	push	{r7, lr}
 800f482:	b096      	sub	sp, #88	@ 0x58
 800f484:	af00      	add	r7, sp, #0
 800f486:	60f8      	str	r0, [r7, #12]
 800f488:	60b9      	str	r1, [r7, #8]
 800f48a:	4613      	mov	r3, r2
 800f48c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f48e:	68bb      	ldr	r3, [r7, #8]
 800f490:	2200      	movs	r2, #0
 800f492:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f494:	68f8      	ldr	r0, [r7, #12]
 800f496:	f7ff ff58 	bl	800f34a <get_ldnumber>
 800f49a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f49c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	da01      	bge.n	800f4a6 <find_volume+0x26>
 800f4a2:	230b      	movs	r3, #11
 800f4a4:	e22d      	b.n	800f902 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f4a6:	4aa1      	ldr	r2, [pc, #644]	@ (800f72c <find_volume+0x2ac>)
 800f4a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f4aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f4b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d101      	bne.n	800f4ba <find_volume+0x3a>
 800f4b6:	230c      	movs	r3, #12
 800f4b8:	e223      	b.n	800f902 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f4ba:	68bb      	ldr	r3, [r7, #8]
 800f4bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f4be:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f4c0:	79fb      	ldrb	r3, [r7, #7]
 800f4c2:	f023 0301 	bic.w	r3, r3, #1
 800f4c6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f4c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d01a      	beq.n	800f506 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f4d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d2:	785b      	ldrb	r3, [r3, #1]
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	f7fe fd1b 	bl	800df10 <disk_status>
 800f4da:	4603      	mov	r3, r0
 800f4dc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f4e0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f4e4:	f003 0301 	and.w	r3, r3, #1
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d10c      	bne.n	800f506 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f4ec:	79fb      	ldrb	r3, [r7, #7]
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d007      	beq.n	800f502 <find_volume+0x82>
 800f4f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f4f6:	f003 0304 	and.w	r3, r3, #4
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d001      	beq.n	800f502 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f4fe:	230a      	movs	r3, #10
 800f500:	e1ff      	b.n	800f902 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800f502:	2300      	movs	r3, #0
 800f504:	e1fd      	b.n	800f902 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f508:	2200      	movs	r2, #0
 800f50a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f50c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f50e:	b2da      	uxtb	r2, r3
 800f510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f512:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f516:	785b      	ldrb	r3, [r3, #1]
 800f518:	4618      	mov	r0, r3
 800f51a:	f7fe fd13 	bl	800df44 <disk_initialize>
 800f51e:	4603      	mov	r3, r0
 800f520:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f524:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f528:	f003 0301 	and.w	r3, r3, #1
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d001      	beq.n	800f534 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f530:	2303      	movs	r3, #3
 800f532:	e1e6      	b.n	800f902 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f534:	79fb      	ldrb	r3, [r7, #7]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d007      	beq.n	800f54a <find_volume+0xca>
 800f53a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f53e:	f003 0304 	and.w	r3, r3, #4
 800f542:	2b00      	cmp	r3, #0
 800f544:	d001      	beq.n	800f54a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f546:	230a      	movs	r3, #10
 800f548:	e1db      	b.n	800f902 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f54a:	2300      	movs	r3, #0
 800f54c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f54e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f550:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f552:	f7ff ff3f 	bl	800f3d4 <check_fs>
 800f556:	4603      	mov	r3, r0
 800f558:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f55c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f560:	2b02      	cmp	r3, #2
 800f562:	d149      	bne.n	800f5f8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f564:	2300      	movs	r3, #0
 800f566:	643b      	str	r3, [r7, #64]	@ 0x40
 800f568:	e01e      	b.n	800f5a8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f56a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f56c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800f570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f572:	011b      	lsls	r3, r3, #4
 800f574:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f578:	4413      	add	r3, r2
 800f57a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f57c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f57e:	3304      	adds	r3, #4
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d006      	beq.n	800f594 <find_volume+0x114>
 800f586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f588:	3308      	adds	r3, #8
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fe fd76 	bl	800e07c <ld_dword>
 800f590:	4602      	mov	r2, r0
 800f592:	e000      	b.n	800f596 <find_volume+0x116>
 800f594:	2200      	movs	r2, #0
 800f596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f598:	009b      	lsls	r3, r3, #2
 800f59a:	3358      	adds	r3, #88	@ 0x58
 800f59c:	443b      	add	r3, r7
 800f59e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f5a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5a4:	3301      	adds	r3, #1
 800f5a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5aa:	2b03      	cmp	r3, #3
 800f5ac:	d9dd      	bls.n	800f56a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f5b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d002      	beq.n	800f5be <find_volume+0x13e>
 800f5b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5ba:	3b01      	subs	r3, #1
 800f5bc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f5be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5c0:	009b      	lsls	r3, r3, #2
 800f5c2:	3358      	adds	r3, #88	@ 0x58
 800f5c4:	443b      	add	r3, r7
 800f5c6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f5ca:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f5cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d005      	beq.n	800f5de <find_volume+0x15e>
 800f5d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f5d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f5d6:	f7ff fefd 	bl	800f3d4 <check_fs>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	e000      	b.n	800f5e0 <find_volume+0x160>
 800f5de:	2303      	movs	r3, #3
 800f5e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f5e4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f5e8:	2b01      	cmp	r3, #1
 800f5ea:	d905      	bls.n	800f5f8 <find_volume+0x178>
 800f5ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	643b      	str	r3, [r7, #64]	@ 0x40
 800f5f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f5f4:	2b03      	cmp	r3, #3
 800f5f6:	d9e2      	bls.n	800f5be <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f5f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f5fc:	2b04      	cmp	r3, #4
 800f5fe:	d101      	bne.n	800f604 <find_volume+0x184>
 800f600:	2301      	movs	r3, #1
 800f602:	e17e      	b.n	800f902 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f604:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f608:	2b01      	cmp	r3, #1
 800f60a:	d901      	bls.n	800f610 <find_volume+0x190>
 800f60c:	230d      	movs	r3, #13
 800f60e:	e178      	b.n	800f902 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f612:	3330      	adds	r3, #48	@ 0x30
 800f614:	330b      	adds	r3, #11
 800f616:	4618      	mov	r0, r3
 800f618:	f7fe fd18 	bl	800e04c <ld_word>
 800f61c:	4603      	mov	r3, r0
 800f61e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f622:	d001      	beq.n	800f628 <find_volume+0x1a8>
 800f624:	230d      	movs	r3, #13
 800f626:	e16c      	b.n	800f902 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f62a:	3330      	adds	r3, #48	@ 0x30
 800f62c:	3316      	adds	r3, #22
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fe fd0c 	bl	800e04c <ld_word>
 800f634:	4603      	mov	r3, r0
 800f636:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d106      	bne.n	800f64c <find_volume+0x1cc>
 800f63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f640:	3330      	adds	r3, #48	@ 0x30
 800f642:	3324      	adds	r3, #36	@ 0x24
 800f644:	4618      	mov	r0, r3
 800f646:	f7fe fd19 	bl	800e07c <ld_dword>
 800f64a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f64e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f650:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f654:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800f658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f65a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f65c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f65e:	789b      	ldrb	r3, [r3, #2]
 800f660:	2b01      	cmp	r3, #1
 800f662:	d005      	beq.n	800f670 <find_volume+0x1f0>
 800f664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f666:	789b      	ldrb	r3, [r3, #2]
 800f668:	2b02      	cmp	r3, #2
 800f66a:	d001      	beq.n	800f670 <find_volume+0x1f0>
 800f66c:	230d      	movs	r3, #13
 800f66e:	e148      	b.n	800f902 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f670:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f672:	789b      	ldrb	r3, [r3, #2]
 800f674:	461a      	mov	r2, r3
 800f676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f678:	fb02 f303 	mul.w	r3, r2, r3
 800f67c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f684:	461a      	mov	r2, r3
 800f686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f688:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f68c:	895b      	ldrh	r3, [r3, #10]
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d008      	beq.n	800f6a4 <find_volume+0x224>
 800f692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f694:	895b      	ldrh	r3, [r3, #10]
 800f696:	461a      	mov	r2, r3
 800f698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f69a:	895b      	ldrh	r3, [r3, #10]
 800f69c:	3b01      	subs	r3, #1
 800f69e:	4013      	ands	r3, r2
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d001      	beq.n	800f6a8 <find_volume+0x228>
 800f6a4:	230d      	movs	r3, #13
 800f6a6:	e12c      	b.n	800f902 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f6a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6aa:	3330      	adds	r3, #48	@ 0x30
 800f6ac:	3311      	adds	r3, #17
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7fe fccc 	bl	800e04c <ld_word>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6ba:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6be:	891b      	ldrh	r3, [r3, #8]
 800f6c0:	f003 030f 	and.w	r3, r3, #15
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d001      	beq.n	800f6ce <find_volume+0x24e>
 800f6ca:	230d      	movs	r3, #13
 800f6cc:	e119      	b.n	800f902 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6d0:	3330      	adds	r3, #48	@ 0x30
 800f6d2:	3313      	adds	r3, #19
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f7fe fcb9 	bl	800e04c <ld_word>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f6de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d106      	bne.n	800f6f2 <find_volume+0x272>
 800f6e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6e6:	3330      	adds	r3, #48	@ 0x30
 800f6e8:	3320      	adds	r3, #32
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fe fcc6 	bl	800e07c <ld_dword>
 800f6f0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f6f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f6f4:	3330      	adds	r3, #48	@ 0x30
 800f6f6:	330e      	adds	r3, #14
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fe fca7 	bl	800e04c <ld_word>
 800f6fe:	4603      	mov	r3, r0
 800f700:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f702:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f704:	2b00      	cmp	r3, #0
 800f706:	d101      	bne.n	800f70c <find_volume+0x28c>
 800f708:	230d      	movs	r3, #13
 800f70a:	e0fa      	b.n	800f902 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f70c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f70e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f710:	4413      	add	r3, r2
 800f712:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f714:	8912      	ldrh	r2, [r2, #8]
 800f716:	0912      	lsrs	r2, r2, #4
 800f718:	b292      	uxth	r2, r2
 800f71a:	4413      	add	r3, r2
 800f71c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f71e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f722:	429a      	cmp	r2, r3
 800f724:	d204      	bcs.n	800f730 <find_volume+0x2b0>
 800f726:	230d      	movs	r3, #13
 800f728:	e0eb      	b.n	800f902 <find_volume+0x482>
 800f72a:	bf00      	nop
 800f72c:	20009d94 	.word	0x20009d94
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f730:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f734:	1ad3      	subs	r3, r2, r3
 800f736:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f738:	8952      	ldrh	r2, [r2, #10]
 800f73a:	fbb3 f3f2 	udiv	r3, r3, r2
 800f73e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f742:	2b00      	cmp	r3, #0
 800f744:	d101      	bne.n	800f74a <find_volume+0x2ca>
 800f746:	230d      	movs	r3, #13
 800f748:	e0db      	b.n	800f902 <find_volume+0x482>
		fmt = FS_FAT32;
 800f74a:	2303      	movs	r3, #3
 800f74c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f752:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f756:	4293      	cmp	r3, r2
 800f758:	d802      	bhi.n	800f760 <find_volume+0x2e0>
 800f75a:	2302      	movs	r3, #2
 800f75c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f762:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f766:	4293      	cmp	r3, r2
 800f768:	d802      	bhi.n	800f770 <find_volume+0x2f0>
 800f76a:	2301      	movs	r3, #1
 800f76c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f772:	1c9a      	adds	r2, r3, #2
 800f774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f776:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800f778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f77a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f77c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f77e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f780:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f782:	441a      	add	r2, r3
 800f784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f786:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800f788:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f78c:	441a      	add	r2, r3
 800f78e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f790:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800f792:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f796:	2b03      	cmp	r3, #3
 800f798:	d11e      	bne.n	800f7d8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f79c:	3330      	adds	r3, #48	@ 0x30
 800f79e:	332a      	adds	r3, #42	@ 0x2a
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f7fe fc53 	bl	800e04c <ld_word>
 800f7a6:	4603      	mov	r3, r0
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d001      	beq.n	800f7b0 <find_volume+0x330>
 800f7ac:	230d      	movs	r3, #13
 800f7ae:	e0a8      	b.n	800f902 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7b2:	891b      	ldrh	r3, [r3, #8]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d001      	beq.n	800f7bc <find_volume+0x33c>
 800f7b8:	230d      	movs	r3, #13
 800f7ba:	e0a2      	b.n	800f902 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f7bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7be:	3330      	adds	r3, #48	@ 0x30
 800f7c0:	332c      	adds	r3, #44	@ 0x2c
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	f7fe fc5a 	bl	800e07c <ld_dword>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7cc:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f7ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7d0:	695b      	ldr	r3, [r3, #20]
 800f7d2:	009b      	lsls	r3, r3, #2
 800f7d4:	647b      	str	r3, [r7, #68]	@ 0x44
 800f7d6:	e01f      	b.n	800f818 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f7d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7da:	891b      	ldrh	r3, [r3, #8]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d101      	bne.n	800f7e4 <find_volume+0x364>
 800f7e0:	230d      	movs	r3, #13
 800f7e2:	e08e      	b.n	800f902 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7e6:	6a1a      	ldr	r2, [r3, #32]
 800f7e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f7ea:	441a      	add	r2, r3
 800f7ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7ee:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f7f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f7f4:	2b02      	cmp	r3, #2
 800f7f6:	d103      	bne.n	800f800 <find_volume+0x380>
 800f7f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f7fa:	695b      	ldr	r3, [r3, #20]
 800f7fc:	005b      	lsls	r3, r3, #1
 800f7fe:	e00a      	b.n	800f816 <find_volume+0x396>
 800f800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f802:	695a      	ldr	r2, [r3, #20]
 800f804:	4613      	mov	r3, r2
 800f806:	005b      	lsls	r3, r3, #1
 800f808:	4413      	add	r3, r2
 800f80a:	085a      	lsrs	r2, r3, #1
 800f80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f80e:	695b      	ldr	r3, [r3, #20]
 800f810:	f003 0301 	and.w	r3, r3, #1
 800f814:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f816:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f818:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f81a:	699a      	ldr	r2, [r3, #24]
 800f81c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f81e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f822:	0a5b      	lsrs	r3, r3, #9
 800f824:	429a      	cmp	r2, r3
 800f826:	d201      	bcs.n	800f82c <find_volume+0x3ac>
 800f828:	230d      	movs	r3, #13
 800f82a:	e06a      	b.n	800f902 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f82e:	f04f 32ff 	mov.w	r2, #4294967295
 800f832:	611a      	str	r2, [r3, #16]
 800f834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f836:	691a      	ldr	r2, [r3, #16]
 800f838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f83a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800f83c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f83e:	2280      	movs	r2, #128	@ 0x80
 800f840:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f842:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f846:	2b03      	cmp	r3, #3
 800f848:	d149      	bne.n	800f8de <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f84c:	3330      	adds	r3, #48	@ 0x30
 800f84e:	3330      	adds	r3, #48	@ 0x30
 800f850:	4618      	mov	r0, r3
 800f852:	f7fe fbfb 	bl	800e04c <ld_word>
 800f856:	4603      	mov	r3, r0
 800f858:	2b01      	cmp	r3, #1
 800f85a:	d140      	bne.n	800f8de <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f85c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f85e:	3301      	adds	r3, #1
 800f860:	4619      	mov	r1, r3
 800f862:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f864:	f7fe fea2 	bl	800e5ac <move_window>
 800f868:	4603      	mov	r3, r0
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d137      	bne.n	800f8de <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800f86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f870:	2200      	movs	r2, #0
 800f872:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f876:	3330      	adds	r3, #48	@ 0x30
 800f878:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fe fbe5 	bl	800e04c <ld_word>
 800f882:	4603      	mov	r3, r0
 800f884:	461a      	mov	r2, r3
 800f886:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d127      	bne.n	800f8de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f890:	3330      	adds	r3, #48	@ 0x30
 800f892:	4618      	mov	r0, r3
 800f894:	f7fe fbf2 	bl	800e07c <ld_dword>
 800f898:	4603      	mov	r3, r0
 800f89a:	4a1c      	ldr	r2, [pc, #112]	@ (800f90c <find_volume+0x48c>)
 800f89c:	4293      	cmp	r3, r2
 800f89e:	d11e      	bne.n	800f8de <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8a2:	3330      	adds	r3, #48	@ 0x30
 800f8a4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7fe fbe7 	bl	800e07c <ld_dword>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	4a17      	ldr	r2, [pc, #92]	@ (800f910 <find_volume+0x490>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d113      	bne.n	800f8de <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8b8:	3330      	adds	r3, #48	@ 0x30
 800f8ba:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fe fbdc 	bl	800e07c <ld_dword>
 800f8c4:	4602      	mov	r2, r0
 800f8c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8c8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f8ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8cc:	3330      	adds	r3, #48	@ 0x30
 800f8ce:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7fe fbd2 	bl	800e07c <ld_dword>
 800f8d8:	4602      	mov	r2, r0
 800f8da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8dc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8e0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f8e4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f914 <find_volume+0x494>)
 800f8e8:	881b      	ldrh	r3, [r3, #0]
 800f8ea:	3301      	adds	r3, #1
 800f8ec:	b29a      	uxth	r2, r3
 800f8ee:	4b09      	ldr	r3, [pc, #36]	@ (800f914 <find_volume+0x494>)
 800f8f0:	801a      	strh	r2, [r3, #0]
 800f8f2:	4b08      	ldr	r3, [pc, #32]	@ (800f914 <find_volume+0x494>)
 800f8f4:	881a      	ldrh	r2, [r3, #0]
 800f8f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8f8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f8fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f8fc:	f7fe fdee 	bl	800e4dc <clear_lock>
#endif
	return FR_OK;
 800f900:	2300      	movs	r3, #0
}
 800f902:	4618      	mov	r0, r3
 800f904:	3758      	adds	r7, #88	@ 0x58
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	41615252 	.word	0x41615252
 800f910:	61417272 	.word	0x61417272
 800f914:	20009d9c 	.word	0x20009d9c

0800f918 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
 800f920:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f922:	2309      	movs	r3, #9
 800f924:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d01c      	beq.n	800f966 <validate+0x4e>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d018      	beq.n	800f966 <validate+0x4e>
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d013      	beq.n	800f966 <validate+0x4e>
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	889a      	ldrh	r2, [r3, #4]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	88db      	ldrh	r3, [r3, #6]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d10c      	bne.n	800f966 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	785b      	ldrb	r3, [r3, #1]
 800f952:	4618      	mov	r0, r3
 800f954:	f7fe fadc 	bl	800df10 <disk_status>
 800f958:	4603      	mov	r3, r0
 800f95a:	f003 0301 	and.w	r3, r3, #1
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d101      	bne.n	800f966 <validate+0x4e>
			res = FR_OK;
 800f962:	2300      	movs	r3, #0
 800f964:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f966:	7bfb      	ldrb	r3, [r7, #15]
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d102      	bne.n	800f972 <validate+0x5a>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	e000      	b.n	800f974 <validate+0x5c>
 800f972:	2300      	movs	r3, #0
 800f974:	683a      	ldr	r2, [r7, #0]
 800f976:	6013      	str	r3, [r2, #0]
	return res;
 800f978:	7bfb      	ldrb	r3, [r7, #15]
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
	...

0800f984 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b088      	sub	sp, #32
 800f988:	af00      	add	r7, sp, #0
 800f98a:	60f8      	str	r0, [r7, #12]
 800f98c:	60b9      	str	r1, [r7, #8]
 800f98e:	4613      	mov	r3, r2
 800f990:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f992:	68bb      	ldr	r3, [r7, #8]
 800f994:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f996:	f107 0310 	add.w	r3, r7, #16
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7ff fcd5 	bl	800f34a <get_ldnumber>
 800f9a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	da01      	bge.n	800f9ac <f_mount+0x28>
 800f9a8:	230b      	movs	r3, #11
 800f9aa:	e02b      	b.n	800fa04 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f9ac:	4a17      	ldr	r2, [pc, #92]	@ (800fa0c <f_mount+0x88>)
 800f9ae:	69fb      	ldr	r3, [r7, #28]
 800f9b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f9b6:	69bb      	ldr	r3, [r7, #24]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d005      	beq.n	800f9c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f9bc:	69b8      	ldr	r0, [r7, #24]
 800f9be:	f7fe fd8d 	bl	800e4dc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f9c2:	69bb      	ldr	r3, [r7, #24]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d002      	beq.n	800f9d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f9d4:	68fa      	ldr	r2, [r7, #12]
 800f9d6:	490d      	ldr	r1, [pc, #52]	@ (800fa0c <f_mount+0x88>)
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d002      	beq.n	800f9ea <f_mount+0x66>
 800f9e4:	79fb      	ldrb	r3, [r7, #7]
 800f9e6:	2b01      	cmp	r3, #1
 800f9e8:	d001      	beq.n	800f9ee <f_mount+0x6a>
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	e00a      	b.n	800fa04 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f9ee:	f107 010c 	add.w	r1, r7, #12
 800f9f2:	f107 0308 	add.w	r3, r7, #8
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7ff fd41 	bl	800f480 <find_volume>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fa02:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3720      	adds	r7, #32
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	20009d94 	.word	0x20009d94

0800fa10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b09a      	sub	sp, #104	@ 0x68
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	60f8      	str	r0, [r7, #12]
 800fa18:	60b9      	str	r1, [r7, #8]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d101      	bne.n	800fa28 <f_open+0x18>
 800fa24:	2309      	movs	r3, #9
 800fa26:	e1a9      	b.n	800fd7c <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fa28:	79fb      	ldrb	r3, [r7, #7]
 800fa2a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800fa2e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800fa30:	79fa      	ldrb	r2, [r7, #7]
 800fa32:	f107 0114 	add.w	r1, r7, #20
 800fa36:	f107 0308 	add.w	r3, r7, #8
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7ff fd20 	bl	800f480 <find_volume>
 800fa40:	4603      	mov	r3, r0
 800fa42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800fa46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	f040 818d 	bne.w	800fd6a <f_open+0x35a>
		dj.obj.fs = fs;
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800fa54:	68ba      	ldr	r2, [r7, #8]
 800fa56:	f107 0318 	add.w	r3, r7, #24
 800fa5a:	4611      	mov	r1, r2
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7ff fc03 	bl	800f268 <follow_path>
 800fa62:	4603      	mov	r3, r0
 800fa64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fa68:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d118      	bne.n	800faa2 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fa70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800fa74:	b25b      	sxtb	r3, r3
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	da03      	bge.n	800fa82 <f_open+0x72>
				res = FR_INVALID_NAME;
 800fa7a:	2306      	movs	r3, #6
 800fa7c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fa80:	e00f      	b.n	800faa2 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fa82:	79fb      	ldrb	r3, [r7, #7]
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	bf8c      	ite	hi
 800fa88:	2301      	movhi	r3, #1
 800fa8a:	2300      	movls	r3, #0
 800fa8c:	b2db      	uxtb	r3, r3
 800fa8e:	461a      	mov	r2, r3
 800fa90:	f107 0318 	add.w	r3, r7, #24
 800fa94:	4611      	mov	r1, r2
 800fa96:	4618      	mov	r0, r3
 800fa98:	f7fe fbd8 	bl	800e24c <chk_lock>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800faa2:	79fb      	ldrb	r3, [r7, #7]
 800faa4:	f003 031c 	and.w	r3, r3, #28
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d07f      	beq.n	800fbac <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800faac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d017      	beq.n	800fae4 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fab4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fab8:	2b04      	cmp	r3, #4
 800faba:	d10e      	bne.n	800fada <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fabc:	f7fe fc22 	bl	800e304 <enq_lock>
 800fac0:	4603      	mov	r3, r0
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d006      	beq.n	800fad4 <f_open+0xc4>
 800fac6:	f107 0318 	add.w	r3, r7, #24
 800faca:	4618      	mov	r0, r3
 800facc:	f7ff fb06 	bl	800f0dc <dir_register>
 800fad0:	4603      	mov	r3, r0
 800fad2:	e000      	b.n	800fad6 <f_open+0xc6>
 800fad4:	2312      	movs	r3, #18
 800fad6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fada:	79fb      	ldrb	r3, [r7, #7]
 800fadc:	f043 0308 	orr.w	r3, r3, #8
 800fae0:	71fb      	strb	r3, [r7, #7]
 800fae2:	e010      	b.n	800fb06 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fae4:	7fbb      	ldrb	r3, [r7, #30]
 800fae6:	f003 0311 	and.w	r3, r3, #17
 800faea:	2b00      	cmp	r3, #0
 800faec:	d003      	beq.n	800faf6 <f_open+0xe6>
					res = FR_DENIED;
 800faee:	2307      	movs	r3, #7
 800faf0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800faf4:	e007      	b.n	800fb06 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800faf6:	79fb      	ldrb	r3, [r7, #7]
 800faf8:	f003 0304 	and.w	r3, r3, #4
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d002      	beq.n	800fb06 <f_open+0xf6>
 800fb00:	2308      	movs	r3, #8
 800fb02:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fb06:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d168      	bne.n	800fbe0 <f_open+0x1d0>
 800fb0e:	79fb      	ldrb	r3, [r7, #7]
 800fb10:	f003 0308 	and.w	r3, r3, #8
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d063      	beq.n	800fbe0 <f_open+0x1d0>
				dw = GET_FATTIME();
 800fb18:	f7fd ff98 	bl	800da4c <get_fattime>
 800fb1c:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fb1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb20:	330e      	adds	r3, #14
 800fb22:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7fe fae7 	bl	800e0f8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fb2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb2c:	3316      	adds	r3, #22
 800fb2e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fb30:	4618      	mov	r0, r3
 800fb32:	f7fe fae1 	bl	800e0f8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fb36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb38:	330b      	adds	r3, #11
 800fb3a:	2220      	movs	r2, #32
 800fb3c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb42:	4611      	mov	r1, r2
 800fb44:	4618      	mov	r0, r3
 800fb46:	f7ff fa35 	bl	800efb4 <ld_clust>
 800fb4a:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800fb50:	2200      	movs	r2, #0
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7ff fa4d 	bl	800eff2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fb5a:	331c      	adds	r3, #28
 800fb5c:	2100      	movs	r1, #0
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7fe faca 	bl	800e0f8 <st_dword>
					fs->wflag = 1;
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	2201      	movs	r2, #1
 800fb68:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fb6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d037      	beq.n	800fbe0 <f_open+0x1d0>
						dw = fs->winsect;
 800fb70:	697b      	ldr	r3, [r7, #20]
 800fb72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb74:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800fb76:	f107 0318 	add.w	r3, r7, #24
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7fe ff60 	bl	800ea44 <remove_chain>
 800fb84:	4603      	mov	r3, r0
 800fb86:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800fb8a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d126      	bne.n	800fbe0 <f_open+0x1d0>
							res = move_window(fs, dw);
 800fb92:	697b      	ldr	r3, [r7, #20]
 800fb94:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fe fd08 	bl	800e5ac <move_window>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fba6:	3a01      	subs	r2, #1
 800fba8:	60da      	str	r2, [r3, #12]
 800fbaa:	e019      	b.n	800fbe0 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fbac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d115      	bne.n	800fbe0 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fbb4:	7fbb      	ldrb	r3, [r7, #30]
 800fbb6:	f003 0310 	and.w	r3, r3, #16
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d003      	beq.n	800fbc6 <f_open+0x1b6>
					res = FR_NO_FILE;
 800fbbe:	2304      	movs	r3, #4
 800fbc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fbc4:	e00c      	b.n	800fbe0 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fbc6:	79fb      	ldrb	r3, [r7, #7]
 800fbc8:	f003 0302 	and.w	r3, r3, #2
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d007      	beq.n	800fbe0 <f_open+0x1d0>
 800fbd0:	7fbb      	ldrb	r3, [r7, #30]
 800fbd2:	f003 0301 	and.w	r3, r3, #1
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d002      	beq.n	800fbe0 <f_open+0x1d0>
						res = FR_DENIED;
 800fbda:	2307      	movs	r3, #7
 800fbdc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800fbe0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d126      	bne.n	800fc36 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fbe8:	79fb      	ldrb	r3, [r7, #7]
 800fbea:	f003 0308 	and.w	r3, r3, #8
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d003      	beq.n	800fbfa <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800fbf2:	79fb      	ldrb	r3, [r7, #7]
 800fbf4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbf8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fbfa:	697b      	ldr	r3, [r7, #20]
 800fbfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800fc02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fc08:	79fb      	ldrb	r3, [r7, #7]
 800fc0a:	2b01      	cmp	r3, #1
 800fc0c:	bf8c      	ite	hi
 800fc0e:	2301      	movhi	r3, #1
 800fc10:	2300      	movls	r3, #0
 800fc12:	b2db      	uxtb	r3, r3
 800fc14:	461a      	mov	r2, r3
 800fc16:	f107 0318 	add.w	r3, r7, #24
 800fc1a:	4611      	mov	r1, r2
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	f7fe fb93 	bl	800e348 <inc_lock>
 800fc22:	4602      	mov	r2, r0
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	691b      	ldr	r3, [r3, #16]
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d102      	bne.n	800fc36 <f_open+0x226>
 800fc30:	2302      	movs	r3, #2
 800fc32:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fc36:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	f040 8095 	bne.w	800fd6a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fc40:	697b      	ldr	r3, [r7, #20]
 800fc42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc44:	4611      	mov	r1, r2
 800fc46:	4618      	mov	r0, r3
 800fc48:	f7ff f9b4 	bl	800efb4 <ld_clust>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fc52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc54:	331c      	adds	r3, #28
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7fe fa10 	bl	800e07c <ld_dword>
 800fc5c:	4602      	mov	r2, r0
 800fc5e:	68fb      	ldr	r3, [r7, #12]
 800fc60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	2200      	movs	r2, #0
 800fc66:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800fc68:	697a      	ldr	r2, [r7, #20]
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	88da      	ldrh	r2, [r3, #6]
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	79fa      	ldrb	r2, [r7, #7]
 800fc7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	2200      	movs	r2, #0
 800fc80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	2200      	movs	r2, #0
 800fc86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	3330      	adds	r3, #48	@ 0x30
 800fc92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fc96:	2100      	movs	r1, #0
 800fc98:	4618      	mov	r0, r3
 800fc9a:	f7fe fa7a 	bl	800e192 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800fc9e:	79fb      	ldrb	r3, [r7, #7]
 800fca0:	f003 0320 	and.w	r3, r3, #32
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d060      	beq.n	800fd6a <f_open+0x35a>
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	68db      	ldr	r3, [r3, #12]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d05c      	beq.n	800fd6a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	68da      	ldr	r2, [r3, #12]
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	895b      	ldrh	r3, [r3, #10]
 800fcbc:	025b      	lsls	r3, r3, #9
 800fcbe:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	689b      	ldr	r3, [r3, #8]
 800fcc4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	68db      	ldr	r3, [r3, #12]
 800fcca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fccc:	e016      	b.n	800fcfc <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7fe fd25 	bl	800e722 <get_fat>
 800fcd8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fcda:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fcdc:	2b01      	cmp	r3, #1
 800fcde:	d802      	bhi.n	800fce6 <f_open+0x2d6>
 800fce0:	2302      	movs	r3, #2
 800fce2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fce6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800fce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcec:	d102      	bne.n	800fcf4 <f_open+0x2e4>
 800fcee:	2301      	movs	r3, #1
 800fcf0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fcf4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fcf6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcf8:	1ad3      	subs	r3, r2, r3
 800fcfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fcfc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d103      	bne.n	800fd0c <f_open+0x2fc>
 800fd04:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fd06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d8e0      	bhi.n	800fcce <f_open+0x2be>
				}
				fp->clust = clst;
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fd10:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fd12:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d127      	bne.n	800fd6a <f_open+0x35a>
 800fd1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d022      	beq.n	800fd6a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7fe fcdb 	bl	800e6e4 <clust2sect>
 800fd2e:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800fd30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d103      	bne.n	800fd3e <f_open+0x32e>
						res = FR_INT_ERR;
 800fd36:	2302      	movs	r3, #2
 800fd38:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800fd3c:	e015      	b.n	800fd6a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800fd3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fd40:	0a5a      	lsrs	r2, r3, #9
 800fd42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fd44:	441a      	add	r2, r3
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	7858      	ldrb	r0, [r3, #1]
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	6a1a      	ldr	r2, [r3, #32]
 800fd58:	2301      	movs	r3, #1
 800fd5a:	f7fe f919 	bl	800df90 <disk_read>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d002      	beq.n	800fd6a <f_open+0x35a>
 800fd64:	2301      	movs	r3, #1
 800fd66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fd6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d002      	beq.n	800fd78 <f_open+0x368>
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2200      	movs	r2, #0
 800fd76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fd78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3768      	adds	r7, #104	@ 0x68
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b08e      	sub	sp, #56	@ 0x38
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	60f8      	str	r0, [r7, #12]
 800fd8c:	60b9      	str	r1, [r7, #8]
 800fd8e:	607a      	str	r2, [r7, #4]
 800fd90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fd92:	68bb      	ldr	r3, [r7, #8]
 800fd94:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800fd96:	683b      	ldr	r3, [r7, #0]
 800fd98:	2200      	movs	r2, #0
 800fd9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	f107 0214 	add.w	r2, r7, #20
 800fda2:	4611      	mov	r1, r2
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7ff fdb7 	bl	800f918 <validate>
 800fdaa:	4603      	mov	r3, r0
 800fdac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fdb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d107      	bne.n	800fdc8 <f_read+0x44>
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	7d5b      	ldrb	r3, [r3, #21]
 800fdbc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fdc0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d002      	beq.n	800fdce <f_read+0x4a>
 800fdc8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fdcc:	e115      	b.n	800fffa <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	7d1b      	ldrb	r3, [r3, #20]
 800fdd2:	f003 0301 	and.w	r3, r3, #1
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d101      	bne.n	800fdde <f_read+0x5a>
 800fdda:	2307      	movs	r3, #7
 800fddc:	e10d      	b.n	800fffa <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	68da      	ldr	r2, [r3, #12]
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	699b      	ldr	r3, [r3, #24]
 800fde6:	1ad3      	subs	r3, r2, r3
 800fde8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fdea:	687a      	ldr	r2, [r7, #4]
 800fdec:	6a3b      	ldr	r3, [r7, #32]
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	f240 80fe 	bls.w	800fff0 <f_read+0x26c>
 800fdf4:	6a3b      	ldr	r3, [r7, #32]
 800fdf6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fdf8:	e0fa      	b.n	800fff0 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	699b      	ldr	r3, [r3, #24]
 800fdfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	f040 80c6 	bne.w	800ff94 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	699b      	ldr	r3, [r3, #24]
 800fe0c:	0a5b      	lsrs	r3, r3, #9
 800fe0e:	697a      	ldr	r2, [r7, #20]
 800fe10:	8952      	ldrh	r2, [r2, #10]
 800fe12:	3a01      	subs	r2, #1
 800fe14:	4013      	ands	r3, r2
 800fe16:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d12f      	bne.n	800fe7e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	699b      	ldr	r3, [r3, #24]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d103      	bne.n	800fe2e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	689b      	ldr	r3, [r3, #8]
 800fe2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800fe2c:	e013      	b.n	800fe56 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d007      	beq.n	800fe46 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fe36:	68fb      	ldr	r3, [r7, #12]
 800fe38:	699b      	ldr	r3, [r3, #24]
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	68f8      	ldr	r0, [r7, #12]
 800fe3e:	f7fe fefe 	bl	800ec3e <clmt_clust>
 800fe42:	6338      	str	r0, [r7, #48]	@ 0x30
 800fe44:	e007      	b.n	800fe56 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fe46:	68fa      	ldr	r2, [r7, #12]
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	69db      	ldr	r3, [r3, #28]
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	4610      	mov	r0, r2
 800fe50:	f7fe fc67 	bl	800e722 <get_fat>
 800fe54:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fe56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d804      	bhi.n	800fe66 <f_read+0xe2>
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	2202      	movs	r2, #2
 800fe60:	755a      	strb	r2, [r3, #21]
 800fe62:	2302      	movs	r3, #2
 800fe64:	e0c9      	b.n	800fffa <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fe66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe6c:	d104      	bne.n	800fe78 <f_read+0xf4>
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	2201      	movs	r2, #1
 800fe72:	755a      	strb	r2, [r3, #21]
 800fe74:	2301      	movs	r3, #1
 800fe76:	e0c0      	b.n	800fffa <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fe7c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fe7e:	697a      	ldr	r2, [r7, #20]
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	69db      	ldr	r3, [r3, #28]
 800fe84:	4619      	mov	r1, r3
 800fe86:	4610      	mov	r0, r2
 800fe88:	f7fe fc2c 	bl	800e6e4 <clust2sect>
 800fe8c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fe8e:	69bb      	ldr	r3, [r7, #24]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d104      	bne.n	800fe9e <f_read+0x11a>
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2202      	movs	r2, #2
 800fe98:	755a      	strb	r2, [r3, #21]
 800fe9a:	2302      	movs	r3, #2
 800fe9c:	e0ad      	b.n	800fffa <f_read+0x276>
			sect += csect;
 800fe9e:	69ba      	ldr	r2, [r7, #24]
 800fea0:	69fb      	ldr	r3, [r7, #28]
 800fea2:	4413      	add	r3, r2
 800fea4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	0a5b      	lsrs	r3, r3, #9
 800feaa:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800feac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d039      	beq.n	800ff26 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800feb2:	69fa      	ldr	r2, [r7, #28]
 800feb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800feb6:	4413      	add	r3, r2
 800feb8:	697a      	ldr	r2, [r7, #20]
 800feba:	8952      	ldrh	r2, [r2, #10]
 800febc:	4293      	cmp	r3, r2
 800febe:	d905      	bls.n	800fecc <f_read+0x148>
					cc = fs->csize - csect;
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	895b      	ldrh	r3, [r3, #10]
 800fec4:	461a      	mov	r2, r3
 800fec6:	69fb      	ldr	r3, [r7, #28]
 800fec8:	1ad3      	subs	r3, r2, r3
 800feca:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	7858      	ldrb	r0, [r3, #1]
 800fed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fed2:	69ba      	ldr	r2, [r7, #24]
 800fed4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fed6:	f7fe f85b 	bl	800df90 <disk_read>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d004      	beq.n	800feea <f_read+0x166>
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	2201      	movs	r2, #1
 800fee4:	755a      	strb	r2, [r3, #21]
 800fee6:	2301      	movs	r3, #1
 800fee8:	e087      	b.n	800fffa <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	7d1b      	ldrb	r3, [r3, #20]
 800feee:	b25b      	sxtb	r3, r3
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	da14      	bge.n	800ff1e <f_read+0x19a>
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6a1a      	ldr	r2, [r3, #32]
 800fef8:	69bb      	ldr	r3, [r7, #24]
 800fefa:	1ad3      	subs	r3, r2, r3
 800fefc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d90d      	bls.n	800ff1e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	6a1a      	ldr	r2, [r3, #32]
 800ff06:	69bb      	ldr	r3, [r7, #24]
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	025b      	lsls	r3, r3, #9
 800ff0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff0e:	18d0      	adds	r0, r2, r3
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	3330      	adds	r3, #48	@ 0x30
 800ff14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ff18:	4619      	mov	r1, r3
 800ff1a:	f7fe f919 	bl	800e150 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800ff1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff20:	025b      	lsls	r3, r3, #9
 800ff22:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800ff24:	e050      	b.n	800ffc8 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6a1b      	ldr	r3, [r3, #32]
 800ff2a:	69ba      	ldr	r2, [r7, #24]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d02e      	beq.n	800ff8e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	7d1b      	ldrb	r3, [r3, #20]
 800ff34:	b25b      	sxtb	r3, r3
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	da18      	bge.n	800ff6c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff3a:	697b      	ldr	r3, [r7, #20]
 800ff3c:	7858      	ldrb	r0, [r3, #1]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	6a1a      	ldr	r2, [r3, #32]
 800ff48:	2301      	movs	r3, #1
 800ff4a:	f7fe f841 	bl	800dfd0 <disk_write>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d004      	beq.n	800ff5e <f_read+0x1da>
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	2201      	movs	r2, #1
 800ff58:	755a      	strb	r2, [r3, #21]
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	e04d      	b.n	800fffa <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	7d1b      	ldrb	r3, [r3, #20]
 800ff62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ff66:	b2da      	uxtb	r2, r3
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	7858      	ldrb	r0, [r3, #1]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ff76:	2301      	movs	r3, #1
 800ff78:	69ba      	ldr	r2, [r7, #24]
 800ff7a:	f7fe f809 	bl	800df90 <disk_read>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d004      	beq.n	800ff8e <f_read+0x20a>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2201      	movs	r2, #1
 800ff88:	755a      	strb	r2, [r3, #21]
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	e035      	b.n	800fffa <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	69ba      	ldr	r2, [r7, #24]
 800ff92:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	699b      	ldr	r3, [r3, #24]
 800ff98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff9c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ffa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ffa2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d901      	bls.n	800ffae <f_read+0x22a>
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	699b      	ldr	r3, [r3, #24]
 800ffb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ffbc:	4413      	add	r3, r2
 800ffbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ffc4:	f7fe f8c4 	bl	800e150 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ffc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffcc:	4413      	add	r3, r2
 800ffce:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	699a      	ldr	r2, [r3, #24]
 800ffd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffd6:	441a      	add	r2, r3
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	619a      	str	r2, [r3, #24]
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	681a      	ldr	r2, [r3, #0]
 800ffe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffe2:	441a      	add	r2, r3
 800ffe4:	683b      	ldr	r3, [r7, #0]
 800ffe6:	601a      	str	r2, [r3, #0]
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ffec:	1ad3      	subs	r3, r2, r3
 800ffee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	f47f af01 	bne.w	800fdfa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fff8:	2300      	movs	r3, #0
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3738      	adds	r7, #56	@ 0x38
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}

08010002 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010002:	b580      	push	{r7, lr}
 8010004:	b086      	sub	sp, #24
 8010006:	af00      	add	r7, sp, #0
 8010008:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	f107 0208 	add.w	r2, r7, #8
 8010010:	4611      	mov	r1, r2
 8010012:	4618      	mov	r0, r3
 8010014:	f7ff fc80 	bl	800f918 <validate>
 8010018:	4603      	mov	r3, r0
 801001a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801001c:	7dfb      	ldrb	r3, [r7, #23]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d168      	bne.n	80100f4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	7d1b      	ldrb	r3, [r3, #20]
 8010026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801002a:	2b00      	cmp	r3, #0
 801002c:	d062      	beq.n	80100f4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	7d1b      	ldrb	r3, [r3, #20]
 8010032:	b25b      	sxtb	r3, r3
 8010034:	2b00      	cmp	r3, #0
 8010036:	da15      	bge.n	8010064 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	7858      	ldrb	r0, [r3, #1]
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6a1a      	ldr	r2, [r3, #32]
 8010046:	2301      	movs	r3, #1
 8010048:	f7fd ffc2 	bl	800dfd0 <disk_write>
 801004c:	4603      	mov	r3, r0
 801004e:	2b00      	cmp	r3, #0
 8010050:	d001      	beq.n	8010056 <f_sync+0x54>
 8010052:	2301      	movs	r3, #1
 8010054:	e04f      	b.n	80100f6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	7d1b      	ldrb	r3, [r3, #20]
 801005a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801005e:	b2da      	uxtb	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010064:	f7fd fcf2 	bl	800da4c <get_fattime>
 8010068:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801006a:	68ba      	ldr	r2, [r7, #8]
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010070:	4619      	mov	r1, r3
 8010072:	4610      	mov	r0, r2
 8010074:	f7fe fa9a 	bl	800e5ac <move_window>
 8010078:	4603      	mov	r3, r0
 801007a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801007c:	7dfb      	ldrb	r3, [r7, #23]
 801007e:	2b00      	cmp	r3, #0
 8010080:	d138      	bne.n	80100f4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010086:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	330b      	adds	r3, #11
 801008c:	781a      	ldrb	r2, [r3, #0]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	330b      	adds	r3, #11
 8010092:	f042 0220 	orr.w	r2, r2, #32
 8010096:	b2d2      	uxtb	r2, r2
 8010098:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	6818      	ldr	r0, [r3, #0]
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	689b      	ldr	r3, [r3, #8]
 80100a2:	461a      	mov	r2, r3
 80100a4:	68f9      	ldr	r1, [r7, #12]
 80100a6:	f7fe ffa4 	bl	800eff2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	f103 021c 	add.w	r2, r3, #28
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	68db      	ldr	r3, [r3, #12]
 80100b4:	4619      	mov	r1, r3
 80100b6:	4610      	mov	r0, r2
 80100b8:	f7fe f81e 	bl	800e0f8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	3316      	adds	r3, #22
 80100c0:	6939      	ldr	r1, [r7, #16]
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7fe f818 	bl	800e0f8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	3312      	adds	r3, #18
 80100cc:	2100      	movs	r1, #0
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7fd fff7 	bl	800e0c2 <st_word>
					fs->wflag = 1;
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	2201      	movs	r2, #1
 80100d8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	4618      	mov	r0, r3
 80100de:	f7fe fa93 	bl	800e608 <sync_fs>
 80100e2:	4603      	mov	r3, r0
 80100e4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	7d1b      	ldrb	r3, [r3, #20]
 80100ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80100ee:	b2da      	uxtb	r2, r3
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80100f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80100f6:	4618      	mov	r0, r3
 80100f8:	3718      	adds	r7, #24
 80100fa:	46bd      	mov	sp, r7
 80100fc:	bd80      	pop	{r7, pc}

080100fe <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80100fe:	b580      	push	{r7, lr}
 8010100:	b084      	sub	sp, #16
 8010102:	af00      	add	r7, sp, #0
 8010104:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7ff ff7b 	bl	8010002 <f_sync>
 801010c:	4603      	mov	r3, r0
 801010e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010110:	7bfb      	ldrb	r3, [r7, #15]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d118      	bne.n	8010148 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f107 0208 	add.w	r2, r7, #8
 801011c:	4611      	mov	r1, r2
 801011e:	4618      	mov	r0, r3
 8010120:	f7ff fbfa 	bl	800f918 <validate>
 8010124:	4603      	mov	r3, r0
 8010126:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010128:	7bfb      	ldrb	r3, [r7, #15]
 801012a:	2b00      	cmp	r3, #0
 801012c:	d10c      	bne.n	8010148 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	691b      	ldr	r3, [r3, #16]
 8010132:	4618      	mov	r0, r3
 8010134:	f7fe f996 	bl	800e464 <dec_lock>
 8010138:	4603      	mov	r3, r0
 801013a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801013c:	7bfb      	ldrb	r3, [r7, #15]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d102      	bne.n	8010148 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	2200      	movs	r2, #0
 8010146:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010148:	7bfb      	ldrb	r3, [r7, #15]
}
 801014a:	4618      	mov	r0, r3
 801014c:	3710      	adds	r7, #16
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}

08010152 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8010152:	b580      	push	{r7, lr}
 8010154:	b090      	sub	sp, #64	@ 0x40
 8010156:	af00      	add	r7, sp, #0
 8010158:	6078      	str	r0, [r7, #4]
 801015a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f107 0208 	add.w	r2, r7, #8
 8010162:	4611      	mov	r1, r2
 8010164:	4618      	mov	r0, r3
 8010166:	f7ff fbd7 	bl	800f918 <validate>
 801016a:	4603      	mov	r3, r0
 801016c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8010170:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010174:	2b00      	cmp	r3, #0
 8010176:	d103      	bne.n	8010180 <f_lseek+0x2e>
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	7d5b      	ldrb	r3, [r3, #21]
 801017c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8010180:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8010184:	2b00      	cmp	r3, #0
 8010186:	d002      	beq.n	801018e <f_lseek+0x3c>
 8010188:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801018c:	e1e6      	b.n	801055c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010192:	2b00      	cmp	r3, #0
 8010194:	f000 80d1 	beq.w	801033a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801019e:	d15a      	bne.n	8010256 <f_lseek+0x104>
			tbl = fp->cltbl;
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101a4:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80101a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80101a8:	1d1a      	adds	r2, r3, #4
 80101aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	617b      	str	r3, [r7, #20]
 80101b0:	2302      	movs	r3, #2
 80101b2:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	689b      	ldr	r3, [r3, #8]
 80101b8:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 80101ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d03a      	beq.n	8010236 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80101c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101c2:	613b      	str	r3, [r7, #16]
 80101c4:	2300      	movs	r3, #0
 80101c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80101c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80101ca:	3302      	adds	r3, #2
 80101cc:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 80101ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101d0:	60fb      	str	r3, [r7, #12]
 80101d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80101d4:	3301      	adds	r3, #1
 80101d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fe faa0 	bl	800e722 <get_fat>
 80101e2:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80101e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101e6:	2b01      	cmp	r3, #1
 80101e8:	d804      	bhi.n	80101f4 <f_lseek+0xa2>
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2202      	movs	r2, #2
 80101ee:	755a      	strb	r2, [r3, #21]
 80101f0:	2302      	movs	r3, #2
 80101f2:	e1b3      	b.n	801055c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80101f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80101f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101fa:	d104      	bne.n	8010206 <f_lseek+0xb4>
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2201      	movs	r2, #1
 8010200:	755a      	strb	r2, [r3, #21]
 8010202:	2301      	movs	r3, #1
 8010204:	e1aa      	b.n	801055c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	3301      	adds	r3, #1
 801020a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801020c:	429a      	cmp	r2, r3
 801020e:	d0de      	beq.n	80101ce <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010210:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010212:	697b      	ldr	r3, [r7, #20]
 8010214:	429a      	cmp	r2, r3
 8010216:	d809      	bhi.n	801022c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801021a:	1d1a      	adds	r2, r3, #4
 801021c:	627a      	str	r2, [r7, #36]	@ 0x24
 801021e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010220:	601a      	str	r2, [r3, #0]
 8010222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010224:	1d1a      	adds	r2, r3, #4
 8010226:	627a      	str	r2, [r7, #36]	@ 0x24
 8010228:	693a      	ldr	r2, [r7, #16]
 801022a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	695b      	ldr	r3, [r3, #20]
 8010230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010232:	429a      	cmp	r2, r3
 8010234:	d3c4      	bcc.n	80101c0 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801023a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801023c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801023e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010240:	697b      	ldr	r3, [r7, #20]
 8010242:	429a      	cmp	r2, r3
 8010244:	d803      	bhi.n	801024e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8010246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010248:	2200      	movs	r2, #0
 801024a:	601a      	str	r2, [r3, #0]
 801024c:	e184      	b.n	8010558 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801024e:	2311      	movs	r3, #17
 8010250:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8010254:	e180      	b.n	8010558 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	68db      	ldr	r3, [r3, #12]
 801025a:	683a      	ldr	r2, [r7, #0]
 801025c:	429a      	cmp	r2, r3
 801025e:	d902      	bls.n	8010266 <f_lseek+0x114>
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	683a      	ldr	r2, [r7, #0]
 801026a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801026c:	683b      	ldr	r3, [r7, #0]
 801026e:	2b00      	cmp	r3, #0
 8010270:	f000 8172 	beq.w	8010558 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	3b01      	subs	r3, #1
 8010278:	4619      	mov	r1, r3
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f7fe fcdf 	bl	800ec3e <clmt_clust>
 8010280:	4602      	mov	r2, r0
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8010286:	68ba      	ldr	r2, [r7, #8]
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	69db      	ldr	r3, [r3, #28]
 801028c:	4619      	mov	r1, r3
 801028e:	4610      	mov	r0, r2
 8010290:	f7fe fa28 	bl	800e6e4 <clust2sect>
 8010294:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d104      	bne.n	80102a6 <f_lseek+0x154>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	2202      	movs	r2, #2
 80102a0:	755a      	strb	r2, [r3, #21]
 80102a2:	2302      	movs	r3, #2
 80102a4:	e15a      	b.n	801055c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	3b01      	subs	r3, #1
 80102aa:	0a5b      	lsrs	r3, r3, #9
 80102ac:	68ba      	ldr	r2, [r7, #8]
 80102ae:	8952      	ldrh	r2, [r2, #10]
 80102b0:	3a01      	subs	r2, #1
 80102b2:	4013      	ands	r3, r2
 80102b4:	69ba      	ldr	r2, [r7, #24]
 80102b6:	4413      	add	r3, r2
 80102b8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	699b      	ldr	r3, [r3, #24]
 80102be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102c2:	2b00      	cmp	r3, #0
 80102c4:	f000 8148 	beq.w	8010558 <f_lseek+0x406>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6a1b      	ldr	r3, [r3, #32]
 80102cc:	69ba      	ldr	r2, [r7, #24]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	f000 8142 	beq.w	8010558 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	7d1b      	ldrb	r3, [r3, #20]
 80102d8:	b25b      	sxtb	r3, r3
 80102da:	2b00      	cmp	r3, #0
 80102dc:	da18      	bge.n	8010310 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	7858      	ldrb	r0, [r3, #1]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6a1a      	ldr	r2, [r3, #32]
 80102ec:	2301      	movs	r3, #1
 80102ee:	f7fd fe6f 	bl	800dfd0 <disk_write>
 80102f2:	4603      	mov	r3, r0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d004      	beq.n	8010302 <f_lseek+0x1b0>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	2201      	movs	r2, #1
 80102fc:	755a      	strb	r2, [r3, #21]
 80102fe:	2301      	movs	r3, #1
 8010300:	e12c      	b.n	801055c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	7d1b      	ldrb	r3, [r3, #20]
 8010306:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801030a:	b2da      	uxtb	r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	7858      	ldrb	r0, [r3, #1]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801031a:	2301      	movs	r3, #1
 801031c:	69ba      	ldr	r2, [r7, #24]
 801031e:	f7fd fe37 	bl	800df90 <disk_read>
 8010322:	4603      	mov	r3, r0
 8010324:	2b00      	cmp	r3, #0
 8010326:	d004      	beq.n	8010332 <f_lseek+0x1e0>
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2201      	movs	r2, #1
 801032c:	755a      	strb	r2, [r3, #21]
 801032e:	2301      	movs	r3, #1
 8010330:	e114      	b.n	801055c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	69ba      	ldr	r2, [r7, #24]
 8010336:	621a      	str	r2, [r3, #32]
 8010338:	e10e      	b.n	8010558 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	68db      	ldr	r3, [r3, #12]
 801033e:	683a      	ldr	r2, [r7, #0]
 8010340:	429a      	cmp	r2, r3
 8010342:	d908      	bls.n	8010356 <f_lseek+0x204>
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	7d1b      	ldrb	r3, [r3, #20]
 8010348:	f003 0302 	and.w	r3, r3, #2
 801034c:	2b00      	cmp	r3, #0
 801034e:	d102      	bne.n	8010356 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	699b      	ldr	r3, [r3, #24]
 801035a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801035c:	2300      	movs	r3, #0
 801035e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010364:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8010366:	683b      	ldr	r3, [r7, #0]
 8010368:	2b00      	cmp	r3, #0
 801036a:	f000 80a7 	beq.w	80104bc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	895b      	ldrh	r3, [r3, #10]
 8010372:	025b      	lsls	r3, r3, #9
 8010374:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8010376:	6a3b      	ldr	r3, [r7, #32]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d01b      	beq.n	80103b4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	1e5a      	subs	r2, r3, #1
 8010380:	69fb      	ldr	r3, [r7, #28]
 8010382:	fbb2 f2f3 	udiv	r2, r2, r3
 8010386:	6a3b      	ldr	r3, [r7, #32]
 8010388:	1e59      	subs	r1, r3, #1
 801038a:	69fb      	ldr	r3, [r7, #28]
 801038c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010390:	429a      	cmp	r2, r3
 8010392:	d30f      	bcc.n	80103b4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010394:	6a3b      	ldr	r3, [r7, #32]
 8010396:	1e5a      	subs	r2, r3, #1
 8010398:	69fb      	ldr	r3, [r7, #28]
 801039a:	425b      	negs	r3, r3
 801039c:	401a      	ands	r2, r3
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	699b      	ldr	r3, [r3, #24]
 80103a6:	683a      	ldr	r2, [r7, #0]
 80103a8:	1ad3      	subs	r3, r2, r3
 80103aa:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	69db      	ldr	r3, [r3, #28]
 80103b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80103b2:	e022      	b.n	80103fa <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	689b      	ldr	r3, [r3, #8]
 80103b8:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80103ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d119      	bne.n	80103f4 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2100      	movs	r1, #0
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7fe fba2 	bl	800eb0e <create_chain>
 80103ca:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80103cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103ce:	2b01      	cmp	r3, #1
 80103d0:	d104      	bne.n	80103dc <f_lseek+0x28a>
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2202      	movs	r2, #2
 80103d6:	755a      	strb	r2, [r3, #21]
 80103d8:	2302      	movs	r3, #2
 80103da:	e0bf      	b.n	801055c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80103dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103e2:	d104      	bne.n	80103ee <f_lseek+0x29c>
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	2201      	movs	r2, #1
 80103e8:	755a      	strb	r2, [r3, #21]
 80103ea:	2301      	movs	r3, #1
 80103ec:	e0b6      	b.n	801055c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103f2:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80103f8:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80103fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d05d      	beq.n	80104bc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8010400:	e03a      	b.n	8010478 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8010402:	683a      	ldr	r2, [r7, #0]
 8010404:	69fb      	ldr	r3, [r7, #28]
 8010406:	1ad3      	subs	r3, r2, r3
 8010408:	603b      	str	r3, [r7, #0]
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	699a      	ldr	r2, [r3, #24]
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	441a      	add	r2, r3
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	7d1b      	ldrb	r3, [r3, #20]
 801041a:	f003 0302 	and.w	r3, r3, #2
 801041e:	2b00      	cmp	r3, #0
 8010420:	d00b      	beq.n	801043a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8010426:	4618      	mov	r0, r3
 8010428:	f7fe fb71 	bl	800eb0e <create_chain>
 801042c:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801042e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010430:	2b00      	cmp	r3, #0
 8010432:	d108      	bne.n	8010446 <f_lseek+0x2f4>
							ofs = 0; break;
 8010434:	2300      	movs	r3, #0
 8010436:	603b      	str	r3, [r7, #0]
 8010438:	e022      	b.n	8010480 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801043e:	4618      	mov	r0, r3
 8010440:	f7fe f96f 	bl	800e722 <get_fat>
 8010444:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801044c:	d104      	bne.n	8010458 <f_lseek+0x306>
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2201      	movs	r2, #1
 8010452:	755a      	strb	r2, [r3, #21]
 8010454:	2301      	movs	r3, #1
 8010456:	e081      	b.n	801055c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8010458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801045a:	2b01      	cmp	r3, #1
 801045c:	d904      	bls.n	8010468 <f_lseek+0x316>
 801045e:	68bb      	ldr	r3, [r7, #8]
 8010460:	695b      	ldr	r3, [r3, #20]
 8010462:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010464:	429a      	cmp	r2, r3
 8010466:	d304      	bcc.n	8010472 <f_lseek+0x320>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	2202      	movs	r2, #2
 801046c:	755a      	strb	r2, [r3, #21]
 801046e:	2302      	movs	r3, #2
 8010470:	e074      	b.n	801055c <f_lseek+0x40a>
					fp->clust = clst;
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010476:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8010478:	683a      	ldr	r2, [r7, #0]
 801047a:	69fb      	ldr	r3, [r7, #28]
 801047c:	429a      	cmp	r2, r3
 801047e:	d8c0      	bhi.n	8010402 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	699a      	ldr	r2, [r3, #24]
 8010484:	683b      	ldr	r3, [r7, #0]
 8010486:	441a      	add	r2, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801048c:	683b      	ldr	r3, [r7, #0]
 801048e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010492:	2b00      	cmp	r3, #0
 8010494:	d012      	beq.n	80104bc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801049a:	4618      	mov	r0, r3
 801049c:	f7fe f922 	bl	800e6e4 <clust2sect>
 80104a0:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80104a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d104      	bne.n	80104b2 <f_lseek+0x360>
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2202      	movs	r2, #2
 80104ac:	755a      	strb	r2, [r3, #21]
 80104ae:	2302      	movs	r3, #2
 80104b0:	e054      	b.n	801055c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80104b2:	683b      	ldr	r3, [r7, #0]
 80104b4:	0a5b      	lsrs	r3, r3, #9
 80104b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104b8:	4413      	add	r3, r2
 80104ba:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	699a      	ldr	r2, [r3, #24]
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	68db      	ldr	r3, [r3, #12]
 80104c4:	429a      	cmp	r2, r3
 80104c6:	d90a      	bls.n	80104de <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	699a      	ldr	r2, [r3, #24]
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	7d1b      	ldrb	r3, [r3, #20]
 80104d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80104d8:	b2da      	uxtb	r2, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	699b      	ldr	r3, [r3, #24]
 80104e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d036      	beq.n	8010558 <f_lseek+0x406>
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	6a1b      	ldr	r3, [r3, #32]
 80104ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d031      	beq.n	8010558 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	7d1b      	ldrb	r3, [r3, #20]
 80104f8:	b25b      	sxtb	r3, r3
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	da18      	bge.n	8010530 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80104fe:	68bb      	ldr	r3, [r7, #8]
 8010500:	7858      	ldrb	r0, [r3, #1]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	6a1a      	ldr	r2, [r3, #32]
 801050c:	2301      	movs	r3, #1
 801050e:	f7fd fd5f 	bl	800dfd0 <disk_write>
 8010512:	4603      	mov	r3, r0
 8010514:	2b00      	cmp	r3, #0
 8010516:	d004      	beq.n	8010522 <f_lseek+0x3d0>
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2201      	movs	r2, #1
 801051c:	755a      	strb	r2, [r3, #21]
 801051e:	2301      	movs	r3, #1
 8010520:	e01c      	b.n	801055c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	7d1b      	ldrb	r3, [r3, #20]
 8010526:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801052a:	b2da      	uxtb	r2, r3
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	7858      	ldrb	r0, [r3, #1]
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 801053a:	2301      	movs	r3, #1
 801053c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801053e:	f7fd fd27 	bl	800df90 <disk_read>
 8010542:	4603      	mov	r3, r0
 8010544:	2b00      	cmp	r3, #0
 8010546:	d004      	beq.n	8010552 <f_lseek+0x400>
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2201      	movs	r2, #1
 801054c:	755a      	strb	r2, [r3, #21]
 801054e:	2301      	movs	r3, #1
 8010550:	e004      	b.n	801055c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010556:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8010558:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801055c:	4618      	mov	r0, r3
 801055e:	3740      	adds	r7, #64	@ 0x40
 8010560:	46bd      	mov	sp, r7
 8010562:	bd80      	pop	{r7, pc}

08010564 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010564:	b480      	push	{r7}
 8010566:	b087      	sub	sp, #28
 8010568:	af00      	add	r7, sp, #0
 801056a:	60f8      	str	r0, [r7, #12]
 801056c:	60b9      	str	r1, [r7, #8]
 801056e:	4613      	mov	r3, r2
 8010570:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010572:	2301      	movs	r3, #1
 8010574:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010576:	2300      	movs	r3, #0
 8010578:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801057a:	4b1f      	ldr	r3, [pc, #124]	@ (80105f8 <FATFS_LinkDriverEx+0x94>)
 801057c:	7b9b      	ldrb	r3, [r3, #14]
 801057e:	b2db      	uxtb	r3, r3
 8010580:	2b01      	cmp	r3, #1
 8010582:	d831      	bhi.n	80105e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010584:	4b1c      	ldr	r3, [pc, #112]	@ (80105f8 <FATFS_LinkDriverEx+0x94>)
 8010586:	7b9b      	ldrb	r3, [r3, #14]
 8010588:	b2db      	uxtb	r3, r3
 801058a:	461a      	mov	r2, r3
 801058c:	4b1a      	ldr	r3, [pc, #104]	@ (80105f8 <FATFS_LinkDriverEx+0x94>)
 801058e:	2100      	movs	r1, #0
 8010590:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010592:	4b19      	ldr	r3, [pc, #100]	@ (80105f8 <FATFS_LinkDriverEx+0x94>)
 8010594:	7b9b      	ldrb	r3, [r3, #14]
 8010596:	b2db      	uxtb	r3, r3
 8010598:	4a17      	ldr	r2, [pc, #92]	@ (80105f8 <FATFS_LinkDriverEx+0x94>)
 801059a:	009b      	lsls	r3, r3, #2
 801059c:	4413      	add	r3, r2
 801059e:	68fa      	ldr	r2, [r7, #12]
 80105a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80105a2:	4b15      	ldr	r3, [pc, #84]	@ (80105f8 <FATFS_LinkDriverEx+0x94>)
 80105a4:	7b9b      	ldrb	r3, [r3, #14]
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	461a      	mov	r2, r3
 80105aa:	4b13      	ldr	r3, [pc, #76]	@ (80105f8 <FATFS_LinkDriverEx+0x94>)
 80105ac:	4413      	add	r3, r2
 80105ae:	79fa      	ldrb	r2, [r7, #7]
 80105b0:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 80105b2:	4b11      	ldr	r3, [pc, #68]	@ (80105f8 <FATFS_LinkDriverEx+0x94>)
 80105b4:	7b9b      	ldrb	r3, [r3, #14]
 80105b6:	b2db      	uxtb	r3, r3
 80105b8:	1c5a      	adds	r2, r3, #1
 80105ba:	b2d1      	uxtb	r1, r2
 80105bc:	4a0e      	ldr	r2, [pc, #56]	@ (80105f8 <FATFS_LinkDriverEx+0x94>)
 80105be:	7391      	strb	r1, [r2, #14]
 80105c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80105c2:	7dbb      	ldrb	r3, [r7, #22]
 80105c4:	3330      	adds	r3, #48	@ 0x30
 80105c6:	b2da      	uxtb	r2, r3
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	3301      	adds	r3, #1
 80105d0:	223a      	movs	r2, #58	@ 0x3a
 80105d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	3302      	adds	r3, #2
 80105d8:	222f      	movs	r2, #47	@ 0x2f
 80105da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80105dc:	68bb      	ldr	r3, [r7, #8]
 80105de:	3303      	adds	r3, #3
 80105e0:	2200      	movs	r2, #0
 80105e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80105e4:	2300      	movs	r3, #0
 80105e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80105e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	371c      	adds	r7, #28
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	20009dc0 	.word	0x20009dc0

080105fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010606:	2200      	movs	r2, #0
 8010608:	6839      	ldr	r1, [r7, #0]
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f7ff ffaa 	bl	8010564 <FATFS_LinkDriverEx>
 8010610:	4603      	mov	r3, r0
}
 8010612:	4618      	mov	r0, r3
 8010614:	3708      	adds	r7, #8
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}

0801061a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801061a:	b480      	push	{r7}
 801061c:	b085      	sub	sp, #20
 801061e:	af00      	add	r7, sp, #0
 8010620:	4603      	mov	r3, r0
 8010622:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010624:	2300      	movs	r3, #0
 8010626:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801062c:	2b84      	cmp	r3, #132	@ 0x84
 801062e:	d005      	beq.n	801063c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010630:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	4413      	add	r3, r2
 8010638:	3303      	adds	r3, #3
 801063a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801063c:	68fb      	ldr	r3, [r7, #12]
}
 801063e:	4618      	mov	r0, r3
 8010640:	3714      	adds	r7, #20
 8010642:	46bd      	mov	sp, r7
 8010644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010648:	4770      	bx	lr

0801064a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801064a:	b480      	push	{r7}
 801064c:	b083      	sub	sp, #12
 801064e:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010650:	f3ef 8305 	mrs	r3, IPSR
 8010654:	607b      	str	r3, [r7, #4]
  return(result);
 8010656:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010658:	2b00      	cmp	r3, #0
 801065a:	bf14      	ite	ne
 801065c:	2301      	movne	r3, #1
 801065e:	2300      	moveq	r3, #0
 8010660:	b2db      	uxtb	r3, r3
}
 8010662:	4618      	mov	r0, r3
 8010664:	370c      	adds	r7, #12
 8010666:	46bd      	mov	sp, r7
 8010668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801066c:	4770      	bx	lr

0801066e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801066e:	b580      	push	{r7, lr}
 8010670:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010672:	f001 f98d 	bl	8011990 <vTaskStartScheduler>
  
  return osOK;
 8010676:	2300      	movs	r3, #0
}
 8010678:	4618      	mov	r0, r3
 801067a:	bd80      	pop	{r7, pc}

0801067c <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 801067c:	b580      	push	{r7, lr}
 801067e:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010680:	f001 fe02 	bl	8012288 <xTaskGetSchedulerState>
 8010684:	4603      	mov	r3, r0
 8010686:	2b01      	cmp	r3, #1
 8010688:	d101      	bne.n	801068e <osKernelRunning+0x12>
    return 0;
 801068a:	2300      	movs	r3, #0
 801068c:	e000      	b.n	8010690 <osKernelRunning+0x14>
  else
    return 1;
 801068e:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010690:	4618      	mov	r0, r3
 8010692:	bd80      	pop	{r7, pc}

08010694 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010698:	f7ff ffd7 	bl	801064a <inHandlerMode>
 801069c:	4603      	mov	r3, r0
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d003      	beq.n	80106aa <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80106a2:	f001 faa1 	bl	8011be8 <xTaskGetTickCountFromISR>
 80106a6:	4603      	mov	r3, r0
 80106a8:	e002      	b.n	80106b0 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80106aa:	f001 fa8d 	bl	8011bc8 <xTaskGetTickCount>
 80106ae:	4603      	mov	r3, r0
  }
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	bd80      	pop	{r7, pc}

080106b4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80106b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106b6:	b089      	sub	sp, #36	@ 0x24
 80106b8:	af04      	add	r7, sp, #16
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	695b      	ldr	r3, [r3, #20]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d020      	beq.n	8010708 <osThreadCreate+0x54>
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	699b      	ldr	r3, [r3, #24]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d01c      	beq.n	8010708 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	685c      	ldr	r4, [r3, #4]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	691e      	ldr	r6, [r3, #16]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106e0:	4618      	mov	r0, r3
 80106e2:	f7ff ff9a 	bl	801061a <makeFreeRtosPriority>
 80106e6:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	695b      	ldr	r3, [r3, #20]
 80106ec:	687a      	ldr	r2, [r7, #4]
 80106ee:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106f0:	9202      	str	r2, [sp, #8]
 80106f2:	9301      	str	r3, [sp, #4]
 80106f4:	9100      	str	r1, [sp, #0]
 80106f6:	683b      	ldr	r3, [r7, #0]
 80106f8:	4632      	mov	r2, r6
 80106fa:	4629      	mov	r1, r5
 80106fc:	4620      	mov	r0, r4
 80106fe:	f000 ff4d 	bl	801159c <xTaskCreateStatic>
 8010702:	4603      	mov	r3, r0
 8010704:	60fb      	str	r3, [r7, #12]
 8010706:	e01c      	b.n	8010742 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	685c      	ldr	r4, [r3, #4]
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010714:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801071c:	4618      	mov	r0, r3
 801071e:	f7ff ff7c 	bl	801061a <makeFreeRtosPriority>
 8010722:	4602      	mov	r2, r0
 8010724:	f107 030c 	add.w	r3, r7, #12
 8010728:	9301      	str	r3, [sp, #4]
 801072a:	9200      	str	r2, [sp, #0]
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	4632      	mov	r2, r6
 8010730:	4629      	mov	r1, r5
 8010732:	4620      	mov	r0, r4
 8010734:	f000 ff98 	bl	8011668 <xTaskCreate>
 8010738:	4603      	mov	r3, r0
 801073a:	2b01      	cmp	r3, #1
 801073c:	d001      	beq.n	8010742 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801073e:	2300      	movs	r3, #0
 8010740:	e000      	b.n	8010744 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010742:	68fb      	ldr	r3, [r7, #12]
}
 8010744:	4618      	mov	r0, r3
 8010746:	3714      	adds	r7, #20
 8010748:	46bd      	mov	sp, r7
 801074a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801074c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b084      	sub	sp, #16
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d001      	beq.n	8010762 <osDelay+0x16>
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	e000      	b.n	8010764 <osDelay+0x18>
 8010762:	2301      	movs	r3, #1
 8010764:	4618      	mov	r0, r3
 8010766:	f001 f8db 	bl	8011920 <vTaskDelay>
  
  return osOK;
 801076a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801076c:	4618      	mov	r0, r3
 801076e:	3710      	adds	r7, #16
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}

08010774 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010774:	b590      	push	{r4, r7, lr}
 8010776:	b085      	sub	sp, #20
 8010778:	af02      	add	r7, sp, #8
 801077a:	6078      	str	r0, [r7, #4]
 801077c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	689b      	ldr	r3, [r3, #8]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d011      	beq.n	80107aa <osMessageCreate+0x36>
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d00d      	beq.n	80107aa <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	6818      	ldr	r0, [r3, #0]
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6859      	ldr	r1, [r3, #4]
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	689a      	ldr	r2, [r3, #8]
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	68db      	ldr	r3, [r3, #12]
 801079e:	2400      	movs	r4, #0
 80107a0:	9400      	str	r4, [sp, #0]
 80107a2:	f000 f9e3 	bl	8010b6c <xQueueGenericCreateStatic>
 80107a6:	4603      	mov	r3, r0
 80107a8:	e008      	b.n	80107bc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	6818      	ldr	r0, [r3, #0]
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	685b      	ldr	r3, [r3, #4]
 80107b2:	2200      	movs	r2, #0
 80107b4:	4619      	mov	r1, r3
 80107b6:	f000 fa60 	bl	8010c7a <xQueueGenericCreate>
 80107ba:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80107bc:	4618      	mov	r0, r3
 80107be:	370c      	adds	r7, #12
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd90      	pop	{r4, r7, pc}

080107c4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b086      	sub	sp, #24
 80107c8:	af00      	add	r7, sp, #0
 80107ca:	60f8      	str	r0, [r7, #12]
 80107cc:	60b9      	str	r1, [r7, #8]
 80107ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80107d0:	2300      	movs	r3, #0
 80107d2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d101      	bne.n	80107e2 <osMessagePut+0x1e>
    ticks = 1;
 80107de:	2301      	movs	r3, #1
 80107e0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80107e2:	f7ff ff32 	bl	801064a <inHandlerMode>
 80107e6:	4603      	mov	r3, r0
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d018      	beq.n	801081e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80107ec:	f107 0210 	add.w	r2, r7, #16
 80107f0:	f107 0108 	add.w	r1, r7, #8
 80107f4:	2300      	movs	r3, #0
 80107f6:	68f8      	ldr	r0, [r7, #12]
 80107f8:	f000 fbac 	bl	8010f54 <xQueueGenericSendFromISR>
 80107fc:	4603      	mov	r3, r0
 80107fe:	2b01      	cmp	r3, #1
 8010800:	d001      	beq.n	8010806 <osMessagePut+0x42>
      return osErrorOS;
 8010802:	23ff      	movs	r3, #255	@ 0xff
 8010804:	e018      	b.n	8010838 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d014      	beq.n	8010836 <osMessagePut+0x72>
 801080c:	4b0c      	ldr	r3, [pc, #48]	@ (8010840 <osMessagePut+0x7c>)
 801080e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010812:	601a      	str	r2, [r3, #0]
 8010814:	f3bf 8f4f 	dsb	sy
 8010818:	f3bf 8f6f 	isb	sy
 801081c:	e00b      	b.n	8010836 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801081e:	f107 0108 	add.w	r1, r7, #8
 8010822:	2300      	movs	r3, #0
 8010824:	697a      	ldr	r2, [r7, #20]
 8010826:	68f8      	ldr	r0, [r7, #12]
 8010828:	f000 fa8a 	bl	8010d40 <xQueueGenericSend>
 801082c:	4603      	mov	r3, r0
 801082e:	2b01      	cmp	r3, #1
 8010830:	d001      	beq.n	8010836 <osMessagePut+0x72>
      return osErrorOS;
 8010832:	23ff      	movs	r3, #255	@ 0xff
 8010834:	e000      	b.n	8010838 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010836:	2300      	movs	r3, #0
}
 8010838:	4618      	mov	r0, r3
 801083a:	3718      	adds	r7, #24
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}
 8010840:	e000ed04 	.word	0xe000ed04

08010844 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010844:	b590      	push	{r4, r7, lr}
 8010846:	b08b      	sub	sp, #44	@ 0x2c
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010850:	68bb      	ldr	r3, [r7, #8]
 8010852:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010854:	2300      	movs	r3, #0
 8010856:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d10a      	bne.n	8010874 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801085e:	2380      	movs	r3, #128	@ 0x80
 8010860:	617b      	str	r3, [r7, #20]
    return event;
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	461c      	mov	r4, r3
 8010866:	f107 0314 	add.w	r3, r7, #20
 801086a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801086e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010872:	e054      	b.n	801091e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010874:	2300      	movs	r3, #0
 8010876:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010878:	2300      	movs	r3, #0
 801087a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010882:	d103      	bne.n	801088c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010884:	f04f 33ff 	mov.w	r3, #4294967295
 8010888:	627b      	str	r3, [r7, #36]	@ 0x24
 801088a:	e009      	b.n	80108a0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d006      	beq.n	80108a0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8010896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010898:	2b00      	cmp	r3, #0
 801089a:	d101      	bne.n	80108a0 <osMessageGet+0x5c>
      ticks = 1;
 801089c:	2301      	movs	r3, #1
 801089e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80108a0:	f7ff fed3 	bl	801064a <inHandlerMode>
 80108a4:	4603      	mov	r3, r0
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d01c      	beq.n	80108e4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80108aa:	f107 0220 	add.w	r2, r7, #32
 80108ae:	f107 0314 	add.w	r3, r7, #20
 80108b2:	3304      	adds	r3, #4
 80108b4:	4619      	mov	r1, r3
 80108b6:	68b8      	ldr	r0, [r7, #8]
 80108b8:	f000 fcd8 	bl	801126c <xQueueReceiveFromISR>
 80108bc:	4603      	mov	r3, r0
 80108be:	2b01      	cmp	r3, #1
 80108c0:	d102      	bne.n	80108c8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80108c2:	2310      	movs	r3, #16
 80108c4:	617b      	str	r3, [r7, #20]
 80108c6:	e001      	b.n	80108cc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80108c8:	2300      	movs	r3, #0
 80108ca:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80108cc:	6a3b      	ldr	r3, [r7, #32]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d01d      	beq.n	801090e <osMessageGet+0xca>
 80108d2:	4b15      	ldr	r3, [pc, #84]	@ (8010928 <osMessageGet+0xe4>)
 80108d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80108d8:	601a      	str	r2, [r3, #0]
 80108da:	f3bf 8f4f 	dsb	sy
 80108de:	f3bf 8f6f 	isb	sy
 80108e2:	e014      	b.n	801090e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80108e4:	f107 0314 	add.w	r3, r7, #20
 80108e8:	3304      	adds	r3, #4
 80108ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80108ec:	4619      	mov	r1, r3
 80108ee:	68b8      	ldr	r0, [r7, #8]
 80108f0:	f000 fbd4 	bl	801109c <xQueueReceive>
 80108f4:	4603      	mov	r3, r0
 80108f6:	2b01      	cmp	r3, #1
 80108f8:	d102      	bne.n	8010900 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80108fa:	2310      	movs	r3, #16
 80108fc:	617b      	str	r3, [r7, #20]
 80108fe:	e006      	b.n	801090e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010902:	2b00      	cmp	r3, #0
 8010904:	d101      	bne.n	801090a <osMessageGet+0xc6>
 8010906:	2300      	movs	r3, #0
 8010908:	e000      	b.n	801090c <osMessageGet+0xc8>
 801090a:	2340      	movs	r3, #64	@ 0x40
 801090c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	461c      	mov	r4, r3
 8010912:	f107 0314 	add.w	r3, r7, #20
 8010916:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801091a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801091e:	68f8      	ldr	r0, [r7, #12]
 8010920:	372c      	adds	r7, #44	@ 0x2c
 8010922:	46bd      	mov	sp, r7
 8010924:	bd90      	pop	{r4, r7, pc}
 8010926:	bf00      	nop
 8010928:	e000ed04 	.word	0xe000ed04

0801092c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801092c:	b480      	push	{r7}
 801092e:	b083      	sub	sp, #12
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f103 0208 	add.w	r2, r3, #8
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	f04f 32ff 	mov.w	r2, #4294967295
 8010944:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f103 0208 	add.w	r2, r3, #8
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	f103 0208 	add.w	r2, r3, #8
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2200      	movs	r2, #0
 801095e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010960:	bf00      	nop
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801096c:	b480      	push	{r7}
 801096e:	b083      	sub	sp, #12
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2200      	movs	r2, #0
 8010978:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801097a:	bf00      	nop
 801097c:	370c      	adds	r7, #12
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr

08010986 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010986:	b480      	push	{r7}
 8010988:	b085      	sub	sp, #20
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
 801098e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	685b      	ldr	r3, [r3, #4]
 8010994:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010996:	683b      	ldr	r3, [r7, #0]
 8010998:	68fa      	ldr	r2, [r7, #12]
 801099a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	689a      	ldr	r2, [r3, #8]
 80109a0:	683b      	ldr	r3, [r7, #0]
 80109a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	689b      	ldr	r3, [r3, #8]
 80109a8:	683a      	ldr	r2, [r7, #0]
 80109aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	683a      	ldr	r2, [r7, #0]
 80109b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80109b2:	683b      	ldr	r3, [r7, #0]
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	1c5a      	adds	r2, r3, #1
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	601a      	str	r2, [r3, #0]
}
 80109c2:	bf00      	nop
 80109c4:	3714      	adds	r7, #20
 80109c6:	46bd      	mov	sp, r7
 80109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109cc:	4770      	bx	lr

080109ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80109ce:	b480      	push	{r7}
 80109d0:	b085      	sub	sp, #20
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	6078      	str	r0, [r7, #4]
 80109d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80109d8:	683b      	ldr	r3, [r7, #0]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80109de:	68bb      	ldr	r3, [r7, #8]
 80109e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80109e4:	d103      	bne.n	80109ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	691b      	ldr	r3, [r3, #16]
 80109ea:	60fb      	str	r3, [r7, #12]
 80109ec:	e00c      	b.n	8010a08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	3308      	adds	r3, #8
 80109f2:	60fb      	str	r3, [r7, #12]
 80109f4:	e002      	b.n	80109fc <vListInsert+0x2e>
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	685b      	ldr	r3, [r3, #4]
 80109fa:	60fb      	str	r3, [r7, #12]
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	68ba      	ldr	r2, [r7, #8]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d2f6      	bcs.n	80109f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	685a      	ldr	r2, [r3, #4]
 8010a0c:	683b      	ldr	r3, [r7, #0]
 8010a0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010a10:	683b      	ldr	r3, [r7, #0]
 8010a12:	685b      	ldr	r3, [r3, #4]
 8010a14:	683a      	ldr	r2, [r7, #0]
 8010a16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010a18:	683b      	ldr	r3, [r7, #0]
 8010a1a:	68fa      	ldr	r2, [r7, #12]
 8010a1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	683a      	ldr	r2, [r7, #0]
 8010a22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	687a      	ldr	r2, [r7, #4]
 8010a28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	1c5a      	adds	r2, r3, #1
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	601a      	str	r2, [r3, #0]
}
 8010a34:	bf00      	nop
 8010a36:	3714      	adds	r7, #20
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3e:	4770      	bx	lr

08010a40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010a40:	b480      	push	{r7}
 8010a42:	b085      	sub	sp, #20
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	691b      	ldr	r3, [r3, #16]
 8010a4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	685b      	ldr	r3, [r3, #4]
 8010a52:	687a      	ldr	r2, [r7, #4]
 8010a54:	6892      	ldr	r2, [r2, #8]
 8010a56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	689b      	ldr	r3, [r3, #8]
 8010a5c:	687a      	ldr	r2, [r7, #4]
 8010a5e:	6852      	ldr	r2, [r2, #4]
 8010a60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	685b      	ldr	r3, [r3, #4]
 8010a66:	687a      	ldr	r2, [r7, #4]
 8010a68:	429a      	cmp	r2, r3
 8010a6a:	d103      	bne.n	8010a74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	689a      	ldr	r2, [r3, #8]
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	2200      	movs	r2, #0
 8010a78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	1e5a      	subs	r2, r3, #1
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3714      	adds	r7, #20
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr

08010a94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b084      	sub	sp, #16
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010aa2:	68fb      	ldr	r3, [r7, #12]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d10d      	bne.n	8010ac4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010aac:	b672      	cpsid	i
 8010aae:	f383 8811 	msr	BASEPRI, r3
 8010ab2:	f3bf 8f6f 	isb	sy
 8010ab6:	f3bf 8f4f 	dsb	sy
 8010aba:	b662      	cpsie	i
 8010abc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010abe:	bf00      	nop
 8010ac0:	bf00      	nop
 8010ac2:	e7fd      	b.n	8010ac0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8010ac4:	f001 fe02 	bl	80126cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	681a      	ldr	r2, [r3, #0]
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ad0:	68f9      	ldr	r1, [r7, #12]
 8010ad2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010ad4:	fb01 f303 	mul.w	r3, r1, r3
 8010ad8:	441a      	add	r2, r3
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	681a      	ldr	r2, [r3, #0]
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	681a      	ldr	r2, [r3, #0]
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010af4:	3b01      	subs	r3, #1
 8010af6:	68f9      	ldr	r1, [r7, #12]
 8010af8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8010afa:	fb01 f303 	mul.w	r3, r1, r3
 8010afe:	441a      	add	r2, r3
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	22ff      	movs	r2, #255	@ 0xff
 8010b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	22ff      	movs	r2, #255	@ 0xff
 8010b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010b14:	683b      	ldr	r3, [r7, #0]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d114      	bne.n	8010b44 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b1a:	68fb      	ldr	r3, [r7, #12]
 8010b1c:	691b      	ldr	r3, [r3, #16]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d01a      	beq.n	8010b58 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b22:	68fb      	ldr	r3, [r7, #12]
 8010b24:	3310      	adds	r3, #16
 8010b26:	4618      	mov	r0, r3
 8010b28:	f001 f9de 	bl	8011ee8 <xTaskRemoveFromEventList>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d012      	beq.n	8010b58 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010b32:	4b0d      	ldr	r3, [pc, #52]	@ (8010b68 <xQueueGenericReset+0xd4>)
 8010b34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010b38:	601a      	str	r2, [r3, #0]
 8010b3a:	f3bf 8f4f 	dsb	sy
 8010b3e:	f3bf 8f6f 	isb	sy
 8010b42:	e009      	b.n	8010b58 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	3310      	adds	r3, #16
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f7ff feef 	bl	801092c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	3324      	adds	r3, #36	@ 0x24
 8010b52:	4618      	mov	r0, r3
 8010b54:	f7ff feea 	bl	801092c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010b58:	f001 fdee 	bl	8012738 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010b5c:	2301      	movs	r3, #1
}
 8010b5e:	4618      	mov	r0, r3
 8010b60:	3710      	adds	r7, #16
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}
 8010b66:	bf00      	nop
 8010b68:	e000ed04 	.word	0xe000ed04

08010b6c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b08e      	sub	sp, #56	@ 0x38
 8010b70:	af02      	add	r7, sp, #8
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	607a      	str	r2, [r7, #4]
 8010b78:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d10d      	bne.n	8010b9c <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8010b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b84:	b672      	cpsid	i
 8010b86:	f383 8811 	msr	BASEPRI, r3
 8010b8a:	f3bf 8f6f 	isb	sy
 8010b8e:	f3bf 8f4f 	dsb	sy
 8010b92:	b662      	cpsie	i
 8010b94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010b96:	bf00      	nop
 8010b98:	bf00      	nop
 8010b9a:	e7fd      	b.n	8010b98 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d10d      	bne.n	8010bbe <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8010ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ba6:	b672      	cpsid	i
 8010ba8:	f383 8811 	msr	BASEPRI, r3
 8010bac:	f3bf 8f6f 	isb	sy
 8010bb0:	f3bf 8f4f 	dsb	sy
 8010bb4:	b662      	cpsie	i
 8010bb6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010bb8:	bf00      	nop
 8010bba:	bf00      	nop
 8010bbc:	e7fd      	b.n	8010bba <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d002      	beq.n	8010bca <xQueueGenericCreateStatic+0x5e>
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d001      	beq.n	8010bce <xQueueGenericCreateStatic+0x62>
 8010bca:	2301      	movs	r3, #1
 8010bcc:	e000      	b.n	8010bd0 <xQueueGenericCreateStatic+0x64>
 8010bce:	2300      	movs	r3, #0
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d10d      	bne.n	8010bf0 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8010bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010bd8:	b672      	cpsid	i
 8010bda:	f383 8811 	msr	BASEPRI, r3
 8010bde:	f3bf 8f6f 	isb	sy
 8010be2:	f3bf 8f4f 	dsb	sy
 8010be6:	b662      	cpsie	i
 8010be8:	623b      	str	r3, [r7, #32]
}
 8010bea:	bf00      	nop
 8010bec:	bf00      	nop
 8010bee:	e7fd      	b.n	8010bec <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d102      	bne.n	8010bfc <xQueueGenericCreateStatic+0x90>
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d101      	bne.n	8010c00 <xQueueGenericCreateStatic+0x94>
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	e000      	b.n	8010c02 <xQueueGenericCreateStatic+0x96>
 8010c00:	2300      	movs	r3, #0
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d10d      	bne.n	8010c22 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8010c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c0a:	b672      	cpsid	i
 8010c0c:	f383 8811 	msr	BASEPRI, r3
 8010c10:	f3bf 8f6f 	isb	sy
 8010c14:	f3bf 8f4f 	dsb	sy
 8010c18:	b662      	cpsie	i
 8010c1a:	61fb      	str	r3, [r7, #28]
}
 8010c1c:	bf00      	nop
 8010c1e:	bf00      	nop
 8010c20:	e7fd      	b.n	8010c1e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010c22:	2348      	movs	r3, #72	@ 0x48
 8010c24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	2b48      	cmp	r3, #72	@ 0x48
 8010c2a:	d00d      	beq.n	8010c48 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8010c2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c30:	b672      	cpsid	i
 8010c32:	f383 8811 	msr	BASEPRI, r3
 8010c36:	f3bf 8f6f 	isb	sy
 8010c3a:	f3bf 8f4f 	dsb	sy
 8010c3e:	b662      	cpsie	i
 8010c40:	61bb      	str	r3, [r7, #24]
}
 8010c42:	bf00      	nop
 8010c44:	bf00      	nop
 8010c46:	e7fd      	b.n	8010c44 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010c48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010c4a:	683b      	ldr	r3, [r7, #0]
 8010c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8010c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d00d      	beq.n	8010c70 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c56:	2201      	movs	r2, #1
 8010c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010c5c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c62:	9300      	str	r3, [sp, #0]
 8010c64:	4613      	mov	r3, r2
 8010c66:	687a      	ldr	r2, [r7, #4]
 8010c68:	68b9      	ldr	r1, [r7, #8]
 8010c6a:	68f8      	ldr	r0, [r7, #12]
 8010c6c:	f000 f848 	bl	8010d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8010c72:	4618      	mov	r0, r3
 8010c74:	3730      	adds	r7, #48	@ 0x30
 8010c76:	46bd      	mov	sp, r7
 8010c78:	bd80      	pop	{r7, pc}

08010c7a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010c7a:	b580      	push	{r7, lr}
 8010c7c:	b08a      	sub	sp, #40	@ 0x28
 8010c7e:	af02      	add	r7, sp, #8
 8010c80:	60f8      	str	r0, [r7, #12]
 8010c82:	60b9      	str	r1, [r7, #8]
 8010c84:	4613      	mov	r3, r2
 8010c86:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d10d      	bne.n	8010caa <xQueueGenericCreate+0x30>
	__asm volatile
 8010c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010c92:	b672      	cpsid	i
 8010c94:	f383 8811 	msr	BASEPRI, r3
 8010c98:	f3bf 8f6f 	isb	sy
 8010c9c:	f3bf 8f4f 	dsb	sy
 8010ca0:	b662      	cpsie	i
 8010ca2:	613b      	str	r3, [r7, #16]
}
 8010ca4:	bf00      	nop
 8010ca6:	bf00      	nop
 8010ca8:	e7fd      	b.n	8010ca6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010caa:	68bb      	ldr	r3, [r7, #8]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d102      	bne.n	8010cb6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	61fb      	str	r3, [r7, #28]
 8010cb4:	e004      	b.n	8010cc0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	68ba      	ldr	r2, [r7, #8]
 8010cba:	fb02 f303 	mul.w	r3, r2, r3
 8010cbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010cc0:	69fb      	ldr	r3, [r7, #28]
 8010cc2:	3348      	adds	r3, #72	@ 0x48
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f001 fe2f 	bl	8012928 <pvPortMalloc>
 8010cca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010ccc:	69bb      	ldr	r3, [r7, #24]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d011      	beq.n	8010cf6 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010cd2:	69bb      	ldr	r3, [r7, #24]
 8010cd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010cd6:	697b      	ldr	r3, [r7, #20]
 8010cd8:	3348      	adds	r3, #72	@ 0x48
 8010cda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010cdc:	69bb      	ldr	r3, [r7, #24]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010ce4:	79fa      	ldrb	r2, [r7, #7]
 8010ce6:	69bb      	ldr	r3, [r7, #24]
 8010ce8:	9300      	str	r3, [sp, #0]
 8010cea:	4613      	mov	r3, r2
 8010cec:	697a      	ldr	r2, [r7, #20]
 8010cee:	68b9      	ldr	r1, [r7, #8]
 8010cf0:	68f8      	ldr	r0, [r7, #12]
 8010cf2:	f000 f805 	bl	8010d00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010cf6:	69bb      	ldr	r3, [r7, #24]
	}
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	3720      	adds	r7, #32
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b084      	sub	sp, #16
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	60f8      	str	r0, [r7, #12]
 8010d08:	60b9      	str	r1, [r7, #8]
 8010d0a:	607a      	str	r2, [r7, #4]
 8010d0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d103      	bne.n	8010d1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010d14:	69bb      	ldr	r3, [r7, #24]
 8010d16:	69ba      	ldr	r2, [r7, #24]
 8010d18:	601a      	str	r2, [r3, #0]
 8010d1a:	e002      	b.n	8010d22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010d1c:	69bb      	ldr	r3, [r7, #24]
 8010d1e:	687a      	ldr	r2, [r7, #4]
 8010d20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010d22:	69bb      	ldr	r3, [r7, #24]
 8010d24:	68fa      	ldr	r2, [r7, #12]
 8010d26:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010d28:	69bb      	ldr	r3, [r7, #24]
 8010d2a:	68ba      	ldr	r2, [r7, #8]
 8010d2c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010d2e:	2101      	movs	r1, #1
 8010d30:	69b8      	ldr	r0, [r7, #24]
 8010d32:	f7ff feaf 	bl	8010a94 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010d36:	bf00      	nop
 8010d38:	3710      	adds	r7, #16
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
	...

08010d40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b08e      	sub	sp, #56	@ 0x38
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	60f8      	str	r0, [r7, #12]
 8010d48:	60b9      	str	r1, [r7, #8]
 8010d4a:	607a      	str	r2, [r7, #4]
 8010d4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010d4e:	2300      	movs	r3, #0
 8010d50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d10d      	bne.n	8010d78 <xQueueGenericSend+0x38>
	__asm volatile
 8010d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d60:	b672      	cpsid	i
 8010d62:	f383 8811 	msr	BASEPRI, r3
 8010d66:	f3bf 8f6f 	isb	sy
 8010d6a:	f3bf 8f4f 	dsb	sy
 8010d6e:	b662      	cpsie	i
 8010d70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010d72:	bf00      	nop
 8010d74:	bf00      	nop
 8010d76:	e7fd      	b.n	8010d74 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d103      	bne.n	8010d86 <xQueueGenericSend+0x46>
 8010d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d101      	bne.n	8010d8a <xQueueGenericSend+0x4a>
 8010d86:	2301      	movs	r3, #1
 8010d88:	e000      	b.n	8010d8c <xQueueGenericSend+0x4c>
 8010d8a:	2300      	movs	r3, #0
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d10d      	bne.n	8010dac <xQueueGenericSend+0x6c>
	__asm volatile
 8010d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d94:	b672      	cpsid	i
 8010d96:	f383 8811 	msr	BASEPRI, r3
 8010d9a:	f3bf 8f6f 	isb	sy
 8010d9e:	f3bf 8f4f 	dsb	sy
 8010da2:	b662      	cpsie	i
 8010da4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010da6:	bf00      	nop
 8010da8:	bf00      	nop
 8010daa:	e7fd      	b.n	8010da8 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	2b02      	cmp	r3, #2
 8010db0:	d103      	bne.n	8010dba <xQueueGenericSend+0x7a>
 8010db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010db4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010db6:	2b01      	cmp	r3, #1
 8010db8:	d101      	bne.n	8010dbe <xQueueGenericSend+0x7e>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	e000      	b.n	8010dc0 <xQueueGenericSend+0x80>
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d10d      	bne.n	8010de0 <xQueueGenericSend+0xa0>
	__asm volatile
 8010dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dc8:	b672      	cpsid	i
 8010dca:	f383 8811 	msr	BASEPRI, r3
 8010dce:	f3bf 8f6f 	isb	sy
 8010dd2:	f3bf 8f4f 	dsb	sy
 8010dd6:	b662      	cpsie	i
 8010dd8:	623b      	str	r3, [r7, #32]
}
 8010dda:	bf00      	nop
 8010ddc:	bf00      	nop
 8010dde:	e7fd      	b.n	8010ddc <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010de0:	f001 fa52 	bl	8012288 <xTaskGetSchedulerState>
 8010de4:	4603      	mov	r3, r0
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d102      	bne.n	8010df0 <xQueueGenericSend+0xb0>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d101      	bne.n	8010df4 <xQueueGenericSend+0xb4>
 8010df0:	2301      	movs	r3, #1
 8010df2:	e000      	b.n	8010df6 <xQueueGenericSend+0xb6>
 8010df4:	2300      	movs	r3, #0
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d10d      	bne.n	8010e16 <xQueueGenericSend+0xd6>
	__asm volatile
 8010dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010dfe:	b672      	cpsid	i
 8010e00:	f383 8811 	msr	BASEPRI, r3
 8010e04:	f3bf 8f6f 	isb	sy
 8010e08:	f3bf 8f4f 	dsb	sy
 8010e0c:	b662      	cpsie	i
 8010e0e:	61fb      	str	r3, [r7, #28]
}
 8010e10:	bf00      	nop
 8010e12:	bf00      	nop
 8010e14:	e7fd      	b.n	8010e12 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010e16:	f001 fc59 	bl	80126cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d302      	bcc.n	8010e2c <xQueueGenericSend+0xec>
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	2b02      	cmp	r3, #2
 8010e2a:	d129      	bne.n	8010e80 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010e2c:	683a      	ldr	r2, [r7, #0]
 8010e2e:	68b9      	ldr	r1, [r7, #8]
 8010e30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010e32:	f000 faa3 	bl	801137c <prvCopyDataToQueue>
 8010e36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d010      	beq.n	8010e62 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e42:	3324      	adds	r3, #36	@ 0x24
 8010e44:	4618      	mov	r0, r3
 8010e46:	f001 f84f 	bl	8011ee8 <xTaskRemoveFromEventList>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d013      	beq.n	8010e78 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010e50:	4b3f      	ldr	r3, [pc, #252]	@ (8010f50 <xQueueGenericSend+0x210>)
 8010e52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e56:	601a      	str	r2, [r3, #0]
 8010e58:	f3bf 8f4f 	dsb	sy
 8010e5c:	f3bf 8f6f 	isb	sy
 8010e60:	e00a      	b.n	8010e78 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d007      	beq.n	8010e78 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010e68:	4b39      	ldr	r3, [pc, #228]	@ (8010f50 <xQueueGenericSend+0x210>)
 8010e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010e6e:	601a      	str	r2, [r3, #0]
 8010e70:	f3bf 8f4f 	dsb	sy
 8010e74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010e78:	f001 fc5e 	bl	8012738 <vPortExitCritical>
				return pdPASS;
 8010e7c:	2301      	movs	r3, #1
 8010e7e:	e063      	b.n	8010f48 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d103      	bne.n	8010e8e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010e86:	f001 fc57 	bl	8012738 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010e8a:	2300      	movs	r3, #0
 8010e8c:	e05c      	b.n	8010f48 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d106      	bne.n	8010ea2 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010e94:	f107 0314 	add.w	r3, r7, #20
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f001 f88b 	bl	8011fb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010e9e:	2301      	movs	r3, #1
 8010ea0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010ea2:	f001 fc49 	bl	8012738 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010ea6:	f000 fde1 	bl	8011a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010eaa:	f001 fc0f 	bl	80126cc <vPortEnterCritical>
 8010eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eb0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010eb4:	b25b      	sxtb	r3, r3
 8010eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010eba:	d103      	bne.n	8010ec4 <xQueueGenericSend+0x184>
 8010ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ebe:	2200      	movs	r2, #0
 8010ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ec6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010eca:	b25b      	sxtb	r3, r3
 8010ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ed0:	d103      	bne.n	8010eda <xQueueGenericSend+0x19a>
 8010ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010eda:	f001 fc2d 	bl	8012738 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010ede:	1d3a      	adds	r2, r7, #4
 8010ee0:	f107 0314 	add.w	r3, r7, #20
 8010ee4:	4611      	mov	r1, r2
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f001 f87a 	bl	8011fe0 <xTaskCheckForTimeOut>
 8010eec:	4603      	mov	r3, r0
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d124      	bne.n	8010f3c <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010ef2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ef4:	f000 fb3a 	bl	801156c <prvIsQueueFull>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d018      	beq.n	8010f30 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f00:	3310      	adds	r3, #16
 8010f02:	687a      	ldr	r2, [r7, #4]
 8010f04:	4611      	mov	r1, r2
 8010f06:	4618      	mov	r0, r3
 8010f08:	f000 ffc6 	bl	8011e98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010f0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f0e:	f000 fac5 	bl	801149c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010f12:	f000 fdb9 	bl	8011a88 <xTaskResumeAll>
 8010f16:	4603      	mov	r3, r0
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	f47f af7c 	bne.w	8010e16 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8010f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8010f50 <xQueueGenericSend+0x210>)
 8010f20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010f24:	601a      	str	r2, [r3, #0]
 8010f26:	f3bf 8f4f 	dsb	sy
 8010f2a:	f3bf 8f6f 	isb	sy
 8010f2e:	e772      	b.n	8010e16 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010f30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f32:	f000 fab3 	bl	801149c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010f36:	f000 fda7 	bl	8011a88 <xTaskResumeAll>
 8010f3a:	e76c      	b.n	8010e16 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010f3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010f3e:	f000 faad 	bl	801149c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010f42:	f000 fda1 	bl	8011a88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010f46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010f48:	4618      	mov	r0, r3
 8010f4a:	3738      	adds	r7, #56	@ 0x38
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	bd80      	pop	{r7, pc}
 8010f50:	e000ed04 	.word	0xe000ed04

08010f54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b08e      	sub	sp, #56	@ 0x38
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	60f8      	str	r0, [r7, #12]
 8010f5c:	60b9      	str	r1, [r7, #8]
 8010f5e:	607a      	str	r2, [r7, #4]
 8010f60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d10d      	bne.n	8010f88 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8010f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f70:	b672      	cpsid	i
 8010f72:	f383 8811 	msr	BASEPRI, r3
 8010f76:	f3bf 8f6f 	isb	sy
 8010f7a:	f3bf 8f4f 	dsb	sy
 8010f7e:	b662      	cpsie	i
 8010f80:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010f82:	bf00      	nop
 8010f84:	bf00      	nop
 8010f86:	e7fd      	b.n	8010f84 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d103      	bne.n	8010f96 <xQueueGenericSendFromISR+0x42>
 8010f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d101      	bne.n	8010f9a <xQueueGenericSendFromISR+0x46>
 8010f96:	2301      	movs	r3, #1
 8010f98:	e000      	b.n	8010f9c <xQueueGenericSendFromISR+0x48>
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d10d      	bne.n	8010fbc <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8010fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fa4:	b672      	cpsid	i
 8010fa6:	f383 8811 	msr	BASEPRI, r3
 8010faa:	f3bf 8f6f 	isb	sy
 8010fae:	f3bf 8f4f 	dsb	sy
 8010fb2:	b662      	cpsie	i
 8010fb4:	623b      	str	r3, [r7, #32]
}
 8010fb6:	bf00      	nop
 8010fb8:	bf00      	nop
 8010fba:	e7fd      	b.n	8010fb8 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	2b02      	cmp	r3, #2
 8010fc0:	d103      	bne.n	8010fca <xQueueGenericSendFromISR+0x76>
 8010fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010fc6:	2b01      	cmp	r3, #1
 8010fc8:	d101      	bne.n	8010fce <xQueueGenericSendFromISR+0x7a>
 8010fca:	2301      	movs	r3, #1
 8010fcc:	e000      	b.n	8010fd0 <xQueueGenericSendFromISR+0x7c>
 8010fce:	2300      	movs	r3, #0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d10d      	bne.n	8010ff0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8010fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fd8:	b672      	cpsid	i
 8010fda:	f383 8811 	msr	BASEPRI, r3
 8010fde:	f3bf 8f6f 	isb	sy
 8010fe2:	f3bf 8f4f 	dsb	sy
 8010fe6:	b662      	cpsie	i
 8010fe8:	61fb      	str	r3, [r7, #28]
}
 8010fea:	bf00      	nop
 8010fec:	bf00      	nop
 8010fee:	e7fd      	b.n	8010fec <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ff0:	f001 fc54 	bl	801289c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010ff4:	f3ef 8211 	mrs	r2, BASEPRI
 8010ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ffc:	b672      	cpsid	i
 8010ffe:	f383 8811 	msr	BASEPRI, r3
 8011002:	f3bf 8f6f 	isb	sy
 8011006:	f3bf 8f4f 	dsb	sy
 801100a:	b662      	cpsie	i
 801100c:	61ba      	str	r2, [r7, #24]
 801100e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011010:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011012:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011016:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801101a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801101c:	429a      	cmp	r2, r3
 801101e:	d302      	bcc.n	8011026 <xQueueGenericSendFromISR+0xd2>
 8011020:	683b      	ldr	r3, [r7, #0]
 8011022:	2b02      	cmp	r3, #2
 8011024:	d12c      	bne.n	8011080 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011028:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801102c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011030:	683a      	ldr	r2, [r7, #0]
 8011032:	68b9      	ldr	r1, [r7, #8]
 8011034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011036:	f000 f9a1 	bl	801137c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801103a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 801103e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011042:	d112      	bne.n	801106a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011048:	2b00      	cmp	r3, #0
 801104a:	d016      	beq.n	801107a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801104c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801104e:	3324      	adds	r3, #36	@ 0x24
 8011050:	4618      	mov	r0, r3
 8011052:	f000 ff49 	bl	8011ee8 <xTaskRemoveFromEventList>
 8011056:	4603      	mov	r3, r0
 8011058:	2b00      	cmp	r3, #0
 801105a:	d00e      	beq.n	801107a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d00b      	beq.n	801107a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	2201      	movs	r2, #1
 8011066:	601a      	str	r2, [r3, #0]
 8011068:	e007      	b.n	801107a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801106a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801106e:	3301      	adds	r3, #1
 8011070:	b2db      	uxtb	r3, r3
 8011072:	b25a      	sxtb	r2, r3
 8011074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011076:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 801107a:	2301      	movs	r3, #1
 801107c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 801107e:	e001      	b.n	8011084 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011080:	2300      	movs	r3, #0
 8011082:	637b      	str	r3, [r7, #52]	@ 0x34
 8011084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011086:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011088:	693b      	ldr	r3, [r7, #16]
 801108a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801108e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011092:	4618      	mov	r0, r3
 8011094:	3738      	adds	r7, #56	@ 0x38
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}
	...

0801109c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b08c      	sub	sp, #48	@ 0x30
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	60f8      	str	r0, [r7, #12]
 80110a4:	60b9      	str	r1, [r7, #8]
 80110a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80110a8:	2300      	movs	r3, #0
 80110aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80110b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110b2:	2b00      	cmp	r3, #0
 80110b4:	d10d      	bne.n	80110d2 <xQueueReceive+0x36>
	__asm volatile
 80110b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ba:	b672      	cpsid	i
 80110bc:	f383 8811 	msr	BASEPRI, r3
 80110c0:	f3bf 8f6f 	isb	sy
 80110c4:	f3bf 8f4f 	dsb	sy
 80110c8:	b662      	cpsie	i
 80110ca:	623b      	str	r3, [r7, #32]
}
 80110cc:	bf00      	nop
 80110ce:	bf00      	nop
 80110d0:	e7fd      	b.n	80110ce <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80110d2:	68bb      	ldr	r3, [r7, #8]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d103      	bne.n	80110e0 <xQueueReceive+0x44>
 80110d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80110dc:	2b00      	cmp	r3, #0
 80110de:	d101      	bne.n	80110e4 <xQueueReceive+0x48>
 80110e0:	2301      	movs	r3, #1
 80110e2:	e000      	b.n	80110e6 <xQueueReceive+0x4a>
 80110e4:	2300      	movs	r3, #0
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d10d      	bne.n	8011106 <xQueueReceive+0x6a>
	__asm volatile
 80110ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ee:	b672      	cpsid	i
 80110f0:	f383 8811 	msr	BASEPRI, r3
 80110f4:	f3bf 8f6f 	isb	sy
 80110f8:	f3bf 8f4f 	dsb	sy
 80110fc:	b662      	cpsie	i
 80110fe:	61fb      	str	r3, [r7, #28]
}
 8011100:	bf00      	nop
 8011102:	bf00      	nop
 8011104:	e7fd      	b.n	8011102 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011106:	f001 f8bf 	bl	8012288 <xTaskGetSchedulerState>
 801110a:	4603      	mov	r3, r0
 801110c:	2b00      	cmp	r3, #0
 801110e:	d102      	bne.n	8011116 <xQueueReceive+0x7a>
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d101      	bne.n	801111a <xQueueReceive+0x7e>
 8011116:	2301      	movs	r3, #1
 8011118:	e000      	b.n	801111c <xQueueReceive+0x80>
 801111a:	2300      	movs	r3, #0
 801111c:	2b00      	cmp	r3, #0
 801111e:	d10d      	bne.n	801113c <xQueueReceive+0xa0>
	__asm volatile
 8011120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011124:	b672      	cpsid	i
 8011126:	f383 8811 	msr	BASEPRI, r3
 801112a:	f3bf 8f6f 	isb	sy
 801112e:	f3bf 8f4f 	dsb	sy
 8011132:	b662      	cpsie	i
 8011134:	61bb      	str	r3, [r7, #24]
}
 8011136:	bf00      	nop
 8011138:	bf00      	nop
 801113a:	e7fd      	b.n	8011138 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801113c:	f001 fac6 	bl	80126cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011144:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011148:	2b00      	cmp	r3, #0
 801114a:	d01f      	beq.n	801118c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801114c:	68b9      	ldr	r1, [r7, #8]
 801114e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011150:	f000 f97e 	bl	8011450 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011156:	1e5a      	subs	r2, r3, #1
 8011158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801115a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801115c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801115e:	691b      	ldr	r3, [r3, #16]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d00f      	beq.n	8011184 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011166:	3310      	adds	r3, #16
 8011168:	4618      	mov	r0, r3
 801116a:	f000 febd 	bl	8011ee8 <xTaskRemoveFromEventList>
 801116e:	4603      	mov	r3, r0
 8011170:	2b00      	cmp	r3, #0
 8011172:	d007      	beq.n	8011184 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011174:	4b3c      	ldr	r3, [pc, #240]	@ (8011268 <xQueueReceive+0x1cc>)
 8011176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801117a:	601a      	str	r2, [r3, #0]
 801117c:	f3bf 8f4f 	dsb	sy
 8011180:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011184:	f001 fad8 	bl	8012738 <vPortExitCritical>
				return pdPASS;
 8011188:	2301      	movs	r3, #1
 801118a:	e069      	b.n	8011260 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d103      	bne.n	801119a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011192:	f001 fad1 	bl	8012738 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011196:	2300      	movs	r3, #0
 8011198:	e062      	b.n	8011260 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 801119a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801119c:	2b00      	cmp	r3, #0
 801119e:	d106      	bne.n	80111ae <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80111a0:	f107 0310 	add.w	r3, r7, #16
 80111a4:	4618      	mov	r0, r3
 80111a6:	f000 ff05 	bl	8011fb4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80111aa:	2301      	movs	r3, #1
 80111ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80111ae:	f001 fac3 	bl	8012738 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80111b2:	f000 fc5b 	bl	8011a6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80111b6:	f001 fa89 	bl	80126cc <vPortEnterCritical>
 80111ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80111c0:	b25b      	sxtb	r3, r3
 80111c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111c6:	d103      	bne.n	80111d0 <xQueueReceive+0x134>
 80111c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111ca:	2200      	movs	r2, #0
 80111cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80111d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80111d6:	b25b      	sxtb	r3, r3
 80111d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111dc:	d103      	bne.n	80111e6 <xQueueReceive+0x14a>
 80111de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111e0:	2200      	movs	r2, #0
 80111e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80111e6:	f001 faa7 	bl	8012738 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80111ea:	1d3a      	adds	r2, r7, #4
 80111ec:	f107 0310 	add.w	r3, r7, #16
 80111f0:	4611      	mov	r1, r2
 80111f2:	4618      	mov	r0, r3
 80111f4:	f000 fef4 	bl	8011fe0 <xTaskCheckForTimeOut>
 80111f8:	4603      	mov	r3, r0
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d123      	bne.n	8011246 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80111fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011200:	f000 f99e 	bl	8011540 <prvIsQueueEmpty>
 8011204:	4603      	mov	r3, r0
 8011206:	2b00      	cmp	r3, #0
 8011208:	d017      	beq.n	801123a <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801120a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801120c:	3324      	adds	r3, #36	@ 0x24
 801120e:	687a      	ldr	r2, [r7, #4]
 8011210:	4611      	mov	r1, r2
 8011212:	4618      	mov	r0, r3
 8011214:	f000 fe40 	bl	8011e98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011218:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801121a:	f000 f93f 	bl	801149c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801121e:	f000 fc33 	bl	8011a88 <xTaskResumeAll>
 8011222:	4603      	mov	r3, r0
 8011224:	2b00      	cmp	r3, #0
 8011226:	d189      	bne.n	801113c <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8011228:	4b0f      	ldr	r3, [pc, #60]	@ (8011268 <xQueueReceive+0x1cc>)
 801122a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801122e:	601a      	str	r2, [r3, #0]
 8011230:	f3bf 8f4f 	dsb	sy
 8011234:	f3bf 8f6f 	isb	sy
 8011238:	e780      	b.n	801113c <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801123a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801123c:	f000 f92e 	bl	801149c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011240:	f000 fc22 	bl	8011a88 <xTaskResumeAll>
 8011244:	e77a      	b.n	801113c <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011246:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011248:	f000 f928 	bl	801149c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801124c:	f000 fc1c 	bl	8011a88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011250:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011252:	f000 f975 	bl	8011540 <prvIsQueueEmpty>
 8011256:	4603      	mov	r3, r0
 8011258:	2b00      	cmp	r3, #0
 801125a:	f43f af6f 	beq.w	801113c <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801125e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011260:	4618      	mov	r0, r3
 8011262:	3730      	adds	r7, #48	@ 0x30
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}
 8011268:	e000ed04 	.word	0xe000ed04

0801126c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b08e      	sub	sp, #56	@ 0x38
 8011270:	af00      	add	r7, sp, #0
 8011272:	60f8      	str	r0, [r7, #12]
 8011274:	60b9      	str	r1, [r7, #8]
 8011276:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801127c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801127e:	2b00      	cmp	r3, #0
 8011280:	d10d      	bne.n	801129e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8011282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011286:	b672      	cpsid	i
 8011288:	f383 8811 	msr	BASEPRI, r3
 801128c:	f3bf 8f6f 	isb	sy
 8011290:	f3bf 8f4f 	dsb	sy
 8011294:	b662      	cpsie	i
 8011296:	623b      	str	r3, [r7, #32]
}
 8011298:	bf00      	nop
 801129a:	bf00      	nop
 801129c:	e7fd      	b.n	801129a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d103      	bne.n	80112ac <xQueueReceiveFromISR+0x40>
 80112a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d101      	bne.n	80112b0 <xQueueReceiveFromISR+0x44>
 80112ac:	2301      	movs	r3, #1
 80112ae:	e000      	b.n	80112b2 <xQueueReceiveFromISR+0x46>
 80112b0:	2300      	movs	r3, #0
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d10d      	bne.n	80112d2 <xQueueReceiveFromISR+0x66>
	__asm volatile
 80112b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112ba:	b672      	cpsid	i
 80112bc:	f383 8811 	msr	BASEPRI, r3
 80112c0:	f3bf 8f6f 	isb	sy
 80112c4:	f3bf 8f4f 	dsb	sy
 80112c8:	b662      	cpsie	i
 80112ca:	61fb      	str	r3, [r7, #28]
}
 80112cc:	bf00      	nop
 80112ce:	bf00      	nop
 80112d0:	e7fd      	b.n	80112ce <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112d2:	f001 fae3 	bl	801289c <vPortValidateInterruptPriority>
	__asm volatile
 80112d6:	f3ef 8211 	mrs	r2, BASEPRI
 80112da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80112de:	b672      	cpsid	i
 80112e0:	f383 8811 	msr	BASEPRI, r3
 80112e4:	f3bf 8f6f 	isb	sy
 80112e8:	f3bf 8f4f 	dsb	sy
 80112ec:	b662      	cpsie	i
 80112ee:	61ba      	str	r2, [r7, #24]
 80112f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80112f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80112f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80112fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80112fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d02f      	beq.n	8011362 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011302:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011304:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011308:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801130c:	68b9      	ldr	r1, [r7, #8]
 801130e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011310:	f000 f89e 	bl	8011450 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011316:	1e5a      	subs	r2, r3, #1
 8011318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801131a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801131c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011324:	d112      	bne.n	801134c <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011328:	691b      	ldr	r3, [r3, #16]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d016      	beq.n	801135c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801132e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011330:	3310      	adds	r3, #16
 8011332:	4618      	mov	r0, r3
 8011334:	f000 fdd8 	bl	8011ee8 <xTaskRemoveFromEventList>
 8011338:	4603      	mov	r3, r0
 801133a:	2b00      	cmp	r3, #0
 801133c:	d00e      	beq.n	801135c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d00b      	beq.n	801135c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2201      	movs	r2, #1
 8011348:	601a      	str	r2, [r3, #0]
 801134a:	e007      	b.n	801135c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801134c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011350:	3301      	adds	r3, #1
 8011352:	b2db      	uxtb	r3, r3
 8011354:	b25a      	sxtb	r2, r3
 8011356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011358:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801135c:	2301      	movs	r3, #1
 801135e:	637b      	str	r3, [r7, #52]	@ 0x34
 8011360:	e001      	b.n	8011366 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8011362:	2300      	movs	r3, #0
 8011364:	637b      	str	r3, [r7, #52]	@ 0x34
 8011366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011368:	613b      	str	r3, [r7, #16]
	__asm volatile
 801136a:	693b      	ldr	r3, [r7, #16]
 801136c:	f383 8811 	msr	BASEPRI, r3
}
 8011370:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011372:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8011374:	4618      	mov	r0, r3
 8011376:	3738      	adds	r7, #56	@ 0x38
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b086      	sub	sp, #24
 8011380:	af00      	add	r7, sp, #0
 8011382:	60f8      	str	r0, [r7, #12]
 8011384:	60b9      	str	r1, [r7, #8]
 8011386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011388:	2300      	movs	r3, #0
 801138a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011390:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011396:	2b00      	cmp	r3, #0
 8011398:	d10d      	bne.n	80113b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	681b      	ldr	r3, [r3, #0]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d14d      	bne.n	801143e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80113a2:	68fb      	ldr	r3, [r7, #12]
 80113a4:	689b      	ldr	r3, [r3, #8]
 80113a6:	4618      	mov	r0, r3
 80113a8:	f000 ff8c 	bl	80122c4 <xTaskPriorityDisinherit>
 80113ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80113ae:	68fb      	ldr	r3, [r7, #12]
 80113b0:	2200      	movs	r2, #0
 80113b2:	609a      	str	r2, [r3, #8]
 80113b4:	e043      	b.n	801143e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d119      	bne.n	80113f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	6858      	ldr	r0, [r3, #4]
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113c4:	461a      	mov	r2, r3
 80113c6:	68b9      	ldr	r1, [r7, #8]
 80113c8:	f001 fd46 	bl	8012e58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	685a      	ldr	r2, [r3, #4]
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113d4:	441a      	add	r2, r3
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	685a      	ldr	r2, [r3, #4]
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	689b      	ldr	r3, [r3, #8]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d32b      	bcc.n	801143e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681a      	ldr	r2, [r3, #0]
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	605a      	str	r2, [r3, #4]
 80113ee:	e026      	b.n	801143e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	68d8      	ldr	r0, [r3, #12]
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113f8:	461a      	mov	r2, r3
 80113fa:	68b9      	ldr	r1, [r7, #8]
 80113fc:	f001 fd2c 	bl	8012e58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	68da      	ldr	r2, [r3, #12]
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011408:	425b      	negs	r3, r3
 801140a:	441a      	add	r2, r3
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	68da      	ldr	r2, [r3, #12]
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	429a      	cmp	r2, r3
 801141a:	d207      	bcs.n	801142c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	689a      	ldr	r2, [r3, #8]
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011424:	425b      	negs	r3, r3
 8011426:	441a      	add	r2, r3
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801142c:	687b      	ldr	r3, [r7, #4]
 801142e:	2b02      	cmp	r3, #2
 8011430:	d105      	bne.n	801143e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d002      	beq.n	801143e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011438:	693b      	ldr	r3, [r7, #16]
 801143a:	3b01      	subs	r3, #1
 801143c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801143e:	693b      	ldr	r3, [r7, #16]
 8011440:	1c5a      	adds	r2, r3, #1
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8011446:	697b      	ldr	r3, [r7, #20]
}
 8011448:	4618      	mov	r0, r3
 801144a:	3718      	adds	r7, #24
 801144c:	46bd      	mov	sp, r7
 801144e:	bd80      	pop	{r7, pc}

08011450 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b082      	sub	sp, #8
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801145e:	2b00      	cmp	r3, #0
 8011460:	d018      	beq.n	8011494 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	68da      	ldr	r2, [r3, #12]
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801146a:	441a      	add	r2, r3
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	68da      	ldr	r2, [r3, #12]
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	689b      	ldr	r3, [r3, #8]
 8011478:	429a      	cmp	r2, r3
 801147a:	d303      	bcc.n	8011484 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	68d9      	ldr	r1, [r3, #12]
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801148c:	461a      	mov	r2, r3
 801148e:	6838      	ldr	r0, [r7, #0]
 8011490:	f001 fce2 	bl	8012e58 <memcpy>
	}
}
 8011494:	bf00      	nop
 8011496:	3708      	adds	r7, #8
 8011498:	46bd      	mov	sp, r7
 801149a:	bd80      	pop	{r7, pc}

0801149c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b084      	sub	sp, #16
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80114a4:	f001 f912 	bl	80126cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80114ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80114b0:	e011      	b.n	80114d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d012      	beq.n	80114e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	3324      	adds	r3, #36	@ 0x24
 80114be:	4618      	mov	r0, r3
 80114c0:	f000 fd12 	bl	8011ee8 <xTaskRemoveFromEventList>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d001      	beq.n	80114ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80114ca:	f000 fdf1 	bl	80120b0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80114ce:	7bfb      	ldrb	r3, [r7, #15]
 80114d0:	3b01      	subs	r3, #1
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80114d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80114da:	2b00      	cmp	r3, #0
 80114dc:	dce9      	bgt.n	80114b2 <prvUnlockQueue+0x16>
 80114de:	e000      	b.n	80114e2 <prvUnlockQueue+0x46>
					break;
 80114e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	22ff      	movs	r2, #255	@ 0xff
 80114e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80114ea:	f001 f925 	bl	8012738 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80114ee:	f001 f8ed 	bl	80126cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80114f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80114fa:	e011      	b.n	8011520 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	691b      	ldr	r3, [r3, #16]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d012      	beq.n	801152a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	3310      	adds	r3, #16
 8011508:	4618      	mov	r0, r3
 801150a:	f000 fced 	bl	8011ee8 <xTaskRemoveFromEventList>
 801150e:	4603      	mov	r3, r0
 8011510:	2b00      	cmp	r3, #0
 8011512:	d001      	beq.n	8011518 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011514:	f000 fdcc 	bl	80120b0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011518:	7bbb      	ldrb	r3, [r7, #14]
 801151a:	3b01      	subs	r3, #1
 801151c:	b2db      	uxtb	r3, r3
 801151e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011524:	2b00      	cmp	r3, #0
 8011526:	dce9      	bgt.n	80114fc <prvUnlockQueue+0x60>
 8011528:	e000      	b.n	801152c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801152a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	22ff      	movs	r2, #255	@ 0xff
 8011530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8011534:	f001 f900 	bl	8012738 <vPortExitCritical>
}
 8011538:	bf00      	nop
 801153a:	3710      	adds	r7, #16
 801153c:	46bd      	mov	sp, r7
 801153e:	bd80      	pop	{r7, pc}

08011540 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011548:	f001 f8c0 	bl	80126cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011550:	2b00      	cmp	r3, #0
 8011552:	d102      	bne.n	801155a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011554:	2301      	movs	r3, #1
 8011556:	60fb      	str	r3, [r7, #12]
 8011558:	e001      	b.n	801155e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 801155a:	2300      	movs	r3, #0
 801155c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801155e:	f001 f8eb 	bl	8012738 <vPortExitCritical>

	return xReturn;
 8011562:	68fb      	ldr	r3, [r7, #12]
}
 8011564:	4618      	mov	r0, r3
 8011566:	3710      	adds	r7, #16
 8011568:	46bd      	mov	sp, r7
 801156a:	bd80      	pop	{r7, pc}

0801156c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b084      	sub	sp, #16
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011574:	f001 f8aa 	bl	80126cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011580:	429a      	cmp	r2, r3
 8011582:	d102      	bne.n	801158a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011584:	2301      	movs	r3, #1
 8011586:	60fb      	str	r3, [r7, #12]
 8011588:	e001      	b.n	801158e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801158a:	2300      	movs	r3, #0
 801158c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801158e:	f001 f8d3 	bl	8012738 <vPortExitCritical>

	return xReturn;
 8011592:	68fb      	ldr	r3, [r7, #12]
}
 8011594:	4618      	mov	r0, r3
 8011596:	3710      	adds	r7, #16
 8011598:	46bd      	mov	sp, r7
 801159a:	bd80      	pop	{r7, pc}

0801159c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 801159c:	b580      	push	{r7, lr}
 801159e:	b08e      	sub	sp, #56	@ 0x38
 80115a0:	af04      	add	r7, sp, #16
 80115a2:	60f8      	str	r0, [r7, #12]
 80115a4:	60b9      	str	r1, [r7, #8]
 80115a6:	607a      	str	r2, [r7, #4]
 80115a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80115aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d10d      	bne.n	80115cc <xTaskCreateStatic+0x30>
	__asm volatile
 80115b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115b4:	b672      	cpsid	i
 80115b6:	f383 8811 	msr	BASEPRI, r3
 80115ba:	f3bf 8f6f 	isb	sy
 80115be:	f3bf 8f4f 	dsb	sy
 80115c2:	b662      	cpsie	i
 80115c4:	623b      	str	r3, [r7, #32]
}
 80115c6:	bf00      	nop
 80115c8:	bf00      	nop
 80115ca:	e7fd      	b.n	80115c8 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80115cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d10d      	bne.n	80115ee <xTaskCreateStatic+0x52>
	__asm volatile
 80115d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115d6:	b672      	cpsid	i
 80115d8:	f383 8811 	msr	BASEPRI, r3
 80115dc:	f3bf 8f6f 	isb	sy
 80115e0:	f3bf 8f4f 	dsb	sy
 80115e4:	b662      	cpsie	i
 80115e6:	61fb      	str	r3, [r7, #28]
}
 80115e8:	bf00      	nop
 80115ea:	bf00      	nop
 80115ec:	e7fd      	b.n	80115ea <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80115ee:	23a4      	movs	r3, #164	@ 0xa4
 80115f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	2ba4      	cmp	r3, #164	@ 0xa4
 80115f6:	d00d      	beq.n	8011614 <xTaskCreateStatic+0x78>
	__asm volatile
 80115f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80115fc:	b672      	cpsid	i
 80115fe:	f383 8811 	msr	BASEPRI, r3
 8011602:	f3bf 8f6f 	isb	sy
 8011606:	f3bf 8f4f 	dsb	sy
 801160a:	b662      	cpsie	i
 801160c:	61bb      	str	r3, [r7, #24]
}
 801160e:	bf00      	nop
 8011610:	bf00      	nop
 8011612:	e7fd      	b.n	8011610 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011614:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011618:	2b00      	cmp	r3, #0
 801161a:	d01e      	beq.n	801165a <xTaskCreateStatic+0xbe>
 801161c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801161e:	2b00      	cmp	r3, #0
 8011620:	d01b      	beq.n	801165a <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011624:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011628:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801162a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801162c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801162e:	2202      	movs	r2, #2
 8011630:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011634:	2300      	movs	r3, #0
 8011636:	9303      	str	r3, [sp, #12]
 8011638:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801163a:	9302      	str	r3, [sp, #8]
 801163c:	f107 0314 	add.w	r3, r7, #20
 8011640:	9301      	str	r3, [sp, #4]
 8011642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011644:	9300      	str	r3, [sp, #0]
 8011646:	683b      	ldr	r3, [r7, #0]
 8011648:	687a      	ldr	r2, [r7, #4]
 801164a:	68b9      	ldr	r1, [r7, #8]
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f000 f851 	bl	80116f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011652:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8011654:	f000 f8fa 	bl	801184c <prvAddNewTaskToReadyList>
 8011658:	e001      	b.n	801165e <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 801165a:	2300      	movs	r3, #0
 801165c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801165e:	697b      	ldr	r3, [r7, #20]
	}
 8011660:	4618      	mov	r0, r3
 8011662:	3728      	adds	r7, #40	@ 0x28
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}

08011668 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011668:	b580      	push	{r7, lr}
 801166a:	b08c      	sub	sp, #48	@ 0x30
 801166c:	af04      	add	r7, sp, #16
 801166e:	60f8      	str	r0, [r7, #12]
 8011670:	60b9      	str	r1, [r7, #8]
 8011672:	603b      	str	r3, [r7, #0]
 8011674:	4613      	mov	r3, r2
 8011676:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011678:	88fb      	ldrh	r3, [r7, #6]
 801167a:	009b      	lsls	r3, r3, #2
 801167c:	4618      	mov	r0, r3
 801167e:	f001 f953 	bl	8012928 <pvPortMalloc>
 8011682:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011684:	697b      	ldr	r3, [r7, #20]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d00e      	beq.n	80116a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801168a:	20a4      	movs	r0, #164	@ 0xa4
 801168c:	f001 f94c 	bl	8012928 <pvPortMalloc>
 8011690:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d003      	beq.n	80116a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011698:	69fb      	ldr	r3, [r7, #28]
 801169a:	697a      	ldr	r2, [r7, #20]
 801169c:	631a      	str	r2, [r3, #48]	@ 0x30
 801169e:	e005      	b.n	80116ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80116a0:	6978      	ldr	r0, [r7, #20]
 80116a2:	f001 fa13 	bl	8012acc <vPortFree>
 80116a6:	e001      	b.n	80116ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80116a8:	2300      	movs	r3, #0
 80116aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d017      	beq.n	80116e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80116b2:	69fb      	ldr	r3, [r7, #28]
 80116b4:	2200      	movs	r2, #0
 80116b6:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80116ba:	88fa      	ldrh	r2, [r7, #6]
 80116bc:	2300      	movs	r3, #0
 80116be:	9303      	str	r3, [sp, #12]
 80116c0:	69fb      	ldr	r3, [r7, #28]
 80116c2:	9302      	str	r3, [sp, #8]
 80116c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80116c6:	9301      	str	r3, [sp, #4]
 80116c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80116ca:	9300      	str	r3, [sp, #0]
 80116cc:	683b      	ldr	r3, [r7, #0]
 80116ce:	68b9      	ldr	r1, [r7, #8]
 80116d0:	68f8      	ldr	r0, [r7, #12]
 80116d2:	f000 f80f 	bl	80116f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80116d6:	69f8      	ldr	r0, [r7, #28]
 80116d8:	f000 f8b8 	bl	801184c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80116dc:	2301      	movs	r3, #1
 80116de:	61bb      	str	r3, [r7, #24]
 80116e0:	e002      	b.n	80116e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80116e2:	f04f 33ff 	mov.w	r3, #4294967295
 80116e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80116e8:	69bb      	ldr	r3, [r7, #24]
	}
 80116ea:	4618      	mov	r0, r3
 80116ec:	3720      	adds	r7, #32
 80116ee:	46bd      	mov	sp, r7
 80116f0:	bd80      	pop	{r7, pc}
	...

080116f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b088      	sub	sp, #32
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	60f8      	str	r0, [r7, #12]
 80116fc:	60b9      	str	r1, [r7, #8]
 80116fe:	607a      	str	r2, [r7, #4]
 8011700:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011704:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	009b      	lsls	r3, r3, #2
 801170a:	461a      	mov	r2, r3
 801170c:	21a5      	movs	r1, #165	@ 0xa5
 801170e:	f001 fb19 	bl	8012d44 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011714:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8011716:	6879      	ldr	r1, [r7, #4]
 8011718:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801171c:	440b      	add	r3, r1
 801171e:	009b      	lsls	r3, r3, #2
 8011720:	4413      	add	r3, r2
 8011722:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011724:	69bb      	ldr	r3, [r7, #24]
 8011726:	f023 0307 	bic.w	r3, r3, #7
 801172a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801172c:	69bb      	ldr	r3, [r7, #24]
 801172e:	f003 0307 	and.w	r3, r3, #7
 8011732:	2b00      	cmp	r3, #0
 8011734:	d00d      	beq.n	8011752 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8011736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801173a:	b672      	cpsid	i
 801173c:	f383 8811 	msr	BASEPRI, r3
 8011740:	f3bf 8f6f 	isb	sy
 8011744:	f3bf 8f4f 	dsb	sy
 8011748:	b662      	cpsie	i
 801174a:	617b      	str	r3, [r7, #20]
}
 801174c:	bf00      	nop
 801174e:	bf00      	nop
 8011750:	e7fd      	b.n	801174e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d01f      	beq.n	8011798 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011758:	2300      	movs	r3, #0
 801175a:	61fb      	str	r3, [r7, #28]
 801175c:	e012      	b.n	8011784 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801175e:	68ba      	ldr	r2, [r7, #8]
 8011760:	69fb      	ldr	r3, [r7, #28]
 8011762:	4413      	add	r3, r2
 8011764:	7819      	ldrb	r1, [r3, #0]
 8011766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011768:	69fb      	ldr	r3, [r7, #28]
 801176a:	4413      	add	r3, r2
 801176c:	3334      	adds	r3, #52	@ 0x34
 801176e:	460a      	mov	r2, r1
 8011770:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011772:	68ba      	ldr	r2, [r7, #8]
 8011774:	69fb      	ldr	r3, [r7, #28]
 8011776:	4413      	add	r3, r2
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	2b00      	cmp	r3, #0
 801177c:	d006      	beq.n	801178c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801177e:	69fb      	ldr	r3, [r7, #28]
 8011780:	3301      	adds	r3, #1
 8011782:	61fb      	str	r3, [r7, #28]
 8011784:	69fb      	ldr	r3, [r7, #28]
 8011786:	2b0f      	cmp	r3, #15
 8011788:	d9e9      	bls.n	801175e <prvInitialiseNewTask+0x6a>
 801178a:	e000      	b.n	801178e <prvInitialiseNewTask+0x9a>
			{
				break;
 801178c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801178e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011790:	2200      	movs	r2, #0
 8011792:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8011796:	e003      	b.n	80117a0 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801179a:	2200      	movs	r2, #0
 801179c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80117a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117a2:	2b06      	cmp	r3, #6
 80117a4:	d901      	bls.n	80117aa <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80117a6:	2306      	movs	r3, #6
 80117a8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80117aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80117b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80117b4:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80117b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117b8:	2200      	movs	r2, #0
 80117ba:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80117bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117be:	3304      	adds	r3, #4
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7ff f8d3 	bl	801096c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80117c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117c8:	3318      	adds	r3, #24
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7ff f8ce 	bl	801096c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80117d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80117d8:	f1c3 0207 	rsb	r2, r3, #7
 80117dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80117e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80117e4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 80117e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117e8:	2200      	movs	r2, #0
 80117ea:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80117ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117ee:	2200      	movs	r2, #0
 80117f0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80117f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117f6:	2200      	movs	r2, #0
 80117f8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80117fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80117fe:	3350      	adds	r3, #80	@ 0x50
 8011800:	224c      	movs	r2, #76	@ 0x4c
 8011802:	2100      	movs	r1, #0
 8011804:	4618      	mov	r0, r3
 8011806:	f001 fa9d 	bl	8012d44 <memset>
 801180a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801180c:	4a0c      	ldr	r2, [pc, #48]	@ (8011840 <prvInitialiseNewTask+0x14c>)
 801180e:	655a      	str	r2, [r3, #84]	@ 0x54
 8011810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011812:	4a0c      	ldr	r2, [pc, #48]	@ (8011844 <prvInitialiseNewTask+0x150>)
 8011814:	659a      	str	r2, [r3, #88]	@ 0x58
 8011816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011818:	4a0b      	ldr	r2, [pc, #44]	@ (8011848 <prvInitialiseNewTask+0x154>)
 801181a:	65da      	str	r2, [r3, #92]	@ 0x5c
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801181c:	683a      	ldr	r2, [r7, #0]
 801181e:	68f9      	ldr	r1, [r7, #12]
 8011820:	69b8      	ldr	r0, [r7, #24]
 8011822:	f000 fe41 	bl	80124a8 <pxPortInitialiseStack>
 8011826:	4602      	mov	r2, r0
 8011828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801182a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801182c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801182e:	2b00      	cmp	r3, #0
 8011830:	d002      	beq.n	8011838 <prvInitialiseNewTask+0x144>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011836:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011838:	bf00      	nop
 801183a:	3720      	adds	r7, #32
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}
 8011840:	20011f1c 	.word	0x20011f1c
 8011844:	20011f84 	.word	0x20011f84
 8011848:	20011fec 	.word	0x20011fec

0801184c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011854:	f000 ff3a 	bl	80126cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011858:	4b2a      	ldr	r3, [pc, #168]	@ (8011904 <prvAddNewTaskToReadyList+0xb8>)
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	3301      	adds	r3, #1
 801185e:	4a29      	ldr	r2, [pc, #164]	@ (8011904 <prvAddNewTaskToReadyList+0xb8>)
 8011860:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011862:	4b29      	ldr	r3, [pc, #164]	@ (8011908 <prvAddNewTaskToReadyList+0xbc>)
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d109      	bne.n	801187e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801186a:	4a27      	ldr	r2, [pc, #156]	@ (8011908 <prvAddNewTaskToReadyList+0xbc>)
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011870:	4b24      	ldr	r3, [pc, #144]	@ (8011904 <prvAddNewTaskToReadyList+0xb8>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2b01      	cmp	r3, #1
 8011876:	d110      	bne.n	801189a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011878:	f000 fc40 	bl	80120fc <prvInitialiseTaskLists>
 801187c:	e00d      	b.n	801189a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801187e:	4b23      	ldr	r3, [pc, #140]	@ (801190c <prvAddNewTaskToReadyList+0xc0>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d109      	bne.n	801189a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011886:	4b20      	ldr	r3, [pc, #128]	@ (8011908 <prvAddNewTaskToReadyList+0xbc>)
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011890:	429a      	cmp	r2, r3
 8011892:	d802      	bhi.n	801189a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011894:	4a1c      	ldr	r2, [pc, #112]	@ (8011908 <prvAddNewTaskToReadyList+0xbc>)
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801189a:	4b1d      	ldr	r3, [pc, #116]	@ (8011910 <prvAddNewTaskToReadyList+0xc4>)
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	3301      	adds	r3, #1
 80118a0:	4a1b      	ldr	r2, [pc, #108]	@ (8011910 <prvAddNewTaskToReadyList+0xc4>)
 80118a2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118a8:	2201      	movs	r2, #1
 80118aa:	409a      	lsls	r2, r3
 80118ac:	4b19      	ldr	r3, [pc, #100]	@ (8011914 <prvAddNewTaskToReadyList+0xc8>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	4313      	orrs	r3, r2
 80118b2:	4a18      	ldr	r2, [pc, #96]	@ (8011914 <prvAddNewTaskToReadyList+0xc8>)
 80118b4:	6013      	str	r3, [r2, #0]
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118ba:	4613      	mov	r3, r2
 80118bc:	009b      	lsls	r3, r3, #2
 80118be:	4413      	add	r3, r2
 80118c0:	009b      	lsls	r3, r3, #2
 80118c2:	4a15      	ldr	r2, [pc, #84]	@ (8011918 <prvAddNewTaskToReadyList+0xcc>)
 80118c4:	441a      	add	r2, r3
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	3304      	adds	r3, #4
 80118ca:	4619      	mov	r1, r3
 80118cc:	4610      	mov	r0, r2
 80118ce:	f7ff f85a 	bl	8010986 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80118d2:	f000 ff31 	bl	8012738 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80118d6:	4b0d      	ldr	r3, [pc, #52]	@ (801190c <prvAddNewTaskToReadyList+0xc0>)
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d00e      	beq.n	80118fc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80118de:	4b0a      	ldr	r3, [pc, #40]	@ (8011908 <prvAddNewTaskToReadyList+0xbc>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d207      	bcs.n	80118fc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80118ec:	4b0b      	ldr	r3, [pc, #44]	@ (801191c <prvAddNewTaskToReadyList+0xd0>)
 80118ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80118f2:	601a      	str	r2, [r3, #0]
 80118f4:	f3bf 8f4f 	dsb	sy
 80118f8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80118fc:	bf00      	nop
 80118fe:	3708      	adds	r7, #8
 8011900:	46bd      	mov	sp, r7
 8011902:	bd80      	pop	{r7, pc}
 8011904:	20009ed0 	.word	0x20009ed0
 8011908:	20009dd0 	.word	0x20009dd0
 801190c:	20009edc 	.word	0x20009edc
 8011910:	20009eec 	.word	0x20009eec
 8011914:	20009ed8 	.word	0x20009ed8
 8011918:	20009dd4 	.word	0x20009dd4
 801191c:	e000ed04 	.word	0xe000ed04

08011920 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011920:	b580      	push	{r7, lr}
 8011922:	b084      	sub	sp, #16
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011928:	2300      	movs	r3, #0
 801192a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d01a      	beq.n	8011968 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011932:	4b15      	ldr	r3, [pc, #84]	@ (8011988 <vTaskDelay+0x68>)
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	2b00      	cmp	r3, #0
 8011938:	d00d      	beq.n	8011956 <vTaskDelay+0x36>
	__asm volatile
 801193a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801193e:	b672      	cpsid	i
 8011940:	f383 8811 	msr	BASEPRI, r3
 8011944:	f3bf 8f6f 	isb	sy
 8011948:	f3bf 8f4f 	dsb	sy
 801194c:	b662      	cpsie	i
 801194e:	60bb      	str	r3, [r7, #8]
}
 8011950:	bf00      	nop
 8011952:	bf00      	nop
 8011954:	e7fd      	b.n	8011952 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8011956:	f000 f889 	bl	8011a6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801195a:	2100      	movs	r1, #0
 801195c:	6878      	ldr	r0, [r7, #4]
 801195e:	f000 fd3d 	bl	80123dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011962:	f000 f891 	bl	8011a88 <xTaskResumeAll>
 8011966:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	2b00      	cmp	r3, #0
 801196c:	d107      	bne.n	801197e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 801196e:	4b07      	ldr	r3, [pc, #28]	@ (801198c <vTaskDelay+0x6c>)
 8011970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011974:	601a      	str	r2, [r3, #0]
 8011976:	f3bf 8f4f 	dsb	sy
 801197a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801197e:	bf00      	nop
 8011980:	3710      	adds	r7, #16
 8011982:	46bd      	mov	sp, r7
 8011984:	bd80      	pop	{r7, pc}
 8011986:	bf00      	nop
 8011988:	20009ef8 	.word	0x20009ef8
 801198c:	e000ed04 	.word	0xe000ed04

08011990 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011990:	b580      	push	{r7, lr}
 8011992:	b08a      	sub	sp, #40	@ 0x28
 8011994:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011996:	2300      	movs	r3, #0
 8011998:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801199a:	2300      	movs	r3, #0
 801199c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801199e:	463a      	mov	r2, r7
 80119a0:	1d39      	adds	r1, r7, #4
 80119a2:	f107 0308 	add.w	r3, r7, #8
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7ef f886 	bl	8000ab8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80119ac:	6839      	ldr	r1, [r7, #0]
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	68ba      	ldr	r2, [r7, #8]
 80119b2:	9202      	str	r2, [sp, #8]
 80119b4:	9301      	str	r3, [sp, #4]
 80119b6:	2300      	movs	r3, #0
 80119b8:	9300      	str	r3, [sp, #0]
 80119ba:	2300      	movs	r3, #0
 80119bc:	460a      	mov	r2, r1
 80119be:	4923      	ldr	r1, [pc, #140]	@ (8011a4c <vTaskStartScheduler+0xbc>)
 80119c0:	4823      	ldr	r0, [pc, #140]	@ (8011a50 <vTaskStartScheduler+0xc0>)
 80119c2:	f7ff fdeb 	bl	801159c <xTaskCreateStatic>
 80119c6:	4603      	mov	r3, r0
 80119c8:	4a22      	ldr	r2, [pc, #136]	@ (8011a54 <vTaskStartScheduler+0xc4>)
 80119ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80119cc:	4b21      	ldr	r3, [pc, #132]	@ (8011a54 <vTaskStartScheduler+0xc4>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d002      	beq.n	80119da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80119d4:	2301      	movs	r3, #1
 80119d6:	617b      	str	r3, [r7, #20]
 80119d8:	e001      	b.n	80119de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80119da:	2300      	movs	r3, #0
 80119dc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80119de:	697b      	ldr	r3, [r7, #20]
 80119e0:	2b01      	cmp	r3, #1
 80119e2:	d11d      	bne.n	8011a20 <vTaskStartScheduler+0x90>
	__asm volatile
 80119e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119e8:	b672      	cpsid	i
 80119ea:	f383 8811 	msr	BASEPRI, r3
 80119ee:	f3bf 8f6f 	isb	sy
 80119f2:	f3bf 8f4f 	dsb	sy
 80119f6:	b662      	cpsie	i
 80119f8:	613b      	str	r3, [r7, #16]
}
 80119fa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80119fc:	4b16      	ldr	r3, [pc, #88]	@ (8011a58 <vTaskStartScheduler+0xc8>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	3350      	adds	r3, #80	@ 0x50
 8011a02:	4a16      	ldr	r2, [pc, #88]	@ (8011a5c <vTaskStartScheduler+0xcc>)
 8011a04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011a06:	4b16      	ldr	r3, [pc, #88]	@ (8011a60 <vTaskStartScheduler+0xd0>)
 8011a08:	f04f 32ff 	mov.w	r2, #4294967295
 8011a0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011a0e:	4b15      	ldr	r3, [pc, #84]	@ (8011a64 <vTaskStartScheduler+0xd4>)
 8011a10:	2201      	movs	r2, #1
 8011a12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011a14:	4b14      	ldr	r3, [pc, #80]	@ (8011a68 <vTaskStartScheduler+0xd8>)
 8011a16:	2200      	movs	r2, #0
 8011a18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011a1a:	f000 fdd9 	bl	80125d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011a1e:	e011      	b.n	8011a44 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a26:	d10d      	bne.n	8011a44 <vTaskStartScheduler+0xb4>
	__asm volatile
 8011a28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a2c:	b672      	cpsid	i
 8011a2e:	f383 8811 	msr	BASEPRI, r3
 8011a32:	f3bf 8f6f 	isb	sy
 8011a36:	f3bf 8f4f 	dsb	sy
 8011a3a:	b662      	cpsie	i
 8011a3c:	60fb      	str	r3, [r7, #12]
}
 8011a3e:	bf00      	nop
 8011a40:	bf00      	nop
 8011a42:	e7fd      	b.n	8011a40 <vTaskStartScheduler+0xb0>
}
 8011a44:	bf00      	nop
 8011a46:	3718      	adds	r7, #24
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}
 8011a4c:	080138cc 	.word	0x080138cc
 8011a50:	080120c9 	.word	0x080120c9
 8011a54:	20009ef4 	.word	0x20009ef4
 8011a58:	20009dd0 	.word	0x20009dd0
 8011a5c:	2000004c 	.word	0x2000004c
 8011a60:	20009ef0 	.word	0x20009ef0
 8011a64:	20009edc 	.word	0x20009edc
 8011a68:	20009ed4 	.word	0x20009ed4

08011a6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011a70:	4b04      	ldr	r3, [pc, #16]	@ (8011a84 <vTaskSuspendAll+0x18>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	3301      	adds	r3, #1
 8011a76:	4a03      	ldr	r2, [pc, #12]	@ (8011a84 <vTaskSuspendAll+0x18>)
 8011a78:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011a7a:	bf00      	nop
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr
 8011a84:	20009ef8 	.word	0x20009ef8

08011a88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b084      	sub	sp, #16
 8011a8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011a92:	2300      	movs	r3, #0
 8011a94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011a96:	4b43      	ldr	r3, [pc, #268]	@ (8011ba4 <xTaskResumeAll+0x11c>)
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d10d      	bne.n	8011aba <xTaskResumeAll+0x32>
	__asm volatile
 8011a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011aa2:	b672      	cpsid	i
 8011aa4:	f383 8811 	msr	BASEPRI, r3
 8011aa8:	f3bf 8f6f 	isb	sy
 8011aac:	f3bf 8f4f 	dsb	sy
 8011ab0:	b662      	cpsie	i
 8011ab2:	603b      	str	r3, [r7, #0]
}
 8011ab4:	bf00      	nop
 8011ab6:	bf00      	nop
 8011ab8:	e7fd      	b.n	8011ab6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011aba:	f000 fe07 	bl	80126cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011abe:	4b39      	ldr	r3, [pc, #228]	@ (8011ba4 <xTaskResumeAll+0x11c>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	3b01      	subs	r3, #1
 8011ac4:	4a37      	ldr	r2, [pc, #220]	@ (8011ba4 <xTaskResumeAll+0x11c>)
 8011ac6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011ac8:	4b36      	ldr	r3, [pc, #216]	@ (8011ba4 <xTaskResumeAll+0x11c>)
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d161      	bne.n	8011b94 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011ad0:	4b35      	ldr	r3, [pc, #212]	@ (8011ba8 <xTaskResumeAll+0x120>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	2b00      	cmp	r3, #0
 8011ad6:	d05d      	beq.n	8011b94 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011ad8:	e02e      	b.n	8011b38 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ada:	4b34      	ldr	r3, [pc, #208]	@ (8011bac <xTaskResumeAll+0x124>)
 8011adc:	68db      	ldr	r3, [r3, #12]
 8011ade:	68db      	ldr	r3, [r3, #12]
 8011ae0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	3318      	adds	r3, #24
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7fe ffaa 	bl	8010a40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	3304      	adds	r3, #4
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7fe ffa5 	bl	8010a40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011afa:	2201      	movs	r2, #1
 8011afc:	409a      	lsls	r2, r3
 8011afe:	4b2c      	ldr	r3, [pc, #176]	@ (8011bb0 <xTaskResumeAll+0x128>)
 8011b00:	681b      	ldr	r3, [r3, #0]
 8011b02:	4313      	orrs	r3, r2
 8011b04:	4a2a      	ldr	r2, [pc, #168]	@ (8011bb0 <xTaskResumeAll+0x128>)
 8011b06:	6013      	str	r3, [r2, #0]
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b0c:	4613      	mov	r3, r2
 8011b0e:	009b      	lsls	r3, r3, #2
 8011b10:	4413      	add	r3, r2
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	4a27      	ldr	r2, [pc, #156]	@ (8011bb4 <xTaskResumeAll+0x12c>)
 8011b16:	441a      	add	r2, r3
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	3304      	adds	r3, #4
 8011b1c:	4619      	mov	r1, r3
 8011b1e:	4610      	mov	r0, r2
 8011b20:	f7fe ff31 	bl	8010986 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b28:	4b23      	ldr	r3, [pc, #140]	@ (8011bb8 <xTaskResumeAll+0x130>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d302      	bcc.n	8011b38 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8011b32:	4b22      	ldr	r3, [pc, #136]	@ (8011bbc <xTaskResumeAll+0x134>)
 8011b34:	2201      	movs	r2, #1
 8011b36:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011b38:	4b1c      	ldr	r3, [pc, #112]	@ (8011bac <xTaskResumeAll+0x124>)
 8011b3a:	681b      	ldr	r3, [r3, #0]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d1cc      	bne.n	8011ada <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d001      	beq.n	8011b4a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011b46:	f000 fb7f 	bl	8012248 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011b4a:	4b1d      	ldr	r3, [pc, #116]	@ (8011bc0 <xTaskResumeAll+0x138>)
 8011b4c:	681b      	ldr	r3, [r3, #0]
 8011b4e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d010      	beq.n	8011b78 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011b56:	f000 f859 	bl	8011c0c <xTaskIncrementTick>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d002      	beq.n	8011b66 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8011b60:	4b16      	ldr	r3, [pc, #88]	@ (8011bbc <xTaskResumeAll+0x134>)
 8011b62:	2201      	movs	r2, #1
 8011b64:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	3b01      	subs	r3, #1
 8011b6a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d1f1      	bne.n	8011b56 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8011b72:	4b13      	ldr	r3, [pc, #76]	@ (8011bc0 <xTaskResumeAll+0x138>)
 8011b74:	2200      	movs	r2, #0
 8011b76:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011b78:	4b10      	ldr	r3, [pc, #64]	@ (8011bbc <xTaskResumeAll+0x134>)
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d009      	beq.n	8011b94 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011b80:	2301      	movs	r3, #1
 8011b82:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011b84:	4b0f      	ldr	r3, [pc, #60]	@ (8011bc4 <xTaskResumeAll+0x13c>)
 8011b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011b8a:	601a      	str	r2, [r3, #0]
 8011b8c:	f3bf 8f4f 	dsb	sy
 8011b90:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011b94:	f000 fdd0 	bl	8012738 <vPortExitCritical>

	return xAlreadyYielded;
 8011b98:	68bb      	ldr	r3, [r7, #8]
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	3710      	adds	r7, #16
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	20009ef8 	.word	0x20009ef8
 8011ba8:	20009ed0 	.word	0x20009ed0
 8011bac:	20009e90 	.word	0x20009e90
 8011bb0:	20009ed8 	.word	0x20009ed8
 8011bb4:	20009dd4 	.word	0x20009dd4
 8011bb8:	20009dd0 	.word	0x20009dd0
 8011bbc:	20009ee4 	.word	0x20009ee4
 8011bc0:	20009ee0 	.word	0x20009ee0
 8011bc4:	e000ed04 	.word	0xe000ed04

08011bc8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011bc8:	b480      	push	{r7}
 8011bca:	b083      	sub	sp, #12
 8011bcc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011bce:	4b05      	ldr	r3, [pc, #20]	@ (8011be4 <xTaskGetTickCount+0x1c>)
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011bd4:	687b      	ldr	r3, [r7, #4]
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	370c      	adds	r7, #12
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop
 8011be4:	20009ed4 	.word	0x20009ed4

08011be8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b082      	sub	sp, #8
 8011bec:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011bee:	f000 fe55 	bl	801289c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011bf6:	4b04      	ldr	r3, [pc, #16]	@ (8011c08 <xTaskGetTickCountFromISR+0x20>)
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011bfc:	683b      	ldr	r3, [r7, #0]
}
 8011bfe:	4618      	mov	r0, r3
 8011c00:	3708      	adds	r7, #8
 8011c02:	46bd      	mov	sp, r7
 8011c04:	bd80      	pop	{r7, pc}
 8011c06:	bf00      	nop
 8011c08:	20009ed4 	.word	0x20009ed4

08011c0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b086      	sub	sp, #24
 8011c10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011c12:	2300      	movs	r3, #0
 8011c14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011c16:	4b50      	ldr	r3, [pc, #320]	@ (8011d58 <xTaskIncrementTick+0x14c>)
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	f040 808b 	bne.w	8011d36 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011c20:	4b4e      	ldr	r3, [pc, #312]	@ (8011d5c <xTaskIncrementTick+0x150>)
 8011c22:	681b      	ldr	r3, [r3, #0]
 8011c24:	3301      	adds	r3, #1
 8011c26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011c28:	4a4c      	ldr	r2, [pc, #304]	@ (8011d5c <xTaskIncrementTick+0x150>)
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d123      	bne.n	8011c7c <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8011c34:	4b4a      	ldr	r3, [pc, #296]	@ (8011d60 <xTaskIncrementTick+0x154>)
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	d00d      	beq.n	8011c5a <xTaskIncrementTick+0x4e>
	__asm volatile
 8011c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011c42:	b672      	cpsid	i
 8011c44:	f383 8811 	msr	BASEPRI, r3
 8011c48:	f3bf 8f6f 	isb	sy
 8011c4c:	f3bf 8f4f 	dsb	sy
 8011c50:	b662      	cpsie	i
 8011c52:	603b      	str	r3, [r7, #0]
}
 8011c54:	bf00      	nop
 8011c56:	bf00      	nop
 8011c58:	e7fd      	b.n	8011c56 <xTaskIncrementTick+0x4a>
 8011c5a:	4b41      	ldr	r3, [pc, #260]	@ (8011d60 <xTaskIncrementTick+0x154>)
 8011c5c:	681b      	ldr	r3, [r3, #0]
 8011c5e:	60fb      	str	r3, [r7, #12]
 8011c60:	4b40      	ldr	r3, [pc, #256]	@ (8011d64 <xTaskIncrementTick+0x158>)
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	4a3e      	ldr	r2, [pc, #248]	@ (8011d60 <xTaskIncrementTick+0x154>)
 8011c66:	6013      	str	r3, [r2, #0]
 8011c68:	4a3e      	ldr	r2, [pc, #248]	@ (8011d64 <xTaskIncrementTick+0x158>)
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	6013      	str	r3, [r2, #0]
 8011c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8011d68 <xTaskIncrementTick+0x15c>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	3301      	adds	r3, #1
 8011c74:	4a3c      	ldr	r2, [pc, #240]	@ (8011d68 <xTaskIncrementTick+0x15c>)
 8011c76:	6013      	str	r3, [r2, #0]
 8011c78:	f000 fae6 	bl	8012248 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011c7c:	4b3b      	ldr	r3, [pc, #236]	@ (8011d6c <xTaskIncrementTick+0x160>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	693a      	ldr	r2, [r7, #16]
 8011c82:	429a      	cmp	r2, r3
 8011c84:	d348      	bcc.n	8011d18 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c86:	4b36      	ldr	r3, [pc, #216]	@ (8011d60 <xTaskIncrementTick+0x154>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d104      	bne.n	8011c9a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c90:	4b36      	ldr	r3, [pc, #216]	@ (8011d6c <xTaskIncrementTick+0x160>)
 8011c92:	f04f 32ff 	mov.w	r2, #4294967295
 8011c96:	601a      	str	r2, [r3, #0]
					break;
 8011c98:	e03e      	b.n	8011d18 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c9a:	4b31      	ldr	r3, [pc, #196]	@ (8011d60 <xTaskIncrementTick+0x154>)
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	68db      	ldr	r3, [r3, #12]
 8011ca0:	68db      	ldr	r3, [r3, #12]
 8011ca2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011caa:	693a      	ldr	r2, [r7, #16]
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	d203      	bcs.n	8011cba <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011cb2:	4a2e      	ldr	r2, [pc, #184]	@ (8011d6c <xTaskIncrementTick+0x160>)
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011cb8:	e02e      	b.n	8011d18 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011cba:	68bb      	ldr	r3, [r7, #8]
 8011cbc:	3304      	adds	r3, #4
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	f7fe febe 	bl	8010a40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d004      	beq.n	8011cd6 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	3318      	adds	r3, #24
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f7fe feb5 	bl	8010a40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011cda:	2201      	movs	r2, #1
 8011cdc:	409a      	lsls	r2, r3
 8011cde:	4b24      	ldr	r3, [pc, #144]	@ (8011d70 <xTaskIncrementTick+0x164>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	4313      	orrs	r3, r2
 8011ce4:	4a22      	ldr	r2, [pc, #136]	@ (8011d70 <xTaskIncrementTick+0x164>)
 8011ce6:	6013      	str	r3, [r2, #0]
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011cec:	4613      	mov	r3, r2
 8011cee:	009b      	lsls	r3, r3, #2
 8011cf0:	4413      	add	r3, r2
 8011cf2:	009b      	lsls	r3, r3, #2
 8011cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8011d74 <xTaskIncrementTick+0x168>)
 8011cf6:	441a      	add	r2, r3
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	3304      	adds	r3, #4
 8011cfc:	4619      	mov	r1, r3
 8011cfe:	4610      	mov	r0, r2
 8011d00:	f7fe fe41 	bl	8010986 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d08:	4b1b      	ldr	r3, [pc, #108]	@ (8011d78 <xTaskIncrementTick+0x16c>)
 8011d0a:	681b      	ldr	r3, [r3, #0]
 8011d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d0e:	429a      	cmp	r2, r3
 8011d10:	d3b9      	bcc.n	8011c86 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8011d12:	2301      	movs	r3, #1
 8011d14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011d16:	e7b6      	b.n	8011c86 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011d18:	4b17      	ldr	r3, [pc, #92]	@ (8011d78 <xTaskIncrementTick+0x16c>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d1e:	4915      	ldr	r1, [pc, #84]	@ (8011d74 <xTaskIncrementTick+0x168>)
 8011d20:	4613      	mov	r3, r2
 8011d22:	009b      	lsls	r3, r3, #2
 8011d24:	4413      	add	r3, r2
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	440b      	add	r3, r1
 8011d2a:	681b      	ldr	r3, [r3, #0]
 8011d2c:	2b01      	cmp	r3, #1
 8011d2e:	d907      	bls.n	8011d40 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8011d30:	2301      	movs	r3, #1
 8011d32:	617b      	str	r3, [r7, #20]
 8011d34:	e004      	b.n	8011d40 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011d36:	4b11      	ldr	r3, [pc, #68]	@ (8011d7c <xTaskIncrementTick+0x170>)
 8011d38:	681b      	ldr	r3, [r3, #0]
 8011d3a:	3301      	adds	r3, #1
 8011d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8011d7c <xTaskIncrementTick+0x170>)
 8011d3e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011d40:	4b0f      	ldr	r3, [pc, #60]	@ (8011d80 <xTaskIncrementTick+0x174>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d001      	beq.n	8011d4c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8011d48:	2301      	movs	r3, #1
 8011d4a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011d4c:	697b      	ldr	r3, [r7, #20]
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	3718      	adds	r7, #24
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	20009ef8 	.word	0x20009ef8
 8011d5c:	20009ed4 	.word	0x20009ed4
 8011d60:	20009e88 	.word	0x20009e88
 8011d64:	20009e8c 	.word	0x20009e8c
 8011d68:	20009ee8 	.word	0x20009ee8
 8011d6c:	20009ef0 	.word	0x20009ef0
 8011d70:	20009ed8 	.word	0x20009ed8
 8011d74:	20009dd4 	.word	0x20009dd4
 8011d78:	20009dd0 	.word	0x20009dd0
 8011d7c:	20009ee0 	.word	0x20009ee0
 8011d80:	20009ee4 	.word	0x20009ee4

08011d84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b088      	sub	sp, #32
 8011d88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011d8a:	4b3d      	ldr	r3, [pc, #244]	@ (8011e80 <vTaskSwitchContext+0xfc>)
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d003      	beq.n	8011d9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011d92:	4b3c      	ldr	r3, [pc, #240]	@ (8011e84 <vTaskSwitchContext+0x100>)
 8011d94:	2201      	movs	r2, #1
 8011d96:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011d98:	e06e      	b.n	8011e78 <vTaskSwitchContext+0xf4>
		xYieldPending = pdFALSE;
 8011d9a:	4b3a      	ldr	r3, [pc, #232]	@ (8011e84 <vTaskSwitchContext+0x100>)
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011da0:	4b39      	ldr	r3, [pc, #228]	@ (8011e88 <vTaskSwitchContext+0x104>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011da6:	61fb      	str	r3, [r7, #28]
 8011da8:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 8011dac:	61bb      	str	r3, [r7, #24]
 8011dae:	69fb      	ldr	r3, [r7, #28]
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	69ba      	ldr	r2, [r7, #24]
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d111      	bne.n	8011ddc <vTaskSwitchContext+0x58>
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	3304      	adds	r3, #4
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	69ba      	ldr	r2, [r7, #24]
 8011dc0:	429a      	cmp	r2, r3
 8011dc2:	d10b      	bne.n	8011ddc <vTaskSwitchContext+0x58>
 8011dc4:	69fb      	ldr	r3, [r7, #28]
 8011dc6:	3308      	adds	r3, #8
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	69ba      	ldr	r2, [r7, #24]
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d105      	bne.n	8011ddc <vTaskSwitchContext+0x58>
 8011dd0:	69fb      	ldr	r3, [r7, #28]
 8011dd2:	330c      	adds	r3, #12
 8011dd4:	681b      	ldr	r3, [r3, #0]
 8011dd6:	69ba      	ldr	r2, [r7, #24]
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d008      	beq.n	8011dee <vTaskSwitchContext+0x6a>
 8011ddc:	4b2a      	ldr	r3, [pc, #168]	@ (8011e88 <vTaskSwitchContext+0x104>)
 8011dde:	681a      	ldr	r2, [r3, #0]
 8011de0:	4b29      	ldr	r3, [pc, #164]	@ (8011e88 <vTaskSwitchContext+0x104>)
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	3334      	adds	r3, #52	@ 0x34
 8011de6:	4619      	mov	r1, r3
 8011de8:	4610      	mov	r0, r2
 8011dea:	f7ee fe52 	bl	8000a92 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dee:	4b27      	ldr	r3, [pc, #156]	@ (8011e8c <vTaskSwitchContext+0x108>)
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011df4:	68fb      	ldr	r3, [r7, #12]
 8011df6:	fab3 f383 	clz	r3, r3
 8011dfa:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011dfc:	7afb      	ldrb	r3, [r7, #11]
 8011dfe:	f1c3 031f 	rsb	r3, r3, #31
 8011e02:	617b      	str	r3, [r7, #20]
 8011e04:	4922      	ldr	r1, [pc, #136]	@ (8011e90 <vTaskSwitchContext+0x10c>)
 8011e06:	697a      	ldr	r2, [r7, #20]
 8011e08:	4613      	mov	r3, r2
 8011e0a:	009b      	lsls	r3, r3, #2
 8011e0c:	4413      	add	r3, r2
 8011e0e:	009b      	lsls	r3, r3, #2
 8011e10:	440b      	add	r3, r1
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d10d      	bne.n	8011e34 <vTaskSwitchContext+0xb0>
	__asm volatile
 8011e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e1c:	b672      	cpsid	i
 8011e1e:	f383 8811 	msr	BASEPRI, r3
 8011e22:	f3bf 8f6f 	isb	sy
 8011e26:	f3bf 8f4f 	dsb	sy
 8011e2a:	b662      	cpsie	i
 8011e2c:	607b      	str	r3, [r7, #4]
}
 8011e2e:	bf00      	nop
 8011e30:	bf00      	nop
 8011e32:	e7fd      	b.n	8011e30 <vTaskSwitchContext+0xac>
 8011e34:	697a      	ldr	r2, [r7, #20]
 8011e36:	4613      	mov	r3, r2
 8011e38:	009b      	lsls	r3, r3, #2
 8011e3a:	4413      	add	r3, r2
 8011e3c:	009b      	lsls	r3, r3, #2
 8011e3e:	4a14      	ldr	r2, [pc, #80]	@ (8011e90 <vTaskSwitchContext+0x10c>)
 8011e40:	4413      	add	r3, r2
 8011e42:	613b      	str	r3, [r7, #16]
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	685b      	ldr	r3, [r3, #4]
 8011e48:	685a      	ldr	r2, [r3, #4]
 8011e4a:	693b      	ldr	r3, [r7, #16]
 8011e4c:	605a      	str	r2, [r3, #4]
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	685a      	ldr	r2, [r3, #4]
 8011e52:	693b      	ldr	r3, [r7, #16]
 8011e54:	3308      	adds	r3, #8
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d104      	bne.n	8011e64 <vTaskSwitchContext+0xe0>
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	685a      	ldr	r2, [r3, #4]
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	605a      	str	r2, [r3, #4]
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	68db      	ldr	r3, [r3, #12]
 8011e6a:	4a07      	ldr	r2, [pc, #28]	@ (8011e88 <vTaskSwitchContext+0x104>)
 8011e6c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011e6e:	4b06      	ldr	r3, [pc, #24]	@ (8011e88 <vTaskSwitchContext+0x104>)
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	3350      	adds	r3, #80	@ 0x50
 8011e74:	4a07      	ldr	r2, [pc, #28]	@ (8011e94 <vTaskSwitchContext+0x110>)
 8011e76:	6013      	str	r3, [r2, #0]
}
 8011e78:	bf00      	nop
 8011e7a:	3720      	adds	r7, #32
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}
 8011e80:	20009ef8 	.word	0x20009ef8
 8011e84:	20009ee4 	.word	0x20009ee4
 8011e88:	20009dd0 	.word	0x20009dd0
 8011e8c:	20009ed8 	.word	0x20009ed8
 8011e90:	20009dd4 	.word	0x20009dd4
 8011e94:	2000004c 	.word	0x2000004c

08011e98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011e98:	b580      	push	{r7, lr}
 8011e9a:	b084      	sub	sp, #16
 8011e9c:	af00      	add	r7, sp, #0
 8011e9e:	6078      	str	r0, [r7, #4]
 8011ea0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d10d      	bne.n	8011ec4 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8011ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011eac:	b672      	cpsid	i
 8011eae:	f383 8811 	msr	BASEPRI, r3
 8011eb2:	f3bf 8f6f 	isb	sy
 8011eb6:	f3bf 8f4f 	dsb	sy
 8011eba:	b662      	cpsie	i
 8011ebc:	60fb      	str	r3, [r7, #12]
}
 8011ebe:	bf00      	nop
 8011ec0:	bf00      	nop
 8011ec2:	e7fd      	b.n	8011ec0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011ec4:	4b07      	ldr	r3, [pc, #28]	@ (8011ee4 <vTaskPlaceOnEventList+0x4c>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	3318      	adds	r3, #24
 8011eca:	4619      	mov	r1, r3
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f7fe fd7e 	bl	80109ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011ed2:	2101      	movs	r1, #1
 8011ed4:	6838      	ldr	r0, [r7, #0]
 8011ed6:	f000 fa81 	bl	80123dc <prvAddCurrentTaskToDelayedList>
}
 8011eda:	bf00      	nop
 8011edc:	3710      	adds	r7, #16
 8011ede:	46bd      	mov	sp, r7
 8011ee0:	bd80      	pop	{r7, pc}
 8011ee2:	bf00      	nop
 8011ee4:	20009dd0 	.word	0x20009dd0

08011ee8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b086      	sub	sp, #24
 8011eec:	af00      	add	r7, sp, #0
 8011eee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	68db      	ldr	r3, [r3, #12]
 8011ef4:	68db      	ldr	r3, [r3, #12]
 8011ef6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011ef8:	693b      	ldr	r3, [r7, #16]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d10d      	bne.n	8011f1a <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8011efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f02:	b672      	cpsid	i
 8011f04:	f383 8811 	msr	BASEPRI, r3
 8011f08:	f3bf 8f6f 	isb	sy
 8011f0c:	f3bf 8f4f 	dsb	sy
 8011f10:	b662      	cpsie	i
 8011f12:	60fb      	str	r3, [r7, #12]
}
 8011f14:	bf00      	nop
 8011f16:	bf00      	nop
 8011f18:	e7fd      	b.n	8011f16 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	3318      	adds	r3, #24
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fe fd8e 	bl	8010a40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f24:	4b1d      	ldr	r3, [pc, #116]	@ (8011f9c <xTaskRemoveFromEventList+0xb4>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d11c      	bne.n	8011f66 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011f2c:	693b      	ldr	r3, [r7, #16]
 8011f2e:	3304      	adds	r3, #4
 8011f30:	4618      	mov	r0, r3
 8011f32:	f7fe fd85 	bl	8010a40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f3a:	2201      	movs	r2, #1
 8011f3c:	409a      	lsls	r2, r3
 8011f3e:	4b18      	ldr	r3, [pc, #96]	@ (8011fa0 <xTaskRemoveFromEventList+0xb8>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	4313      	orrs	r3, r2
 8011f44:	4a16      	ldr	r2, [pc, #88]	@ (8011fa0 <xTaskRemoveFromEventList+0xb8>)
 8011f46:	6013      	str	r3, [r2, #0]
 8011f48:	693b      	ldr	r3, [r7, #16]
 8011f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f4c:	4613      	mov	r3, r2
 8011f4e:	009b      	lsls	r3, r3, #2
 8011f50:	4413      	add	r3, r2
 8011f52:	009b      	lsls	r3, r3, #2
 8011f54:	4a13      	ldr	r2, [pc, #76]	@ (8011fa4 <xTaskRemoveFromEventList+0xbc>)
 8011f56:	441a      	add	r2, r3
 8011f58:	693b      	ldr	r3, [r7, #16]
 8011f5a:	3304      	adds	r3, #4
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	4610      	mov	r0, r2
 8011f60:	f7fe fd11 	bl	8010986 <vListInsertEnd>
 8011f64:	e005      	b.n	8011f72 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011f66:	693b      	ldr	r3, [r7, #16]
 8011f68:	3318      	adds	r3, #24
 8011f6a:	4619      	mov	r1, r3
 8011f6c:	480e      	ldr	r0, [pc, #56]	@ (8011fa8 <xTaskRemoveFromEventList+0xc0>)
 8011f6e:	f7fe fd0a 	bl	8010986 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011f76:	4b0d      	ldr	r3, [pc, #52]	@ (8011fac <xTaskRemoveFromEventList+0xc4>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d905      	bls.n	8011f8c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011f80:	2301      	movs	r3, #1
 8011f82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011f84:	4b0a      	ldr	r3, [pc, #40]	@ (8011fb0 <xTaskRemoveFromEventList+0xc8>)
 8011f86:	2201      	movs	r2, #1
 8011f88:	601a      	str	r2, [r3, #0]
 8011f8a:	e001      	b.n	8011f90 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8011f8c:	2300      	movs	r3, #0
 8011f8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011f90:	697b      	ldr	r3, [r7, #20]
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	3718      	adds	r7, #24
 8011f96:	46bd      	mov	sp, r7
 8011f98:	bd80      	pop	{r7, pc}
 8011f9a:	bf00      	nop
 8011f9c:	20009ef8 	.word	0x20009ef8
 8011fa0:	20009ed8 	.word	0x20009ed8
 8011fa4:	20009dd4 	.word	0x20009dd4
 8011fa8:	20009e90 	.word	0x20009e90
 8011fac:	20009dd0 	.word	0x20009dd0
 8011fb0:	20009ee4 	.word	0x20009ee4

08011fb4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011fb4:	b480      	push	{r7}
 8011fb6:	b083      	sub	sp, #12
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011fbc:	4b06      	ldr	r3, [pc, #24]	@ (8011fd8 <vTaskInternalSetTimeOutState+0x24>)
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011fc4:	4b05      	ldr	r3, [pc, #20]	@ (8011fdc <vTaskInternalSetTimeOutState+0x28>)
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	605a      	str	r2, [r3, #4]
}
 8011fcc:	bf00      	nop
 8011fce:	370c      	adds	r7, #12
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fd6:	4770      	bx	lr
 8011fd8:	20009ee8 	.word	0x20009ee8
 8011fdc:	20009ed4 	.word	0x20009ed4

08011fe0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011fe0:	b580      	push	{r7, lr}
 8011fe2:	b088      	sub	sp, #32
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
 8011fe8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d10d      	bne.n	801200c <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8011ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ff4:	b672      	cpsid	i
 8011ff6:	f383 8811 	msr	BASEPRI, r3
 8011ffa:	f3bf 8f6f 	isb	sy
 8011ffe:	f3bf 8f4f 	dsb	sy
 8012002:	b662      	cpsie	i
 8012004:	613b      	str	r3, [r7, #16]
}
 8012006:	bf00      	nop
 8012008:	bf00      	nop
 801200a:	e7fd      	b.n	8012008 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801200c:	683b      	ldr	r3, [r7, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d10d      	bne.n	801202e <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8012012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012016:	b672      	cpsid	i
 8012018:	f383 8811 	msr	BASEPRI, r3
 801201c:	f3bf 8f6f 	isb	sy
 8012020:	f3bf 8f4f 	dsb	sy
 8012024:	b662      	cpsie	i
 8012026:	60fb      	str	r3, [r7, #12]
}
 8012028:	bf00      	nop
 801202a:	bf00      	nop
 801202c:	e7fd      	b.n	801202a <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801202e:	f000 fb4d 	bl	80126cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012032:	4b1d      	ldr	r3, [pc, #116]	@ (80120a8 <xTaskCheckForTimeOut+0xc8>)
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	685b      	ldr	r3, [r3, #4]
 801203c:	69ba      	ldr	r2, [r7, #24]
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012042:	683b      	ldr	r3, [r7, #0]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f1b3 3fff 	cmp.w	r3, #4294967295
 801204a:	d102      	bne.n	8012052 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801204c:	2300      	movs	r3, #0
 801204e:	61fb      	str	r3, [r7, #28]
 8012050:	e023      	b.n	801209a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681a      	ldr	r2, [r3, #0]
 8012056:	4b15      	ldr	r3, [pc, #84]	@ (80120ac <xTaskCheckForTimeOut+0xcc>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	429a      	cmp	r2, r3
 801205c:	d007      	beq.n	801206e <xTaskCheckForTimeOut+0x8e>
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	685b      	ldr	r3, [r3, #4]
 8012062:	69ba      	ldr	r2, [r7, #24]
 8012064:	429a      	cmp	r2, r3
 8012066:	d302      	bcc.n	801206e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012068:	2301      	movs	r3, #1
 801206a:	61fb      	str	r3, [r7, #28]
 801206c:	e015      	b.n	801209a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801206e:	683b      	ldr	r3, [r7, #0]
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	697a      	ldr	r2, [r7, #20]
 8012074:	429a      	cmp	r2, r3
 8012076:	d20b      	bcs.n	8012090 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	681a      	ldr	r2, [r3, #0]
 801207c:	697b      	ldr	r3, [r7, #20]
 801207e:	1ad2      	subs	r2, r2, r3
 8012080:	683b      	ldr	r3, [r7, #0]
 8012082:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f7ff ff95 	bl	8011fb4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801208a:	2300      	movs	r3, #0
 801208c:	61fb      	str	r3, [r7, #28]
 801208e:	e004      	b.n	801209a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8012090:	683b      	ldr	r3, [r7, #0]
 8012092:	2200      	movs	r2, #0
 8012094:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012096:	2301      	movs	r3, #1
 8012098:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801209a:	f000 fb4d 	bl	8012738 <vPortExitCritical>

	return xReturn;
 801209e:	69fb      	ldr	r3, [r7, #28]
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	3720      	adds	r7, #32
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	20009ed4 	.word	0x20009ed4
 80120ac:	20009ee8 	.word	0x20009ee8

080120b0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80120b0:	b480      	push	{r7}
 80120b2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80120b4:	4b03      	ldr	r3, [pc, #12]	@ (80120c4 <vTaskMissedYield+0x14>)
 80120b6:	2201      	movs	r2, #1
 80120b8:	601a      	str	r2, [r3, #0]
}
 80120ba:	bf00      	nop
 80120bc:	46bd      	mov	sp, r7
 80120be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c2:	4770      	bx	lr
 80120c4:	20009ee4 	.word	0x20009ee4

080120c8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80120d0:	f000 f854 	bl	801217c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80120d4:	4b07      	ldr	r3, [pc, #28]	@ (80120f4 <prvIdleTask+0x2c>)
 80120d6:	681b      	ldr	r3, [r3, #0]
 80120d8:	2b01      	cmp	r3, #1
 80120da:	d907      	bls.n	80120ec <prvIdleTask+0x24>
			{
				taskYIELD();
 80120dc:	4b06      	ldr	r3, [pc, #24]	@ (80120f8 <prvIdleTask+0x30>)
 80120de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80120e2:	601a      	str	r2, [r3, #0]
 80120e4:	f3bf 8f4f 	dsb	sy
 80120e8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80120ec:	f7ee fcca 	bl	8000a84 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80120f0:	e7ee      	b.n	80120d0 <prvIdleTask+0x8>
 80120f2:	bf00      	nop
 80120f4:	20009dd4 	.word	0x20009dd4
 80120f8:	e000ed04 	.word	0xe000ed04

080120fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b082      	sub	sp, #8
 8012100:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012102:	2300      	movs	r3, #0
 8012104:	607b      	str	r3, [r7, #4]
 8012106:	e00c      	b.n	8012122 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012108:	687a      	ldr	r2, [r7, #4]
 801210a:	4613      	mov	r3, r2
 801210c:	009b      	lsls	r3, r3, #2
 801210e:	4413      	add	r3, r2
 8012110:	009b      	lsls	r3, r3, #2
 8012112:	4a12      	ldr	r2, [pc, #72]	@ (801215c <prvInitialiseTaskLists+0x60>)
 8012114:	4413      	add	r3, r2
 8012116:	4618      	mov	r0, r3
 8012118:	f7fe fc08 	bl	801092c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	3301      	adds	r3, #1
 8012120:	607b      	str	r3, [r7, #4]
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2b06      	cmp	r3, #6
 8012126:	d9ef      	bls.n	8012108 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012128:	480d      	ldr	r0, [pc, #52]	@ (8012160 <prvInitialiseTaskLists+0x64>)
 801212a:	f7fe fbff 	bl	801092c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801212e:	480d      	ldr	r0, [pc, #52]	@ (8012164 <prvInitialiseTaskLists+0x68>)
 8012130:	f7fe fbfc 	bl	801092c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012134:	480c      	ldr	r0, [pc, #48]	@ (8012168 <prvInitialiseTaskLists+0x6c>)
 8012136:	f7fe fbf9 	bl	801092c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801213a:	480c      	ldr	r0, [pc, #48]	@ (801216c <prvInitialiseTaskLists+0x70>)
 801213c:	f7fe fbf6 	bl	801092c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012140:	480b      	ldr	r0, [pc, #44]	@ (8012170 <prvInitialiseTaskLists+0x74>)
 8012142:	f7fe fbf3 	bl	801092c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012146:	4b0b      	ldr	r3, [pc, #44]	@ (8012174 <prvInitialiseTaskLists+0x78>)
 8012148:	4a05      	ldr	r2, [pc, #20]	@ (8012160 <prvInitialiseTaskLists+0x64>)
 801214a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801214c:	4b0a      	ldr	r3, [pc, #40]	@ (8012178 <prvInitialiseTaskLists+0x7c>)
 801214e:	4a05      	ldr	r2, [pc, #20]	@ (8012164 <prvInitialiseTaskLists+0x68>)
 8012150:	601a      	str	r2, [r3, #0]
}
 8012152:	bf00      	nop
 8012154:	3708      	adds	r7, #8
 8012156:	46bd      	mov	sp, r7
 8012158:	bd80      	pop	{r7, pc}
 801215a:	bf00      	nop
 801215c:	20009dd4 	.word	0x20009dd4
 8012160:	20009e60 	.word	0x20009e60
 8012164:	20009e74 	.word	0x20009e74
 8012168:	20009e90 	.word	0x20009e90
 801216c:	20009ea4 	.word	0x20009ea4
 8012170:	20009ebc 	.word	0x20009ebc
 8012174:	20009e88 	.word	0x20009e88
 8012178:	20009e8c 	.word	0x20009e8c

0801217c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b082      	sub	sp, #8
 8012180:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012182:	e019      	b.n	80121b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012184:	f000 faa2 	bl	80126cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012188:	4b10      	ldr	r3, [pc, #64]	@ (80121cc <prvCheckTasksWaitingTermination+0x50>)
 801218a:	68db      	ldr	r3, [r3, #12]
 801218c:	68db      	ldr	r3, [r3, #12]
 801218e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	3304      	adds	r3, #4
 8012194:	4618      	mov	r0, r3
 8012196:	f7fe fc53 	bl	8010a40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801219a:	4b0d      	ldr	r3, [pc, #52]	@ (80121d0 <prvCheckTasksWaitingTermination+0x54>)
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	3b01      	subs	r3, #1
 80121a0:	4a0b      	ldr	r2, [pc, #44]	@ (80121d0 <prvCheckTasksWaitingTermination+0x54>)
 80121a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80121a4:	4b0b      	ldr	r3, [pc, #44]	@ (80121d4 <prvCheckTasksWaitingTermination+0x58>)
 80121a6:	681b      	ldr	r3, [r3, #0]
 80121a8:	3b01      	subs	r3, #1
 80121aa:	4a0a      	ldr	r2, [pc, #40]	@ (80121d4 <prvCheckTasksWaitingTermination+0x58>)
 80121ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80121ae:	f000 fac3 	bl	8012738 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f000 f810 	bl	80121d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80121b8:	4b06      	ldr	r3, [pc, #24]	@ (80121d4 <prvCheckTasksWaitingTermination+0x58>)
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	2b00      	cmp	r3, #0
 80121be:	d1e1      	bne.n	8012184 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80121c0:	bf00      	nop
 80121c2:	bf00      	nop
 80121c4:	3708      	adds	r7, #8
 80121c6:	46bd      	mov	sp, r7
 80121c8:	bd80      	pop	{r7, pc}
 80121ca:	bf00      	nop
 80121cc:	20009ea4 	.word	0x20009ea4
 80121d0:	20009ed0 	.word	0x20009ed0
 80121d4:	20009eb8 	.word	0x20009eb8

080121d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80121d8:	b580      	push	{r7, lr}
 80121da:	b084      	sub	sp, #16
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	3350      	adds	r3, #80	@ 0x50
 80121e4:	4618      	mov	r0, r3
 80121e6:	f000 fdb5 	bl	8012d54 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d108      	bne.n	8012206 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121f8:	4618      	mov	r0, r3
 80121fa:	f000 fc67 	bl	8012acc <vPortFree>
				vPortFree( pxTCB );
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f000 fc64 	bl	8012acc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012204:	e01b      	b.n	801223e <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 801220c:	2b01      	cmp	r3, #1
 801220e:	d103      	bne.n	8012218 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f000 fc5b 	bl	8012acc <vPortFree>
	}
 8012216:	e012      	b.n	801223e <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 801221e:	2b02      	cmp	r3, #2
 8012220:	d00d      	beq.n	801223e <prvDeleteTCB+0x66>
	__asm volatile
 8012222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012226:	b672      	cpsid	i
 8012228:	f383 8811 	msr	BASEPRI, r3
 801222c:	f3bf 8f6f 	isb	sy
 8012230:	f3bf 8f4f 	dsb	sy
 8012234:	b662      	cpsie	i
 8012236:	60fb      	str	r3, [r7, #12]
}
 8012238:	bf00      	nop
 801223a:	bf00      	nop
 801223c:	e7fd      	b.n	801223a <prvDeleteTCB+0x62>
	}
 801223e:	bf00      	nop
 8012240:	3710      	adds	r7, #16
 8012242:	46bd      	mov	sp, r7
 8012244:	bd80      	pop	{r7, pc}
	...

08012248 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012248:	b480      	push	{r7}
 801224a:	b083      	sub	sp, #12
 801224c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801224e:	4b0c      	ldr	r3, [pc, #48]	@ (8012280 <prvResetNextTaskUnblockTime+0x38>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d104      	bne.n	8012262 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012258:	4b0a      	ldr	r3, [pc, #40]	@ (8012284 <prvResetNextTaskUnblockTime+0x3c>)
 801225a:	f04f 32ff 	mov.w	r2, #4294967295
 801225e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012260:	e008      	b.n	8012274 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012262:	4b07      	ldr	r3, [pc, #28]	@ (8012280 <prvResetNextTaskUnblockTime+0x38>)
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	68db      	ldr	r3, [r3, #12]
 8012268:	68db      	ldr	r3, [r3, #12]
 801226a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	685b      	ldr	r3, [r3, #4]
 8012270:	4a04      	ldr	r2, [pc, #16]	@ (8012284 <prvResetNextTaskUnblockTime+0x3c>)
 8012272:	6013      	str	r3, [r2, #0]
}
 8012274:	bf00      	nop
 8012276:	370c      	adds	r7, #12
 8012278:	46bd      	mov	sp, r7
 801227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227e:	4770      	bx	lr
 8012280:	20009e88 	.word	0x20009e88
 8012284:	20009ef0 	.word	0x20009ef0

08012288 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801228e:	4b0b      	ldr	r3, [pc, #44]	@ (80122bc <xTaskGetSchedulerState+0x34>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	2b00      	cmp	r3, #0
 8012294:	d102      	bne.n	801229c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012296:	2301      	movs	r3, #1
 8012298:	607b      	str	r3, [r7, #4]
 801229a:	e008      	b.n	80122ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801229c:	4b08      	ldr	r3, [pc, #32]	@ (80122c0 <xTaskGetSchedulerState+0x38>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d102      	bne.n	80122aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80122a4:	2302      	movs	r3, #2
 80122a6:	607b      	str	r3, [r7, #4]
 80122a8:	e001      	b.n	80122ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80122aa:	2300      	movs	r3, #0
 80122ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80122ae:	687b      	ldr	r3, [r7, #4]
	}
 80122b0:	4618      	mov	r0, r3
 80122b2:	370c      	adds	r7, #12
 80122b4:	46bd      	mov	sp, r7
 80122b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ba:	4770      	bx	lr
 80122bc:	20009edc 	.word	0x20009edc
 80122c0:	20009ef8 	.word	0x20009ef8

080122c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b086      	sub	sp, #24
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80122d0:	2300      	movs	r3, #0
 80122d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d074      	beq.n	80123c4 <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80122da:	4b3d      	ldr	r3, [pc, #244]	@ (80123d0 <xTaskPriorityDisinherit+0x10c>)
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	693a      	ldr	r2, [r7, #16]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d00d      	beq.n	8012300 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80122e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122e8:	b672      	cpsid	i
 80122ea:	f383 8811 	msr	BASEPRI, r3
 80122ee:	f3bf 8f6f 	isb	sy
 80122f2:	f3bf 8f4f 	dsb	sy
 80122f6:	b662      	cpsie	i
 80122f8:	60fb      	str	r3, [r7, #12]
}
 80122fa:	bf00      	nop
 80122fc:	bf00      	nop
 80122fe:	e7fd      	b.n	80122fc <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012304:	2b00      	cmp	r3, #0
 8012306:	d10d      	bne.n	8012324 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8012308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801230c:	b672      	cpsid	i
 801230e:	f383 8811 	msr	BASEPRI, r3
 8012312:	f3bf 8f6f 	isb	sy
 8012316:	f3bf 8f4f 	dsb	sy
 801231a:	b662      	cpsie	i
 801231c:	60bb      	str	r3, [r7, #8]
}
 801231e:	bf00      	nop
 8012320:	bf00      	nop
 8012322:	e7fd      	b.n	8012320 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8012324:	693b      	ldr	r3, [r7, #16]
 8012326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012328:	1e5a      	subs	r2, r3, #1
 801232a:	693b      	ldr	r3, [r7, #16]
 801232c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801232e:	693b      	ldr	r3, [r7, #16]
 8012330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012336:	429a      	cmp	r2, r3
 8012338:	d044      	beq.n	80123c4 <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801233a:	693b      	ldr	r3, [r7, #16]
 801233c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801233e:	2b00      	cmp	r3, #0
 8012340:	d140      	bne.n	80123c4 <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	3304      	adds	r3, #4
 8012346:	4618      	mov	r0, r3
 8012348:	f7fe fb7a 	bl	8010a40 <uxListRemove>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d115      	bne.n	801237e <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012352:	693b      	ldr	r3, [r7, #16]
 8012354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012356:	491f      	ldr	r1, [pc, #124]	@ (80123d4 <xTaskPriorityDisinherit+0x110>)
 8012358:	4613      	mov	r3, r2
 801235a:	009b      	lsls	r3, r3, #2
 801235c:	4413      	add	r3, r2
 801235e:	009b      	lsls	r3, r3, #2
 8012360:	440b      	add	r3, r1
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	2b00      	cmp	r3, #0
 8012366:	d10a      	bne.n	801237e <xTaskPriorityDisinherit+0xba>
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801236c:	2201      	movs	r2, #1
 801236e:	fa02 f303 	lsl.w	r3, r2, r3
 8012372:	43da      	mvns	r2, r3
 8012374:	4b18      	ldr	r3, [pc, #96]	@ (80123d8 <xTaskPriorityDisinherit+0x114>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	4013      	ands	r3, r2
 801237a:	4a17      	ldr	r2, [pc, #92]	@ (80123d8 <xTaskPriorityDisinherit+0x114>)
 801237c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801237e:	693b      	ldr	r3, [r7, #16]
 8012380:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012386:	693b      	ldr	r3, [r7, #16]
 8012388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801238a:	f1c3 0207 	rsb	r2, r3, #7
 801238e:	693b      	ldr	r3, [r7, #16]
 8012390:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012392:	693b      	ldr	r3, [r7, #16]
 8012394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012396:	2201      	movs	r2, #1
 8012398:	409a      	lsls	r2, r3
 801239a:	4b0f      	ldr	r3, [pc, #60]	@ (80123d8 <xTaskPriorityDisinherit+0x114>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	4313      	orrs	r3, r2
 80123a0:	4a0d      	ldr	r2, [pc, #52]	@ (80123d8 <xTaskPriorityDisinherit+0x114>)
 80123a2:	6013      	str	r3, [r2, #0]
 80123a4:	693b      	ldr	r3, [r7, #16]
 80123a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123a8:	4613      	mov	r3, r2
 80123aa:	009b      	lsls	r3, r3, #2
 80123ac:	4413      	add	r3, r2
 80123ae:	009b      	lsls	r3, r3, #2
 80123b0:	4a08      	ldr	r2, [pc, #32]	@ (80123d4 <xTaskPriorityDisinherit+0x110>)
 80123b2:	441a      	add	r2, r3
 80123b4:	693b      	ldr	r3, [r7, #16]
 80123b6:	3304      	adds	r3, #4
 80123b8:	4619      	mov	r1, r3
 80123ba:	4610      	mov	r0, r2
 80123bc:	f7fe fae3 	bl	8010986 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80123c0:	2301      	movs	r3, #1
 80123c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80123c4:	697b      	ldr	r3, [r7, #20]
	}
 80123c6:	4618      	mov	r0, r3
 80123c8:	3718      	adds	r7, #24
 80123ca:	46bd      	mov	sp, r7
 80123cc:	bd80      	pop	{r7, pc}
 80123ce:	bf00      	nop
 80123d0:	20009dd0 	.word	0x20009dd0
 80123d4:	20009dd4 	.word	0x20009dd4
 80123d8:	20009ed8 	.word	0x20009ed8

080123dc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
 80123e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80123e6:	4b29      	ldr	r3, [pc, #164]	@ (801248c <prvAddCurrentTaskToDelayedList+0xb0>)
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80123ec:	4b28      	ldr	r3, [pc, #160]	@ (8012490 <prvAddCurrentTaskToDelayedList+0xb4>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	3304      	adds	r3, #4
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fe fb24 	bl	8010a40 <uxListRemove>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d10b      	bne.n	8012416 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80123fe:	4b24      	ldr	r3, [pc, #144]	@ (8012490 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012404:	2201      	movs	r2, #1
 8012406:	fa02 f303 	lsl.w	r3, r2, r3
 801240a:	43da      	mvns	r2, r3
 801240c:	4b21      	ldr	r3, [pc, #132]	@ (8012494 <prvAddCurrentTaskToDelayedList+0xb8>)
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	4013      	ands	r3, r2
 8012412:	4a20      	ldr	r2, [pc, #128]	@ (8012494 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012414:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f1b3 3fff 	cmp.w	r3, #4294967295
 801241c:	d10a      	bne.n	8012434 <prvAddCurrentTaskToDelayedList+0x58>
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d007      	beq.n	8012434 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012424:	4b1a      	ldr	r3, [pc, #104]	@ (8012490 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	3304      	adds	r3, #4
 801242a:	4619      	mov	r1, r3
 801242c:	481a      	ldr	r0, [pc, #104]	@ (8012498 <prvAddCurrentTaskToDelayedList+0xbc>)
 801242e:	f7fe faaa 	bl	8010986 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012432:	e026      	b.n	8012482 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012434:	68fa      	ldr	r2, [r7, #12]
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	4413      	add	r3, r2
 801243a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801243c:	4b14      	ldr	r3, [pc, #80]	@ (8012490 <prvAddCurrentTaskToDelayedList+0xb4>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	68ba      	ldr	r2, [r7, #8]
 8012442:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012444:	68ba      	ldr	r2, [r7, #8]
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	429a      	cmp	r2, r3
 801244a:	d209      	bcs.n	8012460 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801244c:	4b13      	ldr	r3, [pc, #76]	@ (801249c <prvAddCurrentTaskToDelayedList+0xc0>)
 801244e:	681a      	ldr	r2, [r3, #0]
 8012450:	4b0f      	ldr	r3, [pc, #60]	@ (8012490 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012452:	681b      	ldr	r3, [r3, #0]
 8012454:	3304      	adds	r3, #4
 8012456:	4619      	mov	r1, r3
 8012458:	4610      	mov	r0, r2
 801245a:	f7fe fab8 	bl	80109ce <vListInsert>
}
 801245e:	e010      	b.n	8012482 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012460:	4b0f      	ldr	r3, [pc, #60]	@ (80124a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012462:	681a      	ldr	r2, [r3, #0]
 8012464:	4b0a      	ldr	r3, [pc, #40]	@ (8012490 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	3304      	adds	r3, #4
 801246a:	4619      	mov	r1, r3
 801246c:	4610      	mov	r0, r2
 801246e:	f7fe faae 	bl	80109ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012472:	4b0c      	ldr	r3, [pc, #48]	@ (80124a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	68ba      	ldr	r2, [r7, #8]
 8012478:	429a      	cmp	r2, r3
 801247a:	d202      	bcs.n	8012482 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801247c:	4a09      	ldr	r2, [pc, #36]	@ (80124a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 801247e:	68bb      	ldr	r3, [r7, #8]
 8012480:	6013      	str	r3, [r2, #0]
}
 8012482:	bf00      	nop
 8012484:	3710      	adds	r7, #16
 8012486:	46bd      	mov	sp, r7
 8012488:	bd80      	pop	{r7, pc}
 801248a:	bf00      	nop
 801248c:	20009ed4 	.word	0x20009ed4
 8012490:	20009dd0 	.word	0x20009dd0
 8012494:	20009ed8 	.word	0x20009ed8
 8012498:	20009ebc 	.word	0x20009ebc
 801249c:	20009e8c 	.word	0x20009e8c
 80124a0:	20009e88 	.word	0x20009e88
 80124a4:	20009ef0 	.word	0x20009ef0

080124a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80124a8:	b480      	push	{r7}
 80124aa:	b085      	sub	sp, #20
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	3b04      	subs	r3, #4
 80124b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80124c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	3b04      	subs	r3, #4
 80124c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80124c8:	68bb      	ldr	r3, [r7, #8]
 80124ca:	f023 0201 	bic.w	r2, r3, #1
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	3b04      	subs	r3, #4
 80124d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80124d8:	4a0c      	ldr	r2, [pc, #48]	@ (801250c <pxPortInitialiseStack+0x64>)
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	3b14      	subs	r3, #20
 80124e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80124e4:	687a      	ldr	r2, [r7, #4]
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	3b04      	subs	r3, #4
 80124ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	f06f 0202 	mvn.w	r2, #2
 80124f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	3b20      	subs	r3, #32
 80124fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80124fe:	68fb      	ldr	r3, [r7, #12]
}
 8012500:	4618      	mov	r0, r3
 8012502:	3714      	adds	r7, #20
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr
 801250c:	08012511 	.word	0x08012511

08012510 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012510:	b480      	push	{r7}
 8012512:	b085      	sub	sp, #20
 8012514:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012516:	2300      	movs	r3, #0
 8012518:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801251a:	4b15      	ldr	r3, [pc, #84]	@ (8012570 <prvTaskExitError+0x60>)
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012522:	d00d      	beq.n	8012540 <prvTaskExitError+0x30>
	__asm volatile
 8012524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012528:	b672      	cpsid	i
 801252a:	f383 8811 	msr	BASEPRI, r3
 801252e:	f3bf 8f6f 	isb	sy
 8012532:	f3bf 8f4f 	dsb	sy
 8012536:	b662      	cpsie	i
 8012538:	60fb      	str	r3, [r7, #12]
}
 801253a:	bf00      	nop
 801253c:	bf00      	nop
 801253e:	e7fd      	b.n	801253c <prvTaskExitError+0x2c>
	__asm volatile
 8012540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012544:	b672      	cpsid	i
 8012546:	f383 8811 	msr	BASEPRI, r3
 801254a:	f3bf 8f6f 	isb	sy
 801254e:	f3bf 8f4f 	dsb	sy
 8012552:	b662      	cpsie	i
 8012554:	60bb      	str	r3, [r7, #8]
}
 8012556:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012558:	bf00      	nop
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d0fc      	beq.n	801255a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012560:	bf00      	nop
 8012562:	bf00      	nop
 8012564:	3714      	adds	r7, #20
 8012566:	46bd      	mov	sp, r7
 8012568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801256c:	4770      	bx	lr
 801256e:	bf00      	nop
 8012570:	20000048 	.word	0x20000048
	...

08012580 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012580:	4b07      	ldr	r3, [pc, #28]	@ (80125a0 <pxCurrentTCBConst2>)
 8012582:	6819      	ldr	r1, [r3, #0]
 8012584:	6808      	ldr	r0, [r1, #0]
 8012586:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801258a:	f380 8809 	msr	PSP, r0
 801258e:	f3bf 8f6f 	isb	sy
 8012592:	f04f 0000 	mov.w	r0, #0
 8012596:	f380 8811 	msr	BASEPRI, r0
 801259a:	4770      	bx	lr
 801259c:	f3af 8000 	nop.w

080125a0 <pxCurrentTCBConst2>:
 80125a0:	20009dd0 	.word	0x20009dd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80125a4:	bf00      	nop
 80125a6:	bf00      	nop

080125a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80125a8:	4808      	ldr	r0, [pc, #32]	@ (80125cc <prvPortStartFirstTask+0x24>)
 80125aa:	6800      	ldr	r0, [r0, #0]
 80125ac:	6800      	ldr	r0, [r0, #0]
 80125ae:	f380 8808 	msr	MSP, r0
 80125b2:	f04f 0000 	mov.w	r0, #0
 80125b6:	f380 8814 	msr	CONTROL, r0
 80125ba:	b662      	cpsie	i
 80125bc:	b661      	cpsie	f
 80125be:	f3bf 8f4f 	dsb	sy
 80125c2:	f3bf 8f6f 	isb	sy
 80125c6:	df00      	svc	0
 80125c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80125ca:	bf00      	nop
 80125cc:	e000ed08 	.word	0xe000ed08

080125d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80125d6:	4b37      	ldr	r3, [pc, #220]	@ (80126b4 <xPortStartScheduler+0xe4>)
 80125d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80125da:	68fb      	ldr	r3, [r7, #12]
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	b2db      	uxtb	r3, r3
 80125e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	22ff      	movs	r2, #255	@ 0xff
 80125e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	781b      	ldrb	r3, [r3, #0]
 80125ec:	b2db      	uxtb	r3, r3
 80125ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80125f0:	78fb      	ldrb	r3, [r7, #3]
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80125f8:	b2da      	uxtb	r2, r3
 80125fa:	4b2f      	ldr	r3, [pc, #188]	@ (80126b8 <xPortStartScheduler+0xe8>)
 80125fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80125fe:	4b2f      	ldr	r3, [pc, #188]	@ (80126bc <xPortStartScheduler+0xec>)
 8012600:	2207      	movs	r2, #7
 8012602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012604:	e009      	b.n	801261a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012606:	4b2d      	ldr	r3, [pc, #180]	@ (80126bc <xPortStartScheduler+0xec>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	3b01      	subs	r3, #1
 801260c:	4a2b      	ldr	r2, [pc, #172]	@ (80126bc <xPortStartScheduler+0xec>)
 801260e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012610:	78fb      	ldrb	r3, [r7, #3]
 8012612:	b2db      	uxtb	r3, r3
 8012614:	005b      	lsls	r3, r3, #1
 8012616:	b2db      	uxtb	r3, r3
 8012618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801261a:	78fb      	ldrb	r3, [r7, #3]
 801261c:	b2db      	uxtb	r3, r3
 801261e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012622:	2b80      	cmp	r3, #128	@ 0x80
 8012624:	d0ef      	beq.n	8012606 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012626:	4b25      	ldr	r3, [pc, #148]	@ (80126bc <xPortStartScheduler+0xec>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	f1c3 0307 	rsb	r3, r3, #7
 801262e:	2b04      	cmp	r3, #4
 8012630:	d00d      	beq.n	801264e <xPortStartScheduler+0x7e>
	__asm volatile
 8012632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012636:	b672      	cpsid	i
 8012638:	f383 8811 	msr	BASEPRI, r3
 801263c:	f3bf 8f6f 	isb	sy
 8012640:	f3bf 8f4f 	dsb	sy
 8012644:	b662      	cpsie	i
 8012646:	60bb      	str	r3, [r7, #8]
}
 8012648:	bf00      	nop
 801264a:	bf00      	nop
 801264c:	e7fd      	b.n	801264a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801264e:	4b1b      	ldr	r3, [pc, #108]	@ (80126bc <xPortStartScheduler+0xec>)
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	021b      	lsls	r3, r3, #8
 8012654:	4a19      	ldr	r2, [pc, #100]	@ (80126bc <xPortStartScheduler+0xec>)
 8012656:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012658:	4b18      	ldr	r3, [pc, #96]	@ (80126bc <xPortStartScheduler+0xec>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012660:	4a16      	ldr	r2, [pc, #88]	@ (80126bc <xPortStartScheduler+0xec>)
 8012662:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	b2da      	uxtb	r2, r3
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801266c:	4b14      	ldr	r3, [pc, #80]	@ (80126c0 <xPortStartScheduler+0xf0>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	4a13      	ldr	r2, [pc, #76]	@ (80126c0 <xPortStartScheduler+0xf0>)
 8012672:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012676:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012678:	4b11      	ldr	r3, [pc, #68]	@ (80126c0 <xPortStartScheduler+0xf0>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	4a10      	ldr	r2, [pc, #64]	@ (80126c0 <xPortStartScheduler+0xf0>)
 801267e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012682:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012684:	f000 f8dc 	bl	8012840 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012688:	4b0e      	ldr	r3, [pc, #56]	@ (80126c4 <xPortStartScheduler+0xf4>)
 801268a:	2200      	movs	r2, #0
 801268c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801268e:	f000 f8fb 	bl	8012888 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012692:	4b0d      	ldr	r3, [pc, #52]	@ (80126c8 <xPortStartScheduler+0xf8>)
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	4a0c      	ldr	r2, [pc, #48]	@ (80126c8 <xPortStartScheduler+0xf8>)
 8012698:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801269c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801269e:	f7ff ff83 	bl	80125a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80126a2:	f7ff fb6f 	bl	8011d84 <vTaskSwitchContext>
	prvTaskExitError();
 80126a6:	f7ff ff33 	bl	8012510 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80126aa:	2300      	movs	r3, #0
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3710      	adds	r7, #16
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}
 80126b4:	e000e400 	.word	0xe000e400
 80126b8:	20009efc 	.word	0x20009efc
 80126bc:	20009f00 	.word	0x20009f00
 80126c0:	e000ed20 	.word	0xe000ed20
 80126c4:	20000048 	.word	0x20000048
 80126c8:	e000ef34 	.word	0xe000ef34

080126cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80126cc:	b480      	push	{r7}
 80126ce:	b083      	sub	sp, #12
 80126d0:	af00      	add	r7, sp, #0
	__asm volatile
 80126d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126d6:	b672      	cpsid	i
 80126d8:	f383 8811 	msr	BASEPRI, r3
 80126dc:	f3bf 8f6f 	isb	sy
 80126e0:	f3bf 8f4f 	dsb	sy
 80126e4:	b662      	cpsie	i
 80126e6:	607b      	str	r3, [r7, #4]
}
 80126e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80126ea:	4b11      	ldr	r3, [pc, #68]	@ (8012730 <vPortEnterCritical+0x64>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	3301      	adds	r3, #1
 80126f0:	4a0f      	ldr	r2, [pc, #60]	@ (8012730 <vPortEnterCritical+0x64>)
 80126f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80126f4:	4b0e      	ldr	r3, [pc, #56]	@ (8012730 <vPortEnterCritical+0x64>)
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	2b01      	cmp	r3, #1
 80126fa:	d112      	bne.n	8012722 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80126fc:	4b0d      	ldr	r3, [pc, #52]	@ (8012734 <vPortEnterCritical+0x68>)
 80126fe:	681b      	ldr	r3, [r3, #0]
 8012700:	b2db      	uxtb	r3, r3
 8012702:	2b00      	cmp	r3, #0
 8012704:	d00d      	beq.n	8012722 <vPortEnterCritical+0x56>
	__asm volatile
 8012706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801270a:	b672      	cpsid	i
 801270c:	f383 8811 	msr	BASEPRI, r3
 8012710:	f3bf 8f6f 	isb	sy
 8012714:	f3bf 8f4f 	dsb	sy
 8012718:	b662      	cpsie	i
 801271a:	603b      	str	r3, [r7, #0]
}
 801271c:	bf00      	nop
 801271e:	bf00      	nop
 8012720:	e7fd      	b.n	801271e <vPortEnterCritical+0x52>
	}
}
 8012722:	bf00      	nop
 8012724:	370c      	adds	r7, #12
 8012726:	46bd      	mov	sp, r7
 8012728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272c:	4770      	bx	lr
 801272e:	bf00      	nop
 8012730:	20000048 	.word	0x20000048
 8012734:	e000ed04 	.word	0xe000ed04

08012738 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012738:	b480      	push	{r7}
 801273a:	b083      	sub	sp, #12
 801273c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801273e:	4b13      	ldr	r3, [pc, #76]	@ (801278c <vPortExitCritical+0x54>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d10d      	bne.n	8012762 <vPortExitCritical+0x2a>
	__asm volatile
 8012746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801274a:	b672      	cpsid	i
 801274c:	f383 8811 	msr	BASEPRI, r3
 8012750:	f3bf 8f6f 	isb	sy
 8012754:	f3bf 8f4f 	dsb	sy
 8012758:	b662      	cpsie	i
 801275a:	607b      	str	r3, [r7, #4]
}
 801275c:	bf00      	nop
 801275e:	bf00      	nop
 8012760:	e7fd      	b.n	801275e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012762:	4b0a      	ldr	r3, [pc, #40]	@ (801278c <vPortExitCritical+0x54>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	3b01      	subs	r3, #1
 8012768:	4a08      	ldr	r2, [pc, #32]	@ (801278c <vPortExitCritical+0x54>)
 801276a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801276c:	4b07      	ldr	r3, [pc, #28]	@ (801278c <vPortExitCritical+0x54>)
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d105      	bne.n	8012780 <vPortExitCritical+0x48>
 8012774:	2300      	movs	r3, #0
 8012776:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	f383 8811 	msr	BASEPRI, r3
}
 801277e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012780:	bf00      	nop
 8012782:	370c      	adds	r7, #12
 8012784:	46bd      	mov	sp, r7
 8012786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278a:	4770      	bx	lr
 801278c:	20000048 	.word	0x20000048

08012790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012790:	f3ef 8009 	mrs	r0, PSP
 8012794:	f3bf 8f6f 	isb	sy
 8012798:	4b15      	ldr	r3, [pc, #84]	@ (80127f0 <pxCurrentTCBConst>)
 801279a:	681a      	ldr	r2, [r3, #0]
 801279c:	f01e 0f10 	tst.w	lr, #16
 80127a0:	bf08      	it	eq
 80127a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80127a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127aa:	6010      	str	r0, [r2, #0]
 80127ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80127b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80127b4:	b672      	cpsid	i
 80127b6:	f380 8811 	msr	BASEPRI, r0
 80127ba:	f3bf 8f4f 	dsb	sy
 80127be:	f3bf 8f6f 	isb	sy
 80127c2:	b662      	cpsie	i
 80127c4:	f7ff fade 	bl	8011d84 <vTaskSwitchContext>
 80127c8:	f04f 0000 	mov.w	r0, #0
 80127cc:	f380 8811 	msr	BASEPRI, r0
 80127d0:	bc09      	pop	{r0, r3}
 80127d2:	6819      	ldr	r1, [r3, #0]
 80127d4:	6808      	ldr	r0, [r1, #0]
 80127d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127da:	f01e 0f10 	tst.w	lr, #16
 80127de:	bf08      	it	eq
 80127e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80127e4:	f380 8809 	msr	PSP, r0
 80127e8:	f3bf 8f6f 	isb	sy
 80127ec:	4770      	bx	lr
 80127ee:	bf00      	nop

080127f0 <pxCurrentTCBConst>:
 80127f0:	20009dd0 	.word	0x20009dd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80127f4:	bf00      	nop
 80127f6:	bf00      	nop

080127f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
	__asm volatile
 80127fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012802:	b672      	cpsid	i
 8012804:	f383 8811 	msr	BASEPRI, r3
 8012808:	f3bf 8f6f 	isb	sy
 801280c:	f3bf 8f4f 	dsb	sy
 8012810:	b662      	cpsie	i
 8012812:	607b      	str	r3, [r7, #4]
}
 8012814:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012816:	f7ff f9f9 	bl	8011c0c <xTaskIncrementTick>
 801281a:	4603      	mov	r3, r0
 801281c:	2b00      	cmp	r3, #0
 801281e:	d003      	beq.n	8012828 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012820:	4b06      	ldr	r3, [pc, #24]	@ (801283c <SysTick_Handler+0x44>)
 8012822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012826:	601a      	str	r2, [r3, #0]
 8012828:	2300      	movs	r3, #0
 801282a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801282c:	683b      	ldr	r3, [r7, #0]
 801282e:	f383 8811 	msr	BASEPRI, r3
}
 8012832:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012834:	bf00      	nop
 8012836:	3708      	adds	r7, #8
 8012838:	46bd      	mov	sp, r7
 801283a:	bd80      	pop	{r7, pc}
 801283c:	e000ed04 	.word	0xe000ed04

08012840 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012840:	b480      	push	{r7}
 8012842:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012844:	4b0b      	ldr	r3, [pc, #44]	@ (8012874 <vPortSetupTimerInterrupt+0x34>)
 8012846:	2200      	movs	r2, #0
 8012848:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801284a:	4b0b      	ldr	r3, [pc, #44]	@ (8012878 <vPortSetupTimerInterrupt+0x38>)
 801284c:	2200      	movs	r2, #0
 801284e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012850:	4b0a      	ldr	r3, [pc, #40]	@ (801287c <vPortSetupTimerInterrupt+0x3c>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	4a0a      	ldr	r2, [pc, #40]	@ (8012880 <vPortSetupTimerInterrupt+0x40>)
 8012856:	fba2 2303 	umull	r2, r3, r2, r3
 801285a:	099b      	lsrs	r3, r3, #6
 801285c:	4a09      	ldr	r2, [pc, #36]	@ (8012884 <vPortSetupTimerInterrupt+0x44>)
 801285e:	3b01      	subs	r3, #1
 8012860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012862:	4b04      	ldr	r3, [pc, #16]	@ (8012874 <vPortSetupTimerInterrupt+0x34>)
 8012864:	2207      	movs	r2, #7
 8012866:	601a      	str	r2, [r3, #0]
}
 8012868:	bf00      	nop
 801286a:	46bd      	mov	sp, r7
 801286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012870:	4770      	bx	lr
 8012872:	bf00      	nop
 8012874:	e000e010 	.word	0xe000e010
 8012878:	e000e018 	.word	0xe000e018
 801287c:	2000002c 	.word	0x2000002c
 8012880:	10624dd3 	.word	0x10624dd3
 8012884:	e000e014 	.word	0xe000e014

08012888 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012888:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012898 <vPortEnableVFP+0x10>
 801288c:	6801      	ldr	r1, [r0, #0]
 801288e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012892:	6001      	str	r1, [r0, #0]
 8012894:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012896:	bf00      	nop
 8012898:	e000ed88 	.word	0xe000ed88

0801289c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801289c:	b480      	push	{r7}
 801289e:	b085      	sub	sp, #20
 80128a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80128a2:	f3ef 8305 	mrs	r3, IPSR
 80128a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	2b0f      	cmp	r3, #15
 80128ac:	d917      	bls.n	80128de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80128ae:	4a1a      	ldr	r2, [pc, #104]	@ (8012918 <vPortValidateInterruptPriority+0x7c>)
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	4413      	add	r3, r2
 80128b4:	781b      	ldrb	r3, [r3, #0]
 80128b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80128b8:	4b18      	ldr	r3, [pc, #96]	@ (801291c <vPortValidateInterruptPriority+0x80>)
 80128ba:	781b      	ldrb	r3, [r3, #0]
 80128bc:	7afa      	ldrb	r2, [r7, #11]
 80128be:	429a      	cmp	r2, r3
 80128c0:	d20d      	bcs.n	80128de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80128c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128c6:	b672      	cpsid	i
 80128c8:	f383 8811 	msr	BASEPRI, r3
 80128cc:	f3bf 8f6f 	isb	sy
 80128d0:	f3bf 8f4f 	dsb	sy
 80128d4:	b662      	cpsie	i
 80128d6:	607b      	str	r3, [r7, #4]
}
 80128d8:	bf00      	nop
 80128da:	bf00      	nop
 80128dc:	e7fd      	b.n	80128da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80128de:	4b10      	ldr	r3, [pc, #64]	@ (8012920 <vPortValidateInterruptPriority+0x84>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80128e6:	4b0f      	ldr	r3, [pc, #60]	@ (8012924 <vPortValidateInterruptPriority+0x88>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	429a      	cmp	r2, r3
 80128ec:	d90d      	bls.n	801290a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80128ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128f2:	b672      	cpsid	i
 80128f4:	f383 8811 	msr	BASEPRI, r3
 80128f8:	f3bf 8f6f 	isb	sy
 80128fc:	f3bf 8f4f 	dsb	sy
 8012900:	b662      	cpsie	i
 8012902:	603b      	str	r3, [r7, #0]
}
 8012904:	bf00      	nop
 8012906:	bf00      	nop
 8012908:	e7fd      	b.n	8012906 <vPortValidateInterruptPriority+0x6a>
	}
 801290a:	bf00      	nop
 801290c:	3714      	adds	r7, #20
 801290e:	46bd      	mov	sp, r7
 8012910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop
 8012918:	e000e3f0 	.word	0xe000e3f0
 801291c:	20009efc 	.word	0x20009efc
 8012920:	e000ed0c 	.word	0xe000ed0c
 8012924:	20009f00 	.word	0x20009f00

08012928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b08a      	sub	sp, #40	@ 0x28
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012930:	2300      	movs	r3, #0
 8012932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012934:	f7ff f89a 	bl	8011a6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012938:	4b5f      	ldr	r3, [pc, #380]	@ (8012ab8 <pvPortMalloc+0x190>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d101      	bne.n	8012944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012940:	f000 f924 	bl	8012b8c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012944:	4b5d      	ldr	r3, [pc, #372]	@ (8012abc <pvPortMalloc+0x194>)
 8012946:	681a      	ldr	r2, [r3, #0]
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	4013      	ands	r3, r2
 801294c:	2b00      	cmp	r3, #0
 801294e:	f040 8094 	bne.w	8012a7a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d020      	beq.n	801299a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8012958:	2208      	movs	r2, #8
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	4413      	add	r3, r2
 801295e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	f003 0307 	and.w	r3, r3, #7
 8012966:	2b00      	cmp	r3, #0
 8012968:	d017      	beq.n	801299a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f023 0307 	bic.w	r3, r3, #7
 8012970:	3308      	adds	r3, #8
 8012972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f003 0307 	and.w	r3, r3, #7
 801297a:	2b00      	cmp	r3, #0
 801297c:	d00d      	beq.n	801299a <pvPortMalloc+0x72>
	__asm volatile
 801297e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012982:	b672      	cpsid	i
 8012984:	f383 8811 	msr	BASEPRI, r3
 8012988:	f3bf 8f6f 	isb	sy
 801298c:	f3bf 8f4f 	dsb	sy
 8012990:	b662      	cpsie	i
 8012992:	617b      	str	r3, [r7, #20]
}
 8012994:	bf00      	nop
 8012996:	bf00      	nop
 8012998:	e7fd      	b.n	8012996 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	2b00      	cmp	r3, #0
 801299e:	d06c      	beq.n	8012a7a <pvPortMalloc+0x152>
 80129a0:	4b47      	ldr	r3, [pc, #284]	@ (8012ac0 <pvPortMalloc+0x198>)
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	687a      	ldr	r2, [r7, #4]
 80129a6:	429a      	cmp	r2, r3
 80129a8:	d867      	bhi.n	8012a7a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80129aa:	4b46      	ldr	r3, [pc, #280]	@ (8012ac4 <pvPortMalloc+0x19c>)
 80129ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80129ae:	4b45      	ldr	r3, [pc, #276]	@ (8012ac4 <pvPortMalloc+0x19c>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80129b4:	e004      	b.n	80129c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80129b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80129ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80129c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129c2:	685b      	ldr	r3, [r3, #4]
 80129c4:	687a      	ldr	r2, [r7, #4]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d903      	bls.n	80129d2 <pvPortMalloc+0xaa>
 80129ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129cc:	681b      	ldr	r3, [r3, #0]
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d1f1      	bne.n	80129b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80129d2:	4b39      	ldr	r3, [pc, #228]	@ (8012ab8 <pvPortMalloc+0x190>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80129d8:	429a      	cmp	r2, r3
 80129da:	d04e      	beq.n	8012a7a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80129dc:	6a3b      	ldr	r3, [r7, #32]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2208      	movs	r2, #8
 80129e2:	4413      	add	r3, r2
 80129e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80129e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129e8:	681a      	ldr	r2, [r3, #0]
 80129ea:	6a3b      	ldr	r3, [r7, #32]
 80129ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80129ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80129f0:	685a      	ldr	r2, [r3, #4]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	1ad2      	subs	r2, r2, r3
 80129f6:	2308      	movs	r3, #8
 80129f8:	005b      	lsls	r3, r3, #1
 80129fa:	429a      	cmp	r2, r3
 80129fc:	d922      	bls.n	8012a44 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80129fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	4413      	add	r3, r2
 8012a04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012a06:	69bb      	ldr	r3, [r7, #24]
 8012a08:	f003 0307 	and.w	r3, r3, #7
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d00d      	beq.n	8012a2c <pvPortMalloc+0x104>
	__asm volatile
 8012a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a14:	b672      	cpsid	i
 8012a16:	f383 8811 	msr	BASEPRI, r3
 8012a1a:	f3bf 8f6f 	isb	sy
 8012a1e:	f3bf 8f4f 	dsb	sy
 8012a22:	b662      	cpsie	i
 8012a24:	613b      	str	r3, [r7, #16]
}
 8012a26:	bf00      	nop
 8012a28:	bf00      	nop
 8012a2a:	e7fd      	b.n	8012a28 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a2e:	685a      	ldr	r2, [r3, #4]
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	1ad2      	subs	r2, r2, r3
 8012a34:	69bb      	ldr	r3, [r7, #24]
 8012a36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a3a:	687a      	ldr	r2, [r7, #4]
 8012a3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012a3e:	69b8      	ldr	r0, [r7, #24]
 8012a40:	f000 f906 	bl	8012c50 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012a44:	4b1e      	ldr	r3, [pc, #120]	@ (8012ac0 <pvPortMalloc+0x198>)
 8012a46:	681a      	ldr	r2, [r3, #0]
 8012a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a4a:	685b      	ldr	r3, [r3, #4]
 8012a4c:	1ad3      	subs	r3, r2, r3
 8012a4e:	4a1c      	ldr	r2, [pc, #112]	@ (8012ac0 <pvPortMalloc+0x198>)
 8012a50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012a52:	4b1b      	ldr	r3, [pc, #108]	@ (8012ac0 <pvPortMalloc+0x198>)
 8012a54:	681a      	ldr	r2, [r3, #0]
 8012a56:	4b1c      	ldr	r3, [pc, #112]	@ (8012ac8 <pvPortMalloc+0x1a0>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d203      	bcs.n	8012a66 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012a5e:	4b18      	ldr	r3, [pc, #96]	@ (8012ac0 <pvPortMalloc+0x198>)
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	4a19      	ldr	r2, [pc, #100]	@ (8012ac8 <pvPortMalloc+0x1a0>)
 8012a64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a68:	685a      	ldr	r2, [r3, #4]
 8012a6a:	4b14      	ldr	r3, [pc, #80]	@ (8012abc <pvPortMalloc+0x194>)
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	431a      	orrs	r2, r3
 8012a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a76:	2200      	movs	r2, #0
 8012a78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012a7a:	f7ff f805 	bl	8011a88 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012a7e:	69fb      	ldr	r3, [r7, #28]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d101      	bne.n	8012a88 <pvPortMalloc+0x160>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012a84:	f7ee f810 	bl	8000aa8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012a88:	69fb      	ldr	r3, [r7, #28]
 8012a8a:	f003 0307 	and.w	r3, r3, #7
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d00d      	beq.n	8012aae <pvPortMalloc+0x186>
	__asm volatile
 8012a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a96:	b672      	cpsid	i
 8012a98:	f383 8811 	msr	BASEPRI, r3
 8012a9c:	f3bf 8f6f 	isb	sy
 8012aa0:	f3bf 8f4f 	dsb	sy
 8012aa4:	b662      	cpsie	i
 8012aa6:	60fb      	str	r3, [r7, #12]
}
 8012aa8:	bf00      	nop
 8012aaa:	bf00      	nop
 8012aac:	e7fd      	b.n	8012aaa <pvPortMalloc+0x182>
	return pvReturn;
 8012aae:	69fb      	ldr	r3, [r7, #28]
}
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	3728      	adds	r7, #40	@ 0x28
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	bd80      	pop	{r7, pc}
 8012ab8:	20011f0c 	.word	0x20011f0c
 8012abc:	20011f18 	.word	0x20011f18
 8012ac0:	20011f10 	.word	0x20011f10
 8012ac4:	20011f04 	.word	0x20011f04
 8012ac8:	20011f14 	.word	0x20011f14

08012acc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b086      	sub	sp, #24
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d04e      	beq.n	8012b7c <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012ade:	2308      	movs	r3, #8
 8012ae0:	425b      	negs	r3, r3
 8012ae2:	697a      	ldr	r2, [r7, #20]
 8012ae4:	4413      	add	r3, r2
 8012ae6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012ae8:	697b      	ldr	r3, [r7, #20]
 8012aea:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012aec:	693b      	ldr	r3, [r7, #16]
 8012aee:	685a      	ldr	r2, [r3, #4]
 8012af0:	4b24      	ldr	r3, [pc, #144]	@ (8012b84 <vPortFree+0xb8>)
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	4013      	ands	r3, r2
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d10d      	bne.n	8012b16 <vPortFree+0x4a>
	__asm volatile
 8012afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012afe:	b672      	cpsid	i
 8012b00:	f383 8811 	msr	BASEPRI, r3
 8012b04:	f3bf 8f6f 	isb	sy
 8012b08:	f3bf 8f4f 	dsb	sy
 8012b0c:	b662      	cpsie	i
 8012b0e:	60fb      	str	r3, [r7, #12]
}
 8012b10:	bf00      	nop
 8012b12:	bf00      	nop
 8012b14:	e7fd      	b.n	8012b12 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012b16:	693b      	ldr	r3, [r7, #16]
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d00d      	beq.n	8012b3a <vPortFree+0x6e>
	__asm volatile
 8012b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b22:	b672      	cpsid	i
 8012b24:	f383 8811 	msr	BASEPRI, r3
 8012b28:	f3bf 8f6f 	isb	sy
 8012b2c:	f3bf 8f4f 	dsb	sy
 8012b30:	b662      	cpsie	i
 8012b32:	60bb      	str	r3, [r7, #8]
}
 8012b34:	bf00      	nop
 8012b36:	bf00      	nop
 8012b38:	e7fd      	b.n	8012b36 <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	685a      	ldr	r2, [r3, #4]
 8012b3e:	4b11      	ldr	r3, [pc, #68]	@ (8012b84 <vPortFree+0xb8>)
 8012b40:	681b      	ldr	r3, [r3, #0]
 8012b42:	4013      	ands	r3, r2
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d019      	beq.n	8012b7c <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d115      	bne.n	8012b7c <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012b50:	693b      	ldr	r3, [r7, #16]
 8012b52:	685a      	ldr	r2, [r3, #4]
 8012b54:	4b0b      	ldr	r3, [pc, #44]	@ (8012b84 <vPortFree+0xb8>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	43db      	mvns	r3, r3
 8012b5a:	401a      	ands	r2, r3
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012b60:	f7fe ff84 	bl	8011a6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	685a      	ldr	r2, [r3, #4]
 8012b68:	4b07      	ldr	r3, [pc, #28]	@ (8012b88 <vPortFree+0xbc>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	4413      	add	r3, r2
 8012b6e:	4a06      	ldr	r2, [pc, #24]	@ (8012b88 <vPortFree+0xbc>)
 8012b70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012b72:	6938      	ldr	r0, [r7, #16]
 8012b74:	f000 f86c 	bl	8012c50 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012b78:	f7fe ff86 	bl	8011a88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012b7c:	bf00      	nop
 8012b7e:	3718      	adds	r7, #24
 8012b80:	46bd      	mov	sp, r7
 8012b82:	bd80      	pop	{r7, pc}
 8012b84:	20011f18 	.word	0x20011f18
 8012b88:	20011f10 	.word	0x20011f10

08012b8c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b085      	sub	sp, #20
 8012b90:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8012b96:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012b98:	4b27      	ldr	r3, [pc, #156]	@ (8012c38 <prvHeapInit+0xac>)
 8012b9a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	f003 0307 	and.w	r3, r3, #7
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d00c      	beq.n	8012bc0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	3307      	adds	r3, #7
 8012baa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	f023 0307 	bic.w	r3, r3, #7
 8012bb2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012bb4:	68ba      	ldr	r2, [r7, #8]
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	1ad3      	subs	r3, r2, r3
 8012bba:	4a1f      	ldr	r2, [pc, #124]	@ (8012c38 <prvHeapInit+0xac>)
 8012bbc:	4413      	add	r3, r2
 8012bbe:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8012c3c <prvHeapInit+0xb0>)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012bca:	4b1c      	ldr	r3, [pc, #112]	@ (8012c3c <prvHeapInit+0xb0>)
 8012bcc:	2200      	movs	r2, #0
 8012bce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	68ba      	ldr	r2, [r7, #8]
 8012bd4:	4413      	add	r3, r2
 8012bd6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012bd8:	2208      	movs	r2, #8
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	1a9b      	subs	r3, r3, r2
 8012bde:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	f023 0307 	bic.w	r3, r3, #7
 8012be6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	4a15      	ldr	r2, [pc, #84]	@ (8012c40 <prvHeapInit+0xb4>)
 8012bec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012bee:	4b14      	ldr	r3, [pc, #80]	@ (8012c40 <prvHeapInit+0xb4>)
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012bf6:	4b12      	ldr	r3, [pc, #72]	@ (8012c40 <prvHeapInit+0xb4>)
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	68fa      	ldr	r2, [r7, #12]
 8012c06:	1ad2      	subs	r2, r2, r3
 8012c08:	683b      	ldr	r3, [r7, #0]
 8012c0a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012c0c:	4b0c      	ldr	r3, [pc, #48]	@ (8012c40 <prvHeapInit+0xb4>)
 8012c0e:	681a      	ldr	r2, [r3, #0]
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	685b      	ldr	r3, [r3, #4]
 8012c18:	4a0a      	ldr	r2, [pc, #40]	@ (8012c44 <prvHeapInit+0xb8>)
 8012c1a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012c1c:	683b      	ldr	r3, [r7, #0]
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	4a09      	ldr	r2, [pc, #36]	@ (8012c48 <prvHeapInit+0xbc>)
 8012c22:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012c24:	4b09      	ldr	r3, [pc, #36]	@ (8012c4c <prvHeapInit+0xc0>)
 8012c26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012c2a:	601a      	str	r2, [r3, #0]
}
 8012c2c:	bf00      	nop
 8012c2e:	3714      	adds	r7, #20
 8012c30:	46bd      	mov	sp, r7
 8012c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c36:	4770      	bx	lr
 8012c38:	20009f04 	.word	0x20009f04
 8012c3c:	20011f04 	.word	0x20011f04
 8012c40:	20011f0c 	.word	0x20011f0c
 8012c44:	20011f14 	.word	0x20011f14
 8012c48:	20011f10 	.word	0x20011f10
 8012c4c:	20011f18 	.word	0x20011f18

08012c50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012c50:	b480      	push	{r7}
 8012c52:	b085      	sub	sp, #20
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012c58:	4b28      	ldr	r3, [pc, #160]	@ (8012cfc <prvInsertBlockIntoFreeList+0xac>)
 8012c5a:	60fb      	str	r3, [r7, #12]
 8012c5c:	e002      	b.n	8012c64 <prvInsertBlockIntoFreeList+0x14>
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	60fb      	str	r3, [r7, #12]
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	687a      	ldr	r2, [r7, #4]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d8f7      	bhi.n	8012c5e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	68ba      	ldr	r2, [r7, #8]
 8012c78:	4413      	add	r3, r2
 8012c7a:	687a      	ldr	r2, [r7, #4]
 8012c7c:	429a      	cmp	r2, r3
 8012c7e:	d108      	bne.n	8012c92 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	685a      	ldr	r2, [r3, #4]
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	685b      	ldr	r3, [r3, #4]
 8012c88:	441a      	add	r2, r3
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	685b      	ldr	r3, [r3, #4]
 8012c9a:	68ba      	ldr	r2, [r7, #8]
 8012c9c:	441a      	add	r2, r3
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	429a      	cmp	r2, r3
 8012ca4:	d118      	bne.n	8012cd8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	681a      	ldr	r2, [r3, #0]
 8012caa:	4b15      	ldr	r3, [pc, #84]	@ (8012d00 <prvInsertBlockIntoFreeList+0xb0>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	429a      	cmp	r2, r3
 8012cb0:	d00d      	beq.n	8012cce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	685a      	ldr	r2, [r3, #4]
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	685b      	ldr	r3, [r3, #4]
 8012cbc:	441a      	add	r2, r3
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	681a      	ldr	r2, [r3, #0]
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	601a      	str	r2, [r3, #0]
 8012ccc:	e008      	b.n	8012ce0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012cce:	4b0c      	ldr	r3, [pc, #48]	@ (8012d00 <prvInsertBlockIntoFreeList+0xb0>)
 8012cd0:	681a      	ldr	r2, [r3, #0]
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	601a      	str	r2, [r3, #0]
 8012cd6:	e003      	b.n	8012ce0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	681a      	ldr	r2, [r3, #0]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012ce0:	68fa      	ldr	r2, [r7, #12]
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d002      	beq.n	8012cee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	687a      	ldr	r2, [r7, #4]
 8012cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012cee:	bf00      	nop
 8012cf0:	3714      	adds	r7, #20
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf8:	4770      	bx	lr
 8012cfa:	bf00      	nop
 8012cfc:	20011f04 	.word	0x20011f04
 8012d00:	20011f0c 	.word	0x20011f0c

08012d04 <siprintf>:
 8012d04:	b40e      	push	{r1, r2, r3}
 8012d06:	b500      	push	{lr}
 8012d08:	b09c      	sub	sp, #112	@ 0x70
 8012d0a:	ab1d      	add	r3, sp, #116	@ 0x74
 8012d0c:	9002      	str	r0, [sp, #8]
 8012d0e:	9006      	str	r0, [sp, #24]
 8012d10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012d14:	4809      	ldr	r0, [pc, #36]	@ (8012d3c <siprintf+0x38>)
 8012d16:	9107      	str	r1, [sp, #28]
 8012d18:	9104      	str	r1, [sp, #16]
 8012d1a:	4909      	ldr	r1, [pc, #36]	@ (8012d40 <siprintf+0x3c>)
 8012d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012d20:	9105      	str	r1, [sp, #20]
 8012d22:	6800      	ldr	r0, [r0, #0]
 8012d24:	9301      	str	r3, [sp, #4]
 8012d26:	a902      	add	r1, sp, #8
 8012d28:	f000 f9f8 	bl	801311c <_svfiprintf_r>
 8012d2c:	9b02      	ldr	r3, [sp, #8]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	701a      	strb	r2, [r3, #0]
 8012d32:	b01c      	add	sp, #112	@ 0x70
 8012d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8012d38:	b003      	add	sp, #12
 8012d3a:	4770      	bx	lr
 8012d3c:	2000004c 	.word	0x2000004c
 8012d40:	ffff0208 	.word	0xffff0208

08012d44 <memset>:
 8012d44:	4402      	add	r2, r0
 8012d46:	4603      	mov	r3, r0
 8012d48:	4293      	cmp	r3, r2
 8012d4a:	d100      	bne.n	8012d4e <memset+0xa>
 8012d4c:	4770      	bx	lr
 8012d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8012d52:	e7f9      	b.n	8012d48 <memset+0x4>

08012d54 <_reclaim_reent>:
 8012d54:	4b29      	ldr	r3, [pc, #164]	@ (8012dfc <_reclaim_reent+0xa8>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	4283      	cmp	r3, r0
 8012d5a:	b570      	push	{r4, r5, r6, lr}
 8012d5c:	4604      	mov	r4, r0
 8012d5e:	d04b      	beq.n	8012df8 <_reclaim_reent+0xa4>
 8012d60:	69c3      	ldr	r3, [r0, #28]
 8012d62:	b1ab      	cbz	r3, 8012d90 <_reclaim_reent+0x3c>
 8012d64:	68db      	ldr	r3, [r3, #12]
 8012d66:	b16b      	cbz	r3, 8012d84 <_reclaim_reent+0x30>
 8012d68:	2500      	movs	r5, #0
 8012d6a:	69e3      	ldr	r3, [r4, #28]
 8012d6c:	68db      	ldr	r3, [r3, #12]
 8012d6e:	5959      	ldr	r1, [r3, r5]
 8012d70:	2900      	cmp	r1, #0
 8012d72:	d13b      	bne.n	8012dec <_reclaim_reent+0x98>
 8012d74:	3504      	adds	r5, #4
 8012d76:	2d80      	cmp	r5, #128	@ 0x80
 8012d78:	d1f7      	bne.n	8012d6a <_reclaim_reent+0x16>
 8012d7a:	69e3      	ldr	r3, [r4, #28]
 8012d7c:	4620      	mov	r0, r4
 8012d7e:	68d9      	ldr	r1, [r3, #12]
 8012d80:	f000 f878 	bl	8012e74 <_free_r>
 8012d84:	69e3      	ldr	r3, [r4, #28]
 8012d86:	6819      	ldr	r1, [r3, #0]
 8012d88:	b111      	cbz	r1, 8012d90 <_reclaim_reent+0x3c>
 8012d8a:	4620      	mov	r0, r4
 8012d8c:	f000 f872 	bl	8012e74 <_free_r>
 8012d90:	6961      	ldr	r1, [r4, #20]
 8012d92:	b111      	cbz	r1, 8012d9a <_reclaim_reent+0x46>
 8012d94:	4620      	mov	r0, r4
 8012d96:	f000 f86d 	bl	8012e74 <_free_r>
 8012d9a:	69e1      	ldr	r1, [r4, #28]
 8012d9c:	b111      	cbz	r1, 8012da4 <_reclaim_reent+0x50>
 8012d9e:	4620      	mov	r0, r4
 8012da0:	f000 f868 	bl	8012e74 <_free_r>
 8012da4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8012da6:	b111      	cbz	r1, 8012dae <_reclaim_reent+0x5a>
 8012da8:	4620      	mov	r0, r4
 8012daa:	f000 f863 	bl	8012e74 <_free_r>
 8012dae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8012db0:	b111      	cbz	r1, 8012db8 <_reclaim_reent+0x64>
 8012db2:	4620      	mov	r0, r4
 8012db4:	f000 f85e 	bl	8012e74 <_free_r>
 8012db8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8012dba:	b111      	cbz	r1, 8012dc2 <_reclaim_reent+0x6e>
 8012dbc:	4620      	mov	r0, r4
 8012dbe:	f000 f859 	bl	8012e74 <_free_r>
 8012dc2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012dc4:	b111      	cbz	r1, 8012dcc <_reclaim_reent+0x78>
 8012dc6:	4620      	mov	r0, r4
 8012dc8:	f000 f854 	bl	8012e74 <_free_r>
 8012dcc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8012dce:	b111      	cbz	r1, 8012dd6 <_reclaim_reent+0x82>
 8012dd0:	4620      	mov	r0, r4
 8012dd2:	f000 f84f 	bl	8012e74 <_free_r>
 8012dd6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8012dd8:	b111      	cbz	r1, 8012de0 <_reclaim_reent+0x8c>
 8012dda:	4620      	mov	r0, r4
 8012ddc:	f000 f84a 	bl	8012e74 <_free_r>
 8012de0:	6a23      	ldr	r3, [r4, #32]
 8012de2:	b14b      	cbz	r3, 8012df8 <_reclaim_reent+0xa4>
 8012de4:	4620      	mov	r0, r4
 8012de6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012dea:	4718      	bx	r3
 8012dec:	680e      	ldr	r6, [r1, #0]
 8012dee:	4620      	mov	r0, r4
 8012df0:	f000 f840 	bl	8012e74 <_free_r>
 8012df4:	4631      	mov	r1, r6
 8012df6:	e7bb      	b.n	8012d70 <_reclaim_reent+0x1c>
 8012df8:	bd70      	pop	{r4, r5, r6, pc}
 8012dfa:	bf00      	nop
 8012dfc:	2000004c 	.word	0x2000004c

08012e00 <__errno>:
 8012e00:	4b01      	ldr	r3, [pc, #4]	@ (8012e08 <__errno+0x8>)
 8012e02:	6818      	ldr	r0, [r3, #0]
 8012e04:	4770      	bx	lr
 8012e06:	bf00      	nop
 8012e08:	2000004c 	.word	0x2000004c

08012e0c <__libc_init_array>:
 8012e0c:	b570      	push	{r4, r5, r6, lr}
 8012e0e:	4d0d      	ldr	r5, [pc, #52]	@ (8012e44 <__libc_init_array+0x38>)
 8012e10:	4c0d      	ldr	r4, [pc, #52]	@ (8012e48 <__libc_init_array+0x3c>)
 8012e12:	1b64      	subs	r4, r4, r5
 8012e14:	10a4      	asrs	r4, r4, #2
 8012e16:	2600      	movs	r6, #0
 8012e18:	42a6      	cmp	r6, r4
 8012e1a:	d109      	bne.n	8012e30 <__libc_init_array+0x24>
 8012e1c:	4d0b      	ldr	r5, [pc, #44]	@ (8012e4c <__libc_init_array+0x40>)
 8012e1e:	4c0c      	ldr	r4, [pc, #48]	@ (8012e50 <__libc_init_array+0x44>)
 8012e20:	f000 fc66 	bl	80136f0 <_init>
 8012e24:	1b64      	subs	r4, r4, r5
 8012e26:	10a4      	asrs	r4, r4, #2
 8012e28:	2600      	movs	r6, #0
 8012e2a:	42a6      	cmp	r6, r4
 8012e2c:	d105      	bne.n	8012e3a <__libc_init_array+0x2e>
 8012e2e:	bd70      	pop	{r4, r5, r6, pc}
 8012e30:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e34:	4798      	blx	r3
 8012e36:	3601      	adds	r6, #1
 8012e38:	e7ee      	b.n	8012e18 <__libc_init_array+0xc>
 8012e3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012e3e:	4798      	blx	r3
 8012e40:	3601      	adds	r6, #1
 8012e42:	e7f2      	b.n	8012e2a <__libc_init_array+0x1e>
 8012e44:	080158f0 	.word	0x080158f0
 8012e48:	080158f0 	.word	0x080158f0
 8012e4c:	080158f0 	.word	0x080158f0
 8012e50:	080158f4 	.word	0x080158f4

08012e54 <__retarget_lock_acquire_recursive>:
 8012e54:	4770      	bx	lr

08012e56 <__retarget_lock_release_recursive>:
 8012e56:	4770      	bx	lr

08012e58 <memcpy>:
 8012e58:	440a      	add	r2, r1
 8012e5a:	4291      	cmp	r1, r2
 8012e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8012e60:	d100      	bne.n	8012e64 <memcpy+0xc>
 8012e62:	4770      	bx	lr
 8012e64:	b510      	push	{r4, lr}
 8012e66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012e6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012e6e:	4291      	cmp	r1, r2
 8012e70:	d1f9      	bne.n	8012e66 <memcpy+0xe>
 8012e72:	bd10      	pop	{r4, pc}

08012e74 <_free_r>:
 8012e74:	b538      	push	{r3, r4, r5, lr}
 8012e76:	4605      	mov	r5, r0
 8012e78:	2900      	cmp	r1, #0
 8012e7a:	d041      	beq.n	8012f00 <_free_r+0x8c>
 8012e7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012e80:	1f0c      	subs	r4, r1, #4
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	bfb8      	it	lt
 8012e86:	18e4      	addlt	r4, r4, r3
 8012e88:	f000 f8e0 	bl	801304c <__malloc_lock>
 8012e8c:	4a1d      	ldr	r2, [pc, #116]	@ (8012f04 <_free_r+0x90>)
 8012e8e:	6813      	ldr	r3, [r2, #0]
 8012e90:	b933      	cbnz	r3, 8012ea0 <_free_r+0x2c>
 8012e92:	6063      	str	r3, [r4, #4]
 8012e94:	6014      	str	r4, [r2, #0]
 8012e96:	4628      	mov	r0, r5
 8012e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012e9c:	f000 b8dc 	b.w	8013058 <__malloc_unlock>
 8012ea0:	42a3      	cmp	r3, r4
 8012ea2:	d908      	bls.n	8012eb6 <_free_r+0x42>
 8012ea4:	6820      	ldr	r0, [r4, #0]
 8012ea6:	1821      	adds	r1, r4, r0
 8012ea8:	428b      	cmp	r3, r1
 8012eaa:	bf01      	itttt	eq
 8012eac:	6819      	ldreq	r1, [r3, #0]
 8012eae:	685b      	ldreq	r3, [r3, #4]
 8012eb0:	1809      	addeq	r1, r1, r0
 8012eb2:	6021      	streq	r1, [r4, #0]
 8012eb4:	e7ed      	b.n	8012e92 <_free_r+0x1e>
 8012eb6:	461a      	mov	r2, r3
 8012eb8:	685b      	ldr	r3, [r3, #4]
 8012eba:	b10b      	cbz	r3, 8012ec0 <_free_r+0x4c>
 8012ebc:	42a3      	cmp	r3, r4
 8012ebe:	d9fa      	bls.n	8012eb6 <_free_r+0x42>
 8012ec0:	6811      	ldr	r1, [r2, #0]
 8012ec2:	1850      	adds	r0, r2, r1
 8012ec4:	42a0      	cmp	r0, r4
 8012ec6:	d10b      	bne.n	8012ee0 <_free_r+0x6c>
 8012ec8:	6820      	ldr	r0, [r4, #0]
 8012eca:	4401      	add	r1, r0
 8012ecc:	1850      	adds	r0, r2, r1
 8012ece:	4283      	cmp	r3, r0
 8012ed0:	6011      	str	r1, [r2, #0]
 8012ed2:	d1e0      	bne.n	8012e96 <_free_r+0x22>
 8012ed4:	6818      	ldr	r0, [r3, #0]
 8012ed6:	685b      	ldr	r3, [r3, #4]
 8012ed8:	6053      	str	r3, [r2, #4]
 8012eda:	4408      	add	r0, r1
 8012edc:	6010      	str	r0, [r2, #0]
 8012ede:	e7da      	b.n	8012e96 <_free_r+0x22>
 8012ee0:	d902      	bls.n	8012ee8 <_free_r+0x74>
 8012ee2:	230c      	movs	r3, #12
 8012ee4:	602b      	str	r3, [r5, #0]
 8012ee6:	e7d6      	b.n	8012e96 <_free_r+0x22>
 8012ee8:	6820      	ldr	r0, [r4, #0]
 8012eea:	1821      	adds	r1, r4, r0
 8012eec:	428b      	cmp	r3, r1
 8012eee:	bf04      	itt	eq
 8012ef0:	6819      	ldreq	r1, [r3, #0]
 8012ef2:	685b      	ldreq	r3, [r3, #4]
 8012ef4:	6063      	str	r3, [r4, #4]
 8012ef6:	bf04      	itt	eq
 8012ef8:	1809      	addeq	r1, r1, r0
 8012efa:	6021      	streq	r1, [r4, #0]
 8012efc:	6054      	str	r4, [r2, #4]
 8012efe:	e7ca      	b.n	8012e96 <_free_r+0x22>
 8012f00:	bd38      	pop	{r3, r4, r5, pc}
 8012f02:	bf00      	nop
 8012f04:	20012060 	.word	0x20012060

08012f08 <sbrk_aligned>:
 8012f08:	b570      	push	{r4, r5, r6, lr}
 8012f0a:	4e0f      	ldr	r6, [pc, #60]	@ (8012f48 <sbrk_aligned+0x40>)
 8012f0c:	460c      	mov	r4, r1
 8012f0e:	6831      	ldr	r1, [r6, #0]
 8012f10:	4605      	mov	r5, r0
 8012f12:	b911      	cbnz	r1, 8012f1a <sbrk_aligned+0x12>
 8012f14:	f000 fba6 	bl	8013664 <_sbrk_r>
 8012f18:	6030      	str	r0, [r6, #0]
 8012f1a:	4621      	mov	r1, r4
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	f000 fba1 	bl	8013664 <_sbrk_r>
 8012f22:	1c43      	adds	r3, r0, #1
 8012f24:	d103      	bne.n	8012f2e <sbrk_aligned+0x26>
 8012f26:	f04f 34ff 	mov.w	r4, #4294967295
 8012f2a:	4620      	mov	r0, r4
 8012f2c:	bd70      	pop	{r4, r5, r6, pc}
 8012f2e:	1cc4      	adds	r4, r0, #3
 8012f30:	f024 0403 	bic.w	r4, r4, #3
 8012f34:	42a0      	cmp	r0, r4
 8012f36:	d0f8      	beq.n	8012f2a <sbrk_aligned+0x22>
 8012f38:	1a21      	subs	r1, r4, r0
 8012f3a:	4628      	mov	r0, r5
 8012f3c:	f000 fb92 	bl	8013664 <_sbrk_r>
 8012f40:	3001      	adds	r0, #1
 8012f42:	d1f2      	bne.n	8012f2a <sbrk_aligned+0x22>
 8012f44:	e7ef      	b.n	8012f26 <sbrk_aligned+0x1e>
 8012f46:	bf00      	nop
 8012f48:	2001205c 	.word	0x2001205c

08012f4c <_malloc_r>:
 8012f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f50:	1ccd      	adds	r5, r1, #3
 8012f52:	f025 0503 	bic.w	r5, r5, #3
 8012f56:	3508      	adds	r5, #8
 8012f58:	2d0c      	cmp	r5, #12
 8012f5a:	bf38      	it	cc
 8012f5c:	250c      	movcc	r5, #12
 8012f5e:	2d00      	cmp	r5, #0
 8012f60:	4606      	mov	r6, r0
 8012f62:	db01      	blt.n	8012f68 <_malloc_r+0x1c>
 8012f64:	42a9      	cmp	r1, r5
 8012f66:	d904      	bls.n	8012f72 <_malloc_r+0x26>
 8012f68:	230c      	movs	r3, #12
 8012f6a:	6033      	str	r3, [r6, #0]
 8012f6c:	2000      	movs	r0, #0
 8012f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013048 <_malloc_r+0xfc>
 8012f76:	f000 f869 	bl	801304c <__malloc_lock>
 8012f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8012f7e:	461c      	mov	r4, r3
 8012f80:	bb44      	cbnz	r4, 8012fd4 <_malloc_r+0x88>
 8012f82:	4629      	mov	r1, r5
 8012f84:	4630      	mov	r0, r6
 8012f86:	f7ff ffbf 	bl	8012f08 <sbrk_aligned>
 8012f8a:	1c43      	adds	r3, r0, #1
 8012f8c:	4604      	mov	r4, r0
 8012f8e:	d158      	bne.n	8013042 <_malloc_r+0xf6>
 8012f90:	f8d8 4000 	ldr.w	r4, [r8]
 8012f94:	4627      	mov	r7, r4
 8012f96:	2f00      	cmp	r7, #0
 8012f98:	d143      	bne.n	8013022 <_malloc_r+0xd6>
 8012f9a:	2c00      	cmp	r4, #0
 8012f9c:	d04b      	beq.n	8013036 <_malloc_r+0xea>
 8012f9e:	6823      	ldr	r3, [r4, #0]
 8012fa0:	4639      	mov	r1, r7
 8012fa2:	4630      	mov	r0, r6
 8012fa4:	eb04 0903 	add.w	r9, r4, r3
 8012fa8:	f000 fb5c 	bl	8013664 <_sbrk_r>
 8012fac:	4581      	cmp	r9, r0
 8012fae:	d142      	bne.n	8013036 <_malloc_r+0xea>
 8012fb0:	6821      	ldr	r1, [r4, #0]
 8012fb2:	1a6d      	subs	r5, r5, r1
 8012fb4:	4629      	mov	r1, r5
 8012fb6:	4630      	mov	r0, r6
 8012fb8:	f7ff ffa6 	bl	8012f08 <sbrk_aligned>
 8012fbc:	3001      	adds	r0, #1
 8012fbe:	d03a      	beq.n	8013036 <_malloc_r+0xea>
 8012fc0:	6823      	ldr	r3, [r4, #0]
 8012fc2:	442b      	add	r3, r5
 8012fc4:	6023      	str	r3, [r4, #0]
 8012fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8012fca:	685a      	ldr	r2, [r3, #4]
 8012fcc:	bb62      	cbnz	r2, 8013028 <_malloc_r+0xdc>
 8012fce:	f8c8 7000 	str.w	r7, [r8]
 8012fd2:	e00f      	b.n	8012ff4 <_malloc_r+0xa8>
 8012fd4:	6822      	ldr	r2, [r4, #0]
 8012fd6:	1b52      	subs	r2, r2, r5
 8012fd8:	d420      	bmi.n	801301c <_malloc_r+0xd0>
 8012fda:	2a0b      	cmp	r2, #11
 8012fdc:	d917      	bls.n	801300e <_malloc_r+0xc2>
 8012fde:	1961      	adds	r1, r4, r5
 8012fe0:	42a3      	cmp	r3, r4
 8012fe2:	6025      	str	r5, [r4, #0]
 8012fe4:	bf18      	it	ne
 8012fe6:	6059      	strne	r1, [r3, #4]
 8012fe8:	6863      	ldr	r3, [r4, #4]
 8012fea:	bf08      	it	eq
 8012fec:	f8c8 1000 	streq.w	r1, [r8]
 8012ff0:	5162      	str	r2, [r4, r5]
 8012ff2:	604b      	str	r3, [r1, #4]
 8012ff4:	4630      	mov	r0, r6
 8012ff6:	f000 f82f 	bl	8013058 <__malloc_unlock>
 8012ffa:	f104 000b 	add.w	r0, r4, #11
 8012ffe:	1d23      	adds	r3, r4, #4
 8013000:	f020 0007 	bic.w	r0, r0, #7
 8013004:	1ac2      	subs	r2, r0, r3
 8013006:	bf1c      	itt	ne
 8013008:	1a1b      	subne	r3, r3, r0
 801300a:	50a3      	strne	r3, [r4, r2]
 801300c:	e7af      	b.n	8012f6e <_malloc_r+0x22>
 801300e:	6862      	ldr	r2, [r4, #4]
 8013010:	42a3      	cmp	r3, r4
 8013012:	bf0c      	ite	eq
 8013014:	f8c8 2000 	streq.w	r2, [r8]
 8013018:	605a      	strne	r2, [r3, #4]
 801301a:	e7eb      	b.n	8012ff4 <_malloc_r+0xa8>
 801301c:	4623      	mov	r3, r4
 801301e:	6864      	ldr	r4, [r4, #4]
 8013020:	e7ae      	b.n	8012f80 <_malloc_r+0x34>
 8013022:	463c      	mov	r4, r7
 8013024:	687f      	ldr	r7, [r7, #4]
 8013026:	e7b6      	b.n	8012f96 <_malloc_r+0x4a>
 8013028:	461a      	mov	r2, r3
 801302a:	685b      	ldr	r3, [r3, #4]
 801302c:	42a3      	cmp	r3, r4
 801302e:	d1fb      	bne.n	8013028 <_malloc_r+0xdc>
 8013030:	2300      	movs	r3, #0
 8013032:	6053      	str	r3, [r2, #4]
 8013034:	e7de      	b.n	8012ff4 <_malloc_r+0xa8>
 8013036:	230c      	movs	r3, #12
 8013038:	6033      	str	r3, [r6, #0]
 801303a:	4630      	mov	r0, r6
 801303c:	f000 f80c 	bl	8013058 <__malloc_unlock>
 8013040:	e794      	b.n	8012f6c <_malloc_r+0x20>
 8013042:	6005      	str	r5, [r0, #0]
 8013044:	e7d6      	b.n	8012ff4 <_malloc_r+0xa8>
 8013046:	bf00      	nop
 8013048:	20012060 	.word	0x20012060

0801304c <__malloc_lock>:
 801304c:	4801      	ldr	r0, [pc, #4]	@ (8013054 <__malloc_lock+0x8>)
 801304e:	f7ff bf01 	b.w	8012e54 <__retarget_lock_acquire_recursive>
 8013052:	bf00      	nop
 8013054:	20012058 	.word	0x20012058

08013058 <__malloc_unlock>:
 8013058:	4801      	ldr	r0, [pc, #4]	@ (8013060 <__malloc_unlock+0x8>)
 801305a:	f7ff befc 	b.w	8012e56 <__retarget_lock_release_recursive>
 801305e:	bf00      	nop
 8013060:	20012058 	.word	0x20012058

08013064 <__ssputs_r>:
 8013064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013068:	688e      	ldr	r6, [r1, #8]
 801306a:	461f      	mov	r7, r3
 801306c:	42be      	cmp	r6, r7
 801306e:	680b      	ldr	r3, [r1, #0]
 8013070:	4682      	mov	sl, r0
 8013072:	460c      	mov	r4, r1
 8013074:	4690      	mov	r8, r2
 8013076:	d82d      	bhi.n	80130d4 <__ssputs_r+0x70>
 8013078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801307c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013080:	d026      	beq.n	80130d0 <__ssputs_r+0x6c>
 8013082:	6965      	ldr	r5, [r4, #20]
 8013084:	6909      	ldr	r1, [r1, #16]
 8013086:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801308a:	eba3 0901 	sub.w	r9, r3, r1
 801308e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013092:	1c7b      	adds	r3, r7, #1
 8013094:	444b      	add	r3, r9
 8013096:	106d      	asrs	r5, r5, #1
 8013098:	429d      	cmp	r5, r3
 801309a:	bf38      	it	cc
 801309c:	461d      	movcc	r5, r3
 801309e:	0553      	lsls	r3, r2, #21
 80130a0:	d527      	bpl.n	80130f2 <__ssputs_r+0x8e>
 80130a2:	4629      	mov	r1, r5
 80130a4:	f7ff ff52 	bl	8012f4c <_malloc_r>
 80130a8:	4606      	mov	r6, r0
 80130aa:	b360      	cbz	r0, 8013106 <__ssputs_r+0xa2>
 80130ac:	6921      	ldr	r1, [r4, #16]
 80130ae:	464a      	mov	r2, r9
 80130b0:	f7ff fed2 	bl	8012e58 <memcpy>
 80130b4:	89a3      	ldrh	r3, [r4, #12]
 80130b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80130ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80130be:	81a3      	strh	r3, [r4, #12]
 80130c0:	6126      	str	r6, [r4, #16]
 80130c2:	6165      	str	r5, [r4, #20]
 80130c4:	444e      	add	r6, r9
 80130c6:	eba5 0509 	sub.w	r5, r5, r9
 80130ca:	6026      	str	r6, [r4, #0]
 80130cc:	60a5      	str	r5, [r4, #8]
 80130ce:	463e      	mov	r6, r7
 80130d0:	42be      	cmp	r6, r7
 80130d2:	d900      	bls.n	80130d6 <__ssputs_r+0x72>
 80130d4:	463e      	mov	r6, r7
 80130d6:	6820      	ldr	r0, [r4, #0]
 80130d8:	4632      	mov	r2, r6
 80130da:	4641      	mov	r1, r8
 80130dc:	f000 faa8 	bl	8013630 <memmove>
 80130e0:	68a3      	ldr	r3, [r4, #8]
 80130e2:	1b9b      	subs	r3, r3, r6
 80130e4:	60a3      	str	r3, [r4, #8]
 80130e6:	6823      	ldr	r3, [r4, #0]
 80130e8:	4433      	add	r3, r6
 80130ea:	6023      	str	r3, [r4, #0]
 80130ec:	2000      	movs	r0, #0
 80130ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130f2:	462a      	mov	r2, r5
 80130f4:	f000 fac6 	bl	8013684 <_realloc_r>
 80130f8:	4606      	mov	r6, r0
 80130fa:	2800      	cmp	r0, #0
 80130fc:	d1e0      	bne.n	80130c0 <__ssputs_r+0x5c>
 80130fe:	6921      	ldr	r1, [r4, #16]
 8013100:	4650      	mov	r0, sl
 8013102:	f7ff feb7 	bl	8012e74 <_free_r>
 8013106:	230c      	movs	r3, #12
 8013108:	f8ca 3000 	str.w	r3, [sl]
 801310c:	89a3      	ldrh	r3, [r4, #12]
 801310e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013112:	81a3      	strh	r3, [r4, #12]
 8013114:	f04f 30ff 	mov.w	r0, #4294967295
 8013118:	e7e9      	b.n	80130ee <__ssputs_r+0x8a>
	...

0801311c <_svfiprintf_r>:
 801311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013120:	4698      	mov	r8, r3
 8013122:	898b      	ldrh	r3, [r1, #12]
 8013124:	061b      	lsls	r3, r3, #24
 8013126:	b09d      	sub	sp, #116	@ 0x74
 8013128:	4607      	mov	r7, r0
 801312a:	460d      	mov	r5, r1
 801312c:	4614      	mov	r4, r2
 801312e:	d510      	bpl.n	8013152 <_svfiprintf_r+0x36>
 8013130:	690b      	ldr	r3, [r1, #16]
 8013132:	b973      	cbnz	r3, 8013152 <_svfiprintf_r+0x36>
 8013134:	2140      	movs	r1, #64	@ 0x40
 8013136:	f7ff ff09 	bl	8012f4c <_malloc_r>
 801313a:	6028      	str	r0, [r5, #0]
 801313c:	6128      	str	r0, [r5, #16]
 801313e:	b930      	cbnz	r0, 801314e <_svfiprintf_r+0x32>
 8013140:	230c      	movs	r3, #12
 8013142:	603b      	str	r3, [r7, #0]
 8013144:	f04f 30ff 	mov.w	r0, #4294967295
 8013148:	b01d      	add	sp, #116	@ 0x74
 801314a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801314e:	2340      	movs	r3, #64	@ 0x40
 8013150:	616b      	str	r3, [r5, #20]
 8013152:	2300      	movs	r3, #0
 8013154:	9309      	str	r3, [sp, #36]	@ 0x24
 8013156:	2320      	movs	r3, #32
 8013158:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801315c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013160:	2330      	movs	r3, #48	@ 0x30
 8013162:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013300 <_svfiprintf_r+0x1e4>
 8013166:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801316a:	f04f 0901 	mov.w	r9, #1
 801316e:	4623      	mov	r3, r4
 8013170:	469a      	mov	sl, r3
 8013172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013176:	b10a      	cbz	r2, 801317c <_svfiprintf_r+0x60>
 8013178:	2a25      	cmp	r2, #37	@ 0x25
 801317a:	d1f9      	bne.n	8013170 <_svfiprintf_r+0x54>
 801317c:	ebba 0b04 	subs.w	fp, sl, r4
 8013180:	d00b      	beq.n	801319a <_svfiprintf_r+0x7e>
 8013182:	465b      	mov	r3, fp
 8013184:	4622      	mov	r2, r4
 8013186:	4629      	mov	r1, r5
 8013188:	4638      	mov	r0, r7
 801318a:	f7ff ff6b 	bl	8013064 <__ssputs_r>
 801318e:	3001      	adds	r0, #1
 8013190:	f000 80a7 	beq.w	80132e2 <_svfiprintf_r+0x1c6>
 8013194:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013196:	445a      	add	r2, fp
 8013198:	9209      	str	r2, [sp, #36]	@ 0x24
 801319a:	f89a 3000 	ldrb.w	r3, [sl]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	f000 809f 	beq.w	80132e2 <_svfiprintf_r+0x1c6>
 80131a4:	2300      	movs	r3, #0
 80131a6:	f04f 32ff 	mov.w	r2, #4294967295
 80131aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80131ae:	f10a 0a01 	add.w	sl, sl, #1
 80131b2:	9304      	str	r3, [sp, #16]
 80131b4:	9307      	str	r3, [sp, #28]
 80131b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80131ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80131bc:	4654      	mov	r4, sl
 80131be:	2205      	movs	r2, #5
 80131c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131c4:	484e      	ldr	r0, [pc, #312]	@ (8013300 <_svfiprintf_r+0x1e4>)
 80131c6:	f7ed f823 	bl	8000210 <memchr>
 80131ca:	9a04      	ldr	r2, [sp, #16]
 80131cc:	b9d8      	cbnz	r0, 8013206 <_svfiprintf_r+0xea>
 80131ce:	06d0      	lsls	r0, r2, #27
 80131d0:	bf44      	itt	mi
 80131d2:	2320      	movmi	r3, #32
 80131d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80131d8:	0711      	lsls	r1, r2, #28
 80131da:	bf44      	itt	mi
 80131dc:	232b      	movmi	r3, #43	@ 0x2b
 80131de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80131e2:	f89a 3000 	ldrb.w	r3, [sl]
 80131e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80131e8:	d015      	beq.n	8013216 <_svfiprintf_r+0xfa>
 80131ea:	9a07      	ldr	r2, [sp, #28]
 80131ec:	4654      	mov	r4, sl
 80131ee:	2000      	movs	r0, #0
 80131f0:	f04f 0c0a 	mov.w	ip, #10
 80131f4:	4621      	mov	r1, r4
 80131f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80131fa:	3b30      	subs	r3, #48	@ 0x30
 80131fc:	2b09      	cmp	r3, #9
 80131fe:	d94b      	bls.n	8013298 <_svfiprintf_r+0x17c>
 8013200:	b1b0      	cbz	r0, 8013230 <_svfiprintf_r+0x114>
 8013202:	9207      	str	r2, [sp, #28]
 8013204:	e014      	b.n	8013230 <_svfiprintf_r+0x114>
 8013206:	eba0 0308 	sub.w	r3, r0, r8
 801320a:	fa09 f303 	lsl.w	r3, r9, r3
 801320e:	4313      	orrs	r3, r2
 8013210:	9304      	str	r3, [sp, #16]
 8013212:	46a2      	mov	sl, r4
 8013214:	e7d2      	b.n	80131bc <_svfiprintf_r+0xa0>
 8013216:	9b03      	ldr	r3, [sp, #12]
 8013218:	1d19      	adds	r1, r3, #4
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	9103      	str	r1, [sp, #12]
 801321e:	2b00      	cmp	r3, #0
 8013220:	bfbb      	ittet	lt
 8013222:	425b      	neglt	r3, r3
 8013224:	f042 0202 	orrlt.w	r2, r2, #2
 8013228:	9307      	strge	r3, [sp, #28]
 801322a:	9307      	strlt	r3, [sp, #28]
 801322c:	bfb8      	it	lt
 801322e:	9204      	strlt	r2, [sp, #16]
 8013230:	7823      	ldrb	r3, [r4, #0]
 8013232:	2b2e      	cmp	r3, #46	@ 0x2e
 8013234:	d10a      	bne.n	801324c <_svfiprintf_r+0x130>
 8013236:	7863      	ldrb	r3, [r4, #1]
 8013238:	2b2a      	cmp	r3, #42	@ 0x2a
 801323a:	d132      	bne.n	80132a2 <_svfiprintf_r+0x186>
 801323c:	9b03      	ldr	r3, [sp, #12]
 801323e:	1d1a      	adds	r2, r3, #4
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	9203      	str	r2, [sp, #12]
 8013244:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013248:	3402      	adds	r4, #2
 801324a:	9305      	str	r3, [sp, #20]
 801324c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013310 <_svfiprintf_r+0x1f4>
 8013250:	7821      	ldrb	r1, [r4, #0]
 8013252:	2203      	movs	r2, #3
 8013254:	4650      	mov	r0, sl
 8013256:	f7ec ffdb 	bl	8000210 <memchr>
 801325a:	b138      	cbz	r0, 801326c <_svfiprintf_r+0x150>
 801325c:	9b04      	ldr	r3, [sp, #16]
 801325e:	eba0 000a 	sub.w	r0, r0, sl
 8013262:	2240      	movs	r2, #64	@ 0x40
 8013264:	4082      	lsls	r2, r0
 8013266:	4313      	orrs	r3, r2
 8013268:	3401      	adds	r4, #1
 801326a:	9304      	str	r3, [sp, #16]
 801326c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013270:	4824      	ldr	r0, [pc, #144]	@ (8013304 <_svfiprintf_r+0x1e8>)
 8013272:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8013276:	2206      	movs	r2, #6
 8013278:	f7ec ffca 	bl	8000210 <memchr>
 801327c:	2800      	cmp	r0, #0
 801327e:	d036      	beq.n	80132ee <_svfiprintf_r+0x1d2>
 8013280:	4b21      	ldr	r3, [pc, #132]	@ (8013308 <_svfiprintf_r+0x1ec>)
 8013282:	bb1b      	cbnz	r3, 80132cc <_svfiprintf_r+0x1b0>
 8013284:	9b03      	ldr	r3, [sp, #12]
 8013286:	3307      	adds	r3, #7
 8013288:	f023 0307 	bic.w	r3, r3, #7
 801328c:	3308      	adds	r3, #8
 801328e:	9303      	str	r3, [sp, #12]
 8013290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013292:	4433      	add	r3, r6
 8013294:	9309      	str	r3, [sp, #36]	@ 0x24
 8013296:	e76a      	b.n	801316e <_svfiprintf_r+0x52>
 8013298:	fb0c 3202 	mla	r2, ip, r2, r3
 801329c:	460c      	mov	r4, r1
 801329e:	2001      	movs	r0, #1
 80132a0:	e7a8      	b.n	80131f4 <_svfiprintf_r+0xd8>
 80132a2:	2300      	movs	r3, #0
 80132a4:	3401      	adds	r4, #1
 80132a6:	9305      	str	r3, [sp, #20]
 80132a8:	4619      	mov	r1, r3
 80132aa:	f04f 0c0a 	mov.w	ip, #10
 80132ae:	4620      	mov	r0, r4
 80132b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80132b4:	3a30      	subs	r2, #48	@ 0x30
 80132b6:	2a09      	cmp	r2, #9
 80132b8:	d903      	bls.n	80132c2 <_svfiprintf_r+0x1a6>
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d0c6      	beq.n	801324c <_svfiprintf_r+0x130>
 80132be:	9105      	str	r1, [sp, #20]
 80132c0:	e7c4      	b.n	801324c <_svfiprintf_r+0x130>
 80132c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80132c6:	4604      	mov	r4, r0
 80132c8:	2301      	movs	r3, #1
 80132ca:	e7f0      	b.n	80132ae <_svfiprintf_r+0x192>
 80132cc:	ab03      	add	r3, sp, #12
 80132ce:	9300      	str	r3, [sp, #0]
 80132d0:	462a      	mov	r2, r5
 80132d2:	4b0e      	ldr	r3, [pc, #56]	@ (801330c <_svfiprintf_r+0x1f0>)
 80132d4:	a904      	add	r1, sp, #16
 80132d6:	4638      	mov	r0, r7
 80132d8:	f3af 8000 	nop.w
 80132dc:	1c42      	adds	r2, r0, #1
 80132de:	4606      	mov	r6, r0
 80132e0:	d1d6      	bne.n	8013290 <_svfiprintf_r+0x174>
 80132e2:	89ab      	ldrh	r3, [r5, #12]
 80132e4:	065b      	lsls	r3, r3, #25
 80132e6:	f53f af2d 	bmi.w	8013144 <_svfiprintf_r+0x28>
 80132ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80132ec:	e72c      	b.n	8013148 <_svfiprintf_r+0x2c>
 80132ee:	ab03      	add	r3, sp, #12
 80132f0:	9300      	str	r3, [sp, #0]
 80132f2:	462a      	mov	r2, r5
 80132f4:	4b05      	ldr	r3, [pc, #20]	@ (801330c <_svfiprintf_r+0x1f0>)
 80132f6:	a904      	add	r1, sp, #16
 80132f8:	4638      	mov	r0, r7
 80132fa:	f000 f879 	bl	80133f0 <_printf_i>
 80132fe:	e7ed      	b.n	80132dc <_svfiprintf_r+0x1c0>
 8013300:	080158b4 	.word	0x080158b4
 8013304:	080158be 	.word	0x080158be
 8013308:	00000000 	.word	0x00000000
 801330c:	08013065 	.word	0x08013065
 8013310:	080158ba 	.word	0x080158ba

08013314 <_printf_common>:
 8013314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013318:	4616      	mov	r6, r2
 801331a:	4698      	mov	r8, r3
 801331c:	688a      	ldr	r2, [r1, #8]
 801331e:	690b      	ldr	r3, [r1, #16]
 8013320:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8013324:	4293      	cmp	r3, r2
 8013326:	bfb8      	it	lt
 8013328:	4613      	movlt	r3, r2
 801332a:	6033      	str	r3, [r6, #0]
 801332c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013330:	4607      	mov	r7, r0
 8013332:	460c      	mov	r4, r1
 8013334:	b10a      	cbz	r2, 801333a <_printf_common+0x26>
 8013336:	3301      	adds	r3, #1
 8013338:	6033      	str	r3, [r6, #0]
 801333a:	6823      	ldr	r3, [r4, #0]
 801333c:	0699      	lsls	r1, r3, #26
 801333e:	bf42      	ittt	mi
 8013340:	6833      	ldrmi	r3, [r6, #0]
 8013342:	3302      	addmi	r3, #2
 8013344:	6033      	strmi	r3, [r6, #0]
 8013346:	6825      	ldr	r5, [r4, #0]
 8013348:	f015 0506 	ands.w	r5, r5, #6
 801334c:	d106      	bne.n	801335c <_printf_common+0x48>
 801334e:	f104 0a19 	add.w	sl, r4, #25
 8013352:	68e3      	ldr	r3, [r4, #12]
 8013354:	6832      	ldr	r2, [r6, #0]
 8013356:	1a9b      	subs	r3, r3, r2
 8013358:	42ab      	cmp	r3, r5
 801335a:	dc26      	bgt.n	80133aa <_printf_common+0x96>
 801335c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013360:	6822      	ldr	r2, [r4, #0]
 8013362:	3b00      	subs	r3, #0
 8013364:	bf18      	it	ne
 8013366:	2301      	movne	r3, #1
 8013368:	0692      	lsls	r2, r2, #26
 801336a:	d42b      	bmi.n	80133c4 <_printf_common+0xb0>
 801336c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8013370:	4641      	mov	r1, r8
 8013372:	4638      	mov	r0, r7
 8013374:	47c8      	blx	r9
 8013376:	3001      	adds	r0, #1
 8013378:	d01e      	beq.n	80133b8 <_printf_common+0xa4>
 801337a:	6823      	ldr	r3, [r4, #0]
 801337c:	6922      	ldr	r2, [r4, #16]
 801337e:	f003 0306 	and.w	r3, r3, #6
 8013382:	2b04      	cmp	r3, #4
 8013384:	bf02      	ittt	eq
 8013386:	68e5      	ldreq	r5, [r4, #12]
 8013388:	6833      	ldreq	r3, [r6, #0]
 801338a:	1aed      	subeq	r5, r5, r3
 801338c:	68a3      	ldr	r3, [r4, #8]
 801338e:	bf0c      	ite	eq
 8013390:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013394:	2500      	movne	r5, #0
 8013396:	4293      	cmp	r3, r2
 8013398:	bfc4      	itt	gt
 801339a:	1a9b      	subgt	r3, r3, r2
 801339c:	18ed      	addgt	r5, r5, r3
 801339e:	2600      	movs	r6, #0
 80133a0:	341a      	adds	r4, #26
 80133a2:	42b5      	cmp	r5, r6
 80133a4:	d11a      	bne.n	80133dc <_printf_common+0xc8>
 80133a6:	2000      	movs	r0, #0
 80133a8:	e008      	b.n	80133bc <_printf_common+0xa8>
 80133aa:	2301      	movs	r3, #1
 80133ac:	4652      	mov	r2, sl
 80133ae:	4641      	mov	r1, r8
 80133b0:	4638      	mov	r0, r7
 80133b2:	47c8      	blx	r9
 80133b4:	3001      	adds	r0, #1
 80133b6:	d103      	bne.n	80133c0 <_printf_common+0xac>
 80133b8:	f04f 30ff 	mov.w	r0, #4294967295
 80133bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80133c0:	3501      	adds	r5, #1
 80133c2:	e7c6      	b.n	8013352 <_printf_common+0x3e>
 80133c4:	18e1      	adds	r1, r4, r3
 80133c6:	1c5a      	adds	r2, r3, #1
 80133c8:	2030      	movs	r0, #48	@ 0x30
 80133ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80133ce:	4422      	add	r2, r4
 80133d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80133d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80133d8:	3302      	adds	r3, #2
 80133da:	e7c7      	b.n	801336c <_printf_common+0x58>
 80133dc:	2301      	movs	r3, #1
 80133de:	4622      	mov	r2, r4
 80133e0:	4641      	mov	r1, r8
 80133e2:	4638      	mov	r0, r7
 80133e4:	47c8      	blx	r9
 80133e6:	3001      	adds	r0, #1
 80133e8:	d0e6      	beq.n	80133b8 <_printf_common+0xa4>
 80133ea:	3601      	adds	r6, #1
 80133ec:	e7d9      	b.n	80133a2 <_printf_common+0x8e>
	...

080133f0 <_printf_i>:
 80133f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80133f4:	7e0f      	ldrb	r7, [r1, #24]
 80133f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80133f8:	2f78      	cmp	r7, #120	@ 0x78
 80133fa:	4691      	mov	r9, r2
 80133fc:	4680      	mov	r8, r0
 80133fe:	460c      	mov	r4, r1
 8013400:	469a      	mov	sl, r3
 8013402:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013406:	d807      	bhi.n	8013418 <_printf_i+0x28>
 8013408:	2f62      	cmp	r7, #98	@ 0x62
 801340a:	d80a      	bhi.n	8013422 <_printf_i+0x32>
 801340c:	2f00      	cmp	r7, #0
 801340e:	f000 80d2 	beq.w	80135b6 <_printf_i+0x1c6>
 8013412:	2f58      	cmp	r7, #88	@ 0x58
 8013414:	f000 80b9 	beq.w	801358a <_printf_i+0x19a>
 8013418:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801341c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013420:	e03a      	b.n	8013498 <_printf_i+0xa8>
 8013422:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8013426:	2b15      	cmp	r3, #21
 8013428:	d8f6      	bhi.n	8013418 <_printf_i+0x28>
 801342a:	a101      	add	r1, pc, #4	@ (adr r1, 8013430 <_printf_i+0x40>)
 801342c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013430:	08013489 	.word	0x08013489
 8013434:	0801349d 	.word	0x0801349d
 8013438:	08013419 	.word	0x08013419
 801343c:	08013419 	.word	0x08013419
 8013440:	08013419 	.word	0x08013419
 8013444:	08013419 	.word	0x08013419
 8013448:	0801349d 	.word	0x0801349d
 801344c:	08013419 	.word	0x08013419
 8013450:	08013419 	.word	0x08013419
 8013454:	08013419 	.word	0x08013419
 8013458:	08013419 	.word	0x08013419
 801345c:	0801359d 	.word	0x0801359d
 8013460:	080134c7 	.word	0x080134c7
 8013464:	08013557 	.word	0x08013557
 8013468:	08013419 	.word	0x08013419
 801346c:	08013419 	.word	0x08013419
 8013470:	080135bf 	.word	0x080135bf
 8013474:	08013419 	.word	0x08013419
 8013478:	080134c7 	.word	0x080134c7
 801347c:	08013419 	.word	0x08013419
 8013480:	08013419 	.word	0x08013419
 8013484:	0801355f 	.word	0x0801355f
 8013488:	6833      	ldr	r3, [r6, #0]
 801348a:	1d1a      	adds	r2, r3, #4
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	6032      	str	r2, [r6, #0]
 8013490:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013494:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013498:	2301      	movs	r3, #1
 801349a:	e09d      	b.n	80135d8 <_printf_i+0x1e8>
 801349c:	6833      	ldr	r3, [r6, #0]
 801349e:	6820      	ldr	r0, [r4, #0]
 80134a0:	1d19      	adds	r1, r3, #4
 80134a2:	6031      	str	r1, [r6, #0]
 80134a4:	0606      	lsls	r6, r0, #24
 80134a6:	d501      	bpl.n	80134ac <_printf_i+0xbc>
 80134a8:	681d      	ldr	r5, [r3, #0]
 80134aa:	e003      	b.n	80134b4 <_printf_i+0xc4>
 80134ac:	0645      	lsls	r5, r0, #25
 80134ae:	d5fb      	bpl.n	80134a8 <_printf_i+0xb8>
 80134b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80134b4:	2d00      	cmp	r5, #0
 80134b6:	da03      	bge.n	80134c0 <_printf_i+0xd0>
 80134b8:	232d      	movs	r3, #45	@ 0x2d
 80134ba:	426d      	negs	r5, r5
 80134bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80134c0:	4859      	ldr	r0, [pc, #356]	@ (8013628 <_printf_i+0x238>)
 80134c2:	230a      	movs	r3, #10
 80134c4:	e011      	b.n	80134ea <_printf_i+0xfa>
 80134c6:	6821      	ldr	r1, [r4, #0]
 80134c8:	6833      	ldr	r3, [r6, #0]
 80134ca:	0608      	lsls	r0, r1, #24
 80134cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80134d0:	d402      	bmi.n	80134d8 <_printf_i+0xe8>
 80134d2:	0649      	lsls	r1, r1, #25
 80134d4:	bf48      	it	mi
 80134d6:	b2ad      	uxthmi	r5, r5
 80134d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80134da:	4853      	ldr	r0, [pc, #332]	@ (8013628 <_printf_i+0x238>)
 80134dc:	6033      	str	r3, [r6, #0]
 80134de:	bf14      	ite	ne
 80134e0:	230a      	movne	r3, #10
 80134e2:	2308      	moveq	r3, #8
 80134e4:	2100      	movs	r1, #0
 80134e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80134ea:	6866      	ldr	r6, [r4, #4]
 80134ec:	60a6      	str	r6, [r4, #8]
 80134ee:	2e00      	cmp	r6, #0
 80134f0:	bfa2      	ittt	ge
 80134f2:	6821      	ldrge	r1, [r4, #0]
 80134f4:	f021 0104 	bicge.w	r1, r1, #4
 80134f8:	6021      	strge	r1, [r4, #0]
 80134fa:	b90d      	cbnz	r5, 8013500 <_printf_i+0x110>
 80134fc:	2e00      	cmp	r6, #0
 80134fe:	d04b      	beq.n	8013598 <_printf_i+0x1a8>
 8013500:	4616      	mov	r6, r2
 8013502:	fbb5 f1f3 	udiv	r1, r5, r3
 8013506:	fb03 5711 	mls	r7, r3, r1, r5
 801350a:	5dc7      	ldrb	r7, [r0, r7]
 801350c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013510:	462f      	mov	r7, r5
 8013512:	42bb      	cmp	r3, r7
 8013514:	460d      	mov	r5, r1
 8013516:	d9f4      	bls.n	8013502 <_printf_i+0x112>
 8013518:	2b08      	cmp	r3, #8
 801351a:	d10b      	bne.n	8013534 <_printf_i+0x144>
 801351c:	6823      	ldr	r3, [r4, #0]
 801351e:	07df      	lsls	r7, r3, #31
 8013520:	d508      	bpl.n	8013534 <_printf_i+0x144>
 8013522:	6923      	ldr	r3, [r4, #16]
 8013524:	6861      	ldr	r1, [r4, #4]
 8013526:	4299      	cmp	r1, r3
 8013528:	bfde      	ittt	le
 801352a:	2330      	movle	r3, #48	@ 0x30
 801352c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013530:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013534:	1b92      	subs	r2, r2, r6
 8013536:	6122      	str	r2, [r4, #16]
 8013538:	f8cd a000 	str.w	sl, [sp]
 801353c:	464b      	mov	r3, r9
 801353e:	aa03      	add	r2, sp, #12
 8013540:	4621      	mov	r1, r4
 8013542:	4640      	mov	r0, r8
 8013544:	f7ff fee6 	bl	8013314 <_printf_common>
 8013548:	3001      	adds	r0, #1
 801354a:	d14a      	bne.n	80135e2 <_printf_i+0x1f2>
 801354c:	f04f 30ff 	mov.w	r0, #4294967295
 8013550:	b004      	add	sp, #16
 8013552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013556:	6823      	ldr	r3, [r4, #0]
 8013558:	f043 0320 	orr.w	r3, r3, #32
 801355c:	6023      	str	r3, [r4, #0]
 801355e:	4833      	ldr	r0, [pc, #204]	@ (801362c <_printf_i+0x23c>)
 8013560:	2778      	movs	r7, #120	@ 0x78
 8013562:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8013566:	6823      	ldr	r3, [r4, #0]
 8013568:	6831      	ldr	r1, [r6, #0]
 801356a:	061f      	lsls	r7, r3, #24
 801356c:	f851 5b04 	ldr.w	r5, [r1], #4
 8013570:	d402      	bmi.n	8013578 <_printf_i+0x188>
 8013572:	065f      	lsls	r7, r3, #25
 8013574:	bf48      	it	mi
 8013576:	b2ad      	uxthmi	r5, r5
 8013578:	6031      	str	r1, [r6, #0]
 801357a:	07d9      	lsls	r1, r3, #31
 801357c:	bf44      	itt	mi
 801357e:	f043 0320 	orrmi.w	r3, r3, #32
 8013582:	6023      	strmi	r3, [r4, #0]
 8013584:	b11d      	cbz	r5, 801358e <_printf_i+0x19e>
 8013586:	2310      	movs	r3, #16
 8013588:	e7ac      	b.n	80134e4 <_printf_i+0xf4>
 801358a:	4827      	ldr	r0, [pc, #156]	@ (8013628 <_printf_i+0x238>)
 801358c:	e7e9      	b.n	8013562 <_printf_i+0x172>
 801358e:	6823      	ldr	r3, [r4, #0]
 8013590:	f023 0320 	bic.w	r3, r3, #32
 8013594:	6023      	str	r3, [r4, #0]
 8013596:	e7f6      	b.n	8013586 <_printf_i+0x196>
 8013598:	4616      	mov	r6, r2
 801359a:	e7bd      	b.n	8013518 <_printf_i+0x128>
 801359c:	6833      	ldr	r3, [r6, #0]
 801359e:	6825      	ldr	r5, [r4, #0]
 80135a0:	6961      	ldr	r1, [r4, #20]
 80135a2:	1d18      	adds	r0, r3, #4
 80135a4:	6030      	str	r0, [r6, #0]
 80135a6:	062e      	lsls	r6, r5, #24
 80135a8:	681b      	ldr	r3, [r3, #0]
 80135aa:	d501      	bpl.n	80135b0 <_printf_i+0x1c0>
 80135ac:	6019      	str	r1, [r3, #0]
 80135ae:	e002      	b.n	80135b6 <_printf_i+0x1c6>
 80135b0:	0668      	lsls	r0, r5, #25
 80135b2:	d5fb      	bpl.n	80135ac <_printf_i+0x1bc>
 80135b4:	8019      	strh	r1, [r3, #0]
 80135b6:	2300      	movs	r3, #0
 80135b8:	6123      	str	r3, [r4, #16]
 80135ba:	4616      	mov	r6, r2
 80135bc:	e7bc      	b.n	8013538 <_printf_i+0x148>
 80135be:	6833      	ldr	r3, [r6, #0]
 80135c0:	1d1a      	adds	r2, r3, #4
 80135c2:	6032      	str	r2, [r6, #0]
 80135c4:	681e      	ldr	r6, [r3, #0]
 80135c6:	6862      	ldr	r2, [r4, #4]
 80135c8:	2100      	movs	r1, #0
 80135ca:	4630      	mov	r0, r6
 80135cc:	f7ec fe20 	bl	8000210 <memchr>
 80135d0:	b108      	cbz	r0, 80135d6 <_printf_i+0x1e6>
 80135d2:	1b80      	subs	r0, r0, r6
 80135d4:	6060      	str	r0, [r4, #4]
 80135d6:	6863      	ldr	r3, [r4, #4]
 80135d8:	6123      	str	r3, [r4, #16]
 80135da:	2300      	movs	r3, #0
 80135dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80135e0:	e7aa      	b.n	8013538 <_printf_i+0x148>
 80135e2:	6923      	ldr	r3, [r4, #16]
 80135e4:	4632      	mov	r2, r6
 80135e6:	4649      	mov	r1, r9
 80135e8:	4640      	mov	r0, r8
 80135ea:	47d0      	blx	sl
 80135ec:	3001      	adds	r0, #1
 80135ee:	d0ad      	beq.n	801354c <_printf_i+0x15c>
 80135f0:	6823      	ldr	r3, [r4, #0]
 80135f2:	079b      	lsls	r3, r3, #30
 80135f4:	d413      	bmi.n	801361e <_printf_i+0x22e>
 80135f6:	68e0      	ldr	r0, [r4, #12]
 80135f8:	9b03      	ldr	r3, [sp, #12]
 80135fa:	4298      	cmp	r0, r3
 80135fc:	bfb8      	it	lt
 80135fe:	4618      	movlt	r0, r3
 8013600:	e7a6      	b.n	8013550 <_printf_i+0x160>
 8013602:	2301      	movs	r3, #1
 8013604:	4632      	mov	r2, r6
 8013606:	4649      	mov	r1, r9
 8013608:	4640      	mov	r0, r8
 801360a:	47d0      	blx	sl
 801360c:	3001      	adds	r0, #1
 801360e:	d09d      	beq.n	801354c <_printf_i+0x15c>
 8013610:	3501      	adds	r5, #1
 8013612:	68e3      	ldr	r3, [r4, #12]
 8013614:	9903      	ldr	r1, [sp, #12]
 8013616:	1a5b      	subs	r3, r3, r1
 8013618:	42ab      	cmp	r3, r5
 801361a:	dcf2      	bgt.n	8013602 <_printf_i+0x212>
 801361c:	e7eb      	b.n	80135f6 <_printf_i+0x206>
 801361e:	2500      	movs	r5, #0
 8013620:	f104 0619 	add.w	r6, r4, #25
 8013624:	e7f5      	b.n	8013612 <_printf_i+0x222>
 8013626:	bf00      	nop
 8013628:	080158c5 	.word	0x080158c5
 801362c:	080158d6 	.word	0x080158d6

08013630 <memmove>:
 8013630:	4288      	cmp	r0, r1
 8013632:	b510      	push	{r4, lr}
 8013634:	eb01 0402 	add.w	r4, r1, r2
 8013638:	d902      	bls.n	8013640 <memmove+0x10>
 801363a:	4284      	cmp	r4, r0
 801363c:	4623      	mov	r3, r4
 801363e:	d807      	bhi.n	8013650 <memmove+0x20>
 8013640:	1e43      	subs	r3, r0, #1
 8013642:	42a1      	cmp	r1, r4
 8013644:	d008      	beq.n	8013658 <memmove+0x28>
 8013646:	f811 2b01 	ldrb.w	r2, [r1], #1
 801364a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801364e:	e7f8      	b.n	8013642 <memmove+0x12>
 8013650:	4402      	add	r2, r0
 8013652:	4601      	mov	r1, r0
 8013654:	428a      	cmp	r2, r1
 8013656:	d100      	bne.n	801365a <memmove+0x2a>
 8013658:	bd10      	pop	{r4, pc}
 801365a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801365e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013662:	e7f7      	b.n	8013654 <memmove+0x24>

08013664 <_sbrk_r>:
 8013664:	b538      	push	{r3, r4, r5, lr}
 8013666:	4d06      	ldr	r5, [pc, #24]	@ (8013680 <_sbrk_r+0x1c>)
 8013668:	2300      	movs	r3, #0
 801366a:	4604      	mov	r4, r0
 801366c:	4608      	mov	r0, r1
 801366e:	602b      	str	r3, [r5, #0]
 8013670:	f7f1 f88c 	bl	800478c <_sbrk>
 8013674:	1c43      	adds	r3, r0, #1
 8013676:	d102      	bne.n	801367e <_sbrk_r+0x1a>
 8013678:	682b      	ldr	r3, [r5, #0]
 801367a:	b103      	cbz	r3, 801367e <_sbrk_r+0x1a>
 801367c:	6023      	str	r3, [r4, #0]
 801367e:	bd38      	pop	{r3, r4, r5, pc}
 8013680:	20012054 	.word	0x20012054

08013684 <_realloc_r>:
 8013684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013688:	4680      	mov	r8, r0
 801368a:	4615      	mov	r5, r2
 801368c:	460c      	mov	r4, r1
 801368e:	b921      	cbnz	r1, 801369a <_realloc_r+0x16>
 8013690:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013694:	4611      	mov	r1, r2
 8013696:	f7ff bc59 	b.w	8012f4c <_malloc_r>
 801369a:	b92a      	cbnz	r2, 80136a8 <_realloc_r+0x24>
 801369c:	f7ff fbea 	bl	8012e74 <_free_r>
 80136a0:	2400      	movs	r4, #0
 80136a2:	4620      	mov	r0, r4
 80136a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a8:	f000 f81a 	bl	80136e0 <_malloc_usable_size_r>
 80136ac:	4285      	cmp	r5, r0
 80136ae:	4606      	mov	r6, r0
 80136b0:	d802      	bhi.n	80136b8 <_realloc_r+0x34>
 80136b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80136b6:	d8f4      	bhi.n	80136a2 <_realloc_r+0x1e>
 80136b8:	4629      	mov	r1, r5
 80136ba:	4640      	mov	r0, r8
 80136bc:	f7ff fc46 	bl	8012f4c <_malloc_r>
 80136c0:	4607      	mov	r7, r0
 80136c2:	2800      	cmp	r0, #0
 80136c4:	d0ec      	beq.n	80136a0 <_realloc_r+0x1c>
 80136c6:	42b5      	cmp	r5, r6
 80136c8:	462a      	mov	r2, r5
 80136ca:	4621      	mov	r1, r4
 80136cc:	bf28      	it	cs
 80136ce:	4632      	movcs	r2, r6
 80136d0:	f7ff fbc2 	bl	8012e58 <memcpy>
 80136d4:	4621      	mov	r1, r4
 80136d6:	4640      	mov	r0, r8
 80136d8:	f7ff fbcc 	bl	8012e74 <_free_r>
 80136dc:	463c      	mov	r4, r7
 80136de:	e7e0      	b.n	80136a2 <_realloc_r+0x1e>

080136e0 <_malloc_usable_size_r>:
 80136e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136e4:	1f18      	subs	r0, r3, #4
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	bfbc      	itt	lt
 80136ea:	580b      	ldrlt	r3, [r1, r0]
 80136ec:	18c0      	addlt	r0, r0, r3
 80136ee:	4770      	bx	lr

080136f0 <_init>:
 80136f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136f2:	bf00      	nop
 80136f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80136f6:	bc08      	pop	{r3}
 80136f8:	469e      	mov	lr, r3
 80136fa:	4770      	bx	lr

080136fc <_fini>:
 80136fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80136fe:	bf00      	nop
 8013700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013702:	bc08      	pop	{r3}
 8013704:	469e      	mov	lr, r3
 8013706:	4770      	bx	lr
