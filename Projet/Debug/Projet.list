
Projet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013870  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020e0  08013a40  08013a40  00014a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015b20  08015b20  00017094  2**0
                  CONTENTS
  4 .ARM          00000008  08015b20  08015b20  00016b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015b28  08015b28  00017094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015b28  08015b28  00016b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015b2c  08015b2c  00016b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08015b30  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004c2c  20000094  08015bc4  00017094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004cc0  08015bc4  00017cc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00017094  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039cf9  00000000  00000000  000170c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008a36  00000000  00000000  00050dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002f38  00000000  00000000  000597f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000244c  00000000  00000000  0005c730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000336ab  00000000  00000000  0005eb7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00044227  00000000  00000000  00092227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011ec6f  00000000  00000000  000d644e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f50bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c818  00000000  00000000  001f5100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00201918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013a28 	.word	0x08013a28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	08013a28 	.word	0x08013a28

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005b2:	4b21      	ldr	r3, [pc, #132]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <MX_ADC1_Init+0x9c>)
 80005b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005cc:	4b1a      	ldr	r3, [pc, #104]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005d2:	4b19      	ldr	r3, [pc, #100]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005da:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005dc:	2200      	movs	r2, #0
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005e0:	4b15      	ldr	r3, [pc, #84]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e2:	4a17      	ldr	r2, [pc, #92]	@ (8000640 <MX_ADC1_Init+0xa0>)
 80005e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e6:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005ec:	4b12      	ldr	r3, [pc, #72]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005f2:	4b11      	ldr	r3, [pc, #68]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <MX_ADC1_Init+0x98>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000600:	480d      	ldr	r0, [pc, #52]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000602:	f004 f8b9 	bl	8004778 <HAL_ADC_Init>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800060c:	f001 fdba 	bl	8002184 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000614:	2301      	movs	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <MX_ADC1_Init+0x98>)
 8000622:	f004 f8ed 	bl	8004800 <HAL_ADC_ConfigChannel>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800062c:	f001 fdaa 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000630:	bf00      	nop
 8000632:	3710      	adds	r7, #16
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200000b0 	.word	0x200000b0
 800063c:	40012000 	.word	0x40012000
 8000640:	0f000001 	.word	0x0f000001

08000644 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000656:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000658:	4a21      	ldr	r2, [pc, #132]	@ (80006e0 <MX_ADC3_Init+0x9c>)
 800065a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800065c:	4b1f      	ldr	r3, [pc, #124]	@ (80006dc <MX_ADC3_Init+0x98>)
 800065e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000662:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000664:	4b1d      	ldr	r3, [pc, #116]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800066a:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <MX_ADC3_Init+0x98>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000670:	4b1a      	ldr	r3, [pc, #104]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800067e:	4b17      	ldr	r3, [pc, #92]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000680:	2200      	movs	r2, #0
 8000682:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000686:	4a17      	ldr	r2, [pc, #92]	@ (80006e4 <MX_ADC3_Init+0xa0>)
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800068a:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <MX_ADC3_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000690:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000692:	2201      	movs	r2, #1
 8000694:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000696:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <MX_ADC3_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a0:	2201      	movs	r2, #1
 80006a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006a6:	f004 f867 	bl	8004778 <HAL_ADC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006b0:	f001 fd68 	bl	8002184 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b4:	2306      	movs	r3, #6
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	4805      	ldr	r0, [pc, #20]	@ (80006dc <MX_ADC3_Init+0x98>)
 80006c6:	f004 f89b 	bl	8004800 <HAL_ADC_ConfigChannel>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006d0:	f001 fd58 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006d4:	bf00      	nop
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000f8 	.word	0x200000f8
 80006e0:	40012200 	.word	0x40012200
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b08c      	sub	sp, #48	@ 0x30
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
 80006f8:	605a      	str	r2, [r3, #4]
 80006fa:	609a      	str	r2, [r3, #8]
 80006fc:	60da      	str	r2, [r3, #12]
 80006fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <HAL_ADC_MspInit+0xc8>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d124      	bne.n	8000754 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800070a:	4b2a      	ldr	r3, [pc, #168]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800070e:	4a29      	ldr	r2, [pc, #164]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000714:	6453      	str	r3, [r2, #68]	@ 0x44
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800071a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	4a23      	ldr	r2, [pc, #140]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6313      	str	r3, [r2, #48]	@ 0x30
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	617b      	str	r3, [r7, #20]
 8000738:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	481a      	ldr	r0, [pc, #104]	@ (80007b8 <HAL_ADC_MspInit+0xd0>)
 800074e:	f005 fc79 	bl	8006044 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000752:	e029      	b.n	80007a8 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a18      	ldr	r2, [pc, #96]	@ (80007bc <HAL_ADC_MspInit+0xd4>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d124      	bne.n	80007a8 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000764:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000768:	6453      	str	r3, [r2, #68]	@ 0x44
 800076a:	4b12      	ldr	r3, [pc, #72]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	4b0f      	ldr	r3, [pc, #60]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 800077c:	f043 0320 	orr.w	r3, r3, #32
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <HAL_ADC_MspInit+0xcc>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0320 	and.w	r3, r3, #32
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 800078e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000794:	2303      	movs	r3, #3
 8000796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4807      	ldr	r0, [pc, #28]	@ (80007c0 <HAL_ADC_MspInit+0xd8>)
 80007a4:	f005 fc4e 	bl	8006044 <HAL_GPIO_Init>
}
 80007a8:	bf00      	nop
 80007aa:	3730      	adds	r7, #48	@ 0x30
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40012000 	.word	0x40012000
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40012200 	.word	0x40012200
 80007c0:	40021400 	.word	0x40021400

080007c4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <MX_DAC_Init+0x50>)
 80007d6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007d8:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007da:	f004 fb43 	bl	8004e64 <HAL_DAC_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007e4:	f001 fcce 	bl	8002184 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	2200      	movs	r2, #0
 80007f4:	4619      	mov	r1, r3
 80007f6:	4806      	ldr	r0, [pc, #24]	@ (8000810 <MX_DAC_Init+0x4c>)
 80007f8:	f004 fbba 	bl	8004f70 <HAL_DAC_ConfigChannel>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000802:	f001 fcbf 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	20000140 	.word	0x20000140
 8000814:	40007400 	.word	0x40007400

08000818 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	@ 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_DAC_MspInit+0x84>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d12b      	bne.n	8000892 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800083a:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083e:	4a18      	ldr	r2, [pc, #96]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000840:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000844:	6413      	str	r3, [r2, #64]	@ 0x40
 8000846:	4b16      	ldr	r3, [pc, #88]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800084a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a12      	ldr	r2, [pc, #72]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <HAL_DAC_MspInit+0x88>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800086a:	2310      	movs	r3, #16
 800086c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	4809      	ldr	r0, [pc, #36]	@ (80008a4 <HAL_DAC_MspInit+0x8c>)
 800087e:	f005 fbe1 	bl	8006044 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000882:	2200      	movs	r2, #0
 8000884:	210f      	movs	r1, #15
 8000886:	2036      	movs	r0, #54	@ 0x36
 8000888:	f004 fac2 	bl	8004e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800088c:	2036      	movs	r0, #54	@ 0x36
 800088e:	f004 fadb 	bl	8004e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000892:	bf00      	nop
 8000894:	3728      	adds	r7, #40	@ 0x28
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40007400 	.word	0x40007400
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40020000 	.word	0x40020000

080008a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_DMA_Init+0x48>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a0f      	ldr	r2, [pc, #60]	@ (80008f0 <MX_DMA_Init+0x48>)
 80008b4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <MX_DMA_Init+0x48>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2105      	movs	r1, #5
 80008ca:	203b      	movs	r0, #59	@ 0x3b
 80008cc:	f004 faa0 	bl	8004e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008d0:	203b      	movs	r0, #59	@ 0x3b
 80008d2:	f004 fab9 	bl	8004e48 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2105      	movs	r1, #5
 80008da:	2045      	movs	r0, #69	@ 0x45
 80008dc:	f004 fa98 	bl	8004e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008e0:	2045      	movs	r0, #69	@ 0x45
 80008e2:	f004 fab1 	bl	8004e48 <HAL_NVIC_EnableIRQ>

}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008f8:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 80008fa:	4a16      	ldr	r2, [pc, #88]	@ (8000954 <MX_DMA2D_Init+0x60>)
 80008fc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008fe:	4b14      	ldr	r3, [pc, #80]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 8000900:	2200      	movs	r2, #0
 8000902:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000904:	4b12      	ldr	r3, [pc, #72]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800090a:	4b11      	ldr	r3, [pc, #68]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000916:	4b0e      	ldr	r3, [pc, #56]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 8000918:	2200      	movs	r2, #0
 800091a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800091c:	4b0c      	ldr	r3, [pc, #48]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 800091e:	2200      	movs	r2, #0
 8000920:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000922:	4b0b      	ldr	r3, [pc, #44]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 8000924:	2200      	movs	r2, #0
 8000926:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000928:	4809      	ldr	r0, [pc, #36]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 800092a:	f004 ffef 	bl	800590c <HAL_DMA2D_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000934:	f001 fc26 	bl	8002184 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000938:	2101      	movs	r1, #1
 800093a:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_DMA2D_Init+0x5c>)
 800093c:	f005 fa54 	bl	8005de8 <HAL_DMA2D_ConfigLayer>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000946:	f001 fc1d 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000154 	.word	0x20000154
 8000954:	4002b000 	.word	0x4002b000

08000958 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <HAL_DMA2D_MspInit+0x44>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d113      	bne.n	8000992 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800096a:	4b0d      	ldr	r3, [pc, #52]	@ (80009a0 <HAL_DMA2D_MspInit+0x48>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <HAL_DMA2D_MspInit+0x48>)
 8000970:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000974:	6313      	str	r3, [r2, #48]	@ 0x30
 8000976:	4b0a      	ldr	r3, [pc, #40]	@ (80009a0 <HAL_DMA2D_MspInit+0x48>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000982:	2200      	movs	r2, #0
 8000984:	2105      	movs	r1, #5
 8000986:	205a      	movs	r0, #90	@ 0x5a
 8000988:	f004 fa42 	bl	8004e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800098c:	205a      	movs	r0, #90	@ 0x5a
 800098e:	f004 fa5b 	bl	8004e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000992:	bf00      	nop
 8000994:	3710      	adds	r7, #16
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	4002b000 	.word	0x4002b000
 80009a0:	40023800 	.word	0x40023800

080009a4 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2200      	movs	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
 80009b0:	605a      	str	r2, [r3, #4]
 80009b2:	609a      	str	r2, [r3, #8]
 80009b4:	60da      	str	r2, [r3, #12]
 80009b6:	611a      	str	r2, [r3, #16]
 80009b8:	615a      	str	r2, [r3, #20]
 80009ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <MX_FMC_Init+0x94>)
 80009be:	4a1f      	ldr	r2, [pc, #124]	@ (8000a3c <MX_FMC_Init+0x98>)
 80009c0:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80009c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <MX_FMC_Init+0x94>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a38 <MX_FMC_Init+0x94>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000a38 <MX_FMC_Init+0x94>)
 80009d0:	2204      	movs	r2, #4
 80009d2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009d4:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <MX_FMC_Init+0x94>)
 80009d6:	2210      	movs	r2, #16
 80009d8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009da:	4b17      	ldr	r3, [pc, #92]	@ (8000a38 <MX_FMC_Init+0x94>)
 80009dc:	2240      	movs	r2, #64	@ 0x40
 80009de:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80009e0:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <MX_FMC_Init+0x94>)
 80009e2:	2280      	movs	r2, #128	@ 0x80
 80009e4:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <MX_FMC_Init+0x94>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80009ec:	4b12      	ldr	r3, [pc, #72]	@ (8000a38 <MX_FMC_Init+0x94>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <MX_FMC_Init+0x94>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a38 <MX_FMC_Init+0x94>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80009fe:	2310      	movs	r3, #16
 8000a00:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000a02:	2310      	movs	r3, #16
 8000a04:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000a06:	2310      	movs	r3, #16
 8000a08:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000a0a:	2310      	movs	r3, #16
 8000a0c:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000a0e:	2310      	movs	r3, #16
 8000a10:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000a12:	2310      	movs	r3, #16
 8000a14:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000a16:	2310      	movs	r3, #16
 8000a18:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4806      	ldr	r0, [pc, #24]	@ (8000a38 <MX_FMC_Init+0x94>)
 8000a20:	f009 fb20 	bl	800a064 <HAL_SDRAM_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000a2a:	f001 fbab 	bl	8002184 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a2e:	bf00      	nop
 8000a30:	3720      	adds	r7, #32
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000194 	.word	0x20000194
 8000a3c:	a0000140 	.word	0xa0000140

08000a40 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	1d3b      	adds	r3, r7, #4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a54:	4b3a      	ldr	r3, [pc, #232]	@ (8000b40 <HAL_FMC_MspInit+0x100>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d16d      	bne.n	8000b38 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a5c:	4b38      	ldr	r3, [pc, #224]	@ (8000b40 <HAL_FMC_MspInit+0x100>)
 8000a5e:	2201      	movs	r2, #1
 8000a60:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a62:	4b38      	ldr	r3, [pc, #224]	@ (8000b44 <HAL_FMC_MspInit+0x104>)
 8000a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a66:	4a37      	ldr	r2, [pc, #220]	@ (8000b44 <HAL_FMC_MspInit+0x104>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6393      	str	r3, [r2, #56]	@ 0x38
 8000a6e:	4b35      	ldr	r3, [pc, #212]	@ (8000b44 <HAL_FMC_MspInit+0x104>)
 8000a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	603b      	str	r3, [r7, #0]
 8000a78:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a7a:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a7e:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a8c:	230c      	movs	r3, #12
 8000a8e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a90:	1d3b      	adds	r3, r7, #4
 8000a92:	4619      	mov	r1, r3
 8000a94:	482c      	ldr	r0, [pc, #176]	@ (8000b48 <HAL_FMC_MspInit+0x108>)
 8000a96:	f005 fad5 	bl	8006044 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a9a:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a9e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aac:	230c      	movs	r3, #12
 8000aae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4825      	ldr	r0, [pc, #148]	@ (8000b4c <HAL_FMC_MspInit+0x10c>)
 8000ab6:	f005 fac5 	bl	8006044 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000aba:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000abe:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac8:	2303      	movs	r3, #3
 8000aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000acc:	230c      	movs	r3, #12
 8000ace:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	481e      	ldr	r0, [pc, #120]	@ (8000b50 <HAL_FMC_MspInit+0x110>)
 8000ad6:	f005 fab5 	bl	8006044 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000ada:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000ade:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aec:	230c      	movs	r3, #12
 8000aee:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000af0:	1d3b      	adds	r3, r7, #4
 8000af2:	4619      	mov	r1, r3
 8000af4:	4817      	ldr	r0, [pc, #92]	@ (8000b54 <HAL_FMC_MspInit+0x114>)
 8000af6:	f005 faa5 	bl	8006044 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000afa:	2328      	movs	r3, #40	@ 0x28
 8000afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afe:	2302      	movs	r3, #2
 8000b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b06:	2303      	movs	r3, #3
 8000b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	4619      	mov	r1, r3
 8000b12:	4811      	ldr	r0, [pc, #68]	@ (8000b58 <HAL_FMC_MspInit+0x118>)
 8000b14:	f005 fa96 	bl	8006044 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000b18:	2308      	movs	r3, #8
 8000b1a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b28:	230c      	movs	r3, #12
 8000b2a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000b2c:	1d3b      	adds	r3, r7, #4
 8000b2e:	4619      	mov	r1, r3
 8000b30:	480a      	ldr	r0, [pc, #40]	@ (8000b5c <HAL_FMC_MspInit+0x11c>)
 8000b32:	f005 fa87 	bl	8006044 <HAL_GPIO_Init>
 8000b36:	e000      	b.n	8000b3a <HAL_FMC_MspInit+0xfa>
    return;
 8000b38:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b3a:	3718      	adds	r7, #24
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200001c8 	.word	0x200001c8
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40021800 	.word	0x40021800
 8000b50:	40020c00 	.word	0x40020c00
 8000b54:	40021400 	.word	0x40021400
 8000b58:	40021c00 	.word	0x40021c00
 8000b5c:	40020800 	.word	0x40020800

08000b60 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b68:	f7ff ff6a 	bl	8000a40 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b84:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	4a06      	ldr	r2, [pc, #24]	@ (8000ba4 <vApplicationGetIdleTaskMemory+0x30>)
 8000b8a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b92:	bf00      	nop
 8000b94:	3714      	adds	r7, #20
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	200001dc 	.word	0x200001dc
 8000ba4:	2000027c 	.word	0x2000027c

08000ba8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b098      	sub	sp, #96	@ 0x60
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* definition and creation of Mutex_Affichage */
  osMutexDef(Mutex_Affichage);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  Mutex_AffichageHandle = osMutexCreate(osMutex(Mutex_Affichage));
 8000bb6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f00f fbc5 	bl	801034a <osMutexCreate>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8000c3c <MX_FREERTOS_Init+0x94>)
 8000bc4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000bc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c40 <MX_FREERTOS_Init+0x98>)
 8000bc8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8000bcc:	461d      	mov	r5, r3
 8000bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bd2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bd6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000bda:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f00f fb52 	bl	801028a <osThreadCreate>
 8000be6:	4603      	mov	r3, r0
 8000be8:	4a16      	ldr	r2, [pc, #88]	@ (8000c44 <MX_FREERTOS_Init+0x9c>)
 8000bea:	6013      	str	r3, [r2, #0]

  /* definition and creation of deplacement */
  osThreadDef(deplacement, deplacement_fonction, osPriorityRealtime, 0, 1024);
 8000bec:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <MX_FREERTOS_Init+0xa0>)
 8000bee:	f107 0420 	add.w	r4, r7, #32
 8000bf2:	461d      	mov	r5, r3
 8000bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bf8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bfc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  deplacementHandle = osThreadCreate(osThread(deplacement), NULL);
 8000c00:	f107 0320 	add.w	r3, r7, #32
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f00f fb3f 	bl	801028a <osThreadCreate>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c4c <MX_FREERTOS_Init+0xa4>)
 8000c10:	6013      	str	r3, [r2, #0]

  /* definition and creation of Display */
  osThreadDef(Display, Display_fonction, osPriorityNormal, 0, 1024);
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_FREERTOS_Init+0xa8>)
 8000c14:	1d3c      	adds	r4, r7, #4
 8000c16:	461d      	mov	r5, r3
 8000c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayHandle = osThreadCreate(osThread(Display), NULL);
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f00f fb2e 	bl	801028a <osThreadCreate>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	4a08      	ldr	r2, [pc, #32]	@ (8000c54 <MX_FREERTOS_Init+0xac>)
 8000c32:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000c34:	bf00      	nop
 8000c36:	3760      	adds	r7, #96	@ 0x60
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c3c:	200001d8 	.word	0x200001d8
 8000c40:	08013a4c 	.word	0x08013a4c
 8000c44:	200001cc 	.word	0x200001cc
 8000c48:	08013a74 	.word	0x08013a74
 8000c4c:	200001d0 	.word	0x200001d0
 8000c50:	08013a98 	.word	0x08013a98
 8000c54:	200001d4 	.word	0x200001d4

08000c58 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
 8000c60:	2064      	movs	r0, #100	@ 0x64
 8000c62:	f00f fb5e 	bl	8010322 <osDelay>
 8000c66:	e7fb      	b.n	8000c60 <StartDefaultTask+0x8>

08000c68 <deplacement_fonction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_deplacement_fonction */
void deplacement_fonction(void const * argument)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b09e      	sub	sp, #120	@ 0x78
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN deplacement_fonction */
  TS_StateTypeDef TS_State;
  int16_t deplacement=0,dx,dy,x,y,x0,y0;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
  char text[50]={};
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	f107 030c 	add.w	r3, r7, #12
 8000c7e:	222e      	movs	r2, #46	@ 0x2e
 8000c80:	2100      	movs	r1, #0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f012 f9fa 	bl	801307c <memset>
  /* Infinite loop */
  for(;;)
  {
    BSP_TS_GetState(&TS_State);
 8000c88:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f002 fda3 	bl	80037d8 <BSP_TS_GetState>
    if(TS_State.touchDetected){
 8000c92:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d025      	beq.n	8000ce6 <deplacement_fonction+0x7e>
      sprintf(text,"x %d y %d            ",TS_State.touchX[0],TS_State.touchY[0]);
 8000c9a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000ca2:	f107 0008 	add.w	r0, r7, #8
 8000ca6:	4932      	ldr	r1, [pc, #200]	@ (8000d70 <deplacement_fonction+0x108>)
 8000ca8:	f012 f9c8 	bl	801303c <siprintf>
      BSP_LCD_DisplayStringAtLine(4, (uint8_t*) text);
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	2004      	movs	r0, #4
 8000cb4:	f002 f922 	bl	8002efc <BSP_LCD_DisplayStringAtLine>
      if (deplacement==0){
 8000cb8:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	@ 0x76
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10a      	bne.n	8000cd6 <deplacement_fonction+0x6e>
		    x0=TS_State.touchX[0];
 8000cc0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000cc2:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
        y0=TS_State.touchY[0];
 8000cc6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000cca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
        deplacement=1;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
 8000cd4:	e047      	b.n	8000d66 <deplacement_fonction+0xfe>
	  	}
      else{
        x=TS_State.touchX[0];
 8000cd6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000cd8:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
        y=TS_State.touchY[0];
 8000cdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000ce0:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8000ce4:	e03f      	b.n	8000d66 <deplacement_fonction+0xfe>
    	}
    }
    else {
        deplacement=0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
        dx=x0-x;
 8000cec:	f8b7 2070 	ldrh.w	r2, [r7, #112]	@ 0x70
 8000cf0:	f8b7 3074 	ldrh.w	r3, [r7, #116]	@ 0x74
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	b29b      	uxth	r3, r3
 8000cf8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
        dy=y0-y;
 8000cfc:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8000d00:	f8b7 3072 	ldrh.w	r3, [r7, #114]	@ 0x72
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
        sprintf(text,"dx %d dy %d            ",dx,dy);
 8000d0c:	f9b7 206c 	ldrsh.w	r2, [r7, #108]	@ 0x6c
 8000d10:	f9b7 306a 	ldrsh.w	r3, [r7, #106]	@ 0x6a
 8000d14:	f107 0008 	add.w	r0, r7, #8
 8000d18:	4916      	ldr	r1, [pc, #88]	@ (8000d74 <deplacement_fonction+0x10c>)
 8000d1a:	f012 f98f 	bl	801303c <siprintf>
        BSP_LCD_DisplayStringAtLine(1, (uint8_t*) text);
 8000d1e:	f107 0308 	add.w	r3, r7, #8
 8000d22:	4619      	mov	r1, r3
 8000d24:	2001      	movs	r0, #1
 8000d26:	f002 f8e9 	bl	8002efc <BSP_LCD_DisplayStringAtLine>
        sprintf(text,"f: x %d y %d            ",x,y);
 8000d2a:	f9b7 2074 	ldrsh.w	r2, [r7, #116]	@ 0x74
 8000d2e:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	@ 0x72
 8000d32:	f107 0008 	add.w	r0, r7, #8
 8000d36:	4910      	ldr	r1, [pc, #64]	@ (8000d78 <deplacement_fonction+0x110>)
 8000d38:	f012 f980 	bl	801303c <siprintf>
        BSP_LCD_DisplayStringAtLine(2, (uint8_t*) text);
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	4619      	mov	r1, r3
 8000d42:	2002      	movs	r0, #2
 8000d44:	f002 f8da 	bl	8002efc <BSP_LCD_DisplayStringAtLine>
        sprintf(text,"d: x %d y %d            ",x0,y0);
 8000d48:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	@ 0x70
 8000d4c:	f9b7 306e 	ldrsh.w	r3, [r7, #110]	@ 0x6e
 8000d50:	f107 0008 	add.w	r0, r7, #8
 8000d54:	4909      	ldr	r1, [pc, #36]	@ (8000d7c <deplacement_fonction+0x114>)
 8000d56:	f012 f971 	bl	801303c <siprintf>
        BSP_LCD_DisplayStringAtLine(3, (uint8_t*) text);
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4619      	mov	r1, r3
 8000d60:	2003      	movs	r0, #3
 8000d62:	f002 f8cb 	bl	8002efc <BSP_LCD_DisplayStringAtLine>
    }
    osDelay(50);
 8000d66:	2032      	movs	r0, #50	@ 0x32
 8000d68:	f00f fadb 	bl	8010322 <osDelay>
    BSP_TS_GetState(&TS_State);
 8000d6c:	e78c      	b.n	8000c88 <deplacement_fonction+0x20>
 8000d6e:	bf00      	nop
 8000d70:	08013ab4 	.word	0x08013ab4
 8000d74:	08013acc 	.word	0x08013acc
 8000d78:	08013ae4 	.word	0x08013ae4
 8000d7c:	08013b00 	.word	0x08013b00

08000d80 <Display_fonction>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Display_fonction */
void Display_fonction(void const * argument)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Display_fonction */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 1);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000d8e:	4809      	ldr	r0, [pc, #36]	@ (8000db4 <Display_fonction+0x34>)
 8000d90:	f005 fc28 	bl	80065e4 <HAL_GPIO_WritePin>
		osDelay(500);
 8000d94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d98:	f00f fac3 	bl	8010322 <osDelay>
		HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000da2:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <Display_fonction+0x34>)
 8000da4:	f005 fc1e 	bl	80065e4 <HAL_GPIO_WritePin>
		osDelay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000dac:	f00f fab9 	bl	8010322 <osDelay>
		HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, 1);
 8000db0:	bf00      	nop
 8000db2:	e7e9      	b.n	8000d88 <Display_fonction+0x8>
 8000db4:	40021c00 	.word	0x40021c00

08000db8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000dc2:	20c8      	movs	r0, #200	@ 0xc8
 8000dc4:	f001 fdf0 	bl	80029a8 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000dc8:	f000 fa7a 	bl	80012c0 <ft5336_I2C_InitializeIfRequired>
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000e00:	f000 fa5e 	bl	80012c0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000e04:	2300      	movs	r3, #0
 8000e06:	73fb      	strb	r3, [r7, #15]
 8000e08:	e010      	b.n	8000e2c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	21a8      	movs	r1, #168	@ 0xa8
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fdab 	bl	800296c <TS_IO_Read>
 8000e16:	4603      	mov	r3, r0
 8000e18:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000e1a:	7b7b      	ldrb	r3, [r7, #13]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b51      	cmp	r3, #81	@ 0x51
 8000e20:	d101      	bne.n	8000e26 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	73fb      	strb	r3, [r7, #15]
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d802      	bhi.n	8000e38 <ft5336_ReadID+0x4e>
 8000e32:	7bbb      	ldrb	r3, [r7, #14]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d0e8      	beq.n	8000e0a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000e38:	7b7b      	ldrb	r3, [r7, #13]
 8000e3a:	b2db      	uxtb	r3, r3
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000e4e:	88fb      	ldrh	r3, [r7, #6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f000 fa45 	bl	80012e0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f000 f933 	bl	80010c4 <ft5336_TS_DisableIT>
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	2102      	movs	r1, #2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 fd75 	bl	800296c <TS_IO_Read>
 8000e82:	4603      	mov	r3, r0
 8000e84:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000e86:	7bfb      	ldrb	r3, [r7, #15]
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	f003 030f 	and.w	r3, r3, #15
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b05      	cmp	r3, #5
 8000e98:	d901      	bls.n	8000e9e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000e9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b05      	ldr	r3, [pc, #20]	@ (8000eb8 <ft5336_TS_DetectTouch+0x50>)
 8000ea4:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000ea6:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <ft5336_TS_DetectTouch+0x50>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000eac:	7bfb      	ldrb	r3, [r7, #15]
 8000eae:	b2db      	uxtb	r3, r3
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	2000047c 	.word	0x2000047c

08000ebc <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
 8000ec8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000ede:	4b6d      	ldr	r3, [pc, #436]	@ (8001094 <ft5336_TS_GetXY+0x1d8>)
 8000ee0:	789a      	ldrb	r2, [r3, #2]
 8000ee2:	4b6c      	ldr	r3, [pc, #432]	@ (8001094 <ft5336_TS_GetXY+0x1d8>)
 8000ee4:	785b      	ldrb	r3, [r3, #1]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	f080 80cf 	bcs.w	800108a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000eec:	4b69      	ldr	r3, [pc, #420]	@ (8001094 <ft5336_TS_GetXY+0x1d8>)
 8000eee:	789b      	ldrb	r3, [r3, #2]
 8000ef0:	2b09      	cmp	r3, #9
 8000ef2:	d871      	bhi.n	8000fd8 <ft5336_TS_GetXY+0x11c>
 8000ef4:	a201      	add	r2, pc, #4	@ (adr r2, 8000efc <ft5336_TS_GetXY+0x40>)
 8000ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efa:	bf00      	nop
 8000efc:	08000f25 	.word	0x08000f25
 8000f00:	08000f37 	.word	0x08000f37
 8000f04:	08000f49 	.word	0x08000f49
 8000f08:	08000f5b 	.word	0x08000f5b
 8000f0c:	08000f6d 	.word	0x08000f6d
 8000f10:	08000f7f 	.word	0x08000f7f
 8000f14:	08000f91 	.word	0x08000f91
 8000f18:	08000fa3 	.word	0x08000fa3
 8000f1c:	08000fb5 	.word	0x08000fb5
 8000f20:	08000fc7 	.word	0x08000fc7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000f24:	2304      	movs	r3, #4
 8000f26:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000f30:	2305      	movs	r3, #5
 8000f32:	753b      	strb	r3, [r7, #20]
      break;
 8000f34:	e051      	b.n	8000fda <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000f36:	230a      	movs	r3, #10
 8000f38:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000f3a:	2309      	movs	r3, #9
 8000f3c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000f3e:	230c      	movs	r3, #12
 8000f40:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000f42:	230b      	movs	r3, #11
 8000f44:	753b      	strb	r3, [r7, #20]
      break;
 8000f46:	e048      	b.n	8000fda <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000f50:	2312      	movs	r3, #18
 8000f52:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000f54:	2311      	movs	r3, #17
 8000f56:	753b      	strb	r3, [r7, #20]
      break;
 8000f58:	e03f      	b.n	8000fda <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000f5a:	2316      	movs	r3, #22
 8000f5c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000f5e:	2315      	movs	r3, #21
 8000f60:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000f62:	2318      	movs	r3, #24
 8000f64:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000f66:	2317      	movs	r3, #23
 8000f68:	753b      	strb	r3, [r7, #20]
      break;
 8000f6a:	e036      	b.n	8000fda <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000f6c:	231c      	movs	r3, #28
 8000f6e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000f70:	231b      	movs	r3, #27
 8000f72:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000f74:	231e      	movs	r3, #30
 8000f76:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000f78:	231d      	movs	r3, #29
 8000f7a:	753b      	strb	r3, [r7, #20]
      break;
 8000f7c:	e02d      	b.n	8000fda <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000f7e:	2322      	movs	r3, #34	@ 0x22
 8000f80:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000f82:	2321      	movs	r3, #33	@ 0x21
 8000f84:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000f86:	2324      	movs	r3, #36	@ 0x24
 8000f88:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000f8a:	2323      	movs	r3, #35	@ 0x23
 8000f8c:	753b      	strb	r3, [r7, #20]
      break;
 8000f8e:	e024      	b.n	8000fda <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000f90:	2328      	movs	r3, #40	@ 0x28
 8000f92:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000f94:	2327      	movs	r3, #39	@ 0x27
 8000f96:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000f98:	232a      	movs	r3, #42	@ 0x2a
 8000f9a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000f9c:	2329      	movs	r3, #41	@ 0x29
 8000f9e:	753b      	strb	r3, [r7, #20]
      break;
 8000fa0:	e01b      	b.n	8000fda <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000fa2:	232e      	movs	r3, #46	@ 0x2e
 8000fa4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000fa6:	232d      	movs	r3, #45	@ 0x2d
 8000fa8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000faa:	2330      	movs	r3, #48	@ 0x30
 8000fac:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000fae:	232f      	movs	r3, #47	@ 0x2f
 8000fb0:	753b      	strb	r3, [r7, #20]
      break;
 8000fb2:	e012      	b.n	8000fda <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000fb4:	2334      	movs	r3, #52	@ 0x34
 8000fb6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000fb8:	2333      	movs	r3, #51	@ 0x33
 8000fba:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000fbc:	2336      	movs	r3, #54	@ 0x36
 8000fbe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000fc0:	2335      	movs	r3, #53	@ 0x35
 8000fc2:	753b      	strb	r3, [r7, #20]
      break;
 8000fc4:	e009      	b.n	8000fda <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000fc6:	233a      	movs	r3, #58	@ 0x3a
 8000fc8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000fca:	2339      	movs	r3, #57	@ 0x39
 8000fcc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000fce:	233c      	movs	r3, #60	@ 0x3c
 8000fd0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000fd2:	233b      	movs	r3, #59	@ 0x3b
 8000fd4:	753b      	strb	r3, [r7, #20]
      break;
 8000fd6:	e000      	b.n	8000fda <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000fd8:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	7dfa      	ldrb	r2, [r7, #23]
 8000fe0:	4611      	mov	r1, r2
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f001 fcc2 	bl	800296c <TS_IO_Read>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000fec:	7cfb      	ldrb	r3, [r7, #19]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4b29      	ldr	r3, [pc, #164]	@ (8001098 <ft5336_TS_GetXY+0x1dc>)
 8000ff4:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000ff6:	89fb      	ldrh	r3, [r7, #14]
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	7dba      	ldrb	r2, [r7, #22]
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4618      	mov	r0, r3
 8001000:	f001 fcb4 	bl	800296c <TS_IO_Read>
 8001004:	4603      	mov	r3, r0
 8001006:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8001008:	7cfb      	ldrb	r3, [r7, #19]
 800100a:	b2db      	uxtb	r3, r3
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001012:	b21a      	sxth	r2, r3
 8001014:	4b20      	ldr	r3, [pc, #128]	@ (8001098 <ft5336_TS_GetXY+0x1dc>)
 8001016:	881b      	ldrh	r3, [r3, #0]
 8001018:	b21b      	sxth	r3, r3
 800101a:	4313      	orrs	r3, r2
 800101c:	b21b      	sxth	r3, r3
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b1d      	ldr	r3, [pc, #116]	@ (8001098 <ft5336_TS_GetXY+0x1dc>)
 8001022:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <ft5336_TS_GetXY+0x1dc>)
 8001026:	881a      	ldrh	r2, [r3, #0]
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800102c:	89fb      	ldrh	r3, [r7, #14]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	7d7a      	ldrb	r2, [r7, #21]
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f001 fc99 	bl	800296c <TS_IO_Read>
 800103a:	4603      	mov	r3, r0
 800103c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800103e:	7cfb      	ldrb	r3, [r7, #19]
 8001040:	b2db      	uxtb	r3, r3
 8001042:	461a      	mov	r2, r3
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <ft5336_TS_GetXY+0x1dc>)
 8001046:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8001048:	89fb      	ldrh	r3, [r7, #14]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	7d3a      	ldrb	r2, [r7, #20]
 800104e:	4611      	mov	r1, r2
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fc8b 	bl	800296c <TS_IO_Read>
 8001056:	4603      	mov	r3, r0
 8001058:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800105a:	7cfb      	ldrb	r3, [r7, #19]
 800105c:	b2db      	uxtb	r3, r3
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001064:	b21a      	sxth	r2, r3
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <ft5336_TS_GetXY+0x1dc>)
 8001068:	881b      	ldrh	r3, [r3, #0]
 800106a:	b21b      	sxth	r3, r3
 800106c:	4313      	orrs	r3, r2
 800106e:	b21b      	sxth	r3, r3
 8001070:	b29a      	uxth	r2, r3
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <ft5336_TS_GetXY+0x1dc>)
 8001074:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8001076:	4b08      	ldr	r3, [pc, #32]	@ (8001098 <ft5336_TS_GetXY+0x1dc>)
 8001078:	881a      	ldrh	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800107e:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <ft5336_TS_GetXY+0x1d8>)
 8001080:	789b      	ldrb	r3, [r3, #2]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b03      	ldr	r3, [pc, #12]	@ (8001094 <ft5336_TS_GetXY+0x1d8>)
 8001088:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800108a:	bf00      	nop
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	2000047c 	.word	0x2000047c
 8001098:	20000480 	.word	0x20000480

0800109c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80010aa:	2301      	movs	r3, #1
 80010ac:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80010ae:	88fb      	ldrh	r3, [r7, #6]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	21a4      	movs	r1, #164	@ 0xa4
 80010b6:	4618      	mov	r0, r3
 80010b8:	f001 fc3e 	bl	8002938 <TS_IO_Write>
}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80010d6:	88fb      	ldrh	r3, [r7, #6]
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	21a4      	movs	r1, #164	@ 0xa4
 80010de:	4618      	mov	r0, r3
 80010e0:	f001 fc2a 	bl	8002938 <TS_IO_Write>
}
 80010e4:	bf00      	nop
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80010f6:	2300      	movs	r3, #0
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr

0800111a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	6039      	str	r1, [r7, #0]
 8001124:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800112a:	88fb      	ldrh	r3, [r7, #6]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2101      	movs	r1, #1
 8001130:	4618      	mov	r0, r3
 8001132:	f001 fc1b 	bl	800296c <TS_IO_Read>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
 800113c:	b2db      	uxtb	r3, r3
 800113e:	461a      	mov	r2, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	601a      	str	r2, [r3, #0]
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60b9      	str	r1, [r7, #8]
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	603b      	str	r3, [r7, #0]
 8001158:	4603      	mov	r3, r0
 800115a:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8001160:	2300      	movs	r3, #0
 8001162:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800116c:	4b4d      	ldr	r3, [pc, #308]	@ (80012a4 <ft5336_TS_GetTouchInfo+0x158>)
 800116e:	785b      	ldrb	r3, [r3, #1]
 8001170:	461a      	mov	r2, r3
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	4293      	cmp	r3, r2
 8001176:	f080 8090 	bcs.w	800129a <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2b09      	cmp	r3, #9
 800117e:	d85d      	bhi.n	800123c <ft5336_TS_GetTouchInfo+0xf0>
 8001180:	a201      	add	r2, pc, #4	@ (adr r2, 8001188 <ft5336_TS_GetTouchInfo+0x3c>)
 8001182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001186:	bf00      	nop
 8001188:	080011b1 	.word	0x080011b1
 800118c:	080011bf 	.word	0x080011bf
 8001190:	080011cd 	.word	0x080011cd
 8001194:	080011db 	.word	0x080011db
 8001198:	080011e9 	.word	0x080011e9
 800119c:	080011f7 	.word	0x080011f7
 80011a0:	08001205 	.word	0x08001205
 80011a4:	08001213 	.word	0x08001213
 80011a8:	08001221 	.word	0x08001221
 80011ac:	0800122f 	.word	0x0800122f
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80011b0:	2303      	movs	r3, #3
 80011b2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80011b4:	2307      	movs	r3, #7
 80011b6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80011b8:	2308      	movs	r3, #8
 80011ba:	757b      	strb	r3, [r7, #21]
      break;
 80011bc:	e03f      	b.n	800123e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80011be:	2309      	movs	r3, #9
 80011c0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80011c2:	230d      	movs	r3, #13
 80011c4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80011c6:	230e      	movs	r3, #14
 80011c8:	757b      	strb	r3, [r7, #21]
      break;
 80011ca:	e038      	b.n	800123e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80011cc:	230f      	movs	r3, #15
 80011ce:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80011d0:	2313      	movs	r3, #19
 80011d2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80011d4:	2314      	movs	r3, #20
 80011d6:	757b      	strb	r3, [r7, #21]
      break;
 80011d8:	e031      	b.n	800123e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80011da:	2315      	movs	r3, #21
 80011dc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80011de:	2319      	movs	r3, #25
 80011e0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80011e2:	231a      	movs	r3, #26
 80011e4:	757b      	strb	r3, [r7, #21]
      break;
 80011e6:	e02a      	b.n	800123e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80011e8:	231b      	movs	r3, #27
 80011ea:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80011ec:	231f      	movs	r3, #31
 80011ee:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80011f0:	2320      	movs	r3, #32
 80011f2:	757b      	strb	r3, [r7, #21]
      break;
 80011f4:	e023      	b.n	800123e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80011f6:	2321      	movs	r3, #33	@ 0x21
 80011f8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80011fa:	2325      	movs	r3, #37	@ 0x25
 80011fc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80011fe:	2326      	movs	r3, #38	@ 0x26
 8001200:	757b      	strb	r3, [r7, #21]
      break;
 8001202:	e01c      	b.n	800123e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8001204:	2327      	movs	r3, #39	@ 0x27
 8001206:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8001208:	232b      	movs	r3, #43	@ 0x2b
 800120a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 800120c:	232c      	movs	r3, #44	@ 0x2c
 800120e:	757b      	strb	r3, [r7, #21]
      break;
 8001210:	e015      	b.n	800123e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8001212:	232d      	movs	r3, #45	@ 0x2d
 8001214:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8001216:	2331      	movs	r3, #49	@ 0x31
 8001218:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 800121a:	2332      	movs	r3, #50	@ 0x32
 800121c:	757b      	strb	r3, [r7, #21]
      break;
 800121e:	e00e      	b.n	800123e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8001220:	2333      	movs	r3, #51	@ 0x33
 8001222:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8001224:	2337      	movs	r3, #55	@ 0x37
 8001226:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8001228:	2338      	movs	r3, #56	@ 0x38
 800122a:	757b      	strb	r3, [r7, #21]
      break;
 800122c:	e007      	b.n	800123e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 800122e:	2339      	movs	r3, #57	@ 0x39
 8001230:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8001232:	233d      	movs	r3, #61	@ 0x3d
 8001234:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8001236:	233e      	movs	r3, #62	@ 0x3e
 8001238:	757b      	strb	r3, [r7, #21]
      break;
 800123a:	e000      	b.n	800123e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 800123c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 800123e:	89fb      	ldrh	r3, [r7, #14]
 8001240:	b2db      	uxtb	r3, r3
 8001242:	7dfa      	ldrb	r2, [r7, #23]
 8001244:	4611      	mov	r1, r2
 8001246:	4618      	mov	r0, r3
 8001248:	f001 fb90 	bl	800296c <TS_IO_Read>
 800124c:	4603      	mov	r3, r0
 800124e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8001250:	7d3b      	ldrb	r3, [r7, #20]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	119b      	asrs	r3, r3, #6
 8001256:	f003 0203 	and.w	r2, r3, #3
 800125a:	6a3b      	ldr	r3, [r7, #32]
 800125c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 800125e:	89fb      	ldrh	r3, [r7, #14]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	7dba      	ldrb	r2, [r7, #22]
 8001264:	4611      	mov	r1, r2
 8001266:	4618      	mov	r0, r3
 8001268:	f001 fb80 	bl	800296c <TS_IO_Read>
 800126c:	4603      	mov	r3, r0
 800126e:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001270:	7d3b      	ldrb	r3, [r7, #20]
 8001272:	b2db      	uxtb	r3, r3
 8001274:	461a      	mov	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800127a:	89fb      	ldrh	r3, [r7, #14]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	7d7a      	ldrb	r2, [r7, #21]
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fb72 	bl	800296c <TS_IO_Read>
 8001288:	4603      	mov	r3, r0
 800128a:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800128c:	7d3b      	ldrb	r3, [r7, #20]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	111b      	asrs	r3, r3, #4
 8001292:	f003 0204 	and.w	r2, r3, #4
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800129a:	bf00      	nop
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	2000047c 	.word	0x2000047c

080012a8 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <ft5336_Get_I2C_InitializedStatus+0x14>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000047c 	.word	0x2000047c

080012c0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80012c4:	f7ff fff0 	bl	80012a8 <ft5336_Get_I2C_InitializedStatus>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d104      	bne.n	80012d8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80012ce:	f001 fb29 	bl	8002924 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80012d2:	4b02      	ldr	r3, [pc, #8]	@ (80012dc <ft5336_I2C_InitializeIfRequired+0x1c>)
 80012d4:	2201      	movs	r2, #1
 80012d6:	701a      	strb	r2, [r3, #0]
  }
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	2000047c 	.word	0x2000047c

080012e0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b090      	sub	sp, #64	@ 0x40
 8001300:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001302:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
 8001310:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001312:	4baf      	ldr	r3, [pc, #700]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	4aae      	ldr	r2, [pc, #696]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001318:	f043 0310 	orr.w	r3, r3, #16
 800131c:	6313      	str	r3, [r2, #48]	@ 0x30
 800131e:	4bac      	ldr	r3, [pc, #688]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	f003 0310 	and.w	r3, r3, #16
 8001326:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800132a:	4ba9      	ldr	r3, [pc, #676]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4aa8      	ldr	r2, [pc, #672]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001330:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4ba6      	ldr	r3, [pc, #664]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800133e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4ba3      	ldr	r3, [pc, #652]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4aa2      	ldr	r2, [pc, #648]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4ba0      	ldr	r3, [pc, #640]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	623b      	str	r3, [r7, #32]
 8001358:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135a:	4b9d      	ldr	r3, [pc, #628]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a9c      	ldr	r2, [pc, #624]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b9a      	ldr	r3, [pc, #616]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	61fb      	str	r3, [r7, #28]
 8001370:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001372:	4b97      	ldr	r3, [pc, #604]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a96      	ldr	r2, [pc, #600]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001378:	f043 0304 	orr.w	r3, r3, #4
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b94      	ldr	r3, [pc, #592]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	61bb      	str	r3, [r7, #24]
 8001388:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	4b91      	ldr	r3, [pc, #580]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a90      	ldr	r2, [pc, #576]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b8e      	ldr	r3, [pc, #568]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013a2:	4b8b      	ldr	r3, [pc, #556]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	4a8a      	ldr	r2, [pc, #552]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 80013a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ae:	4b88      	ldr	r3, [pc, #544]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013ba:	4b85      	ldr	r3, [pc, #532]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	4a84      	ldr	r2, [pc, #528]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 80013c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c6:	4b82      	ldr	r3, [pc, #520]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80013d2:	4b7f      	ldr	r3, [pc, #508]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a7e      	ldr	r2, [pc, #504]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 80013d8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b7c      	ldr	r3, [pc, #496]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ea:	4b79      	ldr	r3, [pc, #484]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a78      	ldr	r2, [pc, #480]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 80013f0:	f043 0320 	orr.w	r3, r3, #32
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b76      	ldr	r3, [pc, #472]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0320 	and.w	r3, r3, #32
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001402:	4b73      	ldr	r3, [pc, #460]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	4a72      	ldr	r2, [pc, #456]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800140c:	6313      	str	r3, [r2, #48]	@ 0x30
 800140e:	4b70      	ldr	r3, [pc, #448]	@ (80015d0 <MX_GPIO_Init+0x2d4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001412:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2160      	movs	r1, #96	@ 0x60
 800141e:	486d      	ldr	r0, [pc, #436]	@ (80015d4 <MX_GPIO_Init+0x2d8>)
 8001420:	f005 f8e0 	bl	80065e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001424:	2201      	movs	r2, #1
 8001426:	2120      	movs	r1, #32
 8001428:	486b      	ldr	r0, [pc, #428]	@ (80015d8 <MX_GPIO_Init+0x2dc>)
 800142a:	f005 f8db 	bl	80065e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	2108      	movs	r1, #8
 8001432:	4869      	ldr	r0, [pc, #420]	@ (80015d8 <MX_GPIO_Init+0x2dc>)
 8001434:	f005 f8d6 	bl	80065e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001438:	2201      	movs	r2, #1
 800143a:	2108      	movs	r1, #8
 800143c:	4867      	ldr	r0, [pc, #412]	@ (80015dc <MX_GPIO_Init+0x2e0>)
 800143e:	f005 f8d1 	bl	80065e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001442:	2201      	movs	r2, #1
 8001444:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001448:	4865      	ldr	r0, [pc, #404]	@ (80015e0 <MX_GPIO_Init+0x2e4>)
 800144a:	f005 f8cb 	bl	80065e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800144e:	2200      	movs	r2, #0
 8001450:	f645 6140 	movw	r1, #24128	@ 0x5e40
 8001454:	4863      	ldr	r0, [pc, #396]	@ (80015e4 <MX_GPIO_Init+0x2e8>)
 8001456:	f005 f8c5 	bl	80065e4 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	21c8      	movs	r1, #200	@ 0xc8
 800145e:	4862      	ldr	r0, [pc, #392]	@ (80015e8 <MX_GPIO_Init+0x2ec>)
 8001460:	f005 f8c0 	bl	80065e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001464:	2308      	movs	r3, #8
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001468:	2300      	movs	r3, #0
 800146a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001470:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001474:	4619      	mov	r1, r3
 8001476:	4857      	ldr	r0, [pc, #348]	@ (80015d4 <MX_GPIO_Init+0x2d8>)
 8001478:	f004 fde4 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800147c:	2304      	movs	r3, #4
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800148c:	2309      	movs	r3, #9
 800148e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001494:	4619      	mov	r1, r3
 8001496:	484f      	ldr	r0, [pc, #316]	@ (80015d4 <MX_GPIO_Init+0x2d8>)
 8001498:	f004 fdd4 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800149c:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 80014a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014aa:	2303      	movs	r3, #3
 80014ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014ae:	230b      	movs	r3, #11
 80014b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014b6:	4619      	mov	r1, r3
 80014b8:	484b      	ldr	r0, [pc, #300]	@ (80015e8 <MX_GPIO_Init+0x2ec>)
 80014ba:	f004 fdc3 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 80014be:	f643 0323 	movw	r3, #14371	@ 0x3823
 80014c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014cc:	2303      	movs	r3, #3
 80014ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014d0:	230a      	movs	r3, #10
 80014d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014d8:	4619      	mov	r1, r3
 80014da:	4844      	ldr	r0, [pc, #272]	@ (80015ec <MX_GPIO_Init+0x2f0>)
 80014dc:	f004 fdb2 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80014e0:	2380      	movs	r3, #128	@ 0x80
 80014e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ec:	2300      	movs	r3, #0
 80014ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80014f0:	2308      	movs	r3, #8
 80014f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80014f8:	4619      	mov	r1, r3
 80014fa:	4837      	ldr	r0, [pc, #220]	@ (80015d8 <MX_GPIO_Init+0x2dc>)
 80014fc:	f004 fda2 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 8001500:	f248 1340 	movw	r3, #33088	@ 0x8140
 8001504:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001506:	2300      	movs	r3, #0
 8001508:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001512:	4619      	mov	r1, r3
 8001514:	4836      	ldr	r0, [pc, #216]	@ (80015f0 <MX_GPIO_Init+0x2f4>)
 8001516:	f004 fd95 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 800151a:	2360      	movs	r3, #96	@ 0x60
 800151c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800152a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800152e:	4619      	mov	r1, r3
 8001530:	4828      	ldr	r0, [pc, #160]	@ (80015d4 <MX_GPIO_Init+0x2d8>)
 8001532:	f004 fd87 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8001536:	2340      	movs	r3, #64	@ 0x40
 8001538:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001546:	230a      	movs	r3, #10
 8001548:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 800154a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800154e:	4619      	mov	r1, r3
 8001550:	4826      	ldr	r0, [pc, #152]	@ (80015ec <MX_GPIO_Init+0x2f0>)
 8001552:	f004 fd77 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001556:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800155a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155c:	2300      	movs	r3, #0
 800155e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001564:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001568:	4619      	mov	r1, r3
 800156a:	4822      	ldr	r0, [pc, #136]	@ (80015f4 <MX_GPIO_Init+0x2f8>)
 800156c:	f004 fd6a 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001570:	2340      	movs	r3, #64	@ 0x40
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001574:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001578:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001582:	4619      	mov	r1, r3
 8001584:	4814      	ldr	r0, [pc, #80]	@ (80015d8 <MX_GPIO_Init+0x2dc>)
 8001586:	f004 fd5d 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 800158a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800158e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800159c:	230a      	movs	r3, #10
 800159e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015a4:	4619      	mov	r1, r3
 80015a6:	4812      	ldr	r0, [pc, #72]	@ (80015f0 <MX_GPIO_Init+0x2f4>)
 80015a8:	f004 fd4c 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80015ac:	23f0      	movs	r3, #240	@ 0xf0
 80015ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80015bc:	230a      	movs	r3, #10
 80015be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80015c4:	4619      	mov	r1, r3
 80015c6:	4806      	ldr	r0, [pc, #24]	@ (80015e0 <MX_GPIO_Init+0x2e4>)
 80015c8:	f004 fd3c 	bl	8006044 <HAL_GPIO_Init>
 80015cc:	e014      	b.n	80015f8 <MX_GPIO_Init+0x2fc>
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40021000 	.word	0x40021000
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	40022800 	.word	0x40022800
 80015e0:	40022000 	.word	0x40022000
 80015e4:	40021c00 	.word	0x40021c00
 80015e8:	40021800 	.word	0x40021800
 80015ec:	40020400 	.word	0x40020400
 80015f0:	40020000 	.word	0x40020000
 80015f4:	40022400 	.word	0x40022400

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80015f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fe:	2302      	movs	r3, #2
 8001600:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	2300      	movs	r3, #0
 8001608:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800160a:	230a      	movs	r3, #10
 800160c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001612:	4619      	mov	r1, r3
 8001614:	4880      	ldr	r0, [pc, #512]	@ (8001818 <MX_GPIO_Init+0x51c>)
 8001616:	f004 fd15 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 800161a:	2328      	movs	r3, #40	@ 0x28
 800161c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161e:	2301      	movs	r3, #1
 8001620:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001626:	2300      	movs	r3, #0
 8001628:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800162a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800162e:	4619      	mov	r1, r3
 8001630:	487a      	ldr	r0, [pc, #488]	@ (800181c <MX_GPIO_Init+0x520>)
 8001632:	f004 fd07 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001636:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001644:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001648:	4619      	mov	r1, r3
 800164a:	4875      	ldr	r0, [pc, #468]	@ (8001820 <MX_GPIO_Init+0x524>)
 800164c:	f004 fcfa 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001650:	2308      	movs	r3, #8
 8001652:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001654:	2301      	movs	r3, #1
 8001656:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165c:	2300      	movs	r3, #0
 800165e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001664:	4619      	mov	r1, r3
 8001666:	486f      	ldr	r0, [pc, #444]	@ (8001824 <MX_GPIO_Init+0x528>)
 8001668:	f004 fcec 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 800166c:	f44f 7301 	mov.w	r3, #516	@ 0x204
 8001670:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001672:	2300      	movs	r3, #0
 8001674:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800167a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800167e:	4619      	mov	r1, r3
 8001680:	4865      	ldr	r0, [pc, #404]	@ (8001818 <MX_GPIO_Init+0x51c>)
 8001682:	f004 fcdf 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001686:	2310      	movs	r3, #16
 8001688:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168a:	2300      	movs	r3, #0
 800168c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001692:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001696:	4619      	mov	r1, r3
 8001698:	4860      	ldr	r0, [pc, #384]	@ (800181c <MX_GPIO_Init+0x520>)
 800169a:	f004 fcd3 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 800169e:	f24a 0304 	movw	r3, #40964	@ 0xa004
 80016a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016ac:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016b0:	4619      	mov	r1, r3
 80016b2:	485d      	ldr	r0, [pc, #372]	@ (8001828 <MX_GPIO_Init+0x52c>)
 80016b4:	f004 fcc6 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 80016b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2301      	movs	r3, #1
 80016c0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c6:	2300      	movs	r3, #0
 80016c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 80016ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ce:	4619      	mov	r1, r3
 80016d0:	4856      	ldr	r0, [pc, #344]	@ (800182c <MX_GPIO_Init+0x530>)
 80016d2:	f004 fcb7 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80016d6:	f645 6340 	movw	r3, #24128	@ 0x5e40
 80016da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2300      	movs	r3, #0
 80016e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016e8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016ec:	4619      	mov	r1, r3
 80016ee:	484e      	ldr	r0, [pc, #312]	@ (8001828 <MX_GPIO_Init+0x52c>)
 80016f0:	f004 fca8 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80016f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80016fa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80016fe:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001704:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001708:	4619      	mov	r1, r3
 800170a:	4848      	ldr	r0, [pc, #288]	@ (800182c <MX_GPIO_Init+0x530>)
 800170c:	f004 fc9a 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001710:	2310      	movs	r3, #16
 8001712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001714:	2302      	movs	r3, #2
 8001716:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001720:	230a      	movs	r3, #10
 8001722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001724:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001728:	4619      	mov	r1, r3
 800172a:	483f      	ldr	r0, [pc, #252]	@ (8001828 <MX_GPIO_Init+0x52c>)
 800172c:	f004 fc8a 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001730:	23c8      	movs	r3, #200	@ 0xc8
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173c:	2300      	movs	r3, #0
 800173e:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001740:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001744:	4619      	mov	r1, r3
 8001746:	4834      	ldr	r0, [pc, #208]	@ (8001818 <MX_GPIO_Init+0x51c>)
 8001748:	f004 fc7c 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800174c:	2305      	movs	r3, #5
 800174e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800175c:	230a      	movs	r3, #10
 800175e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001760:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001764:	4619      	mov	r1, r3
 8001766:	482e      	ldr	r0, [pc, #184]	@ (8001820 <MX_GPIO_Init+0x524>)
 8001768:	f004 fc6c 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800176c:	2332      	movs	r3, #50	@ 0x32
 800176e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001770:	2302      	movs	r3, #2
 8001772:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001778:	2303      	movs	r3, #3
 800177a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800177c:	230b      	movs	r3, #11
 800177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001780:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001784:	4619      	mov	r1, r3
 8001786:	4826      	ldr	r0, [pc, #152]	@ (8001820 <MX_GPIO_Init+0x524>)
 8001788:	f004 fc5c 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800178c:	2304      	movs	r3, #4
 800178e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001790:	2302      	movs	r3, #2
 8001792:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001798:	2303      	movs	r3, #3
 800179a:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800179c:	2309      	movs	r3, #9
 800179e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017a4:	4619      	mov	r1, r3
 80017a6:	4822      	ldr	r0, [pc, #136]	@ (8001830 <MX_GPIO_Init+0x534>)
 80017a8:	f004 fc4c 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 80017ac:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017be:	2309      	movs	r3, #9
 80017c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017c6:	4619      	mov	r1, r3
 80017c8:	4814      	ldr	r0, [pc, #80]	@ (800181c <MX_GPIO_Init+0x520>)
 80017ca:	f004 fc3b 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80017ce:	2386      	movs	r3, #134	@ 0x86
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d2:	2302      	movs	r3, #2
 80017d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d6:	2300      	movs	r3, #0
 80017d8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017da:	2303      	movs	r3, #3
 80017dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017de:	230b      	movs	r3, #11
 80017e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017e6:	4619      	mov	r1, r3
 80017e8:	4812      	ldr	r0, [pc, #72]	@ (8001834 <MX_GPIO_Init+0x538>)
 80017ea:	f004 fc2b 	bl	8006044 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80017ee:	2328      	movs	r3, #40	@ 0x28
 80017f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	637b      	str	r3, [r7, #52]	@ 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80017fe:	230a      	movs	r3, #10
 8001800:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001806:	4619      	mov	r1, r3
 8001808:	480a      	ldr	r0, [pc, #40]	@ (8001834 <MX_GPIO_Init+0x538>)
 800180a:	f004 fc1b 	bl	8006044 <HAL_GPIO_Init>

}
 800180e:	bf00      	nop
 8001810:	3740      	adds	r7, #64	@ 0x40
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40021800 	.word	0x40021800
 800181c:	40020c00 	.word	0x40020c00
 8001820:	40020800 	.word	0x40020800
 8001824:	40022800 	.word	0x40022800
 8001828:	40021c00 	.word	0x40021c00
 800182c:	40022000 	.word	0x40022000
 8001830:	40020400 	.word	0x40020400
 8001834:	40020000 	.word	0x40020000

08001838 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <MX_I2C1_Init+0x74>)
 800183e:	4a1c      	ldr	r2, [pc, #112]	@ (80018b0 <MX_I2C1_Init+0x78>)
 8001840:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001842:	4b1a      	ldr	r3, [pc, #104]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001844:	4a1b      	ldr	r2, [pc, #108]	@ (80018b4 <MX_I2C1_Init+0x7c>)
 8001846:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001848:	4b18      	ldr	r3, [pc, #96]	@ (80018ac <MX_I2C1_Init+0x74>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184e:	4b17      	ldr	r3, [pc, #92]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001850:	2201      	movs	r2, #1
 8001852:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001854:	4b15      	ldr	r3, [pc, #84]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800185a:	4b14      	ldr	r3, [pc, #80]	@ (80018ac <MX_I2C1_Init+0x74>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001862:	2200      	movs	r2, #0
 8001864:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001866:	4b11      	ldr	r3, [pc, #68]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001868:	2200      	movs	r2, #0
 800186a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800186c:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <MX_I2C1_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001872:	480e      	ldr	r0, [pc, #56]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001874:	f004 fed0 	bl	8006618 <HAL_I2C_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800187e:	f000 fc81 	bl	8002184 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001882:	2100      	movs	r1, #0
 8001884:	4809      	ldr	r0, [pc, #36]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001886:	f005 fc5d 	bl	8007144 <HAL_I2CEx_ConfigAnalogFilter>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001890:	f000 fc78 	bl	8002184 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001894:	2100      	movs	r1, #0
 8001896:	4805      	ldr	r0, [pc, #20]	@ (80018ac <MX_I2C1_Init+0x74>)
 8001898:	f005 fc9f 	bl	80071da <HAL_I2CEx_ConfigDigitalFilter>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80018a2:	f000 fc6f 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000484 	.word	0x20000484
 80018b0:	40005400 	.word	0x40005400
 80018b4:	00c0eaff 	.word	0x00c0eaff

080018b8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	@ (800192c <MX_I2C3_Init+0x74>)
 80018be:	4a1c      	ldr	r2, [pc, #112]	@ (8001930 <MX_I2C3_Init+0x78>)
 80018c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80018c2:	4b1a      	ldr	r3, [pc, #104]	@ (800192c <MX_I2C3_Init+0x74>)
 80018c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001934 <MX_I2C3_Init+0x7c>)
 80018c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80018c8:	4b18      	ldr	r3, [pc, #96]	@ (800192c <MX_I2C3_Init+0x74>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018ce:	4b17      	ldr	r3, [pc, #92]	@ (800192c <MX_I2C3_Init+0x74>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d4:	4b15      	ldr	r3, [pc, #84]	@ (800192c <MX_I2C3_Init+0x74>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80018da:	4b14      	ldr	r3, [pc, #80]	@ (800192c <MX_I2C3_Init+0x74>)
 80018dc:	2200      	movs	r2, #0
 80018de:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <MX_I2C3_Init+0x74>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e6:	4b11      	ldr	r3, [pc, #68]	@ (800192c <MX_I2C3_Init+0x74>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	@ (800192c <MX_I2C3_Init+0x74>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80018f2:	480e      	ldr	r0, [pc, #56]	@ (800192c <MX_I2C3_Init+0x74>)
 80018f4:	f004 fe90 	bl	8006618 <HAL_I2C_Init>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80018fe:	f000 fc41 	bl	8002184 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001902:	2100      	movs	r1, #0
 8001904:	4809      	ldr	r0, [pc, #36]	@ (800192c <MX_I2C3_Init+0x74>)
 8001906:	f005 fc1d 	bl	8007144 <HAL_I2CEx_ConfigAnalogFilter>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001910:	f000 fc38 	bl	8002184 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001914:	2100      	movs	r1, #0
 8001916:	4805      	ldr	r0, [pc, #20]	@ (800192c <MX_I2C3_Init+0x74>)
 8001918:	f005 fc5f 	bl	80071da <HAL_I2CEx_ConfigDigitalFilter>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001922:	f000 fc2f 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200004d8 	.word	0x200004d8
 8001930:	40005c00 	.word	0x40005c00
 8001934:	00c0eaff 	.word	0x00c0eaff

08001938 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b0ac      	sub	sp, #176	@ 0xb0
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001950:	f107 0318 	add.w	r3, r7, #24
 8001954:	2284      	movs	r2, #132	@ 0x84
 8001956:	2100      	movs	r1, #0
 8001958:	4618      	mov	r0, r3
 800195a:	f011 fb8f 	bl	801307c <memset>
  if(i2cHandle->Instance==I2C1)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a44      	ldr	r2, [pc, #272]	@ (8001a74 <HAL_I2C_MspInit+0x13c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d13d      	bne.n	80019e4 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001968:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800196c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800196e:	2300      	movs	r3, #0
 8001970:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001972:	f107 0318 	add.w	r3, r7, #24
 8001976:	4618      	mov	r0, r3
 8001978:	f006 fd10 	bl	800839c <HAL_RCCEx_PeriphCLKConfig>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001982:	f000 fbff 	bl	8002184 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b3c      	ldr	r3, [pc, #240]	@ (8001a78 <HAL_I2C_MspInit+0x140>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	4a3b      	ldr	r2, [pc, #236]	@ (8001a78 <HAL_I2C_MspInit+0x140>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	@ 0x30
 8001992:	4b39      	ldr	r3, [pc, #228]	@ (8001a78 <HAL_I2C_MspInit+0x140>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800199e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80019a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019a6:	2312      	movs	r3, #18
 80019a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019b8:	2304      	movs	r3, #4
 80019ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80019c2:	4619      	mov	r1, r3
 80019c4:	482d      	ldr	r0, [pc, #180]	@ (8001a7c <HAL_I2C_MspInit+0x144>)
 80019c6:	f004 fb3d 	bl	8006044 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <HAL_I2C_MspInit+0x140>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001a78 <HAL_I2C_MspInit+0x140>)
 80019d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80019d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d6:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <HAL_I2C_MspInit+0x140>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019de:	613b      	str	r3, [r7, #16]
 80019e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80019e2:	e042      	b.n	8001a6a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a25      	ldr	r2, [pc, #148]	@ (8001a80 <HAL_I2C_MspInit+0x148>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d13d      	bne.n	8001a6a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80019ee:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019fa:	f107 0318 	add.w	r3, r7, #24
 80019fe:	4618      	mov	r0, r3
 8001a00:	f006 fccc 	bl	800839c <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 8001a0a:	f000 fbbb 	bl	8002184 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <HAL_I2C_MspInit+0x140>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a19      	ldr	r2, [pc, #100]	@ (8001a78 <HAL_I2C_MspInit+0x140>)
 8001a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b17      	ldr	r3, [pc, #92]	@ (8001a78 <HAL_I2C_MspInit+0x140>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8001a26:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a2a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2e:	2312      	movs	r3, #18
 8001a30:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a34:	2301      	movs	r3, #1
 8001a36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a40:	2304      	movs	r3, #4
 8001a42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a46:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480d      	ldr	r0, [pc, #52]	@ (8001a84 <HAL_I2C_MspInit+0x14c>)
 8001a4e:	f004 faf9 	bl	8006044 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <HAL_I2C_MspInit+0x140>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	4a08      	ldr	r2, [pc, #32]	@ (8001a78 <HAL_I2C_MspInit+0x140>)
 8001a58:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_I2C_MspInit+0x140>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
}
 8001a6a:	bf00      	nop
 8001a6c:	37b0      	adds	r7, #176	@ 0xb0
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40005400 	.word	0x40005400
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40005c00 	.word	0x40005c00
 8001a84:	40021c00 	.word	0x40021c00

08001a88 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a15      	ldr	r2, [pc, #84]	@ (8001aec <HAL_I2C_MspDeInit+0x64>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d110      	bne.n	8001abc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001a9a:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <HAL_I2C_MspDeInit+0x68>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a14      	ldr	r2, [pc, #80]	@ (8001af0 <HAL_I2C_MspDeInit+0x68>)
 8001aa0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8001aa6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001aaa:	4812      	ldr	r0, [pc, #72]	@ (8001af4 <HAL_I2C_MspDeInit+0x6c>)
 8001aac:	f004 fc76 	bl	800639c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001ab0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ab4:	480f      	ldr	r0, [pc, #60]	@ (8001af4 <HAL_I2C_MspDeInit+0x6c>)
 8001ab6:	f004 fc71 	bl	800639c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 8001aba:	e013      	b.n	8001ae4 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8001af8 <HAL_I2C_MspDeInit+0x70>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d10e      	bne.n	8001ae4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8001af0 <HAL_I2C_MspDeInit+0x68>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	4a09      	ldr	r2, [pc, #36]	@ (8001af0 <HAL_I2C_MspDeInit+0x68>)
 8001acc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001ad0:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8001ad2:	2180      	movs	r1, #128	@ 0x80
 8001ad4:	4809      	ldr	r0, [pc, #36]	@ (8001afc <HAL_I2C_MspDeInit+0x74>)
 8001ad6:	f004 fc61 	bl	800639c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8001ada:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ade:	4807      	ldr	r0, [pc, #28]	@ (8001afc <HAL_I2C_MspDeInit+0x74>)
 8001ae0:	f004 fc5c 	bl	800639c <HAL_GPIO_DeInit>
}
 8001ae4:	bf00      	nop
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40005400 	.word	0x40005400
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40020400 	.word	0x40020400
 8001af8:	40005c00 	.word	0x40005c00
 8001afc:	40021c00 	.word	0x40021c00

08001b00 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b08e      	sub	sp, #56	@ 0x38
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001b06:	1d3b      	adds	r3, r7, #4
 8001b08:	2234      	movs	r2, #52	@ 0x34
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f011 fab5 	bl	801307c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001b12:	4b3a      	ldr	r3, [pc, #232]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b14:	4a3a      	ldr	r2, [pc, #232]	@ (8001c00 <MX_LTDC_Init+0x100>)
 8001b16:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001b18:	4b38      	ldr	r3, [pc, #224]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001b1e:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001b24:	4b35      	ldr	r3, [pc, #212]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001b2a:	4b34      	ldr	r3, [pc, #208]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001b30:	4b32      	ldr	r3, [pc, #200]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b32:	2228      	movs	r2, #40	@ 0x28
 8001b34:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001b36:	4b31      	ldr	r3, [pc, #196]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b38:	2209      	movs	r2, #9
 8001b3a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001b3c:	4b2f      	ldr	r3, [pc, #188]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b3e:	2235      	movs	r2, #53	@ 0x35
 8001b40:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001b42:	4b2e      	ldr	r3, [pc, #184]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b44:	220b      	movs	r2, #11
 8001b46:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001b48:	4b2c      	ldr	r3, [pc, #176]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b4a:	f240 2215 	movw	r2, #533	@ 0x215
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001b50:	4b2a      	ldr	r3, [pc, #168]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b52:	f240 121b 	movw	r2, #283	@ 0x11b
 8001b56:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 565;
 8001b58:	4b28      	ldr	r3, [pc, #160]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b5a:	f240 2235 	movw	r2, #565	@ 0x235
 8001b5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001b60:	4b26      	ldr	r3, [pc, #152]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b62:	f240 121d 	movw	r2, #285	@ 0x11d
 8001b66:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001b68:	4b24      	ldr	r3, [pc, #144]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001b70:	4b22      	ldr	r3, [pc, #136]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001b78:	4b20      	ldr	r3, [pc, #128]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001b80:	481e      	ldr	r0, [pc, #120]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001b82:	f005 fb77 	bl	8007274 <HAL_LTDC_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001b8c:	f000 fafa 	bl	8002184 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001b94:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001b98:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001b9e:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001ba2:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001ba8:	23ff      	movs	r3, #255	@ 0xff
 8001baa:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001bb0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001bb4:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001bb6:	2307      	movs	r3, #7
 8001bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001bba:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 480;
 8001bc0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 272;
 8001bc6:	f44f 7388 	mov.w	r3, #272	@ 0x110
 8001bca:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001bde:	1d3b      	adds	r3, r7, #4
 8001be0:	2200      	movs	r2, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	4805      	ldr	r0, [pc, #20]	@ (8001bfc <MX_LTDC_Init+0xfc>)
 8001be6:	f005 fcd7 	bl	8007598 <HAL_LTDC_ConfigLayer>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001bf0:	f000 fac8 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001bf4:	bf00      	nop
 8001bf6:	3738      	adds	r7, #56	@ 0x38
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	2000052c 	.word	0x2000052c
 8001c00:	40016800 	.word	0x40016800

08001c04 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	@ 0x38
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a55      	ldr	r2, [pc, #340]	@ (8001d78 <HAL_LTDC_MspInit+0x174>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	f040 80a3 	bne.w	8001d6e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c28:	4b54      	ldr	r3, [pc, #336]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2c:	4a53      	ldr	r2, [pc, #332]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c32:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c34:	4b51      	ldr	r3, [pc, #324]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c3c:	623b      	str	r3, [r7, #32]
 8001c3e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c40:	4b4e      	ldr	r3, [pc, #312]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c44:	4a4d      	ldr	r2, [pc, #308]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c46:	f043 0310 	orr.w	r3, r3, #16
 8001c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c50:	f003 0310 	and.w	r3, r3, #16
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001c58:	4b48      	ldr	r3, [pc, #288]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	4a47      	ldr	r2, [pc, #284]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c64:	4b45      	ldr	r3, [pc, #276]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001c70:	4b42      	ldr	r3, [pc, #264]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c74:	4a41      	ldr	r2, [pc, #260]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c88:	4b3c      	ldr	r3, [pc, #240]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	4a3b      	ldr	r2, [pc, #236]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c94:	4b39      	ldr	r3, [pc, #228]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c9c:	613b      	str	r3, [r7, #16]
 8001c9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ca0:	4b36      	ldr	r3, [pc, #216]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca4:	4a35      	ldr	r2, [pc, #212]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001ca6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001caa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cac:	4b33      	ldr	r3, [pc, #204]	@ (8001d7c <HAL_LTDC_MspInit+0x178>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001cb8:	2310      	movs	r3, #16
 8001cba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cc8:	230e      	movs	r3, #14
 8001cca:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	482b      	ldr	r0, [pc, #172]	@ (8001d80 <HAL_LTDC_MspInit+0x17c>)
 8001cd4:	f004 f9b6 	bl	8006044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001cd8:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cea:	230e      	movs	r3, #14
 8001cec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4823      	ldr	r0, [pc, #140]	@ (8001d84 <HAL_LTDC_MspInit+0x180>)
 8001cf6:	f004 f9a5 	bl	8006044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001cfa:	23f7      	movs	r3, #247	@ 0xf7
 8001cfc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d0a:	230e      	movs	r3, #14
 8001d0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d12:	4619      	mov	r1, r3
 8001d14:	481c      	ldr	r0, [pc, #112]	@ (8001d88 <HAL_LTDC_MspInit+0x184>)
 8001d16:	f004 f995 	bl	8006044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001d1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d2c:	2309      	movs	r3, #9
 8001d2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001d30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d34:	4619      	mov	r1, r3
 8001d36:	4815      	ldr	r0, [pc, #84]	@ (8001d8c <HAL_LTDC_MspInit+0x188>)
 8001d38:	f004 f984 	bl	8006044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001d3c:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 8001d40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d42:	2302      	movs	r3, #2
 8001d44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d4e:	230e      	movs	r3, #14
 8001d50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001d52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d56:	4619      	mov	r1, r3
 8001d58:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <HAL_LTDC_MspInit+0x18c>)
 8001d5a:	f004 f973 	bl	8006044 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2105      	movs	r1, #5
 8001d62:	2058      	movs	r0, #88	@ 0x58
 8001d64:	f003 f854 	bl	8004e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001d68:	2058      	movs	r0, #88	@ 0x58
 8001d6a:	f003 f86d 	bl	8004e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001d6e:	bf00      	nop
 8001d70:	3738      	adds	r7, #56	@ 0x38
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40016800 	.word	0x40016800
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40022400 	.word	0x40022400
 8001d88:	40022800 	.word	0x40022800
 8001d8c:	40021800 	.word	0x40021800
 8001d90:	40022000 	.word	0x40022000

08001d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d94:	b590      	push	{r4, r7, lr}
 8001d96:	f5ad 7d59 	sub.w	sp, sp, #868	@ 0x364
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d9c:	4b80      	ldr	r3, [pc, #512]	@ (8001fa0 <main+0x20c>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001da2:	4b7f      	ldr	r3, [pc, #508]	@ (8001fa0 <main+0x20c>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001da8:	f002 fc95 	bl	80046d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dac:	f000 f910 	bl	8001fd0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001db0:	f000 f980 	bl	80020b4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db4:	f7ff faa2 	bl	80012fc <MX_GPIO_Init>
  MX_DMA_Init();
 8001db8:	f7fe fd76 	bl	80008a8 <MX_DMA_Init>
  MX_DMA2D_Init();
 8001dbc:	f7fe fd9a 	bl	80008f4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001dc0:	f7fe fdf0 	bl	80009a4 <MX_FMC_Init>
  MX_I2C1_Init();
 8001dc4:	f7ff fd38 	bl	8001838 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001dc8:	f7ff fd76 	bl	80018b8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001dcc:	f7ff fe98 	bl	8001b00 <MX_LTDC_Init>
  MX_RTC_Init();
 8001dd0:	f000 f9de 	bl	8002190 <MX_RTC_Init>
  MX_SPI2_Init();
 8001dd4:	f000 fbb0 	bl	8002538 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001dd8:	f002 f888 	bl	8003eec <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ddc:	f002 f8da 	bl	8003f94 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001de0:	f002 f926 	bl	8004030 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001de4:	f002 f972 	bl	80040cc <MX_TIM5_Init>
  MX_TIM8_Init();
 8001de8:	f002 f9be 	bl	8004168 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001dec:	f002 fad2 	bl	8004394 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001df0:	f002 fb00 	bl	80043f4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001df4:	f7fe fbd4 	bl	80005a0 <MX_ADC1_Init>
  MX_DAC_Init();
 8001df8:	f7fe fce4 	bl	80007c4 <MX_DAC_Init>
  MX_UART7_Init();
 8001dfc:	f002 fa9a 	bl	8004334 <MX_UART7_Init>
  MX_SDMMC1_SD_Init();
 8001e00:	f000 fa98 	bl	8002334 <MX_SDMMC1_SD_Init>
  MX_ADC3_Init();
 8001e04:	f7fe fc1e 	bl	8000644 <MX_ADC3_Init>
  MX_FATFS_Init();
 8001e08:	f00b f822 	bl	800ce50 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001e0c:	f000 fdd8 	bl	80029c0 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001e10:	f04f 4140 	mov.w	r1, #3221225472	@ 0xc0000000
 8001e14:	2000      	movs	r0, #0
 8001e16:	f000 fe6b 	bl	8002af0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8001e1a:	f000 fe41 	bl	8002aa0 <BSP_LCD_GetXSize>
 8001e1e:	4604      	mov	r4, r0
 8001e20:	f000 fe52 	bl	8002ac8 <BSP_LCD_GetYSize>
 8001e24:	4603      	mov	r3, r0
 8001e26:	fb04 f303 	mul.w	r3, r4, r3
 8001e2a:	f103 5340 	add.w	r3, r3, #805306368	@ 0x30000000
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4619      	mov	r1, r3
 8001e32:	2001      	movs	r0, #1
 8001e34:	f000 fe5c 	bl	8002af0 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8001e38:	f001 f8c0 	bl	8002fbc <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f000 feb7 	bl	8002bb0 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001e42:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8001e46:	f000 ff25 	bl	8002c94 <BSP_LCD_Clear>
  BSP_LCD_SelectLayer(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 feb0 	bl	8002bb0 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f000 ff1f 	bl	8002c94 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font24);
 8001e56:	4853      	ldr	r0, [pc, #332]	@ (8001fa4 <main+0x210>)
 8001e58:	f000 feec 	bl	8002c34 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001e5c:	4852      	ldr	r0, [pc, #328]	@ (8001fa8 <main+0x214>)
 8001e5e:	f000 feb7 	bl	8002bd0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f000 fecc 	bl	8002c00 <BSP_LCD_SetBackColor>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001e68:	f000 fe1a 	bl	8002aa0 <BSP_LCD_GetXSize>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	b29c      	uxth	r4, r3
 8001e70:	f000 fe2a 	bl	8002ac8 <BSP_LCD_GetYSize>
 8001e74:	4603      	mov	r3, r0
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f001 fc6c 	bl	8003758 <BSP_TS_Init>

  uint8_t fatfs;
  //pb configuration fatfs
  fatfs=FATFS_LinkDriver(&SD_Driver, SDPath);
 8001e80:	494a      	ldr	r1, [pc, #296]	@ (8001fac <main+0x218>)
 8001e82:	484b      	ldr	r0, [pc, #300]	@ (8001fb0 <main+0x21c>)
 8001e84:	f00e f8be 	bl	8010004 <FATFS_LinkDriver>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	f887 335f 	strb.w	r3, [r7, #863]	@ 0x35f

	char image[200]={};
 8001e8e:	2300      	movs	r3, #0
 8001e90:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8001e94:	f507 7326 	add.w	r3, r7, #664	@ 0x298
 8001e98:	22c4      	movs	r2, #196	@ 0xc4
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f011 f8ed 	bl	801307c <memset>
  char text[50]={};
 8001ea2:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001ea6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	3304      	adds	r3, #4
 8001eb0:	222e      	movs	r2, #46	@ 0x2e
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f011 f8e1 	bl	801307c <memset>
	FIL file;
	uwInternelBuffer = (uint8_t*) 0xC0260000;
 8001eba:	4b3e      	ldr	r3, [pc, #248]	@ (8001fb4 <main+0x220>)
 8001ebc:	4a3e      	ldr	r2, [pc, #248]	@ (8001fb8 <main+0x224>)
 8001ebe:	601a      	str	r2, [r3, #0]
	unsigned int byteRead;
	TCHAR pathfile[] = "mapENS.bmp";
 8001ec0:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001ec4:	f5a3 7350 	sub.w	r3, r3, #832	@ 0x340
 8001ec8:	4a3c      	ldr	r2, [pc, #240]	@ (8001fbc <main+0x228>)
 8001eca:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ecc:	c303      	stmia	r3!, {r0, r1}
 8001ece:	801a      	strh	r2, [r3, #0]
 8001ed0:	3302      	adds	r3, #2
 8001ed2:	0c12      	lsrs	r2, r2, #16
 8001ed4:	701a      	strb	r2, [r3, #0]
    FRESULT res;
	res=f_open(&file, pathfile, FA_READ); // on ne prend que le fichier
 8001ed6:	f107 0120 	add.w	r1, r7, #32
 8001eda:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f00d fb62 	bl	800f5aa <f_open>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f887 335e 	strb.w	r3, [r7, #862]	@ 0x35e
	f_read(&file, (TCHAR*) image, 200, &byteRead);
 8001eec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ef0:	f507 7125 	add.w	r1, r7, #660	@ 0x294
 8001ef4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001ef8:	22c8      	movs	r2, #200	@ 0xc8
 8001efa:	f00d fe11 	bl	800fb20 <f_read>
	f_close(&file);
 8001efe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f02:	4618      	mov	r0, r3
 8001f04:	f00e f803 	bl	800ff0e <f_close>

  sprintf(text, "file: %d  fatfs: %d      ",res,fatfs);
 8001f08:	f897 235e 	ldrb.w	r2, [r7, #862]	@ 0x35e
 8001f0c:	f897 335f 	ldrb.w	r3, [r7, #863]	@ 0x35f
 8001f10:	f507 7018 	add.w	r0, r7, #608	@ 0x260
 8001f14:	492a      	ldr	r1, [pc, #168]	@ (8001fc0 <main+0x22c>)
 8001f16:	f011 f891 	bl	801303c <siprintf>
	BSP_LCD_DisplayStringAtLine(8,(uint8_t*) text);
 8001f1a:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 8001f1e:	4619      	mov	r1, r3
 8001f20:	2008      	movs	r0, #8
 8001f22:	f000 ffeb 	bl	8002efc <BSP_LCD_DisplayStringAtLine>

	//Entete début
	//Largeur
	image[18] = 0xE0;
 8001f26:	23e0      	movs	r3, #224	@ 0xe0
 8001f28:	f887 32a6 	strb.w	r3, [r7, #678]	@ 0x2a6
	image[19] = 0x01;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	f887 32a7 	strb.w	r3, [r7, #679]	@ 0x2a7
	image[20] = 0x00;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 32a8 	strb.w	r3, [r7, #680]	@ 0x2a8
	image[21] = 0x00;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f887 32a9 	strb.w	r3, [r7, #681]	@ 0x2a9
	//hauteur
	image[22] = 0x10;
 8001f3e:	2310      	movs	r3, #16
 8001f40:	f887 32aa 	strb.w	r3, [r7, #682]	@ 0x2aa
	image[23] = 0x01;
 8001f44:	2301      	movs	r3, #1
 8001f46:	f887 32ab 	strb.w	r3, [r7, #683]	@ 0x2ab
	image[24] = 0x00;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	f887 32ac 	strb.w	r3, [r7, #684]	@ 0x2ac
	image[25] = 0x00;
 8001f50:	2300      	movs	r3, #0
 8001f52:	f887 32ad 	strb.w	r3, [r7, #685]	@ 0x2ad



  uint8_t Test[25]="Fin init\r\n";
 8001f56:	f507 7358 	add.w	r3, r7, #864	@ 0x360
 8001f5a:	f5a3 7457 	sub.w	r4, r3, #860	@ 0x35c
 8001f5e:	4a19      	ldr	r2, [pc, #100]	@ (8001fc4 <main+0x230>)
 8001f60:	4623      	mov	r3, r4
 8001f62:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f64:	c303      	stmia	r3!, {r0, r1}
 8001f66:	801a      	strh	r2, [r3, #0]
 8001f68:	3302      	adds	r3, #2
 8001f6a:	0c12      	lsrs	r2, r2, #16
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	f104 030b 	add.w	r3, r4, #11
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	819a      	strh	r2, [r3, #12]
  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);
 8001f7c:	1d39      	adds	r1, r7, #4
 8001f7e:	230a      	movs	r3, #10
 8001f80:	2219      	movs	r2, #25
 8001f82:	4811      	ldr	r0, [pc, #68]	@ (8001fc8 <main+0x234>)
 8001f84:	f008 fec0 	bl	800ad08 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart1,&caractere_recu,1);
 8001f88:	2201      	movs	r2, #1
 8001f8a:	4910      	ldr	r1, [pc, #64]	@ (8001fcc <main+0x238>)
 8001f8c:	480e      	ldr	r0, [pc, #56]	@ (8001fc8 <main+0x234>)
 8001f8e:	f008 ff3e 	bl	800ae0e <HAL_UART_Receive_IT>
  //HAL_RTC_GetDate()
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001f92:	f7fe fe09 	bl	8000ba8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f96:	f00e f955 	bl	8010244 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f9a:	bf00      	nop
 8001f9c:	e7fd      	b.n	8001f9a <main+0x206>
 8001f9e:	bf00      	nop
 8001fa0:	200005d8 	.word	0x200005d8
 8001fa4:	20000028 	.word	0x20000028
 8001fa8:	ffff0000 	.word	0xffff0000
 8001fac:	20000df0 	.word	0x20000df0
 8001fb0:	08015698 	.word	0x08015698
 8001fb4:	200005d4 	.word	0x200005d4
 8001fb8:	c0260000 	.word	0xc0260000
 8001fbc:	08013b38 	.word	0x08013b38
 8001fc0:	08013b1c 	.word	0x08013b1c
 8001fc4:	08013b44 	.word	0x08013b44
 8001fc8:	20000cd8 	.word	0x20000cd8
 8001fcc:	200005e8 	.word	0x200005e8

08001fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b094      	sub	sp, #80	@ 0x50
 8001fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fd6:	f107 0320 	add.w	r3, r7, #32
 8001fda:	2230      	movs	r2, #48	@ 0x30
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f011 f84c 	bl	801307c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fe4:	f107 030c 	add.w	r3, r7, #12
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001ff4:	f005 fcb6 	bl	8007964 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff8:	4b2c      	ldr	r3, [pc, #176]	@ (80020ac <SystemClock_Config+0xdc>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80020ac <SystemClock_Config+0xdc>)
 8001ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002002:	6413      	str	r3, [r2, #64]	@ 0x40
 8002004:	4b29      	ldr	r3, [pc, #164]	@ (80020ac <SystemClock_Config+0xdc>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002008:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002010:	4b27      	ldr	r3, [pc, #156]	@ (80020b0 <SystemClock_Config+0xe0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a26      	ldr	r2, [pc, #152]	@ (80020b0 <SystemClock_Config+0xe0>)
 8002016:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800201a:	6013      	str	r3, [r2, #0]
 800201c:	4b24      	ldr	r3, [pc, #144]	@ (80020b0 <SystemClock_Config+0xe0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002028:	2309      	movs	r3, #9
 800202a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800202c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002032:	2301      	movs	r3, #1
 8002034:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002036:	2302      	movs	r3, #2
 8002038:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800203a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800203e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002040:	2319      	movs	r3, #25
 8002042:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8002044:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8002048:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800204a:	2302      	movs	r3, #2
 800204c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800204e:	2309      	movs	r3, #9
 8002050:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002052:	f107 0320 	add.w	r3, r7, #32
 8002056:	4618      	mov	r0, r3
 8002058:	f005 fce4 	bl	8007a24 <HAL_RCC_OscConfig>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002062:	f000 f88f 	bl	8002184 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002066:	f005 fc8d 	bl	8007984 <HAL_PWREx_EnableOverDrive>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8002070:	f000 f888 	bl	8002184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002074:	230f      	movs	r3, #15
 8002076:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002078:	2302      	movs	r3, #2
 800207a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002080:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002084:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002086:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800208a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	2106      	movs	r1, #6
 8002092:	4618      	mov	r0, r3
 8002094:	f005 ff6a 	bl	8007f6c <HAL_RCC_ClockConfig>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800209e:	f000 f871 	bl	8002184 <Error_Handler>
  }
}
 80020a2:	bf00      	nop
 80020a4:	3750      	adds	r7, #80	@ 0x50
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40007000 	.word	0x40007000

080020b4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b0a2      	sub	sp, #136	@ 0x88
 80020b8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020ba:	1d3b      	adds	r3, r7, #4
 80020bc:	2284      	movs	r2, #132	@ 0x84
 80020be:	2100      	movs	r1, #0
 80020c0:	4618      	mov	r0, r3
 80020c2:	f010 ffdb 	bl	801307c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_SDMMC1
 80020c6:	4b12      	ldr	r3, [pc, #72]	@ (8002110 <PeriphCommonClock_Config+0x5c>)
 80020c8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80020ca:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80020ce:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80020d0:	2305      	movs	r3, #5
 80020d2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80020d4:	2302      	movs	r3, #2
 80020d6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80020d8:	2303      	movs	r3, #3
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80020dc:	2301      	movs	r3, #1
 80020de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80020e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020e4:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80020e6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80020ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80020ee:	2300      	movs	r3, #0
 80020f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4618      	mov	r0, r3
 80020f8:	f006 f950 	bl	800839c <HAL_RCCEx_PeriphCLKConfig>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8002102:	f000 f83f 	bl	8002184 <Error_Handler>
  }
}
 8002106:	bf00      	nop
 8002108:	3788      	adds	r7, #136	@ 0x88
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	00a00008 	.word	0x00a00008

08002114 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// ==============================================================================================================

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
	if (caractere_recu == 'a')
 800211c:	4b0d      	ldr	r3, [pc, #52]	@ (8002154 <HAL_UART_RxCpltCallback+0x40>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b61      	cmp	r3, #97	@ 0x61
 8002122:	d104      	bne.n	800212e <HAL_UART_RxCpltCallback+0x1a>
		HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, 1);
 8002124:	2201      	movs	r2, #1
 8002126:	2108      	movs	r1, #8
 8002128:	480b      	ldr	r0, [pc, #44]	@ (8002158 <HAL_UART_RxCpltCallback+0x44>)
 800212a:	f004 fa5b 	bl	80065e4 <HAL_GPIO_WritePin>
	if (caractere_recu == 'e')
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <HAL_UART_RxCpltCallback+0x40>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b65      	cmp	r3, #101	@ 0x65
 8002134:	d104      	bne.n	8002140 <HAL_UART_RxCpltCallback+0x2c>
		HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, 0);
 8002136:	2200      	movs	r2, #0
 8002138:	2108      	movs	r1, #8
 800213a:	4807      	ldr	r0, [pc, #28]	@ (8002158 <HAL_UART_RxCpltCallback+0x44>)
 800213c:	f004 fa52 	bl	80065e4 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart1, &caractere_recu, 1);
 8002140:	2201      	movs	r2, #1
 8002142:	4904      	ldr	r1, [pc, #16]	@ (8002154 <HAL_UART_RxCpltCallback+0x40>)
 8002144:	4805      	ldr	r0, [pc, #20]	@ (800215c <HAL_UART_RxCpltCallback+0x48>)
 8002146:	f008 fe62 	bl	800ae0e <HAL_UART_Receive_IT>

}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	200005e8 	.word	0x200005e8
 8002158:	40020c00 	.word	0x40020c00
 800215c:	20000cd8 	.word	0x20000cd8

08002160 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a04      	ldr	r2, [pc, #16]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d101      	bne.n	8002176 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002172:	f002 fabd 	bl	80046f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002176:	bf00      	nop
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40001000 	.word	0x40001000

08002184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002188:	b672      	cpsid	i
}
 800218a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <Error_Handler+0x8>

08002190 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b090      	sub	sp, #64	@ 0x40
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002196:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
 80021a4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80021a6:	2300      	movs	r3, #0
 80021a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80021aa:	463b      	mov	r3, r7
 80021ac:	2228      	movs	r2, #40	@ 0x28
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f010 ff63 	bl	801307c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80021b6:	4b46      	ldr	r3, [pc, #280]	@ (80022d0 <MX_RTC_Init+0x140>)
 80021b8:	4a46      	ldr	r2, [pc, #280]	@ (80022d4 <MX_RTC_Init+0x144>)
 80021ba:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80021bc:	4b44      	ldr	r3, [pc, #272]	@ (80022d0 <MX_RTC_Init+0x140>)
 80021be:	2200      	movs	r2, #0
 80021c0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80021c2:	4b43      	ldr	r3, [pc, #268]	@ (80022d0 <MX_RTC_Init+0x140>)
 80021c4:	227f      	movs	r2, #127	@ 0x7f
 80021c6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80021c8:	4b41      	ldr	r3, [pc, #260]	@ (80022d0 <MX_RTC_Init+0x140>)
 80021ca:	22ff      	movs	r2, #255	@ 0xff
 80021cc:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80021ce:	4b40      	ldr	r3, [pc, #256]	@ (80022d0 <MX_RTC_Init+0x140>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80021d4:	4b3e      	ldr	r3, [pc, #248]	@ (80022d0 <MX_RTC_Init+0x140>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80021da:	4b3d      	ldr	r3, [pc, #244]	@ (80022d0 <MX_RTC_Init+0x140>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80021e0:	483b      	ldr	r0, [pc, #236]	@ (80022d0 <MX_RTC_Init+0x140>)
 80021e2:	f006 fccb 	bl	8008b7c <HAL_RTC_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80021ec:	f7ff ffca 	bl	8002184 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80021f0:	2300      	movs	r3, #0
 80021f2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  sTime.Minutes = 0x0;
 80021f6:	2300      	movs	r3, #0
 80021f8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  sTime.Seconds = 0x0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002202:	2300      	movs	r3, #0
 8002204:	63bb      	str	r3, [r7, #56]	@ 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800220a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800220e:	2201      	movs	r2, #1
 8002210:	4619      	mov	r1, r3
 8002212:	482f      	ldr	r0, [pc, #188]	@ (80022d0 <MX_RTC_Init+0x140>)
 8002214:	f006 fd36 	bl	8008c84 <HAL_RTC_SetTime>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800221e:	f7ff ffb1 	bl	8002184 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002222:	2301      	movs	r3, #1
 8002224:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002228:	2301      	movs	r3, #1
 800222a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
  sDate.Date = 0x1;
 800222e:	2301      	movs	r3, #1
 8002230:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  sDate.Year = 0x0;
 8002234:	2300      	movs	r3, #0
 8002236:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800223a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800223e:	2201      	movs	r2, #1
 8002240:	4619      	mov	r1, r3
 8002242:	4823      	ldr	r0, [pc, #140]	@ (80022d0 <MX_RTC_Init+0x140>)
 8002244:	f006 fdb8 	bl	8008db8 <HAL_RTC_SetDate>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800224e:	f7ff ff99 	bl	8002184 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8002252:	2300      	movs	r3, #0
 8002254:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8002256:	2300      	movs	r3, #0
 8002258:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800225a:	2300      	movs	r3, #0
 800225c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800225e:	2300      	movs	r3, #0
 8002260:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800226a:	2300      	movs	r3, #0
 800226c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800226e:	2300      	movs	r3, #0
 8002270:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002272:	2300      	movs	r3, #0
 8002274:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8002276:	2301      	movs	r3, #1
 8002278:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800227c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8002282:	463b      	mov	r3, r7
 8002284:	2201      	movs	r2, #1
 8002286:	4619      	mov	r1, r3
 8002288:	4811      	ldr	r0, [pc, #68]	@ (80022d0 <MX_RTC_Init+0x140>)
 800228a:	f006 fe19 	bl	8008ec0 <HAL_RTC_SetAlarm>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002294:	f7ff ff76 	bl	8002184 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002298:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800229e:	463b      	mov	r3, r7
 80022a0:	2201      	movs	r2, #1
 80022a2:	4619      	mov	r1, r3
 80022a4:	480a      	ldr	r0, [pc, #40]	@ (80022d0 <MX_RTC_Init+0x140>)
 80022a6:	f006 fe0b 	bl	8008ec0 <HAL_RTC_SetAlarm>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 80022b0:	f7ff ff68 	bl	8002184 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80022b4:	2202      	movs	r2, #2
 80022b6:	2100      	movs	r1, #0
 80022b8:	4805      	ldr	r0, [pc, #20]	@ (80022d0 <MX_RTC_Init+0x140>)
 80022ba:	f006 ffcd 	bl	8009258 <HAL_RTCEx_SetTimeStamp>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 80022c4:	f7ff ff5e 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80022c8:	bf00      	nop
 80022ca:	3740      	adds	r7, #64	@ 0x40
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	200005ec 	.word	0x200005ec
 80022d4:	40002800 	.word	0x40002800

080022d8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0a4      	sub	sp, #144	@ 0x90
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e0:	f107 030c 	add.w	r3, r7, #12
 80022e4:	2284      	movs	r2, #132	@ 0x84
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f010 fec7 	bl	801307c <memset>
  if(rtcHandle->Instance==RTC)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a0e      	ldr	r2, [pc, #56]	@ (800232c <HAL_RTC_MspInit+0x54>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d114      	bne.n	8002322 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80022f8:	2320      	movs	r3, #32
 80022fa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80022fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002300:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	4618      	mov	r0, r3
 8002308:	f006 f848 	bl	800839c <HAL_RCCEx_PeriphCLKConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002312:	f7ff ff37 	bl	8002184 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002316:	4b06      	ldr	r3, [pc, #24]	@ (8002330 <HAL_RTC_MspInit+0x58>)
 8002318:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231a:	4a05      	ldr	r2, [pc, #20]	@ (8002330 <HAL_RTC_MspInit+0x58>)
 800231c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002320:	6713      	str	r3, [r2, #112]	@ 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002322:	bf00      	nop
 8002324:	3790      	adds	r7, #144	@ 0x90
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40002800 	.word	0x40002800
 8002330:	40023800 	.word	0x40023800

08002334 <MX_SDMMC1_SD_Init>:
DMA_HandleTypeDef hdma_sdmmc1_tx;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002338:	4b0c      	ldr	r3, [pc, #48]	@ (800236c <MX_SDMMC1_SD_Init+0x38>)
 800233a:	4a0d      	ldr	r2, [pc, #52]	@ (8002370 <MX_SDMMC1_SD_Init+0x3c>)
 800233c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800233e:	4b0b      	ldr	r3, [pc, #44]	@ (800236c <MX_SDMMC1_SD_Init+0x38>)
 8002340:	2200      	movs	r2, #0
 8002342:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002344:	4b09      	ldr	r3, [pc, #36]	@ (800236c <MX_SDMMC1_SD_Init+0x38>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800234a:	4b08      	ldr	r3, [pc, #32]	@ (800236c <MX_SDMMC1_SD_Init+0x38>)
 800234c:	2200      	movs	r2, #0
 800234e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <MX_SDMMC1_SD_Init+0x38>)
 8002352:	2200      	movs	r2, #0
 8002354:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002356:	4b05      	ldr	r3, [pc, #20]	@ (800236c <MX_SDMMC1_SD_Init+0x38>)
 8002358:	2200      	movs	r2, #0
 800235a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800235c:	4b03      	ldr	r3, [pc, #12]	@ (800236c <MX_SDMMC1_SD_Init+0x38>)
 800235e:	2200      	movs	r2, #0
 8002360:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002362:	bf00      	nop
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	2000060c 	.word	0x2000060c
 8002370:	40012c00 	.word	0x40012c00

08002374 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	@ 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDMMC1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a61      	ldr	r2, [pc, #388]	@ (8002518 <HAL_SD_MspInit+0x1a4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	f040 80bb 	bne.w	800250e <HAL_SD_MspInit+0x19a>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* SDMMC1 clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8002398:	4b60      	ldr	r3, [pc, #384]	@ (800251c <HAL_SD_MspInit+0x1a8>)
 800239a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239c:	4a5f      	ldr	r2, [pc, #380]	@ (800251c <HAL_SD_MspInit+0x1a8>)
 800239e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023a2:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a4:	4b5d      	ldr	r3, [pc, #372]	@ (800251c <HAL_SD_MspInit+0x1a8>)
 80023a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023b0:	4b5a      	ldr	r3, [pc, #360]	@ (800251c <HAL_SD_MspInit+0x1a8>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	4a59      	ldr	r2, [pc, #356]	@ (800251c <HAL_SD_MspInit+0x1a8>)
 80023b6:	f043 0304 	orr.w	r3, r3, #4
 80023ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80023bc:	4b57      	ldr	r3, [pc, #348]	@ (800251c <HAL_SD_MspInit+0x1a8>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	f003 0304 	and.w	r3, r3, #4
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c8:	4b54      	ldr	r3, [pc, #336]	@ (800251c <HAL_SD_MspInit+0x1a8>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023cc:	4a53      	ldr	r2, [pc, #332]	@ (800251c <HAL_SD_MspInit+0x1a8>)
 80023ce:	f043 0308 	orr.w	r3, r3, #8
 80023d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d4:	4b51      	ldr	r3, [pc, #324]	@ (800251c <HAL_SD_MspInit+0x1a8>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d8:	f003 0308 	and.w	r3, r3, #8
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 80023e0:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80023e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ee:	2303      	movs	r3, #3
 80023f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80023f2:	230c      	movs	r3, #12
 80023f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	4848      	ldr	r0, [pc, #288]	@ (8002520 <HAL_SD_MspInit+0x1ac>)
 80023fe:	f003 fe21 	bl	8006044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8002402:	2304      	movs	r3, #4
 8002404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002406:	2302      	movs	r3, #2
 8002408:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240e:	2303      	movs	r3, #3
 8002410:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002412:	230c      	movs	r3, #12
 8002414:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8002416:	f107 0314 	add.w	r3, r7, #20
 800241a:	4619      	mov	r1, r3
 800241c:	4841      	ldr	r0, [pc, #260]	@ (8002524 <HAL_SD_MspInit+0x1b0>)
 800241e:	f003 fe11 	bl	8006044 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8002422:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 8002424:	4a41      	ldr	r2, [pc, #260]	@ (800252c <HAL_SD_MspInit+0x1b8>)
 8002426:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002428:	4b3f      	ldr	r3, [pc, #252]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 800242a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800242e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002430:	4b3d      	ldr	r3, [pc, #244]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002436:	4b3c      	ldr	r3, [pc, #240]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 8002438:	2200      	movs	r2, #0
 800243a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800243c:	4b3a      	ldr	r3, [pc, #232]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 800243e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002442:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002444:	4b38      	ldr	r3, [pc, #224]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 8002446:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800244a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800244c:	4b36      	ldr	r3, [pc, #216]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 800244e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002452:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8002454:	4b34      	ldr	r3, [pc, #208]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 8002456:	2220      	movs	r2, #32
 8002458:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800245a:	4b33      	ldr	r3, [pc, #204]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 800245c:	2200      	movs	r2, #0
 800245e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002460:	4b31      	ldr	r3, [pc, #196]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 8002462:	2204      	movs	r2, #4
 8002464:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002466:	4b30      	ldr	r3, [pc, #192]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 8002468:	2203      	movs	r2, #3
 800246a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800246c:	4b2e      	ldr	r3, [pc, #184]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 800246e:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002472:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002474:	4b2c      	ldr	r3, [pc, #176]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 8002476:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800247a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800247c:	482a      	ldr	r0, [pc, #168]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 800247e:	f002 fdd1 	bl	8005024 <HAL_DMA_Init>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d001      	beq.n	800248c <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8002488:	f7ff fe7c 	bl	8002184 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdmmc1_rx);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a26      	ldr	r2, [pc, #152]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40
 8002492:	4a25      	ldr	r2, [pc, #148]	@ (8002528 <HAL_SD_MspInit+0x1b4>)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002498:	4b25      	ldr	r3, [pc, #148]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 800249a:	4a26      	ldr	r2, [pc, #152]	@ (8002534 <HAL_SD_MspInit+0x1c0>)
 800249c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800249e:	4b24      	ldr	r3, [pc, #144]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024a0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80024a4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024a6:	4b22      	ldr	r3, [pc, #136]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024a8:	2240      	movs	r2, #64	@ 0x40
 80024aa:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024ac:	4b20      	ldr	r3, [pc, #128]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024b2:	4b1f      	ldr	r3, [pc, #124]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024b8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024c0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024c4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80024c8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80024ca:	4b19      	ldr	r3, [pc, #100]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024cc:	2220      	movs	r2, #32
 80024ce:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024d0:	4b17      	ldr	r3, [pc, #92]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80024d6:	4b16      	ldr	r3, [pc, #88]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024d8:	2204      	movs	r2, #4
 80024da:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80024dc:	4b14      	ldr	r3, [pc, #80]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024de:	2203      	movs	r2, #3
 80024e0:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80024e2:	4b13      	ldr	r3, [pc, #76]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024e4:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80024e8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80024ea:	4b11      	ldr	r3, [pc, #68]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024ec:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80024f0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80024f2:	480f      	ldr	r0, [pc, #60]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 80024f4:	f002 fd96 	bl	8005024 <HAL_DMA_Init>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80024fe:	f7ff fe41 	bl	8002184 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdmmc1_tx);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a0a      	ldr	r2, [pc, #40]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 8002506:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002508:	4a09      	ldr	r2, [pc, #36]	@ (8002530 <HAL_SD_MspInit+0x1bc>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800250e:	bf00      	nop
 8002510:	3728      	adds	r7, #40	@ 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40023800 	.word	0x40023800
 8002520:	40020800 	.word	0x40020800
 8002524:	40020c00 	.word	0x40020c00
 8002528:	20000690 	.word	0x20000690
 800252c:	40026458 	.word	0x40026458
 8002530:	200006f0 	.word	0x200006f0
 8002534:	400264a0 	.word	0x400264a0

08002538 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <MX_SPI2_Init+0x74>)
 800253e:	4a1c      	ldr	r2, [pc, #112]	@ (80025b0 <MX_SPI2_Init+0x78>)
 8002540:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002542:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <MX_SPI2_Init+0x74>)
 8002544:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002548:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800254a:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <MX_SPI2_Init+0x74>)
 800254c:	2200      	movs	r2, #0
 800254e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8002550:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <MX_SPI2_Init+0x74>)
 8002552:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8002556:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002558:	4b14      	ldr	r3, [pc, #80]	@ (80025ac <MX_SPI2_Init+0x74>)
 800255a:	2200      	movs	r2, #0
 800255c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800255e:	4b13      	ldr	r3, [pc, #76]	@ (80025ac <MX_SPI2_Init+0x74>)
 8002560:	2200      	movs	r2, #0
 8002562:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8002564:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <MX_SPI2_Init+0x74>)
 8002566:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800256a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800256c:	4b0f      	ldr	r3, [pc, #60]	@ (80025ac <MX_SPI2_Init+0x74>)
 800256e:	2200      	movs	r2, #0
 8002570:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002572:	4b0e      	ldr	r3, [pc, #56]	@ (80025ac <MX_SPI2_Init+0x74>)
 8002574:	2200      	movs	r2, #0
 8002576:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002578:	4b0c      	ldr	r3, [pc, #48]	@ (80025ac <MX_SPI2_Init+0x74>)
 800257a:	2200      	movs	r2, #0
 800257c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800257e:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <MX_SPI2_Init+0x74>)
 8002580:	2200      	movs	r2, #0
 8002582:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002584:	4b09      	ldr	r3, [pc, #36]	@ (80025ac <MX_SPI2_Init+0x74>)
 8002586:	2207      	movs	r2, #7
 8002588:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <MX_SPI2_Init+0x74>)
 800258c:	2200      	movs	r2, #0
 800258e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002590:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <MX_SPI2_Init+0x74>)
 8002592:	2208      	movs	r2, #8
 8002594:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002596:	4805      	ldr	r0, [pc, #20]	@ (80025ac <MX_SPI2_Init+0x74>)
 8002598:	f007 fdf5 	bl	800a186 <HAL_SPI_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80025a2:	f7ff fdef 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	20000750 	.word	0x20000750
 80025b0:	40003800 	.word	0x40003800

080025b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b08a      	sub	sp, #40	@ 0x28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025bc:	f107 0314 	add.w	r3, r7, #20
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]
 80025c6:	609a      	str	r2, [r3, #8]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a25      	ldr	r2, [pc, #148]	@ (8002668 <HAL_SPI_MspInit+0xb4>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d144      	bne.n	8002660 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025d6:	4b25      	ldr	r3, [pc, #148]	@ (800266c <HAL_SPI_MspInit+0xb8>)
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	4a24      	ldr	r2, [pc, #144]	@ (800266c <HAL_SPI_MspInit+0xb8>)
 80025dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80025e2:	4b22      	ldr	r3, [pc, #136]	@ (800266c <HAL_SPI_MspInit+0xb8>)
 80025e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ea:	613b      	str	r3, [r7, #16]
 80025ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80025ee:	4b1f      	ldr	r3, [pc, #124]	@ (800266c <HAL_SPI_MspInit+0xb8>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	4a1e      	ldr	r2, [pc, #120]	@ (800266c <HAL_SPI_MspInit+0xb8>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fa:	4b1c      	ldr	r3, [pc, #112]	@ (800266c <HAL_SPI_MspInit+0xb8>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002606:	4b19      	ldr	r3, [pc, #100]	@ (800266c <HAL_SPI_MspInit+0xb8>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4a18      	ldr	r2, [pc, #96]	@ (800266c <HAL_SPI_MspInit+0xb8>)
 800260c:	f043 0302 	orr.w	r3, r3, #2
 8002610:	6313      	str	r3, [r2, #48]	@ 0x30
 8002612:	4b16      	ldr	r3, [pc, #88]	@ (800266c <HAL_SPI_MspInit+0xb8>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800261e:	2303      	movs	r3, #3
 8002620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800262a:	2303      	movs	r3, #3
 800262c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800262e:	2305      	movs	r3, #5
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002632:	f107 0314 	add.w	r3, r7, #20
 8002636:	4619      	mov	r1, r3
 8002638:	480d      	ldr	r0, [pc, #52]	@ (8002670 <HAL_SPI_MspInit+0xbc>)
 800263a:	f003 fd03 	bl	8006044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 800263e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002650:	2305      	movs	r3, #5
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002654:	f107 0314 	add.w	r3, r7, #20
 8002658:	4619      	mov	r1, r3
 800265a:	4806      	ldr	r0, [pc, #24]	@ (8002674 <HAL_SPI_MspInit+0xc0>)
 800265c:	f003 fcf2 	bl	8006044 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8002660:	bf00      	nop
 8002662:	3728      	adds	r7, #40	@ 0x28
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40003800 	.word	0x40003800
 800266c:	40023800 	.word	0x40023800
 8002670:	40022000 	.word	0x40022000
 8002674:	40020400 	.word	0x40020400

08002678 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	@ 0x30
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a51      	ldr	r2, [pc, #324]	@ (80027c8 <I2Cx_MspInit+0x150>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d14d      	bne.n	8002724 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002688:	4b50      	ldr	r3, [pc, #320]	@ (80027cc <I2Cx_MspInit+0x154>)
 800268a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268c:	4a4f      	ldr	r2, [pc, #316]	@ (80027cc <I2Cx_MspInit+0x154>)
 800268e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002692:	6313      	str	r3, [r2, #48]	@ 0x30
 8002694:	4b4d      	ldr	r3, [pc, #308]	@ (80027cc <I2Cx_MspInit+0x154>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800269c:	61bb      	str	r3, [r7, #24]
 800269e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80026a0:	2380      	movs	r3, #128	@ 0x80
 80026a2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80026a4:	2312      	movs	r3, #18
 80026a6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80026ac:	2302      	movs	r3, #2
 80026ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80026b0:	2304      	movs	r3, #4
 80026b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80026b4:	f107 031c 	add.w	r3, r7, #28
 80026b8:	4619      	mov	r1, r3
 80026ba:	4845      	ldr	r0, [pc, #276]	@ (80027d0 <I2Cx_MspInit+0x158>)
 80026bc:	f003 fcc2 	bl	8006044 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80026c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80026c6:	f107 031c 	add.w	r3, r7, #28
 80026ca:	4619      	mov	r1, r3
 80026cc:	4840      	ldr	r0, [pc, #256]	@ (80027d0 <I2Cx_MspInit+0x158>)
 80026ce:	f003 fcb9 	bl	8006044 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80026d2:	4b3e      	ldr	r3, [pc, #248]	@ (80027cc <I2Cx_MspInit+0x154>)
 80026d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d6:	4a3d      	ldr	r2, [pc, #244]	@ (80027cc <I2Cx_MspInit+0x154>)
 80026d8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026de:	4b3b      	ldr	r3, [pc, #236]	@ (80027cc <I2Cx_MspInit+0x154>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80026e6:	617b      	str	r3, [r7, #20]
 80026e8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80026ea:	4b38      	ldr	r3, [pc, #224]	@ (80027cc <I2Cx_MspInit+0x154>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a37      	ldr	r2, [pc, #220]	@ (80027cc <I2Cx_MspInit+0x154>)
 80026f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80026f4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80026f6:	4b35      	ldr	r3, [pc, #212]	@ (80027cc <I2Cx_MspInit+0x154>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a34      	ldr	r2, [pc, #208]	@ (80027cc <I2Cx_MspInit+0x154>)
 80026fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002700:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002702:	2200      	movs	r2, #0
 8002704:	210f      	movs	r1, #15
 8002706:	2048      	movs	r0, #72	@ 0x48
 8002708:	f002 fb82 	bl	8004e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800270c:	2048      	movs	r0, #72	@ 0x48
 800270e:	f002 fb9b 	bl	8004e48 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002712:	2200      	movs	r2, #0
 8002714:	210f      	movs	r1, #15
 8002716:	2049      	movs	r0, #73	@ 0x49
 8002718:	f002 fb7a 	bl	8004e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800271c:	2049      	movs	r0, #73	@ 0x49
 800271e:	f002 fb93 	bl	8004e48 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002722:	e04d      	b.n	80027c0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002724:	4b29      	ldr	r3, [pc, #164]	@ (80027cc <I2Cx_MspInit+0x154>)
 8002726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002728:	4a28      	ldr	r2, [pc, #160]	@ (80027cc <I2Cx_MspInit+0x154>)
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002730:	4b26      	ldr	r3, [pc, #152]	@ (80027cc <I2Cx_MspInit+0x154>)
 8002732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800273c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002740:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002742:	2312      	movs	r3, #18
 8002744:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800274a:	2302      	movs	r3, #2
 800274c:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800274e:	2304      	movs	r3, #4
 8002750:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002752:	f107 031c 	add.w	r3, r7, #28
 8002756:	4619      	mov	r1, r3
 8002758:	481e      	ldr	r0, [pc, #120]	@ (80027d4 <I2Cx_MspInit+0x15c>)
 800275a:	f003 fc73 	bl	8006044 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800275e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002762:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	4619      	mov	r1, r3
 800276a:	481a      	ldr	r0, [pc, #104]	@ (80027d4 <I2Cx_MspInit+0x15c>)
 800276c:	f003 fc6a 	bl	8006044 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002770:	4b16      	ldr	r3, [pc, #88]	@ (80027cc <I2Cx_MspInit+0x154>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002774:	4a15      	ldr	r2, [pc, #84]	@ (80027cc <I2Cx_MspInit+0x154>)
 8002776:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800277a:	6413      	str	r3, [r2, #64]	@ 0x40
 800277c:	4b13      	ldr	r3, [pc, #76]	@ (80027cc <I2Cx_MspInit+0x154>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002780:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002788:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <I2Cx_MspInit+0x154>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a0f      	ldr	r2, [pc, #60]	@ (80027cc <I2Cx_MspInit+0x154>)
 800278e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002792:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002794:	4b0d      	ldr	r3, [pc, #52]	@ (80027cc <I2Cx_MspInit+0x154>)
 8002796:	6a1b      	ldr	r3, [r3, #32]
 8002798:	4a0c      	ldr	r2, [pc, #48]	@ (80027cc <I2Cx_MspInit+0x154>)
 800279a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800279e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80027a0:	2200      	movs	r2, #0
 80027a2:	210f      	movs	r1, #15
 80027a4:	201f      	movs	r0, #31
 80027a6:	f002 fb33 	bl	8004e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80027aa:	201f      	movs	r0, #31
 80027ac:	f002 fb4c 	bl	8004e48 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80027b0:	2200      	movs	r2, #0
 80027b2:	210f      	movs	r1, #15
 80027b4:	2020      	movs	r0, #32
 80027b6:	f002 fb2b 	bl	8004e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80027ba:	2020      	movs	r0, #32
 80027bc:	f002 fb44 	bl	8004e48 <HAL_NVIC_EnableIRQ>
}
 80027c0:	bf00      	nop
 80027c2:	3730      	adds	r7, #48	@ 0x30
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	200007b4 	.word	0x200007b4
 80027cc:	40023800 	.word	0x40023800
 80027d0:	40021c00 	.word	0x40021c00
 80027d4:	40020400 	.word	0x40020400

080027d8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f004 fa07 	bl	8006bf4 <HAL_I2C_GetState>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d125      	bne.n	8002838 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a14      	ldr	r2, [pc, #80]	@ (8002840 <I2Cx_Init+0x68>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d103      	bne.n	80027fc <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a13      	ldr	r2, [pc, #76]	@ (8002844 <I2Cx_Init+0x6c>)
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	e002      	b.n	8002802 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a12      	ldr	r2, [pc, #72]	@ (8002848 <I2Cx_Init+0x70>)
 8002800:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a11      	ldr	r2, [pc, #68]	@ (800284c <I2Cx_Init+0x74>)
 8002806:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff ff23 	bl	8002678 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f003 fef0 	bl	8006618 <HAL_I2C_Init>
  }
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	200007b4 	.word	0x200007b4
 8002844:	40005c00 	.word	0x40005c00
 8002848:	40005400 	.word	0x40005400
 800284c:	40912732 	.word	0x40912732

08002850 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b08a      	sub	sp, #40	@ 0x28
 8002854:	af04      	add	r7, sp, #16
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	4608      	mov	r0, r1
 800285a:	4611      	mov	r1, r2
 800285c:	461a      	mov	r2, r3
 800285e:	4603      	mov	r3, r0
 8002860:	72fb      	strb	r3, [r7, #11]
 8002862:	460b      	mov	r3, r1
 8002864:	813b      	strh	r3, [r7, #8]
 8002866:	4613      	mov	r3, r2
 8002868:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800286e:	7afb      	ldrb	r3, [r7, #11]
 8002870:	b299      	uxth	r1, r3
 8002872:	88f8      	ldrh	r0, [r7, #6]
 8002874:	893a      	ldrh	r2, [r7, #8]
 8002876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800287a:	9302      	str	r3, [sp, #8]
 800287c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800287e:	9301      	str	r3, [sp, #4]
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	9300      	str	r3, [sp, #0]
 8002884:	4603      	mov	r3, r0
 8002886:	68f8      	ldr	r0, [r7, #12]
 8002888:	f004 f89a 	bl	80069c0 <HAL_I2C_Mem_Read>
 800288c:	4603      	mov	r3, r0
 800288e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002890:	7dfb      	ldrb	r3, [r7, #23]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d004      	beq.n	80028a0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002896:	7afb      	ldrb	r3, [r7, #11]
 8002898:	4619      	mov	r1, r3
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f832 	bl	8002904 <I2Cx_Error>
  }
  return status;    
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b08a      	sub	sp, #40	@ 0x28
 80028ae:	af04      	add	r7, sp, #16
 80028b0:	60f8      	str	r0, [r7, #12]
 80028b2:	4608      	mov	r0, r1
 80028b4:	4611      	mov	r1, r2
 80028b6:	461a      	mov	r2, r3
 80028b8:	4603      	mov	r3, r0
 80028ba:	72fb      	strb	r3, [r7, #11]
 80028bc:	460b      	mov	r3, r1
 80028be:	813b      	strh	r3, [r7, #8]
 80028c0:	4613      	mov	r3, r2
 80028c2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80028c8:	7afb      	ldrb	r3, [r7, #11]
 80028ca:	b299      	uxth	r1, r3
 80028cc:	88f8      	ldrh	r0, [r7, #6]
 80028ce:	893a      	ldrh	r2, [r7, #8]
 80028d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028d4:	9302      	str	r3, [sp, #8]
 80028d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80028d8:	9301      	str	r3, [sp, #4]
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	4603      	mov	r3, r0
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f003 ff59 	bl	8006798 <HAL_I2C_Mem_Write>
 80028e6:	4603      	mov	r3, r0
 80028e8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d004      	beq.n	80028fa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80028f0:	7afb      	ldrb	r3, [r7, #11]
 80028f2:	4619      	mov	r1, r3
 80028f4:	68f8      	ldr	r0, [r7, #12]
 80028f6:	f000 f805 	bl	8002904 <I2Cx_Error>
  }
  return status;
 80028fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f003 ff11 	bl	8006738 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff5e 	bl	80027d8 <I2Cx_Init>
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002928:	4802      	ldr	r0, [pc, #8]	@ (8002934 <TS_IO_Init+0x10>)
 800292a:	f7ff ff55 	bl	80027d8 <I2Cx_Init>
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	200007b4 	.word	0x200007b4

08002938 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af02      	add	r7, sp, #8
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
 8002942:	460b      	mov	r3, r1
 8002944:	71bb      	strb	r3, [r7, #6]
 8002946:	4613      	mov	r3, r2
 8002948:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800294a:	79bb      	ldrb	r3, [r7, #6]
 800294c:	b29a      	uxth	r2, r3
 800294e:	79f9      	ldrb	r1, [r7, #7]
 8002950:	2301      	movs	r3, #1
 8002952:	9301      	str	r3, [sp, #4]
 8002954:	1d7b      	adds	r3, r7, #5
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	2301      	movs	r3, #1
 800295a:	4803      	ldr	r0, [pc, #12]	@ (8002968 <TS_IO_Write+0x30>)
 800295c:	f7ff ffa5 	bl	80028aa <I2Cx_WriteMultiple>
}
 8002960:	bf00      	nop
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	200007b4 	.word	0x200007b4

0800296c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af02      	add	r7, sp, #8
 8002972:	4603      	mov	r3, r0
 8002974:	460a      	mov	r2, r1
 8002976:	71fb      	strb	r3, [r7, #7]
 8002978:	4613      	mov	r3, r2
 800297a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800297c:	2300      	movs	r3, #0
 800297e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002980:	79bb      	ldrb	r3, [r7, #6]
 8002982:	b29a      	uxth	r2, r3
 8002984:	79f9      	ldrb	r1, [r7, #7]
 8002986:	2301      	movs	r3, #1
 8002988:	9301      	str	r3, [sp, #4]
 800298a:	f107 030f 	add.w	r3, r7, #15
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	2301      	movs	r3, #1
 8002992:	4804      	ldr	r0, [pc, #16]	@ (80029a4 <TS_IO_Read+0x38>)
 8002994:	f7ff ff5c 	bl	8002850 <I2Cx_ReadMultiple>

  return read_value;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	200007b4 	.word	0x200007b4

080029a8 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f001 febd 	bl	8004730 <HAL_Delay>
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80029c4:	4b31      	ldr	r3, [pc, #196]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 80029c6:	2228      	movs	r2, #40	@ 0x28
 80029c8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80029ca:	4b30      	ldr	r3, [pc, #192]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 80029cc:	2209      	movs	r2, #9
 80029ce:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80029d0:	4b2e      	ldr	r3, [pc, #184]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 80029d2:	2235      	movs	r2, #53	@ 0x35
 80029d4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80029d6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 80029d8:	220b      	movs	r2, #11
 80029da:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80029dc:	4b2b      	ldr	r3, [pc, #172]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 80029de:	f240 121b 	movw	r2, #283	@ 0x11b
 80029e2:	629a      	str	r2, [r3, #40]	@ 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80029e4:	4b29      	ldr	r3, [pc, #164]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 80029e6:	f240 2215 	movw	r2, #533	@ 0x215
 80029ea:	625a      	str	r2, [r3, #36]	@ 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 80029ec:	4b27      	ldr	r3, [pc, #156]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 80029ee:	f240 121d 	movw	r2, #285	@ 0x11d
 80029f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80029f4:	4b25      	ldr	r3, [pc, #148]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 80029f6:	f240 2235 	movw	r2, #565	@ 0x235
 80029fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80029fc:	2100      	movs	r1, #0
 80029fe:	4823      	ldr	r0, [pc, #140]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a00:	f000 fbd4 	bl	80031ac <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002a04:	4b21      	ldr	r3, [pc, #132]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a06:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002a0a:	661a      	str	r2, [r3, #96]	@ 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a0e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8002a12:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002a14:	4b1d      	ldr	r3, [pc, #116]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002a24:	4b19      	ldr	r3, [pc, #100]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002a2c:	4b17      	ldr	r3, [pc, #92]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002a32:	4b16      	ldr	r3, [pc, #88]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002a38:	4b14      	ldr	r3, [pc, #80]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002a3e:	4b13      	ldr	r3, [pc, #76]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002a44:	4b11      	ldr	r3, [pc, #68]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a46:	4a12      	ldr	r2, [pc, #72]	@ (8002a90 <BSP_LCD_Init+0xd0>)
 8002a48:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002a4a:	4810      	ldr	r0, [pc, #64]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a4c:	f004 fde2 	bl	8007614 <HAL_LTDC_GetState>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d103      	bne.n	8002a5e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002a56:	2100      	movs	r1, #0
 8002a58:	480c      	ldr	r0, [pc, #48]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a5a:	f000 facd 	bl	8002ff8 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002a5e:	480b      	ldr	r0, [pc, #44]	@ (8002a8c <BSP_LCD_Init+0xcc>)
 8002a60:	f004 fc08 	bl	8007274 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002a64:	2201      	movs	r2, #1
 8002a66:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a6a:	480a      	ldr	r0, [pc, #40]	@ (8002a94 <BSP_LCD_Init+0xd4>)
 8002a6c:	f003 fdba 	bl	80065e4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002a70:	2201      	movs	r2, #1
 8002a72:	2108      	movs	r1, #8
 8002a74:	4808      	ldr	r0, [pc, #32]	@ (8002a98 <BSP_LCD_Init+0xd8>)
 8002a76:	f003 fdb5 	bl	80065e4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002a7a:	f000 fcb7 	bl	80033ec <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002a7e:	4807      	ldr	r0, [pc, #28]	@ (8002a9c <BSP_LCD_Init+0xdc>)
 8002a80:	f000 f8d8 	bl	8002c34 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20000808 	.word	0x20000808
 8002a90:	40016800 	.word	0x40016800
 8002a94:	40022000 	.word	0x40022000
 8002a98:	40022800 	.word	0x40022800
 8002a9c:	20000028 	.word	0x20000028

08002aa0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002aa4:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <BSP_LCD_GetXSize+0x20>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a06      	ldr	r2, [pc, #24]	@ (8002ac4 <BSP_LCD_GetXSize+0x24>)
 8002aaa:	2134      	movs	r1, #52	@ 0x34
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3360      	adds	r3, #96	@ 0x60
 8002ab4:	681b      	ldr	r3, [r3, #0]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	200008f0 	.word	0x200008f0
 8002ac4:	20000808 	.word	0x20000808

08002ac8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002acc:	4b06      	ldr	r3, [pc, #24]	@ (8002ae8 <BSP_LCD_GetYSize+0x20>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a06      	ldr	r2, [pc, #24]	@ (8002aec <BSP_LCD_GetYSize+0x24>)
 8002ad2:	2134      	movs	r1, #52	@ 0x34
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	3364      	adds	r3, #100	@ 0x64
 8002adc:	681b      	ldr	r3, [r3, #0]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	200008f0 	.word	0x200008f0
 8002aec:	20000808 	.word	0x20000808

08002af0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b090      	sub	sp, #64	@ 0x40
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002b00:	f7ff ffce 	bl	8002aa0 <BSP_LCD_GetXSize>
 8002b04:	4603      	mov	r3, r0
 8002b06:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002b0c:	f7ff ffdc 	bl	8002ac8 <BSP_LCD_GetYSize>
 8002b10:	4603      	mov	r3, r0
 8002b12:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	633b      	str	r3, [r7, #48]	@ 0x30
  layer_cfg.Alpha = 255;
 8002b1c:	23ff      	movs	r3, #255	@ 0xff
 8002b1e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	627b      	str	r3, [r7, #36]	@ 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002b36:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002b3c:	2307      	movs	r3, #7
 8002b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002b40:	f7ff ffae 	bl	8002aa0 <BSP_LCD_GetXSize>
 8002b44:	4603      	mov	r3, r0
 8002b46:	637b      	str	r3, [r7, #52]	@ 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002b48:	f7ff ffbe 	bl	8002ac8 <BSP_LCD_GetYSize>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002b50:	88fa      	ldrh	r2, [r7, #6]
 8002b52:	f107 030c 	add.w	r3, r7, #12
 8002b56:	4619      	mov	r1, r3
 8002b58:	4812      	ldr	r0, [pc, #72]	@ (8002ba4 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002b5a:	f004 fd1d 	bl	8007598 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002b5e:	88fa      	ldrh	r2, [r7, #6]
 8002b60:	4911      	ldr	r1, [pc, #68]	@ (8002ba8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002b62:	4613      	mov	r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	4413      	add	r3, r2
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b72:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002b74:	88fa      	ldrh	r2, [r7, #6]
 8002b76:	490c      	ldr	r1, [pc, #48]	@ (8002ba8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002b78:	4613      	mov	r3, r2
 8002b7a:	005b      	lsls	r3, r3, #1
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	3308      	adds	r3, #8
 8002b84:	4a09      	ldr	r2, [pc, #36]	@ (8002bac <BSP_LCD_LayerDefaultInit+0xbc>)
 8002b86:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002b88:	88fa      	ldrh	r2, [r7, #6]
 8002b8a:	4907      	ldr	r1, [pc, #28]	@ (8002ba8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	440b      	add	r3, r1
 8002b96:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8002b9a:	601a      	str	r2, [r3, #0]
}
 8002b9c:	bf00      	nop
 8002b9e:	3740      	adds	r7, #64	@ 0x40
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000808 	.word	0x20000808
 8002ba8:	200008f4 	.word	0x200008f4
 8002bac:	20000028 	.word	0x20000028

08002bb0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002bb8:	4a04      	ldr	r2, [pc, #16]	@ (8002bcc <BSP_LCD_SelectLayer+0x1c>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
} 
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	200008f0 	.word	0x200008f0

08002bd0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002bd8:	4b07      	ldr	r3, [pc, #28]	@ (8002bf8 <BSP_LCD_SetTextColor+0x28>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4907      	ldr	r1, [pc, #28]	@ (8002bfc <BSP_LCD_SetTextColor+0x2c>)
 8002bde:	4613      	mov	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	440b      	add	r3, r1
 8002be8:	687a      	ldr	r2, [r7, #4]
 8002bea:	601a      	str	r2, [r3, #0]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	200008f0 	.word	0x200008f0
 8002bfc:	200008f4 	.word	0x200008f4

08002c00 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002c08:	4b08      	ldr	r3, [pc, #32]	@ (8002c2c <BSP_LCD_SetBackColor+0x2c>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	4908      	ldr	r1, [pc, #32]	@ (8002c30 <BSP_LCD_SetBackColor+0x30>)
 8002c0e:	4613      	mov	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	4413      	add	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	440b      	add	r3, r1
 8002c18:	3304      	adds	r3, #4
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	601a      	str	r2, [r3, #0]
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	200008f0 	.word	0x200008f0
 8002c30:	200008f4 	.word	0x200008f4

08002c34 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002c3c:	4b08      	ldr	r3, [pc, #32]	@ (8002c60 <BSP_LCD_SetFont+0x2c>)
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	4908      	ldr	r1, [pc, #32]	@ (8002c64 <BSP_LCD_SetFont+0x30>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3308      	adds	r3, #8
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	601a      	str	r2, [r3, #0]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	200008f0 	.word	0x200008f0
 8002c64:	200008f4 	.word	0x200008f4

08002c68 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002c6c:	4b07      	ldr	r3, [pc, #28]	@ (8002c8c <BSP_LCD_GetFont+0x24>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4907      	ldr	r1, [pc, #28]	@ (8002c90 <BSP_LCD_GetFont+0x28>)
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3308      	adds	r3, #8
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	200008f0 	.word	0x200008f0
 8002c90:	200008f4 	.word	0x200008f4

08002c94 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002cdc <BSP_LCD_Clear+0x48>)
 8002c9e:	681c      	ldr	r4, [r3, #0]
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cdc <BSP_LCD_Clear+0x48>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce0 <BSP_LCD_Clear+0x4c>)
 8002ca6:	2134      	movs	r1, #52	@ 0x34
 8002ca8:	fb01 f303 	mul.w	r3, r1, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	335c      	adds	r3, #92	@ 0x5c
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	461e      	mov	r6, r3
 8002cb4:	f7ff fef4 	bl	8002aa0 <BSP_LCD_GetXSize>
 8002cb8:	4605      	mov	r5, r0
 8002cba:	f7ff ff05 	bl	8002ac8 <BSP_LCD_GetYSize>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	9301      	str	r3, [sp, #4]
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	462a      	mov	r2, r5
 8002ccc:	4631      	mov	r1, r6
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f000 fb40 	bl	8003354 <LL_FillBuffer>
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cdc:	200008f0 	.word	0x200008f0
 8002ce0:	20000808 	.word	0x20000808

08002ce4 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002ce4:	b590      	push	{r4, r7, lr}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	80fb      	strh	r3, [r7, #6]
 8002cee:	460b      	mov	r3, r1
 8002cf0:	80bb      	strh	r3, [r7, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <BSP_LCD_DisplayChar+0x80>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	491b      	ldr	r1, [pc, #108]	@ (8002d68 <BSP_LCD_DisplayChar+0x84>)
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	3308      	adds	r3, #8
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6819      	ldr	r1, [r3, #0]
 8002d0c:	78fb      	ldrb	r3, [r7, #3]
 8002d0e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d12:	4b14      	ldr	r3, [pc, #80]	@ (8002d64 <BSP_LCD_DisplayChar+0x80>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	4c14      	ldr	r4, [pc, #80]	@ (8002d68 <BSP_LCD_DisplayChar+0x84>)
 8002d18:	4613      	mov	r3, r2
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4423      	add	r3, r4
 8002d22:	3308      	adds	r3, #8
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d28:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002d64 <BSP_LCD_DisplayChar+0x80>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	4c0d      	ldr	r4, [pc, #52]	@ (8002d68 <BSP_LCD_DisplayChar+0x84>)
 8002d32:	4613      	mov	r3, r2
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4413      	add	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4423      	add	r3, r4
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	889b      	ldrh	r3, [r3, #4]
 8002d42:	3307      	adds	r3, #7
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	da00      	bge.n	8002d4a <BSP_LCD_DisplayChar+0x66>
 8002d48:	3307      	adds	r3, #7
 8002d4a:	10db      	asrs	r3, r3, #3
 8002d4c:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002d50:	18ca      	adds	r2, r1, r3
 8002d52:	88b9      	ldrh	r1, [r7, #4]
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fa44 	bl	80031e4 <DrawChar>
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd90      	pop	{r4, r7, pc}
 8002d64:	200008f0 	.word	0x200008f0
 8002d68:	200008f4 	.word	0x200008f4

08002d6c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	b088      	sub	sp, #32
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60ba      	str	r2, [r7, #8]
 8002d74:	461a      	mov	r2, r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	81fb      	strh	r3, [r7, #14]
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	81bb      	strh	r3, [r7, #12]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002d82:	2301      	movs	r3, #1
 8002d84:	83fb      	strh	r3, [r7, #30]
 8002d86:	2300      	movs	r3, #0
 8002d88:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61bb      	str	r3, [r7, #24]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002d96:	e002      	b.n	8002d9e <BSP_LCD_DisplayStringAt+0x32>
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	61bb      	str	r3, [r7, #24]
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	617a      	str	r2, [r7, #20]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f6      	bne.n	8002d98 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002daa:	f7ff fe79 	bl	8002aa0 <BSP_LCD_GetXSize>
 8002dae:	4601      	mov	r1, r0
 8002db0:	4b50      	ldr	r3, [pc, #320]	@ (8002ef4 <BSP_LCD_DisplayStringAt+0x188>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4850      	ldr	r0, [pc, #320]	@ (8002ef8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002db6:	4613      	mov	r3, r2
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	4413      	add	r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	4403      	add	r3, r0
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	889b      	ldrh	r3, [r3, #4]
 8002dc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dca:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d01c      	beq.n	8002e0c <BSP_LCD_DisplayStringAt+0xa0>
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	dc33      	bgt.n	8002e3e <BSP_LCD_DisplayStringAt+0xd2>
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d002      	beq.n	8002de0 <BSP_LCD_DisplayStringAt+0x74>
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d019      	beq.n	8002e12 <BSP_LCD_DisplayStringAt+0xa6>
 8002dde:	e02e      	b.n	8002e3e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	1ad1      	subs	r1, r2, r3
 8002de6:	4b43      	ldr	r3, [pc, #268]	@ (8002ef4 <BSP_LCD_DisplayStringAt+0x188>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4843      	ldr	r0, [pc, #268]	@ (8002ef8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4403      	add	r3, r0
 8002df6:	3308      	adds	r3, #8
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	889b      	ldrh	r3, [r3, #4]
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	89fb      	ldrh	r3, [r7, #14]
 8002e06:	4413      	add	r3, r2
 8002e08:	83fb      	strh	r3, [r7, #30]
      break;
 8002e0a:	e01b      	b.n	8002e44 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002e0c:	89fb      	ldrh	r3, [r7, #14]
 8002e0e:	83fb      	strh	r3, [r7, #30]
      break;
 8002e10:	e018      	b.n	8002e44 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	b299      	uxth	r1, r3
 8002e1a:	4b36      	ldr	r3, [pc, #216]	@ (8002ef4 <BSP_LCD_DisplayStringAt+0x188>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4836      	ldr	r0, [pc, #216]	@ (8002ef8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4403      	add	r3, r0
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	889b      	ldrh	r3, [r3, #4]
 8002e30:	fb11 f303 	smulbb	r3, r1, r3
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	89fb      	ldrh	r3, [r7, #14]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	83fb      	strh	r3, [r7, #30]
      break;
 8002e3c:	e002      	b.n	8002e44 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002e3e:	89fb      	ldrh	r3, [r7, #14]
 8002e40:	83fb      	strh	r3, [r7, #30]
      break;
 8002e42:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002e44:	8bfb      	ldrh	r3, [r7, #30]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <BSP_LCD_DisplayStringAt+0xe6>
 8002e4a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	da1d      	bge.n	8002e8e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002e56:	e01a      	b.n	8002e8e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	89b9      	ldrh	r1, [r7, #12]
 8002e5e:	8bfb      	ldrh	r3, [r7, #30]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff3f 	bl	8002ce4 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002e66:	4b23      	ldr	r3, [pc, #140]	@ (8002ef4 <BSP_LCD_DisplayStringAt+0x188>)
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	4923      	ldr	r1, [pc, #140]	@ (8002ef8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	3308      	adds	r3, #8
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	889a      	ldrh	r2, [r3, #4]
 8002e7c:	8bfb      	ldrh	r3, [r7, #30]
 8002e7e:	4413      	add	r3, r2
 8002e80:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
    i++;
 8002e88:	8bbb      	ldrh	r3, [r7, #28]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bf14      	ite	ne
 8002e96:	2301      	movne	r3, #1
 8002e98:	2300      	moveq	r3, #0
 8002e9a:	b2dc      	uxtb	r4, r3
 8002e9c:	f7ff fe00 	bl	8002aa0 <BSP_LCD_GetXSize>
 8002ea0:	8bb9      	ldrh	r1, [r7, #28]
 8002ea2:	4b14      	ldr	r3, [pc, #80]	@ (8002ef4 <BSP_LCD_DisplayStringAt+0x188>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4d14      	ldr	r5, [pc, #80]	@ (8002ef8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	4413      	add	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	442b      	add	r3, r5
 8002eb2:	3308      	adds	r3, #8
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	889b      	ldrh	r3, [r3, #4]
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	1ac3      	subs	r3, r0, r3
 8002ebe:	b299      	uxth	r1, r3
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef4 <BSP_LCD_DisplayStringAt+0x188>)
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	480c      	ldr	r0, [pc, #48]	@ (8002ef8 <BSP_LCD_DisplayStringAt+0x18c>)
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4403      	add	r3, r0
 8002ed0:	3308      	adds	r3, #8
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	889b      	ldrh	r3, [r3, #4]
 8002ed6:	4299      	cmp	r1, r3
 8002ed8:	bf2c      	ite	cs
 8002eda:	2301      	movcs	r3, #1
 8002edc:	2300      	movcc	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	4023      	ands	r3, r4
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1b7      	bne.n	8002e58 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	200008f0 	.word	0x200008f0
 8002ef8:	200008f4 	.word	0x200008f4

08002efc <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4603      	mov	r3, r0
 8002f04:	6039      	str	r1, [r7, #0]
 8002f06:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002f08:	f7ff feae 	bl	8002c68 <BSP_LCD_GetFont>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	88db      	ldrh	r3, [r3, #6]
 8002f10:	88fa      	ldrh	r2, [r7, #6]
 8002f12:	fb12 f303 	smulbb	r3, r2, r3
 8002f16:	b299      	uxth	r1, r3
 8002f18:	2303      	movs	r3, #3
 8002f1a:	683a      	ldr	r2, [r7, #0]
 8002f1c:	2000      	movs	r0, #0
 8002f1e:	f7ff ff25 	bl	8002d6c <BSP_LCD_DisplayStringAt>
}
 8002f22:	bf00      	nop
 8002f24:	3708      	adds	r7, #8
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002f2c:	b5b0      	push	{r4, r5, r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	603a      	str	r2, [r7, #0]
 8002f36:	80fb      	strh	r3, [r7, #6]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002f3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <BSP_LCD_DrawPixel+0x88>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1d      	ldr	r2, [pc, #116]	@ (8002fb8 <BSP_LCD_DrawPixel+0x8c>)
 8002f42:	2134      	movs	r1, #52	@ 0x34
 8002f44:	fb01 f303 	mul.w	r3, r1, r3
 8002f48:	4413      	add	r3, r2
 8002f4a:	3348      	adds	r3, #72	@ 0x48
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d116      	bne.n	8002f80 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002f52:	4b18      	ldr	r3, [pc, #96]	@ (8002fb4 <BSP_LCD_DrawPixel+0x88>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a18      	ldr	r2, [pc, #96]	@ (8002fb8 <BSP_LCD_DrawPixel+0x8c>)
 8002f58:	2134      	movs	r1, #52	@ 0x34
 8002f5a:	fb01 f303 	mul.w	r3, r1, r3
 8002f5e:	4413      	add	r3, r2
 8002f60:	335c      	adds	r3, #92	@ 0x5c
 8002f62:	681c      	ldr	r4, [r3, #0]
 8002f64:	88bd      	ldrh	r5, [r7, #4]
 8002f66:	f7ff fd9b 	bl	8002aa0 <BSP_LCD_GetXSize>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	fb03 f205 	mul.w	r2, r3, r5
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	4413      	add	r3, r2
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	4423      	add	r3, r4
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002f7e:	e015      	b.n	8002fac <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f80:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb4 <BSP_LCD_DrawPixel+0x88>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0c      	ldr	r2, [pc, #48]	@ (8002fb8 <BSP_LCD_DrawPixel+0x8c>)
 8002f86:	2134      	movs	r1, #52	@ 0x34
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	335c      	adds	r3, #92	@ 0x5c
 8002f90:	681c      	ldr	r4, [r3, #0]
 8002f92:	88bd      	ldrh	r5, [r7, #4]
 8002f94:	f7ff fd84 	bl	8002aa0 <BSP_LCD_GetXSize>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	fb03 f205 	mul.w	r2, r3, r5
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4423      	add	r3, r4
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6013      	str	r3, [r2, #0]
}
 8002fac:	bf00      	nop
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb4:	200008f0 	.word	0x200008f0
 8002fb8:	20000808 	.word	0x20000808

08002fbc <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <BSP_LCD_DisplayOn+0x30>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	4b09      	ldr	r3, [pc, #36]	@ (8002fec <BSP_LCD_DisplayOn+0x30>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fd6:	4806      	ldr	r0, [pc, #24]	@ (8002ff0 <BSP_LCD_DisplayOn+0x34>)
 8002fd8:	f003 fb04 	bl	80065e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8002fdc:	2201      	movs	r2, #1
 8002fde:	2108      	movs	r1, #8
 8002fe0:	4804      	ldr	r0, [pc, #16]	@ (8002ff4 <BSP_LCD_DisplayOn+0x38>)
 8002fe2:	f003 faff 	bl	80065e4 <HAL_GPIO_WritePin>
}
 8002fe6:	bf00      	nop
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	20000808 	.word	0x20000808
 8002ff0:	40022000 	.word	0x40022000
 8002ff4:	40022800 	.word	0x40022800

08002ff8 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b090      	sub	sp, #64	@ 0x40
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003002:	4b64      	ldr	r3, [pc, #400]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003006:	4a63      	ldr	r2, [pc, #396]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003008:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800300c:	6453      	str	r3, [r2, #68]	@ 0x44
 800300e:	4b61      	ldr	r3, [pc, #388]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003012:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003016:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800301a:	4b5e      	ldr	r3, [pc, #376]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301e:	4a5d      	ldr	r2, [pc, #372]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003020:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003024:	6313      	str	r3, [r2, #48]	@ 0x30
 8003026:	4b5b      	ldr	r3, [pc, #364]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800302e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003032:	4b58      	ldr	r3, [pc, #352]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	4a57      	ldr	r2, [pc, #348]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003038:	f043 0310 	orr.w	r3, r3, #16
 800303c:	6313      	str	r3, [r2, #48]	@ 0x30
 800303e:	4b55      	ldr	r3, [pc, #340]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	f003 0310 	and.w	r3, r3, #16
 8003046:	623b      	str	r3, [r7, #32]
 8003048:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800304a:	4b52      	ldr	r3, [pc, #328]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	4a51      	ldr	r2, [pc, #324]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003050:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003054:	6313      	str	r3, [r2, #48]	@ 0x30
 8003056:	4b4f      	ldr	r3, [pc, #316]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800305a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800305e:	61fb      	str	r3, [r7, #28]
 8003060:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003062:	4b4c      	ldr	r3, [pc, #304]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003066:	4a4b      	ldr	r2, [pc, #300]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800306c:	6313      	str	r3, [r2, #48]	@ 0x30
 800306e:	4b49      	ldr	r3, [pc, #292]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800307a:	4b46      	ldr	r3, [pc, #280]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 800307c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307e:	4a45      	ldr	r2, [pc, #276]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003080:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003084:	6313      	str	r3, [r2, #48]	@ 0x30
 8003086:	4b43      	ldr	r3, [pc, #268]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800308e:	617b      	str	r3, [r7, #20]
 8003090:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003092:	4b40      	ldr	r3, [pc, #256]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003096:	4a3f      	ldr	r2, [pc, #252]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 8003098:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800309c:	6313      	str	r3, [r2, #48]	@ 0x30
 800309e:	4b3d      	ldr	r3, [pc, #244]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80030aa:	4b3a      	ldr	r3, [pc, #232]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 80030ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ae:	4a39      	ldr	r2, [pc, #228]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80030b6:	4b37      	ldr	r3, [pc, #220]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 80030b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030be:	60fb      	str	r3, [r7, #12]
 80030c0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80030c2:	4b34      	ldr	r3, [pc, #208]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 80030c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c6:	4a33      	ldr	r2, [pc, #204]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 80030c8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80030ce:	4b31      	ldr	r3, [pc, #196]	@ (8003194 <BSP_LCD_MspInit+0x19c>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80030da:	2310      	movs	r3, #16
 80030dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80030de:	2302      	movs	r3, #2
 80030e0:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80030e6:	2302      	movs	r3, #2
 80030e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80030ea:	230e      	movs	r3, #14
 80030ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80030ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80030f2:	4619      	mov	r1, r3
 80030f4:	4828      	ldr	r0, [pc, #160]	@ (8003198 <BSP_LCD_MspInit+0x1a0>)
 80030f6:	f002 ffa5 	bl	8006044 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80030fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003100:	2302      	movs	r3, #2
 8003102:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003104:	2309      	movs	r3, #9
 8003106:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003108:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800310c:	4619      	mov	r1, r3
 800310e:	4823      	ldr	r0, [pc, #140]	@ (800319c <BSP_LCD_MspInit+0x1a4>)
 8003110:	f002 ff98 	bl	8006044 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003114:	f44f 4366 	mov.w	r3, #58880	@ 0xe600
 8003118:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800311a:	2302      	movs	r3, #2
 800311c:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800311e:	230e      	movs	r3, #14
 8003120:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003122:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003126:	4619      	mov	r1, r3
 8003128:	481d      	ldr	r0, [pc, #116]	@ (80031a0 <BSP_LCD_MspInit+0x1a8>)
 800312a:	f002 ff8b 	bl	8006044 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800312e:	f64e 73ff 	movw	r3, #61439	@ 0xefff
 8003132:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003134:	2302      	movs	r3, #2
 8003136:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003138:	230e      	movs	r3, #14
 800313a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800313c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003140:	4619      	mov	r1, r3
 8003142:	4818      	ldr	r0, [pc, #96]	@ (80031a4 <BSP_LCD_MspInit+0x1ac>)
 8003144:	f002 ff7e 	bl	8006044 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003148:	23f7      	movs	r3, #247	@ 0xf7
 800314a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800314c:	2302      	movs	r3, #2
 800314e:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003150:	230e      	movs	r3, #14
 8003152:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003154:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003158:	4619      	mov	r1, r3
 800315a:	4813      	ldr	r0, [pc, #76]	@ (80031a8 <BSP_LCD_MspInit+0x1b0>)
 800315c:	f002 ff72 	bl	8006044 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003164:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003166:	2301      	movs	r3, #1
 8003168:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800316a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800316e:	4619      	mov	r1, r3
 8003170:	480b      	ldr	r0, [pc, #44]	@ (80031a0 <BSP_LCD_MspInit+0x1a8>)
 8003172:	f002 ff67 	bl	8006044 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003176:	2308      	movs	r3, #8
 8003178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800317a:	2301      	movs	r3, #1
 800317c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800317e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003182:	4619      	mov	r1, r3
 8003184:	4808      	ldr	r0, [pc, #32]	@ (80031a8 <BSP_LCD_MspInit+0x1b0>)
 8003186:	f002 ff5d 	bl	8006044 <HAL_GPIO_Init>
}
 800318a:	bf00      	nop
 800318c:	3740      	adds	r7, #64	@ 0x40
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40023800 	.word	0x40023800
 8003198:	40021000 	.word	0x40021000
 800319c:	40021800 	.word	0x40021800
 80031a0:	40022000 	.word	0x40022000
 80031a4:	40022400 	.word	0x40022400
 80031a8:	40022800 	.word	0x40022800

080031ac <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80031b6:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <BSP_LCD_ClockConfig+0x34>)
 80031b8:	2208      	movs	r2, #8
 80031ba:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80031bc:	4b08      	ldr	r3, [pc, #32]	@ (80031e0 <BSP_LCD_ClockConfig+0x34>)
 80031be:	22c0      	movs	r2, #192	@ 0xc0
 80031c0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80031c2:	4b07      	ldr	r3, [pc, #28]	@ (80031e0 <BSP_LCD_ClockConfig+0x34>)
 80031c4:	2205      	movs	r2, #5
 80031c6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80031c8:	4b05      	ldr	r3, [pc, #20]	@ (80031e0 <BSP_LCD_ClockConfig+0x34>)
 80031ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80031ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80031d0:	4803      	ldr	r0, [pc, #12]	@ (80031e0 <BSP_LCD_ClockConfig+0x34>)
 80031d2:	f005 f8e3 	bl	800839c <HAL_RCCEx_PeriphCLKConfig>
}
 80031d6:	bf00      	nop
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	2000090c 	.word	0x2000090c

080031e4 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	4603      	mov	r3, r0
 80031ec:	603a      	str	r2, [r7, #0]
 80031ee:	80fb      	strh	r3, [r7, #6]
 80031f0:	460b      	mov	r3, r1
 80031f2:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80031f4:	2300      	movs	r3, #0
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	2300      	movs	r3, #0
 80031fa:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80031fc:	4b53      	ldr	r3, [pc, #332]	@ (800334c <DrawChar+0x168>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4953      	ldr	r1, [pc, #332]	@ (8003350 <DrawChar+0x16c>)
 8003202:	4613      	mov	r3, r2
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	3308      	adds	r3, #8
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	88db      	ldrh	r3, [r3, #6]
 8003212:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003214:	4b4d      	ldr	r3, [pc, #308]	@ (800334c <DrawChar+0x168>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	494d      	ldr	r1, [pc, #308]	@ (8003350 <DrawChar+0x16c>)
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3308      	adds	r3, #8
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	889b      	ldrh	r3, [r3, #4]
 800322a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800322c:	8a3b      	ldrh	r3, [r7, #16]
 800322e:	3307      	adds	r3, #7
 8003230:	2b00      	cmp	r3, #0
 8003232:	da00      	bge.n	8003236 <DrawChar+0x52>
 8003234:	3307      	adds	r3, #7
 8003236:	10db      	asrs	r3, r3, #3
 8003238:	b2db      	uxtb	r3, r3
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	b2da      	uxtb	r2, r3
 800323e:	8a3b      	ldrh	r3, [r7, #16]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	e076      	b.n	800333a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800324c:	8a3b      	ldrh	r3, [r7, #16]
 800324e:	3307      	adds	r3, #7
 8003250:	2b00      	cmp	r3, #0
 8003252:	da00      	bge.n	8003256 <DrawChar+0x72>
 8003254:	3307      	adds	r3, #7
 8003256:	10db      	asrs	r3, r3, #3
 8003258:	461a      	mov	r2, r3
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	fb02 f303 	mul.w	r3, r2, r3
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	4413      	add	r3, r2
 8003264:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003266:	8a3b      	ldrh	r3, [r7, #16]
 8003268:	3307      	adds	r3, #7
 800326a:	2b00      	cmp	r3, #0
 800326c:	da00      	bge.n	8003270 <DrawChar+0x8c>
 800326e:	3307      	adds	r3, #7
 8003270:	10db      	asrs	r3, r3, #3
 8003272:	2b01      	cmp	r3, #1
 8003274:	d002      	beq.n	800327c <DrawChar+0x98>
 8003276:	2b02      	cmp	r3, #2
 8003278:	d004      	beq.n	8003284 <DrawChar+0xa0>
 800327a:	e00c      	b.n	8003296 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	617b      	str	r3, [r7, #20]
      break;
 8003282:	e016      	b.n	80032b2 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	021b      	lsls	r3, r3, #8
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	3201      	adds	r2, #1
 800328e:	7812      	ldrb	r2, [r2, #0]
 8003290:	4313      	orrs	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
      break;
 8003294:	e00d      	b.n	80032b2 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	041a      	lsls	r2, r3, #16
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	3301      	adds	r3, #1
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	021b      	lsls	r3, r3, #8
 80032a4:	4313      	orrs	r3, r2
 80032a6:	68ba      	ldr	r2, [r7, #8]
 80032a8:	3202      	adds	r2, #2
 80032aa:	7812      	ldrb	r2, [r2, #0]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	617b      	str	r3, [r7, #20]
      break;
 80032b0:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80032b2:	2300      	movs	r3, #0
 80032b4:	61bb      	str	r3, [r7, #24]
 80032b6:	e036      	b.n	8003326 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80032b8:	8a3a      	ldrh	r2, [r7, #16]
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	1ad2      	subs	r2, r2, r3
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	4413      	add	r3, r2
 80032c2:	3b01      	subs	r3, #1
 80032c4:	2201      	movs	r2, #1
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	461a      	mov	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d012      	beq.n	80032fa <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	b29a      	uxth	r2, r3
 80032d8:	88fb      	ldrh	r3, [r7, #6]
 80032da:	4413      	add	r3, r2
 80032dc:	b298      	uxth	r0, r3
 80032de:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <DrawChar+0x168>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	491b      	ldr	r1, [pc, #108]	@ (8003350 <DrawChar+0x16c>)
 80032e4:	4613      	mov	r3, r2
 80032e6:	005b      	lsls	r3, r3, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	88bb      	ldrh	r3, [r7, #4]
 80032f2:	4619      	mov	r1, r3
 80032f4:	f7ff fe1a 	bl	8002f2c <BSP_LCD_DrawPixel>
 80032f8:	e012      	b.n	8003320 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	88fb      	ldrh	r3, [r7, #6]
 8003300:	4413      	add	r3, r2
 8003302:	b298      	uxth	r0, r3
 8003304:	4b11      	ldr	r3, [pc, #68]	@ (800334c <DrawChar+0x168>)
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	4911      	ldr	r1, [pc, #68]	@ (8003350 <DrawChar+0x16c>)
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	3304      	adds	r3, #4
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	88bb      	ldrh	r3, [r7, #4]
 800331a:	4619      	mov	r1, r3
 800331c:	f7ff fe06 	bl	8002f2c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	3301      	adds	r3, #1
 8003324:	61bb      	str	r3, [r7, #24]
 8003326:	8a3b      	ldrh	r3, [r7, #16]
 8003328:	69ba      	ldr	r2, [r7, #24]
 800332a:	429a      	cmp	r2, r3
 800332c:	d3c4      	bcc.n	80032b8 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800332e:	88bb      	ldrh	r3, [r7, #4]
 8003330:	3301      	adds	r3, #1
 8003332:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	3301      	adds	r3, #1
 8003338:	61fb      	str	r3, [r7, #28]
 800333a:	8a7b      	ldrh	r3, [r7, #18]
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	429a      	cmp	r2, r3
 8003340:	d384      	bcc.n	800324c <DrawChar+0x68>
  }
}
 8003342:	bf00      	nop
 8003344:	bf00      	nop
 8003346:	3720      	adds	r7, #32
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}
 800334c:	200008f0 	.word	0x200008f0
 8003350:	200008f4 	.word	0x200008f4

08003354 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af02      	add	r7, sp, #8
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003362:	4b1e      	ldr	r3, [pc, #120]	@ (80033dc <LL_FillBuffer+0x88>)
 8003364:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003368:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800336a:	4b1d      	ldr	r3, [pc, #116]	@ (80033e0 <LL_FillBuffer+0x8c>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1d      	ldr	r2, [pc, #116]	@ (80033e4 <LL_FillBuffer+0x90>)
 8003370:	2134      	movs	r1, #52	@ 0x34
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	3348      	adds	r3, #72	@ 0x48
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2b02      	cmp	r3, #2
 800337e:	d103      	bne.n	8003388 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003380:	4b16      	ldr	r3, [pc, #88]	@ (80033dc <LL_FillBuffer+0x88>)
 8003382:	2202      	movs	r2, #2
 8003384:	609a      	str	r2, [r3, #8]
 8003386:	e002      	b.n	800338e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003388:	4b14      	ldr	r3, [pc, #80]	@ (80033dc <LL_FillBuffer+0x88>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800338e:	4a13      	ldr	r2, [pc, #76]	@ (80033dc <LL_FillBuffer+0x88>)
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003394:	4b11      	ldr	r3, [pc, #68]	@ (80033dc <LL_FillBuffer+0x88>)
 8003396:	4a14      	ldr	r2, [pc, #80]	@ (80033e8 <LL_FillBuffer+0x94>)
 8003398:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800339a:	4810      	ldr	r0, [pc, #64]	@ (80033dc <LL_FillBuffer+0x88>)
 800339c:	f002 fab6 	bl	800590c <HAL_DMA2D_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d115      	bne.n	80033d2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80033a6:	68f9      	ldr	r1, [r7, #12]
 80033a8:	480c      	ldr	r0, [pc, #48]	@ (80033dc <LL_FillBuffer+0x88>)
 80033aa:	f002 fd1d 	bl	8005de8 <HAL_DMA2D_ConfigLayer>
 80033ae:	4603      	mov	r3, r0
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d10e      	bne.n	80033d2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	9300      	str	r3, [sp, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69f9      	ldr	r1, [r7, #28]
 80033be:	4807      	ldr	r0, [pc, #28]	@ (80033dc <LL_FillBuffer+0x88>)
 80033c0:	f002 faee 	bl	80059a0 <HAL_DMA2D_Start>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80033ca:	210a      	movs	r1, #10
 80033cc:	4803      	ldr	r0, [pc, #12]	@ (80033dc <LL_FillBuffer+0x88>)
 80033ce:	f002 fb12 	bl	80059f6 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200008b0 	.word	0x200008b0
 80033e0:	200008f0 	.word	0x200008f0
 80033e4:	20000808 	.word	0x20000808
 80033e8:	4002b000 	.word	0x4002b000

080033ec <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80033f0:	4b29      	ldr	r3, [pc, #164]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 80033f2:	4a2a      	ldr	r2, [pc, #168]	@ (800349c <BSP_SDRAM_Init+0xb0>)
 80033f4:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80033f6:	4b2a      	ldr	r3, [pc, #168]	@ (80034a0 <BSP_SDRAM_Init+0xb4>)
 80033f8:	2202      	movs	r2, #2
 80033fa:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80033fc:	4b28      	ldr	r3, [pc, #160]	@ (80034a0 <BSP_SDRAM_Init+0xb4>)
 80033fe:	2207      	movs	r2, #7
 8003400:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003402:	4b27      	ldr	r3, [pc, #156]	@ (80034a0 <BSP_SDRAM_Init+0xb4>)
 8003404:	2204      	movs	r2, #4
 8003406:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003408:	4b25      	ldr	r3, [pc, #148]	@ (80034a0 <BSP_SDRAM_Init+0xb4>)
 800340a:	2207      	movs	r2, #7
 800340c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800340e:	4b24      	ldr	r3, [pc, #144]	@ (80034a0 <BSP_SDRAM_Init+0xb4>)
 8003410:	2202      	movs	r2, #2
 8003412:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003414:	4b22      	ldr	r3, [pc, #136]	@ (80034a0 <BSP_SDRAM_Init+0xb4>)
 8003416:	2202      	movs	r2, #2
 8003418:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800341a:	4b21      	ldr	r3, [pc, #132]	@ (80034a0 <BSP_SDRAM_Init+0xb4>)
 800341c:	2202      	movs	r2, #2
 800341e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003420:	4b1d      	ldr	r3, [pc, #116]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 8003422:	2200      	movs	r2, #0
 8003424:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003426:	4b1c      	ldr	r3, [pc, #112]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800342c:	4b1a      	ldr	r3, [pc, #104]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 800342e:	2204      	movs	r2, #4
 8003430:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003432:	4b19      	ldr	r3, [pc, #100]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 8003434:	2210      	movs	r2, #16
 8003436:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003438:	4b17      	ldr	r3, [pc, #92]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 800343a:	2240      	movs	r2, #64	@ 0x40
 800343c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800343e:	4b16      	ldr	r3, [pc, #88]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 8003440:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003444:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003446:	4b14      	ldr	r3, [pc, #80]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 8003448:	2200      	movs	r2, #0
 800344a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800344c:	4b12      	ldr	r3, [pc, #72]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 800344e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003452:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003454:	4b10      	ldr	r3, [pc, #64]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 8003456:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800345a:	625a      	str	r2, [r3, #36]	@ 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800345c:	4b0e      	ldr	r3, [pc, #56]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 800345e:	2200      	movs	r2, #0
 8003460:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003462:	2100      	movs	r1, #0
 8003464:	480c      	ldr	r0, [pc, #48]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 8003466:	f000 f87f 	bl	8003568 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800346a:	490d      	ldr	r1, [pc, #52]	@ (80034a0 <BSP_SDRAM_Init+0xb4>)
 800346c:	480a      	ldr	r0, [pc, #40]	@ (8003498 <BSP_SDRAM_Init+0xac>)
 800346e:	f006 fdf9 	bl	800a064 <HAL_SDRAM_Init>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003478:	4b0a      	ldr	r3, [pc, #40]	@ (80034a4 <BSP_SDRAM_Init+0xb8>)
 800347a:	2201      	movs	r2, #1
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e002      	b.n	8003486 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003480:	4b08      	ldr	r3, [pc, #32]	@ (80034a4 <BSP_SDRAM_Init+0xb8>)
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003486:	f240 6003 	movw	r0, #1539	@ 0x603
 800348a:	f000 f80d 	bl	80034a8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 800348e:	4b05      	ldr	r3, [pc, #20]	@ (80034a4 <BSP_SDRAM_Init+0xb8>)
 8003490:	781b      	ldrb	r3, [r3, #0]
}
 8003492:	4618      	mov	r0, r3
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000990 	.word	0x20000990
 800349c:	a0000140 	.word	0xa0000140
 80034a0:	200009c4 	.word	0x200009c4
 80034a4:	20000030 	.word	0x20000030

080034a8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80034b0:	2300      	movs	r3, #0
 80034b2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80034b4:	4b2a      	ldr	r3, [pc, #168]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034b6:	2201      	movs	r2, #1
 80034b8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80034ba:	4b29      	ldr	r3, [pc, #164]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034bc:	2210      	movs	r2, #16
 80034be:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80034c0:	4b27      	ldr	r3, [pc, #156]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80034c6:	4b26      	ldr	r3, [pc, #152]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80034cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034d0:	4923      	ldr	r1, [pc, #140]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034d2:	4824      	ldr	r0, [pc, #144]	@ (8003564 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034d4:	f006 fdfa 	bl	800a0cc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80034d8:	2001      	movs	r0, #1
 80034da:	f001 f929 	bl	8004730 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80034de:	4b20      	ldr	r3, [pc, #128]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034e0:	2202      	movs	r2, #2
 80034e2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80034e4:	4b1e      	ldr	r3, [pc, #120]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034e6:	2210      	movs	r2, #16
 80034e8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80034ea:	4b1d      	ldr	r3, [pc, #116]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034ec:	2201      	movs	r2, #1
 80034ee:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80034f0:	4b1b      	ldr	r3, [pc, #108]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80034f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034fa:	4919      	ldr	r1, [pc, #100]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80034fc:	4819      	ldr	r0, [pc, #100]	@ (8003564 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80034fe:	f006 fde5 	bl	800a0cc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003502:	4b17      	ldr	r3, [pc, #92]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003504:	2203      	movs	r2, #3
 8003506:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003508:	4b15      	ldr	r3, [pc, #84]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800350a:	2210      	movs	r2, #16
 800350c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800350e:	4b14      	ldr	r3, [pc, #80]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003510:	2208      	movs	r2, #8
 8003512:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003514:	4b12      	ldr	r3, [pc, #72]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003516:	2200      	movs	r2, #0
 8003518:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800351a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800351e:	4910      	ldr	r1, [pc, #64]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003520:	4810      	ldr	r0, [pc, #64]	@ (8003564 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003522:	f006 fdd3 	bl	800a0cc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003526:	f44f 7308 	mov.w	r3, #544	@ 0x220
 800352a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800352c:	4b0c      	ldr	r3, [pc, #48]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800352e:	2204      	movs	r2, #4
 8003530:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003532:	4b0b      	ldr	r3, [pc, #44]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003534:	2210      	movs	r2, #16
 8003536:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003538:	4b09      	ldr	r3, [pc, #36]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800353a:	2201      	movs	r2, #1
 800353c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	4a07      	ldr	r2, [pc, #28]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003542:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003544:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003548:	4905      	ldr	r1, [pc, #20]	@ (8003560 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800354a:	4806      	ldr	r0, [pc, #24]	@ (8003564 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800354c:	f006 fdbe 	bl	800a0cc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4804      	ldr	r0, [pc, #16]	@ (8003564 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003554:	f006 fdef 	bl	800a136 <HAL_SDRAM_ProgramRefreshRate>
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}
 8003560:	200009e0 	.word	0x200009e0
 8003564:	20000990 	.word	0x20000990

08003568 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003568:	b580      	push	{r7, lr}
 800356a:	b090      	sub	sp, #64	@ 0x40
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003572:	4b70      	ldr	r3, [pc, #448]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 8003574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003576:	4a6f      	ldr	r2, [pc, #444]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 8003578:	f043 0301 	orr.w	r3, r3, #1
 800357c:	6393      	str	r3, [r2, #56]	@ 0x38
 800357e:	4b6d      	ldr	r3, [pc, #436]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 8003580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800358a:	4b6a      	ldr	r3, [pc, #424]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800358e:	4a69      	ldr	r2, [pc, #420]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 8003590:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003594:	6313      	str	r3, [r2, #48]	@ 0x30
 8003596:	4b67      	ldr	r3, [pc, #412]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80035a2:	4b64      	ldr	r3, [pc, #400]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a6:	4a63      	ldr	r2, [pc, #396]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 80035a8:	f043 0304 	orr.w	r3, r3, #4
 80035ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ae:	4b61      	ldr	r3, [pc, #388]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80035ba:	4b5e      	ldr	r3, [pc, #376]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035be:	4a5d      	ldr	r2, [pc, #372]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 80035c0:	f043 0308 	orr.w	r3, r3, #8
 80035c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c6:	4b5b      	ldr	r3, [pc, #364]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ca:	f003 0308 	and.w	r3, r3, #8
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80035d2:	4b58      	ldr	r3, [pc, #352]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d6:	4a57      	ldr	r2, [pc, #348]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 80035d8:	f043 0310 	orr.w	r3, r3, #16
 80035dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80035de:	4b55      	ldr	r3, [pc, #340]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e2:	f003 0310 	and.w	r3, r3, #16
 80035e6:	61bb      	str	r3, [r7, #24]
 80035e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035ea:	4b52      	ldr	r3, [pc, #328]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ee:	4a51      	ldr	r2, [pc, #324]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 80035f0:	f043 0320 	orr.w	r3, r3, #32
 80035f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80035f6:	4b4f      	ldr	r3, [pc, #316]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	f003 0320 	and.w	r3, r3, #32
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003602:	4b4c      	ldr	r3, [pc, #304]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	4a4b      	ldr	r2, [pc, #300]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 8003608:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800360c:	6313      	str	r3, [r2, #48]	@ 0x30
 800360e:	4b49      	ldr	r3, [pc, #292]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800361a:	4b46      	ldr	r3, [pc, #280]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361e:	4a45      	ldr	r2, [pc, #276]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 8003620:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003624:	6313      	str	r3, [r2, #48]	@ 0x30
 8003626:	4b43      	ldr	r3, [pc, #268]	@ (8003734 <BSP_SDRAM_MspInit+0x1cc>)
 8003628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800362a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003632:	2302      	movs	r3, #2
 8003634:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003636:	2301      	movs	r3, #1
 8003638:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800363a:	2302      	movs	r3, #2
 800363c:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800363e:	230c      	movs	r3, #12
 8003640:	63fb      	str	r3, [r7, #60]	@ 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003642:	2308      	movs	r3, #8
 8003644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003646:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800364a:	4619      	mov	r1, r3
 800364c:	483a      	ldr	r0, [pc, #232]	@ (8003738 <BSP_SDRAM_MspInit+0x1d0>)
 800364e:	f002 fcf9 	bl	8006044 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003652:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8003656:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003658:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800365c:	4619      	mov	r1, r3
 800365e:	4837      	ldr	r0, [pc, #220]	@ (800373c <BSP_SDRAM_MspInit+0x1d4>)
 8003660:	f002 fcf0 	bl	8006044 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003664:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800366a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800366e:	4619      	mov	r1, r3
 8003670:	4833      	ldr	r0, [pc, #204]	@ (8003740 <BSP_SDRAM_MspInit+0x1d8>)
 8003672:	f002 fce7 	bl	8006044 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003676:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800367a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800367c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003680:	4619      	mov	r1, r3
 8003682:	4830      	ldr	r0, [pc, #192]	@ (8003744 <BSP_SDRAM_MspInit+0x1dc>)
 8003684:	f002 fcde 	bl	8006044 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003688:	f248 1333 	movw	r3, #33075	@ 0x8133
 800368c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800368e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003692:	4619      	mov	r1, r3
 8003694:	482c      	ldr	r0, [pc, #176]	@ (8003748 <BSP_SDRAM_MspInit+0x1e0>)
 8003696:	f002 fcd5 	bl	8006044 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800369a:	2328      	movs	r3, #40	@ 0x28
 800369c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 800369e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80036a2:	4619      	mov	r1, r3
 80036a4:	4829      	ldr	r0, [pc, #164]	@ (800374c <BSP_SDRAM_MspInit+0x1e4>)
 80036a6:	f002 fccd 	bl	8006044 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80036aa:	4b29      	ldr	r3, [pc, #164]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80036b0:	4b27      	ldr	r3, [pc, #156]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036b2:	2280      	movs	r2, #128	@ 0x80
 80036b4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80036b6:	4b26      	ldr	r3, [pc, #152]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036bc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80036be:	4b24      	ldr	r3, [pc, #144]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036c4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80036c6:	4b22      	ldr	r3, [pc, #136]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036c8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80036cc:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80036ce:	4b20      	ldr	r3, [pc, #128]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036d0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80036d4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80036d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036d8:	2200      	movs	r2, #0
 80036da:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80036dc:	4b1c      	ldr	r3, [pc, #112]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036de:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80036e2:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 80036e4:	4b1a      	ldr	r3, [pc, #104]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80036ea:	4b19      	ldr	r3, [pc, #100]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036ec:	2203      	movs	r2, #3
 80036ee:	629a      	str	r2, [r3, #40]	@ 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 80036f0:	4b17      	ldr	r3, [pc, #92]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80036f6:	4b16      	ldr	r3, [pc, #88]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	631a      	str	r2, [r3, #48]	@ 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80036fc:	4b14      	ldr	r3, [pc, #80]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 80036fe:	4a15      	ldr	r2, [pc, #84]	@ (8003754 <BSP_SDRAM_MspInit+0x1ec>)
 8003700:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a12      	ldr	r2, [pc, #72]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 8003706:	631a      	str	r2, [r3, #48]	@ 0x30
 8003708:	4a11      	ldr	r2, [pc, #68]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6393      	str	r3, [r2, #56]	@ 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800370e:	4810      	ldr	r0, [pc, #64]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 8003710:	f001 fd36 	bl	8005180 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003714:	480e      	ldr	r0, [pc, #56]	@ (8003750 <BSP_SDRAM_MspInit+0x1e8>)
 8003716:	f001 fc85 	bl	8005024 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800371a:	2200      	movs	r2, #0
 800371c:	210f      	movs	r1, #15
 800371e:	2038      	movs	r0, #56	@ 0x38
 8003720:	f001 fb76 	bl	8004e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003724:	2038      	movs	r0, #56	@ 0x38
 8003726:	f001 fb8f 	bl	8004e48 <HAL_NVIC_EnableIRQ>
}
 800372a:	bf00      	nop
 800372c:	3740      	adds	r7, #64	@ 0x40
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40023800 	.word	0x40023800
 8003738:	40020800 	.word	0x40020800
 800373c:	40020c00 	.word	0x40020c00
 8003740:	40021000 	.word	0x40021000
 8003744:	40021400 	.word	0x40021400
 8003748:	40021800 	.word	0x40021800
 800374c:	40021c00 	.word	0x40021c00
 8003750:	200009f0 	.word	0x200009f0
 8003754:	40026410 	.word	0x40026410

08003758 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	460a      	mov	r2, r1
 8003762:	80fb      	strh	r3, [r7, #6]
 8003764:	4613      	mov	r3, r2
 8003766:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003768:	2300      	movs	r3, #0
 800376a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800376c:	4a14      	ldr	r2, [pc, #80]	@ (80037c0 <BSP_TS_Init+0x68>)
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003772:	4a14      	ldr	r2, [pc, #80]	@ (80037c4 <BSP_TS_Init+0x6c>)
 8003774:	88bb      	ldrh	r3, [r7, #4]
 8003776:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003778:	4b13      	ldr	r3, [pc, #76]	@ (80037c8 <BSP_TS_Init+0x70>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2070      	movs	r0, #112	@ 0x70
 800377e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003780:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <BSP_TS_Init+0x70>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2070      	movs	r0, #112	@ 0x70
 8003786:	4798      	blx	r3
 8003788:	4603      	mov	r3, r0
 800378a:	2b51      	cmp	r3, #81	@ 0x51
 800378c:	d110      	bne.n	80037b0 <BSP_TS_Init+0x58>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 800378e:	4b0f      	ldr	r3, [pc, #60]	@ (80037cc <BSP_TS_Init+0x74>)
 8003790:	4a0d      	ldr	r2, [pc, #52]	@ (80037c8 <BSP_TS_Init+0x70>)
 8003792:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003794:	4b0e      	ldr	r3, [pc, #56]	@ (80037d0 <BSP_TS_Init+0x78>)
 8003796:	2270      	movs	r2, #112	@ 0x70
 8003798:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800379a:	4b0e      	ldr	r3, [pc, #56]	@ (80037d4 <BSP_TS_Init+0x7c>)
 800379c:	2208      	movs	r2, #8
 800379e:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80037a0:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <BSP_TS_Init+0x74>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	4a0a      	ldr	r2, [pc, #40]	@ (80037d0 <BSP_TS_Init+0x78>)
 80037a8:	7812      	ldrb	r2, [r2, #0]
 80037aa:	4610      	mov	r0, r2
 80037ac:	4798      	blx	r3
 80037ae:	e001      	b.n	80037b4 <BSP_TS_Init+0x5c>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80037b0:	2303      	movs	r3, #3
 80037b2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	20000a54 	.word	0x20000a54
 80037c4:	20000a56 	.word	0x20000a56
 80037c8:	20000000 	.word	0x20000000
 80037cc:	20000a50 	.word	0x20000a50
 80037d0:	20000a59 	.word	0x20000a59
 80037d4:	20000a58 	.word	0x20000a58

080037d8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	b097      	sub	sp, #92	@ 0x5c
 80037dc:	af02      	add	r7, sp, #8
 80037de:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80037e0:	2300      	movs	r3, #0
 80037e2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80037f2:	4bb8      	ldr	r3, [pc, #736]	@ (8003ad4 <BSP_TS_GetState+0x2fc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	4ab7      	ldr	r2, [pc, #732]	@ (8003ad8 <BSP_TS_GetState+0x300>)
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	4610      	mov	r0, r2
 80037fe:	4798      	blx	r3
 8003800:	4603      	mov	r3, r0
 8003802:	461a      	mov	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	f000 8198 	beq.w	8003b42 <BSP_TS_GetState+0x36a>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003812:	2300      	movs	r3, #0
 8003814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003816:	e187      	b.n	8003b28 <BSP_TS_GetState+0x350>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003818:	4bae      	ldr	r3, [pc, #696]	@ (8003ad4 <BSP_TS_GetState+0x2fc>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	4aae      	ldr	r2, [pc, #696]	@ (8003ad8 <BSP_TS_GetState+0x300>)
 8003820:	7812      	ldrb	r2, [r2, #0]
 8003822:	4614      	mov	r4, r2
 8003824:	f107 0120 	add.w	r1, r7, #32
 8003828:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800382a:	0052      	lsls	r2, r2, #1
 800382c:	1888      	adds	r0, r1, r2
 800382e:	f107 0114 	add.w	r1, r7, #20
 8003832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003834:	0052      	lsls	r2, r2, #1
 8003836:	440a      	add	r2, r1
 8003838:	4601      	mov	r1, r0
 800383a:	4620      	mov	r0, r4
 800383c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 800383e:	4ba7      	ldr	r3, [pc, #668]	@ (8003adc <BSP_TS_GetState+0x304>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d117      	bne.n	8003876 <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8003846:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	3350      	adds	r3, #80	@ 0x50
 800384c:	443b      	add	r3, r7
 800384e:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	3350      	adds	r3, #80	@ 0x50
 8003858:	443b      	add	r3, r7
 800385a:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 800385e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	3350      	adds	r3, #80	@ 0x50
 8003864:	443b      	add	r3, r7
 8003866:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 800386a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	3350      	adds	r3, #80	@ 0x50
 8003870:	443b      	add	r3, r7
 8003872:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003876:	4b99      	ldr	r3, [pc, #612]	@ (8003adc <BSP_TS_GetState+0x304>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00e      	beq.n	80038a0 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8003882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	3350      	adds	r3, #80	@ 0x50
 8003888:	443b      	add	r3, r7
 800388a:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 800388e:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 8003892:	b29a      	uxth	r2, r3
 8003894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	3350      	adds	r3, #80	@ 0x50
 800389a:	443b      	add	r3, r7
 800389c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80038a0:	4b8e      	ldr	r3, [pc, #568]	@ (8003adc <BSP_TS_GetState+0x304>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	f003 0304 	and.w	r3, r3, #4
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00e      	beq.n	80038ca <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 80038ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	3350      	adds	r3, #80	@ 0x50
 80038b2:	443b      	add	r3, r7
 80038b4:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80038b8:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
 80038bc:	b29a      	uxth	r2, r3
 80038be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	3350      	adds	r3, #80	@ 0x50
 80038c4:	443b      	add	r3, r7
 80038c6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80038ca:	4b84      	ldr	r3, [pc, #528]	@ (8003adc <BSP_TS_GetState+0x304>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	f003 0308 	and.w	r3, r3, #8
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d017      	beq.n	8003906 <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 80038d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	3350      	adds	r3, #80	@ 0x50
 80038dc:	443b      	add	r3, r7
 80038de:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80038e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	3350      	adds	r3, #80	@ 0x50
 80038e8:	443b      	add	r3, r7
 80038ea:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80038ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038f0:	005b      	lsls	r3, r3, #1
 80038f2:	3350      	adds	r3, #80	@ 0x50
 80038f4:	443b      	add	r3, r7
 80038f6:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80038fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	3350      	adds	r3, #80	@ 0x50
 8003900:	443b      	add	r3, r7
 8003902:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	3350      	adds	r3, #80	@ 0x50
 800390c:	443b      	add	r3, r7
 800390e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003912:	4619      	mov	r1, r3
 8003914:	4a72      	ldr	r2, [pc, #456]	@ (8003ae0 <BSP_TS_GetState+0x308>)
 8003916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391c:	4299      	cmp	r1, r3
 800391e:	d90d      	bls.n	800393c <BSP_TS_GetState+0x164>
 8003920:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	3350      	adds	r3, #80	@ 0x50
 8003926:	443b      	add	r3, r7
 8003928:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 800392c:	496c      	ldr	r1, [pc, #432]	@ (8003ae0 <BSP_TS_GetState+0x308>)
 800392e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003930:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003934:	b29b      	uxth	r3, r3
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	b29b      	uxth	r3, r3
 800393a:	e00c      	b.n	8003956 <BSP_TS_GetState+0x17e>
 800393c:	4a68      	ldr	r2, [pc, #416]	@ (8003ae0 <BSP_TS_GetState+0x308>)
 800393e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003944:	b29a      	uxth	r2, r3
 8003946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	3350      	adds	r3, #80	@ 0x50
 800394c:	443b      	add	r3, r7
 800394e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	b29b      	uxth	r3, r3
 8003956:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 800395a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	3350      	adds	r3, #80	@ 0x50
 8003960:	443b      	add	r3, r7
 8003962:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003966:	4619      	mov	r1, r3
 8003968:	4a5e      	ldr	r2, [pc, #376]	@ (8003ae4 <BSP_TS_GetState+0x30c>)
 800396a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800396c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003970:	4299      	cmp	r1, r3
 8003972:	d90d      	bls.n	8003990 <BSP_TS_GetState+0x1b8>
 8003974:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	3350      	adds	r3, #80	@ 0x50
 800397a:	443b      	add	r3, r7
 800397c:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003980:	4958      	ldr	r1, [pc, #352]	@ (8003ae4 <BSP_TS_GetState+0x30c>)
 8003982:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003984:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003988:	b29b      	uxth	r3, r3
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	b29b      	uxth	r3, r3
 800398e:	e00c      	b.n	80039aa <BSP_TS_GetState+0x1d2>
 8003990:	4a54      	ldr	r2, [pc, #336]	@ (8003ae4 <BSP_TS_GetState+0x30c>)
 8003992:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003998:	b29a      	uxth	r2, r3
 800399a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	3350      	adds	r3, #80	@ 0x50
 80039a0:	443b      	add	r3, r7
 80039a2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	b29b      	uxth	r3, r3
 80039aa:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44

      if ((x_diff + y_diff) > 5)
 80039ae:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80039b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80039b6:	4413      	add	r3, r2
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	dd15      	ble.n	80039e8 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 80039bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	3350      	adds	r3, #80	@ 0x50
 80039c2:	443b      	add	r3, r7
 80039c4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80039c8:	4619      	mov	r1, r3
 80039ca:	4a45      	ldr	r2, [pc, #276]	@ (8003ae0 <BSP_TS_GetState+0x308>)
 80039cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80039d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	3350      	adds	r3, #80	@ 0x50
 80039d8:	443b      	add	r3, r7
 80039da:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80039de:	4619      	mov	r1, r3
 80039e0:	4a40      	ldr	r2, [pc, #256]	@ (8003ae4 <BSP_TS_GetState+0x30c>)
 80039e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80039e8:	4b3b      	ldr	r3, [pc, #236]	@ (8003ad8 <BSP_TS_GetState+0x300>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b70      	cmp	r3, #112	@ 0x70
 80039ee:	d119      	bne.n	8003a24 <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 80039f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	3350      	adds	r3, #80	@ 0x50
 80039f6:	443b      	add	r3, r7
 80039f8:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	460a      	mov	r2, r1
 8003a06:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003a08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	3350      	adds	r3, #80	@ 0x50
 8003a0e:	443b      	add	r3, r7
 8003a10:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a18:	3304      	adds	r3, #4
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	4413      	add	r3, r2
 8003a1e:	460a      	mov	r2, r1
 8003a20:	809a      	strh	r2, [r3, #4]
 8003a22:	e022      	b.n	8003a6a <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003a24:	4b30      	ldr	r3, [pc, #192]	@ (8003ae8 <BSP_TS_GetState+0x310>)
 8003a26:	881b      	ldrh	r3, [r3, #0]
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae0 <BSP_TS_GetState+0x308>)
 8003a2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a32:	fb01 f303 	mul.w	r3, r1, r3
 8003a36:	0b1b      	lsrs	r3, r3, #12
 8003a38:	b299      	uxth	r1, r3
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a3e:	005b      	lsls	r3, r3, #1
 8003a40:	4413      	add	r3, r2
 8003a42:	460a      	mov	r2, r1
 8003a44:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003a46:	4b29      	ldr	r3, [pc, #164]	@ (8003aec <BSP_TS_GetState+0x314>)
 8003a48:	881b      	ldrh	r3, [r3, #0]
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	4a25      	ldr	r2, [pc, #148]	@ (8003ae4 <BSP_TS_GetState+0x30c>)
 8003a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a54:	fb01 f303 	mul.w	r3, r1, r3
 8003a58:	0b1b      	lsrs	r3, r3, #12
 8003a5a:	b299      	uxth	r1, r3
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a60:	3304      	adds	r3, #4
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	460a      	mov	r2, r1
 8003a68:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad8 <BSP_TS_GetState+0x300>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f107 010c 	add.w	r1, r7, #12
 8003a74:	f107 0210 	add.w	r2, r7, #16
 8003a78:	f107 0308 	add.w	r3, r7, #8
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003a82:	f7fd fb63 	bl	800114c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	b2d9      	uxtb	r1, r3
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a8e:	4413      	add	r3, r2
 8003a90:	3316      	adds	r3, #22
 8003a92:	460a      	mov	r2, r1
 8003a94:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	b2d9      	uxtb	r1, r3
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3320      	adds	r3, #32
 8003aa2:	460a      	mov	r2, r1
 8003aa4:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d836      	bhi.n	8003b1a <BSP_TS_GetState+0x342>
 8003aac:	a201      	add	r2, pc, #4	@ (adr r2, 8003ab4 <BSP_TS_GetState+0x2dc>)
 8003aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab2:	bf00      	nop
 8003ab4:	08003ac5 	.word	0x08003ac5
 8003ab8:	08003af1 	.word	0x08003af1
 8003abc:	08003aff 	.word	0x08003aff
 8003ac0:	08003b0d 	.word	0x08003b0d
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ac8:	4413      	add	r3, r2
 8003aca:	331b      	adds	r3, #27
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
          break;
 8003ad0:	e027      	b.n	8003b22 <BSP_TS_GetState+0x34a>
 8003ad2:	bf00      	nop
 8003ad4:	20000a50 	.word	0x20000a50
 8003ad8:	20000a59 	.word	0x20000a59
 8003adc:	20000a58 	.word	0x20000a58
 8003ae0:	20000a5c 	.word	0x20000a5c
 8003ae4:	20000a70 	.word	0x20000a70
 8003ae8:	20000a54 	.word	0x20000a54
 8003aec:	20000a56 	.word	0x20000a56
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003af4:	4413      	add	r3, r2
 8003af6:	331b      	adds	r3, #27
 8003af8:	2202      	movs	r2, #2
 8003afa:	701a      	strb	r2, [r3, #0]
          break;
 8003afc:	e011      	b.n	8003b22 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b02:	4413      	add	r3, r2
 8003b04:	331b      	adds	r3, #27
 8003b06:	2203      	movs	r2, #3
 8003b08:	701a      	strb	r2, [r3, #0]
          break;
 8003b0a:	e00a      	b.n	8003b22 <BSP_TS_GetState+0x34a>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b10:	4413      	add	r3, r2
 8003b12:	331b      	adds	r3, #27
 8003b14:	2200      	movs	r2, #0
 8003b16:	701a      	strb	r2, [r3, #0]
          break;
 8003b18:	e003      	b.n	8003b22 <BSP_TS_GetState+0x34a>
        default :
          ts_status = TS_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
          break;
 8003b20:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003b22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b24:	3301      	adds	r3, #1
 8003b26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b30:	4293      	cmp	r3, r2
 8003b32:	f4ff ae71 	bcc.w	8003818 <BSP_TS_GetState+0x40>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f80a 	bl	8003b50 <BSP_TS_Get_GestureId>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003b42:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3754      	adds	r7, #84	@ 0x54
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd90      	pop	{r4, r7, pc}
 8003b4e:	bf00      	nop

08003b50 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003b60:	4b3b      	ldr	r3, [pc, #236]	@ (8003c50 <BSP_TS_Get_GestureId+0x100>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	f107 0308 	add.w	r3, r7, #8
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	f7fd fad4 	bl	800111a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b49      	cmp	r3, #73	@ 0x49
 8003b76:	d05e      	beq.n	8003c36 <BSP_TS_Get_GestureId+0xe6>
 8003b78:	2b49      	cmp	r3, #73	@ 0x49
 8003b7a:	d860      	bhi.n	8003c3e <BSP_TS_Get_GestureId+0xee>
 8003b7c:	2b1c      	cmp	r3, #28
 8003b7e:	d83f      	bhi.n	8003c00 <BSP_TS_Get_GestureId+0xb0>
 8003b80:	2b1c      	cmp	r3, #28
 8003b82:	d85c      	bhi.n	8003c3e <BSP_TS_Get_GestureId+0xee>
 8003b84:	a201      	add	r2, pc, #4	@ (adr r2, 8003b8c <BSP_TS_Get_GestureId+0x3c>)
 8003b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b8a:	bf00      	nop
 8003b8c:	08003c07 	.word	0x08003c07
 8003b90:	08003c3f 	.word	0x08003c3f
 8003b94:	08003c3f 	.word	0x08003c3f
 8003b98:	08003c3f 	.word	0x08003c3f
 8003b9c:	08003c3f 	.word	0x08003c3f
 8003ba0:	08003c3f 	.word	0x08003c3f
 8003ba4:	08003c3f 	.word	0x08003c3f
 8003ba8:	08003c3f 	.word	0x08003c3f
 8003bac:	08003c3f 	.word	0x08003c3f
 8003bb0:	08003c3f 	.word	0x08003c3f
 8003bb4:	08003c3f 	.word	0x08003c3f
 8003bb8:	08003c3f 	.word	0x08003c3f
 8003bbc:	08003c3f 	.word	0x08003c3f
 8003bc0:	08003c3f 	.word	0x08003c3f
 8003bc4:	08003c3f 	.word	0x08003c3f
 8003bc8:	08003c3f 	.word	0x08003c3f
 8003bcc:	08003c0f 	.word	0x08003c0f
 8003bd0:	08003c3f 	.word	0x08003c3f
 8003bd4:	08003c3f 	.word	0x08003c3f
 8003bd8:	08003c3f 	.word	0x08003c3f
 8003bdc:	08003c17 	.word	0x08003c17
 8003be0:	08003c3f 	.word	0x08003c3f
 8003be4:	08003c3f 	.word	0x08003c3f
 8003be8:	08003c3f 	.word	0x08003c3f
 8003bec:	08003c1f 	.word	0x08003c1f
 8003bf0:	08003c3f 	.word	0x08003c3f
 8003bf4:	08003c3f 	.word	0x08003c3f
 8003bf8:	08003c3f 	.word	0x08003c3f
 8003bfc:	08003c27 	.word	0x08003c27
 8003c00:	2b40      	cmp	r3, #64	@ 0x40
 8003c02:	d014      	beq.n	8003c2e <BSP_TS_Get_GestureId+0xde>
 8003c04:	e01b      	b.n	8003c3e <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003c0c:	e01a      	b.n	8003c44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003c14:	e016      	b.n	8003c44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2202      	movs	r2, #2
 8003c1a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003c1c:	e012      	b.n	8003c44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2203      	movs	r2, #3
 8003c22:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003c24:	e00e      	b.n	8003c44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2204      	movs	r2, #4
 8003c2a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003c2c:	e00a      	b.n	8003c44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2205      	movs	r2, #5
 8003c32:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003c34:	e006      	b.n	8003c44 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2206      	movs	r2, #6
 8003c3a:	629a      	str	r2, [r3, #40]	@ 0x28
      break;
 8003c3c:	e002      	b.n	8003c44 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	73fb      	strb	r3, [r7, #15]
      break;
 8003c42:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000a59 	.word	0x20000a59

08003c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5e:	4a10      	ldr	r2, [pc, #64]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c6e:	607b      	str	r3, [r7, #4]
 8003c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c72:	4b0b      	ldr	r3, [pc, #44]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	4a0a      	ldr	r2, [pc, #40]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c86:	603b      	str	r3, [r7, #0]
 8003c88:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	210f      	movs	r1, #15
 8003c8e:	f06f 0001 	mvn.w	r0, #1
 8003c92:	f001 f8bd 	bl	8004e10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c96:	bf00      	nop
 8003c98:	3708      	adds	r7, #8
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800

08003ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08e      	sub	sp, #56	@ 0x38
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003cac:	2300      	movs	r3, #0
 8003cae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003cb4:	4b33      	ldr	r3, [pc, #204]	@ (8003d84 <HAL_InitTick+0xe0>)
 8003cb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb8:	4a32      	ldr	r2, [pc, #200]	@ (8003d84 <HAL_InitTick+0xe0>)
 8003cba:	f043 0310 	orr.w	r3, r3, #16
 8003cbe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cc0:	4b30      	ldr	r3, [pc, #192]	@ (8003d84 <HAL_InitTick+0xe0>)
 8003cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc4:	f003 0310 	and.w	r3, r3, #16
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ccc:	f107 0210 	add.w	r2, r7, #16
 8003cd0:	f107 0314 	add.w	r3, r7, #20
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f004 fb2e 	bl	8008338 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003cdc:	6a3b      	ldr	r3, [r7, #32]
 8003cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d103      	bne.n	8003cee <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ce6:	f004 faff 	bl	80082e8 <HAL_RCC_GetPCLK1Freq>
 8003cea:	6378      	str	r0, [r7, #52]	@ 0x34
 8003cec:	e004      	b.n	8003cf8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003cee:	f004 fafb 	bl	80082e8 <HAL_RCC_GetPCLK1Freq>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cfa:	4a23      	ldr	r2, [pc, #140]	@ (8003d88 <HAL_InitTick+0xe4>)
 8003cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003d00:	0c9b      	lsrs	r3, r3, #18
 8003d02:	3b01      	subs	r3, #1
 8003d04:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003d06:	4b21      	ldr	r3, [pc, #132]	@ (8003d8c <HAL_InitTick+0xe8>)
 8003d08:	4a21      	ldr	r2, [pc, #132]	@ (8003d90 <HAL_InitTick+0xec>)
 8003d0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003d0c:	4b1f      	ldr	r3, [pc, #124]	@ (8003d8c <HAL_InitTick+0xe8>)
 8003d0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003d12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003d14:	4a1d      	ldr	r2, [pc, #116]	@ (8003d8c <HAL_InitTick+0xe8>)
 8003d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d8c <HAL_InitTick+0xe8>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d20:	4b1a      	ldr	r3, [pc, #104]	@ (8003d8c <HAL_InitTick+0xe8>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d26:	4b19      	ldr	r3, [pc, #100]	@ (8003d8c <HAL_InitTick+0xe8>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003d2c:	4817      	ldr	r0, [pc, #92]	@ (8003d8c <HAL_InitTick+0xe8>)
 8003d2e:	f006 fad5 	bl	800a2dc <HAL_TIM_Base_Init>
 8003d32:	4603      	mov	r3, r0
 8003d34:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003d38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d11b      	bne.n	8003d78 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003d40:	4812      	ldr	r0, [pc, #72]	@ (8003d8c <HAL_InitTick+0xe8>)
 8003d42:	f006 fb23 	bl	800a38c <HAL_TIM_Base_Start_IT>
 8003d46:	4603      	mov	r3, r0
 8003d48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003d4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d111      	bne.n	8003d78 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d54:	2036      	movs	r0, #54	@ 0x36
 8003d56:	f001 f877 	bl	8004e48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b0f      	cmp	r3, #15
 8003d5e:	d808      	bhi.n	8003d72 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003d60:	2200      	movs	r2, #0
 8003d62:	6879      	ldr	r1, [r7, #4]
 8003d64:	2036      	movs	r0, #54	@ 0x36
 8003d66:	f001 f853 	bl	8004e10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d94 <HAL_InitTick+0xf0>)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6013      	str	r3, [r2, #0]
 8003d70:	e002      	b.n	8003d78 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003d78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3738      	adds	r7, #56	@ 0x38
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	431bde83 	.word	0x431bde83
 8003d8c:	20000a84 	.word	0x20000a84
 8003d90:	40001000 	.word	0x40001000
 8003d94:	20000038 	.word	0x20000038

08003d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d9c:	bf00      	nop
 8003d9e:	e7fd      	b.n	8003d9c <NMI_Handler+0x4>

08003da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003da0:	b480      	push	{r7}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <HardFault_Handler+0x4>

08003da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dac:	bf00      	nop
 8003dae:	e7fd      	b.n	8003dac <MemManage_Handler+0x4>

08003db0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003db4:	bf00      	nop
 8003db6:	e7fd      	b.n	8003db4 <BusFault_Handler+0x4>

08003db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003db8:	b480      	push	{r7}
 8003dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003dbc:	bf00      	nop
 8003dbe:	e7fd      	b.n	8003dbc <UsageFault_Handler+0x4>

08003dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003dd4:	4802      	ldr	r0, [pc, #8]	@ (8003de0 <USART1_IRQHandler+0x10>)
 8003dd6:	f007 f85f 	bl	800ae98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	20000cd8 	.word	0x20000cd8

08003de4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8003de8:	4b06      	ldr	r3, [pc, #24]	@ (8003e04 <TIM6_DAC_IRQHandler+0x20>)
 8003dea:	791b      	ldrb	r3, [r3, #4]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d002      	beq.n	8003df8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8003df2:	4804      	ldr	r0, [pc, #16]	@ (8003e04 <TIM6_DAC_IRQHandler+0x20>)
 8003df4:	f001 f858 	bl	8004ea8 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8003df8:	4803      	ldr	r0, [pc, #12]	@ (8003e08 <TIM6_DAC_IRQHandler+0x24>)
 8003dfa:	f006 fb3f 	bl	800a47c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	20000140 	.word	0x20000140
 8003e08:	20000a84 	.word	0x20000a84

08003e0c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8003e10:	4802      	ldr	r0, [pc, #8]	@ (8003e1c <DMA2_Stream3_IRQHandler+0x10>)
 8003e12:	f001 fb05 	bl	8005420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000690 	.word	0x20000690

08003e20 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8003e24:	4802      	ldr	r0, [pc, #8]	@ (8003e30 <DMA2_Stream6_IRQHandler+0x10>)
 8003e26:	f001 fafb 	bl	8005420 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003e2a:	bf00      	nop
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	200006f0 	.word	0x200006f0

08003e34 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003e38:	4802      	ldr	r0, [pc, #8]	@ (8003e44 <LTDC_IRQHandler+0x10>)
 8003e3a:	f003 faeb 	bl	8007414 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8003e3e:	bf00      	nop
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop
 8003e44:	2000052c 	.word	0x2000052c

08003e48 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8003e4c:	4802      	ldr	r0, [pc, #8]	@ (8003e58 <DMA2D_IRQHandler+0x10>)
 8003e4e:	f001 febb 	bl	8005bc8 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003e52:	bf00      	nop
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000154 	.word	0x20000154

08003e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e64:	4a14      	ldr	r2, [pc, #80]	@ (8003eb8 <_sbrk+0x5c>)
 8003e66:	4b15      	ldr	r3, [pc, #84]	@ (8003ebc <_sbrk+0x60>)
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e70:	4b13      	ldr	r3, [pc, #76]	@ (8003ec0 <_sbrk+0x64>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d102      	bne.n	8003e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e78:	4b11      	ldr	r3, [pc, #68]	@ (8003ec0 <_sbrk+0x64>)
 8003e7a:	4a12      	ldr	r2, [pc, #72]	@ (8003ec4 <_sbrk+0x68>)
 8003e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e7e:	4b10      	ldr	r3, [pc, #64]	@ (8003ec0 <_sbrk+0x64>)
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d207      	bcs.n	8003e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e8c:	f00f f954 	bl	8013138 <__errno>
 8003e90:	4603      	mov	r3, r0
 8003e92:	220c      	movs	r2, #12
 8003e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9a:	e009      	b.n	8003eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e9c:	4b08      	ldr	r3, [pc, #32]	@ (8003ec0 <_sbrk+0x64>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ea2:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <_sbrk+0x64>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	4a05      	ldr	r2, [pc, #20]	@ (8003ec0 <_sbrk+0x64>)
 8003eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eae:	68fb      	ldr	r3, [r7, #12]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3718      	adds	r7, #24
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	20050000 	.word	0x20050000
 8003ebc:	00000400 	.word	0x00000400
 8003ec0:	20000ad0 	.word	0x20000ad0
 8003ec4:	20004cc0 	.word	0x20004cc0

08003ec8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ecc:	4b06      	ldr	r3, [pc, #24]	@ (8003ee8 <SystemInit+0x20>)
 8003ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ed2:	4a05      	ldr	r2, [pc, #20]	@ (8003ee8 <SystemInit+0x20>)
 8003ed4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ed8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003edc:	bf00      	nop
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	e000ed00 	.word	0xe000ed00

08003eec <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b088      	sub	sp, #32
 8003ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ef2:	f107 0310 	add.w	r3, r7, #16
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	605a      	str	r2, [r3, #4]
 8003efc:	609a      	str	r2, [r3, #8]
 8003efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	605a      	str	r2, [r3, #4]
 8003f08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003f0a:	4b20      	ldr	r3, [pc, #128]	@ (8003f8c <MX_TIM1_Init+0xa0>)
 8003f0c:	4a20      	ldr	r2, [pc, #128]	@ (8003f90 <MX_TIM1_Init+0xa4>)
 8003f0e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003f10:	4b1e      	ldr	r3, [pc, #120]	@ (8003f8c <MX_TIM1_Init+0xa0>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f16:	4b1d      	ldr	r3, [pc, #116]	@ (8003f8c <MX_TIM1_Init+0xa0>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003f8c <MX_TIM1_Init+0xa0>)
 8003f1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003f22:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f24:	4b19      	ldr	r3, [pc, #100]	@ (8003f8c <MX_TIM1_Init+0xa0>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003f2a:	4b18      	ldr	r3, [pc, #96]	@ (8003f8c <MX_TIM1_Init+0xa0>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f30:	4b16      	ldr	r3, [pc, #88]	@ (8003f8c <MX_TIM1_Init+0xa0>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003f36:	4815      	ldr	r0, [pc, #84]	@ (8003f8c <MX_TIM1_Init+0xa0>)
 8003f38:	f006 f9d0 	bl	800a2dc <HAL_TIM_Base_Init>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d001      	beq.n	8003f46 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003f42:	f7fe f91f 	bl	8002184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003f4a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003f4c:	f107 0310 	add.w	r3, r7, #16
 8003f50:	4619      	mov	r1, r3
 8003f52:	480e      	ldr	r0, [pc, #56]	@ (8003f8c <MX_TIM1_Init+0xa0>)
 8003f54:	f006 fbb2 	bl	800a6bc <HAL_TIM_ConfigClockSource>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d001      	beq.n	8003f62 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003f5e:	f7fe f911 	bl	8002184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f62:	2300      	movs	r3, #0
 8003f64:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003f66:	2300      	movs	r3, #0
 8003f68:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f6e:	1d3b      	adds	r3, r7, #4
 8003f70:	4619      	mov	r1, r3
 8003f72:	4806      	ldr	r0, [pc, #24]	@ (8003f8c <MX_TIM1_Init+0xa0>)
 8003f74:	f006 fdce 	bl	800ab14 <HAL_TIMEx_MasterConfigSynchronization>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003f7e:	f7fe f901 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003f82:	bf00      	nop
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	20000ad4 	.word	0x20000ad4
 8003f90:	40010000 	.word	0x40010000

08003f94 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f9a:	f107 0310 	add.w	r3, r7, #16
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]
 8003fa2:	605a      	str	r2, [r3, #4]
 8003fa4:	609a      	str	r2, [r3, #8]
 8003fa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800402c <MX_TIM2_Init+0x98>)
 8003fb4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8003fb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003fba:	4b1c      	ldr	r3, [pc, #112]	@ (800402c <MX_TIM2_Init+0x98>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800402c <MX_TIM2_Init+0x98>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8003fc6:	4b19      	ldr	r3, [pc, #100]	@ (800402c <MX_TIM2_Init+0x98>)
 8003fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003fcc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003fce:	4b17      	ldr	r3, [pc, #92]	@ (800402c <MX_TIM2_Init+0x98>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fd4:	4b15      	ldr	r3, [pc, #84]	@ (800402c <MX_TIM2_Init+0x98>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003fda:	4814      	ldr	r0, [pc, #80]	@ (800402c <MX_TIM2_Init+0x98>)
 8003fdc:	f006 f97e 	bl	800a2dc <HAL_TIM_Base_Init>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8003fe6:	f7fe f8cd 	bl	8002184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003fee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ff0:	f107 0310 	add.w	r3, r7, #16
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	480d      	ldr	r0, [pc, #52]	@ (800402c <MX_TIM2_Init+0x98>)
 8003ff8:	f006 fb60 	bl	800a6bc <HAL_TIM_ConfigClockSource>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004002:	f7fe f8bf 	bl	8002184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004006:	2300      	movs	r3, #0
 8004008:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800400e:	1d3b      	adds	r3, r7, #4
 8004010:	4619      	mov	r1, r3
 8004012:	4806      	ldr	r0, [pc, #24]	@ (800402c <MX_TIM2_Init+0x98>)
 8004014:	f006 fd7e 	bl	800ab14 <HAL_TIMEx_MasterConfigSynchronization>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800401e:	f7fe f8b1 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004022:	bf00      	nop
 8004024:	3720      	adds	r7, #32
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000b20 	.word	0x20000b20

08004030 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004036:	f107 0310 	add.w	r3, r7, #16
 800403a:	2200      	movs	r2, #0
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	605a      	str	r2, [r3, #4]
 8004040:	609a      	str	r2, [r3, #8]
 8004042:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	2200      	movs	r2, #0
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
 800404c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800404e:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <MX_TIM3_Init+0x94>)
 8004050:	4a1d      	ldr	r2, [pc, #116]	@ (80040c8 <MX_TIM3_Init+0x98>)
 8004052:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004054:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <MX_TIM3_Init+0x94>)
 8004056:	2200      	movs	r2, #0
 8004058:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800405a:	4b1a      	ldr	r3, [pc, #104]	@ (80040c4 <MX_TIM3_Init+0x94>)
 800405c:	2200      	movs	r2, #0
 800405e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004060:	4b18      	ldr	r3, [pc, #96]	@ (80040c4 <MX_TIM3_Init+0x94>)
 8004062:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004066:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004068:	4b16      	ldr	r3, [pc, #88]	@ (80040c4 <MX_TIM3_Init+0x94>)
 800406a:	2200      	movs	r2, #0
 800406c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800406e:	4b15      	ldr	r3, [pc, #84]	@ (80040c4 <MX_TIM3_Init+0x94>)
 8004070:	2200      	movs	r2, #0
 8004072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004074:	4813      	ldr	r0, [pc, #76]	@ (80040c4 <MX_TIM3_Init+0x94>)
 8004076:	f006 f931 	bl	800a2dc <HAL_TIM_Base_Init>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d001      	beq.n	8004084 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004080:	f7fe f880 	bl	8002184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004084:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004088:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800408a:	f107 0310 	add.w	r3, r7, #16
 800408e:	4619      	mov	r1, r3
 8004090:	480c      	ldr	r0, [pc, #48]	@ (80040c4 <MX_TIM3_Init+0x94>)
 8004092:	f006 fb13 	bl	800a6bc <HAL_TIM_ConfigClockSource>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800409c:	f7fe f872 	bl	8002184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80040a0:	2300      	movs	r3, #0
 80040a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	4619      	mov	r1, r3
 80040ac:	4805      	ldr	r0, [pc, #20]	@ (80040c4 <MX_TIM3_Init+0x94>)
 80040ae:	f006 fd31 	bl	800ab14 <HAL_TIMEx_MasterConfigSynchronization>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80040b8:	f7fe f864 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80040bc:	bf00      	nop
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000b6c 	.word	0x20000b6c
 80040c8:	40000400 	.word	0x40000400

080040cc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040d2:	f107 0310 	add.w	r3, r7, #16
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	605a      	str	r2, [r3, #4]
 80040dc:	609a      	str	r2, [r3, #8]
 80040de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	2200      	movs	r2, #0
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	605a      	str	r2, [r3, #4]
 80040e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80040ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004160 <MX_TIM5_Init+0x94>)
 80040ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004164 <MX_TIM5_Init+0x98>)
 80040ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80040f0:	4b1b      	ldr	r3, [pc, #108]	@ (8004160 <MX_TIM5_Init+0x94>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004160 <MX_TIM5_Init+0x94>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80040fc:	4b18      	ldr	r3, [pc, #96]	@ (8004160 <MX_TIM5_Init+0x94>)
 80040fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004102:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004104:	4b16      	ldr	r3, [pc, #88]	@ (8004160 <MX_TIM5_Init+0x94>)
 8004106:	2200      	movs	r2, #0
 8004108:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800410a:	4b15      	ldr	r3, [pc, #84]	@ (8004160 <MX_TIM5_Init+0x94>)
 800410c:	2200      	movs	r2, #0
 800410e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004110:	4813      	ldr	r0, [pc, #76]	@ (8004160 <MX_TIM5_Init+0x94>)
 8004112:	f006 f8e3 	bl	800a2dc <HAL_TIM_Base_Init>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800411c:	f7fe f832 	bl	8002184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004120:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004124:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004126:	f107 0310 	add.w	r3, r7, #16
 800412a:	4619      	mov	r1, r3
 800412c:	480c      	ldr	r0, [pc, #48]	@ (8004160 <MX_TIM5_Init+0x94>)
 800412e:	f006 fac5 	bl	800a6bc <HAL_TIM_ConfigClockSource>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004138:	f7fe f824 	bl	8002184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800413c:	2300      	movs	r3, #0
 800413e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004140:	2300      	movs	r3, #0
 8004142:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004144:	1d3b      	adds	r3, r7, #4
 8004146:	4619      	mov	r1, r3
 8004148:	4805      	ldr	r0, [pc, #20]	@ (8004160 <MX_TIM5_Init+0x94>)
 800414a:	f006 fce3 	bl	800ab14 <HAL_TIMEx_MasterConfigSynchronization>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004154:	f7fe f816 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004158:	bf00      	nop
 800415a:	3720      	adds	r7, #32
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}
 8004160:	20000bb8 	.word	0x20000bb8
 8004164:	40000c00 	.word	0x40000c00

08004168 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800416e:	f107 0310 	add.w	r3, r7, #16
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	605a      	str	r2, [r3, #4]
 8004178:	609a      	str	r2, [r3, #8]
 800417a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800417c:	1d3b      	adds	r3, r7, #4
 800417e:	2200      	movs	r2, #0
 8004180:	601a      	str	r2, [r3, #0]
 8004182:	605a      	str	r2, [r3, #4]
 8004184:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004186:	4b20      	ldr	r3, [pc, #128]	@ (8004208 <MX_TIM8_Init+0xa0>)
 8004188:	4a20      	ldr	r2, [pc, #128]	@ (800420c <MX_TIM8_Init+0xa4>)
 800418a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800418c:	4b1e      	ldr	r3, [pc, #120]	@ (8004208 <MX_TIM8_Init+0xa0>)
 800418e:	2200      	movs	r2, #0
 8004190:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004192:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <MX_TIM8_Init+0xa0>)
 8004194:	2200      	movs	r2, #0
 8004196:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004198:	4b1b      	ldr	r3, [pc, #108]	@ (8004208 <MX_TIM8_Init+0xa0>)
 800419a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800419e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a0:	4b19      	ldr	r3, [pc, #100]	@ (8004208 <MX_TIM8_Init+0xa0>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80041a6:	4b18      	ldr	r3, [pc, #96]	@ (8004208 <MX_TIM8_Init+0xa0>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ac:	4b16      	ldr	r3, [pc, #88]	@ (8004208 <MX_TIM8_Init+0xa0>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80041b2:	4815      	ldr	r0, [pc, #84]	@ (8004208 <MX_TIM8_Init+0xa0>)
 80041b4:	f006 f892 	bl	800a2dc <HAL_TIM_Base_Init>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80041be:	f7fd ffe1 	bl	8002184 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80041c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80041c8:	f107 0310 	add.w	r3, r7, #16
 80041cc:	4619      	mov	r1, r3
 80041ce:	480e      	ldr	r0, [pc, #56]	@ (8004208 <MX_TIM8_Init+0xa0>)
 80041d0:	f006 fa74 	bl	800a6bc <HAL_TIM_ConfigClockSource>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80041da:	f7fd ffd3 	bl	8002184 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041de:	2300      	movs	r3, #0
 80041e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80041ea:	1d3b      	adds	r3, r7, #4
 80041ec:	4619      	mov	r1, r3
 80041ee:	4806      	ldr	r0, [pc, #24]	@ (8004208 <MX_TIM8_Init+0xa0>)
 80041f0:	f006 fc90 	bl	800ab14 <HAL_TIMEx_MasterConfigSynchronization>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80041fa:	f7fd ffc3 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80041fe:	bf00      	nop
 8004200:	3720      	adds	r7, #32
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000c04 	.word	0x20000c04
 800420c:	40010400 	.word	0x40010400

08004210 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b08e      	sub	sp, #56	@ 0x38
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004218:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	605a      	str	r2, [r3, #4]
 8004222:	609a      	str	r2, [r3, #8]
 8004224:	60da      	str	r2, [r3, #12]
 8004226:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a3b      	ldr	r2, [pc, #236]	@ (800431c <HAL_TIM_Base_MspInit+0x10c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d10c      	bne.n	800424c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004232:	4b3b      	ldr	r3, [pc, #236]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 8004234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004236:	4a3a      	ldr	r2, [pc, #232]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	6453      	str	r3, [r2, #68]	@ 0x44
 800423e:	4b38      	ldr	r3, [pc, #224]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 8004240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	623b      	str	r3, [r7, #32]
 8004248:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800424a:	e062      	b.n	8004312 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004254:	d10c      	bne.n	8004270 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004256:	4b32      	ldr	r3, [pc, #200]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	4a31      	ldr	r2, [pc, #196]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6413      	str	r3, [r2, #64]	@ 0x40
 8004262:	4b2f      	ldr	r3, [pc, #188]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	61fb      	str	r3, [r7, #28]
 800426c:	69fb      	ldr	r3, [r7, #28]
}
 800426e:	e050      	b.n	8004312 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a2b      	ldr	r2, [pc, #172]	@ (8004324 <HAL_TIM_Base_MspInit+0x114>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d10c      	bne.n	8004294 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800427a:	4b29      	ldr	r3, [pc, #164]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427e:	4a28      	ldr	r2, [pc, #160]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 8004280:	f043 0302 	orr.w	r3, r3, #2
 8004284:	6413      	str	r3, [r2, #64]	@ 0x40
 8004286:	4b26      	ldr	r3, [pc, #152]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	61bb      	str	r3, [r7, #24]
 8004290:	69bb      	ldr	r3, [r7, #24]
}
 8004292:	e03e      	b.n	8004312 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a23      	ldr	r2, [pc, #140]	@ (8004328 <HAL_TIM_Base_MspInit+0x118>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d10c      	bne.n	80042b8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800429e:	4b20      	ldr	r3, [pc, #128]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 80042a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 80042a4:	f043 0308 	orr.w	r3, r3, #8
 80042a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80042aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 80042ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ae:	f003 0308 	and.w	r3, r3, #8
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	697b      	ldr	r3, [r7, #20]
}
 80042b6:	e02c      	b.n	8004312 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a1b      	ldr	r2, [pc, #108]	@ (800432c <HAL_TIM_Base_MspInit+0x11c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d127      	bne.n	8004312 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80042c2:	4b17      	ldr	r3, [pc, #92]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	4a16      	ldr	r2, [pc, #88]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 80042c8:	f043 0302 	orr.w	r3, r3, #2
 80042cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80042ce:	4b14      	ldr	r3, [pc, #80]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 80042d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80042da:	4b11      	ldr	r3, [pc, #68]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	4a10      	ldr	r2, [pc, #64]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 80042e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004320 <HAL_TIM_Base_MspInit+0x110>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042f2:	2304      	movs	r3, #4
 80042f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f6:	2302      	movs	r3, #2
 80042f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042fa:	2300      	movs	r3, #0
 80042fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fe:	2300      	movs	r3, #0
 8004300:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004302:	2303      	movs	r3, #3
 8004304:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004306:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800430a:	4619      	mov	r1, r3
 800430c:	4808      	ldr	r0, [pc, #32]	@ (8004330 <HAL_TIM_Base_MspInit+0x120>)
 800430e:	f001 fe99 	bl	8006044 <HAL_GPIO_Init>
}
 8004312:	bf00      	nop
 8004314:	3738      	adds	r7, #56	@ 0x38
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40023800 	.word	0x40023800
 8004324:	40000400 	.word	0x40000400
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40010400 	.word	0x40010400
 8004330:	40022000 	.word	0x40022000

08004334 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004338:	4b14      	ldr	r3, [pc, #80]	@ (800438c <MX_UART7_Init+0x58>)
 800433a:	4a15      	ldr	r2, [pc, #84]	@ (8004390 <MX_UART7_Init+0x5c>)
 800433c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800433e:	4b13      	ldr	r3, [pc, #76]	@ (800438c <MX_UART7_Init+0x58>)
 8004340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004344:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004346:	4b11      	ldr	r3, [pc, #68]	@ (800438c <MX_UART7_Init+0x58>)
 8004348:	2200      	movs	r2, #0
 800434a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800434c:	4b0f      	ldr	r3, [pc, #60]	@ (800438c <MX_UART7_Init+0x58>)
 800434e:	2200      	movs	r2, #0
 8004350:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004352:	4b0e      	ldr	r3, [pc, #56]	@ (800438c <MX_UART7_Init+0x58>)
 8004354:	2200      	movs	r2, #0
 8004356:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004358:	4b0c      	ldr	r3, [pc, #48]	@ (800438c <MX_UART7_Init+0x58>)
 800435a:	220c      	movs	r2, #12
 800435c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800435e:	4b0b      	ldr	r3, [pc, #44]	@ (800438c <MX_UART7_Init+0x58>)
 8004360:	2200      	movs	r2, #0
 8004362:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004364:	4b09      	ldr	r3, [pc, #36]	@ (800438c <MX_UART7_Init+0x58>)
 8004366:	2200      	movs	r2, #0
 8004368:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800436a:	4b08      	ldr	r3, [pc, #32]	@ (800438c <MX_UART7_Init+0x58>)
 800436c:	2200      	movs	r2, #0
 800436e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004370:	4b06      	ldr	r3, [pc, #24]	@ (800438c <MX_UART7_Init+0x58>)
 8004372:	2200      	movs	r2, #0
 8004374:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004376:	4805      	ldr	r0, [pc, #20]	@ (800438c <MX_UART7_Init+0x58>)
 8004378:	f006 fc78 	bl	800ac6c <HAL_UART_Init>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8004382:	f7fd feff 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004386:	bf00      	nop
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000c50 	.word	0x20000c50
 8004390:	40007800 	.word	0x40007800

08004394 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004398:	4b14      	ldr	r3, [pc, #80]	@ (80043ec <MX_USART1_UART_Init+0x58>)
 800439a:	4a15      	ldr	r2, [pc, #84]	@ (80043f0 <MX_USART1_UART_Init+0x5c>)
 800439c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800439e:	4b13      	ldr	r3, [pc, #76]	@ (80043ec <MX_USART1_UART_Init+0x58>)
 80043a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80043a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80043a6:	4b11      	ldr	r3, [pc, #68]	@ (80043ec <MX_USART1_UART_Init+0x58>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80043ac:	4b0f      	ldr	r3, [pc, #60]	@ (80043ec <MX_USART1_UART_Init+0x58>)
 80043ae:	2200      	movs	r2, #0
 80043b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80043b2:	4b0e      	ldr	r3, [pc, #56]	@ (80043ec <MX_USART1_UART_Init+0x58>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80043b8:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <MX_USART1_UART_Init+0x58>)
 80043ba:	220c      	movs	r2, #12
 80043bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80043be:	4b0b      	ldr	r3, [pc, #44]	@ (80043ec <MX_USART1_UART_Init+0x58>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80043c4:	4b09      	ldr	r3, [pc, #36]	@ (80043ec <MX_USART1_UART_Init+0x58>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043ca:	4b08      	ldr	r3, [pc, #32]	@ (80043ec <MX_USART1_UART_Init+0x58>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80043d0:	4b06      	ldr	r3, [pc, #24]	@ (80043ec <MX_USART1_UART_Init+0x58>)
 80043d2:	2200      	movs	r2, #0
 80043d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80043d6:	4805      	ldr	r0, [pc, #20]	@ (80043ec <MX_USART1_UART_Init+0x58>)
 80043d8:	f006 fc48 	bl	800ac6c <HAL_UART_Init>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80043e2:	f7fd fecf 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20000cd8 	.word	0x20000cd8
 80043f0:	40011000 	.word	0x40011000

080043f4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80043f8:	4b14      	ldr	r3, [pc, #80]	@ (800444c <MX_USART6_UART_Init+0x58>)
 80043fa:	4a15      	ldr	r2, [pc, #84]	@ (8004450 <MX_USART6_UART_Init+0x5c>)
 80043fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80043fe:	4b13      	ldr	r3, [pc, #76]	@ (800444c <MX_USART6_UART_Init+0x58>)
 8004400:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004404:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004406:	4b11      	ldr	r3, [pc, #68]	@ (800444c <MX_USART6_UART_Init+0x58>)
 8004408:	2200      	movs	r2, #0
 800440a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800440c:	4b0f      	ldr	r3, [pc, #60]	@ (800444c <MX_USART6_UART_Init+0x58>)
 800440e:	2200      	movs	r2, #0
 8004410:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004412:	4b0e      	ldr	r3, [pc, #56]	@ (800444c <MX_USART6_UART_Init+0x58>)
 8004414:	2200      	movs	r2, #0
 8004416:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004418:	4b0c      	ldr	r3, [pc, #48]	@ (800444c <MX_USART6_UART_Init+0x58>)
 800441a:	220c      	movs	r2, #12
 800441c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800441e:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <MX_USART6_UART_Init+0x58>)
 8004420:	2200      	movs	r2, #0
 8004422:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004424:	4b09      	ldr	r3, [pc, #36]	@ (800444c <MX_USART6_UART_Init+0x58>)
 8004426:	2200      	movs	r2, #0
 8004428:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800442a:	4b08      	ldr	r3, [pc, #32]	@ (800444c <MX_USART6_UART_Init+0x58>)
 800442c:	2200      	movs	r2, #0
 800442e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004430:	4b06      	ldr	r3, [pc, #24]	@ (800444c <MX_USART6_UART_Init+0x58>)
 8004432:	2200      	movs	r2, #0
 8004434:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004436:	4805      	ldr	r0, [pc, #20]	@ (800444c <MX_USART6_UART_Init+0x58>)
 8004438:	f006 fc18 	bl	800ac6c <HAL_UART_Init>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004442:	f7fd fe9f 	bl	8002184 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004446:	bf00      	nop
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000d60 	.word	0x20000d60
 8004450:	40011400 	.word	0x40011400

08004454 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b0b0      	sub	sp, #192	@ 0xc0
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800445c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	605a      	str	r2, [r3, #4]
 8004466:	609a      	str	r2, [r3, #8]
 8004468:	60da      	str	r2, [r3, #12]
 800446a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800446c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004470:	2284      	movs	r2, #132	@ 0x84
 8004472:	2100      	movs	r1, #0
 8004474:	4618      	mov	r0, r3
 8004476:	f00e fe01 	bl	801307c <memset>
  if(uartHandle->Instance==UART7)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a79      	ldr	r2, [pc, #484]	@ (8004664 <HAL_UART_MspInit+0x210>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d13d      	bne.n	8004500 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004484:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004488:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800448a:	2300      	movs	r3, #0
 800448c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004490:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004494:	4618      	mov	r0, r3
 8004496:	f003 ff81 	bl	800839c <HAL_RCCEx_PeriphCLKConfig>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80044a0:	f7fd fe70 	bl	8002184 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80044a4:	4b70      	ldr	r3, [pc, #448]	@ (8004668 <HAL_UART_MspInit+0x214>)
 80044a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a8:	4a6f      	ldr	r2, [pc, #444]	@ (8004668 <HAL_UART_MspInit+0x214>)
 80044aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80044ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80044b0:	4b6d      	ldr	r3, [pc, #436]	@ (8004668 <HAL_UART_MspInit+0x214>)
 80044b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80044b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80044ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80044bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004668 <HAL_UART_MspInit+0x214>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c0:	4a69      	ldr	r2, [pc, #420]	@ (8004668 <HAL_UART_MspInit+0x214>)
 80044c2:	f043 0320 	orr.w	r3, r3, #32
 80044c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80044c8:	4b67      	ldr	r3, [pc, #412]	@ (8004668 <HAL_UART_MspInit+0x214>)
 80044ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044cc:	f003 0320 	and.w	r3, r3, #32
 80044d0:	623b      	str	r3, [r7, #32]
 80044d2:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80044d4:	23c0      	movs	r3, #192	@ 0xc0
 80044d6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044da:	2302      	movs	r3, #2
 80044dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e0:	2300      	movs	r3, #0
 80044e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044e6:	2303      	movs	r3, #3
 80044e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80044ec:	2308      	movs	r3, #8
 80044ee:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80044f2:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80044f6:	4619      	mov	r1, r3
 80044f8:	485c      	ldr	r0, [pc, #368]	@ (800466c <HAL_UART_MspInit+0x218>)
 80044fa:	f001 fda3 	bl	8006044 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80044fe:	e0ac      	b.n	800465a <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a5a      	ldr	r2, [pc, #360]	@ (8004670 <HAL_UART_MspInit+0x21c>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d165      	bne.n	80045d6 <HAL_UART_MspInit+0x182>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800450a:	2340      	movs	r3, #64	@ 0x40
 800450c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800450e:	2300      	movs	r3, #0
 8004510:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004516:	4618      	mov	r0, r3
 8004518:	f003 ff40 	bl	800839c <HAL_RCCEx_PeriphCLKConfig>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d001      	beq.n	8004526 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004522:	f7fd fe2f 	bl	8002184 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004526:	4b50      	ldr	r3, [pc, #320]	@ (8004668 <HAL_UART_MspInit+0x214>)
 8004528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800452a:	4a4f      	ldr	r2, [pc, #316]	@ (8004668 <HAL_UART_MspInit+0x214>)
 800452c:	f043 0310 	orr.w	r3, r3, #16
 8004530:	6453      	str	r3, [r2, #68]	@ 0x44
 8004532:	4b4d      	ldr	r3, [pc, #308]	@ (8004668 <HAL_UART_MspInit+0x214>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800453e:	4b4a      	ldr	r3, [pc, #296]	@ (8004668 <HAL_UART_MspInit+0x214>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004542:	4a49      	ldr	r2, [pc, #292]	@ (8004668 <HAL_UART_MspInit+0x214>)
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	6313      	str	r3, [r2, #48]	@ 0x30
 800454a:	4b47      	ldr	r3, [pc, #284]	@ (8004668 <HAL_UART_MspInit+0x214>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	61bb      	str	r3, [r7, #24]
 8004554:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004556:	4b44      	ldr	r3, [pc, #272]	@ (8004668 <HAL_UART_MspInit+0x214>)
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	4a43      	ldr	r2, [pc, #268]	@ (8004668 <HAL_UART_MspInit+0x214>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6313      	str	r3, [r2, #48]	@ 0x30
 8004562:	4b41      	ldr	r3, [pc, #260]	@ (8004668 <HAL_UART_MspInit+0x214>)
 8004564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	617b      	str	r3, [r7, #20]
 800456c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800456e:	2380      	movs	r3, #128	@ 0x80
 8004570:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004574:	2302      	movs	r3, #2
 8004576:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457a:	2300      	movs	r3, #0
 800457c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004580:	2300      	movs	r3, #0
 8004582:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004586:	2307      	movs	r3, #7
 8004588:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800458c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004590:	4619      	mov	r1, r3
 8004592:	4838      	ldr	r0, [pc, #224]	@ (8004674 <HAL_UART_MspInit+0x220>)
 8004594:	f001 fd56 	bl	8006044 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004598:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800459c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a0:	2302      	movs	r3, #2
 80045a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045ac:	2300      	movs	r3, #0
 80045ae:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80045b2:	2307      	movs	r3, #7
 80045b4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80045b8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80045bc:	4619      	mov	r1, r3
 80045be:	482e      	ldr	r0, [pc, #184]	@ (8004678 <HAL_UART_MspInit+0x224>)
 80045c0:	f001 fd40 	bl	8006044 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80045c4:	2200      	movs	r2, #0
 80045c6:	2107      	movs	r1, #7
 80045c8:	2025      	movs	r0, #37	@ 0x25
 80045ca:	f000 fc21 	bl	8004e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80045ce:	2025      	movs	r0, #37	@ 0x25
 80045d0:	f000 fc3a 	bl	8004e48 <HAL_NVIC_EnableIRQ>
}
 80045d4:	e041      	b.n	800465a <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART6)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a28      	ldr	r2, [pc, #160]	@ (800467c <HAL_UART_MspInit+0x228>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d13c      	bne.n	800465a <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80045e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80045e6:	2300      	movs	r3, #0
 80045e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80045f0:	4618      	mov	r0, r3
 80045f2:	f003 fed3 	bl	800839c <HAL_RCCEx_PeriphCLKConfig>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <HAL_UART_MspInit+0x1ac>
      Error_Handler();
 80045fc:	f7fd fdc2 	bl	8002184 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004600:	4b19      	ldr	r3, [pc, #100]	@ (8004668 <HAL_UART_MspInit+0x214>)
 8004602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004604:	4a18      	ldr	r2, [pc, #96]	@ (8004668 <HAL_UART_MspInit+0x214>)
 8004606:	f043 0320 	orr.w	r3, r3, #32
 800460a:	6453      	str	r3, [r2, #68]	@ 0x44
 800460c:	4b16      	ldr	r3, [pc, #88]	@ (8004668 <HAL_UART_MspInit+0x214>)
 800460e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004618:	4b13      	ldr	r3, [pc, #76]	@ (8004668 <HAL_UART_MspInit+0x214>)
 800461a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461c:	4a12      	ldr	r2, [pc, #72]	@ (8004668 <HAL_UART_MspInit+0x214>)
 800461e:	f043 0304 	orr.w	r3, r3, #4
 8004622:	6313      	str	r3, [r2, #48]	@ 0x30
 8004624:	4b10      	ldr	r3, [pc, #64]	@ (8004668 <HAL_UART_MspInit+0x214>)
 8004626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	60fb      	str	r3, [r7, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004630:	23c0      	movs	r3, #192	@ 0xc0
 8004632:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004636:	2302      	movs	r3, #2
 8004638:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	2300      	movs	r3, #0
 800463e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004642:	2303      	movs	r3, #3
 8004644:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004648:	2308      	movs	r3, #8
 800464a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800464e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8004652:	4619      	mov	r1, r3
 8004654:	480a      	ldr	r0, [pc, #40]	@ (8004680 <HAL_UART_MspInit+0x22c>)
 8004656:	f001 fcf5 	bl	8006044 <HAL_GPIO_Init>
}
 800465a:	bf00      	nop
 800465c:	37c0      	adds	r7, #192	@ 0xc0
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40007800 	.word	0x40007800
 8004668:	40023800 	.word	0x40023800
 800466c:	40021400 	.word	0x40021400
 8004670:	40011000 	.word	0x40011000
 8004674:	40020400 	.word	0x40020400
 8004678:	40020000 	.word	0x40020000
 800467c:	40011400 	.word	0x40011400
 8004680:	40020800 	.word	0x40020800

08004684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004684:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80046bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004688:	480d      	ldr	r0, [pc, #52]	@ (80046c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800468a:	490e      	ldr	r1, [pc, #56]	@ (80046c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800468c:	4a0e      	ldr	r2, [pc, #56]	@ (80046c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800468e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004690:	e002      	b.n	8004698 <LoopCopyDataInit>

08004692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004696:	3304      	adds	r3, #4

08004698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800469a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800469c:	d3f9      	bcc.n	8004692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800469e:	4a0b      	ldr	r2, [pc, #44]	@ (80046cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80046a0:	4c0b      	ldr	r4, [pc, #44]	@ (80046d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80046a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046a4:	e001      	b.n	80046aa <LoopFillZerobss>

080046a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046a8:	3204      	adds	r2, #4

080046aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046ac:	d3fb      	bcc.n	80046a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046ae:	f7ff fc0b 	bl	8003ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046b2:	f00e fd47 	bl	8013144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046b6:	f7fd fb6d 	bl	8001d94 <main>
  bx  lr    
 80046ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80046bc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80046c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046c4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80046c8:	08015b30 	.word	0x08015b30
  ldr r2, =_sbss
 80046cc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80046d0:	20004cc0 	.word	0x20004cc0

080046d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046d4:	e7fe      	b.n	80046d4 <ADC_IRQHandler>

080046d6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046d6:	b580      	push	{r7, lr}
 80046d8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046da:	2003      	movs	r0, #3
 80046dc:	f000 fb8d 	bl	8004dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046e0:	200f      	movs	r0, #15
 80046e2:	f7ff fadf 	bl	8003ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046e6:	f7ff fab5 	bl	8003c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046f4:	4b06      	ldr	r3, [pc, #24]	@ (8004710 <HAL_IncTick+0x20>)
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b06      	ldr	r3, [pc, #24]	@ (8004714 <HAL_IncTick+0x24>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4413      	add	r3, r2
 8004700:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <HAL_IncTick+0x24>)
 8004702:	6013      	str	r3, [r2, #0]
}
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	2000003c 	.word	0x2000003c
 8004714:	20000de8 	.word	0x20000de8

08004718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004718:	b480      	push	{r7}
 800471a:	af00      	add	r7, sp, #0
  return uwTick;
 800471c:	4b03      	ldr	r3, [pc, #12]	@ (800472c <HAL_GetTick+0x14>)
 800471e:	681b      	ldr	r3, [r3, #0]
}
 8004720:	4618      	mov	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20000de8 	.word	0x20000de8

08004730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004738:	f7ff ffee 	bl	8004718 <HAL_GetTick>
 800473c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004748:	d005      	beq.n	8004756 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800474a:	4b0a      	ldr	r3, [pc, #40]	@ (8004774 <HAL_Delay+0x44>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4413      	add	r3, r2
 8004754:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004756:	bf00      	nop
 8004758:	f7ff ffde 	bl	8004718 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	68fa      	ldr	r2, [r7, #12]
 8004764:	429a      	cmp	r2, r3
 8004766:	d8f7      	bhi.n	8004758 <HAL_Delay+0x28>
  {
  }
}
 8004768:	bf00      	nop
 800476a:	bf00      	nop
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	2000003c 	.word	0x2000003c

08004778 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e031      	b.n	80047f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fb ffa6 	bl	80006e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ae:	f003 0310 	and.w	r3, r3, #16
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d116      	bne.n	80047e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047ba:	4b10      	ldr	r3, [pc, #64]	@ (80047fc <HAL_ADC_Init+0x84>)
 80047bc:	4013      	ands	r3, r2
 80047be:	f043 0202 	orr.w	r2, r3, #2
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f970 	bl	8004aac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	f023 0303 	bic.w	r3, r3, #3
 80047da:	f043 0201 	orr.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80047e2:	e001      	b.n	80047e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80047f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	ffffeefd 	.word	0xffffeefd

08004800 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_ADC_ConfigChannel+0x1c>
 8004818:	2302      	movs	r3, #2
 800481a:	e136      	b.n	8004a8a <HAL_ADC_ConfigChannel+0x28a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b09      	cmp	r3, #9
 800482a:	d93a      	bls.n	80048a2 <HAL_ADC_ConfigChannel+0xa2>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004834:	d035      	beq.n	80048a2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68d9      	ldr	r1, [r3, #12]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	b29b      	uxth	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	4613      	mov	r3, r2
 8004846:	005b      	lsls	r3, r3, #1
 8004848:	4413      	add	r3, r2
 800484a:	3b1e      	subs	r3, #30
 800484c:	2207      	movs	r2, #7
 800484e:	fa02 f303 	lsl.w	r3, r2, r3
 8004852:	43da      	mvns	r2, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	400a      	ands	r2, r1
 800485a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a8d      	ldr	r2, [pc, #564]	@ (8004a98 <HAL_ADC_ConfigChannel+0x298>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d10a      	bne.n	800487c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68d9      	ldr	r1, [r3, #12]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	061a      	lsls	r2, r3, #24
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800487a:	e035      	b.n	80048e8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68d9      	ldr	r1, [r3, #12]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	689a      	ldr	r2, [r3, #8]
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	b29b      	uxth	r3, r3
 800488c:	4618      	mov	r0, r3
 800488e:	4603      	mov	r3, r0
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	4403      	add	r3, r0
 8004894:	3b1e      	subs	r3, #30
 8004896:	409a      	lsls	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80048a0:	e022      	b.n	80048e8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	6919      	ldr	r1, [r3, #16]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	4613      	mov	r3, r2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	2207      	movs	r2, #7
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	43da      	mvns	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	400a      	ands	r2, r1
 80048c4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6919      	ldr	r1, [r3, #16]
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	4618      	mov	r0, r3
 80048d8:	4603      	mov	r3, r0
 80048da:	005b      	lsls	r3, r3, #1
 80048dc:	4403      	add	r3, r0
 80048de:	409a      	lsls	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b06      	cmp	r3, #6
 80048ee:	d824      	bhi.n	800493a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685a      	ldr	r2, [r3, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	4413      	add	r3, r2
 8004900:	3b05      	subs	r3, #5
 8004902:	221f      	movs	r2, #31
 8004904:	fa02 f303 	lsl.w	r3, r2, r3
 8004908:	43da      	mvns	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	400a      	ands	r2, r1
 8004910:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	b29b      	uxth	r3, r3
 800491e:	4618      	mov	r0, r3
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	3b05      	subs	r3, #5
 800492c:	fa00 f203 	lsl.w	r2, r0, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	635a      	str	r2, [r3, #52]	@ 0x34
 8004938:	e04c      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b0c      	cmp	r3, #12
 8004940:	d824      	bhi.n	800498c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685a      	ldr	r2, [r3, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	3b23      	subs	r3, #35	@ 0x23
 8004954:	221f      	movs	r2, #31
 8004956:	fa02 f303 	lsl.w	r3, r2, r3
 800495a:	43da      	mvns	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	400a      	ands	r2, r1
 8004962:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	4618      	mov	r0, r3
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	4613      	mov	r3, r2
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	4413      	add	r3, r2
 800497c:	3b23      	subs	r3, #35	@ 0x23
 800497e:	fa00 f203 	lsl.w	r2, r0, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	631a      	str	r2, [r3, #48]	@ 0x30
 800498a:	e023      	b.n	80049d4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	3b41      	subs	r3, #65	@ 0x41
 800499e:	221f      	movs	r2, #31
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43da      	mvns	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	400a      	ands	r2, r1
 80049ac:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	b29b      	uxth	r3, r3
 80049ba:	4618      	mov	r0, r3
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	4613      	mov	r3, r2
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	4413      	add	r3, r2
 80049c6:	3b41      	subs	r3, #65	@ 0x41
 80049c8:	fa00 f203 	lsl.w	r2, r0, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a30      	ldr	r2, [pc, #192]	@ (8004a9c <HAL_ADC_ConfigChannel+0x29c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d10a      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x1f4>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049e6:	d105      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80049e8:	4b2d      	ldr	r3, [pc, #180]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x2a0>)
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	4a2c      	ldr	r2, [pc, #176]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x2a0>)
 80049ee:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80049f2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a28      	ldr	r2, [pc, #160]	@ (8004a9c <HAL_ADC_ConfigChannel+0x29c>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d10f      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x21e>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b12      	cmp	r3, #18
 8004a04:	d10b      	bne.n	8004a1e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004a06:	4b26      	ldr	r3, [pc, #152]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	4a25      	ldr	r2, [pc, #148]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004a0c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004a10:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004a12:	4b23      	ldr	r3, [pc, #140]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	4a22      	ldr	r2, [pc, #136]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004a18:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004a1c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1e      	ldr	r2, [pc, #120]	@ (8004a9c <HAL_ADC_ConfigChannel+0x29c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d12b      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x280>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8004a98 <HAL_ADC_ConfigChannel+0x298>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <HAL_ADC_ConfigChannel+0x23a>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b11      	cmp	r3, #17
 8004a38:	d122      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004a3a:	4b19      	ldr	r3, [pc, #100]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004a40:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8004a44:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004a46:	4b16      	ldr	r3, [pc, #88]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	4a15      	ldr	r2, [pc, #84]	@ (8004aa0 <HAL_ADC_ConfigChannel+0x2a0>)
 8004a4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004a50:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a10      	ldr	r2, [pc, #64]	@ (8004a98 <HAL_ADC_ConfigChannel+0x298>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d111      	bne.n	8004a80 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004a5c:	4b11      	ldr	r3, [pc, #68]	@ (8004aa4 <HAL_ADC_ConfigChannel+0x2a4>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a11      	ldr	r2, [pc, #68]	@ (8004aa8 <HAL_ADC_ConfigChannel+0x2a8>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	0c9a      	lsrs	r2, r3, #18
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	005b      	lsls	r3, r3, #1
 8004a70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004a72:	e002      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1f9      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	10000012 	.word	0x10000012
 8004a9c:	40012000 	.word	0x40012000
 8004aa0:	40012300 	.word	0x40012300
 8004aa4:	20000034 	.word	0x20000034
 8004aa8:	431bde83 	.word	0x431bde83

08004aac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004ab4:	4b78      	ldr	r3, [pc, #480]	@ (8004c98 <ADC_Init+0x1ec>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	4a77      	ldr	r2, [pc, #476]	@ (8004c98 <ADC_Init+0x1ec>)
 8004aba:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 8004abe:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004ac0:	4b75      	ldr	r3, [pc, #468]	@ (8004c98 <ADC_Init+0x1ec>)
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	4973      	ldr	r1, [pc, #460]	@ (8004c98 <ADC_Init+0x1ec>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004adc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6859      	ldr	r1, [r3, #4]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	021a      	lsls	r2, r3, #8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8004b00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6859      	ldr	r1, [r3, #4]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689a      	ldr	r2, [r3, #8]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6899      	ldr	r1, [r3, #8]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b3a:	4a58      	ldr	r2, [pc, #352]	@ (8004c9c <ADC_Init+0x1f0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d022      	beq.n	8004b86 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	6899      	ldr	r1, [r3, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004b70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6899      	ldr	r1, [r3, #8]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	609a      	str	r2, [r3, #8]
 8004b84:	e00f      	b.n	8004ba6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004b94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	689a      	ldr	r2, [r3, #8]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004ba4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689a      	ldr	r2, [r3, #8]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0202 	bic.w	r2, r2, #2
 8004bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6899      	ldr	r1, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	699b      	ldr	r3, [r3, #24]
 8004bc0:	005a      	lsls	r2, r3, #1
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d01b      	beq.n	8004c0c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004be2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8004bf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6859      	ldr	r1, [r3, #4]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	035a      	lsls	r2, r3, #13
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	e007      	b.n	8004c1c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004c2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	3b01      	subs	r3, #1
 8004c38:	051a      	lsls	r2, r3, #20
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004c50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6899      	ldr	r1, [r3, #8]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004c5e:	025a      	lsls	r2, r3, #9
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	689a      	ldr	r2, [r3, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6899      	ldr	r1, [r3, #8]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	029a      	lsls	r2, r3, #10
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	609a      	str	r2, [r3, #8]
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	40012300 	.word	0x40012300
 8004c9c:	0f000001 	.word	0x0f000001

08004ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004cc8:	4b06      	ldr	r3, [pc, #24]	@ (8004ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cce:	4a04      	ldr	r2, [pc, #16]	@ (8004ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	60d3      	str	r3, [r2, #12]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	e000ed00 	.word	0xe000ed00
 8004ce4:	05fa0000 	.word	0x05fa0000

08004ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004cec:	4b04      	ldr	r3, [pc, #16]	@ (8004d00 <__NVIC_GetPriorityGrouping+0x18>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	0a1b      	lsrs	r3, r3, #8
 8004cf2:	f003 0307 	and.w	r3, r3, #7
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	e000ed00 	.word	0xe000ed00

08004d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	db0b      	blt.n	8004d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d16:	79fb      	ldrb	r3, [r7, #7]
 8004d18:	f003 021f 	and.w	r2, r3, #31
 8004d1c:	4907      	ldr	r1, [pc, #28]	@ (8004d3c <__NVIC_EnableIRQ+0x38>)
 8004d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d22:	095b      	lsrs	r3, r3, #5
 8004d24:	2001      	movs	r0, #1
 8004d26:	fa00 f202 	lsl.w	r2, r0, r2
 8004d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	e000e100 	.word	0xe000e100

08004d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	6039      	str	r1, [r7, #0]
 8004d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	db0a      	blt.n	8004d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	b2da      	uxtb	r2, r3
 8004d58:	490c      	ldr	r1, [pc, #48]	@ (8004d8c <__NVIC_SetPriority+0x4c>)
 8004d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d5e:	0112      	lsls	r2, r2, #4
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	440b      	add	r3, r1
 8004d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d68:	e00a      	b.n	8004d80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	4908      	ldr	r1, [pc, #32]	@ (8004d90 <__NVIC_SetPriority+0x50>)
 8004d70:	79fb      	ldrb	r3, [r7, #7]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	3b04      	subs	r3, #4
 8004d78:	0112      	lsls	r2, r2, #4
 8004d7a:	b2d2      	uxtb	r2, r2
 8004d7c:	440b      	add	r3, r1
 8004d7e:	761a      	strb	r2, [r3, #24]
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	e000e100 	.word	0xe000e100
 8004d90:	e000ed00 	.word	0xe000ed00

08004d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b089      	sub	sp, #36	@ 0x24
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	60f8      	str	r0, [r7, #12]
 8004d9c:	60b9      	str	r1, [r7, #8]
 8004d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f003 0307 	and.w	r3, r3, #7
 8004da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f1c3 0307 	rsb	r3, r3, #7
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	bf28      	it	cs
 8004db2:	2304      	movcs	r3, #4
 8004db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	3304      	adds	r3, #4
 8004dba:	2b06      	cmp	r3, #6
 8004dbc:	d902      	bls.n	8004dc4 <NVIC_EncodePriority+0x30>
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	3b03      	subs	r3, #3
 8004dc2:	e000      	b.n	8004dc6 <NVIC_EncodePriority+0x32>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	43da      	mvns	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	401a      	ands	r2, r3
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	fa01 f303 	lsl.w	r3, r1, r3
 8004de6:	43d9      	mvns	r1, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dec:	4313      	orrs	r3, r2
         );
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3724      	adds	r7, #36	@ 0x24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dfa:	b580      	push	{r7, lr}
 8004dfc:	b082      	sub	sp, #8
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff ff4c 	bl	8004ca0 <__NVIC_SetPriorityGrouping>
}
 8004e08:	bf00      	nop
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	4603      	mov	r3, r0
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
 8004e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e22:	f7ff ff61 	bl	8004ce8 <__NVIC_GetPriorityGrouping>
 8004e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	6978      	ldr	r0, [r7, #20]
 8004e2e:	f7ff ffb1 	bl	8004d94 <NVIC_EncodePriority>
 8004e32:	4602      	mov	r2, r0
 8004e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f7ff ff80 	bl	8004d40 <__NVIC_SetPriority>
}
 8004e40:	bf00      	nop
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	4603      	mov	r3, r0
 8004e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff ff54 	bl	8004d04 <__NVIC_EnableIRQ>
}
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e014      	b.n	8004ea0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	791b      	ldrb	r3, [r3, #4]
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d105      	bne.n	8004e8c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7fb fcc6 	bl	8000818 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2201      	movs	r2, #1
 8004e9c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ebe:	d120      	bne.n	8004f02 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ece:	d118      	bne.n	8004f02 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2204      	movs	r2, #4
 8004ed4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	f043 0201 	orr.w	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004eea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004efa:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f82d 	bl	8004f5c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f10:	d120      	bne.n	8004f54 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f20:	d118      	bne.n	8004f54 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2204      	movs	r2, #4
 8004f26:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f043 0202 	orr.w	r2, r3, #2
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004f3c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8004f4c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f85d 	bl	800500e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8004f54:	bf00      	nop
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	795b      	ldrb	r3, [r3, #5]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_DAC_ConfigChannel+0x18>
 8004f84:	2302      	movs	r3, #2
 8004f86:	e03c      	b.n	8005002 <HAL_DAC_ConfigChannel+0x92>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2202      	movs	r2, #2
 8004f92:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f003 0310 	and.w	r3, r3, #16
 8004fa2:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	43db      	mvns	r3, r3
 8004fac:	697a      	ldr	r2, [r7, #20]
 8004fae:	4013      	ands	r3, r2
 8004fb0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6819      	ldr	r1, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f003 0310 	and.w	r3, r3, #16
 8004fe4:	22c0      	movs	r2, #192	@ 0xc0
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	43da      	mvns	r2, r3
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	400a      	ands	r2, r1
 8004ff2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800500e:	b480      	push	{r7}
 8005010:	b083      	sub	sp, #12
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005030:	f7ff fb72 	bl	8004718 <HAL_GetTick>
 8005034:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e099      	b.n	8005174 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2202      	movs	r2, #2
 8005044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f022 0201 	bic.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005060:	e00f      	b.n	8005082 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005062:	f7ff fb59 	bl	8004718 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b05      	cmp	r3, #5
 800506e:	d908      	bls.n	8005082 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2203      	movs	r2, #3
 800507a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e078      	b.n	8005174 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1e8      	bne.n	8005062 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005098:	697a      	ldr	r2, [r7, #20]
 800509a:	4b38      	ldr	r3, [pc, #224]	@ (800517c <HAL_DMA_Init+0x158>)
 800509c:	4013      	ands	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80050ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80050c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a1b      	ldr	r3, [r3, #32]
 80050cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80050ce:	697a      	ldr	r2, [r7, #20]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d8:	2b04      	cmp	r3, #4
 80050da:	d107      	bne.n	80050ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e4:	4313      	orrs	r3, r2
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f023 0307 	bic.w	r3, r3, #7
 8005102:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005112:	2b04      	cmp	r3, #4
 8005114:	d117      	bne.n	8005146 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800511a:	697a      	ldr	r2, [r7, #20]
 800511c:	4313      	orrs	r3, r2
 800511e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00e      	beq.n	8005146 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fb73 	bl	8005814 <DMA_CheckFifoParam>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d008      	beq.n	8005146 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2240      	movs	r2, #64	@ 0x40
 8005138:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8005142:	2301      	movs	r3, #1
 8005144:	e016      	b.n	8005174 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 fb2a 	bl	80057a8 <DMA_CalcBaseAndBitshift>
 8005154:	4603      	mov	r3, r0
 8005156:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800515c:	223f      	movs	r2, #63	@ 0x3f
 800515e:	409a      	lsls	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3718      	adds	r7, #24
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	f010803f 	.word	0xf010803f

08005180 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b084      	sub	sp, #16
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e050      	b.n	8005234 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b02      	cmp	r3, #2
 800519c:	d101      	bne.n	80051a2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800519e:	2302      	movs	r3, #2
 80051a0:	e048      	b.n	8005234 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f022 0201 	bic.w	r2, r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2200      	movs	r2, #0
 80051c0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2200      	movs	r2, #0
 80051c8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2200      	movs	r2, #0
 80051d0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2200      	movs	r2, #0
 80051d8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2221      	movs	r2, #33	@ 0x21
 80051e0:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 fae0 	bl	80057a8 <DMA_CalcBaseAndBitshift>
 80051e8:	4603      	mov	r3, r0
 80051ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051f0:	223f      	movs	r2, #63	@ 0x3f
 80051f2:	409a      	lsls	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;  
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2200      	movs	r2, #0
 800521a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3710      	adds	r7, #16
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
 8005248:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524a:	2300      	movs	r3, #0
 800524c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005252:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <HAL_DMA_Start_IT+0x26>
 800525e:	2302      	movs	r3, #2
 8005260:	e048      	b.n	80052f4 <HAL_DMA_Start_IT+0xb8>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b01      	cmp	r3, #1
 8005274:	d137      	bne.n	80052e6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2202      	movs	r2, #2
 800527a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 fa5e 	bl	800574c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005294:	223f      	movs	r2, #63	@ 0x3f
 8005296:	409a      	lsls	r2, r3
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0216 	orr.w	r2, r2, #22
 80052aa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052ba:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d007      	beq.n	80052d4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0208 	orr.w	r2, r2, #8
 80052d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f042 0201 	orr.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
 80052e4:	e005      	b.n	80052f2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80052ee:	2302      	movs	r3, #2
 80052f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80052f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3718      	adds	r7, #24
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005308:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800530a:	f7ff fa05 	bl	8004718 <HAL_GetTick>
 800530e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d008      	beq.n	800532e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2280      	movs	r2, #128	@ 0x80
 8005320:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e052      	b.n	80053d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 0216 	bic.w	r2, r2, #22
 800533c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	695a      	ldr	r2, [r3, #20]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800534c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d103      	bne.n	800535e <HAL_DMA_Abort+0x62>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0208 	bic.w	r2, r2, #8
 800536c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f022 0201 	bic.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800537e:	e013      	b.n	80053a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005380:	f7ff f9ca 	bl	8004718 <HAL_GetTick>
 8005384:	4602      	mov	r2, r0
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	1ad3      	subs	r3, r2, r3
 800538a:	2b05      	cmp	r3, #5
 800538c:	d90c      	bls.n	80053a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2203      	movs	r2, #3
 8005398:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e015      	b.n	80053d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e4      	bne.n	8005380 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053ba:	223f      	movs	r2, #63	@ 0x3f
 80053bc:	409a      	lsls	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3710      	adds	r7, #16
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d004      	beq.n	80053fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2280      	movs	r2, #128	@ 0x80
 80053f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e00c      	b.n	8005414 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2205      	movs	r2, #5
 80053fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f022 0201 	bic.w	r2, r2, #1
 8005410:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005412:	2300      	movs	r3, #0
}
 8005414:	4618      	mov	r0, r3
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005428:	2300      	movs	r3, #0
 800542a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800542c:	4b8e      	ldr	r3, [pc, #568]	@ (8005668 <HAL_DMA_IRQHandler+0x248>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a8e      	ldr	r2, [pc, #568]	@ (800566c <HAL_DMA_IRQHandler+0x24c>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	0a9b      	lsrs	r3, r3, #10
 8005438:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800544a:	2208      	movs	r2, #8
 800544c:	409a      	lsls	r2, r3
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4013      	ands	r3, r2
 8005452:	2b00      	cmp	r3, #0
 8005454:	d01a      	beq.n	800548c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	d013      	beq.n	800548c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0204 	bic.w	r2, r2, #4
 8005472:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005478:	2208      	movs	r2, #8
 800547a:	409a      	lsls	r2, r3
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005484:	f043 0201 	orr.w	r2, r3, #1
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005490:	2201      	movs	r2, #1
 8005492:	409a      	lsls	r2, r3
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4013      	ands	r3, r2
 8005498:	2b00      	cmp	r3, #0
 800549a:	d012      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00b      	beq.n	80054c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ae:	2201      	movs	r2, #1
 80054b0:	409a      	lsls	r2, r3
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ba:	f043 0202 	orr.w	r2, r3, #2
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054c6:	2204      	movs	r2, #4
 80054c8:	409a      	lsls	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d012      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00b      	beq.n	80054f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054e4:	2204      	movs	r2, #4
 80054e6:	409a      	lsls	r2, r3
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054f0:	f043 0204 	orr.w	r2, r3, #4
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054fc:	2210      	movs	r2, #16
 80054fe:	409a      	lsls	r2, r3
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d043      	beq.n	8005590 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b00      	cmp	r3, #0
 8005514:	d03c      	beq.n	8005590 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800551a:	2210      	movs	r2, #16
 800551c:	409a      	lsls	r2, r3
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800552c:	2b00      	cmp	r3, #0
 800552e:	d018      	beq.n	8005562 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d108      	bne.n	8005550 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005542:	2b00      	cmp	r3, #0
 8005544:	d024      	beq.n	8005590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
 800554e:	e01f      	b.n	8005590 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005554:	2b00      	cmp	r3, #0
 8005556:	d01b      	beq.n	8005590 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	4798      	blx	r3
 8005560:	e016      	b.n	8005590 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d107      	bne.n	8005580 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f022 0208 	bic.w	r2, r2, #8
 800557e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005594:	2220      	movs	r2, #32
 8005596:	409a      	lsls	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4013      	ands	r3, r2
 800559c:	2b00      	cmp	r3, #0
 800559e:	f000 808f 	beq.w	80056c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0310 	and.w	r3, r3, #16
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 8087 	beq.w	80056c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055b6:	2220      	movs	r2, #32
 80055b8:	409a      	lsls	r2, r3
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b05      	cmp	r3, #5
 80055c8:	d136      	bne.n	8005638 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0216 	bic.w	r2, r2, #22
 80055d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	695a      	ldr	r2, [r3, #20]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80055e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d103      	bne.n	80055fa <HAL_DMA_IRQHandler+0x1da>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0208 	bic.w	r2, r2, #8
 8005608:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800560e:	223f      	movs	r2, #63	@ 0x3f
 8005610:	409a      	lsls	r2, r3
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800562a:	2b00      	cmp	r3, #0
 800562c:	d07e      	beq.n	800572c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	4798      	blx	r3
        }
        return;
 8005636:	e079      	b.n	800572c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d01d      	beq.n	8005682 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10d      	bne.n	8005670 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005658:	2b00      	cmp	r3, #0
 800565a:	d031      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	4798      	blx	r3
 8005664:	e02c      	b.n	80056c0 <HAL_DMA_IRQHandler+0x2a0>
 8005666:	bf00      	nop
 8005668:	20000034 	.word	0x20000034
 800566c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005674:	2b00      	cmp	r3, #0
 8005676:	d023      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	4798      	blx	r3
 8005680:	e01e      	b.n	80056c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10f      	bne.n	80056b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f022 0210 	bic.w	r2, r2, #16
 800569e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d032      	beq.n	800572e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056cc:	f003 0301 	and.w	r3, r3, #1
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d022      	beq.n	800571a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2205      	movs	r2, #5
 80056d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f022 0201 	bic.w	r2, r2, #1
 80056ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	3301      	adds	r3, #1
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d307      	bcc.n	8005708 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1f2      	bne.n	80056ec <HAL_DMA_IRQHandler+0x2cc>
 8005706:	e000      	b.n	800570a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005708:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d005      	beq.n	800572e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	4798      	blx	r3
 800572a:	e000      	b.n	800572e <HAL_DMA_IRQHandler+0x30e>
        return;
 800572c:	bf00      	nop
    }
  }
}
 800572e:	3718      	adds	r7, #24
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8005740:	4618      	mov	r0, r3
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800574c:	b480      	push	{r7}
 800574e:	b085      	sub	sp, #20
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
 8005758:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005768:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	683a      	ldr	r2, [r7, #0]
 8005770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	2b40      	cmp	r3, #64	@ 0x40
 8005778:	d108      	bne.n	800578c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800578a:	e007      	b.n	800579c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	60da      	str	r2, [r3, #12]
}
 800579c:	bf00      	nop
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr

080057a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	3b10      	subs	r3, #16
 80057b8:	4a13      	ldr	r2, [pc, #76]	@ (8005808 <DMA_CalcBaseAndBitshift+0x60>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	091b      	lsrs	r3, r3, #4
 80057c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80057c2:	4a12      	ldr	r2, [pc, #72]	@ (800580c <DMA_CalcBaseAndBitshift+0x64>)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	461a      	mov	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2b03      	cmp	r3, #3
 80057d4:	d908      	bls.n	80057e8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005810 <DMA_CalcBaseAndBitshift+0x68>)
 80057de:	4013      	ands	r3, r2
 80057e0:	1d1a      	adds	r2, r3, #4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	659a      	str	r2, [r3, #88]	@ 0x58
 80057e6:	e006      	b.n	80057f6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	461a      	mov	r2, r3
 80057ee:	4b08      	ldr	r3, [pc, #32]	@ (8005810 <DMA_CalcBaseAndBitshift+0x68>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	aaaaaaab 	.word	0xaaaaaaab
 800580c:	08015690 	.word	0x08015690
 8005810:	fffffc00 	.word	0xfffffc00

08005814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d11f      	bne.n	800586e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b03      	cmp	r3, #3
 8005832:	d856      	bhi.n	80058e2 <DMA_CheckFifoParam+0xce>
 8005834:	a201      	add	r2, pc, #4	@ (adr r2, 800583c <DMA_CheckFifoParam+0x28>)
 8005836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583a:	bf00      	nop
 800583c:	0800584d 	.word	0x0800584d
 8005840:	0800585f 	.word	0x0800585f
 8005844:	0800584d 	.word	0x0800584d
 8005848:	080058e3 	.word	0x080058e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d046      	beq.n	80058e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800585c:	e043      	b.n	80058e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005862:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005866:	d140      	bne.n	80058ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800586c:	e03d      	b.n	80058ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005876:	d121      	bne.n	80058bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2b03      	cmp	r3, #3
 800587c:	d837      	bhi.n	80058ee <DMA_CheckFifoParam+0xda>
 800587e:	a201      	add	r2, pc, #4	@ (adr r2, 8005884 <DMA_CheckFifoParam+0x70>)
 8005880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005884:	08005895 	.word	0x08005895
 8005888:	0800589b 	.word	0x0800589b
 800588c:	08005895 	.word	0x08005895
 8005890:	080058ad 	.word	0x080058ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	73fb      	strb	r3, [r7, #15]
      break;
 8005898:	e030      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800589e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d025      	beq.n	80058f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058aa:	e022      	b.n	80058f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80058b4:	d11f      	bne.n	80058f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80058ba:	e01c      	b.n	80058f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d903      	bls.n	80058ca <DMA_CheckFifoParam+0xb6>
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d003      	beq.n	80058d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80058c8:	e018      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	73fb      	strb	r3, [r7, #15]
      break;
 80058ce:	e015      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00e      	beq.n	80058fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
      break;
 80058e0:	e00b      	b.n	80058fa <DMA_CheckFifoParam+0xe6>
      break;
 80058e2:	bf00      	nop
 80058e4:	e00a      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058e6:	bf00      	nop
 80058e8:	e008      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058ea:	bf00      	nop
 80058ec:	e006      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058ee:	bf00      	nop
 80058f0:	e004      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058f2:	bf00      	nop
 80058f4:	e002      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;   
 80058f6:	bf00      	nop
 80058f8:	e000      	b.n	80058fc <DMA_CheckFifoParam+0xe8>
      break;
 80058fa:	bf00      	nop
    }
  } 
  
  return status; 
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3714      	adds	r7, #20
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop

0800590c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d101      	bne.n	800591e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e039      	b.n	8005992 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d106      	bne.n	8005938 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f7fb f810 	bl	8000958 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2202      	movs	r2, #2
 800593c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800595c:	f023 0107 	bic.w	r1, r3, #7
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005972:	4b0a      	ldr	r3, [pc, #40]	@ (800599c <HAL_DMA2D_Init+0x90>)
 8005974:	4013      	ands	r3, r2
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	68d1      	ldr	r1, [r2, #12]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	6812      	ldr	r2, [r2, #0]
 800597e:	430b      	orrs	r3, r1
 8005980:	6413      	str	r3, [r2, #64]	@ 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	ffffc000 	.word	0xffffc000

080059a0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d101      	bne.n	80059bc <HAL_DMA2D_Start+0x1c>
 80059b8:	2302      	movs	r3, #2
 80059ba:	e018      	b.n	80059ee <HAL_DMA2D_Start+0x4e>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2202      	movs	r2, #2
 80059c8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	68b9      	ldr	r1, [r7, #8]
 80059d6:	68f8      	ldr	r0, [r7, #12]
 80059d8:	f000 fa98 	bl	8005f0c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f042 0201 	orr.w	r2, r2, #1
 80059ea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b086      	sub	sp, #24
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d056      	beq.n	8005ac0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a12:	f7fe fe81 	bl	8004718 <HAL_GetTick>
 8005a16:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005a18:	e04b      	b.n	8005ab2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d023      	beq.n	8005a74 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f003 0320 	and.w	r3, r3, #32
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a3a:	f043 0202 	orr.w	r2, r3, #2
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 0301 	and.w	r3, r3, #1
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d005      	beq.n	8005a58 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a50:	f043 0201 	orr.w	r2, r3, #1
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2221      	movs	r2, #33	@ 0x21
 8005a5e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2204      	movs	r2, #4
 8005a64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005a70:	2301      	movs	r3, #1
 8005a72:	e0a5      	b.n	8005bc0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d01a      	beq.n	8005ab2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005a7c:	f7fe fe4c 	bl	8004718 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d302      	bcc.n	8005a92 <HAL_DMA2D_PollForTransfer+0x9c>
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d10f      	bne.n	8005ab2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a96:	f043 0220 	orr.w	r2, r3, #32
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e086      	b.n	8005bc0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0ac      	beq.n	8005a1a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad2:	f003 0320 	and.w	r3, r3, #32
 8005ad6:	693a      	ldr	r2, [r7, #16]
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d061      	beq.n	8005ba6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae2:	f7fe fe19 	bl	8004718 <HAL_GetTick>
 8005ae6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005ae8:	e056      	b.n	8005b98 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02e      	beq.n	8005b5a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 0308 	and.w	r3, r3, #8
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d005      	beq.n	8005b12 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b0a:	f043 0204 	orr.w	r2, r3, #4
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b20:	f043 0202 	orr.w	r2, r3, #2
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b36:	f043 0201 	orr.w	r2, r3, #1
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2229      	movs	r2, #41	@ 0x29
 8005b44:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2204      	movs	r2, #4
 8005b4a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e032      	b.n	8005bc0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d01a      	beq.n	8005b98 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005b62:	f7fe fdd9 	bl	8004718 <HAL_GetTick>
 8005b66:	4602      	mov	r2, r0
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d302      	bcc.n	8005b78 <HAL_DMA2D_PollForTransfer+0x182>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10f      	bne.n	8005b98 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b7c:	f043 0220 	orr.w	r2, r3, #32
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2203      	movs	r2, #3
 8005b88:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e013      	b.n	8005bc0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f003 0310 	and.w	r3, r3, #16
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d0a1      	beq.n	8005aea <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2212      	movs	r2, #18
 8005bac:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b084      	sub	sp, #16
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d026      	beq.n	8005c38 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d021      	beq.n	8005c38 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c02:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c08:	f043 0201 	orr.w	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2201      	movs	r2, #1
 8005c16:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2204      	movs	r2, #4
 8005c1c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d026      	beq.n	8005c90 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d021      	beq.n	8005c90 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005c5a:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2220      	movs	r2, #32
 8005c62:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c68:	f043 0202 	orr.w	r2, r3, #2
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2204      	movs	r2, #4
 8005c74:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d003      	beq.n	8005c90 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f003 0308 	and.w	r3, r3, #8
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d026      	beq.n	8005ce8 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d021      	beq.n	8005ce8 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cb2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	2208      	movs	r2, #8
 8005cba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc0:	f043 0204 	orr.w	r2, r3, #4
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2204      	movs	r2, #4
 8005ccc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d003      	beq.n	8005ce8 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f003 0304 	and.w	r3, r3, #4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d013      	beq.n	8005d1a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00e      	beq.n	8005d1a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d0a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2204      	movs	r2, #4
 8005d12:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f853 	bl	8005dc0 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d024      	beq.n	8005d6e <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d01f      	beq.n	8005d6e <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8005d3c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2202      	movs	r2, #2
 8005d44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01f      	beq.n	8005db8 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d01a      	beq.n	8005db8 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005d90:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2210      	movs	r2, #16
 8005d98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2201      	movs	r2, #1
 8005da6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f80e 	bl	8005dd4 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005db8:	bf00      	nop
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b087      	sub	sp, #28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_DMA2D_ConfigLayer+0x20>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e079      	b.n	8005efc <HAL_DMA2D_ConfigLayer+0x114>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	011b      	lsls	r3, r3, #4
 8005e1c:	3318      	adds	r3, #24
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	4413      	add	r3, r2
 8005e22:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	041b      	lsls	r3, r3, #16
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005e32:	4b35      	ldr	r3, [pc, #212]	@ (8005f08 <HAL_DMA2D_ConfigLayer+0x120>)
 8005e34:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	2b0a      	cmp	r3, #10
 8005e3c:	d003      	beq.n	8005e46 <HAL_DMA2D_ConfigLayer+0x5e>
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	2b09      	cmp	r3, #9
 8005e44:	d107      	bne.n	8005e56 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005e4e:	697a      	ldr	r2, [r7, #20]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	e005      	b.n	8005e62 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	061b      	lsls	r3, r3, #24
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d120      	bne.n	8005eaa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	43db      	mvns	r3, r3
 8005e72:	ea02 0103 	and.w	r1, r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	2b0a      	cmp	r3, #10
 8005e90:	d003      	beq.n	8005e9a <HAL_DMA2D_ConfigLayer+0xb2>
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b09      	cmp	r3, #9
 8005e98:	d127      	bne.n	8005eea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	68da      	ldr	r2, [r3, #12]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005ea6:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ea8:	e01f      	b.n	8005eea <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	43db      	mvns	r3, r3
 8005eb4:	ea02 0103 	and.w	r1, r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	6812      	ldr	r2, [r2, #0]
 8005eca:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	2b0a      	cmp	r3, #10
 8005ed2:	d003      	beq.n	8005edc <HAL_DMA2D_ConfigLayer+0xf4>
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b09      	cmp	r3, #9
 8005eda:	d106      	bne.n	8005eea <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8005ee8:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8005efa:	2300      	movs	r3, #0
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	371c      	adds	r7, #28
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	ff03000f 	.word	0xff03000f

08005f0c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b08b      	sub	sp, #44	@ 0x2c
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f20:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	041a      	lsls	r2, r3, #16
 8005f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	685b      	ldr	r3, [r3, #4]
 8005f40:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f44:	d174      	bne.n	8006030 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005f4c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f54:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f5c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	b2db      	uxtb	r3, r3
 8005f62:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	689b      	ldr	r3, [r3, #8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d108      	bne.n	8005f7e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	431a      	orrs	r2, r3
 8005f72:	6a3b      	ldr	r3, [r7, #32]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f7c:	e053      	b.n	8006026 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d106      	bne.n	8005f94 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f92:	e048      	b.n	8006026 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d111      	bne.n	8005fc0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	0cdb      	lsrs	r3, r3, #19
 8005fa0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	0a9b      	lsrs	r3, r3, #10
 8005fa6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	08db      	lsrs	r3, r3, #3
 8005fac:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	015a      	lsls	r2, r3, #5
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	02db      	lsls	r3, r3, #11
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fbe:	e032      	b.n	8006026 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b03      	cmp	r3, #3
 8005fc6:	d117      	bne.n	8005ff8 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	0fdb      	lsrs	r3, r3, #31
 8005fcc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	0cdb      	lsrs	r3, r3, #19
 8005fd2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005fd4:	69bb      	ldr	r3, [r7, #24]
 8005fd6:	0adb      	lsrs	r3, r3, #11
 8005fd8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	08db      	lsrs	r3, r3, #3
 8005fde:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	029b      	lsls	r3, r3, #10
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	6a3b      	ldr	r3, [r7, #32]
 8005fec:	03db      	lsls	r3, r3, #15
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff6:	e016      	b.n	8006026 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005ff8:	6a3b      	ldr	r3, [r7, #32]
 8005ffa:	0f1b      	lsrs	r3, r3, #28
 8005ffc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	0d1b      	lsrs	r3, r3, #20
 8006002:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	0b1b      	lsrs	r3, r3, #12
 8006008:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	091b      	lsrs	r3, r3, #4
 800600e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	011a      	lsls	r2, r3, #4
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	021b      	lsls	r3, r3, #8
 8006018:	431a      	orrs	r2, r3
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	031b      	lsls	r3, r3, #12
 800601e:	4313      	orrs	r3, r2
 8006020:	697a      	ldr	r2, [r7, #20]
 8006022:	4313      	orrs	r3, r2
 8006024:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800602c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800602e:	e003      	b.n	8006038 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	60da      	str	r2, [r3, #12]
}
 8006038:	bf00      	nop
 800603a:	372c      	adds	r7, #44	@ 0x2c
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006044:	b480      	push	{r7}
 8006046:	b089      	sub	sp, #36	@ 0x24
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800604e:	2300      	movs	r3, #0
 8006050:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800605a:	2300      	movs	r3, #0
 800605c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	e175      	b.n	8006350 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006064:	2201      	movs	r2, #1
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	4013      	ands	r3, r2
 8006076:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	429a      	cmp	r2, r3
 800607e:	f040 8164 	bne.w	800634a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	f003 0303 	and.w	r3, r3, #3
 800608a:	2b01      	cmp	r3, #1
 800608c:	d005      	beq.n	800609a <HAL_GPIO_Init+0x56>
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d130      	bne.n	80060fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	2203      	movs	r2, #3
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	43db      	mvns	r3, r3
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	4013      	ands	r3, r2
 80060b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	69ba      	ldr	r2, [r7, #24]
 80060c0:	4313      	orrs	r3, r2
 80060c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060d0:	2201      	movs	r2, #1
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	fa02 f303 	lsl.w	r3, r2, r3
 80060d8:	43db      	mvns	r3, r3
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	4013      	ands	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	091b      	lsrs	r3, r3, #4
 80060e6:	f003 0201 	and.w	r2, r3, #1
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	fa02 f303 	lsl.w	r3, r2, r3
 80060f0:	69ba      	ldr	r2, [r7, #24]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	2b03      	cmp	r3, #3
 8006106:	d017      	beq.n	8006138 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	005b      	lsls	r3, r3, #1
 8006112:	2203      	movs	r2, #3
 8006114:	fa02 f303 	lsl.w	r3, r2, r3
 8006118:	43db      	mvns	r3, r3
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	4013      	ands	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	69ba      	ldr	r2, [r7, #24]
 800612e:	4313      	orrs	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	2b02      	cmp	r3, #2
 8006142:	d123      	bne.n	800618c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	08da      	lsrs	r2, r3, #3
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	3208      	adds	r2, #8
 800614c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006150:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	220f      	movs	r2, #15
 800615c:	fa02 f303 	lsl.w	r3, r2, r3
 8006160:	43db      	mvns	r3, r3
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	4013      	ands	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	f003 0307 	and.w	r3, r3, #7
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	fa02 f303 	lsl.w	r3, r2, r3
 8006178:	69ba      	ldr	r2, [r7, #24]
 800617a:	4313      	orrs	r3, r2
 800617c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	08da      	lsrs	r2, r3, #3
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3208      	adds	r2, #8
 8006186:	69b9      	ldr	r1, [r7, #24]
 8006188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	2203      	movs	r2, #3
 8006198:	fa02 f303 	lsl.w	r3, r2, r3
 800619c:	43db      	mvns	r3, r3
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	4013      	ands	r3, r2
 80061a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f003 0203 	and.w	r2, r3, #3
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	005b      	lsls	r3, r3, #1
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f000 80be 	beq.w	800634a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061ce:	4b66      	ldr	r3, [pc, #408]	@ (8006368 <HAL_GPIO_Init+0x324>)
 80061d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d2:	4a65      	ldr	r2, [pc, #404]	@ (8006368 <HAL_GPIO_Init+0x324>)
 80061d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80061da:	4b63      	ldr	r3, [pc, #396]	@ (8006368 <HAL_GPIO_Init+0x324>)
 80061dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80061e6:	4a61      	ldr	r2, [pc, #388]	@ (800636c <HAL_GPIO_Init+0x328>)
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	089b      	lsrs	r3, r3, #2
 80061ec:	3302      	adds	r3, #2
 80061ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	220f      	movs	r2, #15
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	43db      	mvns	r3, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4013      	ands	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a58      	ldr	r2, [pc, #352]	@ (8006370 <HAL_GPIO_Init+0x32c>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d037      	beq.n	8006282 <HAL_GPIO_Init+0x23e>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a57      	ldr	r2, [pc, #348]	@ (8006374 <HAL_GPIO_Init+0x330>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d031      	beq.n	800627e <HAL_GPIO_Init+0x23a>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a56      	ldr	r2, [pc, #344]	@ (8006378 <HAL_GPIO_Init+0x334>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d02b      	beq.n	800627a <HAL_GPIO_Init+0x236>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a55      	ldr	r2, [pc, #340]	@ (800637c <HAL_GPIO_Init+0x338>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d025      	beq.n	8006276 <HAL_GPIO_Init+0x232>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a54      	ldr	r2, [pc, #336]	@ (8006380 <HAL_GPIO_Init+0x33c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d01f      	beq.n	8006272 <HAL_GPIO_Init+0x22e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a53      	ldr	r2, [pc, #332]	@ (8006384 <HAL_GPIO_Init+0x340>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d019      	beq.n	800626e <HAL_GPIO_Init+0x22a>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a52      	ldr	r2, [pc, #328]	@ (8006388 <HAL_GPIO_Init+0x344>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d013      	beq.n	800626a <HAL_GPIO_Init+0x226>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a51      	ldr	r2, [pc, #324]	@ (800638c <HAL_GPIO_Init+0x348>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d00d      	beq.n	8006266 <HAL_GPIO_Init+0x222>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a50      	ldr	r2, [pc, #320]	@ (8006390 <HAL_GPIO_Init+0x34c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d007      	beq.n	8006262 <HAL_GPIO_Init+0x21e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a4f      	ldr	r2, [pc, #316]	@ (8006394 <HAL_GPIO_Init+0x350>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d101      	bne.n	800625e <HAL_GPIO_Init+0x21a>
 800625a:	2309      	movs	r3, #9
 800625c:	e012      	b.n	8006284 <HAL_GPIO_Init+0x240>
 800625e:	230a      	movs	r3, #10
 8006260:	e010      	b.n	8006284 <HAL_GPIO_Init+0x240>
 8006262:	2308      	movs	r3, #8
 8006264:	e00e      	b.n	8006284 <HAL_GPIO_Init+0x240>
 8006266:	2307      	movs	r3, #7
 8006268:	e00c      	b.n	8006284 <HAL_GPIO_Init+0x240>
 800626a:	2306      	movs	r3, #6
 800626c:	e00a      	b.n	8006284 <HAL_GPIO_Init+0x240>
 800626e:	2305      	movs	r3, #5
 8006270:	e008      	b.n	8006284 <HAL_GPIO_Init+0x240>
 8006272:	2304      	movs	r3, #4
 8006274:	e006      	b.n	8006284 <HAL_GPIO_Init+0x240>
 8006276:	2303      	movs	r3, #3
 8006278:	e004      	b.n	8006284 <HAL_GPIO_Init+0x240>
 800627a:	2302      	movs	r3, #2
 800627c:	e002      	b.n	8006284 <HAL_GPIO_Init+0x240>
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <HAL_GPIO_Init+0x240>
 8006282:	2300      	movs	r3, #0
 8006284:	69fa      	ldr	r2, [r7, #28]
 8006286:	f002 0203 	and.w	r2, r2, #3
 800628a:	0092      	lsls	r2, r2, #2
 800628c:	4093      	lsls	r3, r2
 800628e:	69ba      	ldr	r2, [r7, #24]
 8006290:	4313      	orrs	r3, r2
 8006292:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006294:	4935      	ldr	r1, [pc, #212]	@ (800636c <HAL_GPIO_Init+0x328>)
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	089b      	lsrs	r3, r3, #2
 800629a:	3302      	adds	r3, #2
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062a2:	4b3d      	ldr	r3, [pc, #244]	@ (8006398 <HAL_GPIO_Init+0x354>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	43db      	mvns	r3, r3
 80062ac:	69ba      	ldr	r2, [r7, #24]
 80062ae:	4013      	ands	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	4313      	orrs	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062c6:	4a34      	ldr	r2, [pc, #208]	@ (8006398 <HAL_GPIO_Init+0x354>)
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062cc:	4b32      	ldr	r3, [pc, #200]	@ (8006398 <HAL_GPIO_Init+0x354>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	43db      	mvns	r3, r3
 80062d6:	69ba      	ldr	r2, [r7, #24]
 80062d8:	4013      	ands	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d003      	beq.n	80062f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062f0:	4a29      	ldr	r2, [pc, #164]	@ (8006398 <HAL_GPIO_Init+0x354>)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062f6:	4b28      	ldr	r3, [pc, #160]	@ (8006398 <HAL_GPIO_Init+0x354>)
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	43db      	mvns	r3, r3
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	4013      	ands	r3, r2
 8006304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800630e:	2b00      	cmp	r3, #0
 8006310:	d003      	beq.n	800631a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800631a:	4a1f      	ldr	r2, [pc, #124]	@ (8006398 <HAL_GPIO_Init+0x354>)
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006320:	4b1d      	ldr	r3, [pc, #116]	@ (8006398 <HAL_GPIO_Init+0x354>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	43db      	mvns	r3, r3
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4013      	ands	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	4313      	orrs	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006344:	4a14      	ldr	r2, [pc, #80]	@ (8006398 <HAL_GPIO_Init+0x354>)
 8006346:	69bb      	ldr	r3, [r7, #24]
 8006348:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	3301      	adds	r3, #1
 800634e:	61fb      	str	r3, [r7, #28]
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	2b0f      	cmp	r3, #15
 8006354:	f67f ae86 	bls.w	8006064 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	3724      	adds	r7, #36	@ 0x24
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40023800 	.word	0x40023800
 800636c:	40013800 	.word	0x40013800
 8006370:	40020000 	.word	0x40020000
 8006374:	40020400 	.word	0x40020400
 8006378:	40020800 	.word	0x40020800
 800637c:	40020c00 	.word	0x40020c00
 8006380:	40021000 	.word	0x40021000
 8006384:	40021400 	.word	0x40021400
 8006388:	40021800 	.word	0x40021800
 800638c:	40021c00 	.word	0x40021c00
 8006390:	40022000 	.word	0x40022000
 8006394:	40022400 	.word	0x40022400
 8006398:	40013c00 	.word	0x40013c00

0800639c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
 80063a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80063a6:	2300      	movs	r3, #0
 80063a8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80063ae:	2300      	movs	r3, #0
 80063b0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	e0d9      	b.n	800656c <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80063b8:	2201      	movs	r2, #1
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	fa02 f303 	lsl.w	r3, r2, r3
 80063c0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4013      	ands	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	f040 80c9 	bne.w	8006566 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80063d4:	4a6b      	ldr	r2, [pc, #428]	@ (8006584 <HAL_GPIO_DeInit+0x1e8>)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	089b      	lsrs	r3, r3, #2
 80063da:	3302      	adds	r3, #2
 80063dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063e0:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	f003 0303 	and.w	r3, r3, #3
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	220f      	movs	r2, #15
 80063ec:	fa02 f303 	lsl.w	r3, r2, r3
 80063f0:	68ba      	ldr	r2, [r7, #8]
 80063f2:	4013      	ands	r3, r2
 80063f4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a63      	ldr	r2, [pc, #396]	@ (8006588 <HAL_GPIO_DeInit+0x1ec>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d037      	beq.n	800646e <HAL_GPIO_DeInit+0xd2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a62      	ldr	r2, [pc, #392]	@ (800658c <HAL_GPIO_DeInit+0x1f0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d031      	beq.n	800646a <HAL_GPIO_DeInit+0xce>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a61      	ldr	r2, [pc, #388]	@ (8006590 <HAL_GPIO_DeInit+0x1f4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d02b      	beq.n	8006466 <HAL_GPIO_DeInit+0xca>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a60      	ldr	r2, [pc, #384]	@ (8006594 <HAL_GPIO_DeInit+0x1f8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d025      	beq.n	8006462 <HAL_GPIO_DeInit+0xc6>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a5f      	ldr	r2, [pc, #380]	@ (8006598 <HAL_GPIO_DeInit+0x1fc>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d01f      	beq.n	800645e <HAL_GPIO_DeInit+0xc2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a5e      	ldr	r2, [pc, #376]	@ (800659c <HAL_GPIO_DeInit+0x200>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d019      	beq.n	800645a <HAL_GPIO_DeInit+0xbe>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a5d      	ldr	r2, [pc, #372]	@ (80065a0 <HAL_GPIO_DeInit+0x204>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d013      	beq.n	8006456 <HAL_GPIO_DeInit+0xba>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a5c      	ldr	r2, [pc, #368]	@ (80065a4 <HAL_GPIO_DeInit+0x208>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d00d      	beq.n	8006452 <HAL_GPIO_DeInit+0xb6>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	4a5b      	ldr	r2, [pc, #364]	@ (80065a8 <HAL_GPIO_DeInit+0x20c>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d007      	beq.n	800644e <HAL_GPIO_DeInit+0xb2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	4a5a      	ldr	r2, [pc, #360]	@ (80065ac <HAL_GPIO_DeInit+0x210>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d101      	bne.n	800644a <HAL_GPIO_DeInit+0xae>
 8006446:	2309      	movs	r3, #9
 8006448:	e012      	b.n	8006470 <HAL_GPIO_DeInit+0xd4>
 800644a:	230a      	movs	r3, #10
 800644c:	e010      	b.n	8006470 <HAL_GPIO_DeInit+0xd4>
 800644e:	2308      	movs	r3, #8
 8006450:	e00e      	b.n	8006470 <HAL_GPIO_DeInit+0xd4>
 8006452:	2307      	movs	r3, #7
 8006454:	e00c      	b.n	8006470 <HAL_GPIO_DeInit+0xd4>
 8006456:	2306      	movs	r3, #6
 8006458:	e00a      	b.n	8006470 <HAL_GPIO_DeInit+0xd4>
 800645a:	2305      	movs	r3, #5
 800645c:	e008      	b.n	8006470 <HAL_GPIO_DeInit+0xd4>
 800645e:	2304      	movs	r3, #4
 8006460:	e006      	b.n	8006470 <HAL_GPIO_DeInit+0xd4>
 8006462:	2303      	movs	r3, #3
 8006464:	e004      	b.n	8006470 <HAL_GPIO_DeInit+0xd4>
 8006466:	2302      	movs	r3, #2
 8006468:	e002      	b.n	8006470 <HAL_GPIO_DeInit+0xd4>
 800646a:	2301      	movs	r3, #1
 800646c:	e000      	b.n	8006470 <HAL_GPIO_DeInit+0xd4>
 800646e:	2300      	movs	r3, #0
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	f002 0203 	and.w	r2, r2, #3
 8006476:	0092      	lsls	r2, r2, #2
 8006478:	4093      	lsls	r3, r2
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	429a      	cmp	r2, r3
 800647e:	d132      	bne.n	80064e6 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006480:	4b4b      	ldr	r3, [pc, #300]	@ (80065b0 <HAL_GPIO_DeInit+0x214>)
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	43db      	mvns	r3, r3
 8006488:	4949      	ldr	r1, [pc, #292]	@ (80065b0 <HAL_GPIO_DeInit+0x214>)
 800648a:	4013      	ands	r3, r2
 800648c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800648e:	4b48      	ldr	r3, [pc, #288]	@ (80065b0 <HAL_GPIO_DeInit+0x214>)
 8006490:	685a      	ldr	r2, [r3, #4]
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	43db      	mvns	r3, r3
 8006496:	4946      	ldr	r1, [pc, #280]	@ (80065b0 <HAL_GPIO_DeInit+0x214>)
 8006498:	4013      	ands	r3, r2
 800649a:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800649c:	4b44      	ldr	r3, [pc, #272]	@ (80065b0 <HAL_GPIO_DeInit+0x214>)
 800649e:	68da      	ldr	r2, [r3, #12]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	43db      	mvns	r3, r3
 80064a4:	4942      	ldr	r1, [pc, #264]	@ (80065b0 <HAL_GPIO_DeInit+0x214>)
 80064a6:	4013      	ands	r3, r2
 80064a8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80064aa:	4b41      	ldr	r3, [pc, #260]	@ (80065b0 <HAL_GPIO_DeInit+0x214>)
 80064ac:	689a      	ldr	r2, [r3, #8]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	43db      	mvns	r3, r3
 80064b2:	493f      	ldr	r1, [pc, #252]	@ (80065b0 <HAL_GPIO_DeInit+0x214>)
 80064b4:	4013      	ands	r3, r2
 80064b6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	220f      	movs	r2, #15
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80064c8:	4a2e      	ldr	r2, [pc, #184]	@ (8006584 <HAL_GPIO_DeInit+0x1e8>)
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	089b      	lsrs	r3, r3, #2
 80064ce:	3302      	adds	r3, #2
 80064d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	43da      	mvns	r2, r3
 80064d8:	482a      	ldr	r0, [pc, #168]	@ (8006584 <HAL_GPIO_DeInit+0x1e8>)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	089b      	lsrs	r3, r3, #2
 80064de:	400a      	ands	r2, r1
 80064e0:	3302      	adds	r3, #2
 80064e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	2103      	movs	r1, #3
 80064f0:	fa01 f303 	lsl.w	r3, r1, r3
 80064f4:	43db      	mvns	r3, r3
 80064f6:	401a      	ands	r2, r3
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	08da      	lsrs	r2, r3, #3
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	3208      	adds	r2, #8
 8006504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	220f      	movs	r2, #15
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43db      	mvns	r3, r3
 8006518:	697a      	ldr	r2, [r7, #20]
 800651a:	08d2      	lsrs	r2, r2, #3
 800651c:	4019      	ands	r1, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	3208      	adds	r2, #8
 8006522:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	005b      	lsls	r3, r3, #1
 800652e:	2103      	movs	r1, #3
 8006530:	fa01 f303 	lsl.w	r3, r1, r3
 8006534:	43db      	mvns	r3, r3
 8006536:	401a      	ands	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	2101      	movs	r1, #1
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	fa01 f303 	lsl.w	r3, r1, r3
 8006548:	43db      	mvns	r3, r3
 800654a:	401a      	ands	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	005b      	lsls	r3, r3, #1
 8006558:	2103      	movs	r1, #3
 800655a:	fa01 f303 	lsl.w	r3, r1, r3
 800655e:	43db      	mvns	r3, r3
 8006560:	401a      	ands	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	3301      	adds	r3, #1
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	2b0f      	cmp	r3, #15
 8006570:	f67f af22 	bls.w	80063b8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	40013800 	.word	0x40013800
 8006588:	40020000 	.word	0x40020000
 800658c:	40020400 	.word	0x40020400
 8006590:	40020800 	.word	0x40020800
 8006594:	40020c00 	.word	0x40020c00
 8006598:	40021000 	.word	0x40021000
 800659c:	40021400 	.word	0x40021400
 80065a0:	40021800 	.word	0x40021800
 80065a4:	40021c00 	.word	0x40021c00
 80065a8:	40022000 	.word	0x40022000
 80065ac:	40022400 	.word	0x40022400
 80065b0:	40013c00 	.word	0x40013c00

080065b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	460b      	mov	r3, r1
 80065be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	887b      	ldrh	r3, [r7, #2]
 80065c6:	4013      	ands	r3, r2
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80065cc:	2301      	movs	r3, #1
 80065ce:	73fb      	strb	r3, [r7, #15]
 80065d0:	e001      	b.n	80065d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80065d2:	2300      	movs	r3, #0
 80065d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80065d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	460b      	mov	r3, r1
 80065ee:	807b      	strh	r3, [r7, #2]
 80065f0:	4613      	mov	r3, r2
 80065f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80065f4:	787b      	ldrb	r3, [r7, #1]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80065fa:	887a      	ldrh	r2, [r7, #2]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006600:	e003      	b.n	800660a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006602:	887b      	ldrh	r3, [r7, #2]
 8006604:	041a      	lsls	r2, r3, #16
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	619a      	str	r2, [r3, #24]
}
 800660a:	bf00      	nop
 800660c:	370c      	adds	r7, #12
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
	...

08006618 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e07f      	b.n	800672a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d106      	bne.n	8006644 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2200      	movs	r2, #0
 800663a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f7fb f97a 	bl	8001938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2224      	movs	r2, #36	@ 0x24
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0201 	bic.w	r2, r2, #1
 800665a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006668:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006678:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d107      	bne.n	8006692 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800668e:	609a      	str	r2, [r3, #8]
 8006690:	e006      	b.n	80066a0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800669e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d104      	bne.n	80066b2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066b0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	6859      	ldr	r1, [r3, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	4b1d      	ldr	r3, [pc, #116]	@ (8006734 <HAL_I2C_Init+0x11c>)
 80066be:	430b      	orrs	r3, r1
 80066c0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80066d0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	691a      	ldr	r2, [r3, #16]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	430a      	orrs	r2, r1
 80066ea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	69d9      	ldr	r1, [r3, #28]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a1a      	ldr	r2, [r3, #32]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f042 0201 	orr.w	r2, r2, #1
 800670a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	02008000 	.word	0x02008000

08006738 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d101      	bne.n	800674a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e021      	b.n	800678e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2224      	movs	r2, #36	@ 0x24
 800674e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f022 0201 	bic.w	r2, r2, #1
 8006760:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7fb f990 	bl	8001a88 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2200      	movs	r2, #0
 800676c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b088      	sub	sp, #32
 800679c:	af02      	add	r7, sp, #8
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	4608      	mov	r0, r1
 80067a2:	4611      	mov	r1, r2
 80067a4:	461a      	mov	r2, r3
 80067a6:	4603      	mov	r3, r0
 80067a8:	817b      	strh	r3, [r7, #10]
 80067aa:	460b      	mov	r3, r1
 80067ac:	813b      	strh	r3, [r7, #8]
 80067ae:	4613      	mov	r3, r2
 80067b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b20      	cmp	r3, #32
 80067bc:	f040 80f9 	bne.w	80069b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_I2C_Mem_Write+0x34>
 80067c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d105      	bne.n	80067d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80067d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e0ed      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d101      	bne.n	80067e6 <HAL_I2C_Mem_Write+0x4e>
 80067e2:	2302      	movs	r3, #2
 80067e4:	e0e6      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2201      	movs	r2, #1
 80067ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067ee:	f7fd ff93 	bl	8004718 <HAL_GetTick>
 80067f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	2319      	movs	r3, #25
 80067fa:	2201      	movs	r2, #1
 80067fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006800:	68f8      	ldr	r0, [r7, #12]
 8006802:	f000 fad1 	bl	8006da8 <I2C_WaitOnFlagUntilTimeout>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	e0d1      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2221      	movs	r2, #33	@ 0x21
 8006814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2240      	movs	r2, #64	@ 0x40
 800681c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2200      	movs	r2, #0
 8006824:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a3a      	ldr	r2, [r7, #32]
 800682a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006830:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006838:	88f8      	ldrh	r0, [r7, #6]
 800683a:	893a      	ldrh	r2, [r7, #8]
 800683c:	8979      	ldrh	r1, [r7, #10]
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	9301      	str	r3, [sp, #4]
 8006842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	4603      	mov	r3, r0
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 f9e1 	bl	8006c10 <I2C_RequestMemoryWrite>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0a9      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006864:	b29b      	uxth	r3, r3
 8006866:	2bff      	cmp	r3, #255	@ 0xff
 8006868:	d90e      	bls.n	8006888 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	22ff      	movs	r2, #255	@ 0xff
 800686e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006874:	b2da      	uxtb	r2, r3
 8006876:	8979      	ldrh	r1, [r7, #10]
 8006878:	2300      	movs	r3, #0
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 fc2d 	bl	80070e0 <I2C_TransferConfig>
 8006886:	e00f      	b.n	80068a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006896:	b2da      	uxtb	r2, r3
 8006898:	8979      	ldrh	r1, [r7, #10]
 800689a:	2300      	movs	r3, #0
 800689c:	9300      	str	r3, [sp, #0]
 800689e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f000 fc1c 	bl	80070e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068a8:	697a      	ldr	r2, [r7, #20]
 80068aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068ac:	68f8      	ldr	r0, [r7, #12]
 80068ae:	f000 fabb 	bl	8006e28 <I2C_WaitOnTXISFlagUntilTimeout>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80068b8:	2301      	movs	r3, #1
 80068ba:	e07b      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c0:	781a      	ldrb	r2, [r3, #0]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	3b01      	subs	r3, #1
 80068da:	b29a      	uxth	r2, r3
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068e4:	3b01      	subs	r3, #1
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d034      	beq.n	8006960 <HAL_I2C_Mem_Write+0x1c8>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d130      	bne.n	8006960 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	9300      	str	r3, [sp, #0]
 8006902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006904:	2200      	movs	r2, #0
 8006906:	2180      	movs	r1, #128	@ 0x80
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 fa4d 	bl	8006da8 <I2C_WaitOnFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e04d      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800691c:	b29b      	uxth	r3, r3
 800691e:	2bff      	cmp	r3, #255	@ 0xff
 8006920:	d90e      	bls.n	8006940 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	22ff      	movs	r2, #255	@ 0xff
 8006926:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800692c:	b2da      	uxtb	r2, r3
 800692e:	8979      	ldrh	r1, [r7, #10]
 8006930:	2300      	movs	r3, #0
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 fbd1 	bl	80070e0 <I2C_TransferConfig>
 800693e:	e00f      	b.n	8006960 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006944:	b29a      	uxth	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800694e:	b2da      	uxtb	r2, r3
 8006950:	8979      	ldrh	r1, [r7, #10]
 8006952:	2300      	movs	r3, #0
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800695a:	68f8      	ldr	r0, [r7, #12]
 800695c:	f000 fbc0 	bl	80070e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006964:	b29b      	uxth	r3, r3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d19e      	bne.n	80068a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f000 fa9a 	bl	8006ea8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006974:	4603      	mov	r3, r0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e01a      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2220      	movs	r2, #32
 8006984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6859      	ldr	r1, [r3, #4]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	4b0a      	ldr	r3, [pc, #40]	@ (80069bc <HAL_I2C_Mem_Write+0x224>)
 8006992:	400b      	ands	r3, r1
 8006994:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	e000      	b.n	80069b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80069b2:	2302      	movs	r3, #2
  }
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	fe00e800 	.word	0xfe00e800

080069c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b088      	sub	sp, #32
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	4608      	mov	r0, r1
 80069ca:	4611      	mov	r1, r2
 80069cc:	461a      	mov	r2, r3
 80069ce:	4603      	mov	r3, r0
 80069d0:	817b      	strh	r3, [r7, #10]
 80069d2:	460b      	mov	r3, r1
 80069d4:	813b      	strh	r3, [r7, #8]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	f040 80fd 	bne.w	8006be2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <HAL_I2C_Mem_Read+0x34>
 80069ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d105      	bne.n	8006a00 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	e0f1      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_I2C_Mem_Read+0x4e>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e0ea      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a16:	f7fd fe7f 	bl	8004718 <HAL_GetTick>
 8006a1a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	9300      	str	r3, [sp, #0]
 8006a20:	2319      	movs	r3, #25
 8006a22:	2201      	movs	r2, #1
 8006a24:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 f9bd 	bl	8006da8 <I2C_WaitOnFlagUntilTimeout>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d001      	beq.n	8006a38 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e0d5      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2222      	movs	r2, #34	@ 0x22
 8006a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2240      	movs	r2, #64	@ 0x40
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6a3a      	ldr	r2, [r7, #32]
 8006a52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a60:	88f8      	ldrh	r0, [r7, #6]
 8006a62:	893a      	ldrh	r2, [r7, #8]
 8006a64:	8979      	ldrh	r1, [r7, #10]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	9301      	str	r3, [sp, #4]
 8006a6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6c:	9300      	str	r3, [sp, #0]
 8006a6e:	4603      	mov	r3, r0
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f000 f921 	bl	8006cb8 <I2C_RequestMemoryRead>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d005      	beq.n	8006a88 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e0ad      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	2bff      	cmp	r3, #255	@ 0xff
 8006a90:	d90e      	bls.n	8006ab0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	22ff      	movs	r2, #255	@ 0xff
 8006a96:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	8979      	ldrh	r1, [r7, #10]
 8006aa0:	4b52      	ldr	r3, [pc, #328]	@ (8006bec <HAL_I2C_Mem_Read+0x22c>)
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 fb19 	bl	80070e0 <I2C_TransferConfig>
 8006aae:	e00f      	b.n	8006ad0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006abe:	b2da      	uxtb	r2, r3
 8006ac0:	8979      	ldrh	r1, [r7, #10]
 8006ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8006bec <HAL_I2C_Mem_Read+0x22c>)
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fb08 	bl	80070e0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	9300      	str	r3, [sp, #0]
 8006ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2104      	movs	r1, #4
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f000 f964 	bl	8006da8 <I2C_WaitOnFlagUntilTimeout>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e07c      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006afc:	1c5a      	adds	r2, r3, #1
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b06:	3b01      	subs	r3, #1
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	3b01      	subs	r3, #1
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b20:	b29b      	uxth	r3, r3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d034      	beq.n	8006b90 <HAL_I2C_Mem_Read+0x1d0>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d130      	bne.n	8006b90 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b34:	2200      	movs	r2, #0
 8006b36:	2180      	movs	r1, #128	@ 0x80
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f935 	bl	8006da8 <I2C_WaitOnFlagUntilTimeout>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d001      	beq.n	8006b48 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	e04d      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	2bff      	cmp	r3, #255	@ 0xff
 8006b50:	d90e      	bls.n	8006b70 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	22ff      	movs	r2, #255	@ 0xff
 8006b56:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	8979      	ldrh	r1, [r7, #10]
 8006b60:	2300      	movs	r3, #0
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006b68:	68f8      	ldr	r0, [r7, #12]
 8006b6a:	f000 fab9 	bl	80070e0 <I2C_TransferConfig>
 8006b6e:	e00f      	b.n	8006b90 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	8979      	ldrh	r1, [r7, #10]
 8006b82:	2300      	movs	r3, #0
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f000 faa8 	bl	80070e0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d19a      	bne.n	8006ad0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b9e:	68f8      	ldr	r0, [r7, #12]
 8006ba0:	f000 f982 	bl	8006ea8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d001      	beq.n	8006bae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e01a      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6859      	ldr	r1, [r3, #4]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf0 <HAL_I2C_Mem_Read+0x230>)
 8006bc2:	400b      	ands	r3, r1
 8006bc4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e000      	b.n	8006be4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006be2:	2302      	movs	r3, #2
  }
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3718      	adds	r7, #24
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	80002400 	.word	0x80002400
 8006bf0:	fe00e800 	.word	0xfe00e800

08006bf4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c02:	b2db      	uxtb	r3, r3
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b086      	sub	sp, #24
 8006c14:	af02      	add	r7, sp, #8
 8006c16:	60f8      	str	r0, [r7, #12]
 8006c18:	4608      	mov	r0, r1
 8006c1a:	4611      	mov	r1, r2
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	4603      	mov	r3, r0
 8006c20:	817b      	strh	r3, [r7, #10]
 8006c22:	460b      	mov	r3, r1
 8006c24:	813b      	strh	r3, [r7, #8]
 8006c26:	4613      	mov	r3, r2
 8006c28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c2a:	88fb      	ldrh	r3, [r7, #6]
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	8979      	ldrh	r1, [r7, #10]
 8006c30:	4b20      	ldr	r3, [pc, #128]	@ (8006cb4 <I2C_RequestMemoryWrite+0xa4>)
 8006c32:	9300      	str	r3, [sp, #0]
 8006c34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fa51 	bl	80070e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	69b9      	ldr	r1, [r7, #24]
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f8f0 	bl	8006e28 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	e02c      	b.n	8006cac <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d105      	bne.n	8006c64 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c58:	893b      	ldrh	r3, [r7, #8]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	629a      	str	r2, [r3, #40]	@ 0x28
 8006c62:	e015      	b.n	8006c90 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c64:	893b      	ldrh	r3, [r7, #8]
 8006c66:	0a1b      	lsrs	r3, r3, #8
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	69b9      	ldr	r1, [r7, #24]
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f8d6 	bl	8006e28 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e012      	b.n	8006cac <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c86:	893b      	ldrh	r3, [r7, #8]
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	2200      	movs	r2, #0
 8006c98:	2180      	movs	r1, #128	@ 0x80
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f000 f884 	bl	8006da8 <I2C_WaitOnFlagUntilTimeout>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e000      	b.n	8006cac <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	80002000 	.word	0x80002000

08006cb8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af02      	add	r7, sp, #8
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	817b      	strh	r3, [r7, #10]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	813b      	strh	r3, [r7, #8]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006cd2:	88fb      	ldrh	r3, [r7, #6]
 8006cd4:	b2da      	uxtb	r2, r3
 8006cd6:	8979      	ldrh	r1, [r7, #10]
 8006cd8:	4b20      	ldr	r3, [pc, #128]	@ (8006d5c <I2C_RequestMemoryRead+0xa4>)
 8006cda:	9300      	str	r3, [sp, #0]
 8006cdc:	2300      	movs	r3, #0
 8006cde:	68f8      	ldr	r0, [r7, #12]
 8006ce0:	f000 f9fe 	bl	80070e0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006ce4:	69fa      	ldr	r2, [r7, #28]
 8006ce6:	69b9      	ldr	r1, [r7, #24]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f89d 	bl	8006e28 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e02c      	b.n	8006d52 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cf8:	88fb      	ldrh	r3, [r7, #6]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d105      	bne.n	8006d0a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cfe:	893b      	ldrh	r3, [r7, #8]
 8006d00:	b2da      	uxtb	r2, r3
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	629a      	str	r2, [r3, #40]	@ 0x28
 8006d08:	e015      	b.n	8006d36 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d0a:	893b      	ldrh	r3, [r7, #8]
 8006d0c:	0a1b      	lsrs	r3, r3, #8
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d18:	69fa      	ldr	r2, [r7, #28]
 8006d1a:	69b9      	ldr	r1, [r7, #24]
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f883 	bl	8006e28 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e012      	b.n	8006d52 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d2c:	893b      	ldrh	r3, [r7, #8]
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2140      	movs	r1, #64	@ 0x40
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f831 	bl	8006da8 <I2C_WaitOnFlagUntilTimeout>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d001      	beq.n	8006d50 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e000      	b.n	8006d52 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	80002000 	.word	0x80002000

08006d60 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	f003 0302 	and.w	r3, r3, #2
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d103      	bne.n	8006d7e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d007      	beq.n	8006d9c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	699a      	ldr	r2, [r3, #24]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f042 0201 	orr.w	r2, r2, #1
 8006d9a:	619a      	str	r2, [r3, #24]
  }
}
 8006d9c:	bf00      	nop
 8006d9e:	370c      	adds	r7, #12
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	603b      	str	r3, [r7, #0]
 8006db4:	4613      	mov	r3, r2
 8006db6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006db8:	e022      	b.n	8006e00 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dc0:	d01e      	beq.n	8006e00 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dc2:	f7fd fca9 	bl	8004718 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d302      	bcc.n	8006dd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d113      	bne.n	8006e00 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ddc:	f043 0220 	orr.w	r2, r3, #32
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2200      	movs	r2, #0
 8006df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e00f      	b.n	8006e20 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699a      	ldr	r2, [r3, #24]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	bf0c      	ite	eq
 8006e10:	2301      	moveq	r3, #1
 8006e12:	2300      	movne	r3, #0
 8006e14:	b2db      	uxtb	r3, r3
 8006e16:	461a      	mov	r2, r3
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d0cd      	beq.n	8006dba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60f8      	str	r0, [r7, #12]
 8006e30:	60b9      	str	r1, [r7, #8]
 8006e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e34:	e02c      	b.n	8006e90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	68b9      	ldr	r1, [r7, #8]
 8006e3a:	68f8      	ldr	r0, [r7, #12]
 8006e3c:	f000 f870 	bl	8006f20 <I2C_IsErrorOccurred>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d001      	beq.n	8006e4a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e02a      	b.n	8006ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d01e      	beq.n	8006e90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e52:	f7fd fc61 	bl	8004718 <HAL_GetTick>
 8006e56:	4602      	mov	r2, r0
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d302      	bcc.n	8006e68 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d113      	bne.n	8006e90 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e6c:	f043 0220 	orr.w	r2, r3, #32
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2220      	movs	r2, #32
 8006e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e007      	b.n	8006ea0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d1cb      	bne.n	8006e36 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006eb4:	e028      	b.n	8006f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	68b9      	ldr	r1, [r7, #8]
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f000 f830 	bl	8006f20 <I2C_IsErrorOccurred>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d001      	beq.n	8006eca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e026      	b.n	8006f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eca:	f7fd fc25 	bl	8004718 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	68ba      	ldr	r2, [r7, #8]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d302      	bcc.n	8006ee0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d113      	bne.n	8006f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee4:	f043 0220 	orr.w	r2, r3, #32
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e007      	b.n	8006f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b20      	cmp	r3, #32
 8006f14:	d1cf      	bne.n	8006eb6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08a      	sub	sp, #40	@ 0x28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	f003 0310 	and.w	r3, r3, #16
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d068      	beq.n	800701e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2210      	movs	r2, #16
 8006f52:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006f54:	e049      	b.n	8006fea <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f5c:	d045      	beq.n	8006fea <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006f5e:	f7fd fbdb 	bl	8004718 <HAL_GetTick>
 8006f62:	4602      	mov	r2, r0
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	68ba      	ldr	r2, [r7, #8]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d302      	bcc.n	8006f74 <I2C_IsErrorOccurred+0x54>
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d13a      	bne.n	8006fea <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f7e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006f86:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	699b      	ldr	r3, [r3, #24]
 8006f8e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006f92:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006f96:	d121      	bne.n	8006fdc <I2C_IsErrorOccurred+0xbc>
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006f9e:	d01d      	beq.n	8006fdc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006fa0:	7cfb      	ldrb	r3, [r7, #19]
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	d01a      	beq.n	8006fdc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685a      	ldr	r2, [r3, #4]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fb4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006fb6:	f7fd fbaf 	bl	8004718 <HAL_GetTick>
 8006fba:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fbc:	e00e      	b.n	8006fdc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006fbe:	f7fd fbab 	bl	8004718 <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	69fb      	ldr	r3, [r7, #28]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b19      	cmp	r3, #25
 8006fca:	d907      	bls.n	8006fdc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	f043 0320 	orr.w	r3, r3, #32
 8006fd2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006fda:	e006      	b.n	8006fea <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	699b      	ldr	r3, [r3, #24]
 8006fe2:	f003 0320 	and.w	r3, r3, #32
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	d1e9      	bne.n	8006fbe <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	699b      	ldr	r3, [r3, #24]
 8006ff0:	f003 0320 	and.w	r3, r3, #32
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d003      	beq.n	8007000 <I2C_IsErrorOccurred+0xe0>
 8006ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0aa      	beq.n	8006f56 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007000:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007004:	2b00      	cmp	r3, #0
 8007006:	d103      	bne.n	8007010 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2220      	movs	r2, #32
 800700e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	f043 0304 	orr.w	r3, r3, #4
 8007016:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d00b      	beq.n	8007048 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	f043 0301 	orr.w	r3, r3, #1
 8007036:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007040:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00b      	beq.n	800706a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007052:	6a3b      	ldr	r3, [r7, #32]
 8007054:	f043 0308 	orr.w	r3, r3, #8
 8007058:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007062:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007074:	6a3b      	ldr	r3, [r7, #32]
 8007076:	f043 0302 	orr.w	r3, r3, #2
 800707a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007084:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800708c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01c      	beq.n	80070ce <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f7ff fe63 	bl	8006d60 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	6859      	ldr	r1, [r3, #4]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	4b0d      	ldr	r3, [pc, #52]	@ (80070dc <I2C_IsErrorOccurred+0x1bc>)
 80070a6:	400b      	ands	r3, r1
 80070a8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	431a      	orrs	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2220      	movs	r2, #32
 80070ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80070ce:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3728      	adds	r7, #40	@ 0x28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	fe00e800 	.word	0xfe00e800

080070e0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	607b      	str	r3, [r7, #4]
 80070ea:	460b      	mov	r3, r1
 80070ec:	817b      	strh	r3, [r7, #10]
 80070ee:	4613      	mov	r3, r2
 80070f0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80070f2:	897b      	ldrh	r3, [r7, #10]
 80070f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80070f8:	7a7b      	ldrb	r3, [r7, #9]
 80070fa:	041b      	lsls	r3, r3, #16
 80070fc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007100:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007106:	6a3b      	ldr	r3, [r7, #32]
 8007108:	4313      	orrs	r3, r2
 800710a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800710e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685a      	ldr	r2, [r3, #4]
 8007116:	6a3b      	ldr	r3, [r7, #32]
 8007118:	0d5b      	lsrs	r3, r3, #21
 800711a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800711e:	4b08      	ldr	r3, [pc, #32]	@ (8007140 <I2C_TransferConfig+0x60>)
 8007120:	430b      	orrs	r3, r1
 8007122:	43db      	mvns	r3, r3
 8007124:	ea02 0103 	and.w	r1, r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	430a      	orrs	r2, r1
 8007130:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007132:	bf00      	nop
 8007134:	371c      	adds	r7, #28
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	03ff63ff 	.word	0x03ff63ff

08007144 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007154:	b2db      	uxtb	r3, r3
 8007156:	2b20      	cmp	r3, #32
 8007158:	d138      	bne.n	80071cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007160:	2b01      	cmp	r3, #1
 8007162:	d101      	bne.n	8007168 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007164:	2302      	movs	r3, #2
 8007166:	e032      	b.n	80071ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2224      	movs	r2, #36	@ 0x24
 8007174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f022 0201 	bic.w	r2, r2, #1
 8007186:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007196:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	6819      	ldr	r1, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f042 0201 	orr.w	r2, r2, #1
 80071b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80071c8:	2300      	movs	r3, #0
 80071ca:	e000      	b.n	80071ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071cc:	2302      	movs	r3, #2
  }
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071da:	b480      	push	{r7}
 80071dc:	b085      	sub	sp, #20
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
 80071e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b20      	cmp	r3, #32
 80071ee:	d139      	bne.n	8007264 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d101      	bne.n	80071fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80071fa:	2302      	movs	r3, #2
 80071fc:	e033      	b.n	8007266 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2201      	movs	r2, #1
 8007202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2224      	movs	r2, #36	@ 0x24
 800720a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f022 0201 	bic.w	r2, r2, #1
 800721c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800722c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	021b      	lsls	r3, r3, #8
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4313      	orrs	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	e000      	b.n	8007266 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007264:	2302      	movs	r3, #2
  }
}
 8007266:	4618      	mov	r0, r3
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
	...

08007274 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e0bf      	b.n	8007406 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b00      	cmp	r3, #0
 8007290:	d106      	bne.n	80072a0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f7fa fcb2 	bl	8001c04 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	699a      	ldr	r2, [r3, #24]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80072b6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	6999      	ldr	r1, [r3, #24]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072cc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	6899      	ldr	r1, [r3, #8]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	4b4a      	ldr	r3, [pc, #296]	@ (8007410 <HAL_LTDC_Init+0x19c>)
 80072e8:	400b      	ands	r3, r1
 80072ea:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	041b      	lsls	r3, r3, #16
 80072f2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	6899      	ldr	r1, [r3, #8]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	431a      	orrs	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	430a      	orrs	r2, r1
 8007308:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68d9      	ldr	r1, [r3, #12]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	4b3e      	ldr	r3, [pc, #248]	@ (8007410 <HAL_LTDC_Init+0x19c>)
 8007316:	400b      	ands	r3, r1
 8007318:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	041b      	lsls	r3, r3, #16
 8007320:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68d9      	ldr	r1, [r3, #12]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a1a      	ldr	r2, [r3, #32]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	431a      	orrs	r2, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6919      	ldr	r1, [r3, #16]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681a      	ldr	r2, [r3, #0]
 8007342:	4b33      	ldr	r3, [pc, #204]	@ (8007410 <HAL_LTDC_Init+0x19c>)
 8007344:	400b      	ands	r3, r1
 8007346:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800734c:	041b      	lsls	r3, r3, #16
 800734e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6919      	ldr	r1, [r3, #16]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	431a      	orrs	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6959      	ldr	r1, [r3, #20]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	4b27      	ldr	r3, [pc, #156]	@ (8007410 <HAL_LTDC_Init+0x19c>)
 8007372:	400b      	ands	r3, r1
 8007374:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800737a:	041b      	lsls	r3, r3, #16
 800737c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6959      	ldr	r1, [r3, #20]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	431a      	orrs	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800739a:	021b      	lsls	r3, r3, #8
 800739c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80073a4:	041b      	lsls	r3, r3, #16
 80073a6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80073b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	4313      	orrs	r3, r2
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80073ca:	431a      	orrs	r2, r3
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0206 	orr.w	r2, r2, #6
 80073e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699a      	ldr	r2, [r3, #24]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f042 0201 	orr.w	r2, r2, #1
 80073f2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	f000f800 	.word	0xf000f800

08007414 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007422:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800742a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f003 0304 	and.w	r3, r3, #4
 8007432:	2b00      	cmp	r3, #0
 8007434:	d023      	beq.n	800747e <HAL_LTDC_IRQHandler+0x6a>
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f003 0304 	and.w	r3, r3, #4
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01e      	beq.n	800747e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0204 	bic.w	r2, r2, #4
 800744e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2204      	movs	r2, #4
 8007456:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800745e:	f043 0201 	orr.w	r2, r3, #1
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2204      	movs	r2, #4
 800746c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f86f 	bl	800755c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f003 0302 	and.w	r3, r3, #2
 8007484:	2b00      	cmp	r3, #0
 8007486:	d023      	beq.n	80074d0 <HAL_LTDC_IRQHandler+0xbc>
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d01e      	beq.n	80074d0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f022 0202 	bic.w	r2, r2, #2
 80074a0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2202      	movs	r2, #2
 80074a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80074b0:	f043 0202 	orr.w	r2, r3, #2
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2204      	movs	r2, #4
 80074be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f846 	bl	800755c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d01b      	beq.n	8007512 <HAL_LTDC_IRQHandler+0xfe>
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d016      	beq.n	8007512 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0201 	bic.w	r2, r2, #1
 80074f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2201      	movs	r2, #1
 80074fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2200      	movs	r2, #0
 8007508:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f82f 	bl	8007570 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f003 0308 	and.w	r3, r3, #8
 8007518:	2b00      	cmp	r3, #0
 800751a:	d01b      	beq.n	8007554 <HAL_LTDC_IRQHandler+0x140>
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	f003 0308 	and.w	r3, r3, #8
 8007522:	2b00      	cmp	r3, #0
 8007524:	d016      	beq.n	8007554 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f022 0208 	bic.w	r2, r2, #8
 8007534:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2208      	movs	r2, #8
 800753c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f000 f818 	bl	8007584 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007554:	bf00      	nop
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007570:	b480      	push	{r7}
 8007572:	b083      	sub	sp, #12
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007578:	bf00      	nop
 800757a:	370c      	adds	r7, #12
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr

08007584 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007584:	b480      	push	{r7}
 8007586:	b083      	sub	sp, #12
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800758c:	bf00      	nop
 800758e:	370c      	adds	r7, #12
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007598:	b5b0      	push	{r4, r5, r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	60f8      	str	r0, [r7, #12]
 80075a0:	60b9      	str	r1, [r7, #8]
 80075a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_LTDC_ConfigLayer+0x1a>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e02c      	b.n	800760c <HAL_LTDC_ConfigLayer+0x74>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2202      	movs	r2, #2
 80075be:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80075c2:	68fa      	ldr	r2, [r7, #12]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2134      	movs	r1, #52	@ 0x34
 80075c8:	fb01 f303 	mul.w	r3, r1, r3
 80075cc:	4413      	add	r3, r2
 80075ce:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4614      	mov	r4, r2
 80075d6:	461d      	mov	r5, r3
 80075d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e4:	682b      	ldr	r3, [r5, #0]
 80075e6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	68b9      	ldr	r1, [r7, #8]
 80075ec:	68f8      	ldr	r0, [r7, #12]
 80075ee:	f000 f81f 	bl	8007630 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2201      	movs	r2, #1
 80075f8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3710      	adds	r7, #16
 8007610:	46bd      	mov	sp, r7
 8007612:	bdb0      	pop	{r4, r5, r7, pc}

08007614 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8007622:	b2db      	uxtb	r3, r3
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007630:	b480      	push	{r7}
 8007632:	b089      	sub	sp, #36	@ 0x24
 8007634:	af00      	add	r7, sp, #0
 8007636:	60f8      	str	r0, [r7, #12]
 8007638:	60b9      	str	r1, [r7, #8]
 800763a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	685a      	ldr	r2, [r3, #4]
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	0c1b      	lsrs	r3, r3, #16
 8007648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800764c:	4413      	add	r3, r2
 800764e:	041b      	lsls	r3, r3, #16
 8007650:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	01db      	lsls	r3, r3, #7
 800765c:	4413      	add	r3, r2
 800765e:	3384      	adds	r3, #132	@ 0x84
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	6812      	ldr	r2, [r2, #0]
 8007666:	4611      	mov	r1, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	01d2      	lsls	r2, r2, #7
 800766c:	440a      	add	r2, r1
 800766e:	3284      	adds	r2, #132	@ 0x84
 8007670:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007674:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	0c1b      	lsrs	r3, r3, #16
 8007682:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007686:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007688:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4619      	mov	r1, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	01db      	lsls	r3, r3, #7
 8007694:	440b      	add	r3, r1
 8007696:	3384      	adds	r3, #132	@ 0x84
 8007698:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800769e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	68da      	ldr	r2, [r3, #12]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076ae:	4413      	add	r3, r2
 80076b0:	041b      	lsls	r3, r3, #16
 80076b2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	01db      	lsls	r3, r3, #7
 80076be:	4413      	add	r3, r2
 80076c0:	3384      	adds	r3, #132	@ 0x84
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	6812      	ldr	r2, [r2, #0]
 80076c8:	4611      	mov	r1, r2
 80076ca:	687a      	ldr	r2, [r7, #4]
 80076cc:	01d2      	lsls	r2, r2, #7
 80076ce:	440a      	add	r2, r1
 80076d0:	3284      	adds	r2, #132	@ 0x84
 80076d2:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80076d6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	689a      	ldr	r2, [r3, #8]
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076e6:	4413      	add	r3, r2
 80076e8:	1c5a      	adds	r2, r3, #1
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4619      	mov	r1, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	01db      	lsls	r3, r3, #7
 80076f4:	440b      	add	r3, r1
 80076f6:	3384      	adds	r3, #132	@ 0x84
 80076f8:	4619      	mov	r1, r3
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	4313      	orrs	r3, r2
 80076fe:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	461a      	mov	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	01db      	lsls	r3, r3, #7
 800770a:	4413      	add	r3, r2
 800770c:	3384      	adds	r3, #132	@ 0x84
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	6812      	ldr	r2, [r2, #0]
 8007714:	4611      	mov	r1, r2
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	01d2      	lsls	r2, r2, #7
 800771a:	440a      	add	r2, r1
 800771c:	3284      	adds	r2, #132	@ 0x84
 800771e:	f023 0307 	bic.w	r3, r3, #7
 8007722:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	461a      	mov	r2, r3
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	01db      	lsls	r3, r3, #7
 800772e:	4413      	add	r3, r2
 8007730:	3384      	adds	r3, #132	@ 0x84
 8007732:	461a      	mov	r2, r3
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	691b      	ldr	r3, [r3, #16]
 8007738:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800774a:	041b      	lsls	r3, r3, #16
 800774c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	699b      	ldr	r3, [r3, #24]
 8007752:	061b      	lsls	r3, r3, #24
 8007754:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	461a      	mov	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	01db      	lsls	r3, r3, #7
 8007760:	4413      	add	r3, r2
 8007762:	3384      	adds	r3, #132	@ 0x84
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	01db      	lsls	r3, r3, #7
 8007770:	4413      	add	r3, r2
 8007772:	3384      	adds	r3, #132	@ 0x84
 8007774:	461a      	mov	r2, r3
 8007776:	2300      	movs	r3, #0
 8007778:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007780:	461a      	mov	r2, r3
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	431a      	orrs	r2, r3
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	431a      	orrs	r2, r3
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4619      	mov	r1, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	01db      	lsls	r3, r3, #7
 8007794:	440b      	add	r3, r1
 8007796:	3384      	adds	r3, #132	@ 0x84
 8007798:	4619      	mov	r1, r3
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	4313      	orrs	r3, r2
 800779e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	461a      	mov	r2, r3
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	01db      	lsls	r3, r3, #7
 80077aa:	4413      	add	r3, r2
 80077ac:	3384      	adds	r3, #132	@ 0x84
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	68fa      	ldr	r2, [r7, #12]
 80077b2:	6812      	ldr	r2, [r2, #0]
 80077b4:	4611      	mov	r1, r2
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	01d2      	lsls	r2, r2, #7
 80077ba:	440a      	add	r2, r1
 80077bc:	3284      	adds	r2, #132	@ 0x84
 80077be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80077c2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	461a      	mov	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	01db      	lsls	r3, r3, #7
 80077ce:	4413      	add	r3, r2
 80077d0:	3384      	adds	r3, #132	@ 0x84
 80077d2:	461a      	mov	r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	695b      	ldr	r3, [r3, #20]
 80077d8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	461a      	mov	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	01db      	lsls	r3, r3, #7
 80077e4:	4413      	add	r3, r2
 80077e6:	3384      	adds	r3, #132	@ 0x84
 80077e8:	69da      	ldr	r2, [r3, #28]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4619      	mov	r1, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	01db      	lsls	r3, r3, #7
 80077f4:	440b      	add	r3, r1
 80077f6:	3384      	adds	r3, #132	@ 0x84
 80077f8:	4619      	mov	r1, r3
 80077fa:	4b58      	ldr	r3, [pc, #352]	@ (800795c <LTDC_SetConfig+0x32c>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	69da      	ldr	r2, [r3, #28]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	6a1b      	ldr	r3, [r3, #32]
 8007808:	68f9      	ldr	r1, [r7, #12]
 800780a:	6809      	ldr	r1, [r1, #0]
 800780c:	4608      	mov	r0, r1
 800780e:	6879      	ldr	r1, [r7, #4]
 8007810:	01c9      	lsls	r1, r1, #7
 8007812:	4401      	add	r1, r0
 8007814:	3184      	adds	r1, #132	@ 0x84
 8007816:	4313      	orrs	r3, r2
 8007818:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	461a      	mov	r2, r3
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	01db      	lsls	r3, r3, #7
 8007824:	4413      	add	r3, r2
 8007826:	3384      	adds	r3, #132	@ 0x84
 8007828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	01db      	lsls	r3, r3, #7
 8007834:	4413      	add	r3, r2
 8007836:	3384      	adds	r3, #132	@ 0x84
 8007838:	461a      	mov	r2, r3
 800783a:	2300      	movs	r3, #0
 800783c:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	461a      	mov	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	01db      	lsls	r3, r3, #7
 8007848:	4413      	add	r3, r2
 800784a:	3384      	adds	r3, #132	@ 0x84
 800784c:	461a      	mov	r2, r3
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007852:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d102      	bne.n	8007862 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800785c:	2304      	movs	r3, #4
 800785e:	61fb      	str	r3, [r7, #28]
 8007860:	e01b      	b.n	800789a <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d102      	bne.n	8007870 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800786a:	2303      	movs	r3, #3
 800786c:	61fb      	str	r3, [r7, #28]
 800786e:	e014      	b.n	800789a <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	2b04      	cmp	r3, #4
 8007876:	d00b      	beq.n	8007890 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800787c:	2b02      	cmp	r3, #2
 800787e:	d007      	beq.n	8007890 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007884:	2b03      	cmp	r3, #3
 8007886:	d003      	beq.n	8007890 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800788c:	2b07      	cmp	r3, #7
 800788e:	d102      	bne.n	8007896 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8007890:	2302      	movs	r3, #2
 8007892:	61fb      	str	r3, [r7, #28]
 8007894:	e001      	b.n	800789a <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8007896:	2301      	movs	r3, #1
 8007898:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	01db      	lsls	r3, r3, #7
 80078a4:	4413      	add	r3, r2
 80078a6:	3384      	adds	r3, #132	@ 0x84
 80078a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078aa:	68fa      	ldr	r2, [r7, #12]
 80078ac:	6812      	ldr	r2, [r2, #0]
 80078ae:	4611      	mov	r1, r2
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	01d2      	lsls	r2, r2, #7
 80078b4:	440a      	add	r2, r1
 80078b6:	3284      	adds	r2, #132	@ 0x84
 80078b8:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80078bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	fb02 f303 	mul.w	r3, r2, r3
 80078c8:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	6859      	ldr	r1, [r3, #4]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	1acb      	subs	r3, r1, r3
 80078d4:	69f9      	ldr	r1, [r7, #28]
 80078d6:	fb01 f303 	mul.w	r3, r1, r3
 80078da:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80078dc:	68f9      	ldr	r1, [r7, #12]
 80078de:	6809      	ldr	r1, [r1, #0]
 80078e0:	4608      	mov	r0, r1
 80078e2:	6879      	ldr	r1, [r7, #4]
 80078e4:	01c9      	lsls	r1, r1, #7
 80078e6:	4401      	add	r1, r0
 80078e8:	3184      	adds	r1, #132	@ 0x84
 80078ea:	4313      	orrs	r3, r2
 80078ec:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	461a      	mov	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	01db      	lsls	r3, r3, #7
 80078f8:	4413      	add	r3, r2
 80078fa:	3384      	adds	r3, #132	@ 0x84
 80078fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4619      	mov	r1, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	01db      	lsls	r3, r3, #7
 8007908:	440b      	add	r3, r1
 800790a:	3384      	adds	r3, #132	@ 0x84
 800790c:	4619      	mov	r1, r3
 800790e:	4b14      	ldr	r3, [pc, #80]	@ (8007960 <LTDC_SetConfig+0x330>)
 8007910:	4013      	ands	r3, r2
 8007912:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	461a      	mov	r2, r3
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	01db      	lsls	r3, r3, #7
 800791e:	4413      	add	r3, r2
 8007920:	3384      	adds	r3, #132	@ 0x84
 8007922:	461a      	mov	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007928:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	01db      	lsls	r3, r3, #7
 8007934:	4413      	add	r3, r2
 8007936:	3384      	adds	r3, #132	@ 0x84
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	6812      	ldr	r2, [r2, #0]
 800793e:	4611      	mov	r1, r2
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	01d2      	lsls	r2, r2, #7
 8007944:	440a      	add	r2, r1
 8007946:	3284      	adds	r2, #132	@ 0x84
 8007948:	f043 0301 	orr.w	r3, r3, #1
 800794c:	6013      	str	r3, [r2, #0]
}
 800794e:	bf00      	nop
 8007950:	3724      	adds	r7, #36	@ 0x24
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	fffff8f8 	.word	0xfffff8f8
 8007960:	fffff800 	.word	0xfffff800

08007964 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007964:	b480      	push	{r7}
 8007966:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007968:	4b05      	ldr	r3, [pc, #20]	@ (8007980 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a04      	ldr	r2, [pc, #16]	@ (8007980 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800796e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007972:	6013      	str	r3, [r2, #0]
}
 8007974:	bf00      	nop
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr
 800797e:	bf00      	nop
 8007980:	40007000 	.word	0x40007000

08007984 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800798e:	4b23      	ldr	r3, [pc, #140]	@ (8007a1c <HAL_PWREx_EnableOverDrive+0x98>)
 8007990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007992:	4a22      	ldr	r2, [pc, #136]	@ (8007a1c <HAL_PWREx_EnableOverDrive+0x98>)
 8007994:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007998:	6413      	str	r3, [r2, #64]	@ 0x40
 800799a:	4b20      	ldr	r3, [pc, #128]	@ (8007a1c <HAL_PWREx_EnableOverDrive+0x98>)
 800799c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80079a6:	4b1e      	ldr	r3, [pc, #120]	@ (8007a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a1d      	ldr	r2, [pc, #116]	@ (8007a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80079b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079b2:	f7fc feb1 	bl	8004718 <HAL_GetTick>
 80079b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80079b8:	e009      	b.n	80079ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80079ba:	f7fc fead 	bl	8004718 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079c8:	d901      	bls.n	80079ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e022      	b.n	8007a14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80079ce:	4b14      	ldr	r3, [pc, #80]	@ (8007a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80079d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80079da:	d1ee      	bne.n	80079ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80079dc:	4b10      	ldr	r3, [pc, #64]	@ (8007a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a0f      	ldr	r2, [pc, #60]	@ (8007a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079e8:	f7fc fe96 	bl	8004718 <HAL_GetTick>
 80079ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80079ee:	e009      	b.n	8007a04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80079f0:	f7fc fe92 	bl	8004718 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079fe:	d901      	bls.n	8007a04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e007      	b.n	8007a14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a04:	4b06      	ldr	r3, [pc, #24]	@ (8007a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a10:	d1ee      	bne.n	80079f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	40007000 	.word	0x40007000

08007a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e291      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 8087 	beq.w	8007b56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a48:	4b96      	ldr	r3, [pc, #600]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f003 030c 	and.w	r3, r3, #12
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d00c      	beq.n	8007a6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a54:	4b93      	ldr	r3, [pc, #588]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 030c 	and.w	r3, r3, #12
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d112      	bne.n	8007a86 <HAL_RCC_OscConfig+0x62>
 8007a60:	4b90      	ldr	r3, [pc, #576]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a6c:	d10b      	bne.n	8007a86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d06c      	beq.n	8007b54 <HAL_RCC_OscConfig+0x130>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d168      	bne.n	8007b54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e26b      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a8e:	d106      	bne.n	8007a9e <HAL_RCC_OscConfig+0x7a>
 8007a90:	4b84      	ldr	r3, [pc, #528]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a83      	ldr	r2, [pc, #524]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007a96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	e02e      	b.n	8007afc <HAL_RCC_OscConfig+0xd8>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x9c>
 8007aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a7e      	ldr	r2, [pc, #504]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	4b7c      	ldr	r3, [pc, #496]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a7b      	ldr	r2, [pc, #492]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007ab8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e01d      	b.n	8007afc <HAL_RCC_OscConfig+0xd8>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ac8:	d10c      	bne.n	8007ae4 <HAL_RCC_OscConfig+0xc0>
 8007aca:	4b76      	ldr	r3, [pc, #472]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a75      	ldr	r2, [pc, #468]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007ad0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	4b73      	ldr	r3, [pc, #460]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a72      	ldr	r2, [pc, #456]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	e00b      	b.n	8007afc <HAL_RCC_OscConfig+0xd8>
 8007ae4:	4b6f      	ldr	r3, [pc, #444]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a6e      	ldr	r2, [pc, #440]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007aea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	4b6c      	ldr	r3, [pc, #432]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a6b      	ldr	r2, [pc, #428]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d013      	beq.n	8007b2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b04:	f7fc fe08 	bl	8004718 <HAL_GetTick>
 8007b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b0a:	e008      	b.n	8007b1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b0c:	f7fc fe04 	bl	8004718 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	2b64      	cmp	r3, #100	@ 0x64
 8007b18:	d901      	bls.n	8007b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e21f      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b1e:	4b61      	ldr	r3, [pc, #388]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0f0      	beq.n	8007b0c <HAL_RCC_OscConfig+0xe8>
 8007b2a:	e014      	b.n	8007b56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2c:	f7fc fdf4 	bl	8004718 <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b32:	e008      	b.n	8007b46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b34:	f7fc fdf0 	bl	8004718 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b64      	cmp	r3, #100	@ 0x64
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e20b      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b46:	4b57      	ldr	r3, [pc, #348]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1f0      	bne.n	8007b34 <HAL_RCC_OscConfig+0x110>
 8007b52:	e000      	b.n	8007b56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d069      	beq.n	8007c36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b62:	4b50      	ldr	r3, [pc, #320]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 030c 	and.w	r3, r3, #12
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 030c 	and.w	r3, r3, #12
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d11c      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x190>
 8007b7a:	4b4a      	ldr	r3, [pc, #296]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d116      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b86:	4b47      	ldr	r3, [pc, #284]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <HAL_RCC_OscConfig+0x17a>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d001      	beq.n	8007b9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e1df      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b9e:	4b41      	ldr	r3, [pc, #260]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	493d      	ldr	r1, [pc, #244]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bb2:	e040      	b.n	8007c36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d023      	beq.n	8007c04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bbc:	4b39      	ldr	r3, [pc, #228]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a38      	ldr	r2, [pc, #224]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007bc2:	f043 0301 	orr.w	r3, r3, #1
 8007bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc8:	f7fc fda6 	bl	8004718 <HAL_GetTick>
 8007bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bce:	e008      	b.n	8007be2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bd0:	f7fc fda2 	bl	8004718 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e1bd      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007be2:	4b30      	ldr	r3, [pc, #192]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0f0      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bee:	4b2d      	ldr	r3, [pc, #180]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	4929      	ldr	r1, [pc, #164]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	600b      	str	r3, [r1, #0]
 8007c02:	e018      	b.n	8007c36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c04:	4b27      	ldr	r3, [pc, #156]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a26      	ldr	r2, [pc, #152]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c0a:	f023 0301 	bic.w	r3, r3, #1
 8007c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c10:	f7fc fd82 	bl	8004718 <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c18:	f7fc fd7e 	bl	8004718 <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e199      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f0      	bne.n	8007c18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0308 	and.w	r3, r3, #8
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d038      	beq.n	8007cb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d019      	beq.n	8007c7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c4a:	4b16      	ldr	r3, [pc, #88]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c4e:	4a15      	ldr	r2, [pc, #84]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c50:	f043 0301 	orr.w	r3, r3, #1
 8007c54:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c56:	f7fc fd5f 	bl	8004718 <HAL_GetTick>
 8007c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c5c:	e008      	b.n	8007c70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c5e:	f7fc fd5b 	bl	8004718 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d901      	bls.n	8007c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e176      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c70:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0f0      	beq.n	8007c5e <HAL_RCC_OscConfig+0x23a>
 8007c7c:	e01a      	b.n	8007cb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c7e:	4b09      	ldr	r3, [pc, #36]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c82:	4a08      	ldr	r2, [pc, #32]	@ (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c84:	f023 0301 	bic.w	r3, r3, #1
 8007c88:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c8a:	f7fc fd45 	bl	8004718 <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c90:	e00a      	b.n	8007ca8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c92:	f7fc fd41 	bl	8004718 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d903      	bls.n	8007ca8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e15c      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
 8007ca4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ca8:	4b91      	ldr	r3, [pc, #580]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007caa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1ee      	bne.n	8007c92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 80a4 	beq.w	8007e0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cc2:	4b8b      	ldr	r3, [pc, #556]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10d      	bne.n	8007cea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cce:	4b88      	ldr	r3, [pc, #544]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd2:	4a87      	ldr	r2, [pc, #540]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007cd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8007cda:	4b85      	ldr	r3, [pc, #532]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ce2:	60bb      	str	r3, [r7, #8]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cea:	4b82      	ldr	r3, [pc, #520]	@ (8007ef4 <HAL_RCC_OscConfig+0x4d0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d118      	bne.n	8007d28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007cf6:	4b7f      	ldr	r3, [pc, #508]	@ (8007ef4 <HAL_RCC_OscConfig+0x4d0>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a7e      	ldr	r2, [pc, #504]	@ (8007ef4 <HAL_RCC_OscConfig+0x4d0>)
 8007cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d02:	f7fc fd09 	bl	8004718 <HAL_GetTick>
 8007d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d08:	e008      	b.n	8007d1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d0a:	f7fc fd05 	bl	8004718 <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	2b64      	cmp	r3, #100	@ 0x64
 8007d16:	d901      	bls.n	8007d1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e120      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d1c:	4b75      	ldr	r3, [pc, #468]	@ (8007ef4 <HAL_RCC_OscConfig+0x4d0>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d0f0      	beq.n	8007d0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d106      	bne.n	8007d3e <HAL_RCC_OscConfig+0x31a>
 8007d30:	4b6f      	ldr	r3, [pc, #444]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d34:	4a6e      	ldr	r2, [pc, #440]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d36:	f043 0301 	orr.w	r3, r3, #1
 8007d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d3c:	e02d      	b.n	8007d9a <HAL_RCC_OscConfig+0x376>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10c      	bne.n	8007d60 <HAL_RCC_OscConfig+0x33c>
 8007d46:	4b6a      	ldr	r3, [pc, #424]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d4a:	4a69      	ldr	r2, [pc, #420]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d4c:	f023 0301 	bic.w	r3, r3, #1
 8007d50:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d52:	4b67      	ldr	r3, [pc, #412]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d56:	4a66      	ldr	r2, [pc, #408]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d58:	f023 0304 	bic.w	r3, r3, #4
 8007d5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d5e:	e01c      	b.n	8007d9a <HAL_RCC_OscConfig+0x376>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2b05      	cmp	r3, #5
 8007d66:	d10c      	bne.n	8007d82 <HAL_RCC_OscConfig+0x35e>
 8007d68:	4b61      	ldr	r3, [pc, #388]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6c:	4a60      	ldr	r2, [pc, #384]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d6e:	f043 0304 	orr.w	r3, r3, #4
 8007d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d74:	4b5e      	ldr	r3, [pc, #376]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d78:	4a5d      	ldr	r2, [pc, #372]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d7a:	f043 0301 	orr.w	r3, r3, #1
 8007d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d80:	e00b      	b.n	8007d9a <HAL_RCC_OscConfig+0x376>
 8007d82:	4b5b      	ldr	r3, [pc, #364]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d86:	4a5a      	ldr	r2, [pc, #360]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d88:	f023 0301 	bic.w	r3, r3, #1
 8007d8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d8e:	4b58      	ldr	r3, [pc, #352]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d92:	4a57      	ldr	r2, [pc, #348]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d94:	f023 0304 	bic.w	r3, r3, #4
 8007d98:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d015      	beq.n	8007dce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da2:	f7fc fcb9 	bl	8004718 <HAL_GetTick>
 8007da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007da8:	e00a      	b.n	8007dc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007daa:	f7fc fcb5 	bl	8004718 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e0ce      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dc0:	4b4b      	ldr	r3, [pc, #300]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007dc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0ee      	beq.n	8007daa <HAL_RCC_OscConfig+0x386>
 8007dcc:	e014      	b.n	8007df8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dce:	f7fc fca3 	bl	8004718 <HAL_GetTick>
 8007dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dd4:	e00a      	b.n	8007dec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd6:	f7fc fc9f 	bl	8004718 <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e0b8      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dec:	4b40      	ldr	r3, [pc, #256]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1ee      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d105      	bne.n	8007e0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e02:	4a3b      	ldr	r2, [pc, #236]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e04:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e08:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80a4 	beq.w	8007f5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e14:	4b36      	ldr	r3, [pc, #216]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f003 030c 	and.w	r3, r3, #12
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d06b      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d149      	bne.n	8007ebc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e28:	4b31      	ldr	r3, [pc, #196]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a30      	ldr	r2, [pc, #192]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e34:	f7fc fc70 	bl	8004718 <HAL_GetTick>
 8007e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e3c:	f7fc fc6c 	bl	8004718 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e087      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e4e:	4b28      	ldr	r3, [pc, #160]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1f0      	bne.n	8007e3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69da      	ldr	r2, [r3, #28]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	431a      	orrs	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e68:	019b      	lsls	r3, r3, #6
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e70:	085b      	lsrs	r3, r3, #1
 8007e72:	3b01      	subs	r3, #1
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e7c:	061b      	lsls	r3, r3, #24
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	4a1b      	ldr	r2, [pc, #108]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e82:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007e86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e88:	4b19      	ldr	r3, [pc, #100]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a18      	ldr	r2, [pc, #96]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e94:	f7fc fc40 	bl	8004718 <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e9c:	f7fc fc3c 	bl	8004718 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e057      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eae:	4b10      	ldr	r3, [pc, #64]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCC_OscConfig+0x478>
 8007eba:	e04f      	b.n	8007f5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007ec2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec8:	f7fc fc26 	bl	8004718 <HAL_GetTick>
 8007ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ed0:	f7fc fc22 	bl	8004718 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e03d      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ee2:	4b03      	ldr	r3, [pc, #12]	@ (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1f0      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x4ac>
 8007eee:	e035      	b.n	8007f5c <HAL_RCC_OscConfig+0x538>
 8007ef0:	40023800 	.word	0x40023800
 8007ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8007f68 <HAL_RCC_OscConfig+0x544>)
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d028      	beq.n	8007f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d121      	bne.n	8007f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d11a      	bne.n	8007f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007f28:	4013      	ands	r3, r2
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007f2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d111      	bne.n	8007f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f3e:	085b      	lsrs	r3, r3, #1
 8007f40:	3b01      	subs	r3, #1
 8007f42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d107      	bne.n	8007f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d001      	beq.n	8007f5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e000      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	40023800 	.word	0x40023800

08007f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e0d0      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f84:	4b6a      	ldr	r3, [pc, #424]	@ (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 030f 	and.w	r3, r3, #15
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d910      	bls.n	8007fb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f92:	4b67      	ldr	r3, [pc, #412]	@ (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f023 020f 	bic.w	r2, r3, #15
 8007f9a:	4965      	ldr	r1, [pc, #404]	@ (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fa2:	4b63      	ldr	r3, [pc, #396]	@ (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 030f 	and.w	r3, r3, #15
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d001      	beq.n	8007fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e0b8      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d020      	beq.n	8008002 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fcc:	4b59      	ldr	r3, [pc, #356]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	4a58      	ldr	r2, [pc, #352]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007fd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0308 	and.w	r3, r3, #8
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fe4:	4b53      	ldr	r3, [pc, #332]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	4a52      	ldr	r2, [pc, #328]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007fee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ff0:	4b50      	ldr	r3, [pc, #320]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	494d      	ldr	r1, [pc, #308]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d040      	beq.n	8008090 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d107      	bne.n	8008026 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008016:	4b47      	ldr	r3, [pc, #284]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d115      	bne.n	800804e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e07f      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	2b02      	cmp	r3, #2
 800802c:	d107      	bne.n	800803e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800802e:	4b41      	ldr	r3, [pc, #260]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e073      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800803e:	4b3d      	ldr	r3, [pc, #244]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e06b      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800804e:	4b39      	ldr	r3, [pc, #228]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f023 0203 	bic.w	r2, r3, #3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	4936      	ldr	r1, [pc, #216]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 800805c:	4313      	orrs	r3, r2
 800805e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008060:	f7fc fb5a 	bl	8004718 <HAL_GetTick>
 8008064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008066:	e00a      	b.n	800807e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008068:	f7fc fb56 	bl	8004718 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008076:	4293      	cmp	r3, r2
 8008078:	d901      	bls.n	800807e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e053      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800807e:	4b2d      	ldr	r3, [pc, #180]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 020c 	and.w	r2, r3, #12
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	429a      	cmp	r2, r3
 800808e:	d1eb      	bne.n	8008068 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008090:	4b27      	ldr	r3, [pc, #156]	@ (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 030f 	and.w	r3, r3, #15
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d210      	bcs.n	80080c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800809e:	4b24      	ldr	r3, [pc, #144]	@ (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f023 020f 	bic.w	r2, r3, #15
 80080a6:	4922      	ldr	r1, [pc, #136]	@ (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ae:	4b20      	ldr	r3, [pc, #128]	@ (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d001      	beq.n	80080c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e032      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d008      	beq.n	80080de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080cc:	4b19      	ldr	r3, [pc, #100]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	4916      	ldr	r1, [pc, #88]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d009      	beq.n	80080fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80080ea:	4b12      	ldr	r3, [pc, #72]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	490e      	ldr	r1, [pc, #56]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80080fe:	f000 f821 	bl	8008144 <HAL_RCC_GetSysClockFreq>
 8008102:	4602      	mov	r2, r0
 8008104:	4b0b      	ldr	r3, [pc, #44]	@ (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	091b      	lsrs	r3, r3, #4
 800810a:	f003 030f 	and.w	r3, r3, #15
 800810e:	490a      	ldr	r1, [pc, #40]	@ (8008138 <HAL_RCC_ClockConfig+0x1cc>)
 8008110:	5ccb      	ldrb	r3, [r1, r3]
 8008112:	fa22 f303 	lsr.w	r3, r2, r3
 8008116:	4a09      	ldr	r2, [pc, #36]	@ (800813c <HAL_RCC_ClockConfig+0x1d0>)
 8008118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800811a:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <HAL_RCC_ClockConfig+0x1d4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f7fb fdc0 	bl	8003ca4 <HAL_InitTick>

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	40023c00 	.word	0x40023c00
 8008134:	40023800 	.word	0x40023800
 8008138:	08015678 	.word	0x08015678
 800813c:	20000034 	.word	0x20000034
 8008140:	20000038 	.word	0x20000038

08008144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008148:	b090      	sub	sp, #64	@ 0x40
 800814a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800814c:	2300      	movs	r3, #0
 800814e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008150:	2300      	movs	r3, #0
 8008152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008154:	2300      	movs	r3, #0
 8008156:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800815c:	4b59      	ldr	r3, [pc, #356]	@ (80082c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 030c 	and.w	r3, r3, #12
 8008164:	2b08      	cmp	r3, #8
 8008166:	d00d      	beq.n	8008184 <HAL_RCC_GetSysClockFreq+0x40>
 8008168:	2b08      	cmp	r3, #8
 800816a:	f200 80a1 	bhi.w	80082b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <HAL_RCC_GetSysClockFreq+0x34>
 8008172:	2b04      	cmp	r3, #4
 8008174:	d003      	beq.n	800817e <HAL_RCC_GetSysClockFreq+0x3a>
 8008176:	e09b      	b.n	80082b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008178:	4b53      	ldr	r3, [pc, #332]	@ (80082c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800817a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800817c:	e09b      	b.n	80082b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800817e:	4b53      	ldr	r3, [pc, #332]	@ (80082cc <HAL_RCC_GetSysClockFreq+0x188>)
 8008180:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008182:	e098      	b.n	80082b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008184:	4b4f      	ldr	r3, [pc, #316]	@ (80082c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800818c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800818e:	4b4d      	ldr	r3, [pc, #308]	@ (80082c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d028      	beq.n	80081ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800819a:	4b4a      	ldr	r3, [pc, #296]	@ (80082c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	099b      	lsrs	r3, r3, #6
 80081a0:	2200      	movs	r2, #0
 80081a2:	623b      	str	r3, [r7, #32]
 80081a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80081a6:	6a3b      	ldr	r3, [r7, #32]
 80081a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80081ac:	2100      	movs	r1, #0
 80081ae:	4b47      	ldr	r3, [pc, #284]	@ (80082cc <HAL_RCC_GetSysClockFreq+0x188>)
 80081b0:	fb03 f201 	mul.w	r2, r3, r1
 80081b4:	2300      	movs	r3, #0
 80081b6:	fb00 f303 	mul.w	r3, r0, r3
 80081ba:	4413      	add	r3, r2
 80081bc:	4a43      	ldr	r2, [pc, #268]	@ (80082cc <HAL_RCC_GetSysClockFreq+0x188>)
 80081be:	fba0 1202 	umull	r1, r2, r0, r2
 80081c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081c4:	460a      	mov	r2, r1
 80081c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80081c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ca:	4413      	add	r3, r2
 80081cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081d0:	2200      	movs	r2, #0
 80081d2:	61bb      	str	r3, [r7, #24]
 80081d4:	61fa      	str	r2, [r7, #28]
 80081d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80081da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80081de:	f7f8 f867 	bl	80002b0 <__aeabi_uldivmod>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4613      	mov	r3, r2
 80081e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081ea:	e053      	b.n	8008294 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081ec:	4b35      	ldr	r3, [pc, #212]	@ (80082c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	099b      	lsrs	r3, r3, #6
 80081f2:	2200      	movs	r2, #0
 80081f4:	613b      	str	r3, [r7, #16]
 80081f6:	617a      	str	r2, [r7, #20]
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80081fe:	f04f 0b00 	mov.w	fp, #0
 8008202:	4652      	mov	r2, sl
 8008204:	465b      	mov	r3, fp
 8008206:	f04f 0000 	mov.w	r0, #0
 800820a:	f04f 0100 	mov.w	r1, #0
 800820e:	0159      	lsls	r1, r3, #5
 8008210:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008214:	0150      	lsls	r0, r2, #5
 8008216:	4602      	mov	r2, r0
 8008218:	460b      	mov	r3, r1
 800821a:	ebb2 080a 	subs.w	r8, r2, sl
 800821e:	eb63 090b 	sbc.w	r9, r3, fp
 8008222:	f04f 0200 	mov.w	r2, #0
 8008226:	f04f 0300 	mov.w	r3, #0
 800822a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800822e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008232:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008236:	ebb2 0408 	subs.w	r4, r2, r8
 800823a:	eb63 0509 	sbc.w	r5, r3, r9
 800823e:	f04f 0200 	mov.w	r2, #0
 8008242:	f04f 0300 	mov.w	r3, #0
 8008246:	00eb      	lsls	r3, r5, #3
 8008248:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800824c:	00e2      	lsls	r2, r4, #3
 800824e:	4614      	mov	r4, r2
 8008250:	461d      	mov	r5, r3
 8008252:	eb14 030a 	adds.w	r3, r4, sl
 8008256:	603b      	str	r3, [r7, #0]
 8008258:	eb45 030b 	adc.w	r3, r5, fp
 800825c:	607b      	str	r3, [r7, #4]
 800825e:	f04f 0200 	mov.w	r2, #0
 8008262:	f04f 0300 	mov.w	r3, #0
 8008266:	e9d7 4500 	ldrd	r4, r5, [r7]
 800826a:	4629      	mov	r1, r5
 800826c:	028b      	lsls	r3, r1, #10
 800826e:	4621      	mov	r1, r4
 8008270:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008274:	4621      	mov	r1, r4
 8008276:	028a      	lsls	r2, r1, #10
 8008278:	4610      	mov	r0, r2
 800827a:	4619      	mov	r1, r3
 800827c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800827e:	2200      	movs	r2, #0
 8008280:	60bb      	str	r3, [r7, #8]
 8008282:	60fa      	str	r2, [r7, #12]
 8008284:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008288:	f7f8 f812 	bl	80002b0 <__aeabi_uldivmod>
 800828c:	4602      	mov	r2, r0
 800828e:	460b      	mov	r3, r1
 8008290:	4613      	mov	r3, r2
 8008292:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008294:	4b0b      	ldr	r3, [pc, #44]	@ (80082c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	0c1b      	lsrs	r3, r3, #16
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	3301      	adds	r3, #1
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80082a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80082a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80082ae:	e002      	b.n	80082b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082b0:	4b05      	ldr	r3, [pc, #20]	@ (80082c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80082b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80082b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3740      	adds	r7, #64	@ 0x40
 80082bc:	46bd      	mov	sp, r7
 80082be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082c2:	bf00      	nop
 80082c4:	40023800 	.word	0x40023800
 80082c8:	00f42400 	.word	0x00f42400
 80082cc:	017d7840 	.word	0x017d7840

080082d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082d0:	b480      	push	{r7}
 80082d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082d4:	4b03      	ldr	r3, [pc, #12]	@ (80082e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80082d6:	681b      	ldr	r3, [r3, #0]
}
 80082d8:	4618      	mov	r0, r3
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	20000034 	.word	0x20000034

080082e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80082ec:	f7ff fff0 	bl	80082d0 <HAL_RCC_GetHCLKFreq>
 80082f0:	4602      	mov	r2, r0
 80082f2:	4b05      	ldr	r3, [pc, #20]	@ (8008308 <HAL_RCC_GetPCLK1Freq+0x20>)
 80082f4:	689b      	ldr	r3, [r3, #8]
 80082f6:	0a9b      	lsrs	r3, r3, #10
 80082f8:	f003 0307 	and.w	r3, r3, #7
 80082fc:	4903      	ldr	r1, [pc, #12]	@ (800830c <HAL_RCC_GetPCLK1Freq+0x24>)
 80082fe:	5ccb      	ldrb	r3, [r1, r3]
 8008300:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008304:	4618      	mov	r0, r3
 8008306:	bd80      	pop	{r7, pc}
 8008308:	40023800 	.word	0x40023800
 800830c:	08015688 	.word	0x08015688

08008310 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008314:	f7ff ffdc 	bl	80082d0 <HAL_RCC_GetHCLKFreq>
 8008318:	4602      	mov	r2, r0
 800831a:	4b05      	ldr	r3, [pc, #20]	@ (8008330 <HAL_RCC_GetPCLK2Freq+0x20>)
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	0b5b      	lsrs	r3, r3, #13
 8008320:	f003 0307 	and.w	r3, r3, #7
 8008324:	4903      	ldr	r1, [pc, #12]	@ (8008334 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008326:	5ccb      	ldrb	r3, [r1, r3]
 8008328:	fa22 f303 	lsr.w	r3, r2, r3
}
 800832c:	4618      	mov	r0, r3
 800832e:	bd80      	pop	{r7, pc}
 8008330:	40023800 	.word	0x40023800
 8008334:	08015688 	.word	0x08015688

08008338 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	220f      	movs	r2, #15
 8008346:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008348:	4b12      	ldr	r3, [pc, #72]	@ (8008394 <HAL_RCC_GetClockConfig+0x5c>)
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f003 0203 	and.w	r2, r3, #3
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008354:	4b0f      	ldr	r3, [pc, #60]	@ (8008394 <HAL_RCC_GetClockConfig+0x5c>)
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008360:	4b0c      	ldr	r3, [pc, #48]	@ (8008394 <HAL_RCC_GetClockConfig+0x5c>)
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800836c:	4b09      	ldr	r3, [pc, #36]	@ (8008394 <HAL_RCC_GetClockConfig+0x5c>)
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	08db      	lsrs	r3, r3, #3
 8008372:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800837a:	4b07      	ldr	r3, [pc, #28]	@ (8008398 <HAL_RCC_GetClockConfig+0x60>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f003 020f 	and.w	r2, r3, #15
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	601a      	str	r2, [r3, #0]
}
 8008386:	bf00      	nop
 8008388:	370c      	adds	r7, #12
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	40023800 	.word	0x40023800
 8008398:	40023c00 	.word	0x40023c00

0800839c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b088      	sub	sp, #32
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80083a8:	2300      	movs	r3, #0
 80083aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80083ac:	2300      	movs	r3, #0
 80083ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80083b0:	2300      	movs	r3, #0
 80083b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0301 	and.w	r3, r3, #1
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d012      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80083c4:	4b69      	ldr	r3, [pc, #420]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	4a68      	ldr	r2, [pc, #416]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ca:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80083ce:	6093      	str	r3, [r2, #8]
 80083d0:	4b66      	ldr	r3, [pc, #408]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083d2:	689a      	ldr	r2, [r3, #8]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083d8:	4964      	ldr	r1, [pc, #400]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d101      	bne.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80083e6:	2301      	movs	r3, #1
 80083e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d017      	beq.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083f6:	4b5d      	ldr	r3, [pc, #372]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80083fc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008404:	4959      	ldr	r1, [pc, #356]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008406:	4313      	orrs	r3, r2
 8008408:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008410:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008414:	d101      	bne.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008416:	2301      	movs	r3, #1
 8008418:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800841e:	2b00      	cmp	r3, #0
 8008420:	d101      	bne.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008422:	2301      	movs	r3, #1
 8008424:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800842e:	2b00      	cmp	r3, #0
 8008430:	d017      	beq.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008432:	4b4e      	ldr	r3, [pc, #312]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008438:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008440:	494a      	ldr	r1, [pc, #296]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008442:	4313      	orrs	r3, r2
 8008444:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800844c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008450:	d101      	bne.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008452:	2301      	movs	r3, #1
 8008454:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800845a:	2b00      	cmp	r3, #0
 800845c:	d101      	bne.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800845e:	2301      	movs	r3, #1
 8008460:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800846e:	2301      	movs	r3, #1
 8008470:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0320 	and.w	r3, r3, #32
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 808b 	beq.w	8008596 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008480:	4b3a      	ldr	r3, [pc, #232]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008482:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008484:	4a39      	ldr	r2, [pc, #228]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008486:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800848a:	6413      	str	r3, [r2, #64]	@ 0x40
 800848c:	4b37      	ldr	r3, [pc, #220]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800848e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008490:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008494:	60bb      	str	r3, [r7, #8]
 8008496:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008498:	4b35      	ldr	r3, [pc, #212]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a34      	ldr	r2, [pc, #208]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800849e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084a4:	f7fc f938 	bl	8004718 <HAL_GetTick>
 80084a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084aa:	e008      	b.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084ac:	f7fc f934 	bl	8004718 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2b64      	cmp	r3, #100	@ 0x64
 80084b8:	d901      	bls.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e357      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084be:	4b2c      	ldr	r3, [pc, #176]	@ (8008570 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d0f0      	beq.n	80084ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80084ca:	4b28      	ldr	r3, [pc, #160]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d035      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084e2:	693a      	ldr	r2, [r7, #16]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d02e      	beq.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084e8:	4b20      	ldr	r3, [pc, #128]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80084f2:	4b1e      	ldr	r3, [pc, #120]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084f6:	4a1d      	ldr	r2, [pc, #116]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084fc:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80084fe:	4b1b      	ldr	r3, [pc, #108]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008502:	4a1a      	ldr	r2, [pc, #104]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008504:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008508:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800850a:	4a18      	ldr	r2, [pc, #96]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008510:	4b16      	ldr	r3, [pc, #88]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008514:	f003 0301 	and.w	r3, r3, #1
 8008518:	2b01      	cmp	r3, #1
 800851a:	d114      	bne.n	8008546 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800851c:	f7fc f8fc 	bl	8004718 <HAL_GetTick>
 8008520:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008522:	e00a      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008524:	f7fc f8f8 	bl	8004718 <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008532:	4293      	cmp	r3, r2
 8008534:	d901      	bls.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008536:	2303      	movs	r3, #3
 8008538:	e319      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800853a:	4b0c      	ldr	r3, [pc, #48]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800853c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d0ee      	beq.n	8008524 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800854e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008552:	d111      	bne.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008554:	4b05      	ldr	r3, [pc, #20]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8008560:	4b04      	ldr	r3, [pc, #16]	@ (8008574 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008562:	400b      	ands	r3, r1
 8008564:	4901      	ldr	r1, [pc, #4]	@ (800856c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008566:	4313      	orrs	r3, r2
 8008568:	608b      	str	r3, [r1, #8]
 800856a:	e00b      	b.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800856c:	40023800 	.word	0x40023800
 8008570:	40007000 	.word	0x40007000
 8008574:	0ffffcff 	.word	0x0ffffcff
 8008578:	4baa      	ldr	r3, [pc, #680]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	4aa9      	ldr	r2, [pc, #676]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800857e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008582:	6093      	str	r3, [r2, #8]
 8008584:	4ba7      	ldr	r3, [pc, #668]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008586:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800858c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008590:	49a4      	ldr	r1, [pc, #656]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008592:	4313      	orrs	r3, r2
 8008594:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f003 0310 	and.w	r3, r3, #16
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d010      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085a2:	4ba0      	ldr	r3, [pc, #640]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80085a8:	4a9e      	ldr	r2, [pc, #632]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80085b2:	4b9c      	ldr	r3, [pc, #624]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085bc:	4999      	ldr	r1, [pc, #612]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d00a      	beq.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085d0:	4b94      	ldr	r3, [pc, #592]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085d6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80085de:	4991      	ldr	r1, [pc, #580]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00a      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085f2:	4b8c      	ldr	r3, [pc, #560]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80085f8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008600:	4988      	ldr	r1, [pc, #544]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008602:	4313      	orrs	r3, r2
 8008604:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d00a      	beq.n	800862a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008614:	4b83      	ldr	r3, [pc, #524]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800861a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008622:	4980      	ldr	r1, [pc, #512]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008624:	4313      	orrs	r3, r2
 8008626:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008636:	4b7b      	ldr	r3, [pc, #492]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008638:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800863c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008644:	4977      	ldr	r1, [pc, #476]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008646:	4313      	orrs	r3, r2
 8008648:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008654:	2b00      	cmp	r3, #0
 8008656:	d00a      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008658:	4b72      	ldr	r3, [pc, #456]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800865a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800865e:	f023 0203 	bic.w	r2, r3, #3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008666:	496f      	ldr	r1, [pc, #444]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008668:	4313      	orrs	r3, r2
 800866a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008676:	2b00      	cmp	r3, #0
 8008678:	d00a      	beq.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800867a:	4b6a      	ldr	r3, [pc, #424]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800867c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008680:	f023 020c 	bic.w	r2, r3, #12
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008688:	4966      	ldr	r1, [pc, #408]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800868a:	4313      	orrs	r3, r2
 800868c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00a      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800869c:	4b61      	ldr	r3, [pc, #388]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800869e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086a2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80086aa:	495e      	ldr	r1, [pc, #376]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00a      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086be:	4b59      	ldr	r3, [pc, #356]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086c4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80086cc:	4955      	ldr	r1, [pc, #340]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ce:	4313      	orrs	r3, r2
 80086d0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d00a      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80086e0:	4b50      	ldr	r3, [pc, #320]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086e6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ee:	494d      	ldr	r1, [pc, #308]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086f0:	4313      	orrs	r3, r2
 80086f2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00a      	beq.n	8008718 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008702:	4b48      	ldr	r3, [pc, #288]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008708:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008710:	4944      	ldr	r1, [pc, #272]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008712:	4313      	orrs	r3, r2
 8008714:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00a      	beq.n	800873a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008724:	4b3f      	ldr	r3, [pc, #252]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800872a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008732:	493c      	ldr	r1, [pc, #240]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008734:	4313      	orrs	r3, r2
 8008736:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008746:	4b37      	ldr	r3, [pc, #220]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800874c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008754:	4933      	ldr	r1, [pc, #204]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008756:	4313      	orrs	r3, r2
 8008758:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00a      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008768:	4b2e      	ldr	r3, [pc, #184]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800876a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800876e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008776:	492b      	ldr	r1, [pc, #172]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008778:	4313      	orrs	r3, r2
 800877a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008786:	2b00      	cmp	r3, #0
 8008788:	d011      	beq.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800878a:	4b26      	ldr	r3, [pc, #152]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800878c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008790:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008798:	4922      	ldr	r1, [pc, #136]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800879a:	4313      	orrs	r3, r2
 800879c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80087a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80087a8:	d101      	bne.n	80087ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80087aa:	2301      	movs	r3, #1
 80087ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0308 	and.w	r3, r3, #8
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80087ba:	2301      	movs	r3, #1
 80087bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087ca:	4b16      	ldr	r3, [pc, #88]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087d0:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80087d8:	4912      	ldr	r1, [pc, #72]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00b      	beq.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80087ec:	4b0d      	ldr	r3, [pc, #52]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087f2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087fc:	4909      	ldr	r1, [pc, #36]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087fe:	4313      	orrs	r3, r2
 8008800:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d006      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 80d9 	beq.w	80089ca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008818:	4b02      	ldr	r3, [pc, #8]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a01      	ldr	r2, [pc, #4]	@ (8008824 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800881e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008822:	e001      	b.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008824:	40023800 	.word	0x40023800
 8008828:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800882a:	f7fb ff75 	bl	8004718 <HAL_GetTick>
 800882e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008830:	e008      	b.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008832:	f7fb ff71 	bl	8004718 <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b64      	cmp	r3, #100	@ 0x64
 800883e:	d901      	bls.n	8008844 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e194      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008844:	4b6c      	ldr	r3, [pc, #432]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1f0      	bne.n	8008832 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d021      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008860:	2b00      	cmp	r3, #0
 8008862:	d11d      	bne.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008864:	4b64      	ldr	r3, [pc, #400]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008866:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800886a:	0c1b      	lsrs	r3, r3, #16
 800886c:	f003 0303 	and.w	r3, r3, #3
 8008870:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008872:	4b61      	ldr	r3, [pc, #388]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008874:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008878:	0e1b      	lsrs	r3, r3, #24
 800887a:	f003 030f 	and.w	r3, r3, #15
 800887e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	019a      	lsls	r2, r3, #6
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	041b      	lsls	r3, r3, #16
 800888a:	431a      	orrs	r2, r3
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	061b      	lsls	r3, r3, #24
 8008890:	431a      	orrs	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	071b      	lsls	r3, r3, #28
 8008898:	4957      	ldr	r1, [pc, #348]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800889a:	4313      	orrs	r3, r2
 800889c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d004      	beq.n	80088b6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80088b4:	d00a      	beq.n	80088cc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d02e      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80088ca:	d129      	bne.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80088cc:	4b4a      	ldr	r3, [pc, #296]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088d2:	0c1b      	lsrs	r3, r3, #16
 80088d4:	f003 0303 	and.w	r3, r3, #3
 80088d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088da:	4b47      	ldr	r3, [pc, #284]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80088e0:	0f1b      	lsrs	r3, r3, #28
 80088e2:	f003 0307 	and.w	r3, r3, #7
 80088e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	019a      	lsls	r2, r3, #6
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	041b      	lsls	r3, r3, #16
 80088f2:	431a      	orrs	r2, r3
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	061b      	lsls	r3, r3, #24
 80088fa:	431a      	orrs	r2, r3
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	071b      	lsls	r3, r3, #28
 8008900:	493d      	ldr	r1, [pc, #244]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008902:	4313      	orrs	r3, r2
 8008904:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008908:	4b3b      	ldr	r3, [pc, #236]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800890a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800890e:	f023 021f 	bic.w	r2, r3, #31
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008916:	3b01      	subs	r3, #1
 8008918:	4937      	ldr	r1, [pc, #220]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800891a:	4313      	orrs	r3, r2
 800891c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d01d      	beq.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800892c:	4b32      	ldr	r3, [pc, #200]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800892e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008932:	0e1b      	lsrs	r3, r3, #24
 8008934:	f003 030f 	and.w	r3, r3, #15
 8008938:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800893a:	4b2f      	ldr	r3, [pc, #188]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800893c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008940:	0f1b      	lsrs	r3, r3, #28
 8008942:	f003 0307 	and.w	r3, r3, #7
 8008946:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	019a      	lsls	r2, r3, #6
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	041b      	lsls	r3, r3, #16
 8008954:	431a      	orrs	r2, r3
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	061b      	lsls	r3, r3, #24
 800895a:	431a      	orrs	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	071b      	lsls	r3, r3, #28
 8008960:	4925      	ldr	r1, [pc, #148]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008962:	4313      	orrs	r3, r2
 8008964:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d011      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	019a      	lsls	r2, r3, #6
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	041b      	lsls	r3, r3, #16
 8008980:	431a      	orrs	r2, r3
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	061b      	lsls	r3, r3, #24
 8008988:	431a      	orrs	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	071b      	lsls	r3, r3, #28
 8008990:	4919      	ldr	r1, [pc, #100]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008992:	4313      	orrs	r3, r2
 8008994:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008998:	4b17      	ldr	r3, [pc, #92]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a16      	ldr	r2, [pc, #88]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800899e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80089a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a4:	f7fb feb8 	bl	8004718 <HAL_GetTick>
 80089a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089aa:	e008      	b.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089ac:	f7fb feb4 	bl	8004718 <HAL_GetTick>
 80089b0:	4602      	mov	r2, r0
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	1ad3      	subs	r3, r2, r3
 80089b6:	2b64      	cmp	r3, #100	@ 0x64
 80089b8:	d901      	bls.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e0d7      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089be:	4b0e      	ldr	r3, [pc, #56]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d0f0      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80089ca:	69bb      	ldr	r3, [r7, #24]
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	f040 80cd 	bne.w	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80089d2:	4b09      	ldr	r3, [pc, #36]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a08      	ldr	r2, [pc, #32]	@ (80089f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089de:	f7fb fe9b 	bl	8004718 <HAL_GetTick>
 80089e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089e4:	e00a      	b.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80089e6:	f7fb fe97 	bl	8004718 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	2b64      	cmp	r3, #100	@ 0x64
 80089f2:	d903      	bls.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e0ba      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80089f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089fc:	4b5e      	ldr	r3, [pc, #376]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008a04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a08:	d0ed      	beq.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d009      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d02e      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d12a      	bne.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a32:	4b51      	ldr	r3, [pc, #324]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a38:	0c1b      	lsrs	r3, r3, #16
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a40:	4b4d      	ldr	r3, [pc, #308]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a46:	0f1b      	lsrs	r3, r3, #28
 8008a48:	f003 0307 	and.w	r3, r3, #7
 8008a4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	695b      	ldr	r3, [r3, #20]
 8008a52:	019a      	lsls	r2, r3, #6
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	041b      	lsls	r3, r3, #16
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	699b      	ldr	r3, [r3, #24]
 8008a5e:	061b      	lsls	r3, r3, #24
 8008a60:	431a      	orrs	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	071b      	lsls	r3, r3, #28
 8008a66:	4944      	ldr	r1, [pc, #272]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a6e:	4b42      	ldr	r3, [pc, #264]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008a74:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	021b      	lsls	r3, r3, #8
 8008a80:	493d      	ldr	r1, [pc, #244]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d022      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008a9c:	d11d      	bne.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a9e:	4b36      	ldr	r3, [pc, #216]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aa4:	0e1b      	lsrs	r3, r3, #24
 8008aa6:	f003 030f 	and.w	r3, r3, #15
 8008aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008aac:	4b32      	ldr	r3, [pc, #200]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008ab2:	0f1b      	lsrs	r3, r3, #28
 8008ab4:	f003 0307 	and.w	r3, r3, #7
 8008ab8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	019a      	lsls	r2, r3, #6
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a1b      	ldr	r3, [r3, #32]
 8008ac4:	041b      	lsls	r3, r3, #16
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	061b      	lsls	r3, r3, #24
 8008acc:	431a      	orrs	r2, r3
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	071b      	lsls	r3, r3, #28
 8008ad2:	4929      	ldr	r1, [pc, #164]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 0308 	and.w	r3, r3, #8
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d028      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ae6:	4b24      	ldr	r3, [pc, #144]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aec:	0e1b      	lsrs	r3, r3, #24
 8008aee:	f003 030f 	and.w	r3, r3, #15
 8008af2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008af4:	4b20      	ldr	r3, [pc, #128]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008afa:	0c1b      	lsrs	r3, r3, #16
 8008afc:	f003 0303 	and.w	r3, r3, #3
 8008b00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	019a      	lsls	r2, r3, #6
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	041b      	lsls	r3, r3, #16
 8008b0c:	431a      	orrs	r2, r3
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	061b      	lsls	r3, r3, #24
 8008b12:	431a      	orrs	r2, r3
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	69db      	ldr	r3, [r3, #28]
 8008b18:	071b      	lsls	r3, r3, #28
 8008b1a:	4917      	ldr	r1, [pc, #92]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008b22:	4b15      	ldr	r3, [pc, #84]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008b28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b30:	4911      	ldr	r1, [pc, #68]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b38:	4b0f      	ldr	r3, [pc, #60]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4a0e      	ldr	r2, [pc, #56]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008b42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b44:	f7fb fde8 	bl	8004718 <HAL_GetTick>
 8008b48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b4a:	e008      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b4c:	f7fb fde4 	bl	8004718 <HAL_GetTick>
 8008b50:	4602      	mov	r2, r0
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	2b64      	cmp	r3, #100	@ 0x64
 8008b58:	d901      	bls.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e007      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b5e:	4b06      	ldr	r3, [pc, #24]	@ (8008b78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008b66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b6a:	d1ef      	bne.n	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3720      	adds	r7, #32
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}
 8008b76:	bf00      	nop
 8008b78:	40023800 	.word	0x40023800

08008b7c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e071      	b.n	8008c76 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	7f5b      	ldrb	r3, [r3, #29]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d105      	bne.n	8008ba8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7f9 fb98 	bl	80022d8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2202      	movs	r2, #2
 8008bac:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	f003 0310 	and.w	r3, r3, #16
 8008bb8:	2b10      	cmp	r3, #16
 8008bba:	d053      	beq.n	8008c64 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	22ca      	movs	r2, #202	@ 0xca
 8008bc2:	625a      	str	r2, [r3, #36]	@ 0x24
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2253      	movs	r2, #83	@ 0x53
 8008bca:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fac9 	bl	8009164 <RTC_EnterInitMode>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008bd6:	7bfb      	ldrb	r3, [r7, #15]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d12a      	bne.n	8008c32 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6899      	ldr	r1, [r3, #8]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	4b26      	ldr	r3, [pc, #152]	@ (8008c80 <HAL_RTC_Init+0x104>)
 8008be8:	400b      	ands	r3, r1
 8008bea:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	6899      	ldr	r1, [r3, #8]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685a      	ldr	r2, [r3, #4]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	695b      	ldr	r3, [r3, #20]
 8008c00:	431a      	orrs	r2, r3
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	430a      	orrs	r2, r1
 8008c08:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	68d2      	ldr	r2, [r2, #12]
 8008c12:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6919      	ldr	r1, [r3, #16]
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	689b      	ldr	r3, [r3, #8]
 8008c1e:	041a      	lsls	r2, r3, #16
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 fad2 	bl	80091d2 <RTC_ExitInitMode>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d110      	bne.n	8008c5a <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f022 0208 	bic.w	r2, r2, #8
 8008c46:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	699a      	ldr	r2, [r3, #24]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	22ff      	movs	r2, #255	@ 0xff
 8008c60:	625a      	str	r2, [r3, #36]	@ 0x24
 8008c62:	e001      	b.n	8008c68 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008c64:	2300      	movs	r3, #0
 8008c66:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008c68:	7bfb      	ldrb	r3, [r7, #15]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d102      	bne.n	8008c74 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3710      	adds	r7, #16
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	ff8fffbf 	.word	0xff8fffbf

08008c84 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c84:	b590      	push	{r4, r7, lr}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	60f8      	str	r0, [r7, #12]
 8008c8c:	60b9      	str	r1, [r7, #8]
 8008c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008c90:	2300      	movs	r3, #0
 8008c92:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	7f1b      	ldrb	r3, [r3, #28]
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <HAL_RTC_SetTime+0x1c>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e085      	b.n	8008dac <HAL_RTC_SetTime+0x128>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2202      	movs	r2, #2
 8008caa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d126      	bne.n	8008d00 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	689b      	ldr	r3, [r3, #8]
 8008cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d102      	bne.n	8008cc6 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f000 faa6 	bl	800921c <RTC_ByteToBcd2>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	785b      	ldrb	r3, [r3, #1]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f000 fa9f 	bl	800921c <RTC_ByteToBcd2>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008ce2:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	789b      	ldrb	r3, [r3, #2]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 fa97 	bl	800921c <RTC_ByteToBcd2>
 8008cee:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008cf0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	78db      	ldrb	r3, [r3, #3]
 8008cf8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]
 8008cfe:	e018      	b.n	8008d32 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d102      	bne.n	8008d14 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	2200      	movs	r2, #0
 8008d12:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	785b      	ldrb	r3, [r3, #1]
 8008d1e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008d20:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008d22:	68ba      	ldr	r2, [r7, #8]
 8008d24:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008d26:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	78db      	ldrb	r3, [r3, #3]
 8008d2c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	22ca      	movs	r2, #202	@ 0xca
 8008d38:	625a      	str	r2, [r3, #36]	@ 0x24
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2253      	movs	r2, #83	@ 0x53
 8008d40:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d42:	68f8      	ldr	r0, [r7, #12]
 8008d44:	f000 fa0e 	bl	8009164 <RTC_EnterInitMode>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008d4c:	7cfb      	ldrb	r3, [r7, #19]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d11e      	bne.n	8008d90 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681a      	ldr	r2, [r3, #0]
 8008d56:	6979      	ldr	r1, [r7, #20]
 8008d58:	4b16      	ldr	r3, [pc, #88]	@ (8008db4 <HAL_RTC_SetTime+0x130>)
 8008d5a:	400b      	ands	r3, r1
 8008d5c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008d6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6899      	ldr	r1, [r3, #8]
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	68da      	ldr	r2, [r3, #12]
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	691b      	ldr	r3, [r3, #16]
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	430a      	orrs	r2, r1
 8008d84:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008d86:	68f8      	ldr	r0, [r7, #12]
 8008d88:	f000 fa23 	bl	80091d2 <RTC_ExitInitMode>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008d90:	7cfb      	ldrb	r3, [r7, #19]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d102      	bne.n	8008d9c <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2201      	movs	r2, #1
 8008d9a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	22ff      	movs	r2, #255	@ 0xff
 8008da2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	2200      	movs	r2, #0
 8008da8:	771a      	strb	r2, [r3, #28]

  return status;
 8008daa:	7cfb      	ldrb	r3, [r7, #19]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd90      	pop	{r4, r7, pc}
 8008db4:	007f7f7f 	.word	0x007f7f7f

08008db8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008db8:	b590      	push	{r4, r7, lr}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	7f1b      	ldrb	r3, [r3, #28]
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d101      	bne.n	8008dd4 <HAL_RTC_SetDate+0x1c>
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	e06f      	b.n	8008eb4 <HAL_RTC_SetDate+0xfc>
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2202      	movs	r2, #2
 8008dde:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10e      	bne.n	8008e04 <HAL_RTC_SetDate+0x4c>
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	785b      	ldrb	r3, [r3, #1]
 8008dea:	f003 0310 	and.w	r3, r3, #16
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d008      	beq.n	8008e04 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	785b      	ldrb	r3, [r3, #1]
 8008df6:	f023 0310 	bic.w	r3, r3, #16
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	330a      	adds	r3, #10
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d11c      	bne.n	8008e44 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	78db      	ldrb	r3, [r3, #3]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f000 fa04 	bl	800921c <RTC_ByteToBcd2>
 8008e14:	4603      	mov	r3, r0
 8008e16:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	785b      	ldrb	r3, [r3, #1]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 f9fd 	bl	800921c <RTC_ByteToBcd2>
 8008e22:	4603      	mov	r3, r0
 8008e24:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008e26:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	789b      	ldrb	r3, [r3, #2]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f000 f9f5 	bl	800921c <RTC_ByteToBcd2>
 8008e32:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008e34:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	781b      	ldrb	r3, [r3, #0]
 8008e3c:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	617b      	str	r3, [r7, #20]
 8008e42:	e00e      	b.n	8008e62 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	78db      	ldrb	r3, [r3, #3]
 8008e48:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	785b      	ldrb	r3, [r3, #1]
 8008e4e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008e50:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008e52:	68ba      	ldr	r2, [r7, #8]
 8008e54:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008e56:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	22ca      	movs	r2, #202	@ 0xca
 8008e68:	625a      	str	r2, [r3, #36]	@ 0x24
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	2253      	movs	r2, #83	@ 0x53
 8008e70:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008e72:	68f8      	ldr	r0, [r7, #12]
 8008e74:	f000 f976 	bl	8009164 <RTC_EnterInitMode>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008e7c:	7cfb      	ldrb	r3, [r7, #19]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d10a      	bne.n	8008e98 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	6979      	ldr	r1, [r7, #20]
 8008e88:	4b0c      	ldr	r3, [pc, #48]	@ (8008ebc <HAL_RTC_SetDate+0x104>)
 8008e8a:	400b      	ands	r3, r1
 8008e8c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 f99f 	bl	80091d2 <RTC_ExitInitMode>
 8008e94:	4603      	mov	r3, r0
 8008e96:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008e98:	7cfb      	ldrb	r3, [r7, #19]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d102      	bne.n	8008ea4 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	22ff      	movs	r2, #255	@ 0xff
 8008eaa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	771a      	strb	r2, [r3, #28]

  return status;
 8008eb2:	7cfb      	ldrb	r3, [r7, #19]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	371c      	adds	r7, #28
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd90      	pop	{r4, r7, pc}
 8008ebc:	00ffff3f 	.word	0x00ffff3f

08008ec0 <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008ec0:	b590      	push	{r4, r7, lr}
 8008ec2:	b089      	sub	sp, #36	@ 0x24
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	60f8      	str	r0, [r7, #12]
 8008ec8:	60b9      	str	r1, [r7, #8]
 8008eca:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	7f1b      	ldrb	r3, [r3, #28]
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_RTC_SetAlarm+0x24>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e113      	b.n	800910c <HAL_RTC_SetAlarm+0x24c>
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2202      	movs	r2, #2
 8008eee:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d137      	bne.n	8008f66 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	689b      	ldr	r3, [r3, #8]
 8008efc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d102      	bne.n	8008f0a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2200      	movs	r2, #0
 8008f08:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f000 f984 	bl	800921c <RTC_ByteToBcd2>
 8008f14:	4603      	mov	r3, r0
 8008f16:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	785b      	ldrb	r3, [r3, #1]
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f000 f97d 	bl	800921c <RTC_ByteToBcd2>
 8008f22:	4603      	mov	r3, r0
 8008f24:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008f26:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	789b      	ldrb	r3, [r3, #2]
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	f000 f975 	bl	800921c <RTC_ByteToBcd2>
 8008f32:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008f34:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	78db      	ldrb	r3, [r3, #3]
 8008f3c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8008f3e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 f967 	bl	800921c <RTC_ByteToBcd2>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8008f52:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8008f5a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8008f60:	4313      	orrs	r3, r2
 8008f62:	61fb      	str	r3, [r7, #28]
 8008f64:	e023      	b.n	8008fae <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	2200      	movs	r2, #0
 8008f78:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	785b      	ldrb	r3, [r3, #1]
 8008f84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008f86:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8008f8c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	78db      	ldrb	r3, [r3, #3]
 8008f92:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8008f94:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f9c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8008f9e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8008fa4:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8008faa:	4313      	orrs	r3, r2
 8008fac:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	22ca      	movs	r2, #202	@ 0xca
 8008fc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2253      	movs	r2, #83	@ 0x53
 8008fc8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fd2:	d148      	bne.n	8009066 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	689a      	ldr	r2, [r3, #8]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008fe2:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008ff2:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68db      	ldr	r3, [r3, #12]
 8008ffa:	b2da      	uxtb	r2, r3
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f462 72c0 	orn	r2, r2, #384	@ 0x180
 8009004:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009006:	f7fb fb87 	bl	8004718 <HAL_GetTick>
 800900a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800900c:	e013      	b.n	8009036 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800900e:	f7fb fb83 	bl	8004718 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	69bb      	ldr	r3, [r7, #24]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800901c:	d90b      	bls.n	8009036 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	22ff      	movs	r2, #255	@ 0xff
 8009024:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2203      	movs	r2, #3
 800902a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e06a      	b.n	800910c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	f003 0301 	and.w	r3, r3, #1
 8009040:	2b00      	cmp	r3, #0
 8009042:	d0e4      	beq.n	800900e <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	69fa      	ldr	r2, [r7, #28]
 800904a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	697a      	ldr	r2, [r7, #20]
 8009052:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	689a      	ldr	r2, [r3, #8]
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009062:	609a      	str	r2, [r3, #8]
 8009064:	e047      	b.n	80090f6 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	689a      	ldr	r2, [r3, #8]
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8009074:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	689a      	ldr	r2, [r3, #8]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009084:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	b2da      	uxtb	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f462 7220 	orn	r2, r2, #640	@ 0x280
 8009096:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009098:	f7fb fb3e 	bl	8004718 <HAL_GetTick>
 800909c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800909e:	e013      	b.n	80090c8 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80090a0:	f7fb fb3a 	bl	8004718 <HAL_GetTick>
 80090a4:	4602      	mov	r2, r0
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	1ad3      	subs	r3, r2, r3
 80090aa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80090ae:	d90b      	bls.n	80090c8 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	22ff      	movs	r2, #255	@ 0xff
 80090b6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2203      	movs	r2, #3
 80090bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e021      	b.n	800910c <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0e4      	beq.n	80090a0 <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69fa      	ldr	r2, [r7, #28]
 80090dc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	649a      	str	r2, [r3, #72]	@ 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	689a      	ldr	r2, [r3, #8]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80090f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	22ff      	movs	r2, #255	@ 0xff
 80090fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2201      	movs	r2, #1
 8009102:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2200      	movs	r2, #0
 8009108:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800910a:	2300      	movs	r3, #0
}
 800910c:	4618      	mov	r0, r3
 800910e:	3724      	adds	r7, #36	@ 0x24
 8009110:	46bd      	mov	sp, r7
 8009112:	bd90      	pop	{r4, r7, pc}

08009114 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b084      	sub	sp, #16
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800912e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009130:	f7fb faf2 	bl	8004718 <HAL_GetTick>
 8009134:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8009136:	e009      	b.n	800914c <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009138:	f7fb faee 	bl	8004718 <HAL_GetTick>
 800913c:	4602      	mov	r2, r0
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	1ad3      	subs	r3, r2, r3
 8009142:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009146:	d901      	bls.n	800914c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009148:	2303      	movs	r3, #3
 800914a:	e007      	b.n	800915c <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	f003 0320 	and.w	r3, r3, #32
 8009156:	2b00      	cmp	r3, #0
 8009158:	d0ee      	beq.n	8009138 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800915a:	2300      	movs	r3, #0
}
 800915c:	4618      	mov	r0, r3
 800915e:	3710      	adds	r7, #16
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}

08009164 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b084      	sub	sp, #16
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800916c:	2300      	movs	r3, #0
 800916e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
 800917a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800917e:	2b00      	cmp	r3, #0
 8009180:	d122      	bne.n	80091c8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	68da      	ldr	r2, [r3, #12]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8009190:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009192:	f7fb fac1 	bl	8004718 <HAL_GetTick>
 8009196:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009198:	e00c      	b.n	80091b4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800919a:	f7fb fabd 	bl	8004718 <HAL_GetTick>
 800919e:	4602      	mov	r2, r0
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	1ad3      	subs	r3, r2, r3
 80091a4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091a8:	d904      	bls.n	80091b4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2204      	movs	r2, #4
 80091ae:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d102      	bne.n	80091c8 <RTC_EnterInitMode+0x64>
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d1e8      	bne.n	800919a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b084      	sub	sp, #16
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80091ec:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	f003 0320 	and.w	r3, r3, #32
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d10a      	bne.n	8009212 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f7ff ff89 	bl	8009114 <HAL_RTC_WaitForSynchro>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d004      	beq.n	8009212 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2204      	movs	r2, #4
 800920c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800920e:	2301      	movs	r3, #1
 8009210:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8009212:	7bfb      	ldrb	r3, [r7, #15]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3710      	adds	r7, #16
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	4603      	mov	r3, r0
 8009224:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8009226:	2300      	movs	r3, #0
 8009228:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800922a:	e005      	b.n	8009238 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3301      	adds	r3, #1
 8009230:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	3b0a      	subs	r3, #10
 8009236:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	2b09      	cmp	r3, #9
 800923c:	d8f6      	bhi.n	800922c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	b2db      	uxtb	r3, r3
 8009242:	011b      	lsls	r3, r3, #4
 8009244:	b2da      	uxtb	r2, r3
 8009246:	79fb      	ldrb	r3, [r7, #7]
 8009248:	4313      	orrs	r3, r2
 800924a:	b2db      	uxtb	r3, r3
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009258:	b480      	push	{r7}
 800925a:	b087      	sub	sp, #28
 800925c:	af00      	add	r7, sp, #0
 800925e:	60f8      	str	r0, [r7, #12]
 8009260:	60b9      	str	r1, [r7, #8]
 8009262:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009264:	2300      	movs	r3, #0
 8009266:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	7f1b      	ldrb	r3, [r3, #28]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d101      	bne.n	8009274 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009270:	2302      	movs	r3, #2
 8009272:	e050      	b.n	8009316 <HAL_RTCEx_SetTimeStamp+0xbe>
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2201      	movs	r2, #1
 8009278:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2202      	movs	r2, #2
 800927e:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f022 0206 	bic.w	r2, r2, #6
 800928e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	430a      	orrs	r2, r1
 800929e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	689a      	ldr	r2, [r3, #8]
 80092a6:	4b1f      	ldr	r3, [pc, #124]	@ (8009324 <HAL_RTCEx_SetTimeStamp+0xcc>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 80092ac:	697a      	ldr	r2, [r7, #20]
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	22ca      	movs	r2, #202	@ 0xca
 80092ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2253      	movs	r2, #83	@ 0x53
 80092c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68db      	ldr	r3, [r3, #12]
 80092d2:	b2da      	uxtb	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f462 6208 	orn	r2, r2, #2176	@ 0x880
 80092dc:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f462 5284 	orn	r2, r2, #4224	@ 0x1080
 80092ee:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	689a      	ldr	r2, [r3, #8]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092fe:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	22ff      	movs	r2, #255	@ 0xff
 8009306:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2201      	movs	r2, #1
 800930c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009314:	2300      	movs	r3, #0
}
 8009316:	4618      	mov	r0, r3
 8009318:	371c      	adds	r7, #28
 800931a:	46bd      	mov	sp, r7
 800931c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009320:	4770      	bx	lr
 8009322:	bf00      	nop
 8009324:	fffff7f7 	.word	0xfffff7f7

08009328 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d101      	bne.n	800933a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8009336:	2301      	movs	r3, #1
 8009338:	e022      	b.n	8009380 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b00      	cmp	r3, #0
 8009344:	d105      	bne.n	8009352 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7f9 f811 	bl	8002374 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2203      	movs	r2, #3
 8009356:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f814 	bl	8009388 <HAL_SD_InitCard>
 8009360:	4603      	mov	r3, r0
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8009366:	2301      	movs	r3, #1
 8009368:	e00a      	b.n	8009380 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800937e:	2300      	movs	r3, #0
}
 8009380:	4618      	mov	r0, r3
 8009382:	3708      	adds	r7, #8
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009388:	b5b0      	push	{r4, r5, r7, lr}
 800938a:	b08e      	sub	sp, #56	@ 0x38
 800938c:	af04      	add	r7, sp, #16
 800938e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8009390:	2300      	movs	r3, #0
 8009392:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8009398:	2300      	movs	r3, #0
 800939a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800939c:	2300      	movs	r3, #0
 800939e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80093a0:	2300      	movs	r3, #0
 80093a2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80093a4:	2376      	movs	r3, #118	@ 0x76
 80093a6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681d      	ldr	r5, [r3, #0]
 80093ac:	466c      	mov	r4, sp
 80093ae:	f107 0314 	add.w	r3, r7, #20
 80093b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80093b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80093ba:	f107 0308 	add.w	r3, r7, #8
 80093be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80093c0:	4628      	mov	r0, r5
 80093c2:	f003 f831 	bl	800c428 <SDMMC_Init>
 80093c6:	4603      	mov	r3, r0
 80093c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80093cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e059      	b.n	800948c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80093e6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f003 f847 	bl	800c480 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009400:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8009402:	2002      	movs	r0, #2
 8009404:	f7fb f994 	bl	8004730 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fd75 	bl	8009ef8 <SD_PowerON>
 800940e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009410:	6a3b      	ldr	r3, [r7, #32]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2201      	movs	r2, #1
 800941a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009422:	6a3b      	ldr	r3, [r7, #32]
 8009424:	431a      	orrs	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800942a:	2301      	movs	r3, #1
 800942c:	e02e      	b.n	800948c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f000 fc94 	bl	8009d5c <SD_InitCard>
 8009434:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009436:	6a3b      	ldr	r3, [r7, #32]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00b      	beq.n	8009454 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2201      	movs	r2, #1
 8009440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009448:	6a3b      	ldr	r3, [r7, #32]
 800944a:	431a      	orrs	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	e01b      	b.n	800948c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800945c:	4618      	mov	r0, r3
 800945e:	f003 f8a1 	bl	800c5a4 <SDMMC_CmdBlockLength>
 8009462:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009464:	6a3b      	ldr	r3, [r7, #32]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d00f      	beq.n	800948a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a09      	ldr	r2, [pc, #36]	@ (8009494 <HAL_SD_InitCard+0x10c>)
 8009470:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009476:	6a3b      	ldr	r3, [r7, #32]
 8009478:	431a      	orrs	r2, r3
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	e000      	b.n	800948c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 800948a:	2300      	movs	r3, #0
}
 800948c:	4618      	mov	r0, r3
 800948e:	3728      	adds	r7, #40	@ 0x28
 8009490:	46bd      	mov	sp, r7
 8009492:	bdb0      	pop	{r4, r5, r7, pc}
 8009494:	004005ff 	.word	0x004005ff

08009498 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08c      	sub	sp, #48	@ 0x30
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d107      	bne.n	80094c0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094b4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	e0c3      	b.n	8009648 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	f040 80bc 	bne.w	8009646 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80094d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	441a      	add	r2, r3
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094de:	429a      	cmp	r2, r3
 80094e0:	d907      	bls.n	80094f2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094e6:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80094ee:	2301      	movs	r3, #1
 80094f0:	e0aa      	b.n	8009648 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2203      	movs	r2, #3
 80094f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2200      	movs	r2, #0
 8009500:	62da      	str	r2, [r3, #44]	@ 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 8009510:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009516:	4a4e      	ldr	r2, [pc, #312]	@ (8009650 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8009518:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800951e:	4a4d      	ldr	r2, [pc, #308]	@ (8009654 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8009520:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009526:	2200      	movs	r2, #0
 8009528:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800952e:	2200      	movs	r2, #0
 8009530:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009542:	689a      	ldr	r2, [r3, #8]
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3380      	adds	r3, #128	@ 0x80
 8009558:	4619      	mov	r1, r3
 800955a:	68ba      	ldr	r2, [r7, #8]
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	025b      	lsls	r3, r3, #9
 8009560:	089b      	lsrs	r3, r3, #2
 8009562:	f7fb fe6b 	bl	800523c <HAL_DMA_Start_IT>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d017      	beq.n	800959c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 800957a:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a35      	ldr	r2, [pc, #212]	@ (8009658 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009582:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009588:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	e055      	b.n	8009648 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f042 0208 	orr.w	r2, r2, #8
 80095aa:	62da      	str	r2, [r3, #44]	@ 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d002      	beq.n	80095ba <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 80095b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095b6:	025b      	lsls	r3, r3, #9
 80095b8:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80095ba:	f04f 33ff 	mov.w	r3, #4294967295
 80095be:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	025b      	lsls	r3, r3, #9
 80095c4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80095c6:	2390      	movs	r3, #144	@ 0x90
 80095c8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80095ca:	2302      	movs	r3, #2
 80095cc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80095d2:	2301      	movs	r3, #1
 80095d4:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f107 0210 	add.w	r2, r7, #16
 80095de:	4611      	mov	r1, r2
 80095e0:	4618      	mov	r0, r3
 80095e2:	f002 ffb3 	bl	800c54c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	2b01      	cmp	r3, #1
 80095ea:	d90a      	bls.n	8009602 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	2282      	movs	r2, #130	@ 0x82
 80095f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095f8:	4618      	mov	r0, r3
 80095fa:	f003 f817 	bl	800c62c <SDMMC_CmdReadMultiBlock>
 80095fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009600:	e009      	b.n	8009616 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2281      	movs	r2, #129	@ 0x81
 8009606:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800960e:	4618      	mov	r0, r3
 8009610:	f002 ffea 	bl	800c5e8 <SDMMC_CmdReadSingleBlock>
 8009614:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8009616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009618:	2b00      	cmp	r3, #0
 800961a:	d012      	beq.n	8009642 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a0d      	ldr	r2, [pc, #52]	@ (8009658 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8009622:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800962a:	431a      	orrs	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	2201      	movs	r2, #1
 8009634:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	2200      	movs	r2, #0
 800963c:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	e002      	b.n	8009648 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8009642:	2300      	movs	r3, #0
 8009644:	e000      	b.n	8009648 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8009646:	2302      	movs	r3, #2
  }
}
 8009648:	4618      	mov	r0, r3
 800964a:	3730      	adds	r7, #48	@ 0x30
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}
 8009650:	08009c47 	.word	0x08009c47
 8009654:	08009cb9 	.word	0x08009cb9
 8009658:	004005ff 	.word	0x004005ff

0800965c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b08c      	sub	sp, #48	@ 0x30
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
 8009668:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d107      	bne.n	8009684 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009678:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	e0c6      	b.n	8009812 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800968a:	b2db      	uxtb	r3, r3
 800968c:	2b01      	cmp	r3, #1
 800968e:	f040 80bf 	bne.w	8009810 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2200      	movs	r2, #0
 8009696:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009698:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	441a      	add	r2, r3
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d907      	bls.n	80096b6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096aa:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e0ad      	b.n	8009812 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2203      	movs	r2, #3
 80096ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2200      	movs	r2, #0
 80096c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f042 021a 	orr.w	r2, r2, #26
 80096d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096da:	4a50      	ldr	r2, [pc, #320]	@ (800981c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80096dc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096e2:	4a4f      	ldr	r2, [pc, #316]	@ (8009820 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80096e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80096ea:	2200      	movs	r2, #0
 80096ec:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d002      	beq.n	80096fc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80096f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096f8:	025b      	lsls	r3, r3, #9
 80096fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d90a      	bls.n	8009718 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	22a0      	movs	r2, #160	@ 0xa0
 8009706:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800970e:	4618      	mov	r0, r3
 8009710:	f002 ffd0 	bl	800c6b4 <SDMMC_CmdWriteMultiBlock>
 8009714:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8009716:	e009      	b.n	800972c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	2290      	movs	r2, #144	@ 0x90
 800971c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009724:	4618      	mov	r0, r3
 8009726:	f002 ffa3 	bl	800c670 <SDMMC_CmdWriteSingleBlock>
 800972a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800972c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800972e:	2b00      	cmp	r3, #0
 8009730:	d012      	beq.n	8009758 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a3b      	ldr	r2, [pc, #236]	@ (8009824 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8009738:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800973e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009740:	431a      	orrs	r2, r3
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	2201      	movs	r2, #1
 800974a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8009754:	2301      	movs	r3, #1
 8009756:	e05c      	b.n	8009812 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0208 	orr.w	r2, r2, #8
 8009766:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800976c:	2240      	movs	r2, #64	@ 0x40
 800976e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009780:	689a      	ldr	r2, [r3, #8]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	430a      	orrs	r2, r1
 800978a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	3380      	adds	r3, #128	@ 0x80
 8009798:	461a      	mov	r2, r3
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	025b      	lsls	r3, r3, #9
 800979e:	089b      	lsrs	r3, r3, #2
 80097a0:	f7fb fd4c 	bl	800523c <HAL_DMA_Start_IT>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d01a      	beq.n	80097e0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f022 021a 	bic.w	r2, r2, #26
 80097b8:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4a19      	ldr	r2, [pc, #100]	@ (8009824 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80097c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2201      	movs	r2, #1
 80097d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	2200      	movs	r2, #0
 80097da:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e018      	b.n	8009812 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097e0:	f04f 33ff 	mov.w	r3, #4294967295
 80097e4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	025b      	lsls	r3, r3, #9
 80097ea:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80097ec:	2390      	movs	r3, #144	@ 0x90
 80097ee:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80097f0:	2300      	movs	r3, #0
 80097f2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80097f8:	2301      	movs	r3, #1
 80097fa:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f107 0210 	add.w	r2, r7, #16
 8009804:	4611      	mov	r1, r2
 8009806:	4618      	mov	r0, r3
 8009808:	f002 fea0 	bl	800c54c <SDMMC_ConfigData>

      return HAL_OK;
 800980c:	2300      	movs	r3, #0
 800980e:	e000      	b.n	8009812 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 8009810:	2302      	movs	r3, #2
  }
}
 8009812:	4618      	mov	r0, r3
 8009814:	3730      	adds	r7, #48	@ 0x30
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}
 800981a:	bf00      	nop
 800981c:	08009c1d 	.word	0x08009c1d
 8009820:	08009cb9 	.word	0x08009cb9
 8009824:	004005ff 	.word	0x004005ff

08009828 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009830:	bf00      	nop
 8009832:	370c      	adds	r7, #12
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr

0800983c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800984a:	0f9b      	lsrs	r3, r3, #30
 800984c:	b2da      	uxtb	r2, r3
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009856:	0e9b      	lsrs	r3, r3, #26
 8009858:	b2db      	uxtb	r3, r3
 800985a:	f003 030f 	and.w	r3, r3, #15
 800985e:	b2da      	uxtb	r2, r3
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009868:	0e1b      	lsrs	r3, r3, #24
 800986a:	b2db      	uxtb	r3, r3
 800986c:	f003 0303 	and.w	r3, r3, #3
 8009870:	b2da      	uxtb	r2, r3
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800987a:	0c1b      	lsrs	r3, r3, #16
 800987c:	b2da      	uxtb	r2, r3
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009886:	0a1b      	lsrs	r3, r3, #8
 8009888:	b2da      	uxtb	r2, r3
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009892:	b2da      	uxtb	r2, r3
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800989c:	0d1b      	lsrs	r3, r3, #20
 800989e:	b29a      	uxth	r2, r3
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098a8:	0c1b      	lsrs	r3, r3, #16
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	f003 030f 	and.w	r3, r3, #15
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098ba:	0bdb      	lsrs	r3, r3, #15
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	b2da      	uxtb	r2, r3
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098cc:	0b9b      	lsrs	r3, r3, #14
 80098ce:	b2db      	uxtb	r3, r3
 80098d0:	f003 0301 	and.w	r3, r3, #1
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098de:	0b5b      	lsrs	r3, r3, #13
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	f003 0301 	and.w	r3, r3, #1
 80098e6:	b2da      	uxtb	r2, r3
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80098f0:	0b1b      	lsrs	r3, r3, #12
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	b2da      	uxtb	r2, r3
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2200      	movs	r2, #0
 8009902:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009908:	2b00      	cmp	r3, #0
 800990a:	d163      	bne.n	80099d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8009910:	009a      	lsls	r2, r3, #2
 8009912:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009916:	4013      	ands	r3, r2
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800991c:	0f92      	lsrs	r2, r2, #30
 800991e:	431a      	orrs	r2, r3
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009928:	0edb      	lsrs	r3, r3, #27
 800992a:	b2db      	uxtb	r3, r3
 800992c:	f003 0307 	and.w	r3, r3, #7
 8009930:	b2da      	uxtb	r2, r3
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800993a:	0e1b      	lsrs	r3, r3, #24
 800993c:	b2db      	uxtb	r3, r3
 800993e:	f003 0307 	and.w	r3, r3, #7
 8009942:	b2da      	uxtb	r2, r3
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800994c:	0d5b      	lsrs	r3, r3, #21
 800994e:	b2db      	uxtb	r3, r3
 8009950:	f003 0307 	and.w	r3, r3, #7
 8009954:	b2da      	uxtb	r2, r3
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800995e:	0c9b      	lsrs	r3, r3, #18
 8009960:	b2db      	uxtb	r3, r3
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	b2da      	uxtb	r2, r3
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009970:	0bdb      	lsrs	r3, r3, #15
 8009972:	b2db      	uxtb	r3, r3
 8009974:	f003 0307 	and.w	r3, r3, #7
 8009978:	b2da      	uxtb	r2, r3
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800997e:	683b      	ldr	r3, [r7, #0]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	1c5a      	adds	r2, r3, #1
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	7e1b      	ldrb	r3, [r3, #24]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	f003 0307 	and.w	r3, r3, #7
 8009992:	3302      	adds	r3, #2
 8009994:	2201      	movs	r2, #1
 8009996:	fa02 f303 	lsl.w	r3, r2, r3
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 800999e:	fb03 f202 	mul.w	r2, r3, r2
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	7a1b      	ldrb	r3, [r3, #8]
 80099aa:	b2db      	uxtb	r3, r3
 80099ac:	f003 030f 	and.w	r3, r3, #15
 80099b0:	2201      	movs	r2, #1
 80099b2:	409a      	lsls	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80099c0:	0a52      	lsrs	r2, r2, #9
 80099c2:	fb03 f202 	mul.w	r2, r3, r2
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80099d0:	661a      	str	r2, [r3, #96]	@ 0x60
 80099d2:	e031      	b.n	8009a38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d11d      	bne.n	8009a18 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80099e0:	041b      	lsls	r3, r3, #16
 80099e2:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099ea:	0c1b      	lsrs	r3, r3, #16
 80099ec:	431a      	orrs	r2, r3
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	3301      	adds	r3, #1
 80099f8:	029a      	lsls	r2, r3, #10
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a0c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	661a      	str	r2, [r3, #96]	@ 0x60
 8009a16:	e00f      	b.n	8009a38 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a58      	ldr	r2, [pc, #352]	@ (8009b80 <HAL_SD_GetCardCSD+0x344>)
 8009a1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a24:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2201      	movs	r2, #1
 8009a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e09d      	b.n	8009b74 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a3c:	0b9b      	lsrs	r3, r3, #14
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	f003 0301 	and.w	r3, r3, #1
 8009a44:	b2da      	uxtb	r2, r3
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a4e:	09db      	lsrs	r3, r3, #7
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a56:	b2da      	uxtb	r2, r3
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009a66:	b2da      	uxtb	r2, r3
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a70:	0fdb      	lsrs	r3, r3, #31
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a7c:	0f5b      	lsrs	r3, r3, #29
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	f003 0303 	and.w	r3, r3, #3
 8009a84:	b2da      	uxtb	r2, r3
 8009a86:	683b      	ldr	r3, [r7, #0]
 8009a88:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009a8e:	0e9b      	lsrs	r3, r3, #26
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	f003 0307 	and.w	r3, r3, #7
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009aa0:	0d9b      	lsrs	r3, r3, #22
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	f003 030f 	and.w	r3, r3, #15
 8009aa8:	b2da      	uxtb	r2, r3
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ab2:	0d5b      	lsrs	r3, r3, #21
 8009ab4:	b2db      	uxtb	r3, r3
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	b2da      	uxtb	r2, r3
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ace:	0c1b      	lsrs	r3, r3, #16
 8009ad0:	b2db      	uxtb	r3, r3
 8009ad2:	f003 0301 	and.w	r3, r3, #1
 8009ad6:	b2da      	uxtb	r2, r3
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009ae2:	0bdb      	lsrs	r3, r3, #15
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	f003 0301 	and.w	r3, r3, #1
 8009aea:	b2da      	uxtb	r2, r3
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009af6:	0b9b      	lsrs	r3, r3, #14
 8009af8:	b2db      	uxtb	r3, r3
 8009afa:	f003 0301 	and.w	r3, r3, #1
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b0a:	0b5b      	lsrs	r3, r3, #13
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	b2da      	uxtb	r2, r3
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b1e:	0b1b      	lsrs	r3, r3, #12
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	f003 0301 	and.w	r3, r3, #1
 8009b26:	b2da      	uxtb	r2, r3
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b32:	0a9b      	lsrs	r3, r3, #10
 8009b34:	b2db      	uxtb	r3, r3
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	b2da      	uxtb	r2, r3
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b46:	0a1b      	lsrs	r3, r3, #8
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	f003 0303 	and.w	r3, r3, #3
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	683b      	ldr	r3, [r7, #0]
 8009b52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009b5a:	085b      	lsrs	r3, r3, #1
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b62:	b2da      	uxtb	r2, r3
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8009b72:	2300      	movs	r3, #0
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr
 8009b80:	004005ff 	.word	0x004005ff

08009b84 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b086      	sub	sp, #24
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009be4:	2300      	movs	r3, #0
 8009be6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009be8:	f107 030c 	add.w	r3, r7, #12
 8009bec:	4619      	mov	r1, r3
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fa10 	bl	800a014 <SD_SendStatus>
 8009bf4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d005      	beq.n	8009c08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	431a      	orrs	r2, r3
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	0a5b      	lsrs	r3, r3, #9
 8009c0c:	f003 030f 	and.w	r3, r3, #15
 8009c10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009c12:	693b      	ldr	r3, [r7, #16]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3718      	adds	r7, #24
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c28:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009c38:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8009c3a:	bf00      	nop
 8009c3c:	3714      	adds	r7, #20
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c44:	4770      	bx	lr

08009c46 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b084      	sub	sp, #16
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c52:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c58:	2b82      	cmp	r3, #130	@ 0x82
 8009c5a:	d111      	bne.n	8009c80 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4618      	mov	r0, r3
 8009c62:	f002 fd49 	bl	800c6f8 <SDMMC_CmdStopTransfer>
 8009c66:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d008      	beq.n	8009c80 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	431a      	orrs	r2, r3
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f7ff fdd4 	bl	8009828 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f022 0208 	bic.w	r2, r2, #8
 8009c8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f240 523a 	movw	r2, #1338	@ 0x53a
 8009c98:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f003 f955 	bl	800cf58 <HAL_SD_RxCpltCallback>
#endif
}
 8009cae:	bf00      	nop
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
	...

08009cb8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cc4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f7fb fd34 	bl	8005734 <HAL_DMA_GetError>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d03e      	beq.n	8009d50 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009cd8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ce0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	d002      	beq.n	8009cee <SD_DMAError+0x36>
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d12d      	bne.n	8009d4a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a19      	ldr	r2, [pc, #100]	@ (8009d58 <SD_DMAError+0xa0>)
 8009cf4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8009d04:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d0a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009d12:	6978      	ldr	r0, [r7, #20]
 8009d14:	f7ff ff62 	bl	8009bdc <HAL_SD_GetCardState>
 8009d18:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	2b06      	cmp	r3, #6
 8009d1e:	d002      	beq.n	8009d26 <SD_DMAError+0x6e>
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	2b05      	cmp	r3, #5
 8009d24:	d10a      	bne.n	8009d3c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	f002 fce4 	bl	800c6f8 <SDMMC_CmdStopTransfer>
 8009d30:	4602      	mov	r2, r0
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d36:	431a      	orrs	r2, r3
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	2201      	movs	r2, #1
 8009d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	2200      	movs	r2, #0
 8009d48:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009d4a:	6978      	ldr	r0, [r7, #20]
 8009d4c:	f7ff fd6c 	bl	8009828 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009d50:	bf00      	nop
 8009d52:	3718      	adds	r7, #24
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	004005ff 	.word	0x004005ff

08009d5c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009d5c:	b5b0      	push	{r4, r5, r7, lr}
 8009d5e:	b094      	sub	sp, #80	@ 0x50
 8009d60:	af04      	add	r7, sp, #16
 8009d62:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009d64:	2301      	movs	r3, #1
 8009d66:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f002 fb95 	bl	800c49c <SDMMC_GetPowerState>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d102      	bne.n	8009d7e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d78:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8009d7c:	e0b8      	b.n	8009ef0 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d82:	2b03      	cmp	r3, #3
 8009d84:	d02f      	beq.n	8009de6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f002 fd7c 	bl	800c888 <SDMMC_CmdSendCID>
 8009d90:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d001      	beq.n	8009d9c <SD_InitCard+0x40>
    {
      return errorstate;
 8009d98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d9a:	e0a9      	b.n	8009ef0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	2100      	movs	r1, #0
 8009da2:	4618      	mov	r0, r3
 8009da4:	f002 fbbf 	bl	800c526 <SDMMC_GetResponse>
 8009da8:	4602      	mov	r2, r0
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2104      	movs	r1, #4
 8009db4:	4618      	mov	r0, r3
 8009db6:	f002 fbb6 	bl	800c526 <SDMMC_GetResponse>
 8009dba:	4602      	mov	r2, r0
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2108      	movs	r1, #8
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f002 fbad 	bl	800c526 <SDMMC_GetResponse>
 8009dcc:	4602      	mov	r2, r0
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	210c      	movs	r1, #12
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f002 fba4 	bl	800c526 <SDMMC_GetResponse>
 8009dde:	4602      	mov	r2, r0
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dea:	2b03      	cmp	r3, #3
 8009dec:	d00d      	beq.n	8009e0a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f107 020e 	add.w	r2, r7, #14
 8009df6:	4611      	mov	r1, r2
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f002 fd82 	bl	800c902 <SDMMC_CmdSetRelAdd>
 8009dfe:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <SD_InitCard+0xae>
    {
      return errorstate;
 8009e06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e08:	e072      	b.n	8009ef0 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	d036      	beq.n	8009e80 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009e12:	89fb      	ldrh	r3, [r7, #14]
 8009e14:	461a      	mov	r2, r3
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e22:	041b      	lsls	r3, r3, #16
 8009e24:	4619      	mov	r1, r3
 8009e26:	4610      	mov	r0, r2
 8009e28:	f002 fd4c 	bl	800c8c4 <SDMMC_CmdSendCSD>
 8009e2c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d001      	beq.n	8009e38 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e36:	e05b      	b.n	8009ef0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2100      	movs	r1, #0
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f002 fb71 	bl	800c526 <SDMMC_GetResponse>
 8009e44:	4602      	mov	r2, r0
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2104      	movs	r1, #4
 8009e50:	4618      	mov	r0, r3
 8009e52:	f002 fb68 	bl	800c526 <SDMMC_GetResponse>
 8009e56:	4602      	mov	r2, r0
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2108      	movs	r1, #8
 8009e62:	4618      	mov	r0, r3
 8009e64:	f002 fb5f 	bl	800c526 <SDMMC_GetResponse>
 8009e68:	4602      	mov	r2, r0
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	210c      	movs	r1, #12
 8009e74:	4618      	mov	r0, r3
 8009e76:	f002 fb56 	bl	800c526 <SDMMC_GetResponse>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	2104      	movs	r1, #4
 8009e86:	4618      	mov	r0, r3
 8009e88:	f002 fb4d 	bl	800c526 <SDMMC_GetResponse>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	0d1a      	lsrs	r2, r3, #20
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009e94:	f107 0310 	add.w	r3, r7, #16
 8009e98:	4619      	mov	r1, r3
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	f7ff fcce 	bl	800983c <HAL_SD_GetCardCSD>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d002      	beq.n	8009eac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009ea6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009eaa:	e021      	b.n	8009ef0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6819      	ldr	r1, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009eb4:	041b      	lsls	r3, r3, #16
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	461c      	mov	r4, r3
 8009eba:	4615      	mov	r5, r2
 8009ebc:	4622      	mov	r2, r4
 8009ebe:	462b      	mov	r3, r5
 8009ec0:	4608      	mov	r0, r1
 8009ec2:	f002 fc3b 	bl	800c73c <SDMMC_CmdSelDesel>
 8009ec6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <SD_InitCard+0x176>
  {
    return errorstate;
 8009ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ed0:	e00e      	b.n	8009ef0 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681d      	ldr	r5, [r3, #0]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	466c      	mov	r4, sp
 8009eda:	f103 0210 	add.w	r2, r3, #16
 8009ede:	ca07      	ldmia	r2, {r0, r1, r2}
 8009ee0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009ee4:	3304      	adds	r3, #4
 8009ee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009ee8:	4628      	mov	r0, r5
 8009eea:	f002 fa9d 	bl	800c428 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3740      	adds	r7, #64	@ 0x40
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bdb0      	pop	{r4, r5, r7, pc}

08009ef8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009f04:	2300      	movs	r3, #0
 8009f06:	617b      	str	r3, [r7, #20]
 8009f08:	2300      	movs	r3, #0
 8009f0a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f002 fc36 	bl	800c782 <SDMMC_CmdGoIdleState>
 8009f16:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d001      	beq.n	8009f22 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	e072      	b.n	800a008 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4618      	mov	r0, r3
 8009f28:	f002 fc49 	bl	800c7be <SDMMC_CmdOperCond>
 8009f2c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d00d      	beq.n	8009f50 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f002 fc1f 	bl	800c782 <SDMMC_CmdGoIdleState>
 8009f44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d004      	beq.n	8009f56 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	e05b      	b.n	800a008 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d137      	bne.n	8009fce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2100      	movs	r1, #0
 8009f64:	4618      	mov	r0, r3
 8009f66:	f002 fc49 	bl	800c7fc <SDMMC_CmdAppCommand>
 8009f6a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d02d      	beq.n	8009fce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009f72:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009f76:	e047      	b.n	800a008 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f002 fc3c 	bl	800c7fc <SDMMC_CmdAppCommand>
 8009f84:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <SD_PowerON+0x98>
    {
      return errorstate;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	e03b      	b.n	800a008 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	491e      	ldr	r1, [pc, #120]	@ (800a010 <SD_PowerON+0x118>)
 8009f96:	4618      	mov	r0, r3
 8009f98:	f002 fc52 	bl	800c840 <SDMMC_CmdAppOperCommand>
 8009f9c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d002      	beq.n	8009faa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009fa4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8009fa8:	e02e      	b.n	800a008 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	2100      	movs	r1, #0
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	f002 fab8 	bl	800c526 <SDMMC_GetResponse>
 8009fb6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009fb8:	697b      	ldr	r3, [r7, #20]
 8009fba:	0fdb      	lsrs	r3, r3, #31
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d101      	bne.n	8009fc4 <SD_PowerON+0xcc>
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e000      	b.n	8009fc6 <SD_PowerON+0xce>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	613b      	str	r3, [r7, #16]

    count++;
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	d802      	bhi.n	8009fde <SD_PowerON+0xe6>
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d0cc      	beq.n	8009f78 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d902      	bls.n	8009fee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009fe8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009fec:	e00c      	b.n	800a008 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d003      	beq.n	800a000 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	645a      	str	r2, [r3, #68]	@ 0x44
 8009ffe:	e002      	b.n	800a006 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3718      	adds	r7, #24
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}
 800a010:	c1100000 	.word	0xc1100000

0800a014 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d102      	bne.n	800a02a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800a024:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a028:	e018      	b.n	800a05c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a032:	041b      	lsls	r3, r3, #16
 800a034:	4619      	mov	r1, r3
 800a036:	4610      	mov	r0, r2
 800a038:	f002 fc84 	bl	800c944 <SDMMC_CmdSendStatus>
 800a03c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <SD_SendStatus+0x34>
  {
    return errorstate;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	e009      	b.n	800a05c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2100      	movs	r1, #0
 800a04e:	4618      	mov	r0, r3
 800a050:	f002 fa69 	bl	800c526 <SDMMC_GetResponse>
 800a054:	4602      	mov	r2, r0
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800a05a:	2300      	movs	r3, #0
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
 800a06c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d101      	bne.n	800a078 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e025      	b.n	800a0c4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	2b00      	cmp	r3, #0
 800a082:	d106      	bne.n	800a092 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7f6 fd67 	bl	8000b60 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2202      	movs	r2, #2
 800a096:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681a      	ldr	r2, [r3, #0]
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3304      	adds	r3, #4
 800a0a2:	4619      	mov	r1, r3
 800a0a4:	4610      	mov	r0, r2
 800a0a6:	f002 f8bd 	bl	800c224 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6818      	ldr	r0, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	461a      	mov	r2, r3
 800a0b4:	6839      	ldr	r1, [r7, #0]
 800a0b6:	f002 f911 	bl	800c2dc <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a0de:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a0e0:	7dfb      	ldrb	r3, [r7, #23]
 800a0e2:	2b02      	cmp	r3, #2
 800a0e4:	d101      	bne.n	800a0ea <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	e021      	b.n	800a12e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a0ea:	7dfb      	ldrb	r3, [r7, #23]
 800a0ec:	2b01      	cmp	r3, #1
 800a0ee:	d002      	beq.n	800a0f6 <HAL_SDRAM_SendCommand+0x2a>
 800a0f0:	7dfb      	ldrb	r3, [r7, #23]
 800a0f2:	2b05      	cmp	r3, #5
 800a0f4:	d118      	bne.n	800a128 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2202      	movs	r2, #2
 800a0fa:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	68b9      	ldr	r1, [r7, #8]
 800a106:	4618      	mov	r0, r3
 800a108:	f002 f952 	bl	800c3b0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	2b02      	cmp	r3, #2
 800a112:	d104      	bne.n	800a11e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2205      	movs	r2, #5
 800a118:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a11c:	e006      	b.n	800a12c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a126:	e001      	b.n	800a12c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800a128:	2301      	movs	r3, #1
 800a12a:	e000      	b.n	800a12e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 800a12c:	2300      	movs	r3, #0
}
 800a12e:	4618      	mov	r0, r3
 800a130:	3718      	adds	r7, #24
 800a132:	46bd      	mov	sp, r7
 800a134:	bd80      	pop	{r7, pc}

0800a136 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a136:	b580      	push	{r7, lr}
 800a138:	b082      	sub	sp, #8
 800a13a:	af00      	add	r7, sp, #0
 800a13c:	6078      	str	r0, [r7, #4]
 800a13e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a146:	b2db      	uxtb	r3, r3
 800a148:	2b02      	cmp	r3, #2
 800a14a:	d101      	bne.n	800a150 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a14c:	2302      	movs	r3, #2
 800a14e:	e016      	b.n	800a17e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b01      	cmp	r3, #1
 800a15a:	d10f      	bne.n	800a17c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2202      	movs	r2, #2
 800a160:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	6839      	ldr	r1, [r7, #0]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f002 f944 	bl	800c3f8 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	e000      	b.n	800a17e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3708      	adds	r7, #8
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d101      	bne.n	800a198 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a194:	2301      	movs	r3, #1
 800a196:	e09d      	b.n	800a2d4 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d108      	bne.n	800a1b2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a1a8:	d009      	beq.n	800a1be <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	61da      	str	r2, [r3, #28]
 800a1b0:	e005      	b.n	800a1be <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d106      	bne.n	800a1de <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f7f8 f9eb 	bl	80025b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2202      	movs	r2, #2
 800a1e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	681a      	ldr	r2, [r3, #0]
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a1f4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a1fe:	d902      	bls.n	800a206 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a200:	2300      	movs	r3, #0
 800a202:	60fb      	str	r3, [r7, #12]
 800a204:	e002      	b.n	800a20c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a20a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800a214:	d007      	beq.n	800a226 <HAL_SPI_Init+0xa0>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a21e:	d002      	beq.n	800a226 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	689b      	ldr	r3, [r3, #8]
 800a232:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800a236:	431a      	orrs	r2, r3
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	691b      	ldr	r3, [r3, #16]
 800a23c:	f003 0302 	and.w	r3, r3, #2
 800a240:	431a      	orrs	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	695b      	ldr	r3, [r3, #20]
 800a246:	f003 0301 	and.w	r3, r3, #1
 800a24a:	431a      	orrs	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a254:	431a      	orrs	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	69db      	ldr	r3, [r3, #28]
 800a25a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a25e:	431a      	orrs	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6a1b      	ldr	r3, [r3, #32]
 800a264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a268:	ea42 0103 	orr.w	r1, r2, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a270:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	0c1b      	lsrs	r3, r3, #16
 800a282:	f003 0204 	and.w	r2, r3, #4
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a28a:	f003 0310 	and.w	r3, r3, #16
 800a28e:	431a      	orrs	r2, r3
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a294:	f003 0308 	and.w	r3, r3, #8
 800a298:	431a      	orrs	r2, r3
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68db      	ldr	r3, [r3, #12]
 800a29e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800a2a2:	ea42 0103 	orr.w	r1, r2, r3
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	430a      	orrs	r2, r1
 800a2b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	69da      	ldr	r2, [r3, #28]
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a2c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2200      	movs	r2, #0
 800a2c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}

0800a2dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d101      	bne.n	800a2ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a2ea:	2301      	movs	r3, #1
 800a2ec:	e049      	b.n	800a382 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d106      	bne.n	800a308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a302:	6878      	ldr	r0, [r7, #4]
 800a304:	f7f9 ff84 	bl	8004210 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2202      	movs	r2, #2
 800a30c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3304      	adds	r3, #4
 800a318:	4619      	mov	r1, r3
 800a31a:	4610      	mov	r0, r2
 800a31c:	f000 fac0 	bl	800a8a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2201      	movs	r2, #1
 800a324:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2201      	movs	r2, #1
 800a32c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2201      	movs	r2, #1
 800a33c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2201      	movs	r2, #1
 800a34c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2201      	movs	r2, #1
 800a354:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2201      	movs	r2, #1
 800a36c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2201      	movs	r2, #1
 800a374:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	2201      	movs	r2, #1
 800a37c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3708      	adds	r7, #8
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
	...

0800a38c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d001      	beq.n	800a3a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a3a0:	2301      	movs	r3, #1
 800a3a2:	e054      	b.n	800a44e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	2202      	movs	r2, #2
 800a3a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	68da      	ldr	r2, [r3, #12]
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f042 0201 	orr.w	r2, r2, #1
 800a3ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a26      	ldr	r2, [pc, #152]	@ (800a45c <HAL_TIM_Base_Start_IT+0xd0>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d022      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x80>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3ce:	d01d      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x80>
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a22      	ldr	r2, [pc, #136]	@ (800a460 <HAL_TIM_Base_Start_IT+0xd4>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d018      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x80>
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a21      	ldr	r2, [pc, #132]	@ (800a464 <HAL_TIM_Base_Start_IT+0xd8>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d013      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x80>
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a1f      	ldr	r2, [pc, #124]	@ (800a468 <HAL_TIM_Base_Start_IT+0xdc>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d00e      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x80>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a1e      	ldr	r2, [pc, #120]	@ (800a46c <HAL_TIM_Base_Start_IT+0xe0>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d009      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x80>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a1c      	ldr	r2, [pc, #112]	@ (800a470 <HAL_TIM_Base_Start_IT+0xe4>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d004      	beq.n	800a40c <HAL_TIM_Base_Start_IT+0x80>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a1b      	ldr	r2, [pc, #108]	@ (800a474 <HAL_TIM_Base_Start_IT+0xe8>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d115      	bne.n	800a438 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	689a      	ldr	r2, [r3, #8]
 800a412:	4b19      	ldr	r3, [pc, #100]	@ (800a478 <HAL_TIM_Base_Start_IT+0xec>)
 800a414:	4013      	ands	r3, r2
 800a416:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2b06      	cmp	r3, #6
 800a41c:	d015      	beq.n	800a44a <HAL_TIM_Base_Start_IT+0xbe>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a424:	d011      	beq.n	800a44a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f042 0201 	orr.w	r2, r2, #1
 800a434:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a436:	e008      	b.n	800a44a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f042 0201 	orr.w	r2, r2, #1
 800a446:	601a      	str	r2, [r3, #0]
 800a448:	e000      	b.n	800a44c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a44a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	40010000 	.word	0x40010000
 800a460:	40000400 	.word	0x40000400
 800a464:	40000800 	.word	0x40000800
 800a468:	40000c00 	.word	0x40000c00
 800a46c:	40010400 	.word	0x40010400
 800a470:	40014000 	.word	0x40014000
 800a474:	40001800 	.word	0x40001800
 800a478:	00010007 	.word	0x00010007

0800a47c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	f003 0302 	and.w	r3, r3, #2
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d122      	bne.n	800a4d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f003 0302 	and.w	r3, r3, #2
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	d11b      	bne.n	800a4d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f06f 0202 	mvn.w	r2, #2
 800a4a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	f003 0303 	and.w	r3, r3, #3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d003      	beq.n	800a4c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4be:	6878      	ldr	r0, [r7, #4]
 800a4c0:	f000 f9d0 	bl	800a864 <HAL_TIM_IC_CaptureCallback>
 800a4c4:	e005      	b.n	800a4d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f9c2 	bl	800a850 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 f9d3 	bl	800a878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	f003 0304 	and.w	r3, r3, #4
 800a4e2:	2b04      	cmp	r3, #4
 800a4e4:	d122      	bne.n	800a52c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f003 0304 	and.w	r3, r3, #4
 800a4f0:	2b04      	cmp	r3, #4
 800a4f2:	d11b      	bne.n	800a52c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	f06f 0204 	mvn.w	r2, #4
 800a4fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2202      	movs	r2, #2
 800a502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d003      	beq.n	800a51a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 f9a6 	bl	800a864 <HAL_TIM_IC_CaptureCallback>
 800a518:	e005      	b.n	800a526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 f998 	bl	800a850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 f9a9 	bl	800a878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	691b      	ldr	r3, [r3, #16]
 800a532:	f003 0308 	and.w	r3, r3, #8
 800a536:	2b08      	cmp	r3, #8
 800a538:	d122      	bne.n	800a580 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	f003 0308 	and.w	r3, r3, #8
 800a544:	2b08      	cmp	r3, #8
 800a546:	d11b      	bne.n	800a580 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f06f 0208 	mvn.w	r2, #8
 800a550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	2204      	movs	r2, #4
 800a556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	69db      	ldr	r3, [r3, #28]
 800a55e:	f003 0303 	and.w	r3, r3, #3
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f000 f97c 	bl	800a864 <HAL_TIM_IC_CaptureCallback>
 800a56c:	e005      	b.n	800a57a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a56e:	6878      	ldr	r0, [r7, #4]
 800a570:	f000 f96e 	bl	800a850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f97f 	bl	800a878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	f003 0310 	and.w	r3, r3, #16
 800a58a:	2b10      	cmp	r3, #16
 800a58c:	d122      	bne.n	800a5d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	f003 0310 	and.w	r3, r3, #16
 800a598:	2b10      	cmp	r3, #16
 800a59a:	d11b      	bne.n	800a5d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f06f 0210 	mvn.w	r2, #16
 800a5a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2208      	movs	r2, #8
 800a5aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	69db      	ldr	r3, [r3, #28]
 800a5b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d003      	beq.n	800a5c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f000 f952 	bl	800a864 <HAL_TIM_IC_CaptureCallback>
 800a5c0:	e005      	b.n	800a5ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f944 	bl	800a850 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f000 f955 	bl	800a878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	691b      	ldr	r3, [r3, #16]
 800a5da:	f003 0301 	and.w	r3, r3, #1
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d10e      	bne.n	800a600 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	68db      	ldr	r3, [r3, #12]
 800a5e8:	f003 0301 	and.w	r3, r3, #1
 800a5ec:	2b01      	cmp	r3, #1
 800a5ee:	d107      	bne.n	800a600 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f06f 0201 	mvn.w	r2, #1
 800a5f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7f7 fdb0 	bl	8002160 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	691b      	ldr	r3, [r3, #16]
 800a606:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a60a:	2b80      	cmp	r3, #128	@ 0x80
 800a60c:	d10e      	bne.n	800a62c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a618:	2b80      	cmp	r3, #128	@ 0x80
 800a61a:	d107      	bne.n	800a62c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 fb0c 	bl	800ac44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a63a:	d10e      	bne.n	800a65a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68db      	ldr	r3, [r3, #12]
 800a642:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a646:	2b80      	cmp	r3, #128	@ 0x80
 800a648:	d107      	bne.n	800a65a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f000 faff 	bl	800ac58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	691b      	ldr	r3, [r3, #16]
 800a660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a664:	2b40      	cmp	r3, #64	@ 0x40
 800a666:	d10e      	bne.n	800a686 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a672:	2b40      	cmp	r3, #64	@ 0x40
 800a674:	d107      	bne.n	800a686 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a67e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 f903 	bl	800a88c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	f003 0320 	and.w	r3, r3, #32
 800a690:	2b20      	cmp	r3, #32
 800a692:	d10e      	bne.n	800a6b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	f003 0320 	and.w	r3, r3, #32
 800a69e:	2b20      	cmp	r3, #32
 800a6a0:	d107      	bne.n	800a6b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	f06f 0220 	mvn.w	r2, #32
 800a6aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fabf 	bl	800ac30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6b2:	bf00      	nop
 800a6b4:	3708      	adds	r7, #8
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
	...

0800a6bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d101      	bne.n	800a6d8 <HAL_TIM_ConfigClockSource+0x1c>
 800a6d4:	2302      	movs	r3, #2
 800a6d6:	e0b4      	b.n	800a842 <HAL_TIM_ConfigClockSource+0x186>
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a6f0:	68ba      	ldr	r2, [r7, #8]
 800a6f2:	4b56      	ldr	r3, [pc, #344]	@ (800a84c <HAL_TIM_ConfigClockSource+0x190>)
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a6fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a710:	d03e      	beq.n	800a790 <HAL_TIM_ConfigClockSource+0xd4>
 800a712:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a716:	f200 8087 	bhi.w	800a828 <HAL_TIM_ConfigClockSource+0x16c>
 800a71a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a71e:	f000 8086 	beq.w	800a82e <HAL_TIM_ConfigClockSource+0x172>
 800a722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a726:	d87f      	bhi.n	800a828 <HAL_TIM_ConfigClockSource+0x16c>
 800a728:	2b70      	cmp	r3, #112	@ 0x70
 800a72a:	d01a      	beq.n	800a762 <HAL_TIM_ConfigClockSource+0xa6>
 800a72c:	2b70      	cmp	r3, #112	@ 0x70
 800a72e:	d87b      	bhi.n	800a828 <HAL_TIM_ConfigClockSource+0x16c>
 800a730:	2b60      	cmp	r3, #96	@ 0x60
 800a732:	d050      	beq.n	800a7d6 <HAL_TIM_ConfigClockSource+0x11a>
 800a734:	2b60      	cmp	r3, #96	@ 0x60
 800a736:	d877      	bhi.n	800a828 <HAL_TIM_ConfigClockSource+0x16c>
 800a738:	2b50      	cmp	r3, #80	@ 0x50
 800a73a:	d03c      	beq.n	800a7b6 <HAL_TIM_ConfigClockSource+0xfa>
 800a73c:	2b50      	cmp	r3, #80	@ 0x50
 800a73e:	d873      	bhi.n	800a828 <HAL_TIM_ConfigClockSource+0x16c>
 800a740:	2b40      	cmp	r3, #64	@ 0x40
 800a742:	d058      	beq.n	800a7f6 <HAL_TIM_ConfigClockSource+0x13a>
 800a744:	2b40      	cmp	r3, #64	@ 0x40
 800a746:	d86f      	bhi.n	800a828 <HAL_TIM_ConfigClockSource+0x16c>
 800a748:	2b30      	cmp	r3, #48	@ 0x30
 800a74a:	d064      	beq.n	800a816 <HAL_TIM_ConfigClockSource+0x15a>
 800a74c:	2b30      	cmp	r3, #48	@ 0x30
 800a74e:	d86b      	bhi.n	800a828 <HAL_TIM_ConfigClockSource+0x16c>
 800a750:	2b20      	cmp	r3, #32
 800a752:	d060      	beq.n	800a816 <HAL_TIM_ConfigClockSource+0x15a>
 800a754:	2b20      	cmp	r3, #32
 800a756:	d867      	bhi.n	800a828 <HAL_TIM_ConfigClockSource+0x16c>
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d05c      	beq.n	800a816 <HAL_TIM_ConfigClockSource+0x15a>
 800a75c:	2b10      	cmp	r3, #16
 800a75e:	d05a      	beq.n	800a816 <HAL_TIM_ConfigClockSource+0x15a>
 800a760:	e062      	b.n	800a828 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a772:	f000 f9af 	bl	800aad4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a784:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	68ba      	ldr	r2, [r7, #8]
 800a78c:	609a      	str	r2, [r3, #8]
      break;
 800a78e:	e04f      	b.n	800a830 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a7a0:	f000 f998 	bl	800aad4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	689a      	ldr	r2, [r3, #8]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a7b2:	609a      	str	r2, [r3, #8]
      break;
 800a7b4:	e03c      	b.n	800a830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f000 f90c 	bl	800a9e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	2150      	movs	r1, #80	@ 0x50
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f000 f965 	bl	800aa9e <TIM_ITRx_SetConfig>
      break;
 800a7d4:	e02c      	b.n	800a830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	f000 f92b 	bl	800aa3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2160      	movs	r1, #96	@ 0x60
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 f955 	bl	800aa9e <TIM_ITRx_SetConfig>
      break;
 800a7f4:	e01c      	b.n	800a830 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a802:	461a      	mov	r2, r3
 800a804:	f000 f8ec 	bl	800a9e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	2140      	movs	r1, #64	@ 0x40
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 f945 	bl	800aa9e <TIM_ITRx_SetConfig>
      break;
 800a814:	e00c      	b.n	800a830 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	4619      	mov	r1, r3
 800a820:	4610      	mov	r0, r2
 800a822:	f000 f93c 	bl	800aa9e <TIM_ITRx_SetConfig>
      break;
 800a826:	e003      	b.n	800a830 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a828:	2301      	movs	r3, #1
 800a82a:	73fb      	strb	r3, [r7, #15]
      break;
 800a82c:	e000      	b.n	800a830 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a82e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2201      	movs	r2, #1
 800a834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a840:	7bfb      	ldrb	r3, [r7, #15]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
 800a84a:	bf00      	nop
 800a84c:	fffeff88 	.word	0xfffeff88

0800a850 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a864:	b480      	push	{r7}
 800a866:	b083      	sub	sp, #12
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a86c:	bf00      	nop
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a894:	bf00      	nop
 800a896:	370c      	adds	r7, #12
 800a898:	46bd      	mov	sp, r7
 800a89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89e:	4770      	bx	lr

0800a8a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	4a40      	ldr	r2, [pc, #256]	@ (800a9b4 <TIM_Base_SetConfig+0x114>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d013      	beq.n	800a8e0 <TIM_Base_SetConfig+0x40>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8be:	d00f      	beq.n	800a8e0 <TIM_Base_SetConfig+0x40>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4a3d      	ldr	r2, [pc, #244]	@ (800a9b8 <TIM_Base_SetConfig+0x118>)
 800a8c4:	4293      	cmp	r3, r2
 800a8c6:	d00b      	beq.n	800a8e0 <TIM_Base_SetConfig+0x40>
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	4a3c      	ldr	r2, [pc, #240]	@ (800a9bc <TIM_Base_SetConfig+0x11c>)
 800a8cc:	4293      	cmp	r3, r2
 800a8ce:	d007      	beq.n	800a8e0 <TIM_Base_SetConfig+0x40>
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	4a3b      	ldr	r2, [pc, #236]	@ (800a9c0 <TIM_Base_SetConfig+0x120>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d003      	beq.n	800a8e0 <TIM_Base_SetConfig+0x40>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	4a3a      	ldr	r2, [pc, #232]	@ (800a9c4 <TIM_Base_SetConfig+0x124>)
 800a8dc:	4293      	cmp	r3, r2
 800a8de:	d108      	bne.n	800a8f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4a2f      	ldr	r2, [pc, #188]	@ (800a9b4 <TIM_Base_SetConfig+0x114>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d02b      	beq.n	800a952 <TIM_Base_SetConfig+0xb2>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a900:	d027      	beq.n	800a952 <TIM_Base_SetConfig+0xb2>
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	4a2c      	ldr	r2, [pc, #176]	@ (800a9b8 <TIM_Base_SetConfig+0x118>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d023      	beq.n	800a952 <TIM_Base_SetConfig+0xb2>
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	4a2b      	ldr	r2, [pc, #172]	@ (800a9bc <TIM_Base_SetConfig+0x11c>)
 800a90e:	4293      	cmp	r3, r2
 800a910:	d01f      	beq.n	800a952 <TIM_Base_SetConfig+0xb2>
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	4a2a      	ldr	r2, [pc, #168]	@ (800a9c0 <TIM_Base_SetConfig+0x120>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d01b      	beq.n	800a952 <TIM_Base_SetConfig+0xb2>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	4a29      	ldr	r2, [pc, #164]	@ (800a9c4 <TIM_Base_SetConfig+0x124>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d017      	beq.n	800a952 <TIM_Base_SetConfig+0xb2>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	4a28      	ldr	r2, [pc, #160]	@ (800a9c8 <TIM_Base_SetConfig+0x128>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d013      	beq.n	800a952 <TIM_Base_SetConfig+0xb2>
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	4a27      	ldr	r2, [pc, #156]	@ (800a9cc <TIM_Base_SetConfig+0x12c>)
 800a92e:	4293      	cmp	r3, r2
 800a930:	d00f      	beq.n	800a952 <TIM_Base_SetConfig+0xb2>
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	4a26      	ldr	r2, [pc, #152]	@ (800a9d0 <TIM_Base_SetConfig+0x130>)
 800a936:	4293      	cmp	r3, r2
 800a938:	d00b      	beq.n	800a952 <TIM_Base_SetConfig+0xb2>
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a25      	ldr	r2, [pc, #148]	@ (800a9d4 <TIM_Base_SetConfig+0x134>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d007      	beq.n	800a952 <TIM_Base_SetConfig+0xb2>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a24      	ldr	r2, [pc, #144]	@ (800a9d8 <TIM_Base_SetConfig+0x138>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d003      	beq.n	800a952 <TIM_Base_SetConfig+0xb2>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a23      	ldr	r2, [pc, #140]	@ (800a9dc <TIM_Base_SetConfig+0x13c>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d108      	bne.n	800a964 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	68fa      	ldr	r2, [r7, #12]
 800a960:	4313      	orrs	r3, r2
 800a962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	695b      	ldr	r3, [r3, #20]
 800a96e:	4313      	orrs	r3, r2
 800a970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	689a      	ldr	r2, [r3, #8]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	4a0a      	ldr	r2, [pc, #40]	@ (800a9b4 <TIM_Base_SetConfig+0x114>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d003      	beq.n	800a998 <TIM_Base_SetConfig+0xf8>
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4a0c      	ldr	r2, [pc, #48]	@ (800a9c4 <TIM_Base_SetConfig+0x124>)
 800a994:	4293      	cmp	r3, r2
 800a996:	d103      	bne.n	800a9a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	691a      	ldr	r2, [r3, #16]
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	615a      	str	r2, [r3, #20]
}
 800a9a6:	bf00      	nop
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	40010000 	.word	0x40010000
 800a9b8:	40000400 	.word	0x40000400
 800a9bc:	40000800 	.word	0x40000800
 800a9c0:	40000c00 	.word	0x40000c00
 800a9c4:	40010400 	.word	0x40010400
 800a9c8:	40014000 	.word	0x40014000
 800a9cc:	40014400 	.word	0x40014400
 800a9d0:	40014800 	.word	0x40014800
 800a9d4:	40001800 	.word	0x40001800
 800a9d8:	40001c00 	.word	0x40001c00
 800a9dc:	40002000 	.word	0x40002000

0800a9e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b087      	sub	sp, #28
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	6a1b      	ldr	r3, [r3, #32]
 800a9f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6a1b      	ldr	r3, [r3, #32]
 800a9f6:	f023 0201 	bic.w	r2, r3, #1
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa04:	693b      	ldr	r3, [r7, #16]
 800aa06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800aa0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	011b      	lsls	r3, r3, #4
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	4313      	orrs	r3, r2
 800aa14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f023 030a 	bic.w	r3, r3, #10
 800aa1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	4313      	orrs	r3, r2
 800aa24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	693a      	ldr	r2, [r7, #16]
 800aa2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	697a      	ldr	r2, [r7, #20]
 800aa30:	621a      	str	r2, [r3, #32]
}
 800aa32:	bf00      	nop
 800aa34:	371c      	adds	r7, #28
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr

0800aa3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa3e:	b480      	push	{r7}
 800aa40:	b087      	sub	sp, #28
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	60f8      	str	r0, [r7, #12]
 800aa46:	60b9      	str	r1, [r7, #8]
 800aa48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	f023 0210 	bic.w	r2, r3, #16
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6a1b      	ldr	r3, [r3, #32]
 800aa60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800aa68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	031b      	lsls	r3, r3, #12
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	4313      	orrs	r3, r2
 800aa72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800aa7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	011b      	lsls	r3, r3, #4
 800aa80:	693a      	ldr	r2, [r7, #16]
 800aa82:	4313      	orrs	r3, r2
 800aa84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	697a      	ldr	r2, [r7, #20]
 800aa8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	693a      	ldr	r2, [r7, #16]
 800aa90:	621a      	str	r2, [r3, #32]
}
 800aa92:	bf00      	nop
 800aa94:	371c      	adds	r7, #28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr

0800aa9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	b085      	sub	sp, #20
 800aaa2:	af00      	add	r7, sp, #0
 800aaa4:	6078      	str	r0, [r7, #4]
 800aaa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aab6:	683a      	ldr	r2, [r7, #0]
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	f043 0307 	orr.w	r3, r3, #7
 800aac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	68fa      	ldr	r2, [r7, #12]
 800aac6:	609a      	str	r2, [r3, #8]
}
 800aac8:	bf00      	nop
 800aaca:	3714      	adds	r7, #20
 800aacc:	46bd      	mov	sp, r7
 800aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad2:	4770      	bx	lr

0800aad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b087      	sub	sp, #28
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60f8      	str	r0, [r7, #12]
 800aadc:	60b9      	str	r1, [r7, #8]
 800aade:	607a      	str	r2, [r7, #4]
 800aae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	689b      	ldr	r3, [r3, #8]
 800aae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800aaee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	021a      	lsls	r2, r3, #8
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	431a      	orrs	r2, r3
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	697a      	ldr	r2, [r7, #20]
 800ab06:	609a      	str	r2, [r3, #8]
}
 800ab08:	bf00      	nop
 800ab0a:	371c      	adds	r7, #28
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab24:	2b01      	cmp	r3, #1
 800ab26:	d101      	bne.n	800ab2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab28:	2302      	movs	r3, #2
 800ab2a:	e06d      	b.n	800ac08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	2202      	movs	r2, #2
 800ab38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	689b      	ldr	r3, [r3, #8]
 800ab4a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a30      	ldr	r2, [pc, #192]	@ (800ac14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d004      	beq.n	800ab60 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	4a2f      	ldr	r2, [pc, #188]	@ (800ac18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d108      	bne.n	800ab72 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ab66:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68fa      	ldr	r2, [r7, #12]
 800ab80:	4313      	orrs	r3, r2
 800ab82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	4a20      	ldr	r2, [pc, #128]	@ (800ac14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ab92:	4293      	cmp	r3, r2
 800ab94:	d022      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab9e:	d01d      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	4a1d      	ldr	r2, [pc, #116]	@ (800ac1c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d018      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4a1c      	ldr	r2, [pc, #112]	@ (800ac20 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800abb0:	4293      	cmp	r3, r2
 800abb2:	d013      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a1a      	ldr	r2, [pc, #104]	@ (800ac24 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d00e      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	4a15      	ldr	r2, [pc, #84]	@ (800ac18 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d009      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4a16      	ldr	r2, [pc, #88]	@ (800ac28 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800abce:	4293      	cmp	r3, r2
 800abd0:	d004      	beq.n	800abdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	4a15      	ldr	r2, [pc, #84]	@ (800ac2c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800abd8:	4293      	cmp	r3, r2
 800abda:	d10c      	bne.n	800abf6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abe2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	689b      	ldr	r3, [r3, #8]
 800abe8:	68ba      	ldr	r2, [r7, #8]
 800abea:	4313      	orrs	r3, r2
 800abec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2201      	movs	r2, #1
 800abfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	40010000 	.word	0x40010000
 800ac18:	40010400 	.word	0x40010400
 800ac1c:	40000400 	.word	0x40000400
 800ac20:	40000800 	.word	0x40000800
 800ac24:	40000c00 	.word	0x40000c00
 800ac28:	40014000 	.word	0x40014000
 800ac2c:	40001800 	.word	0x40001800

0800ac30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac30:	b480      	push	{r7}
 800ac32:	b083      	sub	sp, #12
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac38:	bf00      	nop
 800ac3a:	370c      	adds	r7, #12
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac42:	4770      	bx	lr

0800ac44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac44:	b480      	push	{r7}
 800ac46:	b083      	sub	sp, #12
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac4c:	bf00      	nop
 800ac4e:	370c      	adds	r7, #12
 800ac50:	46bd      	mov	sp, r7
 800ac52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac56:	4770      	bx	lr

0800ac58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ac60:	bf00      	nop
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d101      	bne.n	800ac7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e040      	b.n	800ad00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d106      	bne.n	800ac94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f7f9 fbe0 	bl	8004454 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2224      	movs	r2, #36	@ 0x24
 800ac98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	681a      	ldr	r2, [r3, #0]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f022 0201 	bic.w	r2, r2, #1
 800aca8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fbe6 	bl	800b47c <UART_SetConfig>
 800acb0:	4603      	mov	r3, r0
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d101      	bne.n	800acba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800acb6:	2301      	movs	r3, #1
 800acb8:	e022      	b.n	800ad00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d002      	beq.n	800acc8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fe3e 	bl	800b944 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	685a      	ldr	r2, [r3, #4]
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800acd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	689a      	ldr	r2, [r3, #8]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ace6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0201 	orr.w	r2, r2, #1
 800acf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 fec5 	bl	800ba88 <UART_CheckIdleState>
 800acfe:	4603      	mov	r3, r0
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3708      	adds	r7, #8
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b08a      	sub	sp, #40	@ 0x28
 800ad0c:	af02      	add	r7, sp, #8
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	60b9      	str	r1, [r7, #8]
 800ad12:	603b      	str	r3, [r7, #0]
 800ad14:	4613      	mov	r3, r2
 800ad16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ad1c:	2b20      	cmp	r3, #32
 800ad1e:	d171      	bne.n	800ae04 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d002      	beq.n	800ad2c <HAL_UART_Transmit+0x24>
 800ad26:	88fb      	ldrh	r3, [r7, #6]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d101      	bne.n	800ad30 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	e06a      	b.n	800ae06 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2200      	movs	r2, #0
 800ad34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2221      	movs	r2, #33	@ 0x21
 800ad3c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ad3e:	f7f9 fceb 	bl	8004718 <HAL_GetTick>
 800ad42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	88fa      	ldrh	r2, [r7, #6]
 800ad48:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	88fa      	ldrh	r2, [r7, #6]
 800ad50:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad5c:	d108      	bne.n	800ad70 <HAL_UART_Transmit+0x68>
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d104      	bne.n	800ad70 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	61bb      	str	r3, [r7, #24]
 800ad6e:	e003      	b.n	800ad78 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad74:	2300      	movs	r3, #0
 800ad76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ad78:	e02c      	b.n	800add4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	9300      	str	r3, [sp, #0]
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	2200      	movs	r2, #0
 800ad82:	2180      	movs	r1, #128	@ 0x80
 800ad84:	68f8      	ldr	r0, [r7, #12]
 800ad86:	f000 feb6 	bl	800baf6 <UART_WaitOnFlagUntilTimeout>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800ad90:	2303      	movs	r3, #3
 800ad92:	e038      	b.n	800ae06 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d10b      	bne.n	800adb2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	881b      	ldrh	r3, [r3, #0]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ada8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	3302      	adds	r3, #2
 800adae:	61bb      	str	r3, [r7, #24]
 800adb0:	e007      	b.n	800adc2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	781a      	ldrb	r2, [r3, #0]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	3301      	adds	r3, #1
 800adc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800adc8:	b29b      	uxth	r3, r3
 800adca:	3b01      	subs	r3, #1
 800adcc:	b29a      	uxth	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800adda:	b29b      	uxth	r3, r3
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1cc      	bne.n	800ad7a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	9300      	str	r3, [sp, #0]
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	2200      	movs	r2, #0
 800ade8:	2140      	movs	r1, #64	@ 0x40
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 fe83 	bl	800baf6 <UART_WaitOnFlagUntilTimeout>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d001      	beq.n	800adfa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800adf6:	2303      	movs	r3, #3
 800adf8:	e005      	b.n	800ae06 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	2220      	movs	r2, #32
 800adfe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ae00:	2300      	movs	r3, #0
 800ae02:	e000      	b.n	800ae06 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800ae04:	2302      	movs	r3, #2
  }
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3720      	adds	r7, #32
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b08a      	sub	sp, #40	@ 0x28
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	60f8      	str	r0, [r7, #12]
 800ae16:	60b9      	str	r1, [r7, #8]
 800ae18:	4613      	mov	r3, r2
 800ae1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae22:	2b20      	cmp	r3, #32
 800ae24:	d132      	bne.n	800ae8c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae26:	68bb      	ldr	r3, [r7, #8]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d002      	beq.n	800ae32 <HAL_UART_Receive_IT+0x24>
 800ae2c:	88fb      	ldrh	r3, [r7, #6]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d101      	bne.n	800ae36 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e02b      	b.n	800ae8e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d018      	beq.n	800ae7c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae50:	697b      	ldr	r3, [r7, #20]
 800ae52:	e853 3f00 	ldrex	r3, [r3]
 800ae56:	613b      	str	r3, [r7, #16]
   return(result);
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ae5e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	461a      	mov	r2, r3
 800ae66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae68:	623b      	str	r3, [r7, #32]
 800ae6a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae6c:	69f9      	ldr	r1, [r7, #28]
 800ae6e:	6a3a      	ldr	r2, [r7, #32]
 800ae70:	e841 2300 	strex	r3, r2, [r1]
 800ae74:	61bb      	str	r3, [r7, #24]
   return(result);
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d1e6      	bne.n	800ae4a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ae7c:	88fb      	ldrh	r3, [r7, #6]
 800ae7e:	461a      	mov	r2, r3
 800ae80:	68b9      	ldr	r1, [r7, #8]
 800ae82:	68f8      	ldr	r0, [r7, #12]
 800ae84:	f000 fefe 	bl	800bc84 <UART_Start_Receive_IT>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	e000      	b.n	800ae8e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800ae8c:	2302      	movs	r3, #2
  }
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3728      	adds	r7, #40	@ 0x28
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}
	...

0800ae98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b0ba      	sub	sp, #232	@ 0xe8
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	69db      	ldr	r3, [r3, #28]
 800aea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	689b      	ldr	r3, [r3, #8]
 800aeba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aebe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800aec2:	f640 030f 	movw	r3, #2063	@ 0x80f
 800aec6:	4013      	ands	r3, r2
 800aec8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800aecc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d115      	bne.n	800af00 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aed8:	f003 0320 	and.w	r3, r3, #32
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00f      	beq.n	800af00 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aee4:	f003 0320 	and.w	r3, r3, #32
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d009      	beq.n	800af00 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 8297 	beq.w	800b424 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	4798      	blx	r3
      }
      return;
 800aefe:	e291      	b.n	800b424 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800af00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800af04:	2b00      	cmp	r3, #0
 800af06:	f000 8117 	beq.w	800b138 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800af0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d106      	bne.n	800af24 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800af16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800af1a:	4b85      	ldr	r3, [pc, #532]	@ (800b130 <HAL_UART_IRQHandler+0x298>)
 800af1c:	4013      	ands	r3, r2
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f000 810a 	beq.w	800b138 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af28:	f003 0301 	and.w	r3, r3, #1
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d011      	beq.n	800af54 <HAL_UART_IRQHandler+0xbc>
 800af30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800af34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00b      	beq.n	800af54 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	2201      	movs	r2, #1
 800af42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af4a:	f043 0201 	orr.w	r2, r3, #1
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af58:	f003 0302 	and.w	r3, r3, #2
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d011      	beq.n	800af84 <HAL_UART_IRQHandler+0xec>
 800af60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af64:	f003 0301 	and.w	r3, r3, #1
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d00b      	beq.n	800af84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2202      	movs	r2, #2
 800af72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800af7a:	f043 0204 	orr.w	r2, r3, #4
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800af88:	f003 0304 	and.w	r3, r3, #4
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d011      	beq.n	800afb4 <HAL_UART_IRQHandler+0x11c>
 800af90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800af94:	f003 0301 	and.w	r3, r3, #1
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00b      	beq.n	800afb4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2204      	movs	r2, #4
 800afa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afaa:	f043 0202 	orr.w	r2, r3, #2
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800afb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800afb8:	f003 0308 	and.w	r3, r3, #8
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d017      	beq.n	800aff0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800afc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800afc4:	f003 0320 	and.w	r3, r3, #32
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d105      	bne.n	800afd8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800afcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800afd0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00b      	beq.n	800aff0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2208      	movs	r2, #8
 800afde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800afe6:	f043 0208 	orr.w	r2, r3, #8
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d012      	beq.n	800b022 <HAL_UART_IRQHandler+0x18a>
 800affc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b000:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b004:	2b00      	cmp	r3, #0
 800b006:	d00c      	beq.n	800b022 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b010:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b018:	f043 0220 	orr.w	r2, r3, #32
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b028:	2b00      	cmp	r3, #0
 800b02a:	f000 81fd 	beq.w	800b428 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b02e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b032:	f003 0320 	and.w	r3, r3, #32
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00d      	beq.n	800b056 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b03a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b03e:	f003 0320 	and.w	r3, r3, #32
 800b042:	2b00      	cmp	r3, #0
 800b044:	d007      	beq.n	800b056 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b05c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	689b      	ldr	r3, [r3, #8]
 800b066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b06a:	2b40      	cmp	r3, #64	@ 0x40
 800b06c:	d005      	beq.n	800b07a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b06e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b072:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b076:	2b00      	cmp	r3, #0
 800b078:	d04f      	beq.n	800b11a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 fec8 	bl	800be10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b08a:	2b40      	cmp	r3, #64	@ 0x40
 800b08c:	d141      	bne.n	800b112 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	3308      	adds	r3, #8
 800b094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b098:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b09c:	e853 3f00 	ldrex	r3, [r3]
 800b0a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b0a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b0a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b0ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3308      	adds	r3, #8
 800b0b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b0ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b0be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b0c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b0ca:	e841 2300 	strex	r3, r2, [r1]
 800b0ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b0d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1d9      	bne.n	800b08e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d013      	beq.n	800b10a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0e6:	4a13      	ldr	r2, [pc, #76]	@ (800b134 <HAL_UART_IRQHandler+0x29c>)
 800b0e8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0ee:	4618      	mov	r0, r3
 800b0f0:	f7fa f974 	bl	80053dc <HAL_DMA_Abort_IT>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d017      	beq.n	800b12a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b104:	4610      	mov	r0, r2
 800b106:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b108:	e00f      	b.n	800b12a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f9a0 	bl	800b450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b110:	e00b      	b.n	800b12a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f99c 	bl	800b450 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b118:	e007      	b.n	800b12a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f998 	bl	800b450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2200      	movs	r2, #0
 800b124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 800b128:	e17e      	b.n	800b428 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b12a:	bf00      	nop
    return;
 800b12c:	e17c      	b.n	800b428 <HAL_UART_IRQHandler+0x590>
 800b12e:	bf00      	nop
 800b130:	04000120 	.word	0x04000120
 800b134:	0800bed9 	.word	0x0800bed9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	f040 814c 	bne.w	800b3da <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b146:	f003 0310 	and.w	r3, r3, #16
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f000 8145 	beq.w	800b3da <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b154:	f003 0310 	and.w	r3, r3, #16
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f000 813e 	beq.w	800b3da <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	2210      	movs	r2, #16
 800b164:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b170:	2b40      	cmp	r3, #64	@ 0x40
 800b172:	f040 80b6 	bne.w	800b2e2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	685b      	ldr	r3, [r3, #4]
 800b17e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b182:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b186:	2b00      	cmp	r3, #0
 800b188:	f000 8150 	beq.w	800b42c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800b192:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b196:	429a      	cmp	r2, r3
 800b198:	f080 8148 	bcs.w	800b42c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b1a2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b1aa:	69db      	ldr	r3, [r3, #28]
 800b1ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1b0:	f000 8086 	beq.w	800b2c0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b1c0:	e853 3f00 	ldrex	r3, [r3]
 800b1c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b1c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b1cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	461a      	mov	r2, r3
 800b1da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b1de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b1e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b1ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b1ee:	e841 2300 	strex	r3, r2, [r1]
 800b1f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b1f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1da      	bne.n	800b1b4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	3308      	adds	r3, #8
 800b204:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b206:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b208:	e853 3f00 	ldrex	r3, [r3]
 800b20c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b20e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b210:	f023 0301 	bic.w	r3, r3, #1
 800b214:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3308      	adds	r3, #8
 800b21e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b222:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b226:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b228:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b22a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b22e:	e841 2300 	strex	r3, r2, [r1]
 800b232:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1e1      	bne.n	800b1fe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	3308      	adds	r3, #8
 800b240:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b242:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b244:	e853 3f00 	ldrex	r3, [r3]
 800b248:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b24a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b24c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b250:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	3308      	adds	r3, #8
 800b25a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b25e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b260:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b262:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b264:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b266:	e841 2300 	strex	r3, r2, [r1]
 800b26a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b26c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1e3      	bne.n	800b23a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2220      	movs	r2, #32
 800b276:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b286:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b288:	e853 3f00 	ldrex	r3, [r3]
 800b28c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b28e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b290:	f023 0310 	bic.w	r3, r3, #16
 800b294:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	461a      	mov	r2, r3
 800b29e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b2a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b2a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b2a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b2aa:	e841 2300 	strex	r3, r2, [r1]
 800b2ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b2b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1e4      	bne.n	800b280 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b2ba:	4618      	mov	r0, r3
 800b2bc:	f7fa f81e 	bl	80052fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2202      	movs	r2, #2
 800b2c4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b2d2:	b29b      	uxth	r3, r3
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f000 f8c2 	bl	800b464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b2e0:	e0a4      	b.n	800b42c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800b2fc:	b29b      	uxth	r3, r3
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 8096 	beq.w	800b430 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800b304:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b308:	2b00      	cmp	r3, #0
 800b30a:	f000 8091 	beq.w	800b430 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b316:	e853 3f00 	ldrex	r3, [r3]
 800b31a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b31e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b322:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	461a      	mov	r2, r3
 800b32c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b330:	647b      	str	r3, [r7, #68]	@ 0x44
 800b332:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b334:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b336:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b338:	e841 2300 	strex	r3, r2, [r1]
 800b33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b33e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b340:	2b00      	cmp	r3, #0
 800b342:	d1e4      	bne.n	800b30e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	3308      	adds	r3, #8
 800b34a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b34e:	e853 3f00 	ldrex	r3, [r3]
 800b352:	623b      	str	r3, [r7, #32]
   return(result);
 800b354:	6a3b      	ldr	r3, [r7, #32]
 800b356:	f023 0301 	bic.w	r3, r3, #1
 800b35a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	3308      	adds	r3, #8
 800b364:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800b368:	633a      	str	r2, [r7, #48]	@ 0x30
 800b36a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b36e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b370:	e841 2300 	strex	r3, r2, [r1]
 800b374:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1e3      	bne.n	800b344 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2220      	movs	r2, #32
 800b380:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	2200      	movs	r2, #0
 800b388:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	e853 3f00 	ldrex	r3, [r3]
 800b39c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	f023 0310 	bic.w	r3, r3, #16
 800b3a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b3b2:	61fb      	str	r3, [r7, #28]
 800b3b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b6:	69b9      	ldr	r1, [r7, #24]
 800b3b8:	69fa      	ldr	r2, [r7, #28]
 800b3ba:	e841 2300 	strex	r3, r2, [r1]
 800b3be:	617b      	str	r3, [r7, #20]
   return(result);
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1e4      	bne.n	800b390 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b3cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 f846 	bl	800b464 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b3d8:	e02a      	b.n	800b430 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b3da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b3de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d00e      	beq.n	800b404 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b3e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b3ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d008      	beq.n	800b404 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d01c      	beq.n	800b434 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	4798      	blx	r3
    }
    return;
 800b402:	e017      	b.n	800b434 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b408:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d012      	beq.n	800b436 <HAL_UART_IRQHandler+0x59e>
 800b410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d00c      	beq.n	800b436 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	f000 fd71 	bl	800bf04 <UART_EndTransmit_IT>
    return;
 800b422:	e008      	b.n	800b436 <HAL_UART_IRQHandler+0x59e>
      return;
 800b424:	bf00      	nop
 800b426:	e006      	b.n	800b436 <HAL_UART_IRQHandler+0x59e>
    return;
 800b428:	bf00      	nop
 800b42a:	e004      	b.n	800b436 <HAL_UART_IRQHandler+0x59e>
      return;
 800b42c:	bf00      	nop
 800b42e:	e002      	b.n	800b436 <HAL_UART_IRQHandler+0x59e>
      return;
 800b430:	bf00      	nop
 800b432:	e000      	b.n	800b436 <HAL_UART_IRQHandler+0x59e>
    return;
 800b434:	bf00      	nop
  }

}
 800b436:	37e8      	adds	r7, #232	@ 0xe8
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b43c:	b480      	push	{r7}
 800b43e:	b083      	sub	sp, #12
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b444:	bf00      	nop
 800b446:	370c      	adds	r7, #12
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b458:	bf00      	nop
 800b45a:	370c      	adds	r7, #12
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr

0800b464 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b464:	b480      	push	{r7}
 800b466:	b083      	sub	sp, #12
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	460b      	mov	r3, r1
 800b46e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b470:	bf00      	nop
 800b472:	370c      	adds	r7, #12
 800b474:	46bd      	mov	sp, r7
 800b476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47a:	4770      	bx	lr

0800b47c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b088      	sub	sp, #32
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b484:	2300      	movs	r3, #0
 800b486:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	689a      	ldr	r2, [r3, #8]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	431a      	orrs	r2, r3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	695b      	ldr	r3, [r3, #20]
 800b496:	431a      	orrs	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	69db      	ldr	r3, [r3, #28]
 800b49c:	4313      	orrs	r3, r2
 800b49e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	4ba6      	ldr	r3, [pc, #664]	@ (800b740 <UART_SetConfig+0x2c4>)
 800b4a8:	4013      	ands	r3, r2
 800b4aa:	687a      	ldr	r2, [r7, #4]
 800b4ac:	6812      	ldr	r2, [r2, #0]
 800b4ae:	6979      	ldr	r1, [r7, #20]
 800b4b0:	430b      	orrs	r3, r1
 800b4b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	68da      	ldr	r2, [r3, #12]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	430a      	orrs	r2, r1
 800b4c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	699b      	ldr	r3, [r3, #24]
 800b4ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6a1b      	ldr	r3, [r3, #32]
 800b4d4:	697a      	ldr	r2, [r7, #20]
 800b4d6:	4313      	orrs	r3, r2
 800b4d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	697a      	ldr	r2, [r7, #20]
 800b4ea:	430a      	orrs	r2, r1
 800b4ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a94      	ldr	r2, [pc, #592]	@ (800b744 <UART_SetConfig+0x2c8>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d120      	bne.n	800b53a <UART_SetConfig+0xbe>
 800b4f8:	4b93      	ldr	r3, [pc, #588]	@ (800b748 <UART_SetConfig+0x2cc>)
 800b4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4fe:	f003 0303 	and.w	r3, r3, #3
 800b502:	2b03      	cmp	r3, #3
 800b504:	d816      	bhi.n	800b534 <UART_SetConfig+0xb8>
 800b506:	a201      	add	r2, pc, #4	@ (adr r2, 800b50c <UART_SetConfig+0x90>)
 800b508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b50c:	0800b51d 	.word	0x0800b51d
 800b510:	0800b529 	.word	0x0800b529
 800b514:	0800b523 	.word	0x0800b523
 800b518:	0800b52f 	.word	0x0800b52f
 800b51c:	2301      	movs	r3, #1
 800b51e:	77fb      	strb	r3, [r7, #31]
 800b520:	e150      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b522:	2302      	movs	r3, #2
 800b524:	77fb      	strb	r3, [r7, #31]
 800b526:	e14d      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b528:	2304      	movs	r3, #4
 800b52a:	77fb      	strb	r3, [r7, #31]
 800b52c:	e14a      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b52e:	2308      	movs	r3, #8
 800b530:	77fb      	strb	r3, [r7, #31]
 800b532:	e147      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b534:	2310      	movs	r3, #16
 800b536:	77fb      	strb	r3, [r7, #31]
 800b538:	e144      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4a83      	ldr	r2, [pc, #524]	@ (800b74c <UART_SetConfig+0x2d0>)
 800b540:	4293      	cmp	r3, r2
 800b542:	d132      	bne.n	800b5aa <UART_SetConfig+0x12e>
 800b544:	4b80      	ldr	r3, [pc, #512]	@ (800b748 <UART_SetConfig+0x2cc>)
 800b546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b54a:	f003 030c 	and.w	r3, r3, #12
 800b54e:	2b0c      	cmp	r3, #12
 800b550:	d828      	bhi.n	800b5a4 <UART_SetConfig+0x128>
 800b552:	a201      	add	r2, pc, #4	@ (adr r2, 800b558 <UART_SetConfig+0xdc>)
 800b554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b558:	0800b58d 	.word	0x0800b58d
 800b55c:	0800b5a5 	.word	0x0800b5a5
 800b560:	0800b5a5 	.word	0x0800b5a5
 800b564:	0800b5a5 	.word	0x0800b5a5
 800b568:	0800b599 	.word	0x0800b599
 800b56c:	0800b5a5 	.word	0x0800b5a5
 800b570:	0800b5a5 	.word	0x0800b5a5
 800b574:	0800b5a5 	.word	0x0800b5a5
 800b578:	0800b593 	.word	0x0800b593
 800b57c:	0800b5a5 	.word	0x0800b5a5
 800b580:	0800b5a5 	.word	0x0800b5a5
 800b584:	0800b5a5 	.word	0x0800b5a5
 800b588:	0800b59f 	.word	0x0800b59f
 800b58c:	2300      	movs	r3, #0
 800b58e:	77fb      	strb	r3, [r7, #31]
 800b590:	e118      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b592:	2302      	movs	r3, #2
 800b594:	77fb      	strb	r3, [r7, #31]
 800b596:	e115      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b598:	2304      	movs	r3, #4
 800b59a:	77fb      	strb	r3, [r7, #31]
 800b59c:	e112      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b59e:	2308      	movs	r3, #8
 800b5a0:	77fb      	strb	r3, [r7, #31]
 800b5a2:	e10f      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b5a4:	2310      	movs	r3, #16
 800b5a6:	77fb      	strb	r3, [r7, #31]
 800b5a8:	e10c      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a68      	ldr	r2, [pc, #416]	@ (800b750 <UART_SetConfig+0x2d4>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d120      	bne.n	800b5f6 <UART_SetConfig+0x17a>
 800b5b4:	4b64      	ldr	r3, [pc, #400]	@ (800b748 <UART_SetConfig+0x2cc>)
 800b5b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b5ba:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800b5be:	2b30      	cmp	r3, #48	@ 0x30
 800b5c0:	d013      	beq.n	800b5ea <UART_SetConfig+0x16e>
 800b5c2:	2b30      	cmp	r3, #48	@ 0x30
 800b5c4:	d814      	bhi.n	800b5f0 <UART_SetConfig+0x174>
 800b5c6:	2b20      	cmp	r3, #32
 800b5c8:	d009      	beq.n	800b5de <UART_SetConfig+0x162>
 800b5ca:	2b20      	cmp	r3, #32
 800b5cc:	d810      	bhi.n	800b5f0 <UART_SetConfig+0x174>
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d002      	beq.n	800b5d8 <UART_SetConfig+0x15c>
 800b5d2:	2b10      	cmp	r3, #16
 800b5d4:	d006      	beq.n	800b5e4 <UART_SetConfig+0x168>
 800b5d6:	e00b      	b.n	800b5f0 <UART_SetConfig+0x174>
 800b5d8:	2300      	movs	r3, #0
 800b5da:	77fb      	strb	r3, [r7, #31]
 800b5dc:	e0f2      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b5de:	2302      	movs	r3, #2
 800b5e0:	77fb      	strb	r3, [r7, #31]
 800b5e2:	e0ef      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b5e4:	2304      	movs	r3, #4
 800b5e6:	77fb      	strb	r3, [r7, #31]
 800b5e8:	e0ec      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b5ea:	2308      	movs	r3, #8
 800b5ec:	77fb      	strb	r3, [r7, #31]
 800b5ee:	e0e9      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b5f0:	2310      	movs	r3, #16
 800b5f2:	77fb      	strb	r3, [r7, #31]
 800b5f4:	e0e6      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	4a56      	ldr	r2, [pc, #344]	@ (800b754 <UART_SetConfig+0x2d8>)
 800b5fc:	4293      	cmp	r3, r2
 800b5fe:	d120      	bne.n	800b642 <UART_SetConfig+0x1c6>
 800b600:	4b51      	ldr	r3, [pc, #324]	@ (800b748 <UART_SetConfig+0x2cc>)
 800b602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b606:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800b60a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b60c:	d013      	beq.n	800b636 <UART_SetConfig+0x1ba>
 800b60e:	2bc0      	cmp	r3, #192	@ 0xc0
 800b610:	d814      	bhi.n	800b63c <UART_SetConfig+0x1c0>
 800b612:	2b80      	cmp	r3, #128	@ 0x80
 800b614:	d009      	beq.n	800b62a <UART_SetConfig+0x1ae>
 800b616:	2b80      	cmp	r3, #128	@ 0x80
 800b618:	d810      	bhi.n	800b63c <UART_SetConfig+0x1c0>
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <UART_SetConfig+0x1a8>
 800b61e:	2b40      	cmp	r3, #64	@ 0x40
 800b620:	d006      	beq.n	800b630 <UART_SetConfig+0x1b4>
 800b622:	e00b      	b.n	800b63c <UART_SetConfig+0x1c0>
 800b624:	2300      	movs	r3, #0
 800b626:	77fb      	strb	r3, [r7, #31]
 800b628:	e0cc      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b62a:	2302      	movs	r3, #2
 800b62c:	77fb      	strb	r3, [r7, #31]
 800b62e:	e0c9      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b630:	2304      	movs	r3, #4
 800b632:	77fb      	strb	r3, [r7, #31]
 800b634:	e0c6      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b636:	2308      	movs	r3, #8
 800b638:	77fb      	strb	r3, [r7, #31]
 800b63a:	e0c3      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b63c:	2310      	movs	r3, #16
 800b63e:	77fb      	strb	r3, [r7, #31]
 800b640:	e0c0      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	4a44      	ldr	r2, [pc, #272]	@ (800b758 <UART_SetConfig+0x2dc>)
 800b648:	4293      	cmp	r3, r2
 800b64a:	d125      	bne.n	800b698 <UART_SetConfig+0x21c>
 800b64c:	4b3e      	ldr	r3, [pc, #248]	@ (800b748 <UART_SetConfig+0x2cc>)
 800b64e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b652:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b656:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b65a:	d017      	beq.n	800b68c <UART_SetConfig+0x210>
 800b65c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b660:	d817      	bhi.n	800b692 <UART_SetConfig+0x216>
 800b662:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b666:	d00b      	beq.n	800b680 <UART_SetConfig+0x204>
 800b668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b66c:	d811      	bhi.n	800b692 <UART_SetConfig+0x216>
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <UART_SetConfig+0x1fe>
 800b672:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b676:	d006      	beq.n	800b686 <UART_SetConfig+0x20a>
 800b678:	e00b      	b.n	800b692 <UART_SetConfig+0x216>
 800b67a:	2300      	movs	r3, #0
 800b67c:	77fb      	strb	r3, [r7, #31]
 800b67e:	e0a1      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b680:	2302      	movs	r3, #2
 800b682:	77fb      	strb	r3, [r7, #31]
 800b684:	e09e      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b686:	2304      	movs	r3, #4
 800b688:	77fb      	strb	r3, [r7, #31]
 800b68a:	e09b      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b68c:	2308      	movs	r3, #8
 800b68e:	77fb      	strb	r3, [r7, #31]
 800b690:	e098      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b692:	2310      	movs	r3, #16
 800b694:	77fb      	strb	r3, [r7, #31]
 800b696:	e095      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4a2f      	ldr	r2, [pc, #188]	@ (800b75c <UART_SetConfig+0x2e0>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d125      	bne.n	800b6ee <UART_SetConfig+0x272>
 800b6a2:	4b29      	ldr	r3, [pc, #164]	@ (800b748 <UART_SetConfig+0x2cc>)
 800b6a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800b6ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b6b0:	d017      	beq.n	800b6e2 <UART_SetConfig+0x266>
 800b6b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b6b6:	d817      	bhi.n	800b6e8 <UART_SetConfig+0x26c>
 800b6b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6bc:	d00b      	beq.n	800b6d6 <UART_SetConfig+0x25a>
 800b6be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b6c2:	d811      	bhi.n	800b6e8 <UART_SetConfig+0x26c>
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d003      	beq.n	800b6d0 <UART_SetConfig+0x254>
 800b6c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b6cc:	d006      	beq.n	800b6dc <UART_SetConfig+0x260>
 800b6ce:	e00b      	b.n	800b6e8 <UART_SetConfig+0x26c>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	77fb      	strb	r3, [r7, #31]
 800b6d4:	e076      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	77fb      	strb	r3, [r7, #31]
 800b6da:	e073      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b6dc:	2304      	movs	r3, #4
 800b6de:	77fb      	strb	r3, [r7, #31]
 800b6e0:	e070      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b6e2:	2308      	movs	r3, #8
 800b6e4:	77fb      	strb	r3, [r7, #31]
 800b6e6:	e06d      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b6e8:	2310      	movs	r3, #16
 800b6ea:	77fb      	strb	r3, [r7, #31]
 800b6ec:	e06a      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a1b      	ldr	r2, [pc, #108]	@ (800b760 <UART_SetConfig+0x2e4>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d138      	bne.n	800b76a <UART_SetConfig+0x2ee>
 800b6f8:	4b13      	ldr	r3, [pc, #76]	@ (800b748 <UART_SetConfig+0x2cc>)
 800b6fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b6fe:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800b702:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b706:	d017      	beq.n	800b738 <UART_SetConfig+0x2bc>
 800b708:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b70c:	d82a      	bhi.n	800b764 <UART_SetConfig+0x2e8>
 800b70e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b712:	d00b      	beq.n	800b72c <UART_SetConfig+0x2b0>
 800b714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b718:	d824      	bhi.n	800b764 <UART_SetConfig+0x2e8>
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d003      	beq.n	800b726 <UART_SetConfig+0x2aa>
 800b71e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b722:	d006      	beq.n	800b732 <UART_SetConfig+0x2b6>
 800b724:	e01e      	b.n	800b764 <UART_SetConfig+0x2e8>
 800b726:	2300      	movs	r3, #0
 800b728:	77fb      	strb	r3, [r7, #31]
 800b72a:	e04b      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b72c:	2302      	movs	r3, #2
 800b72e:	77fb      	strb	r3, [r7, #31]
 800b730:	e048      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b732:	2304      	movs	r3, #4
 800b734:	77fb      	strb	r3, [r7, #31]
 800b736:	e045      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b738:	2308      	movs	r3, #8
 800b73a:	77fb      	strb	r3, [r7, #31]
 800b73c:	e042      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b73e:	bf00      	nop
 800b740:	efff69f3 	.word	0xefff69f3
 800b744:	40011000 	.word	0x40011000
 800b748:	40023800 	.word	0x40023800
 800b74c:	40004400 	.word	0x40004400
 800b750:	40004800 	.word	0x40004800
 800b754:	40004c00 	.word	0x40004c00
 800b758:	40005000 	.word	0x40005000
 800b75c:	40011400 	.word	0x40011400
 800b760:	40007800 	.word	0x40007800
 800b764:	2310      	movs	r3, #16
 800b766:	77fb      	strb	r3, [r7, #31]
 800b768:	e02c      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a72      	ldr	r2, [pc, #456]	@ (800b938 <UART_SetConfig+0x4bc>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d125      	bne.n	800b7c0 <UART_SetConfig+0x344>
 800b774:	4b71      	ldr	r3, [pc, #452]	@ (800b93c <UART_SetConfig+0x4c0>)
 800b776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b77a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800b77e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b782:	d017      	beq.n	800b7b4 <UART_SetConfig+0x338>
 800b784:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800b788:	d817      	bhi.n	800b7ba <UART_SetConfig+0x33e>
 800b78a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b78e:	d00b      	beq.n	800b7a8 <UART_SetConfig+0x32c>
 800b790:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b794:	d811      	bhi.n	800b7ba <UART_SetConfig+0x33e>
 800b796:	2b00      	cmp	r3, #0
 800b798:	d003      	beq.n	800b7a2 <UART_SetConfig+0x326>
 800b79a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b79e:	d006      	beq.n	800b7ae <UART_SetConfig+0x332>
 800b7a0:	e00b      	b.n	800b7ba <UART_SetConfig+0x33e>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	77fb      	strb	r3, [r7, #31]
 800b7a6:	e00d      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	77fb      	strb	r3, [r7, #31]
 800b7ac:	e00a      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b7ae:	2304      	movs	r3, #4
 800b7b0:	77fb      	strb	r3, [r7, #31]
 800b7b2:	e007      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b7b4:	2308      	movs	r3, #8
 800b7b6:	77fb      	strb	r3, [r7, #31]
 800b7b8:	e004      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b7ba:	2310      	movs	r3, #16
 800b7bc:	77fb      	strb	r3, [r7, #31]
 800b7be:	e001      	b.n	800b7c4 <UART_SetConfig+0x348>
 800b7c0:	2310      	movs	r3, #16
 800b7c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	69db      	ldr	r3, [r3, #28]
 800b7c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b7cc:	d15b      	bne.n	800b886 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800b7ce:	7ffb      	ldrb	r3, [r7, #31]
 800b7d0:	2b08      	cmp	r3, #8
 800b7d2:	d828      	bhi.n	800b826 <UART_SetConfig+0x3aa>
 800b7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b7dc <UART_SetConfig+0x360>)
 800b7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7da:	bf00      	nop
 800b7dc:	0800b801 	.word	0x0800b801
 800b7e0:	0800b809 	.word	0x0800b809
 800b7e4:	0800b811 	.word	0x0800b811
 800b7e8:	0800b827 	.word	0x0800b827
 800b7ec:	0800b817 	.word	0x0800b817
 800b7f0:	0800b827 	.word	0x0800b827
 800b7f4:	0800b827 	.word	0x0800b827
 800b7f8:	0800b827 	.word	0x0800b827
 800b7fc:	0800b81f 	.word	0x0800b81f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b800:	f7fc fd72 	bl	80082e8 <HAL_RCC_GetPCLK1Freq>
 800b804:	61b8      	str	r0, [r7, #24]
        break;
 800b806:	e013      	b.n	800b830 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b808:	f7fc fd82 	bl	8008310 <HAL_RCC_GetPCLK2Freq>
 800b80c:	61b8      	str	r0, [r7, #24]
        break;
 800b80e:	e00f      	b.n	800b830 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b810:	4b4b      	ldr	r3, [pc, #300]	@ (800b940 <UART_SetConfig+0x4c4>)
 800b812:	61bb      	str	r3, [r7, #24]
        break;
 800b814:	e00c      	b.n	800b830 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b816:	f7fc fc95 	bl	8008144 <HAL_RCC_GetSysClockFreq>
 800b81a:	61b8      	str	r0, [r7, #24]
        break;
 800b81c:	e008      	b.n	800b830 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b81e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b822:	61bb      	str	r3, [r7, #24]
        break;
 800b824:	e004      	b.n	800b830 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800b826:	2300      	movs	r3, #0
 800b828:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	77bb      	strb	r3, [r7, #30]
        break;
 800b82e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b830:	69bb      	ldr	r3, [r7, #24]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d074      	beq.n	800b920 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b836:	69bb      	ldr	r3, [r7, #24]
 800b838:	005a      	lsls	r2, r3, #1
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	085b      	lsrs	r3, r3, #1
 800b840:	441a      	add	r2, r3
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	fbb2 f3f3 	udiv	r3, r2, r3
 800b84a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	2b0f      	cmp	r3, #15
 800b850:	d916      	bls.n	800b880 <UART_SetConfig+0x404>
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b858:	d212      	bcs.n	800b880 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b85a:	693b      	ldr	r3, [r7, #16]
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	f023 030f 	bic.w	r3, r3, #15
 800b862:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	085b      	lsrs	r3, r3, #1
 800b868:	b29b      	uxth	r3, r3
 800b86a:	f003 0307 	and.w	r3, r3, #7
 800b86e:	b29a      	uxth	r2, r3
 800b870:	89fb      	ldrh	r3, [r7, #14]
 800b872:	4313      	orrs	r3, r2
 800b874:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	89fa      	ldrh	r2, [r7, #14]
 800b87c:	60da      	str	r2, [r3, #12]
 800b87e:	e04f      	b.n	800b920 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	77bb      	strb	r3, [r7, #30]
 800b884:	e04c      	b.n	800b920 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b886:	7ffb      	ldrb	r3, [r7, #31]
 800b888:	2b08      	cmp	r3, #8
 800b88a:	d828      	bhi.n	800b8de <UART_SetConfig+0x462>
 800b88c:	a201      	add	r2, pc, #4	@ (adr r2, 800b894 <UART_SetConfig+0x418>)
 800b88e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b892:	bf00      	nop
 800b894:	0800b8b9 	.word	0x0800b8b9
 800b898:	0800b8c1 	.word	0x0800b8c1
 800b89c:	0800b8c9 	.word	0x0800b8c9
 800b8a0:	0800b8df 	.word	0x0800b8df
 800b8a4:	0800b8cf 	.word	0x0800b8cf
 800b8a8:	0800b8df 	.word	0x0800b8df
 800b8ac:	0800b8df 	.word	0x0800b8df
 800b8b0:	0800b8df 	.word	0x0800b8df
 800b8b4:	0800b8d7 	.word	0x0800b8d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b8b8:	f7fc fd16 	bl	80082e8 <HAL_RCC_GetPCLK1Freq>
 800b8bc:	61b8      	str	r0, [r7, #24]
        break;
 800b8be:	e013      	b.n	800b8e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b8c0:	f7fc fd26 	bl	8008310 <HAL_RCC_GetPCLK2Freq>
 800b8c4:	61b8      	str	r0, [r7, #24]
        break;
 800b8c6:	e00f      	b.n	800b8e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b8c8:	4b1d      	ldr	r3, [pc, #116]	@ (800b940 <UART_SetConfig+0x4c4>)
 800b8ca:	61bb      	str	r3, [r7, #24]
        break;
 800b8cc:	e00c      	b.n	800b8e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b8ce:	f7fc fc39 	bl	8008144 <HAL_RCC_GetSysClockFreq>
 800b8d2:	61b8      	str	r0, [r7, #24]
        break;
 800b8d4:	e008      	b.n	800b8e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b8d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b8da:	61bb      	str	r3, [r7, #24]
        break;
 800b8dc:	e004      	b.n	800b8e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	77bb      	strb	r3, [r7, #30]
        break;
 800b8e6:	bf00      	nop
    }

    if (pclk != 0U)
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d018      	beq.n	800b920 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	085a      	lsrs	r2, r3, #1
 800b8f4:	69bb      	ldr	r3, [r7, #24]
 800b8f6:	441a      	add	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b900:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	2b0f      	cmp	r3, #15
 800b906:	d909      	bls.n	800b91c <UART_SetConfig+0x4a0>
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b90e:	d205      	bcs.n	800b91c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b910:	693b      	ldr	r3, [r7, #16]
 800b912:	b29a      	uxth	r2, r3
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	60da      	str	r2, [r3, #12]
 800b91a:	e001      	b.n	800b920 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b92c:	7fbb      	ldrb	r3, [r7, #30]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3720      	adds	r7, #32
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop
 800b938:	40007c00 	.word	0x40007c00
 800b93c:	40023800 	.word	0x40023800
 800b940:	00f42400 	.word	0x00f42400

0800b944 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b944:	b480      	push	{r7}
 800b946:	b083      	sub	sp, #12
 800b948:	af00      	add	r7, sp, #0
 800b94a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b950:	f003 0301 	and.w	r3, r3, #1
 800b954:	2b00      	cmp	r3, #0
 800b956:	d00a      	beq.n	800b96e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	685b      	ldr	r3, [r3, #4]
 800b95e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	430a      	orrs	r2, r1
 800b96c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b972:	f003 0302 	and.w	r3, r3, #2
 800b976:	2b00      	cmp	r3, #0
 800b978:	d00a      	beq.n	800b990 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	430a      	orrs	r2, r1
 800b98e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b994:	f003 0304 	and.w	r3, r3, #4
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00a      	beq.n	800b9b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	685b      	ldr	r3, [r3, #4]
 800b9a2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	430a      	orrs	r2, r1
 800b9b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9b6:	f003 0308 	and.w	r3, r3, #8
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00a      	beq.n	800b9d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	685b      	ldr	r3, [r3, #4]
 800b9c4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	430a      	orrs	r2, r1
 800b9d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9d8:	f003 0310 	and.w	r3, r3, #16
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d00a      	beq.n	800b9f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	430a      	orrs	r2, r1
 800b9f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9fa:	f003 0320 	and.w	r3, r3, #32
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d00a      	beq.n	800ba18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	689b      	ldr	r3, [r3, #8]
 800ba08:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	430a      	orrs	r2, r1
 800ba16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d01a      	beq.n	800ba5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	430a      	orrs	r2, r1
 800ba38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ba42:	d10a      	bne.n	800ba5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	430a      	orrs	r2, r1
 800ba58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d00a      	beq.n	800ba7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	430a      	orrs	r2, r1
 800ba7a:	605a      	str	r2, [r3, #4]
  }
}
 800ba7c:	bf00      	nop
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b086      	sub	sp, #24
 800ba8c:	af02      	add	r7, sp, #8
 800ba8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba98:	f7f8 fe3e 	bl	8004718 <HAL_GetTick>
 800ba9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	f003 0308 	and.w	r3, r3, #8
 800baa8:	2b08      	cmp	r3, #8
 800baaa:	d10e      	bne.n	800baca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800baac:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800bab0:	9300      	str	r3, [sp, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f000 f81b 	bl	800baf6 <UART_WaitOnFlagUntilTimeout>
 800bac0:	4603      	mov	r3, r0
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d001      	beq.n	800baca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bac6:	2303      	movs	r3, #3
 800bac8:	e011      	b.n	800baee <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2220      	movs	r2, #32
 800bace:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2220      	movs	r2, #32
 800bad4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2200      	movs	r2, #0
 800bae8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800baec:	2300      	movs	r3, #0
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}

0800baf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800baf6:	b580      	push	{r7, lr}
 800baf8:	b09c      	sub	sp, #112	@ 0x70
 800bafa:	af00      	add	r7, sp, #0
 800bafc:	60f8      	str	r0, [r7, #12]
 800bafe:	60b9      	str	r1, [r7, #8]
 800bb00:	603b      	str	r3, [r7, #0]
 800bb02:	4613      	mov	r3, r2
 800bb04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb06:	e0a7      	b.n	800bc58 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb0e:	f000 80a3 	beq.w	800bc58 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb12:	f7f8 fe01 	bl	8004718 <HAL_GetTick>
 800bb16:	4602      	mov	r2, r0
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d302      	bcc.n	800bb28 <UART_WaitOnFlagUntilTimeout+0x32>
 800bb22:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d13f      	bne.n	800bba8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb2e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb30:	e853 3f00 	ldrex	r3, [r3]
 800bb34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800bb36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb38:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bb3c:	667b      	str	r3, [r7, #100]	@ 0x64
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	461a      	mov	r2, r3
 800bb44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800bb46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bb48:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bb4c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800bb4e:	e841 2300 	strex	r3, r2, [r1]
 800bb52:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800bb54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d1e6      	bne.n	800bb28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	3308      	adds	r3, #8
 800bb60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb64:	e853 3f00 	ldrex	r3, [r3]
 800bb68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bb6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6c:	f023 0301 	bic.w	r3, r3, #1
 800bb70:	663b      	str	r3, [r7, #96]	@ 0x60
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	3308      	adds	r3, #8
 800bb78:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bb7a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bb7c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bb80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bb82:	e841 2300 	strex	r3, r2, [r1]
 800bb86:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bb88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d1e5      	bne.n	800bb5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2220      	movs	r2, #32
 800bb92:	67da      	str	r2, [r3, #124]	@ 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	2220      	movs	r2, #32
 800bb98:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        __HAL_UNLOCK(huart);
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        return HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e068      	b.n	800bc7a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f003 0304 	and.w	r3, r3, #4
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d050      	beq.n	800bc58 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	69db      	ldr	r3, [r3, #28]
 800bbbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bbc4:	d148      	bne.n	800bc58 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bbce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbd8:	e853 3f00 	ldrex	r3, [r3]
 800bbdc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800bbe4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	461a      	mov	r2, r3
 800bbec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bbee:	637b      	str	r3, [r7, #52]	@ 0x34
 800bbf0:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbf2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bbf4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bbf6:	e841 2300 	strex	r3, r2, [r1]
 800bbfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bbfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d1e6      	bne.n	800bbd0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	3308      	adds	r3, #8
 800bc08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc0a:	697b      	ldr	r3, [r7, #20]
 800bc0c:	e853 3f00 	ldrex	r3, [r3]
 800bc10:	613b      	str	r3, [r7, #16]
   return(result);
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	f023 0301 	bic.w	r3, r3, #1
 800bc18:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	3308      	adds	r3, #8
 800bc20:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800bc22:	623a      	str	r2, [r7, #32]
 800bc24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc26:	69f9      	ldr	r1, [r7, #28]
 800bc28:	6a3a      	ldr	r2, [r7, #32]
 800bc2a:	e841 2300 	strex	r3, r2, [r1]
 800bc2e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc30:	69bb      	ldr	r3, [r7, #24]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1e5      	bne.n	800bc02 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2220      	movs	r2, #32
 800bc3a:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2220      	movs	r2, #32
 800bc40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2220      	movs	r2, #32
 800bc48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	2200      	movs	r2, #0
 800bc50:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800bc54:	2303      	movs	r3, #3
 800bc56:	e010      	b.n	800bc7a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	69da      	ldr	r2, [r3, #28]
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	4013      	ands	r3, r2
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	429a      	cmp	r2, r3
 800bc66:	bf0c      	ite	eq
 800bc68:	2301      	moveq	r3, #1
 800bc6a:	2300      	movne	r3, #0
 800bc6c:	b2db      	uxtb	r3, r3
 800bc6e:	461a      	mov	r2, r3
 800bc70:	79fb      	ldrb	r3, [r7, #7]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	f43f af48 	beq.w	800bb08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc78:	2300      	movs	r3, #0
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3770      	adds	r7, #112	@ 0x70
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
	...

0800bc84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b097      	sub	sp, #92	@ 0x5c
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	88fa      	ldrh	r2, [r7, #6]
 800bc9c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	88fa      	ldrh	r2, [r7, #6]
 800bca4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	689b      	ldr	r3, [r3, #8]
 800bcb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcb6:	d10e      	bne.n	800bcd6 <UART_Start_Receive_IT+0x52>
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d105      	bne.n	800bccc <UART_Start_Receive_IT+0x48>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800bcc6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bcca:	e02d      	b.n	800bd28 <UART_Start_Receive_IT+0xa4>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	22ff      	movs	r2, #255	@ 0xff
 800bcd0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bcd4:	e028      	b.n	800bd28 <UART_Start_Receive_IT+0xa4>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	689b      	ldr	r3, [r3, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10d      	bne.n	800bcfa <UART_Start_Receive_IT+0x76>
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d104      	bne.n	800bcf0 <UART_Start_Receive_IT+0x6c>
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	22ff      	movs	r2, #255	@ 0xff
 800bcea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bcee:	e01b      	b.n	800bd28 <UART_Start_Receive_IT+0xa4>
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	227f      	movs	r2, #127	@ 0x7f
 800bcf4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bcf8:	e016      	b.n	800bd28 <UART_Start_Receive_IT+0xa4>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd02:	d10d      	bne.n	800bd20 <UART_Start_Receive_IT+0x9c>
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d104      	bne.n	800bd16 <UART_Start_Receive_IT+0x92>
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	227f      	movs	r2, #127	@ 0x7f
 800bd10:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bd14:	e008      	b.n	800bd28 <UART_Start_Receive_IT+0xa4>
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	223f      	movs	r2, #63	@ 0x3f
 800bd1a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800bd1e:	e003      	b.n	800bd28 <UART_Start_Receive_IT+0xa4>
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2222      	movs	r2, #34	@ 0x22
 800bd34:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	3308      	adds	r3, #8
 800bd3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd42:	e853 3f00 	ldrex	r3, [r3]
 800bd46:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bd48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd4a:	f043 0301 	orr.w	r3, r3, #1
 800bd4e:	657b      	str	r3, [r7, #84]	@ 0x54
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	3308      	adds	r3, #8
 800bd56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bd58:	64ba      	str	r2, [r7, #72]	@ 0x48
 800bd5a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bd5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bd60:	e841 2300 	strex	r3, r2, [r1]
 800bd64:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bd66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1e5      	bne.n	800bd38 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd74:	d107      	bne.n	800bd86 <UART_Start_Receive_IT+0x102>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	691b      	ldr	r3, [r3, #16]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d103      	bne.n	800bd86 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	4a21      	ldr	r2, [pc, #132]	@ (800be08 <UART_Start_Receive_IT+0x184>)
 800bd82:	669a      	str	r2, [r3, #104]	@ 0x68
 800bd84:	e002      	b.n	800bd8c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4a20      	ldr	r2, [pc, #128]	@ (800be0c <UART_Start_Receive_IT+0x188>)
 800bd8a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	691b      	ldr	r3, [r3, #16]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d019      	beq.n	800bdc8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd9c:	e853 3f00 	ldrex	r3, [r3]
 800bda0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bda2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800bda8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	461a      	mov	r2, r3
 800bdb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bdb2:	637b      	str	r3, [r7, #52]	@ 0x34
 800bdb4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bdb8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bdba:	e841 2300 	strex	r3, r2, [r1]
 800bdbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bdc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d1e6      	bne.n	800bd94 <UART_Start_Receive_IT+0x110>
 800bdc6:	e018      	b.n	800bdfa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	e853 3f00 	ldrex	r3, [r3]
 800bdd4:	613b      	str	r3, [r7, #16]
   return(result);
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	f043 0320 	orr.w	r3, r3, #32
 800bddc:	653b      	str	r3, [r7, #80]	@ 0x50
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	461a      	mov	r2, r3
 800bde4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bde6:	623b      	str	r3, [r7, #32]
 800bde8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdea:	69f9      	ldr	r1, [r7, #28]
 800bdec:	6a3a      	ldr	r2, [r7, #32]
 800bdee:	e841 2300 	strex	r3, r2, [r1]
 800bdf2:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1e6      	bne.n	800bdc8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	375c      	adds	r7, #92	@ 0x5c
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	0800c0bf 	.word	0x0800c0bf
 800be0c:	0800bf59 	.word	0x0800bf59

0800be10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be10:	b480      	push	{r7}
 800be12:	b095      	sub	sp, #84	@ 0x54
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be20:	e853 3f00 	ldrex	r3, [r3]
 800be24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800be26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800be2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	461a      	mov	r2, r3
 800be34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be36:	643b      	str	r3, [r7, #64]	@ 0x40
 800be38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800be3e:	e841 2300 	strex	r3, r2, [r1]
 800be42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800be44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800be46:	2b00      	cmp	r3, #0
 800be48:	d1e6      	bne.n	800be18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	3308      	adds	r3, #8
 800be50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be52:	6a3b      	ldr	r3, [r7, #32]
 800be54:	e853 3f00 	ldrex	r3, [r3]
 800be58:	61fb      	str	r3, [r7, #28]
   return(result);
 800be5a:	69fb      	ldr	r3, [r7, #28]
 800be5c:	f023 0301 	bic.w	r3, r3, #1
 800be60:	64bb      	str	r3, [r7, #72]	@ 0x48
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3308      	adds	r3, #8
 800be68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800be6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800be6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be72:	e841 2300 	strex	r3, r2, [r1]
 800be76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800be78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d1e5      	bne.n	800be4a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be82:	2b01      	cmp	r3, #1
 800be84:	d118      	bne.n	800beb8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	e853 3f00 	ldrex	r3, [r3]
 800be92:	60bb      	str	r3, [r7, #8]
   return(result);
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	f023 0310 	bic.w	r3, r3, #16
 800be9a:	647b      	str	r3, [r7, #68]	@ 0x44
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	461a      	mov	r2, r3
 800bea2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bea4:	61bb      	str	r3, [r7, #24]
 800bea6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bea8:	6979      	ldr	r1, [r7, #20]
 800beaa:	69ba      	ldr	r2, [r7, #24]
 800beac:	e841 2300 	strex	r3, r2, [r1]
 800beb0:	613b      	str	r3, [r7, #16]
   return(result);
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d1e6      	bne.n	800be86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2220      	movs	r2, #32
 800bebc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800becc:	bf00      	nop
 800bece:	3754      	adds	r7, #84	@ 0x54
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bee4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	2200      	movs	r2, #0
 800beea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2200      	movs	r2, #0
 800bef2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bef6:	68f8      	ldr	r0, [r7, #12]
 800bef8:	f7ff faaa 	bl	800b450 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800befc:	bf00      	nop
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b088      	sub	sp, #32
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	e853 3f00 	ldrex	r3, [r3]
 800bf18:	60bb      	str	r3, [r7, #8]
   return(result);
 800bf1a:	68bb      	ldr	r3, [r7, #8]
 800bf1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bf20:	61fb      	str	r3, [r7, #28]
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	61bb      	str	r3, [r7, #24]
 800bf2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf2e:	6979      	ldr	r1, [r7, #20]
 800bf30:	69ba      	ldr	r2, [r7, #24]
 800bf32:	e841 2300 	strex	r3, r2, [r1]
 800bf36:	613b      	str	r3, [r7, #16]
   return(result);
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1e6      	bne.n	800bf0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2220      	movs	r2, #32
 800bf42:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff fa76 	bl	800b43c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf50:	bf00      	nop
 800bf52:	3720      	adds	r7, #32
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b096      	sub	sp, #88	@ 0x58
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bf66:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800bf70:	2b22      	cmp	r3, #34	@ 0x22
 800bf72:	f040 8098 	bne.w	800c0a6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf7c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800bf80:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 800bf84:	b2d9      	uxtb	r1, r3
 800bf86:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800bf8a:	b2da      	uxtb	r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf90:	400a      	ands	r2, r1
 800bf92:	b2d2      	uxtb	r2, r2
 800bf94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf9a:	1c5a      	adds	r2, r3, #1
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	3b01      	subs	r3, #1
 800bfaa:	b29a      	uxth	r2, r3
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d17b      	bne.n	800c0b6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bfc6:	e853 3f00 	ldrex	r3, [r3]
 800bfca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bfcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bfd2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	461a      	mov	r2, r3
 800bfda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bfdc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bfe2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bfe4:	e841 2300 	strex	r3, r2, [r1]
 800bfe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bfea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1e6      	bne.n	800bfbe <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	3308      	adds	r3, #8
 800bff6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffa:	e853 3f00 	ldrex	r3, [r3]
 800bffe:	623b      	str	r3, [r7, #32]
   return(result);
 800c000:	6a3b      	ldr	r3, [r7, #32]
 800c002:	f023 0301 	bic.w	r3, r3, #1
 800c006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	3308      	adds	r3, #8
 800c00e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c010:	633a      	str	r2, [r7, #48]	@ 0x30
 800c012:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c014:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c018:	e841 2300 	strex	r3, r2, [r1]
 800c01c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c020:	2b00      	cmp	r3, #0
 800c022:	d1e5      	bne.n	800bff0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2220      	movs	r2, #32
 800c028:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d12e      	bne.n	800c09e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2200      	movs	r2, #0
 800c044:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	e853 3f00 	ldrex	r3, [r3]
 800c052:	60fb      	str	r3, [r7, #12]
   return(result);
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f023 0310 	bic.w	r3, r3, #16
 800c05a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	461a      	mov	r2, r3
 800c062:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c064:	61fb      	str	r3, [r7, #28]
 800c066:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c068:	69b9      	ldr	r1, [r7, #24]
 800c06a:	69fa      	ldr	r2, [r7, #28]
 800c06c:	e841 2300 	strex	r3, r2, [r1]
 800c070:	617b      	str	r3, [r7, #20]
   return(result);
 800c072:	697b      	ldr	r3, [r7, #20]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d1e6      	bne.n	800c046 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	69db      	ldr	r3, [r3, #28]
 800c07e:	f003 0310 	and.w	r3, r3, #16
 800c082:	2b10      	cmp	r3, #16
 800c084:	d103      	bne.n	800c08e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2210      	movs	r2, #16
 800c08c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c094:	4619      	mov	r1, r3
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f7ff f9e4 	bl	800b464 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c09c:	e00b      	b.n	800c0b6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f7f6 f838 	bl	8002114 <HAL_UART_RxCpltCallback>
}
 800c0a4:	e007      	b.n	800c0b6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	699a      	ldr	r2, [r3, #24]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f042 0208 	orr.w	r2, r2, #8
 800c0b4:	619a      	str	r2, [r3, #24]
}
 800c0b6:	bf00      	nop
 800c0b8:	3758      	adds	r7, #88	@ 0x58
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c0be:	b580      	push	{r7, lr}
 800c0c0:	b096      	sub	sp, #88	@ 0x58
 800c0c2:	af00      	add	r7, sp, #0
 800c0c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800c0cc:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0d6:	2b22      	cmp	r3, #34	@ 0x22
 800c0d8:	f040 8098 	bne.w	800c20c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0e2:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0ea:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800c0ec:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 800c0f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800c0f4:	4013      	ands	r3, r2
 800c0f6:	b29a      	uxth	r2, r3
 800c0f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c0fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c100:	1c9a      	adds	r2, r3, #2
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	3b01      	subs	r3, #1
 800c110:	b29a      	uxth	r2, r3
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800c11e:	b29b      	uxth	r3, r3
 800c120:	2b00      	cmp	r3, #0
 800c122:	d17b      	bne.n	800c21c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c12c:	e853 3f00 	ldrex	r3, [r3]
 800c130:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800c132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c134:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c138:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	461a      	mov	r2, r3
 800c140:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c142:	643b      	str	r3, [r7, #64]	@ 0x40
 800c144:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c146:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c148:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c14a:	e841 2300 	strex	r3, r2, [r1]
 800c14e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800c150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1e6      	bne.n	800c124 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	3308      	adds	r3, #8
 800c15c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c15e:	6a3b      	ldr	r3, [r7, #32]
 800c160:	e853 3f00 	ldrex	r3, [r3]
 800c164:	61fb      	str	r3, [r7, #28]
   return(result);
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	f023 0301 	bic.w	r3, r3, #1
 800c16c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	3308      	adds	r3, #8
 800c174:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c176:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c178:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c17a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c17c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c17e:	e841 2300 	strex	r3, r2, [r1]
 800c182:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800c184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c186:	2b00      	cmp	r3, #0
 800c188:	d1e5      	bne.n	800c156 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2220      	movs	r2, #32
 800c18e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2200      	movs	r2, #0
 800c19c:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d12e      	bne.n	800c204 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	e853 3f00 	ldrex	r3, [r3]
 800c1b8:	60bb      	str	r3, [r7, #8]
   return(result);
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	f023 0310 	bic.w	r3, r3, #16
 800c1c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1ca:	61bb      	str	r3, [r7, #24]
 800c1cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1ce:	6979      	ldr	r1, [r7, #20]
 800c1d0:	69ba      	ldr	r2, [r7, #24]
 800c1d2:	e841 2300 	strex	r3, r2, [r1]
 800c1d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d1e6      	bne.n	800c1ac <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	69db      	ldr	r3, [r3, #28]
 800c1e4:	f003 0310 	and.w	r3, r3, #16
 800c1e8:	2b10      	cmp	r3, #16
 800c1ea:	d103      	bne.n	800c1f4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	2210      	movs	r2, #16
 800c1f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800c1fa:	4619      	mov	r1, r3
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f7ff f931 	bl	800b464 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c202:	e00b      	b.n	800c21c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f7f5 ff85 	bl	8002114 <HAL_UART_RxCpltCallback>
}
 800c20a:	e007      	b.n	800c21c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	699a      	ldr	r2, [r3, #24]
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f042 0208 	orr.w	r2, r2, #8
 800c21a:	619a      	str	r2, [r3, #24]
}
 800c21c:	bf00      	nop
 800c21e:	3758      	adds	r7, #88	@ 0x58
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	2b00      	cmp	r3, #0
 800c234:	d121      	bne.n	800c27a <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681a      	ldr	r2, [r3, #0]
 800c23a:	4b27      	ldr	r3, [pc, #156]	@ (800c2d8 <FMC_SDRAM_Init+0xb4>)
 800c23c:	4013      	ands	r3, r2
 800c23e:	683a      	ldr	r2, [r7, #0]
 800c240:	6851      	ldr	r1, [r2, #4]
 800c242:	683a      	ldr	r2, [r7, #0]
 800c244:	6892      	ldr	r2, [r2, #8]
 800c246:	4311      	orrs	r1, r2
 800c248:	683a      	ldr	r2, [r7, #0]
 800c24a:	68d2      	ldr	r2, [r2, #12]
 800c24c:	4311      	orrs	r1, r2
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	6912      	ldr	r2, [r2, #16]
 800c252:	4311      	orrs	r1, r2
 800c254:	683a      	ldr	r2, [r7, #0]
 800c256:	6952      	ldr	r2, [r2, #20]
 800c258:	4311      	orrs	r1, r2
 800c25a:	683a      	ldr	r2, [r7, #0]
 800c25c:	6992      	ldr	r2, [r2, #24]
 800c25e:	4311      	orrs	r1, r2
 800c260:	683a      	ldr	r2, [r7, #0]
 800c262:	69d2      	ldr	r2, [r2, #28]
 800c264:	4311      	orrs	r1, r2
 800c266:	683a      	ldr	r2, [r7, #0]
 800c268:	6a12      	ldr	r2, [r2, #32]
 800c26a:	4311      	orrs	r1, r2
 800c26c:	683a      	ldr	r2, [r7, #0]
 800c26e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c270:	430a      	orrs	r2, r1
 800c272:	431a      	orrs	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	601a      	str	r2, [r3, #0]
 800c278:	e026      	b.n	800c2c8 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800c282:	683b      	ldr	r3, [r7, #0]
 800c284:	69d9      	ldr	r1, [r3, #28]
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	6a1b      	ldr	r3, [r3, #32]
 800c28a:	4319      	orrs	r1, r3
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c290:	430b      	orrs	r3, r1
 800c292:	431a      	orrs	r2, r3
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	4b0e      	ldr	r3, [pc, #56]	@ (800c2d8 <FMC_SDRAM_Init+0xb4>)
 800c29e:	4013      	ands	r3, r2
 800c2a0:	683a      	ldr	r2, [r7, #0]
 800c2a2:	6851      	ldr	r1, [r2, #4]
 800c2a4:	683a      	ldr	r2, [r7, #0]
 800c2a6:	6892      	ldr	r2, [r2, #8]
 800c2a8:	4311      	orrs	r1, r2
 800c2aa:	683a      	ldr	r2, [r7, #0]
 800c2ac:	68d2      	ldr	r2, [r2, #12]
 800c2ae:	4311      	orrs	r1, r2
 800c2b0:	683a      	ldr	r2, [r7, #0]
 800c2b2:	6912      	ldr	r2, [r2, #16]
 800c2b4:	4311      	orrs	r1, r2
 800c2b6:	683a      	ldr	r2, [r7, #0]
 800c2b8:	6952      	ldr	r2, [r2, #20]
 800c2ba:	4311      	orrs	r1, r2
 800c2bc:	683a      	ldr	r2, [r7, #0]
 800c2be:	6992      	ldr	r2, [r2, #24]
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	431a      	orrs	r2, r3
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800c2c8:	2300      	movs	r3, #0
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	370c      	adds	r7, #12
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d4:	4770      	bx	lr
 800c2d6:	bf00      	nop
 800c2d8:	ffff8000 	.word	0xffff8000

0800c2dc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c2dc:	b480      	push	{r7}
 800c2de:	b085      	sub	sp, #20
 800c2e0:	af00      	add	r7, sp, #0
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d128      	bne.n	800c340 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	689b      	ldr	r3, [r3, #8]
 800c2f2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	1e59      	subs	r1, r3, #1
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	3b01      	subs	r3, #1
 800c302:	011b      	lsls	r3, r3, #4
 800c304:	4319      	orrs	r1, r3
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	021b      	lsls	r3, r3, #8
 800c30e:	4319      	orrs	r1, r3
 800c310:	68bb      	ldr	r3, [r7, #8]
 800c312:	68db      	ldr	r3, [r3, #12]
 800c314:	3b01      	subs	r3, #1
 800c316:	031b      	lsls	r3, r3, #12
 800c318:	4319      	orrs	r1, r3
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	691b      	ldr	r3, [r3, #16]
 800c31e:	3b01      	subs	r3, #1
 800c320:	041b      	lsls	r3, r3, #16
 800c322:	4319      	orrs	r1, r3
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	695b      	ldr	r3, [r3, #20]
 800c328:	3b01      	subs	r3, #1
 800c32a:	051b      	lsls	r3, r3, #20
 800c32c:	4319      	orrs	r1, r3
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	699b      	ldr	r3, [r3, #24]
 800c332:	3b01      	subs	r3, #1
 800c334:	061b      	lsls	r3, r3, #24
 800c336:	430b      	orrs	r3, r1
 800c338:	431a      	orrs	r2, r3
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	609a      	str	r2, [r3, #8]
 800c33e:	e02d      	b.n	800c39c <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	689a      	ldr	r2, [r3, #8]
 800c344:	4b19      	ldr	r3, [pc, #100]	@ (800c3ac <FMC_SDRAM_Timing_Init+0xd0>)
 800c346:	4013      	ands	r3, r2
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	68d2      	ldr	r2, [r2, #12]
 800c34c:	3a01      	subs	r2, #1
 800c34e:	0311      	lsls	r1, r2, #12
 800c350:	68ba      	ldr	r2, [r7, #8]
 800c352:	6952      	ldr	r2, [r2, #20]
 800c354:	3a01      	subs	r2, #1
 800c356:	0512      	lsls	r2, r2, #20
 800c358:	430a      	orrs	r2, r1
 800c35a:	431a      	orrs	r2, r3
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	68db      	ldr	r3, [r3, #12]
 800c364:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	1e59      	subs	r1, r3, #1
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	685b      	ldr	r3, [r3, #4]
 800c372:	3b01      	subs	r3, #1
 800c374:	011b      	lsls	r3, r3, #4
 800c376:	4319      	orrs	r1, r3
 800c378:	68bb      	ldr	r3, [r7, #8]
 800c37a:	689b      	ldr	r3, [r3, #8]
 800c37c:	3b01      	subs	r3, #1
 800c37e:	021b      	lsls	r3, r3, #8
 800c380:	4319      	orrs	r1, r3
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	3b01      	subs	r3, #1
 800c388:	041b      	lsls	r3, r3, #16
 800c38a:	4319      	orrs	r1, r3
 800c38c:	68bb      	ldr	r3, [r7, #8]
 800c38e:	699b      	ldr	r3, [r3, #24]
 800c390:	3b01      	subs	r3, #1
 800c392:	061b      	lsls	r3, r3, #24
 800c394:	430b      	orrs	r3, r1
 800c396:	431a      	orrs	r2, r3
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800c39c:	2300      	movs	r3, #0
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3714      	adds	r7, #20
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a8:	4770      	bx	lr
 800c3aa:	bf00      	nop
 800c3ac:	ff0f0fff 	.word	0xff0f0fff

0800c3b0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c3b0:	b480      	push	{r7}
 800c3b2:	b085      	sub	sp, #20
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	60f8      	str	r0, [r7, #12]
 800c3b8:	60b9      	str	r1, [r7, #8]
 800c3ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	691a      	ldr	r2, [r3, #16]
 800c3c0:	4b0c      	ldr	r3, [pc, #48]	@ (800c3f4 <FMC_SDRAM_SendCommand+0x44>)
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	6811      	ldr	r1, [r2, #0]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	6852      	ldr	r2, [r2, #4]
 800c3cc:	4311      	orrs	r1, r2
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	6892      	ldr	r2, [r2, #8]
 800c3d2:	3a01      	subs	r2, #1
 800c3d4:	0152      	lsls	r2, r2, #5
 800c3d6:	4311      	orrs	r1, r2
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	68d2      	ldr	r2, [r2, #12]
 800c3dc:	0252      	lsls	r2, r2, #9
 800c3de:	430a      	orrs	r2, r1
 800c3e0:	431a      	orrs	r2, r3
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800c3e6:	2300      	movs	r3, #0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3714      	adds	r7, #20
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f2:	4770      	bx	lr
 800c3f4:	ffc00000 	.word	0xffc00000

0800c3f8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
 800c400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	695a      	ldr	r2, [r3, #20]
 800c406:	4b07      	ldr	r3, [pc, #28]	@ (800c424 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800c408:	4013      	ands	r3, r2
 800c40a:	683a      	ldr	r2, [r7, #0]
 800c40c:	0052      	lsls	r2, r2, #1
 800c40e:	431a      	orrs	r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	370c      	adds	r7, #12
 800c41a:	46bd      	mov	sp, r7
 800c41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c420:	4770      	bx	lr
 800c422:	bf00      	nop
 800c424:	ffffc001 	.word	0xffffc001

0800c428 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c428:	b084      	sub	sp, #16
 800c42a:	b480      	push	{r7}
 800c42c:	b085      	sub	sp, #20
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	f107 001c 	add.w	r0, r7, #28
 800c436:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c43a:	2300      	movs	r3, #0
 800c43c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c43e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c440:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c442:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800c446:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800c44a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c44c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800c44e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800c452:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c454:	68fa      	ldr	r2, [r7, #12]
 800c456:	4313      	orrs	r3, r2
 800c458:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	685a      	ldr	r2, [r3, #4]
 800c45e:	4b07      	ldr	r3, [pc, #28]	@ (800c47c <SDMMC_Init+0x54>)
 800c460:	4013      	ands	r3, r2
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	431a      	orrs	r2, r3
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3714      	adds	r7, #20
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	b004      	add	sp, #16
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	ffff8100 	.word	0xffff8100

0800c480 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	2203      	movs	r2, #3
 800c48c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c48e:	2300      	movs	r3, #0
}
 800c490:	4618      	mov	r0, r3
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr

0800c49c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 0303 	and.w	r3, r3, #3
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	370c      	adds	r7, #12
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c4b8:	b480      	push	{r7}
 800c4ba:	b085      	sub	sp, #20
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	681a      	ldr	r2, [r3, #0]
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c4d6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c4dc:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c4e2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	68da      	ldr	r2, [r3, #12]
 800c4ee:	4b06      	ldr	r3, [pc, #24]	@ (800c508 <SDMMC_SendCommand+0x50>)
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	68fa      	ldr	r2, [r7, #12]
 800c4f4:	431a      	orrs	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3714      	adds	r7, #20
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr
 800c508:	fffff000 	.word	0xfffff000

0800c50c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c50c:	b480      	push	{r7}
 800c50e:	b083      	sub	sp, #12
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	691b      	ldr	r3, [r3, #16]
 800c518:	b2db      	uxtb	r3, r3
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	370c      	adds	r7, #12
 800c51e:	46bd      	mov	sp, r7
 800c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c524:	4770      	bx	lr

0800c526 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c526:	b480      	push	{r7}
 800c528:	b085      	sub	sp, #20
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	3314      	adds	r3, #20
 800c534:	461a      	mov	r2, r3
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	4413      	add	r3, r2
 800c53a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
}  
 800c540:	4618      	mov	r0, r3
 800c542:	3714      	adds	r7, #20
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c54c:	b480      	push	{r7}
 800c54e:	b085      	sub	sp, #20
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	681a      	ldr	r2, [r3, #0]
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c562:	683b      	ldr	r3, [r7, #0]
 800c564:	685a      	ldr	r2, [r3, #4]
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c56a:	683b      	ldr	r3, [r7, #0]
 800c56c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c572:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c578:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c57e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c580:	68fa      	ldr	r2, [r7, #12]
 800c582:	4313      	orrs	r3, r2
 800c584:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c58a:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	431a      	orrs	r2, r3
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800c596:	2300      	movs	r3, #0

}
 800c598:	4618      	mov	r0, r3
 800c59a:	3714      	adds	r7, #20
 800c59c:	46bd      	mov	sp, r7
 800c59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b088      	sub	sp, #32
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c5b2:	2310      	movs	r3, #16
 800c5b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5b6:	2340      	movs	r3, #64	@ 0x40
 800c5b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c5c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5c4:	f107 0308 	add.w	r3, r7, #8
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f7ff ff74 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c5d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5d4:	2110      	movs	r1, #16
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f000 f9d6 	bl	800c988 <SDMMC_GetCmdResp1>
 800c5dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5de:	69fb      	ldr	r3, [r7, #28]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3720      	adds	r7, #32
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b088      	sub	sp, #32
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c5f6:	2311      	movs	r3, #17
 800c5f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5fa:	2340      	movs	r3, #64	@ 0x40
 800c5fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5fe:	2300      	movs	r3, #0
 800c600:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c602:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c606:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c608:	f107 0308 	add.w	r3, r7, #8
 800c60c:	4619      	mov	r1, r3
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f7ff ff52 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c614:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c618:	2111      	movs	r1, #17
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f000 f9b4 	bl	800c988 <SDMMC_GetCmdResp1>
 800c620:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c622:	69fb      	ldr	r3, [r7, #28]
}
 800c624:	4618      	mov	r0, r3
 800c626:	3720      	adds	r7, #32
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}

0800c62c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b088      	sub	sp, #32
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c63a:	2312      	movs	r3, #18
 800c63c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c63e:	2340      	movs	r3, #64	@ 0x40
 800c640:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c642:	2300      	movs	r3, #0
 800c644:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c646:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c64a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c64c:	f107 0308 	add.w	r3, r7, #8
 800c650:	4619      	mov	r1, r3
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f7ff ff30 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c65c:	2112      	movs	r1, #18
 800c65e:	6878      	ldr	r0, [r7, #4]
 800c660:	f000 f992 	bl	800c988 <SDMMC_GetCmdResp1>
 800c664:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c666:	69fb      	ldr	r3, [r7, #28]
}
 800c668:	4618      	mov	r0, r3
 800c66a:	3720      	adds	r7, #32
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b088      	sub	sp, #32
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
 800c678:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c67e:	2318      	movs	r3, #24
 800c680:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c682:	2340      	movs	r3, #64	@ 0x40
 800c684:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c686:	2300      	movs	r3, #0
 800c688:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c68a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c68e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c690:	f107 0308 	add.w	r3, r7, #8
 800c694:	4619      	mov	r1, r3
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7ff ff0e 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c69c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6a0:	2118      	movs	r1, #24
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 f970 	bl	800c988 <SDMMC_GetCmdResp1>
 800c6a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6aa:	69fb      	ldr	r3, [r7, #28]
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3720      	adds	r7, #32
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b088      	sub	sp, #32
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c6c2:	2319      	movs	r3, #25
 800c6c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6c6:	2340      	movs	r3, #64	@ 0x40
 800c6c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6d4:	f107 0308 	add.w	r3, r7, #8
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f7ff feec 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c6e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6e4:	2119      	movs	r1, #25
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 f94e 	bl	800c988 <SDMMC_GetCmdResp1>
 800c6ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6ee:	69fb      	ldr	r3, [r7, #28]
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3720      	adds	r7, #32
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b088      	sub	sp, #32
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c704:	230c      	movs	r3, #12
 800c706:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c708:	2340      	movs	r3, #64	@ 0x40
 800c70a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c70c:	2300      	movs	r3, #0
 800c70e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c710:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c714:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c716:	f107 0308 	add.w	r3, r7, #8
 800c71a:	4619      	mov	r1, r3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7ff fecb 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c722:	4a05      	ldr	r2, [pc, #20]	@ (800c738 <SDMMC_CmdStopTransfer+0x40>)
 800c724:	210c      	movs	r1, #12
 800c726:	6878      	ldr	r0, [r7, #4]
 800c728:	f000 f92e 	bl	800c988 <SDMMC_GetCmdResp1>
 800c72c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c72e:	69fb      	ldr	r3, [r7, #28]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3720      	adds	r7, #32
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	05f5e100 	.word	0x05f5e100

0800c73c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b08a      	sub	sp, #40	@ 0x28
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c74c:	2307      	movs	r3, #7
 800c74e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c750:	2340      	movs	r3, #64	@ 0x40
 800c752:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c754:	2300      	movs	r3, #0
 800c756:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c758:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c75c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c75e:	f107 0310 	add.w	r3, r7, #16
 800c762:	4619      	mov	r1, r3
 800c764:	68f8      	ldr	r0, [r7, #12]
 800c766:	f7ff fea7 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c76a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c76e:	2107      	movs	r1, #7
 800c770:	68f8      	ldr	r0, [r7, #12]
 800c772:	f000 f909 	bl	800c988 <SDMMC_GetCmdResp1>
 800c776:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800c778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c77a:	4618      	mov	r0, r3
 800c77c:	3728      	adds	r7, #40	@ 0x28
 800c77e:	46bd      	mov	sp, r7
 800c780:	bd80      	pop	{r7, pc}

0800c782 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c782:	b580      	push	{r7, lr}
 800c784:	b088      	sub	sp, #32
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c78a:	2300      	movs	r3, #0
 800c78c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c78e:	2300      	movs	r3, #0
 800c790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c792:	2300      	movs	r3, #0
 800c794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c796:	2300      	movs	r3, #0
 800c798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c79a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c79e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7a0:	f107 0308 	add.w	r3, r7, #8
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	6878      	ldr	r0, [r7, #4]
 800c7a8:	f7ff fe86 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fb23 	bl	800cdf8 <SDMMC_GetCmdError>
 800c7b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7b4:	69fb      	ldr	r3, [r7, #28]
}
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	3720      	adds	r7, #32
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	bd80      	pop	{r7, pc}

0800c7be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c7be:	b580      	push	{r7, lr}
 800c7c0:	b088      	sub	sp, #32
 800c7c2:	af00      	add	r7, sp, #0
 800c7c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c7c6:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800c7ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c7cc:	2308      	movs	r3, #8
 800c7ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7d0:	2340      	movs	r3, #64	@ 0x40
 800c7d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c7dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7de:	f107 0308 	add.w	r3, r7, #8
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f7ff fe67 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fab6 	bl	800cd5c <SDMMC_GetCmdResp7>
 800c7f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7f2:	69fb      	ldr	r3, [r7, #28]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	3720      	adds	r7, #32
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd80      	pop	{r7, pc}

0800c7fc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b088      	sub	sp, #32
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c80a:	2337      	movs	r3, #55	@ 0x37
 800c80c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c80e:	2340      	movs	r3, #64	@ 0x40
 800c810:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c812:	2300      	movs	r3, #0
 800c814:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c816:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c81a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c81c:	f107 0308 	add.w	r3, r7, #8
 800c820:	4619      	mov	r1, r3
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f7ff fe48 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c82c:	2137      	movs	r1, #55	@ 0x37
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f8aa 	bl	800c988 <SDMMC_GetCmdResp1>
 800c834:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c836:	69fb      	ldr	r3, [r7, #28]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	3720      	adds	r7, #32
 800c83c:	46bd      	mov	sp, r7
 800c83e:	bd80      	pop	{r7, pc}

0800c840 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b088      	sub	sp, #32
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c84a:	683a      	ldr	r2, [r7, #0]
 800c84c:	4b0d      	ldr	r3, [pc, #52]	@ (800c884 <SDMMC_CmdAppOperCommand+0x44>)
 800c84e:	4313      	orrs	r3, r2
 800c850:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c852:	2329      	movs	r3, #41	@ 0x29
 800c854:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c856:	2340      	movs	r3, #64	@ 0x40
 800c858:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c85a:	2300      	movs	r3, #0
 800c85c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c85e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c862:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c864:	f107 0308 	add.w	r3, r7, #8
 800c868:	4619      	mov	r1, r3
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f7ff fe24 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 f9bf 	bl	800cbf4 <SDMMC_GetCmdResp3>
 800c876:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c878:	69fb      	ldr	r3, [r7, #28]
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3720      	adds	r7, #32
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	80100000 	.word	0x80100000

0800c888 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b088      	sub	sp, #32
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c890:	2300      	movs	r3, #0
 800c892:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c894:	2302      	movs	r3, #2
 800c896:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c898:	23c0      	movs	r3, #192	@ 0xc0
 800c89a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c89c:	2300      	movs	r3, #0
 800c89e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8a6:	f107 0308 	add.w	r3, r7, #8
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f7ff fe03 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f000 f956 	bl	800cb64 <SDMMC_GetCmdResp2>
 800c8b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8ba:	69fb      	ldr	r3, [r7, #28]
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3720      	adds	r7, #32
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b088      	sub	sp, #32
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
 800c8cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c8d2:	2309      	movs	r3, #9
 800c8d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c8d6:	23c0      	movs	r3, #192	@ 0xc0
 800c8d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c8e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8e4:	f107 0308 	add.w	r3, r7, #8
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f7ff fde4 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 f937 	bl	800cb64 <SDMMC_GetCmdResp2>
 800c8f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8f8:	69fb      	ldr	r3, [r7, #28]
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3720      	adds	r7, #32
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b088      	sub	sp, #32
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c90c:	2300      	movs	r3, #0
 800c90e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c910:	2303      	movs	r3, #3
 800c912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c914:	2340      	movs	r3, #64	@ 0x40
 800c916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c918:	2300      	movs	r3, #0
 800c91a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c91c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c920:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c922:	f107 0308 	add.w	r3, r7, #8
 800c926:	4619      	mov	r1, r3
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f7ff fdc5 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c92e:	683a      	ldr	r2, [r7, #0]
 800c930:	2103      	movs	r1, #3
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f99c 	bl	800cc70 <SDMMC_GetCmdResp6>
 800c938:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c93a:	69fb      	ldr	r3, [r7, #28]
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3720      	adds	r7, #32
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}

0800c944 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c944:	b580      	push	{r7, lr}
 800c946:	b088      	sub	sp, #32
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c952:	230d      	movs	r3, #13
 800c954:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c956:	2340      	movs	r3, #64	@ 0x40
 800c958:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c95a:	2300      	movs	r3, #0
 800c95c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c95e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c962:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c964:	f107 0308 	add.w	r3, r7, #8
 800c968:	4619      	mov	r1, r3
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f7ff fda4 	bl	800c4b8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c970:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c974:	210d      	movs	r1, #13
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f806 	bl	800c988 <SDMMC_GetCmdResp1>
 800c97c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c97e:	69fb      	ldr	r3, [r7, #28]
}
 800c980:	4618      	mov	r0, r3
 800c982:	3720      	adds	r7, #32
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}

0800c988 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b088      	sub	sp, #32
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	460b      	mov	r3, r1
 800c992:	607a      	str	r2, [r7, #4]
 800c994:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c996:	4b70      	ldr	r3, [pc, #448]	@ (800cb58 <SDMMC_GetCmdResp1+0x1d0>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	4a70      	ldr	r2, [pc, #448]	@ (800cb5c <SDMMC_GetCmdResp1+0x1d4>)
 800c99c:	fba2 2303 	umull	r2, r3, r2, r3
 800c9a0:	0a5a      	lsrs	r2, r3, #9
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	fb02 f303 	mul.w	r3, r2, r3
 800c9a8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800c9aa:	69fb      	ldr	r3, [r7, #28]
 800c9ac:	1e5a      	subs	r2, r3, #1
 800c9ae:	61fa      	str	r2, [r7, #28]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d102      	bne.n	800c9ba <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c9b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c9b8:	e0c9      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9be:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d0ef      	beq.n	800c9aa <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800c9ca:	69bb      	ldr	r3, [r7, #24]
 800c9cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d1ea      	bne.n	800c9aa <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d004      	beq.n	800c9ea <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	2204      	movs	r2, #4
 800c9e4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9e6:	2304      	movs	r3, #4
 800c9e8:	e0b1      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c9ee:	f003 0301 	and.w	r3, r3, #1
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d004      	beq.n	800ca00 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	e0a6      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	22c5      	movs	r2, #197	@ 0xc5
 800ca04:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ca06:	68f8      	ldr	r0, [r7, #12]
 800ca08:	f7ff fd80 	bl	800c50c <SDMMC_GetCommandResponse>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	461a      	mov	r2, r3
 800ca10:	7afb      	ldrb	r3, [r7, #11]
 800ca12:	4293      	cmp	r3, r2
 800ca14:	d001      	beq.n	800ca1a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e099      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ca1a:	2100      	movs	r1, #0
 800ca1c:	68f8      	ldr	r0, [r7, #12]
 800ca1e:	f7ff fd82 	bl	800c526 <SDMMC_GetResponse>
 800ca22:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ca24:	697a      	ldr	r2, [r7, #20]
 800ca26:	4b4e      	ldr	r3, [pc, #312]	@ (800cb60 <SDMMC_GetCmdResp1+0x1d8>)
 800ca28:	4013      	ands	r3, r2
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d101      	bne.n	800ca32 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	e08d      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	da02      	bge.n	800ca3e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ca38:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ca3c:	e087      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d001      	beq.n	800ca4c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ca48:	2340      	movs	r3, #64	@ 0x40
 800ca4a:	e080      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d001      	beq.n	800ca5a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ca56:	2380      	movs	r3, #128	@ 0x80
 800ca58:	e079      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ca5a:	697b      	ldr	r3, [r7, #20]
 800ca5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d002      	beq.n	800ca6a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ca64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800ca68:	e071      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d002      	beq.n	800ca7a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ca74:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ca78:	e069      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d002      	beq.n	800ca8a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ca84:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca88:	e061      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ca8a:	697b      	ldr	r3, [r7, #20]
 800ca8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d002      	beq.n	800ca9a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ca94:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800ca98:	e059      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ca9a:	697b      	ldr	r3, [r7, #20]
 800ca9c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d002      	beq.n	800caaa <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800caa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800caa8:	e051      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d002      	beq.n	800caba <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cab4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cab8:	e049      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cac4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800cac8:	e041      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d002      	beq.n	800cada <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cad4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cad8:	e039      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cae4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800cae8:	e031      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d002      	beq.n	800cafa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800caf4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800caf8:	e029      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d002      	beq.n	800cb0a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cb04:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800cb08:	e021      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d002      	beq.n	800cb1a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cb14:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800cb18:	e019      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d002      	beq.n	800cb2a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cb24:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800cb28:	e011      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cb2a:	697b      	ldr	r3, [r7, #20]
 800cb2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d002      	beq.n	800cb3a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cb34:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800cb38:	e009      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	f003 0308 	and.w	r3, r3, #8
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d002      	beq.n	800cb4a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800cb44:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800cb48:	e001      	b.n	800cb4e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cb4a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3720      	adds	r7, #32
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	20000034 	.word	0x20000034
 800cb5c:	10624dd3 	.word	0x10624dd3
 800cb60:	fdffe008 	.word	0xfdffe008

0800cb64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cb6c:	4b1f      	ldr	r3, [pc, #124]	@ (800cbec <SDMMC_GetCmdResp2+0x88>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4a1f      	ldr	r2, [pc, #124]	@ (800cbf0 <SDMMC_GetCmdResp2+0x8c>)
 800cb72:	fba2 2303 	umull	r2, r3, r2, r3
 800cb76:	0a5b      	lsrs	r3, r3, #9
 800cb78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cb7c:	fb02 f303 	mul.w	r3, r2, r3
 800cb80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	1e5a      	subs	r2, r3, #1
 800cb86:	60fa      	str	r2, [r7, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d102      	bne.n	800cb92 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cb90:	e026      	b.n	800cbe0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb98:	68bb      	ldr	r3, [r7, #8]
 800cb9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d0ef      	beq.n	800cb82 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d1ea      	bne.n	800cb82 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbb0:	f003 0304 	and.w	r3, r3, #4
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d004      	beq.n	800cbc2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	2204      	movs	r2, #4
 800cbbc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cbbe:	2304      	movs	r3, #4
 800cbc0:	e00e      	b.n	800cbe0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbc6:	f003 0301 	and.w	r3, r3, #1
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d004      	beq.n	800cbd8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cbd4:	2301      	movs	r3, #1
 800cbd6:	e003      	b.n	800cbe0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	22c5      	movs	r2, #197	@ 0xc5
 800cbdc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800cbde:	2300      	movs	r3, #0
}
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	3714      	adds	r7, #20
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr
 800cbec:	20000034 	.word	0x20000034
 800cbf0:	10624dd3 	.word	0x10624dd3

0800cbf4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cbfc:	4b1a      	ldr	r3, [pc, #104]	@ (800cc68 <SDMMC_GetCmdResp3+0x74>)
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	4a1a      	ldr	r2, [pc, #104]	@ (800cc6c <SDMMC_GetCmdResp3+0x78>)
 800cc02:	fba2 2303 	umull	r2, r3, r2, r3
 800cc06:	0a5b      	lsrs	r3, r3, #9
 800cc08:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc0c:	fb02 f303 	mul.w	r3, r2, r3
 800cc10:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	1e5a      	subs	r2, r3, #1
 800cc16:	60fa      	str	r2, [r7, #12]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d102      	bne.n	800cc22 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc1c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cc20:	e01b      	b.n	800cc5a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc26:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d0ef      	beq.n	800cc12 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d1ea      	bne.n	800cc12 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cc40:	f003 0304 	and.w	r3, r3, #4
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d004      	beq.n	800cc52 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2204      	movs	r2, #4
 800cc4c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc4e:	2304      	movs	r3, #4
 800cc50:	e003      	b.n	800cc5a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	22c5      	movs	r2, #197	@ 0xc5
 800cc56:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr
 800cc66:	bf00      	nop
 800cc68:	20000034 	.word	0x20000034
 800cc6c:	10624dd3 	.word	0x10624dd3

0800cc70 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b088      	sub	sp, #32
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cc7e:	4b35      	ldr	r3, [pc, #212]	@ (800cd54 <SDMMC_GetCmdResp6+0xe4>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	4a35      	ldr	r2, [pc, #212]	@ (800cd58 <SDMMC_GetCmdResp6+0xe8>)
 800cc84:	fba2 2303 	umull	r2, r3, r2, r3
 800cc88:	0a5b      	lsrs	r3, r3, #9
 800cc8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc8e:	fb02 f303 	mul.w	r3, r2, r3
 800cc92:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cc94:	69fb      	ldr	r3, [r7, #28]
 800cc96:	1e5a      	subs	r2, r3, #1
 800cc98:	61fa      	str	r2, [r7, #28]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d102      	bne.n	800cca4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc9e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cca2:	e052      	b.n	800cd4a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cca8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ccaa:	69bb      	ldr	r3, [r7, #24]
 800ccac:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d0ef      	beq.n	800cc94 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ccb4:	69bb      	ldr	r3, [r7, #24]
 800ccb6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1ea      	bne.n	800cc94 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccc2:	f003 0304 	and.w	r3, r3, #4
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d004      	beq.n	800ccd4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	2204      	movs	r2, #4
 800ccce:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccd0:	2304      	movs	r3, #4
 800ccd2:	e03a      	b.n	800cd4a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ccd8:	f003 0301 	and.w	r3, r3, #1
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d004      	beq.n	800ccea <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	2201      	movs	r2, #1
 800cce4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cce6:	2301      	movs	r3, #1
 800cce8:	e02f      	b.n	800cd4a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ccea:	68f8      	ldr	r0, [r7, #12]
 800ccec:	f7ff fc0e 	bl	800c50c <SDMMC_GetCommandResponse>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	7afb      	ldrb	r3, [r7, #11]
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	d001      	beq.n	800ccfe <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e025      	b.n	800cd4a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	22c5      	movs	r2, #197	@ 0xc5
 800cd02:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cd04:	2100      	movs	r1, #0
 800cd06:	68f8      	ldr	r0, [r7, #12]
 800cd08:	f7ff fc0d 	bl	800c526 <SDMMC_GetResponse>
 800cd0c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d106      	bne.n	800cd26 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	0c1b      	lsrs	r3, r3, #16
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800cd22:	2300      	movs	r3, #0
 800cd24:	e011      	b.n	800cd4a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d002      	beq.n	800cd36 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cd30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cd34:	e009      	b.n	800cd4a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d002      	beq.n	800cd46 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cd40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800cd44:	e001      	b.n	800cd4a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cd46:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3720      	adds	r7, #32
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}
 800cd52:	bf00      	nop
 800cd54:	20000034 	.word	0x20000034
 800cd58:	10624dd3 	.word	0x10624dd3

0800cd5c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cd5c:	b480      	push	{r7}
 800cd5e:	b085      	sub	sp, #20
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cd64:	4b22      	ldr	r3, [pc, #136]	@ (800cdf0 <SDMMC_GetCmdResp7+0x94>)
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a22      	ldr	r2, [pc, #136]	@ (800cdf4 <SDMMC_GetCmdResp7+0x98>)
 800cd6a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd6e:	0a5b      	lsrs	r3, r3, #9
 800cd70:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cd74:	fb02 f303 	mul.w	r3, r2, r3
 800cd78:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	1e5a      	subs	r2, r3, #1
 800cd7e:	60fa      	str	r2, [r7, #12]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d102      	bne.n	800cd8a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd84:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800cd88:	e02c      	b.n	800cde4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cd8e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd90:	68bb      	ldr	r3, [r7, #8]
 800cd92:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d0ef      	beq.n	800cd7a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d1ea      	bne.n	800cd7a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cda8:	f003 0304 	and.w	r3, r3, #4
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d004      	beq.n	800cdba <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2204      	movs	r2, #4
 800cdb4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cdb6:	2304      	movs	r3, #4
 800cdb8:	e014      	b.n	800cde4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdbe:	f003 0301 	and.w	r3, r3, #1
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d004      	beq.n	800cdd0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2201      	movs	r2, #1
 800cdca:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e009      	b.n	800cde4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cdd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d002      	beq.n	800cde2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2240      	movs	r2, #64	@ 0x40
 800cde0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cde2:	2300      	movs	r3, #0
  
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3714      	adds	r7, #20
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr
 800cdf0:	20000034 	.word	0x20000034
 800cdf4:	10624dd3 	.word	0x10624dd3

0800cdf8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	b085      	sub	sp, #20
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce00:	4b11      	ldr	r3, [pc, #68]	@ (800ce48 <SDMMC_GetCmdError+0x50>)
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	4a11      	ldr	r2, [pc, #68]	@ (800ce4c <SDMMC_GetCmdError+0x54>)
 800ce06:	fba2 2303 	umull	r2, r3, r2, r3
 800ce0a:	0a5b      	lsrs	r3, r3, #9
 800ce0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ce10:	fb02 f303 	mul.w	r3, r2, r3
 800ce14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	1e5a      	subs	r2, r3, #1
 800ce1a:	60fa      	str	r2, [r7, #12]
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d102      	bne.n	800ce26 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ce24:	e009      	b.n	800ce3a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ce2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d0f1      	beq.n	800ce16 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	22c5      	movs	r2, #197	@ 0xc5
 800ce36:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3714      	adds	r7, #20
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	20000034 	.word	0x20000034
 800ce4c:	10624dd3 	.word	0x10624dd3

0800ce50 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ce54:	4904      	ldr	r1, [pc, #16]	@ (800ce68 <MX_FATFS_Init+0x18>)
 800ce56:	4805      	ldr	r0, [pc, #20]	@ (800ce6c <MX_FATFS_Init+0x1c>)
 800ce58:	f003 f8d4 	bl	8010004 <FATFS_LinkDriver>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	461a      	mov	r2, r3
 800ce60:	4b03      	ldr	r3, [pc, #12]	@ (800ce70 <MX_FATFS_Init+0x20>)
 800ce62:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ce64:	bf00      	nop
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	20000df0 	.word	0x20000df0
 800ce6c:	08015698 	.word	0x08015698
 800ce70:	20000dec 	.word	0x20000dec

0800ce74 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ce74:	b480      	push	{r7}
 800ce76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ce78:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr

0800ce84 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b082      	sub	sp, #8
 800ce88:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ce8e:	f000 f86d 	bl	800cf6c <BSP_SD_IsDetected>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d001      	beq.n	800ce9c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ce98:	2302      	movs	r3, #2
 800ce9a:	e005      	b.n	800cea8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ce9c:	4804      	ldr	r0, [pc, #16]	@ (800ceb0 <BSP_SD_Init+0x2c>)
 800ce9e:	f7fc fa43 	bl	8009328 <HAL_SD_Init>
 800cea2:	4603      	mov	r3, r0
 800cea4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cea6:	79fb      	ldrb	r3, [r7, #7]
}
 800cea8:	4618      	mov	r0, r3
 800ceaa:	3708      	adds	r7, #8
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	2000060c 	.word	0x2000060c

0800ceb4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b086      	sub	sp, #24
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cec0:	2300      	movs	r3, #0
 800cec2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	68ba      	ldr	r2, [r7, #8]
 800cec8:	68f9      	ldr	r1, [r7, #12]
 800ceca:	4806      	ldr	r0, [pc, #24]	@ (800cee4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800cecc:	f7fc fae4 	bl	8009498 <HAL_SD_ReadBlocks_DMA>
 800ced0:	4603      	mov	r3, r0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d001      	beq.n	800ceda <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800ced6:	2301      	movs	r3, #1
 800ced8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ceda:	7dfb      	ldrb	r3, [r7, #23]
}
 800cedc:	4618      	mov	r0, r3
 800cede:	3718      	adds	r7, #24
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}
 800cee4:	2000060c 	.word	0x2000060c

0800cee8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b086      	sub	sp, #24
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cef4:	2300      	movs	r3, #0
 800cef6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68ba      	ldr	r2, [r7, #8]
 800cefc:	68f9      	ldr	r1, [r7, #12]
 800cefe:	4806      	ldr	r0, [pc, #24]	@ (800cf18 <BSP_SD_WriteBlocks_DMA+0x30>)
 800cf00:	f7fc fbac 	bl	800965c <HAL_SD_WriteBlocks_DMA>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d001      	beq.n	800cf0e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cf0a:	2301      	movs	r3, #1
 800cf0c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cf0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3718      	adds	r7, #24
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	2000060c 	.word	0x2000060c

0800cf1c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cf20:	4805      	ldr	r0, [pc, #20]	@ (800cf38 <BSP_SD_GetCardState+0x1c>)
 800cf22:	f7fc fe5b 	bl	8009bdc <HAL_SD_GetCardState>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b04      	cmp	r3, #4
 800cf2a:	bf14      	ite	ne
 800cf2c:	2301      	movne	r3, #1
 800cf2e:	2300      	moveq	r3, #0
 800cf30:	b2db      	uxtb	r3, r3
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	2000060c 	.word	0x2000060c

0800cf3c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cf44:	6879      	ldr	r1, [r7, #4]
 800cf46:	4803      	ldr	r0, [pc, #12]	@ (800cf54 <BSP_SD_GetCardInfo+0x18>)
 800cf48:	f7fc fe1c 	bl	8009b84 <HAL_SD_GetCardInfo>
}
 800cf4c:	bf00      	nop
 800cf4e:	3708      	adds	r7, #8
 800cf50:	46bd      	mov	sp, r7
 800cf52:	bd80      	pop	{r7, pc}
 800cf54:	2000060c 	.word	0x2000060c

0800cf58 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cf60:	f000 f9b2 	bl	800d2c8 <BSP_SD_ReadCpltCallback>
}
 800cf64:	bf00      	nop
 800cf66:	3708      	adds	r7, #8
 800cf68:	46bd      	mov	sp, r7
 800cf6a:	bd80      	pop	{r7, pc}

0800cf6c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cf72:	2301      	movs	r3, #1
 800cf74:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cf76:	f000 f80b 	bl	800cf90 <BSP_PlatformIsDetected>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cf80:	2300      	movs	r3, #0
 800cf82:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cf84:	79fb      	ldrb	r3, [r7, #7]
 800cf86:	b2db      	uxtb	r3, r3
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cf96:	2301      	movs	r3, #1
 800cf98:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cf9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800cf9e:	4806      	ldr	r0, [pc, #24]	@ (800cfb8 <BSP_PlatformIsDetected+0x28>)
 800cfa0:	f7f9 fb08 	bl	80065b4 <HAL_GPIO_ReadPin>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d001      	beq.n	800cfae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800cfae:	79fb      	ldrb	r3, [r7, #7]
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	3708      	adds	r7, #8
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bd80      	pop	{r7, pc}
 800cfb8:	40020800 	.word	0x40020800

0800cfbc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
 800cfc2:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800cfc4:	f003 f951 	bl	801026a <osKernelSysTick>
 800cfc8:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800cfca:	e006      	b.n	800cfda <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cfcc:	f7ff ffa6 	bl	800cf1c <BSP_SD_GetCardState>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d101      	bne.n	800cfda <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	e009      	b.n	800cfee <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800cfda:	f003 f946 	bl	801026a <osKernelSysTick>
 800cfde:	4602      	mov	r2, r0
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	687a      	ldr	r2, [r7, #4]
 800cfe6:	429a      	cmp	r2, r3
 800cfe8:	d8f0      	bhi.n	800cfcc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800cfea:	f04f 33ff 	mov.w	r3, #4294967295
}
 800cfee:	4618      	mov	r0, r3
 800cff0:	3710      	adds	r7, #16
 800cff2:	46bd      	mov	sp, r7
 800cff4:	bd80      	pop	{r7, pc}
	...

0800cff8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	4603      	mov	r3, r0
 800d000:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d002:	4b0b      	ldr	r3, [pc, #44]	@ (800d030 <SD_CheckStatus+0x38>)
 800d004:	2201      	movs	r2, #1
 800d006:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d008:	f7ff ff88 	bl	800cf1c <BSP_SD_GetCardState>
 800d00c:	4603      	mov	r3, r0
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d107      	bne.n	800d022 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d012:	4b07      	ldr	r3, [pc, #28]	@ (800d030 <SD_CheckStatus+0x38>)
 800d014:	781b      	ldrb	r3, [r3, #0]
 800d016:	b2db      	uxtb	r3, r3
 800d018:	f023 0301 	bic.w	r3, r3, #1
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	4b04      	ldr	r3, [pc, #16]	@ (800d030 <SD_CheckStatus+0x38>)
 800d020:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d022:	4b03      	ldr	r3, [pc, #12]	@ (800d030 <SD_CheckStatus+0x38>)
 800d024:	781b      	ldrb	r3, [r3, #0]
 800d026:	b2db      	uxtb	r3, r3
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3708      	adds	r7, #8
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	2000003d 	.word	0x2000003d

0800d034 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d034:	b590      	push	{r4, r7, lr}
 800d036:	b087      	sub	sp, #28
 800d038:	af00      	add	r7, sp, #0
 800d03a:	4603      	mov	r3, r0
 800d03c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d03e:	4b20      	ldr	r3, [pc, #128]	@ (800d0c0 <SD_initialize+0x8c>)
 800d040:	2201      	movs	r2, #1
 800d042:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d044:	f003 f905 	bl	8010252 <osKernelRunning>
 800d048:	4603      	mov	r3, r0
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d030      	beq.n	800d0b0 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d04e:	f7ff ff19 	bl	800ce84 <BSP_SD_Init>
 800d052:	4603      	mov	r3, r0
 800d054:	2b00      	cmp	r3, #0
 800d056:	d107      	bne.n	800d068 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d058:	79fb      	ldrb	r3, [r7, #7]
 800d05a:	4618      	mov	r0, r3
 800d05c:	f7ff ffcc 	bl	800cff8 <SD_CheckStatus>
 800d060:	4603      	mov	r3, r0
 800d062:	461a      	mov	r2, r3
 800d064:	4b16      	ldr	r3, [pc, #88]	@ (800d0c0 <SD_initialize+0x8c>)
 800d066:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d068:	4b15      	ldr	r3, [pc, #84]	@ (800d0c0 <SD_initialize+0x8c>)
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d01e      	beq.n	800d0b0 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d072:	4b14      	ldr	r3, [pc, #80]	@ (800d0c4 <SD_initialize+0x90>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d10e      	bne.n	800d098 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d07a:	4b13      	ldr	r3, [pc, #76]	@ (800d0c8 <SD_initialize+0x94>)
 800d07c:	f107 0408 	add.w	r4, r7, #8
 800d080:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d082:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d086:	f107 0308 	add.w	r3, r7, #8
 800d08a:	2100      	movs	r1, #0
 800d08c:	4618      	mov	r0, r3
 800d08e:	f003 f9f9 	bl	8010484 <osMessageCreate>
 800d092:	4603      	mov	r3, r0
 800d094:	4a0b      	ldr	r2, [pc, #44]	@ (800d0c4 <SD_initialize+0x90>)
 800d096:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d098:	4b0a      	ldr	r3, [pc, #40]	@ (800d0c4 <SD_initialize+0x90>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d107      	bne.n	800d0b0 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d0a0:	4b07      	ldr	r3, [pc, #28]	@ (800d0c0 <SD_initialize+0x8c>)
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	f043 0301 	orr.w	r3, r3, #1
 800d0aa:	b2da      	uxtb	r2, r3
 800d0ac:	4b04      	ldr	r3, [pc, #16]	@ (800d0c0 <SD_initialize+0x8c>)
 800d0ae:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d0b0:	4b03      	ldr	r3, [pc, #12]	@ (800d0c0 <SD_initialize+0x8c>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	b2db      	uxtb	r3, r3
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	371c      	adds	r7, #28
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd90      	pop	{r4, r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	2000003d 	.word	0x2000003d
 800d0c4:	20000df4 	.word	0x20000df4
 800d0c8:	08013b60 	.word	0x08013b60

0800d0cc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b082      	sub	sp, #8
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	4603      	mov	r3, r0
 800d0d4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d0d6:	79fb      	ldrb	r3, [r7, #7]
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7ff ff8d 	bl	800cff8 <SD_CheckStatus>
 800d0de:	4603      	mov	r3, r0
}
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	3708      	adds	r7, #8
 800d0e4:	46bd      	mov	sp, r7
 800d0e6:	bd80      	pop	{r7, pc}

0800d0e8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b08a      	sub	sp, #40	@ 0x28
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60b9      	str	r1, [r7, #8]
 800d0f0:	607a      	str	r2, [r7, #4]
 800d0f2:	603b      	str	r3, [r7, #0]
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d0fe:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d102:	f7ff ff5b 	bl	800cfbc <SD_CheckStatusWithTimeout>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	da02      	bge.n	800d112 <SD_read+0x2a>
  {
    return res;
 800d10c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d110:	e032      	b.n	800d178 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d112:	683a      	ldr	r2, [r7, #0]
 800d114:	6879      	ldr	r1, [r7, #4]
 800d116:	68b8      	ldr	r0, [r7, #8]
 800d118:	f7ff fecc 	bl	800ceb4 <BSP_SD_ReadBlocks_DMA>
 800d11c:	4603      	mov	r3, r0
 800d11e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

    if (ret == MSD_OK) {
 800d122:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d126:	2b00      	cmp	r3, #0
 800d128:	d124      	bne.n	800d174 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d12a:	4b15      	ldr	r3, [pc, #84]	@ (800d180 <SD_read+0x98>)
 800d12c:	6819      	ldr	r1, [r3, #0]
 800d12e:	f107 0314 	add.w	r3, r7, #20
 800d132:	f247 5230 	movw	r2, #30000	@ 0x7530
 800d136:	4618      	mov	r0, r3
 800d138:	f003 fa0c 	bl	8010554 <osMessageGet>

    if (event.status == osEventMessage)
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	2b10      	cmp	r3, #16
 800d140:	d118      	bne.n	800d174 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	2b01      	cmp	r3, #1
 800d146:	d115      	bne.n	800d174 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d148:	f003 f88f 	bl	801026a <osKernelSysTick>
 800d14c:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d14e:	e008      	b.n	800d162 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d150:	f7ff fee4 	bl	800cf1c <BSP_SD_GetCardState>
 800d154:	4603      	mov	r3, r0
 800d156:	2b00      	cmp	r3, #0
 800d158:	d103      	bne.n	800d162 <SD_read+0x7a>
              {
                res = RES_OK;
 800d15a:	2300      	movs	r3, #0
 800d15c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d160:	e008      	b.n	800d174 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d162:	f003 f882 	bl	801026a <osKernelSysTick>
 800d166:	4602      	mov	r2, r0
 800d168:	6a3b      	ldr	r3, [r7, #32]
 800d16a:	1ad3      	subs	r3, r2, r3
 800d16c:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d170:	4293      	cmp	r3, r2
 800d172:	d9ed      	bls.n	800d150 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d174:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d178:	4618      	mov	r0, r3
 800d17a:	3728      	adds	r7, #40	@ 0x28
 800d17c:	46bd      	mov	sp, r7
 800d17e:	bd80      	pop	{r7, pc}
 800d180:	20000df4 	.word	0x20000df4

0800d184 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b08a      	sub	sp, #40	@ 0x28
 800d188:	af00      	add	r7, sp, #0
 800d18a:	60b9      	str	r1, [r7, #8]
 800d18c:	607a      	str	r2, [r7, #4]
 800d18e:	603b      	str	r3, [r7, #0]
 800d190:	4603      	mov	r3, r0
 800d192:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d19a:	f247 5030 	movw	r0, #30000	@ 0x7530
 800d19e:	f7ff ff0d 	bl	800cfbc <SD_CheckStatusWithTimeout>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	da02      	bge.n	800d1ae <SD_write+0x2a>
  {
    return res;
 800d1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d1ac:	e02e      	b.n	800d20c <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d1ae:	683a      	ldr	r2, [r7, #0]
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	68b8      	ldr	r0, [r7, #8]
 800d1b4:	f7ff fe98 	bl	800cee8 <BSP_SD_WriteBlocks_DMA>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d124      	bne.n	800d208 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d1be:	4b15      	ldr	r3, [pc, #84]	@ (800d214 <SD_write+0x90>)
 800d1c0:	6819      	ldr	r1, [r3, #0]
 800d1c2:	f107 0314 	add.w	r3, r7, #20
 800d1c6:	f247 5230 	movw	r2, #30000	@ 0x7530
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f003 f9c2 	bl	8010554 <osMessageGet>

    if (event.status == osEventMessage)
 800d1d0:	697b      	ldr	r3, [r7, #20]
 800d1d2:	2b10      	cmp	r3, #16
 800d1d4:	d118      	bne.n	800d208 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	2b02      	cmp	r3, #2
 800d1da:	d115      	bne.n	800d208 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d1dc:	f003 f845 	bl	801026a <osKernelSysTick>
 800d1e0:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d1e2:	e008      	b.n	800d1f6 <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d1e4:	f7ff fe9a 	bl	800cf1c <BSP_SD_GetCardState>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d103      	bne.n	800d1f6 <SD_write+0x72>
          {
            res = RES_OK;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800d1f4:	e008      	b.n	800d208 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d1f6:	f003 f838 	bl	801026a <osKernelSysTick>
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	6a3b      	ldr	r3, [r7, #32]
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	f247 522f 	movw	r2, #29999	@ 0x752f
 800d204:	4293      	cmp	r3, r2
 800d206:	d9ed      	bls.n	800d1e4 <SD_write+0x60>
    }

  }
#endif

  return res;
 800d208:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	3728      	adds	r7, #40	@ 0x28
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	20000df4 	.word	0x20000df4

0800d218 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b08c      	sub	sp, #48	@ 0x30
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	4603      	mov	r3, r0
 800d220:	603a      	str	r2, [r7, #0]
 800d222:	71fb      	strb	r3, [r7, #7]
 800d224:	460b      	mov	r3, r1
 800d226:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d228:	2301      	movs	r3, #1
 800d22a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d22e:	4b25      	ldr	r3, [pc, #148]	@ (800d2c4 <SD_ioctl+0xac>)
 800d230:	781b      	ldrb	r3, [r3, #0]
 800d232:	b2db      	uxtb	r3, r3
 800d234:	f003 0301 	and.w	r3, r3, #1
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d001      	beq.n	800d240 <SD_ioctl+0x28>
 800d23c:	2303      	movs	r3, #3
 800d23e:	e03c      	b.n	800d2ba <SD_ioctl+0xa2>

  switch (cmd)
 800d240:	79bb      	ldrb	r3, [r7, #6]
 800d242:	2b03      	cmp	r3, #3
 800d244:	d834      	bhi.n	800d2b0 <SD_ioctl+0x98>
 800d246:	a201      	add	r2, pc, #4	@ (adr r2, 800d24c <SD_ioctl+0x34>)
 800d248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d24c:	0800d25d 	.word	0x0800d25d
 800d250:	0800d265 	.word	0x0800d265
 800d254:	0800d27d 	.word	0x0800d27d
 800d258:	0800d297 	.word	0x0800d297
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d25c:	2300      	movs	r3, #0
 800d25e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d262:	e028      	b.n	800d2b6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d264:	f107 030c 	add.w	r3, r7, #12
 800d268:	4618      	mov	r0, r3
 800d26a:	f7ff fe67 	bl	800cf3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d26e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d274:	2300      	movs	r3, #0
 800d276:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d27a:	e01c      	b.n	800d2b6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d27c:	f107 030c 	add.w	r3, r7, #12
 800d280:	4618      	mov	r0, r3
 800d282:	f7ff fe5b 	bl	800cf3c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d288:	b29a      	uxth	r2, r3
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d28e:	2300      	movs	r3, #0
 800d290:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d294:	e00f      	b.n	800d2b6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d296:	f107 030c 	add.w	r3, r7, #12
 800d29a:	4618      	mov	r0, r3
 800d29c:	f7ff fe4e 	bl	800cf3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d2a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2a2:	0a5a      	lsrs	r2, r3, #9
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800d2ae:	e002      	b.n	800d2b6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d2b0:	2304      	movs	r3, #4
 800d2b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800d2b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	3730      	adds	r7, #48	@ 0x30
 800d2be:	46bd      	mov	sp, r7
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	2000003d 	.word	0x2000003d

0800d2c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d2cc:	4b04      	ldr	r3, [pc, #16]	@ (800d2e0 <BSP_SD_ReadCpltCallback+0x18>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	2101      	movs	r1, #1
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	f003 f8fd 	bl	80104d4 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
#endif
}
 800d2da:	bf00      	nop
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	20000df4 	.word	0x20000df4

0800d2e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d2ee:	79fb      	ldrb	r3, [r7, #7]
 800d2f0:	4a08      	ldr	r2, [pc, #32]	@ (800d314 <disk_status+0x30>)
 800d2f2:	009b      	lsls	r3, r3, #2
 800d2f4:	4413      	add	r3, r2
 800d2f6:	685b      	ldr	r3, [r3, #4]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	79fa      	ldrb	r2, [r7, #7]
 800d2fc:	4905      	ldr	r1, [pc, #20]	@ (800d314 <disk_status+0x30>)
 800d2fe:	440a      	add	r2, r1
 800d300:	7a12      	ldrb	r2, [r2, #8]
 800d302:	4610      	mov	r0, r2
 800d304:	4798      	blx	r3
 800d306:	4603      	mov	r3, r0
 800d308:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d30a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d30c:	4618      	mov	r0, r3
 800d30e:	3710      	adds	r7, #16
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}
 800d314:	20000e20 	.word	0x20000e20

0800d318 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b084      	sub	sp, #16
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	4603      	mov	r3, r0
 800d320:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d322:	2300      	movs	r3, #0
 800d324:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d326:	79fb      	ldrb	r3, [r7, #7]
 800d328:	4a0d      	ldr	r2, [pc, #52]	@ (800d360 <disk_initialize+0x48>)
 800d32a:	5cd3      	ldrb	r3, [r2, r3]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d111      	bne.n	800d354 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d330:	79fb      	ldrb	r3, [r7, #7]
 800d332:	4a0b      	ldr	r2, [pc, #44]	@ (800d360 <disk_initialize+0x48>)
 800d334:	2101      	movs	r1, #1
 800d336:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d338:	79fb      	ldrb	r3, [r7, #7]
 800d33a:	4a09      	ldr	r2, [pc, #36]	@ (800d360 <disk_initialize+0x48>)
 800d33c:	009b      	lsls	r3, r3, #2
 800d33e:	4413      	add	r3, r2
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	79fa      	ldrb	r2, [r7, #7]
 800d346:	4906      	ldr	r1, [pc, #24]	@ (800d360 <disk_initialize+0x48>)
 800d348:	440a      	add	r2, r1
 800d34a:	7a12      	ldrb	r2, [r2, #8]
 800d34c:	4610      	mov	r0, r2
 800d34e:	4798      	blx	r3
 800d350:	4603      	mov	r3, r0
 800d352:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d354:	7bfb      	ldrb	r3, [r7, #15]
}
 800d356:	4618      	mov	r0, r3
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	20000e20 	.word	0x20000e20

0800d364 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d364:	b590      	push	{r4, r7, lr}
 800d366:	b087      	sub	sp, #28
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60b9      	str	r1, [r7, #8]
 800d36c:	607a      	str	r2, [r7, #4]
 800d36e:	603b      	str	r3, [r7, #0]
 800d370:	4603      	mov	r3, r0
 800d372:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d374:	7bfb      	ldrb	r3, [r7, #15]
 800d376:	4a0a      	ldr	r2, [pc, #40]	@ (800d3a0 <disk_read+0x3c>)
 800d378:	009b      	lsls	r3, r3, #2
 800d37a:	4413      	add	r3, r2
 800d37c:	685b      	ldr	r3, [r3, #4]
 800d37e:	689c      	ldr	r4, [r3, #8]
 800d380:	7bfb      	ldrb	r3, [r7, #15]
 800d382:	4a07      	ldr	r2, [pc, #28]	@ (800d3a0 <disk_read+0x3c>)
 800d384:	4413      	add	r3, r2
 800d386:	7a18      	ldrb	r0, [r3, #8]
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	687a      	ldr	r2, [r7, #4]
 800d38c:	68b9      	ldr	r1, [r7, #8]
 800d38e:	47a0      	blx	r4
 800d390:	4603      	mov	r3, r0
 800d392:	75fb      	strb	r3, [r7, #23]
  return res;
 800d394:	7dfb      	ldrb	r3, [r7, #23]
}
 800d396:	4618      	mov	r0, r3
 800d398:	371c      	adds	r7, #28
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd90      	pop	{r4, r7, pc}
 800d39e:	bf00      	nop
 800d3a0:	20000e20 	.word	0x20000e20

0800d3a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d3a4:	b590      	push	{r4, r7, lr}
 800d3a6:	b087      	sub	sp, #28
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60b9      	str	r1, [r7, #8]
 800d3ac:	607a      	str	r2, [r7, #4]
 800d3ae:	603b      	str	r3, [r7, #0]
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d3b4:	7bfb      	ldrb	r3, [r7, #15]
 800d3b6:	4a0a      	ldr	r2, [pc, #40]	@ (800d3e0 <disk_write+0x3c>)
 800d3b8:	009b      	lsls	r3, r3, #2
 800d3ba:	4413      	add	r3, r2
 800d3bc:	685b      	ldr	r3, [r3, #4]
 800d3be:	68dc      	ldr	r4, [r3, #12]
 800d3c0:	7bfb      	ldrb	r3, [r7, #15]
 800d3c2:	4a07      	ldr	r2, [pc, #28]	@ (800d3e0 <disk_write+0x3c>)
 800d3c4:	4413      	add	r3, r2
 800d3c6:	7a18      	ldrb	r0, [r3, #8]
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	68b9      	ldr	r1, [r7, #8]
 800d3ce:	47a0      	blx	r4
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800d3d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	371c      	adds	r7, #28
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd90      	pop	{r4, r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	20000e20 	.word	0x20000e20

0800d3e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b084      	sub	sp, #16
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	603a      	str	r2, [r7, #0]
 800d3ee:	71fb      	strb	r3, [r7, #7]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d3f4:	79fb      	ldrb	r3, [r7, #7]
 800d3f6:	4a09      	ldr	r2, [pc, #36]	@ (800d41c <disk_ioctl+0x38>)
 800d3f8:	009b      	lsls	r3, r3, #2
 800d3fa:	4413      	add	r3, r2
 800d3fc:	685b      	ldr	r3, [r3, #4]
 800d3fe:	691b      	ldr	r3, [r3, #16]
 800d400:	79fa      	ldrb	r2, [r7, #7]
 800d402:	4906      	ldr	r1, [pc, #24]	@ (800d41c <disk_ioctl+0x38>)
 800d404:	440a      	add	r2, r1
 800d406:	7a10      	ldrb	r0, [r2, #8]
 800d408:	79b9      	ldrb	r1, [r7, #6]
 800d40a:	683a      	ldr	r2, [r7, #0]
 800d40c:	4798      	blx	r3
 800d40e:	4603      	mov	r3, r0
 800d410:	73fb      	strb	r3, [r7, #15]
  return res;
 800d412:	7bfb      	ldrb	r3, [r7, #15]
}
 800d414:	4618      	mov	r0, r3
 800d416:	3710      	adds	r7, #16
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}
 800d41c:	20000e20 	.word	0x20000e20

0800d420 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	3301      	adds	r3, #1
 800d42c:	781b      	ldrb	r3, [r3, #0]
 800d42e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d430:	89fb      	ldrh	r3, [r7, #14]
 800d432:	021b      	lsls	r3, r3, #8
 800d434:	b21a      	sxth	r2, r3
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	b21b      	sxth	r3, r3
 800d43c:	4313      	orrs	r3, r2
 800d43e:	b21b      	sxth	r3, r3
 800d440:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d442:	89fb      	ldrh	r3, [r7, #14]
}
 800d444:	4618      	mov	r0, r3
 800d446:	3714      	adds	r7, #20
 800d448:	46bd      	mov	sp, r7
 800d44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44e:	4770      	bx	lr

0800d450 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	3303      	adds	r3, #3
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	021b      	lsls	r3, r3, #8
 800d464:	687a      	ldr	r2, [r7, #4]
 800d466:	3202      	adds	r2, #2
 800d468:	7812      	ldrb	r2, [r2, #0]
 800d46a:	4313      	orrs	r3, r2
 800d46c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	021b      	lsls	r3, r3, #8
 800d472:	687a      	ldr	r2, [r7, #4]
 800d474:	3201      	adds	r2, #1
 800d476:	7812      	ldrb	r2, [r2, #0]
 800d478:	4313      	orrs	r3, r2
 800d47a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	021b      	lsls	r3, r3, #8
 800d480:	687a      	ldr	r2, [r7, #4]
 800d482:	7812      	ldrb	r2, [r2, #0]
 800d484:	4313      	orrs	r3, r2
 800d486:	60fb      	str	r3, [r7, #12]
	return rv;
 800d488:	68fb      	ldr	r3, [r7, #12]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3714      	adds	r7, #20
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d496:	b480      	push	{r7}
 800d498:	b083      	sub	sp, #12
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
 800d49e:	460b      	mov	r3, r1
 800d4a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	1c5a      	adds	r2, r3, #1
 800d4a6:	607a      	str	r2, [r7, #4]
 800d4a8:	887a      	ldrh	r2, [r7, #2]
 800d4aa:	b2d2      	uxtb	r2, r2
 800d4ac:	701a      	strb	r2, [r3, #0]
 800d4ae:	887b      	ldrh	r3, [r7, #2]
 800d4b0:	0a1b      	lsrs	r3, r3, #8
 800d4b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	1c5a      	adds	r2, r3, #1
 800d4b8:	607a      	str	r2, [r7, #4]
 800d4ba:	887a      	ldrh	r2, [r7, #2]
 800d4bc:	b2d2      	uxtb	r2, r2
 800d4be:	701a      	strb	r2, [r3, #0]
}
 800d4c0:	bf00      	nop
 800d4c2:	370c      	adds	r7, #12
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b083      	sub	sp, #12
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	1c5a      	adds	r2, r3, #1
 800d4da:	607a      	str	r2, [r7, #4]
 800d4dc:	683a      	ldr	r2, [r7, #0]
 800d4de:	b2d2      	uxtb	r2, r2
 800d4e0:	701a      	strb	r2, [r3, #0]
 800d4e2:	683b      	ldr	r3, [r7, #0]
 800d4e4:	0a1b      	lsrs	r3, r3, #8
 800d4e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	1c5a      	adds	r2, r3, #1
 800d4ec:	607a      	str	r2, [r7, #4]
 800d4ee:	683a      	ldr	r2, [r7, #0]
 800d4f0:	b2d2      	uxtb	r2, r2
 800d4f2:	701a      	strb	r2, [r3, #0]
 800d4f4:	683b      	ldr	r3, [r7, #0]
 800d4f6:	0a1b      	lsrs	r3, r3, #8
 800d4f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	1c5a      	adds	r2, r3, #1
 800d4fe:	607a      	str	r2, [r7, #4]
 800d500:	683a      	ldr	r2, [r7, #0]
 800d502:	b2d2      	uxtb	r2, r2
 800d504:	701a      	strb	r2, [r3, #0]
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	0a1b      	lsrs	r3, r3, #8
 800d50a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	607a      	str	r2, [r7, #4]
 800d512:	683a      	ldr	r2, [r7, #0]
 800d514:	b2d2      	uxtb	r2, r2
 800d516:	701a      	strb	r2, [r3, #0]
}
 800d518:	bf00      	nop
 800d51a:	370c      	adds	r7, #12
 800d51c:	46bd      	mov	sp, r7
 800d51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d522:	4770      	bx	lr

0800d524 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d524:	b480      	push	{r7}
 800d526:	b087      	sub	sp, #28
 800d528:	af00      	add	r7, sp, #0
 800d52a:	60f8      	str	r0, [r7, #12]
 800d52c:	60b9      	str	r1, [r7, #8]
 800d52e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d00d      	beq.n	800d55a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d53e:	693a      	ldr	r2, [r7, #16]
 800d540:	1c53      	adds	r3, r2, #1
 800d542:	613b      	str	r3, [r7, #16]
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	1c59      	adds	r1, r3, #1
 800d548:	6179      	str	r1, [r7, #20]
 800d54a:	7812      	ldrb	r2, [r2, #0]
 800d54c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	3b01      	subs	r3, #1
 800d552:	607b      	str	r3, [r7, #4]
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1f1      	bne.n	800d53e <mem_cpy+0x1a>
	}
}
 800d55a:	bf00      	nop
 800d55c:	371c      	adds	r7, #28
 800d55e:	46bd      	mov	sp, r7
 800d560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d564:	4770      	bx	lr

0800d566 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d566:	b480      	push	{r7}
 800d568:	b087      	sub	sp, #28
 800d56a:	af00      	add	r7, sp, #0
 800d56c:	60f8      	str	r0, [r7, #12]
 800d56e:	60b9      	str	r1, [r7, #8]
 800d570:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	1c5a      	adds	r2, r3, #1
 800d57a:	617a      	str	r2, [r7, #20]
 800d57c:	68ba      	ldr	r2, [r7, #8]
 800d57e:	b2d2      	uxtb	r2, r2
 800d580:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	3b01      	subs	r3, #1
 800d586:	607b      	str	r3, [r7, #4]
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d1f3      	bne.n	800d576 <mem_set+0x10>
}
 800d58e:	bf00      	nop
 800d590:	bf00      	nop
 800d592:	371c      	adds	r7, #28
 800d594:	46bd      	mov	sp, r7
 800d596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59a:	4770      	bx	lr

0800d59c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d59c:	b480      	push	{r7}
 800d59e:	b089      	sub	sp, #36	@ 0x24
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	60f8      	str	r0, [r7, #12]
 800d5a4:	60b9      	str	r1, [r7, #8]
 800d5a6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	61fb      	str	r3, [r7, #28]
 800d5ac:	68bb      	ldr	r3, [r7, #8]
 800d5ae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d5b4:	69fb      	ldr	r3, [r7, #28]
 800d5b6:	1c5a      	adds	r2, r3, #1
 800d5b8:	61fa      	str	r2, [r7, #28]
 800d5ba:	781b      	ldrb	r3, [r3, #0]
 800d5bc:	4619      	mov	r1, r3
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	1c5a      	adds	r2, r3, #1
 800d5c2:	61ba      	str	r2, [r7, #24]
 800d5c4:	781b      	ldrb	r3, [r3, #0]
 800d5c6:	1acb      	subs	r3, r1, r3
 800d5c8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	3b01      	subs	r3, #1
 800d5ce:	607b      	str	r3, [r7, #4]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d002      	beq.n	800d5dc <mem_cmp+0x40>
 800d5d6:	697b      	ldr	r3, [r7, #20]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d0eb      	beq.n	800d5b4 <mem_cmp+0x18>

	return r;
 800d5dc:	697b      	ldr	r3, [r7, #20]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3724      	adds	r7, #36	@ 0x24
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d5ea:	b480      	push	{r7}
 800d5ec:	b083      	sub	sp, #12
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d5f4:	e002      	b.n	800d5fc <chk_chr+0x12>
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	3301      	adds	r3, #1
 800d5fa:	607b      	str	r3, [r7, #4]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d005      	beq.n	800d610 <chk_chr+0x26>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	461a      	mov	r2, r3
 800d60a:	683b      	ldr	r3, [r7, #0]
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d1f2      	bne.n	800d5f6 <chk_chr+0xc>
	return *str;
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	781b      	ldrb	r3, [r3, #0]
}
 800d614:	4618      	mov	r0, r3
 800d616:	370c      	adds	r7, #12
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b082      	sub	sp, #8
 800d624:	af00      	add	r7, sp, #0
 800d626:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d009      	beq.n	800d642 <lock_fs+0x22>
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	691b      	ldr	r3, [r3, #16]
 800d632:	4618      	mov	r0, r3
 800d634:	f002 fdbc 	bl	80101b0 <ff_req_grant>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d001      	beq.n	800d642 <lock_fs+0x22>
 800d63e:	2301      	movs	r3, #1
 800d640:	e000      	b.n	800d644 <lock_fs+0x24>
 800d642:	2300      	movs	r3, #0
}
 800d644:	4618      	mov	r0, r3
 800d646:	3708      	adds	r7, #8
 800d648:	46bd      	mov	sp, r7
 800d64a:	bd80      	pop	{r7, pc}

0800d64c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	460b      	mov	r3, r1
 800d656:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00d      	beq.n	800d67a <unlock_fs+0x2e>
 800d65e:	78fb      	ldrb	r3, [r7, #3]
 800d660:	2b0c      	cmp	r3, #12
 800d662:	d00a      	beq.n	800d67a <unlock_fs+0x2e>
 800d664:	78fb      	ldrb	r3, [r7, #3]
 800d666:	2b0b      	cmp	r3, #11
 800d668:	d007      	beq.n	800d67a <unlock_fs+0x2e>
 800d66a:	78fb      	ldrb	r3, [r7, #3]
 800d66c:	2b0f      	cmp	r3, #15
 800d66e:	d004      	beq.n	800d67a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	691b      	ldr	r3, [r3, #16]
 800d674:	4618      	mov	r0, r3
 800d676:	f002 fdb0 	bl	80101da <ff_rel_grant>
	}
}
 800d67a:	bf00      	nop
 800d67c:	3708      	adds	r7, #8
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}
	...

0800d684 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d684:	b480      	push	{r7}
 800d686:	b085      	sub	sp, #20
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
 800d68c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d68e:	2300      	movs	r3, #0
 800d690:	60bb      	str	r3, [r7, #8]
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	60fb      	str	r3, [r7, #12]
 800d696:	e029      	b.n	800d6ec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d698:	4a27      	ldr	r2, [pc, #156]	@ (800d738 <chk_lock+0xb4>)
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	011b      	lsls	r3, r3, #4
 800d69e:	4413      	add	r3, r2
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d01d      	beq.n	800d6e2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d6a6:	4a24      	ldr	r2, [pc, #144]	@ (800d738 <chk_lock+0xb4>)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	011b      	lsls	r3, r3, #4
 800d6ac:	4413      	add	r3, r2
 800d6ae:	681a      	ldr	r2, [r3, #0]
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d116      	bne.n	800d6e6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d6b8:	4a1f      	ldr	r2, [pc, #124]	@ (800d738 <chk_lock+0xb4>)
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	011b      	lsls	r3, r3, #4
 800d6be:	4413      	add	r3, r2
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	681a      	ldr	r2, [r3, #0]
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	d10c      	bne.n	800d6e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d6cc:	4a1a      	ldr	r2, [pc, #104]	@ (800d738 <chk_lock+0xb4>)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	011b      	lsls	r3, r3, #4
 800d6d2:	4413      	add	r3, r2
 800d6d4:	3308      	adds	r3, #8
 800d6d6:	681a      	ldr	r2, [r3, #0]
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d102      	bne.n	800d6e6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d6e0:	e007      	b.n	800d6f2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d6e2:	2301      	movs	r3, #1
 800d6e4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	60fb      	str	r3, [r7, #12]
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	2b01      	cmp	r3, #1
 800d6f0:	d9d2      	bls.n	800d698 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	2b02      	cmp	r3, #2
 800d6f6:	d109      	bne.n	800d70c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d102      	bne.n	800d704 <chk_lock+0x80>
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	2b02      	cmp	r3, #2
 800d702:	d101      	bne.n	800d708 <chk_lock+0x84>
 800d704:	2300      	movs	r3, #0
 800d706:	e010      	b.n	800d72a <chk_lock+0xa6>
 800d708:	2312      	movs	r3, #18
 800d70a:	e00e      	b.n	800d72a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d108      	bne.n	800d724 <chk_lock+0xa0>
 800d712:	4a09      	ldr	r2, [pc, #36]	@ (800d738 <chk_lock+0xb4>)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	011b      	lsls	r3, r3, #4
 800d718:	4413      	add	r3, r2
 800d71a:	330c      	adds	r3, #12
 800d71c:	881b      	ldrh	r3, [r3, #0]
 800d71e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d722:	d101      	bne.n	800d728 <chk_lock+0xa4>
 800d724:	2310      	movs	r3, #16
 800d726:	e000      	b.n	800d72a <chk_lock+0xa6>
 800d728:	2300      	movs	r3, #0
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3714      	adds	r7, #20
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr
 800d736:	bf00      	nop
 800d738:	20000e00 	.word	0x20000e00

0800d73c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d73c:	b480      	push	{r7}
 800d73e:	b083      	sub	sp, #12
 800d740:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d742:	2300      	movs	r3, #0
 800d744:	607b      	str	r3, [r7, #4]
 800d746:	e002      	b.n	800d74e <enq_lock+0x12>
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	3301      	adds	r3, #1
 800d74c:	607b      	str	r3, [r7, #4]
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2b01      	cmp	r3, #1
 800d752:	d806      	bhi.n	800d762 <enq_lock+0x26>
 800d754:	4a09      	ldr	r2, [pc, #36]	@ (800d77c <enq_lock+0x40>)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	011b      	lsls	r3, r3, #4
 800d75a:	4413      	add	r3, r2
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d1f2      	bne.n	800d748 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2b02      	cmp	r3, #2
 800d766:	bf14      	ite	ne
 800d768:	2301      	movne	r3, #1
 800d76a:	2300      	moveq	r3, #0
 800d76c:	b2db      	uxtb	r3, r3
}
 800d76e:	4618      	mov	r0, r3
 800d770:	370c      	adds	r7, #12
 800d772:	46bd      	mov	sp, r7
 800d774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d778:	4770      	bx	lr
 800d77a:	bf00      	nop
 800d77c:	20000e00 	.word	0x20000e00

0800d780 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d780:	b480      	push	{r7}
 800d782:	b085      	sub	sp, #20
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
 800d788:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d78a:	2300      	movs	r3, #0
 800d78c:	60fb      	str	r3, [r7, #12]
 800d78e:	e01f      	b.n	800d7d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d790:	4a41      	ldr	r2, [pc, #260]	@ (800d898 <inc_lock+0x118>)
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	011b      	lsls	r3, r3, #4
 800d796:	4413      	add	r3, r2
 800d798:	681a      	ldr	r2, [r3, #0]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d113      	bne.n	800d7ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d7a2:	4a3d      	ldr	r2, [pc, #244]	@ (800d898 <inc_lock+0x118>)
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	011b      	lsls	r3, r3, #4
 800d7a8:	4413      	add	r3, r2
 800d7aa:	3304      	adds	r3, #4
 800d7ac:	681a      	ldr	r2, [r3, #0]
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d7b2:	429a      	cmp	r2, r3
 800d7b4:	d109      	bne.n	800d7ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d7b6:	4a38      	ldr	r2, [pc, #224]	@ (800d898 <inc_lock+0x118>)
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	011b      	lsls	r3, r3, #4
 800d7bc:	4413      	add	r3, r2
 800d7be:	3308      	adds	r3, #8
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d7c6:	429a      	cmp	r2, r3
 800d7c8:	d006      	beq.n	800d7d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	3301      	adds	r3, #1
 800d7ce:	60fb      	str	r3, [r7, #12]
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	2b01      	cmp	r3, #1
 800d7d4:	d9dc      	bls.n	800d790 <inc_lock+0x10>
 800d7d6:	e000      	b.n	800d7da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d7d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2b02      	cmp	r3, #2
 800d7de:	d132      	bne.n	800d846 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	60fb      	str	r3, [r7, #12]
 800d7e4:	e002      	b.n	800d7ec <inc_lock+0x6c>
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	60fb      	str	r3, [r7, #12]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2b01      	cmp	r3, #1
 800d7f0:	d806      	bhi.n	800d800 <inc_lock+0x80>
 800d7f2:	4a29      	ldr	r2, [pc, #164]	@ (800d898 <inc_lock+0x118>)
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	011b      	lsls	r3, r3, #4
 800d7f8:	4413      	add	r3, r2
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d1f2      	bne.n	800d7e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	2b02      	cmp	r3, #2
 800d804:	d101      	bne.n	800d80a <inc_lock+0x8a>
 800d806:	2300      	movs	r3, #0
 800d808:	e040      	b.n	800d88c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	4922      	ldr	r1, [pc, #136]	@ (800d898 <inc_lock+0x118>)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	011b      	lsls	r3, r3, #4
 800d814:	440b      	add	r3, r1
 800d816:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	689a      	ldr	r2, [r3, #8]
 800d81c:	491e      	ldr	r1, [pc, #120]	@ (800d898 <inc_lock+0x118>)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	011b      	lsls	r3, r3, #4
 800d822:	440b      	add	r3, r1
 800d824:	3304      	adds	r3, #4
 800d826:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	695a      	ldr	r2, [r3, #20]
 800d82c:	491a      	ldr	r1, [pc, #104]	@ (800d898 <inc_lock+0x118>)
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	011b      	lsls	r3, r3, #4
 800d832:	440b      	add	r3, r1
 800d834:	3308      	adds	r3, #8
 800d836:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d838:	4a17      	ldr	r2, [pc, #92]	@ (800d898 <inc_lock+0x118>)
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	011b      	lsls	r3, r3, #4
 800d83e:	4413      	add	r3, r2
 800d840:	330c      	adds	r3, #12
 800d842:	2200      	movs	r2, #0
 800d844:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d009      	beq.n	800d860 <inc_lock+0xe0>
 800d84c:	4a12      	ldr	r2, [pc, #72]	@ (800d898 <inc_lock+0x118>)
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	011b      	lsls	r3, r3, #4
 800d852:	4413      	add	r3, r2
 800d854:	330c      	adds	r3, #12
 800d856:	881b      	ldrh	r3, [r3, #0]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d001      	beq.n	800d860 <inc_lock+0xe0>
 800d85c:	2300      	movs	r3, #0
 800d85e:	e015      	b.n	800d88c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d108      	bne.n	800d878 <inc_lock+0xf8>
 800d866:	4a0c      	ldr	r2, [pc, #48]	@ (800d898 <inc_lock+0x118>)
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	011b      	lsls	r3, r3, #4
 800d86c:	4413      	add	r3, r2
 800d86e:	330c      	adds	r3, #12
 800d870:	881b      	ldrh	r3, [r3, #0]
 800d872:	3301      	adds	r3, #1
 800d874:	b29a      	uxth	r2, r3
 800d876:	e001      	b.n	800d87c <inc_lock+0xfc>
 800d878:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d87c:	4906      	ldr	r1, [pc, #24]	@ (800d898 <inc_lock+0x118>)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	011b      	lsls	r3, r3, #4
 800d882:	440b      	add	r3, r1
 800d884:	330c      	adds	r3, #12
 800d886:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	3301      	adds	r3, #1
}
 800d88c:	4618      	mov	r0, r3
 800d88e:	3714      	adds	r7, #20
 800d890:	46bd      	mov	sp, r7
 800d892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d896:	4770      	bx	lr
 800d898:	20000e00 	.word	0x20000e00

0800d89c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d89c:	b480      	push	{r7}
 800d89e:	b085      	sub	sp, #20
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	3b01      	subs	r3, #1
 800d8a8:	607b      	str	r3, [r7, #4]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d825      	bhi.n	800d8fc <dec_lock+0x60>
		n = Files[i].ctr;
 800d8b0:	4a17      	ldr	r2, [pc, #92]	@ (800d910 <dec_lock+0x74>)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	011b      	lsls	r3, r3, #4
 800d8b6:	4413      	add	r3, r2
 800d8b8:	330c      	adds	r3, #12
 800d8ba:	881b      	ldrh	r3, [r3, #0]
 800d8bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d8be:	89fb      	ldrh	r3, [r7, #14]
 800d8c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d8c4:	d101      	bne.n	800d8ca <dec_lock+0x2e>
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d8ca:	89fb      	ldrh	r3, [r7, #14]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d002      	beq.n	800d8d6 <dec_lock+0x3a>
 800d8d0:	89fb      	ldrh	r3, [r7, #14]
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d8d6:	4a0e      	ldr	r2, [pc, #56]	@ (800d910 <dec_lock+0x74>)
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	011b      	lsls	r3, r3, #4
 800d8dc:	4413      	add	r3, r2
 800d8de:	330c      	adds	r3, #12
 800d8e0:	89fa      	ldrh	r2, [r7, #14]
 800d8e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d8e4:	89fb      	ldrh	r3, [r7, #14]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d105      	bne.n	800d8f6 <dec_lock+0x5a>
 800d8ea:	4a09      	ldr	r2, [pc, #36]	@ (800d910 <dec_lock+0x74>)
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	011b      	lsls	r3, r3, #4
 800d8f0:	4413      	add	r3, r2
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	737b      	strb	r3, [r7, #13]
 800d8fa:	e001      	b.n	800d900 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d8fc:	2302      	movs	r3, #2
 800d8fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d900:	7b7b      	ldrb	r3, [r7, #13]
}
 800d902:	4618      	mov	r0, r3
 800d904:	3714      	adds	r7, #20
 800d906:	46bd      	mov	sp, r7
 800d908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90c:	4770      	bx	lr
 800d90e:	bf00      	nop
 800d910:	20000e00 	.word	0x20000e00

0800d914 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d914:	b480      	push	{r7}
 800d916:	b085      	sub	sp, #20
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d91c:	2300      	movs	r3, #0
 800d91e:	60fb      	str	r3, [r7, #12]
 800d920:	e010      	b.n	800d944 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d922:	4a0d      	ldr	r2, [pc, #52]	@ (800d958 <clear_lock+0x44>)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	011b      	lsls	r3, r3, #4
 800d928:	4413      	add	r3, r2
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	687a      	ldr	r2, [r7, #4]
 800d92e:	429a      	cmp	r2, r3
 800d930:	d105      	bne.n	800d93e <clear_lock+0x2a>
 800d932:	4a09      	ldr	r2, [pc, #36]	@ (800d958 <clear_lock+0x44>)
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	011b      	lsls	r3, r3, #4
 800d938:	4413      	add	r3, r2
 800d93a:	2200      	movs	r2, #0
 800d93c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	3301      	adds	r3, #1
 800d942:	60fb      	str	r3, [r7, #12]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	2b01      	cmp	r3, #1
 800d948:	d9eb      	bls.n	800d922 <clear_lock+0xe>
	}
}
 800d94a:	bf00      	nop
 800d94c:	bf00      	nop
 800d94e:	3714      	adds	r7, #20
 800d950:	46bd      	mov	sp, r7
 800d952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d956:	4770      	bx	lr
 800d958:	20000e00 	.word	0x20000e00

0800d95c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b086      	sub	sp, #24
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d964:	2300      	movs	r3, #0
 800d966:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	78db      	ldrb	r3, [r3, #3]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d034      	beq.n	800d9da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d974:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	7858      	ldrb	r0, [r3, #1]
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d980:	2301      	movs	r3, #1
 800d982:	697a      	ldr	r2, [r7, #20]
 800d984:	f7ff fd0e 	bl	800d3a4 <disk_write>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d002      	beq.n	800d994 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d98e:	2301      	movs	r3, #1
 800d990:	73fb      	strb	r3, [r7, #15]
 800d992:	e022      	b.n	800d9da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2200      	movs	r2, #0
 800d998:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d99e:	697a      	ldr	r2, [r7, #20]
 800d9a0:	1ad2      	subs	r2, r2, r3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6a1b      	ldr	r3, [r3, #32]
 800d9a6:	429a      	cmp	r2, r3
 800d9a8:	d217      	bcs.n	800d9da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	789b      	ldrb	r3, [r3, #2]
 800d9ae:	613b      	str	r3, [r7, #16]
 800d9b0:	e010      	b.n	800d9d4 <sync_window+0x78>
					wsect += fs->fsize;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	6a1b      	ldr	r3, [r3, #32]
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	4413      	add	r3, r2
 800d9ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	7858      	ldrb	r0, [r3, #1]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d9c6:	2301      	movs	r3, #1
 800d9c8:	697a      	ldr	r2, [r7, #20]
 800d9ca:	f7ff fceb 	bl	800d3a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d9ce:	693b      	ldr	r3, [r7, #16]
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	613b      	str	r3, [r7, #16]
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d8eb      	bhi.n	800d9b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	3718      	adds	r7, #24
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	bd80      	pop	{r7, pc}

0800d9e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
 800d9ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9f6:	683a      	ldr	r2, [r7, #0]
 800d9f8:	429a      	cmp	r2, r3
 800d9fa:	d01b      	beq.n	800da34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7ff ffad 	bl	800d95c <sync_window>
 800da02:	4603      	mov	r3, r0
 800da04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800da06:	7bfb      	ldrb	r3, [r7, #15]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d113      	bne.n	800da34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	7858      	ldrb	r0, [r3, #1]
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800da16:	2301      	movs	r3, #1
 800da18:	683a      	ldr	r2, [r7, #0]
 800da1a:	f7ff fca3 	bl	800d364 <disk_read>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b00      	cmp	r3, #0
 800da22:	d004      	beq.n	800da2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800da24:	f04f 33ff 	mov.w	r3, #4294967295
 800da28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800da2a:	2301      	movs	r3, #1
 800da2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	683a      	ldr	r2, [r7, #0]
 800da32:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800da34:	7bfb      	ldrb	r3, [r7, #15]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
	...

0800da40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	b084      	sub	sp, #16
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7ff ff87 	bl	800d95c <sync_window>
 800da4e:	4603      	mov	r3, r0
 800da50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800da52:	7bfb      	ldrb	r3, [r7, #15]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d158      	bne.n	800db0a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	781b      	ldrb	r3, [r3, #0]
 800da5c:	2b03      	cmp	r3, #3
 800da5e:	d148      	bne.n	800daf2 <sync_fs+0xb2>
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	791b      	ldrb	r3, [r3, #4]
 800da64:	2b01      	cmp	r3, #1
 800da66:	d144      	bne.n	800daf2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	3338      	adds	r3, #56	@ 0x38
 800da6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800da70:	2100      	movs	r1, #0
 800da72:	4618      	mov	r0, r3
 800da74:	f7ff fd77 	bl	800d566 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	3338      	adds	r3, #56	@ 0x38
 800da7c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800da80:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800da84:	4618      	mov	r0, r3
 800da86:	f7ff fd06 	bl	800d496 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	3338      	adds	r3, #56	@ 0x38
 800da8e:	4921      	ldr	r1, [pc, #132]	@ (800db14 <sync_fs+0xd4>)
 800da90:	4618      	mov	r0, r3
 800da92:	f7ff fd1b 	bl	800d4cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	3338      	adds	r3, #56	@ 0x38
 800da9a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800da9e:	491e      	ldr	r1, [pc, #120]	@ (800db18 <sync_fs+0xd8>)
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff fd13 	bl	800d4cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	3338      	adds	r3, #56	@ 0x38
 800daaa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	699b      	ldr	r3, [r3, #24]
 800dab2:	4619      	mov	r1, r3
 800dab4:	4610      	mov	r0, r2
 800dab6:	f7ff fd09 	bl	800d4cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	3338      	adds	r3, #56	@ 0x38
 800dabe:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	695b      	ldr	r3, [r3, #20]
 800dac6:	4619      	mov	r1, r3
 800dac8:	4610      	mov	r0, r2
 800daca:	f7ff fcff 	bl	800d4cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dad2:	1c5a      	adds	r2, r3, #1
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	7858      	ldrb	r0, [r3, #1]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dae6:	2301      	movs	r3, #1
 800dae8:	f7ff fc5c 	bl	800d3a4 <disk_write>
			fs->fsi_flag = 0;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2200      	movs	r2, #0
 800daf0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	785b      	ldrb	r3, [r3, #1]
 800daf6:	2200      	movs	r2, #0
 800daf8:	2100      	movs	r1, #0
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff fc72 	bl	800d3e4 <disk_ioctl>
 800db00:	4603      	mov	r3, r0
 800db02:	2b00      	cmp	r3, #0
 800db04:	d001      	beq.n	800db0a <sync_fs+0xca>
 800db06:	2301      	movs	r3, #1
 800db08:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800db0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800db0c:	4618      	mov	r0, r3
 800db0e:	3710      	adds	r7, #16
 800db10:	46bd      	mov	sp, r7
 800db12:	bd80      	pop	{r7, pc}
 800db14:	41615252 	.word	0x41615252
 800db18:	61417272 	.word	0x61417272

0800db1c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b083      	sub	sp, #12
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	3b02      	subs	r3, #2
 800db2a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	69db      	ldr	r3, [r3, #28]
 800db30:	3b02      	subs	r3, #2
 800db32:	683a      	ldr	r2, [r7, #0]
 800db34:	429a      	cmp	r2, r3
 800db36:	d301      	bcc.n	800db3c <clust2sect+0x20>
 800db38:	2300      	movs	r3, #0
 800db3a:	e008      	b.n	800db4e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	895b      	ldrh	r3, [r3, #10]
 800db40:	461a      	mov	r2, r3
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	fb03 f202 	mul.w	r2, r3, r2
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db4c:	4413      	add	r3, r2
}
 800db4e:	4618      	mov	r0, r3
 800db50:	370c      	adds	r7, #12
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr

0800db5a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b086      	sub	sp, #24
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
 800db62:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	2b01      	cmp	r3, #1
 800db6e:	d904      	bls.n	800db7a <get_fat+0x20>
 800db70:	693b      	ldr	r3, [r7, #16]
 800db72:	69db      	ldr	r3, [r3, #28]
 800db74:	683a      	ldr	r2, [r7, #0]
 800db76:	429a      	cmp	r2, r3
 800db78:	d302      	bcc.n	800db80 <get_fat+0x26>
		val = 1;	/* Internal error */
 800db7a:	2301      	movs	r3, #1
 800db7c:	617b      	str	r3, [r7, #20]
 800db7e:	e08e      	b.n	800dc9e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800db80:	f04f 33ff 	mov.w	r3, #4294967295
 800db84:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	2b03      	cmp	r3, #3
 800db8c:	d061      	beq.n	800dc52 <get_fat+0xf8>
 800db8e:	2b03      	cmp	r3, #3
 800db90:	dc7b      	bgt.n	800dc8a <get_fat+0x130>
 800db92:	2b01      	cmp	r3, #1
 800db94:	d002      	beq.n	800db9c <get_fat+0x42>
 800db96:	2b02      	cmp	r3, #2
 800db98:	d041      	beq.n	800dc1e <get_fat+0xc4>
 800db9a:	e076      	b.n	800dc8a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	60fb      	str	r3, [r7, #12]
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	085b      	lsrs	r3, r3, #1
 800dba4:	68fa      	ldr	r2, [r7, #12]
 800dba6:	4413      	add	r3, r2
 800dba8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	0a5b      	lsrs	r3, r3, #9
 800dbb2:	4413      	add	r3, r2
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6938      	ldr	r0, [r7, #16]
 800dbb8:	f7ff ff14 	bl	800d9e4 <move_window>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d166      	bne.n	800dc90 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	1c5a      	adds	r2, r3, #1
 800dbc6:	60fa      	str	r2, [r7, #12]
 800dbc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbcc:	693a      	ldr	r2, [r7, #16]
 800dbce:	4413      	add	r3, r2
 800dbd0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dbd4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dbd6:	693b      	ldr	r3, [r7, #16]
 800dbd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	0a5b      	lsrs	r3, r3, #9
 800dbde:	4413      	add	r3, r2
 800dbe0:	4619      	mov	r1, r3
 800dbe2:	6938      	ldr	r0, [r7, #16]
 800dbe4:	f7ff fefe 	bl	800d9e4 <move_window>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d152      	bne.n	800dc94 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dbf4:	693a      	ldr	r2, [r7, #16]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800dbfc:	021b      	lsls	r3, r3, #8
 800dbfe:	68ba      	ldr	r2, [r7, #8]
 800dc00:	4313      	orrs	r3, r2
 800dc02:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	f003 0301 	and.w	r3, r3, #1
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d002      	beq.n	800dc14 <get_fat+0xba>
 800dc0e:	68bb      	ldr	r3, [r7, #8]
 800dc10:	091b      	lsrs	r3, r3, #4
 800dc12:	e002      	b.n	800dc1a <get_fat+0xc0>
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dc1a:	617b      	str	r3, [r7, #20]
			break;
 800dc1c:	e03f      	b.n	800dc9e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dc22:	683b      	ldr	r3, [r7, #0]
 800dc24:	0a1b      	lsrs	r3, r3, #8
 800dc26:	4413      	add	r3, r2
 800dc28:	4619      	mov	r1, r3
 800dc2a:	6938      	ldr	r0, [r7, #16]
 800dc2c:	f7ff feda 	bl	800d9e4 <move_window>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d130      	bne.n	800dc98 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	005b      	lsls	r3, r3, #1
 800dc40:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800dc44:	4413      	add	r3, r2
 800dc46:	4618      	mov	r0, r3
 800dc48:	f7ff fbea 	bl	800d420 <ld_word>
 800dc4c:	4603      	mov	r3, r0
 800dc4e:	617b      	str	r3, [r7, #20]
			break;
 800dc50:	e025      	b.n	800dc9e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc52:	693b      	ldr	r3, [r7, #16]
 800dc54:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dc56:	683b      	ldr	r3, [r7, #0]
 800dc58:	09db      	lsrs	r3, r3, #7
 800dc5a:	4413      	add	r3, r2
 800dc5c:	4619      	mov	r1, r3
 800dc5e:	6938      	ldr	r0, [r7, #16]
 800dc60:	f7ff fec0 	bl	800d9e4 <move_window>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d118      	bne.n	800dc9c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dc6a:	693b      	ldr	r3, [r7, #16]
 800dc6c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	009b      	lsls	r3, r3, #2
 800dc74:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800dc78:	4413      	add	r3, r2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7ff fbe8 	bl	800d450 <ld_dword>
 800dc80:	4603      	mov	r3, r0
 800dc82:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800dc86:	617b      	str	r3, [r7, #20]
			break;
 800dc88:	e009      	b.n	800dc9e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	617b      	str	r3, [r7, #20]
 800dc8e:	e006      	b.n	800dc9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc90:	bf00      	nop
 800dc92:	e004      	b.n	800dc9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dc94:	bf00      	nop
 800dc96:	e002      	b.n	800dc9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dc98:	bf00      	nop
 800dc9a:	e000      	b.n	800dc9e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dc9c:	bf00      	nop
		}
	}

	return val;
 800dc9e:	697b      	ldr	r3, [r7, #20]
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3718      	adds	r7, #24
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800dca8:	b590      	push	{r4, r7, lr}
 800dcaa:	b089      	sub	sp, #36	@ 0x24
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800dcb4:	2302      	movs	r3, #2
 800dcb6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	2b01      	cmp	r3, #1
 800dcbc:	f240 80d9 	bls.w	800de72 <put_fat+0x1ca>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	69db      	ldr	r3, [r3, #28]
 800dcc4:	68ba      	ldr	r2, [r7, #8]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	f080 80d3 	bcs.w	800de72 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	2b03      	cmp	r3, #3
 800dcd2:	f000 8096 	beq.w	800de02 <put_fat+0x15a>
 800dcd6:	2b03      	cmp	r3, #3
 800dcd8:	f300 80cb 	bgt.w	800de72 <put_fat+0x1ca>
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d002      	beq.n	800dce6 <put_fat+0x3e>
 800dce0:	2b02      	cmp	r3, #2
 800dce2:	d06e      	beq.n	800ddc2 <put_fat+0x11a>
 800dce4:	e0c5      	b.n	800de72 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	61bb      	str	r3, [r7, #24]
 800dcea:	69bb      	ldr	r3, [r7, #24]
 800dcec:	085b      	lsrs	r3, r3, #1
 800dcee:	69ba      	ldr	r2, [r7, #24]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dcf8:	69bb      	ldr	r3, [r7, #24]
 800dcfa:	0a5b      	lsrs	r3, r3, #9
 800dcfc:	4413      	add	r3, r2
 800dcfe:	4619      	mov	r1, r3
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f7ff fe6f 	bl	800d9e4 <move_window>
 800dd06:	4603      	mov	r3, r0
 800dd08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd0a:	7ffb      	ldrb	r3, [r7, #31]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	f040 80a9 	bne.w	800de64 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	1c59      	adds	r1, r3, #1
 800dd1c:	61b9      	str	r1, [r7, #24]
 800dd1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd22:	4413      	add	r3, r2
 800dd24:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dd26:	68bb      	ldr	r3, [r7, #8]
 800dd28:	f003 0301 	and.w	r3, r3, #1
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00d      	beq.n	800dd4c <put_fat+0xa4>
 800dd30:	697b      	ldr	r3, [r7, #20]
 800dd32:	781b      	ldrb	r3, [r3, #0]
 800dd34:	b25b      	sxtb	r3, r3
 800dd36:	f003 030f 	and.w	r3, r3, #15
 800dd3a:	b25a      	sxtb	r2, r3
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	b2db      	uxtb	r3, r3
 800dd40:	011b      	lsls	r3, r3, #4
 800dd42:	b25b      	sxtb	r3, r3
 800dd44:	4313      	orrs	r3, r2
 800dd46:	b25b      	sxtb	r3, r3
 800dd48:	b2db      	uxtb	r3, r3
 800dd4a:	e001      	b.n	800dd50 <put_fat+0xa8>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	697a      	ldr	r2, [r7, #20]
 800dd52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2201      	movs	r2, #1
 800dd58:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	0a5b      	lsrs	r3, r3, #9
 800dd62:	4413      	add	r3, r2
 800dd64:	4619      	mov	r1, r3
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f7ff fe3c 	bl	800d9e4 <move_window>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dd70:	7ffb      	ldrb	r3, [r7, #31]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d178      	bne.n	800de68 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800dd7c:	69bb      	ldr	r3, [r7, #24]
 800dd7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd82:	4413      	add	r3, r2
 800dd84:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	f003 0301 	and.w	r3, r3, #1
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d003      	beq.n	800dd98 <put_fat+0xf0>
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	091b      	lsrs	r3, r3, #4
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	e00e      	b.n	800ddb6 <put_fat+0x10e>
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	781b      	ldrb	r3, [r3, #0]
 800dd9c:	b25b      	sxtb	r3, r3
 800dd9e:	f023 030f 	bic.w	r3, r3, #15
 800dda2:	b25a      	sxtb	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	0a1b      	lsrs	r3, r3, #8
 800dda8:	b25b      	sxtb	r3, r3
 800ddaa:	f003 030f 	and.w	r3, r3, #15
 800ddae:	b25b      	sxtb	r3, r3
 800ddb0:	4313      	orrs	r3, r2
 800ddb2:	b25b      	sxtb	r3, r3
 800ddb4:	b2db      	uxtb	r3, r3
 800ddb6:	697a      	ldr	r2, [r7, #20]
 800ddb8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	2201      	movs	r2, #1
 800ddbe:	70da      	strb	r2, [r3, #3]
			break;
 800ddc0:	e057      	b.n	800de72 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	0a1b      	lsrs	r3, r3, #8
 800ddca:	4413      	add	r3, r2
 800ddcc:	4619      	mov	r1, r3
 800ddce:	68f8      	ldr	r0, [r7, #12]
 800ddd0:	f7ff fe08 	bl	800d9e4 <move_window>
 800ddd4:	4603      	mov	r3, r0
 800ddd6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ddd8:	7ffb      	ldrb	r3, [r7, #31]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d146      	bne.n	800de6c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	005b      	lsls	r3, r3, #1
 800dde8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ddec:	4413      	add	r3, r2
 800ddee:	687a      	ldr	r2, [r7, #4]
 800ddf0:	b292      	uxth	r2, r2
 800ddf2:	4611      	mov	r1, r2
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff fb4e 	bl	800d496 <st_word>
			fs->wflag = 1;
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2201      	movs	r2, #1
 800ddfe:	70da      	strb	r2, [r3, #3]
			break;
 800de00:	e037      	b.n	800de72 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800de06:	68bb      	ldr	r3, [r7, #8]
 800de08:	09db      	lsrs	r3, r3, #7
 800de0a:	4413      	add	r3, r2
 800de0c:	4619      	mov	r1, r3
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f7ff fde8 	bl	800d9e4 <move_window>
 800de14:	4603      	mov	r3, r0
 800de16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800de18:	7ffb      	ldrb	r3, [r7, #31]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d128      	bne.n	800de70 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800de2a:	68bb      	ldr	r3, [r7, #8]
 800de2c:	009b      	lsls	r3, r3, #2
 800de2e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800de32:	4413      	add	r3, r2
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fb0b 	bl	800d450 <ld_dword>
 800de3a:	4603      	mov	r3, r0
 800de3c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800de40:	4323      	orrs	r3, r4
 800de42:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800de52:	4413      	add	r3, r2
 800de54:	6879      	ldr	r1, [r7, #4]
 800de56:	4618      	mov	r0, r3
 800de58:	f7ff fb38 	bl	800d4cc <st_dword>
			fs->wflag = 1;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2201      	movs	r2, #1
 800de60:	70da      	strb	r2, [r3, #3]
			break;
 800de62:	e006      	b.n	800de72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800de64:	bf00      	nop
 800de66:	e004      	b.n	800de72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800de68:	bf00      	nop
 800de6a:	e002      	b.n	800de72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800de6c:	bf00      	nop
 800de6e:	e000      	b.n	800de72 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800de70:	bf00      	nop
		}
	}
	return res;
 800de72:	7ffb      	ldrb	r3, [r7, #31]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3724      	adds	r7, #36	@ 0x24
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd90      	pop	{r4, r7, pc}

0800de7c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b088      	sub	sp, #32
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800de88:	2300      	movs	r3, #0
 800de8a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	2b01      	cmp	r3, #1
 800de96:	d904      	bls.n	800dea2 <remove_chain+0x26>
 800de98:	69bb      	ldr	r3, [r7, #24]
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	68ba      	ldr	r2, [r7, #8]
 800de9e:	429a      	cmp	r2, r3
 800dea0:	d301      	bcc.n	800dea6 <remove_chain+0x2a>
 800dea2:	2302      	movs	r3, #2
 800dea4:	e04b      	b.n	800df3e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d00c      	beq.n	800dec6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800deac:	f04f 32ff 	mov.w	r2, #4294967295
 800deb0:	6879      	ldr	r1, [r7, #4]
 800deb2:	69b8      	ldr	r0, [r7, #24]
 800deb4:	f7ff fef8 	bl	800dca8 <put_fat>
 800deb8:	4603      	mov	r3, r0
 800deba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800debc:	7ffb      	ldrb	r3, [r7, #31]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d001      	beq.n	800dec6 <remove_chain+0x4a>
 800dec2:	7ffb      	ldrb	r3, [r7, #31]
 800dec4:	e03b      	b.n	800df3e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dec6:	68b9      	ldr	r1, [r7, #8]
 800dec8:	68f8      	ldr	r0, [r7, #12]
 800deca:	f7ff fe46 	bl	800db5a <get_fat>
 800dece:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ded0:	697b      	ldr	r3, [r7, #20]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d031      	beq.n	800df3a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ded6:	697b      	ldr	r3, [r7, #20]
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d101      	bne.n	800dee0 <remove_chain+0x64>
 800dedc:	2302      	movs	r3, #2
 800dede:	e02e      	b.n	800df3e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dee0:	697b      	ldr	r3, [r7, #20]
 800dee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee6:	d101      	bne.n	800deec <remove_chain+0x70>
 800dee8:	2301      	movs	r3, #1
 800deea:	e028      	b.n	800df3e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800deec:	2200      	movs	r2, #0
 800deee:	68b9      	ldr	r1, [r7, #8]
 800def0:	69b8      	ldr	r0, [r7, #24]
 800def2:	f7ff fed9 	bl	800dca8 <put_fat>
 800def6:	4603      	mov	r3, r0
 800def8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800defa:	7ffb      	ldrb	r3, [r7, #31]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d001      	beq.n	800df04 <remove_chain+0x88>
 800df00:	7ffb      	ldrb	r3, [r7, #31]
 800df02:	e01c      	b.n	800df3e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800df04:	69bb      	ldr	r3, [r7, #24]
 800df06:	699a      	ldr	r2, [r3, #24]
 800df08:	69bb      	ldr	r3, [r7, #24]
 800df0a:	69db      	ldr	r3, [r3, #28]
 800df0c:	3b02      	subs	r3, #2
 800df0e:	429a      	cmp	r2, r3
 800df10:	d20b      	bcs.n	800df2a <remove_chain+0xae>
			fs->free_clst++;
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	699b      	ldr	r3, [r3, #24]
 800df16:	1c5a      	adds	r2, r3, #1
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800df1c:	69bb      	ldr	r3, [r7, #24]
 800df1e:	791b      	ldrb	r3, [r3, #4]
 800df20:	f043 0301 	orr.w	r3, r3, #1
 800df24:	b2da      	uxtb	r2, r3
 800df26:	69bb      	ldr	r3, [r7, #24]
 800df28:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800df2e:	69bb      	ldr	r3, [r7, #24]
 800df30:	69db      	ldr	r3, [r3, #28]
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	429a      	cmp	r2, r3
 800df36:	d3c6      	bcc.n	800dec6 <remove_chain+0x4a>
 800df38:	e000      	b.n	800df3c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800df3a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800df3c:	2300      	movs	r3, #0
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3720      	adds	r7, #32
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}

0800df46 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800df46:	b580      	push	{r7, lr}
 800df48:	b088      	sub	sp, #32
 800df4a:	af00      	add	r7, sp, #0
 800df4c:	6078      	str	r0, [r7, #4]
 800df4e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d10d      	bne.n	800df78 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800df5c:	693b      	ldr	r3, [r7, #16]
 800df5e:	695b      	ldr	r3, [r3, #20]
 800df60:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800df62:	69bb      	ldr	r3, [r7, #24]
 800df64:	2b00      	cmp	r3, #0
 800df66:	d004      	beq.n	800df72 <create_chain+0x2c>
 800df68:	693b      	ldr	r3, [r7, #16]
 800df6a:	69db      	ldr	r3, [r3, #28]
 800df6c:	69ba      	ldr	r2, [r7, #24]
 800df6e:	429a      	cmp	r2, r3
 800df70:	d31b      	bcc.n	800dfaa <create_chain+0x64>
 800df72:	2301      	movs	r3, #1
 800df74:	61bb      	str	r3, [r7, #24]
 800df76:	e018      	b.n	800dfaa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800df78:	6839      	ldr	r1, [r7, #0]
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f7ff fded 	bl	800db5a <get_fat>
 800df80:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2b01      	cmp	r3, #1
 800df86:	d801      	bhi.n	800df8c <create_chain+0x46>
 800df88:	2301      	movs	r3, #1
 800df8a:	e070      	b.n	800e06e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df92:	d101      	bne.n	800df98 <create_chain+0x52>
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	e06a      	b.n	800e06e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800df98:	693b      	ldr	r3, [r7, #16]
 800df9a:	69db      	ldr	r3, [r3, #28]
 800df9c:	68fa      	ldr	r2, [r7, #12]
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	d201      	bcs.n	800dfa6 <create_chain+0x60>
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	e063      	b.n	800e06e <create_chain+0x128>
		scl = clst;
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	3301      	adds	r3, #1
 800dfb2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	69db      	ldr	r3, [r3, #28]
 800dfb8:	69fa      	ldr	r2, [r7, #28]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d307      	bcc.n	800dfce <create_chain+0x88>
				ncl = 2;
 800dfbe:	2302      	movs	r3, #2
 800dfc0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dfc2:	69fa      	ldr	r2, [r7, #28]
 800dfc4:	69bb      	ldr	r3, [r7, #24]
 800dfc6:	429a      	cmp	r2, r3
 800dfc8:	d901      	bls.n	800dfce <create_chain+0x88>
 800dfca:	2300      	movs	r3, #0
 800dfcc:	e04f      	b.n	800e06e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dfce:	69f9      	ldr	r1, [r7, #28]
 800dfd0:	6878      	ldr	r0, [r7, #4]
 800dfd2:	f7ff fdc2 	bl	800db5a <get_fat>
 800dfd6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d00e      	beq.n	800dffc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d003      	beq.n	800dfec <create_chain+0xa6>
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfea:	d101      	bne.n	800dff0 <create_chain+0xaa>
 800dfec:	68fb      	ldr	r3, [r7, #12]
 800dfee:	e03e      	b.n	800e06e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dff0:	69fa      	ldr	r2, [r7, #28]
 800dff2:	69bb      	ldr	r3, [r7, #24]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d1da      	bne.n	800dfae <create_chain+0x68>
 800dff8:	2300      	movs	r3, #0
 800dffa:	e038      	b.n	800e06e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dffc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dffe:	f04f 32ff 	mov.w	r2, #4294967295
 800e002:	69f9      	ldr	r1, [r7, #28]
 800e004:	6938      	ldr	r0, [r7, #16]
 800e006:	f7ff fe4f 	bl	800dca8 <put_fat>
 800e00a:	4603      	mov	r3, r0
 800e00c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e00e:	7dfb      	ldrb	r3, [r7, #23]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d109      	bne.n	800e028 <create_chain+0xe2>
 800e014:	683b      	ldr	r3, [r7, #0]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d006      	beq.n	800e028 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e01a:	69fa      	ldr	r2, [r7, #28]
 800e01c:	6839      	ldr	r1, [r7, #0]
 800e01e:	6938      	ldr	r0, [r7, #16]
 800e020:	f7ff fe42 	bl	800dca8 <put_fat>
 800e024:	4603      	mov	r3, r0
 800e026:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e028:	7dfb      	ldrb	r3, [r7, #23]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d116      	bne.n	800e05c <create_chain+0x116>
		fs->last_clst = ncl;
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	69fa      	ldr	r2, [r7, #28]
 800e032:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	699a      	ldr	r2, [r3, #24]
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	69db      	ldr	r3, [r3, #28]
 800e03c:	3b02      	subs	r3, #2
 800e03e:	429a      	cmp	r2, r3
 800e040:	d804      	bhi.n	800e04c <create_chain+0x106>
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	699b      	ldr	r3, [r3, #24]
 800e046:	1e5a      	subs	r2, r3, #1
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	791b      	ldrb	r3, [r3, #4]
 800e050:	f043 0301 	orr.w	r3, r3, #1
 800e054:	b2da      	uxtb	r2, r3
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	711a      	strb	r2, [r3, #4]
 800e05a:	e007      	b.n	800e06c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e05c:	7dfb      	ldrb	r3, [r7, #23]
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d102      	bne.n	800e068 <create_chain+0x122>
 800e062:	f04f 33ff 	mov.w	r3, #4294967295
 800e066:	e000      	b.n	800e06a <create_chain+0x124>
 800e068:	2301      	movs	r3, #1
 800e06a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e06c:	69fb      	ldr	r3, [r7, #28]
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3720      	adds	r7, #32
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}

0800e076 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e076:	b480      	push	{r7}
 800e078:	b087      	sub	sp, #28
 800e07a:	af00      	add	r7, sp, #0
 800e07c:	6078      	str	r0, [r7, #4]
 800e07e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e08a:	3304      	adds	r3, #4
 800e08c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	0a5b      	lsrs	r3, r3, #9
 800e092:	68fa      	ldr	r2, [r7, #12]
 800e094:	8952      	ldrh	r2, [r2, #10]
 800e096:	fbb3 f3f2 	udiv	r3, r3, r2
 800e09a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	1d1a      	adds	r2, r3, #4
 800e0a0:	613a      	str	r2, [r7, #16]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d101      	bne.n	800e0b0 <clmt_clust+0x3a>
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	e010      	b.n	800e0d2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e0b0:	697a      	ldr	r2, [r7, #20]
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	429a      	cmp	r2, r3
 800e0b6:	d307      	bcc.n	800e0c8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e0b8:	697a      	ldr	r2, [r7, #20]
 800e0ba:	68bb      	ldr	r3, [r7, #8]
 800e0bc:	1ad3      	subs	r3, r2, r3
 800e0be:	617b      	str	r3, [r7, #20]
 800e0c0:	693b      	ldr	r3, [r7, #16]
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e0c6:	e7e9      	b.n	800e09c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e0c8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	681a      	ldr	r2, [r3, #0]
 800e0ce:	697b      	ldr	r3, [r7, #20]
 800e0d0:	4413      	add	r3, r2
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	371c      	adds	r7, #28
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr

0800e0de <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b086      	sub	sp, #24
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
 800e0e6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e0f4:	d204      	bcs.n	800e100 <dir_sdi+0x22>
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	f003 031f 	and.w	r3, r3, #31
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d001      	beq.n	800e104 <dir_sdi+0x26>
		return FR_INT_ERR;
 800e100:	2302      	movs	r3, #2
 800e102:	e063      	b.n	800e1cc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	683a      	ldr	r2, [r7, #0]
 800e108:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	689b      	ldr	r3, [r3, #8]
 800e10e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e110:	697b      	ldr	r3, [r7, #20]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d106      	bne.n	800e124 <dir_sdi+0x46>
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	2b02      	cmp	r3, #2
 800e11c:	d902      	bls.n	800e124 <dir_sdi+0x46>
		clst = fs->dirbase;
 800e11e:	693b      	ldr	r3, [r7, #16]
 800e120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e122:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e124:	697b      	ldr	r3, [r7, #20]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d10c      	bne.n	800e144 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	095b      	lsrs	r3, r3, #5
 800e12e:	693a      	ldr	r2, [r7, #16]
 800e130:	8912      	ldrh	r2, [r2, #8]
 800e132:	4293      	cmp	r3, r2
 800e134:	d301      	bcc.n	800e13a <dir_sdi+0x5c>
 800e136:	2302      	movs	r3, #2
 800e138:	e048      	b.n	800e1cc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	61da      	str	r2, [r3, #28]
 800e142:	e029      	b.n	800e198 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	895b      	ldrh	r3, [r3, #10]
 800e148:	025b      	lsls	r3, r3, #9
 800e14a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e14c:	e019      	b.n	800e182 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6979      	ldr	r1, [r7, #20]
 800e152:	4618      	mov	r0, r3
 800e154:	f7ff fd01 	bl	800db5a <get_fat>
 800e158:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e160:	d101      	bne.n	800e166 <dir_sdi+0x88>
 800e162:	2301      	movs	r3, #1
 800e164:	e032      	b.n	800e1cc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e166:	697b      	ldr	r3, [r7, #20]
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d904      	bls.n	800e176 <dir_sdi+0x98>
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	69db      	ldr	r3, [r3, #28]
 800e170:	697a      	ldr	r2, [r7, #20]
 800e172:	429a      	cmp	r2, r3
 800e174:	d301      	bcc.n	800e17a <dir_sdi+0x9c>
 800e176:	2302      	movs	r3, #2
 800e178:	e028      	b.n	800e1cc <dir_sdi+0xee>
			ofs -= csz;
 800e17a:	683a      	ldr	r2, [r7, #0]
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	1ad3      	subs	r3, r2, r3
 800e180:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	429a      	cmp	r2, r3
 800e188:	d2e1      	bcs.n	800e14e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e18a:	6979      	ldr	r1, [r7, #20]
 800e18c:	6938      	ldr	r0, [r7, #16]
 800e18e:	f7ff fcc5 	bl	800db1c <clust2sect>
 800e192:	4602      	mov	r2, r0
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	697a      	ldr	r2, [r7, #20]
 800e19c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	69db      	ldr	r3, [r3, #28]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d101      	bne.n	800e1aa <dir_sdi+0xcc>
 800e1a6:	2302      	movs	r3, #2
 800e1a8:	e010      	b.n	800e1cc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	69da      	ldr	r2, [r3, #28]
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	0a5b      	lsrs	r3, r3, #9
 800e1b2:	441a      	add	r2, r3
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e1b8:	693b      	ldr	r3, [r7, #16]
 800e1ba:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1c4:	441a      	add	r2, r3
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e1ca:	2300      	movs	r3, #0
}
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	3718      	adds	r7, #24
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	bd80      	pop	{r7, pc}

0800e1d4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b086      	sub	sp, #24
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	695b      	ldr	r3, [r3, #20]
 800e1e8:	3320      	adds	r3, #32
 800e1ea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	69db      	ldr	r3, [r3, #28]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d003      	beq.n	800e1fc <dir_next+0x28>
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e1fa:	d301      	bcc.n	800e200 <dir_next+0x2c>
 800e1fc:	2304      	movs	r3, #4
 800e1fe:	e0aa      	b.n	800e356 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e200:	68bb      	ldr	r3, [r7, #8]
 800e202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e206:	2b00      	cmp	r3, #0
 800e208:	f040 8098 	bne.w	800e33c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	69db      	ldr	r3, [r3, #28]
 800e210:	1c5a      	adds	r2, r3, #1
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	699b      	ldr	r3, [r3, #24]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d10b      	bne.n	800e236 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e21e:	68bb      	ldr	r3, [r7, #8]
 800e220:	095b      	lsrs	r3, r3, #5
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	8912      	ldrh	r2, [r2, #8]
 800e226:	4293      	cmp	r3, r2
 800e228:	f0c0 8088 	bcc.w	800e33c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2200      	movs	r2, #0
 800e230:	61da      	str	r2, [r3, #28]
 800e232:	2304      	movs	r3, #4
 800e234:	e08f      	b.n	800e356 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e236:	68bb      	ldr	r3, [r7, #8]
 800e238:	0a5b      	lsrs	r3, r3, #9
 800e23a:	68fa      	ldr	r2, [r7, #12]
 800e23c:	8952      	ldrh	r2, [r2, #10]
 800e23e:	3a01      	subs	r2, #1
 800e240:	4013      	ands	r3, r2
 800e242:	2b00      	cmp	r3, #0
 800e244:	d17a      	bne.n	800e33c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	699b      	ldr	r3, [r3, #24]
 800e24c:	4619      	mov	r1, r3
 800e24e:	4610      	mov	r0, r2
 800e250:	f7ff fc83 	bl	800db5a <get_fat>
 800e254:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e256:	697b      	ldr	r3, [r7, #20]
 800e258:	2b01      	cmp	r3, #1
 800e25a:	d801      	bhi.n	800e260 <dir_next+0x8c>
 800e25c:	2302      	movs	r3, #2
 800e25e:	e07a      	b.n	800e356 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e266:	d101      	bne.n	800e26c <dir_next+0x98>
 800e268:	2301      	movs	r3, #1
 800e26a:	e074      	b.n	800e356 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	69db      	ldr	r3, [r3, #28]
 800e270:	697a      	ldr	r2, [r7, #20]
 800e272:	429a      	cmp	r2, r3
 800e274:	d358      	bcc.n	800e328 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e276:	683b      	ldr	r3, [r7, #0]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d104      	bne.n	800e286 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	2200      	movs	r2, #0
 800e280:	61da      	str	r2, [r3, #28]
 800e282:	2304      	movs	r3, #4
 800e284:	e067      	b.n	800e356 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	699b      	ldr	r3, [r3, #24]
 800e28c:	4619      	mov	r1, r3
 800e28e:	4610      	mov	r0, r2
 800e290:	f7ff fe59 	bl	800df46 <create_chain>
 800e294:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e296:	697b      	ldr	r3, [r7, #20]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d101      	bne.n	800e2a0 <dir_next+0xcc>
 800e29c:	2307      	movs	r3, #7
 800e29e:	e05a      	b.n	800e356 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d101      	bne.n	800e2aa <dir_next+0xd6>
 800e2a6:	2302      	movs	r3, #2
 800e2a8:	e055      	b.n	800e356 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2b0:	d101      	bne.n	800e2b6 <dir_next+0xe2>
 800e2b2:	2301      	movs	r3, #1
 800e2b4:	e04f      	b.n	800e356 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e2b6:	68f8      	ldr	r0, [r7, #12]
 800e2b8:	f7ff fb50 	bl	800d95c <sync_window>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d001      	beq.n	800e2c6 <dir_next+0xf2>
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	e047      	b.n	800e356 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	3338      	adds	r3, #56	@ 0x38
 800e2ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	f7ff f948 	bl	800d566 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	613b      	str	r3, [r7, #16]
 800e2da:	6979      	ldr	r1, [r7, #20]
 800e2dc:	68f8      	ldr	r0, [r7, #12]
 800e2de:	f7ff fc1d 	bl	800db1c <clust2sect>
 800e2e2:	4602      	mov	r2, r0
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	635a      	str	r2, [r3, #52]	@ 0x34
 800e2e8:	e012      	b.n	800e310 <dir_next+0x13c>
						fs->wflag = 1;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e2f0:	68f8      	ldr	r0, [r7, #12]
 800e2f2:	f7ff fb33 	bl	800d95c <sync_window>
 800e2f6:	4603      	mov	r3, r0
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d001      	beq.n	800e300 <dir_next+0x12c>
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e02a      	b.n	800e356 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	3301      	adds	r3, #1
 800e304:	613b      	str	r3, [r7, #16]
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e30a:	1c5a      	adds	r2, r3, #1
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	635a      	str	r2, [r3, #52]	@ 0x34
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	895b      	ldrh	r3, [r3, #10]
 800e314:	461a      	mov	r2, r3
 800e316:	693b      	ldr	r3, [r7, #16]
 800e318:	4293      	cmp	r3, r2
 800e31a:	d3e6      	bcc.n	800e2ea <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e320:	693b      	ldr	r3, [r7, #16]
 800e322:	1ad2      	subs	r2, r2, r3
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	697a      	ldr	r2, [r7, #20]
 800e32c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e32e:	6979      	ldr	r1, [r7, #20]
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f7ff fbf3 	bl	800db1c <clust2sect>
 800e336:	4602      	mov	r2, r0
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	68ba      	ldr	r2, [r7, #8]
 800e340:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e34e:	441a      	add	r2, r3
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e354:	2300      	movs	r3, #0
}
 800e356:	4618      	mov	r0, r3
 800e358:	3718      	adds	r7, #24
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e35e:	b580      	push	{r7, lr}
 800e360:	b086      	sub	sp, #24
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
 800e366:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e36e:	2100      	movs	r1, #0
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f7ff feb4 	bl	800e0de <dir_sdi>
 800e376:	4603      	mov	r3, r0
 800e378:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e37a:	7dfb      	ldrb	r3, [r7, #23]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d12b      	bne.n	800e3d8 <dir_alloc+0x7a>
		n = 0;
 800e380:	2300      	movs	r3, #0
 800e382:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	69db      	ldr	r3, [r3, #28]
 800e388:	4619      	mov	r1, r3
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f7ff fb2a 	bl	800d9e4 <move_window>
 800e390:	4603      	mov	r3, r0
 800e392:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e394:	7dfb      	ldrb	r3, [r7, #23]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d11d      	bne.n	800e3d6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	6a1b      	ldr	r3, [r3, #32]
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	2be5      	cmp	r3, #229	@ 0xe5
 800e3a2:	d004      	beq.n	800e3ae <dir_alloc+0x50>
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a1b      	ldr	r3, [r3, #32]
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d107      	bne.n	800e3be <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	3301      	adds	r3, #1
 800e3b2:	613b      	str	r3, [r7, #16]
 800e3b4:	693a      	ldr	r2, [r7, #16]
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d102      	bne.n	800e3c2 <dir_alloc+0x64>
 800e3bc:	e00c      	b.n	800e3d8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e3be:	2300      	movs	r3, #0
 800e3c0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e3c2:	2101      	movs	r1, #1
 800e3c4:	6878      	ldr	r0, [r7, #4]
 800e3c6:	f7ff ff05 	bl	800e1d4 <dir_next>
 800e3ca:	4603      	mov	r3, r0
 800e3cc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e3ce:	7dfb      	ldrb	r3, [r7, #23]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d0d7      	beq.n	800e384 <dir_alloc+0x26>
 800e3d4:	e000      	b.n	800e3d8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e3d6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e3d8:	7dfb      	ldrb	r3, [r7, #23]
 800e3da:	2b04      	cmp	r3, #4
 800e3dc:	d101      	bne.n	800e3e2 <dir_alloc+0x84>
 800e3de:	2307      	movs	r3, #7
 800e3e0:	75fb      	strb	r3, [r7, #23]
	return res;
 800e3e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	3718      	adds	r7, #24
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	bd80      	pop	{r7, pc}

0800e3ec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	331a      	adds	r3, #26
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	f7ff f810 	bl	800d420 <ld_word>
 800e400:	4603      	mov	r3, r0
 800e402:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	2b03      	cmp	r3, #3
 800e40a:	d109      	bne.n	800e420 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e40c:	683b      	ldr	r3, [r7, #0]
 800e40e:	3314      	adds	r3, #20
 800e410:	4618      	mov	r0, r3
 800e412:	f7ff f805 	bl	800d420 <ld_word>
 800e416:	4603      	mov	r3, r0
 800e418:	041b      	lsls	r3, r3, #16
 800e41a:	68fa      	ldr	r2, [r7, #12]
 800e41c:	4313      	orrs	r3, r2
 800e41e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e420:	68fb      	ldr	r3, [r7, #12]
}
 800e422:	4618      	mov	r0, r3
 800e424:	3710      	adds	r7, #16
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}

0800e42a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e42a:	b580      	push	{r7, lr}
 800e42c:	b084      	sub	sp, #16
 800e42e:	af00      	add	r7, sp, #0
 800e430:	60f8      	str	r0, [r7, #12]
 800e432:	60b9      	str	r1, [r7, #8]
 800e434:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	331a      	adds	r3, #26
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	b292      	uxth	r2, r2
 800e43e:	4611      	mov	r1, r2
 800e440:	4618      	mov	r0, r3
 800e442:	f7ff f828 	bl	800d496 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	2b03      	cmp	r3, #3
 800e44c:	d109      	bne.n	800e462 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	f103 0214 	add.w	r2, r3, #20
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	0c1b      	lsrs	r3, r3, #16
 800e458:	b29b      	uxth	r3, r3
 800e45a:	4619      	mov	r1, r3
 800e45c:	4610      	mov	r0, r2
 800e45e:	f7ff f81a 	bl	800d496 <st_word>
	}
}
 800e462:	bf00      	nop
 800e464:	3710      	adds	r7, #16
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
	...

0800e46c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e46c:	b590      	push	{r4, r7, lr}
 800e46e:	b087      	sub	sp, #28
 800e470:	af00      	add	r7, sp, #0
 800e472:	6078      	str	r0, [r7, #4]
 800e474:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	331a      	adds	r3, #26
 800e47a:	4618      	mov	r0, r3
 800e47c:	f7fe ffd0 	bl	800d420 <ld_word>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <cmp_lfn+0x1e>
 800e486:	2300      	movs	r3, #0
 800e488:	e059      	b.n	800e53e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e492:	1e5a      	subs	r2, r3, #1
 800e494:	4613      	mov	r3, r2
 800e496:	005b      	lsls	r3, r3, #1
 800e498:	4413      	add	r3, r2
 800e49a:	009b      	lsls	r3, r3, #2
 800e49c:	4413      	add	r3, r2
 800e49e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e4a0:	2301      	movs	r3, #1
 800e4a2:	81fb      	strh	r3, [r7, #14]
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	613b      	str	r3, [r7, #16]
 800e4a8:	e033      	b.n	800e512 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e4aa:	4a27      	ldr	r2, [pc, #156]	@ (800e548 <cmp_lfn+0xdc>)
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	461a      	mov	r2, r3
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f7fe ffb1 	bl	800d420 <ld_word>
 800e4be:	4603      	mov	r3, r0
 800e4c0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e4c2:	89fb      	ldrh	r3, [r7, #14]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d01a      	beq.n	800e4fe <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	2bfe      	cmp	r3, #254	@ 0xfe
 800e4cc:	d812      	bhi.n	800e4f4 <cmp_lfn+0x88>
 800e4ce:	89bb      	ldrh	r3, [r7, #12]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f001 fde3 	bl	801009c <ff_wtoupper>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	461c      	mov	r4, r3
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	1c5a      	adds	r2, r3, #1
 800e4de:	617a      	str	r2, [r7, #20]
 800e4e0:	005b      	lsls	r3, r3, #1
 800e4e2:	687a      	ldr	r2, [r7, #4]
 800e4e4:	4413      	add	r3, r2
 800e4e6:	881b      	ldrh	r3, [r3, #0]
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f001 fdd7 	bl	801009c <ff_wtoupper>
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	429c      	cmp	r4, r3
 800e4f2:	d001      	beq.n	800e4f8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	e022      	b.n	800e53e <cmp_lfn+0xd2>
			}
			wc = uc;
 800e4f8:	89bb      	ldrh	r3, [r7, #12]
 800e4fa:	81fb      	strh	r3, [r7, #14]
 800e4fc:	e006      	b.n	800e50c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e4fe:	89bb      	ldrh	r3, [r7, #12]
 800e500:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e504:	4293      	cmp	r3, r2
 800e506:	d001      	beq.n	800e50c <cmp_lfn+0xa0>
 800e508:	2300      	movs	r3, #0
 800e50a:	e018      	b.n	800e53e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	3301      	adds	r3, #1
 800e510:	613b      	str	r3, [r7, #16]
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	2b0c      	cmp	r3, #12
 800e516:	d9c8      	bls.n	800e4aa <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e520:	2b00      	cmp	r3, #0
 800e522:	d00b      	beq.n	800e53c <cmp_lfn+0xd0>
 800e524:	89fb      	ldrh	r3, [r7, #14]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d008      	beq.n	800e53c <cmp_lfn+0xd0>
 800e52a:	697b      	ldr	r3, [r7, #20]
 800e52c:	005b      	lsls	r3, r3, #1
 800e52e:	687a      	ldr	r2, [r7, #4]
 800e530:	4413      	add	r3, r2
 800e532:	881b      	ldrh	r3, [r3, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <cmp_lfn+0xd0>
 800e538:	2300      	movs	r3, #0
 800e53a:	e000      	b.n	800e53e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e53c:	2301      	movs	r3, #1
}
 800e53e:	4618      	mov	r0, r3
 800e540:	371c      	adds	r7, #28
 800e542:	46bd      	mov	sp, r7
 800e544:	bd90      	pop	{r4, r7, pc}
 800e546:	bf00      	nop
 800e548:	0801572c 	.word	0x0801572c

0800e54c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b088      	sub	sp, #32
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	4611      	mov	r1, r2
 800e558:	461a      	mov	r2, r3
 800e55a:	460b      	mov	r3, r1
 800e55c:	71fb      	strb	r3, [r7, #7]
 800e55e:	4613      	mov	r3, r2
 800e560:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	330d      	adds	r3, #13
 800e566:	79ba      	ldrb	r2, [r7, #6]
 800e568:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	330b      	adds	r3, #11
 800e56e:	220f      	movs	r2, #15
 800e570:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	330c      	adds	r3, #12
 800e576:	2200      	movs	r2, #0
 800e578:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	331a      	adds	r3, #26
 800e57e:	2100      	movs	r1, #0
 800e580:	4618      	mov	r0, r3
 800e582:	f7fe ff88 	bl	800d496 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e586:	79fb      	ldrb	r3, [r7, #7]
 800e588:	1e5a      	subs	r2, r3, #1
 800e58a:	4613      	mov	r3, r2
 800e58c:	005b      	lsls	r3, r3, #1
 800e58e:	4413      	add	r3, r2
 800e590:	009b      	lsls	r3, r3, #2
 800e592:	4413      	add	r3, r2
 800e594:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e596:	2300      	movs	r3, #0
 800e598:	82fb      	strh	r3, [r7, #22]
 800e59a:	2300      	movs	r3, #0
 800e59c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e59e:	8afb      	ldrh	r3, [r7, #22]
 800e5a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	d007      	beq.n	800e5b8 <put_lfn+0x6c>
 800e5a8:	69fb      	ldr	r3, [r7, #28]
 800e5aa:	1c5a      	adds	r2, r3, #1
 800e5ac:	61fa      	str	r2, [r7, #28]
 800e5ae:	005b      	lsls	r3, r3, #1
 800e5b0:	68fa      	ldr	r2, [r7, #12]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	881b      	ldrh	r3, [r3, #0]
 800e5b6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e5b8:	4a17      	ldr	r2, [pc, #92]	@ (800e618 <put_lfn+0xcc>)
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	4413      	add	r3, r2
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	461a      	mov	r2, r3
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	4413      	add	r3, r2
 800e5c6:	8afa      	ldrh	r2, [r7, #22]
 800e5c8:	4611      	mov	r1, r2
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	f7fe ff63 	bl	800d496 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e5d0:	8afb      	ldrh	r3, [r7, #22]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d102      	bne.n	800e5dc <put_lfn+0x90>
 800e5d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e5da:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e5dc:	69bb      	ldr	r3, [r7, #24]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	61bb      	str	r3, [r7, #24]
 800e5e2:	69bb      	ldr	r3, [r7, #24]
 800e5e4:	2b0c      	cmp	r3, #12
 800e5e6:	d9da      	bls.n	800e59e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e5e8:	8afb      	ldrh	r3, [r7, #22]
 800e5ea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	d006      	beq.n	800e600 <put_lfn+0xb4>
 800e5f2:	69fb      	ldr	r3, [r7, #28]
 800e5f4:	005b      	lsls	r3, r3, #1
 800e5f6:	68fa      	ldr	r2, [r7, #12]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	881b      	ldrh	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d103      	bne.n	800e608 <put_lfn+0xbc>
 800e600:	79fb      	ldrb	r3, [r7, #7]
 800e602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e606:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	79fa      	ldrb	r2, [r7, #7]
 800e60c:	701a      	strb	r2, [r3, #0]
}
 800e60e:	bf00      	nop
 800e610:	3720      	adds	r7, #32
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	0801572c 	.word	0x0801572c

0800e61c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b08c      	sub	sp, #48	@ 0x30
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
 800e628:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e62a:	220b      	movs	r2, #11
 800e62c:	68b9      	ldr	r1, [r7, #8]
 800e62e:	68f8      	ldr	r0, [r7, #12]
 800e630:	f7fe ff78 	bl	800d524 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	2b05      	cmp	r3, #5
 800e638:	d929      	bls.n	800e68e <gen_numname+0x72>
		sr = seq;
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e63e:	e020      	b.n	800e682 <gen_numname+0x66>
			wc = *lfn++;
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	1c9a      	adds	r2, r3, #2
 800e644:	607a      	str	r2, [r7, #4]
 800e646:	881b      	ldrh	r3, [r3, #0]
 800e648:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800e64a:	2300      	movs	r3, #0
 800e64c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e64e:	e015      	b.n	800e67c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800e650:	69fb      	ldr	r3, [r7, #28]
 800e652:	005a      	lsls	r2, r3, #1
 800e654:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e656:	f003 0301 	and.w	r3, r3, #1
 800e65a:	4413      	add	r3, r2
 800e65c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e65e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e660:	085b      	lsrs	r3, r3, #1
 800e662:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e664:	69fb      	ldr	r3, [r7, #28]
 800e666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d003      	beq.n	800e676 <gen_numname+0x5a>
 800e66e:	69fa      	ldr	r2, [r7, #28]
 800e670:	4b30      	ldr	r3, [pc, #192]	@ (800e734 <gen_numname+0x118>)
 800e672:	4053      	eors	r3, r2
 800e674:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e678:	3301      	adds	r3, #1
 800e67a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e67e:	2b0f      	cmp	r3, #15
 800e680:	d9e6      	bls.n	800e650 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	881b      	ldrh	r3, [r3, #0]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d1da      	bne.n	800e640 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e68e:	2307      	movs	r3, #7
 800e690:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	b2db      	uxtb	r3, r3
 800e696:	f003 030f 	and.w	r3, r3, #15
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	3330      	adds	r3, #48	@ 0x30
 800e69e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800e6a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e6a6:	2b39      	cmp	r3, #57	@ 0x39
 800e6a8:	d904      	bls.n	800e6b4 <gen_numname+0x98>
 800e6aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e6ae:	3307      	adds	r3, #7
 800e6b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800e6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6b6:	1e5a      	subs	r2, r3, #1
 800e6b8:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e6ba:	3330      	adds	r3, #48	@ 0x30
 800e6bc:	443b      	add	r3, r7
 800e6be:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e6c2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	091b      	lsrs	r3, r3, #4
 800e6ca:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1df      	bne.n	800e692 <gen_numname+0x76>
	ns[i] = '~';
 800e6d2:	f107 0214 	add.w	r2, r7, #20
 800e6d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d8:	4413      	add	r3, r2
 800e6da:	227e      	movs	r2, #126	@ 0x7e
 800e6dc:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e6de:	2300      	movs	r3, #0
 800e6e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6e2:	e002      	b.n	800e6ea <gen_numname+0xce>
 800e6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e6ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d205      	bcs.n	800e6fe <gen_numname+0xe2>
 800e6f2:	68fa      	ldr	r2, [r7, #12]
 800e6f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6f6:	4413      	add	r3, r2
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	2b20      	cmp	r3, #32
 800e6fc:	d1f2      	bne.n	800e6e4 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e6fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e700:	2b07      	cmp	r3, #7
 800e702:	d807      	bhi.n	800e714 <gen_numname+0xf8>
 800e704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e706:	1c5a      	adds	r2, r3, #1
 800e708:	62ba      	str	r2, [r7, #40]	@ 0x28
 800e70a:	3330      	adds	r3, #48	@ 0x30
 800e70c:	443b      	add	r3, r7
 800e70e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e712:	e000      	b.n	800e716 <gen_numname+0xfa>
 800e714:	2120      	movs	r1, #32
 800e716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e718:	1c5a      	adds	r2, r3, #1
 800e71a:	627a      	str	r2, [r7, #36]	@ 0x24
 800e71c:	68fa      	ldr	r2, [r7, #12]
 800e71e:	4413      	add	r3, r2
 800e720:	460a      	mov	r2, r1
 800e722:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e726:	2b07      	cmp	r3, #7
 800e728:	d9e9      	bls.n	800e6fe <gen_numname+0xe2>
}
 800e72a:	bf00      	nop
 800e72c:	bf00      	nop
 800e72e:	3730      	adds	r7, #48	@ 0x30
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	00011021 	.word	0x00011021

0800e738 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e738:	b480      	push	{r7}
 800e73a:	b085      	sub	sp, #20
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e740:	2300      	movs	r3, #0
 800e742:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e744:	230b      	movs	r3, #11
 800e746:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e748:	7bfb      	ldrb	r3, [r7, #15]
 800e74a:	b2da      	uxtb	r2, r3
 800e74c:	0852      	lsrs	r2, r2, #1
 800e74e:	01db      	lsls	r3, r3, #7
 800e750:	4313      	orrs	r3, r2
 800e752:	b2da      	uxtb	r2, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	1c59      	adds	r1, r3, #1
 800e758:	6079      	str	r1, [r7, #4]
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	4413      	add	r3, r2
 800e75e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	3b01      	subs	r3, #1
 800e764:	60bb      	str	r3, [r7, #8]
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d1ed      	bne.n	800e748 <sum_sfn+0x10>
	return sum;
 800e76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e76e:	4618      	mov	r0, r3
 800e770:	3714      	adds	r7, #20
 800e772:	46bd      	mov	sp, r7
 800e774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e778:	4770      	bx	lr

0800e77a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e77a:	b580      	push	{r7, lr}
 800e77c:	b086      	sub	sp, #24
 800e77e:	af00      	add	r7, sp, #0
 800e780:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e788:	2100      	movs	r1, #0
 800e78a:	6878      	ldr	r0, [r7, #4]
 800e78c:	f7ff fca7 	bl	800e0de <dir_sdi>
 800e790:	4603      	mov	r3, r0
 800e792:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e794:	7dfb      	ldrb	r3, [r7, #23]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d001      	beq.n	800e79e <dir_find+0x24>
 800e79a:	7dfb      	ldrb	r3, [r7, #23]
 800e79c:	e0a9      	b.n	800e8f2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e79e:	23ff      	movs	r3, #255	@ 0xff
 800e7a0:	753b      	strb	r3, [r7, #20]
 800e7a2:	7d3b      	ldrb	r3, [r7, #20]
 800e7a4:	757b      	strb	r3, [r7, #21]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	f04f 32ff 	mov.w	r2, #4294967295
 800e7ac:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	69db      	ldr	r3, [r3, #28]
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	6938      	ldr	r0, [r7, #16]
 800e7b6:	f7ff f915 	bl	800d9e4 <move_window>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e7be:	7dfb      	ldrb	r3, [r7, #23]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	f040 8090 	bne.w	800e8e6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6a1b      	ldr	r3, [r3, #32]
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e7ce:	7dbb      	ldrb	r3, [r7, #22]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d102      	bne.n	800e7da <dir_find+0x60>
 800e7d4:	2304      	movs	r3, #4
 800e7d6:	75fb      	strb	r3, [r7, #23]
 800e7d8:	e08a      	b.n	800e8f0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6a1b      	ldr	r3, [r3, #32]
 800e7de:	330b      	adds	r3, #11
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e7e6:	73fb      	strb	r3, [r7, #15]
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	7bfa      	ldrb	r2, [r7, #15]
 800e7ec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e7ee:	7dbb      	ldrb	r3, [r7, #22]
 800e7f0:	2be5      	cmp	r3, #229	@ 0xe5
 800e7f2:	d007      	beq.n	800e804 <dir_find+0x8a>
 800e7f4:	7bfb      	ldrb	r3, [r7, #15]
 800e7f6:	f003 0308 	and.w	r3, r3, #8
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d009      	beq.n	800e812 <dir_find+0x98>
 800e7fe:	7bfb      	ldrb	r3, [r7, #15]
 800e800:	2b0f      	cmp	r3, #15
 800e802:	d006      	beq.n	800e812 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e804:	23ff      	movs	r3, #255	@ 0xff
 800e806:	757b      	strb	r3, [r7, #21]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f04f 32ff 	mov.w	r2, #4294967295
 800e80e:	631a      	str	r2, [r3, #48]	@ 0x30
 800e810:	e05e      	b.n	800e8d0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e812:	7bfb      	ldrb	r3, [r7, #15]
 800e814:	2b0f      	cmp	r3, #15
 800e816:	d136      	bne.n	800e886 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e81e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e822:	2b00      	cmp	r3, #0
 800e824:	d154      	bne.n	800e8d0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e826:	7dbb      	ldrb	r3, [r7, #22]
 800e828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d00d      	beq.n	800e84c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	6a1b      	ldr	r3, [r3, #32]
 800e834:	7b5b      	ldrb	r3, [r3, #13]
 800e836:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e838:	7dbb      	ldrb	r3, [r7, #22]
 800e83a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e83e:	75bb      	strb	r3, [r7, #22]
 800e840:	7dbb      	ldrb	r3, [r7, #22]
 800e842:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	695a      	ldr	r2, [r3, #20]
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e84c:	7dba      	ldrb	r2, [r7, #22]
 800e84e:	7d7b      	ldrb	r3, [r7, #21]
 800e850:	429a      	cmp	r2, r3
 800e852:	d115      	bne.n	800e880 <dir_find+0x106>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6a1b      	ldr	r3, [r3, #32]
 800e858:	330d      	adds	r3, #13
 800e85a:	781b      	ldrb	r3, [r3, #0]
 800e85c:	7d3a      	ldrb	r2, [r7, #20]
 800e85e:	429a      	cmp	r2, r3
 800e860:	d10e      	bne.n	800e880 <dir_find+0x106>
 800e862:	693b      	ldr	r3, [r7, #16]
 800e864:	68da      	ldr	r2, [r3, #12]
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a1b      	ldr	r3, [r3, #32]
 800e86a:	4619      	mov	r1, r3
 800e86c:	4610      	mov	r0, r2
 800e86e:	f7ff fdfd 	bl	800e46c <cmp_lfn>
 800e872:	4603      	mov	r3, r0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d003      	beq.n	800e880 <dir_find+0x106>
 800e878:	7d7b      	ldrb	r3, [r7, #21]
 800e87a:	3b01      	subs	r3, #1
 800e87c:	b2db      	uxtb	r3, r3
 800e87e:	e000      	b.n	800e882 <dir_find+0x108>
 800e880:	23ff      	movs	r3, #255	@ 0xff
 800e882:	757b      	strb	r3, [r7, #21]
 800e884:	e024      	b.n	800e8d0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e886:	7d7b      	ldrb	r3, [r7, #21]
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d109      	bne.n	800e8a0 <dir_find+0x126>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6a1b      	ldr	r3, [r3, #32]
 800e890:	4618      	mov	r0, r3
 800e892:	f7ff ff51 	bl	800e738 <sum_sfn>
 800e896:	4603      	mov	r3, r0
 800e898:	461a      	mov	r2, r3
 800e89a:	7d3b      	ldrb	r3, [r7, #20]
 800e89c:	4293      	cmp	r3, r2
 800e89e:	d024      	beq.n	800e8ea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e8a6:	f003 0301 	and.w	r3, r3, #1
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10a      	bne.n	800e8c4 <dir_find+0x14a>
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6a18      	ldr	r0, [r3, #32]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	3324      	adds	r3, #36	@ 0x24
 800e8b6:	220b      	movs	r2, #11
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	f7fe fe6f 	bl	800d59c <mem_cmp>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d014      	beq.n	800e8ee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e8c4:	23ff      	movs	r3, #255	@ 0xff
 800e8c6:	757b      	strb	r3, [r7, #21]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800e8ce:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e8d0:	2100      	movs	r1, #0
 800e8d2:	6878      	ldr	r0, [r7, #4]
 800e8d4:	f7ff fc7e 	bl	800e1d4 <dir_next>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e8dc:	7dfb      	ldrb	r3, [r7, #23]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	f43f af65 	beq.w	800e7ae <dir_find+0x34>
 800e8e4:	e004      	b.n	800e8f0 <dir_find+0x176>
		if (res != FR_OK) break;
 800e8e6:	bf00      	nop
 800e8e8:	e002      	b.n	800e8f0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e8ea:	bf00      	nop
 800e8ec:	e000      	b.n	800e8f0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e8ee:	bf00      	nop

	return res;
 800e8f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	3718      	adds	r7, #24
 800e8f6:	46bd      	mov	sp, r7
 800e8f8:	bd80      	pop	{r7, pc}
	...

0800e8fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e8fc:	b580      	push	{r7, lr}
 800e8fe:	b08c      	sub	sp, #48	@ 0x30
 800e900:	af00      	add	r7, sp, #0
 800e902:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800e910:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800e914:	2b00      	cmp	r3, #0
 800e916:	d001      	beq.n	800e91c <dir_register+0x20>
 800e918:	2306      	movs	r3, #6
 800e91a:	e0e0      	b.n	800eade <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e91c:	2300      	movs	r3, #0
 800e91e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e920:	e002      	b.n	800e928 <dir_register+0x2c>
 800e922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e924:	3301      	adds	r3, #1
 800e926:	627b      	str	r3, [r7, #36]	@ 0x24
 800e928:	69fb      	ldr	r3, [r7, #28]
 800e92a:	68da      	ldr	r2, [r3, #12]
 800e92c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e92e:	005b      	lsls	r3, r3, #1
 800e930:	4413      	add	r3, r2
 800e932:	881b      	ldrh	r3, [r3, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d1f4      	bne.n	800e922 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800e93e:	f107 030c 	add.w	r3, r7, #12
 800e942:	220c      	movs	r2, #12
 800e944:	4618      	mov	r0, r3
 800e946:	f7fe fded 	bl	800d524 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e94a:	7dfb      	ldrb	r3, [r7, #23]
 800e94c:	f003 0301 	and.w	r3, r3, #1
 800e950:	2b00      	cmp	r3, #0
 800e952:	d032      	beq.n	800e9ba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	2240      	movs	r2, #64	@ 0x40
 800e958:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 800e95c:	2301      	movs	r3, #1
 800e95e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e960:	e016      	b.n	800e990 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800e968:	69fb      	ldr	r3, [r7, #28]
 800e96a:	68da      	ldr	r2, [r3, #12]
 800e96c:	f107 010c 	add.w	r1, r7, #12
 800e970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e972:	f7ff fe53 	bl	800e61c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f7ff feff 	bl	800e77a <dir_find>
 800e97c:	4603      	mov	r3, r0
 800e97e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800e982:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e986:	2b00      	cmp	r3, #0
 800e988:	d106      	bne.n	800e998 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e98c:	3301      	adds	r3, #1
 800e98e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e992:	2b63      	cmp	r3, #99	@ 0x63
 800e994:	d9e5      	bls.n	800e962 <dir_register+0x66>
 800e996:	e000      	b.n	800e99a <dir_register+0x9e>
			if (res != FR_OK) break;
 800e998:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e99a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e99c:	2b64      	cmp	r3, #100	@ 0x64
 800e99e:	d101      	bne.n	800e9a4 <dir_register+0xa8>
 800e9a0:	2307      	movs	r3, #7
 800e9a2:	e09c      	b.n	800eade <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e9a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e9a8:	2b04      	cmp	r3, #4
 800e9aa:	d002      	beq.n	800e9b2 <dir_register+0xb6>
 800e9ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e9b0:	e095      	b.n	800eade <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e9b2:	7dfa      	ldrb	r2, [r7, #23]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e9ba:	7dfb      	ldrb	r3, [r7, #23]
 800e9bc:	f003 0302 	and.w	r3, r3, #2
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d007      	beq.n	800e9d4 <dir_register+0xd8>
 800e9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9c6:	330c      	adds	r3, #12
 800e9c8:	4a47      	ldr	r2, [pc, #284]	@ (800eae8 <dir_register+0x1ec>)
 800e9ca:	fba2 2303 	umull	r2, r3, r2, r3
 800e9ce:	089b      	lsrs	r3, r3, #2
 800e9d0:	3301      	adds	r3, #1
 800e9d2:	e000      	b.n	800e9d6 <dir_register+0xda>
 800e9d4:	2301      	movs	r3, #1
 800e9d6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e9d8:	6a39      	ldr	r1, [r7, #32]
 800e9da:	6878      	ldr	r0, [r7, #4]
 800e9dc:	f7ff fcbf 	bl	800e35e <dir_alloc>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e9e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d148      	bne.n	800ea80 <dir_register+0x184>
 800e9ee:	6a3b      	ldr	r3, [r7, #32]
 800e9f0:	3b01      	subs	r3, #1
 800e9f2:	623b      	str	r3, [r7, #32]
 800e9f4:	6a3b      	ldr	r3, [r7, #32]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d042      	beq.n	800ea80 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	695a      	ldr	r2, [r3, #20]
 800e9fe:	6a3b      	ldr	r3, [r7, #32]
 800ea00:	015b      	lsls	r3, r3, #5
 800ea02:	1ad3      	subs	r3, r2, r3
 800ea04:	4619      	mov	r1, r3
 800ea06:	6878      	ldr	r0, [r7, #4]
 800ea08:	f7ff fb69 	bl	800e0de <dir_sdi>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ea12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d132      	bne.n	800ea80 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	3324      	adds	r3, #36	@ 0x24
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7ff fe8a 	bl	800e738 <sum_sfn>
 800ea24:	4603      	mov	r3, r0
 800ea26:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	69db      	ldr	r3, [r3, #28]
 800ea2c:	4619      	mov	r1, r3
 800ea2e:	69f8      	ldr	r0, [r7, #28]
 800ea30:	f7fe ffd8 	bl	800d9e4 <move_window>
 800ea34:	4603      	mov	r3, r0
 800ea36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800ea3a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d11d      	bne.n	800ea7e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	68d8      	ldr	r0, [r3, #12]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6a19      	ldr	r1, [r3, #32]
 800ea4a:	6a3b      	ldr	r3, [r7, #32]
 800ea4c:	b2da      	uxtb	r2, r3
 800ea4e:	7efb      	ldrb	r3, [r7, #27]
 800ea50:	f7ff fd7c 	bl	800e54c <put_lfn>
				fs->wflag = 1;
 800ea54:	69fb      	ldr	r3, [r7, #28]
 800ea56:	2201      	movs	r2, #1
 800ea58:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	6878      	ldr	r0, [r7, #4]
 800ea5e:	f7ff fbb9 	bl	800e1d4 <dir_next>
 800ea62:	4603      	mov	r3, r0
 800ea64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800ea68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d107      	bne.n	800ea80 <dir_register+0x184>
 800ea70:	6a3b      	ldr	r3, [r7, #32]
 800ea72:	3b01      	subs	r3, #1
 800ea74:	623b      	str	r3, [r7, #32]
 800ea76:	6a3b      	ldr	r3, [r7, #32]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d1d5      	bne.n	800ea28 <dir_register+0x12c>
 800ea7c:	e000      	b.n	800ea80 <dir_register+0x184>
				if (res != FR_OK) break;
 800ea7e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ea80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d128      	bne.n	800eada <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	69db      	ldr	r3, [r3, #28]
 800ea8c:	4619      	mov	r1, r3
 800ea8e:	69f8      	ldr	r0, [r7, #28]
 800ea90:	f7fe ffa8 	bl	800d9e4 <move_window>
 800ea94:	4603      	mov	r3, r0
 800ea96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800ea9a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d11b      	bne.n	800eada <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a1b      	ldr	r3, [r3, #32]
 800eaa6:	2220      	movs	r2, #32
 800eaa8:	2100      	movs	r1, #0
 800eaaa:	4618      	mov	r0, r3
 800eaac:	f7fe fd5b 	bl	800d566 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6a18      	ldr	r0, [r3, #32]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	3324      	adds	r3, #36	@ 0x24
 800eab8:	220b      	movs	r2, #11
 800eaba:	4619      	mov	r1, r3
 800eabc:	f7fe fd32 	bl	800d524 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	6a1b      	ldr	r3, [r3, #32]
 800eaca:	330c      	adds	r3, #12
 800eacc:	f002 0218 	and.w	r2, r2, #24
 800ead0:	b2d2      	uxtb	r2, r2
 800ead2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ead4:	69fb      	ldr	r3, [r7, #28]
 800ead6:	2201      	movs	r2, #1
 800ead8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800eada:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800eade:	4618      	mov	r0, r3
 800eae0:	3730      	adds	r7, #48	@ 0x30
 800eae2:	46bd      	mov	sp, r7
 800eae4:	bd80      	pop	{r7, pc}
 800eae6:	bf00      	nop
 800eae8:	4ec4ec4f 	.word	0x4ec4ec4f

0800eaec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b08a      	sub	sp, #40	@ 0x28
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
 800eaf4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800eaf6:	683b      	ldr	r3, [r7, #0]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	613b      	str	r3, [r7, #16]
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68db      	ldr	r3, [r3, #12]
 800eb02:	60fb      	str	r3, [r7, #12]
 800eb04:	2300      	movs	r3, #0
 800eb06:	617b      	str	r3, [r7, #20]
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800eb0c:	69bb      	ldr	r3, [r7, #24]
 800eb0e:	1c5a      	adds	r2, r3, #1
 800eb10:	61ba      	str	r2, [r7, #24]
 800eb12:	693a      	ldr	r2, [r7, #16]
 800eb14:	4413      	add	r3, r2
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800eb1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb1c:	2b1f      	cmp	r3, #31
 800eb1e:	d940      	bls.n	800eba2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800eb20:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb22:	2b2f      	cmp	r3, #47	@ 0x2f
 800eb24:	d006      	beq.n	800eb34 <create_name+0x48>
 800eb26:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb28:	2b5c      	cmp	r3, #92	@ 0x5c
 800eb2a:	d110      	bne.n	800eb4e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eb2c:	e002      	b.n	800eb34 <create_name+0x48>
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	3301      	adds	r3, #1
 800eb32:	61bb      	str	r3, [r7, #24]
 800eb34:	693a      	ldr	r2, [r7, #16]
 800eb36:	69bb      	ldr	r3, [r7, #24]
 800eb38:	4413      	add	r3, r2
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	2b2f      	cmp	r3, #47	@ 0x2f
 800eb3e:	d0f6      	beq.n	800eb2e <create_name+0x42>
 800eb40:	693a      	ldr	r2, [r7, #16]
 800eb42:	69bb      	ldr	r3, [r7, #24]
 800eb44:	4413      	add	r3, r2
 800eb46:	781b      	ldrb	r3, [r3, #0]
 800eb48:	2b5c      	cmp	r3, #92	@ 0x5c
 800eb4a:	d0f0      	beq.n	800eb2e <create_name+0x42>
			break;
 800eb4c:	e02a      	b.n	800eba4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800eb4e:	697b      	ldr	r3, [r7, #20]
 800eb50:	2bfe      	cmp	r3, #254	@ 0xfe
 800eb52:	d901      	bls.n	800eb58 <create_name+0x6c>
 800eb54:	2306      	movs	r3, #6
 800eb56:	e17d      	b.n	800ee54 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800eb58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800eb5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb60:	2101      	movs	r1, #1
 800eb62:	4618      	mov	r0, r3
 800eb64:	f001 fa5e 	bl	8010024 <ff_convert>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800eb6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d101      	bne.n	800eb76 <create_name+0x8a>
 800eb72:	2306      	movs	r3, #6
 800eb74:	e16e      	b.n	800ee54 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800eb76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb78:	2b7f      	cmp	r3, #127	@ 0x7f
 800eb7a:	d809      	bhi.n	800eb90 <create_name+0xa4>
 800eb7c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800eb7e:	4619      	mov	r1, r3
 800eb80:	488d      	ldr	r0, [pc, #564]	@ (800edb8 <create_name+0x2cc>)
 800eb82:	f7fe fd32 	bl	800d5ea <chk_chr>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d001      	beq.n	800eb90 <create_name+0xa4>
 800eb8c:	2306      	movs	r3, #6
 800eb8e:	e161      	b.n	800ee54 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800eb90:	697b      	ldr	r3, [r7, #20]
 800eb92:	1c5a      	adds	r2, r3, #1
 800eb94:	617a      	str	r2, [r7, #20]
 800eb96:	005b      	lsls	r3, r3, #1
 800eb98:	68fa      	ldr	r2, [r7, #12]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800eb9e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800eba0:	e7b4      	b.n	800eb0c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800eba2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800eba4:	693a      	ldr	r2, [r7, #16]
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	441a      	add	r2, r3
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ebae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebb0:	2b1f      	cmp	r3, #31
 800ebb2:	d801      	bhi.n	800ebb8 <create_name+0xcc>
 800ebb4:	2304      	movs	r3, #4
 800ebb6:	e000      	b.n	800ebba <create_name+0xce>
 800ebb8:	2300      	movs	r3, #0
 800ebba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ebbe:	e011      	b.n	800ebe4 <create_name+0xf8>
		w = lfn[di - 1];
 800ebc0:	697a      	ldr	r2, [r7, #20]
 800ebc2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ebc6:	4413      	add	r3, r2
 800ebc8:	005b      	lsls	r3, r3, #1
 800ebca:	68fa      	ldr	r2, [r7, #12]
 800ebcc:	4413      	add	r3, r2
 800ebce:	881b      	ldrh	r3, [r3, #0]
 800ebd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800ebd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebd4:	2b20      	cmp	r3, #32
 800ebd6:	d002      	beq.n	800ebde <create_name+0xf2>
 800ebd8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ebda:	2b2e      	cmp	r3, #46	@ 0x2e
 800ebdc:	d106      	bne.n	800ebec <create_name+0x100>
		di--;
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	3b01      	subs	r3, #1
 800ebe2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1ea      	bne.n	800ebc0 <create_name+0xd4>
 800ebea:	e000      	b.n	800ebee <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800ebec:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	005b      	lsls	r3, r3, #1
 800ebf2:	68fa      	ldr	r2, [r7, #12]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d101      	bne.n	800ec04 <create_name+0x118>
 800ec00:	2306      	movs	r3, #6
 800ec02:	e127      	b.n	800ee54 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	3324      	adds	r3, #36	@ 0x24
 800ec08:	220b      	movs	r2, #11
 800ec0a:	2120      	movs	r1, #32
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	f7fe fcaa 	bl	800d566 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ec12:	2300      	movs	r3, #0
 800ec14:	61bb      	str	r3, [r7, #24]
 800ec16:	e002      	b.n	800ec1e <create_name+0x132>
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	61bb      	str	r3, [r7, #24]
 800ec1e:	69bb      	ldr	r3, [r7, #24]
 800ec20:	005b      	lsls	r3, r3, #1
 800ec22:	68fa      	ldr	r2, [r7, #12]
 800ec24:	4413      	add	r3, r2
 800ec26:	881b      	ldrh	r3, [r3, #0]
 800ec28:	2b20      	cmp	r3, #32
 800ec2a:	d0f5      	beq.n	800ec18 <create_name+0x12c>
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	005b      	lsls	r3, r3, #1
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	4413      	add	r3, r2
 800ec34:	881b      	ldrh	r3, [r3, #0]
 800ec36:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec38:	d0ee      	beq.n	800ec18 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d009      	beq.n	800ec54 <create_name+0x168>
 800ec40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ec44:	f043 0303 	orr.w	r3, r3, #3
 800ec48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ec4c:	e002      	b.n	800ec54 <create_name+0x168>
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	3b01      	subs	r3, #1
 800ec52:	617b      	str	r3, [r7, #20]
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d009      	beq.n	800ec6e <create_name+0x182>
 800ec5a:	697a      	ldr	r2, [r7, #20]
 800ec5c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ec60:	4413      	add	r3, r2
 800ec62:	005b      	lsls	r3, r3, #1
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	4413      	add	r3, r2
 800ec68:	881b      	ldrh	r3, [r3, #0]
 800ec6a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec6c:	d1ef      	bne.n	800ec4e <create_name+0x162>

	i = b = 0; ni = 8;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ec74:	2300      	movs	r3, #0
 800ec76:	623b      	str	r3, [r7, #32]
 800ec78:	2308      	movs	r3, #8
 800ec7a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ec7c:	69bb      	ldr	r3, [r7, #24]
 800ec7e:	1c5a      	adds	r2, r3, #1
 800ec80:	61ba      	str	r2, [r7, #24]
 800ec82:	005b      	lsls	r3, r3, #1
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	4413      	add	r3, r2
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ec8c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	f000 8090 	beq.w	800edb4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ec94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec96:	2b20      	cmp	r3, #32
 800ec98:	d006      	beq.n	800eca8 <create_name+0x1bc>
 800ec9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ec9c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ec9e:	d10a      	bne.n	800ecb6 <create_name+0x1ca>
 800eca0:	69ba      	ldr	r2, [r7, #24]
 800eca2:	697b      	ldr	r3, [r7, #20]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	d006      	beq.n	800ecb6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800eca8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecac:	f043 0303 	orr.w	r3, r3, #3
 800ecb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ecb4:	e07d      	b.n	800edb2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ecb6:	6a3a      	ldr	r2, [r7, #32]
 800ecb8:	69fb      	ldr	r3, [r7, #28]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d203      	bcs.n	800ecc6 <create_name+0x1da>
 800ecbe:	69ba      	ldr	r2, [r7, #24]
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	429a      	cmp	r2, r3
 800ecc4:	d123      	bne.n	800ed0e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	2b0b      	cmp	r3, #11
 800ecca:	d106      	bne.n	800ecda <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800eccc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ecd0:	f043 0303 	orr.w	r3, r3, #3
 800ecd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ecd8:	e075      	b.n	800edc6 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ecda:	69ba      	ldr	r2, [r7, #24]
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	429a      	cmp	r2, r3
 800ece0:	d005      	beq.n	800ecee <create_name+0x202>
 800ece2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ece6:	f043 0303 	orr.w	r3, r3, #3
 800ecea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800ecee:	69ba      	ldr	r2, [r7, #24]
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	429a      	cmp	r2, r3
 800ecf4:	d866      	bhi.n	800edc4 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	61bb      	str	r3, [r7, #24]
 800ecfa:	2308      	movs	r3, #8
 800ecfc:	623b      	str	r3, [r7, #32]
 800ecfe:	230b      	movs	r3, #11
 800ed00:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ed02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed06:	009b      	lsls	r3, r3, #2
 800ed08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ed0c:	e051      	b.n	800edb2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ed0e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed10:	2b7f      	cmp	r3, #127	@ 0x7f
 800ed12:	d914      	bls.n	800ed3e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ed14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed16:	2100      	movs	r1, #0
 800ed18:	4618      	mov	r0, r3
 800ed1a:	f001 f983 	bl	8010024 <ff_convert>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ed22:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d004      	beq.n	800ed32 <create_name+0x246>
 800ed28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed2a:	3b80      	subs	r3, #128	@ 0x80
 800ed2c:	4a23      	ldr	r2, [pc, #140]	@ (800edbc <create_name+0x2d0>)
 800ed2e:	5cd3      	ldrb	r3, [r2, r3]
 800ed30:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ed32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed36:	f043 0302 	orr.w	r3, r3, #2
 800ed3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ed3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d007      	beq.n	800ed54 <create_name+0x268>
 800ed44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed46:	4619      	mov	r1, r3
 800ed48:	481d      	ldr	r0, [pc, #116]	@ (800edc0 <create_name+0x2d4>)
 800ed4a:	f7fe fc4e 	bl	800d5ea <chk_chr>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d008      	beq.n	800ed66 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ed54:	235f      	movs	r3, #95	@ 0x5f
 800ed56:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800ed58:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ed5c:	f043 0303 	orr.w	r3, r3, #3
 800ed60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ed64:	e01b      	b.n	800ed9e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ed66:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed68:	2b40      	cmp	r3, #64	@ 0x40
 800ed6a:	d909      	bls.n	800ed80 <create_name+0x294>
 800ed6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed6e:	2b5a      	cmp	r3, #90	@ 0x5a
 800ed70:	d806      	bhi.n	800ed80 <create_name+0x294>
					b |= 2;
 800ed72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed76:	f043 0302 	orr.w	r3, r3, #2
 800ed7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ed7e:	e00e      	b.n	800ed9e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ed80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed82:	2b60      	cmp	r3, #96	@ 0x60
 800ed84:	d90b      	bls.n	800ed9e <create_name+0x2b2>
 800ed86:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed88:	2b7a      	cmp	r3, #122	@ 0x7a
 800ed8a:	d808      	bhi.n	800ed9e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ed8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ed90:	f043 0301 	orr.w	r3, r3, #1
 800ed94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ed98:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ed9a:	3b20      	subs	r3, #32
 800ed9c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ed9e:	6a3b      	ldr	r3, [r7, #32]
 800eda0:	1c5a      	adds	r2, r3, #1
 800eda2:	623a      	str	r2, [r7, #32]
 800eda4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800eda6:	b2d1      	uxtb	r1, r2
 800eda8:	687a      	ldr	r2, [r7, #4]
 800edaa:	4413      	add	r3, r2
 800edac:	460a      	mov	r2, r1
 800edae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800edb2:	e763      	b.n	800ec7c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800edb4:	bf00      	nop
 800edb6:	e006      	b.n	800edc6 <create_name+0x2da>
 800edb8:	08013b70 	.word	0x08013b70
 800edbc:	080156ac 	.word	0x080156ac
 800edc0:	08013b7c 	.word	0x08013b7c
			if (si > di) break;			/* No extension */
 800edc4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800edcc:	2be5      	cmp	r3, #229	@ 0xe5
 800edce:	d103      	bne.n	800edd8 <create_name+0x2ec>
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2205      	movs	r2, #5
 800edd4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	2b08      	cmp	r3, #8
 800eddc:	d104      	bne.n	800ede8 <create_name+0x2fc>
 800edde:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ede2:	009b      	lsls	r3, r3, #2
 800ede4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ede8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800edec:	f003 030c 	and.w	r3, r3, #12
 800edf0:	2b0c      	cmp	r3, #12
 800edf2:	d005      	beq.n	800ee00 <create_name+0x314>
 800edf4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800edf8:	f003 0303 	and.w	r3, r3, #3
 800edfc:	2b03      	cmp	r3, #3
 800edfe:	d105      	bne.n	800ee0c <create_name+0x320>
 800ee00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee04:	f043 0302 	orr.w	r3, r3, #2
 800ee08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ee0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee10:	f003 0302 	and.w	r3, r3, #2
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d117      	bne.n	800ee48 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800ee18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ee1c:	f003 0303 	and.w	r3, r3, #3
 800ee20:	2b01      	cmp	r3, #1
 800ee22:	d105      	bne.n	800ee30 <create_name+0x344>
 800ee24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee28:	f043 0310 	orr.w	r3, r3, #16
 800ee2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800ee30:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ee34:	f003 030c 	and.w	r3, r3, #12
 800ee38:	2b04      	cmp	r3, #4
 800ee3a:	d105      	bne.n	800ee48 <create_name+0x35c>
 800ee3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ee40:	f043 0308 	orr.w	r3, r3, #8
 800ee44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ee4e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 800ee52:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3728      	adds	r7, #40	@ 0x28
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	bd80      	pop	{r7, pc}

0800ee5c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b086      	sub	sp, #24
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ee70:	e002      	b.n	800ee78 <follow_path+0x1c>
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	3301      	adds	r3, #1
 800ee76:	603b      	str	r3, [r7, #0]
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	2b2f      	cmp	r3, #47	@ 0x2f
 800ee7e:	d0f8      	beq.n	800ee72 <follow_path+0x16>
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	781b      	ldrb	r3, [r3, #0]
 800ee84:	2b5c      	cmp	r3, #92	@ 0x5c
 800ee86:	d0f4      	beq.n	800ee72 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	2b1f      	cmp	r3, #31
 800ee94:	d80a      	bhi.n	800eeac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2280      	movs	r2, #128	@ 0x80
 800ee9a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800ee9e:	2100      	movs	r1, #0
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f7ff f91c 	bl	800e0de <dir_sdi>
 800eea6:	4603      	mov	r3, r0
 800eea8:	75fb      	strb	r3, [r7, #23]
 800eeaa:	e043      	b.n	800ef34 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800eeac:	463b      	mov	r3, r7
 800eeae:	4619      	mov	r1, r3
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f7ff fe1b 	bl	800eaec <create_name>
 800eeb6:	4603      	mov	r3, r0
 800eeb8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800eeba:	7dfb      	ldrb	r3, [r7, #23]
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d134      	bne.n	800ef2a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7ff fc5a 	bl	800e77a <dir_find>
 800eec6:	4603      	mov	r3, r0
 800eec8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800eed0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eed2:	7dfb      	ldrb	r3, [r7, #23]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d00a      	beq.n	800eeee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eed8:	7dfb      	ldrb	r3, [r7, #23]
 800eeda:	2b04      	cmp	r3, #4
 800eedc:	d127      	bne.n	800ef2e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800eede:	7afb      	ldrb	r3, [r7, #11]
 800eee0:	f003 0304 	and.w	r3, r3, #4
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d122      	bne.n	800ef2e <follow_path+0xd2>
 800eee8:	2305      	movs	r3, #5
 800eeea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800eeec:	e01f      	b.n	800ef2e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800eeee:	7afb      	ldrb	r3, [r7, #11]
 800eef0:	f003 0304 	and.w	r3, r3, #4
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d11c      	bne.n	800ef32 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	799b      	ldrb	r3, [r3, #6]
 800eefc:	f003 0310 	and.w	r3, r3, #16
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d102      	bne.n	800ef0a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ef04:	2305      	movs	r3, #5
 800ef06:	75fb      	strb	r3, [r7, #23]
 800ef08:	e014      	b.n	800ef34 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	695b      	ldr	r3, [r3, #20]
 800ef14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef18:	4413      	add	r3, r2
 800ef1a:	4619      	mov	r1, r3
 800ef1c:	68f8      	ldr	r0, [r7, #12]
 800ef1e:	f7ff fa65 	bl	800e3ec <ld_clust>
 800ef22:	4602      	mov	r2, r0
 800ef24:	693b      	ldr	r3, [r7, #16]
 800ef26:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ef28:	e7c0      	b.n	800eeac <follow_path+0x50>
			if (res != FR_OK) break;
 800ef2a:	bf00      	nop
 800ef2c:	e002      	b.n	800ef34 <follow_path+0xd8>
				break;
 800ef2e:	bf00      	nop
 800ef30:	e000      	b.n	800ef34 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ef32:	bf00      	nop
			}
		}
	}

	return res;
 800ef34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3718      	adds	r7, #24
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	bd80      	pop	{r7, pc}

0800ef3e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ef3e:	b480      	push	{r7}
 800ef40:	b087      	sub	sp, #28
 800ef42:	af00      	add	r7, sp, #0
 800ef44:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ef46:	f04f 33ff 	mov.w	r3, #4294967295
 800ef4a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d031      	beq.n	800efb8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	617b      	str	r3, [r7, #20]
 800ef5a:	e002      	b.n	800ef62 <get_ldnumber+0x24>
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	3301      	adds	r3, #1
 800ef60:	617b      	str	r3, [r7, #20]
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	2b1f      	cmp	r3, #31
 800ef68:	d903      	bls.n	800ef72 <get_ldnumber+0x34>
 800ef6a:	697b      	ldr	r3, [r7, #20]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	2b3a      	cmp	r3, #58	@ 0x3a
 800ef70:	d1f4      	bne.n	800ef5c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	2b3a      	cmp	r3, #58	@ 0x3a
 800ef78:	d11c      	bne.n	800efb4 <get_ldnumber+0x76>
			tp = *path;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	1c5a      	adds	r2, r3, #1
 800ef84:	60fa      	str	r2, [r7, #12]
 800ef86:	781b      	ldrb	r3, [r3, #0]
 800ef88:	3b30      	subs	r3, #48	@ 0x30
 800ef8a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	2b09      	cmp	r3, #9
 800ef90:	d80e      	bhi.n	800efb0 <get_ldnumber+0x72>
 800ef92:	68fa      	ldr	r2, [r7, #12]
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	429a      	cmp	r2, r3
 800ef98:	d10a      	bne.n	800efb0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d107      	bne.n	800efb0 <get_ldnumber+0x72>
					vol = (int)i;
 800efa0:	68bb      	ldr	r3, [r7, #8]
 800efa2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800efa4:	697b      	ldr	r3, [r7, #20]
 800efa6:	3301      	adds	r3, #1
 800efa8:	617b      	str	r3, [r7, #20]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	697a      	ldr	r2, [r7, #20]
 800efae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	e002      	b.n	800efba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800efb4:	2300      	movs	r3, #0
 800efb6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800efb8:	693b      	ldr	r3, [r7, #16]
}
 800efba:	4618      	mov	r0, r3
 800efbc:	371c      	adds	r7, #28
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr
	...

0800efc8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
 800efd0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	70da      	strb	r2, [r3, #3]
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f04f 32ff 	mov.w	r2, #4294967295
 800efde:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800efe0:	6839      	ldr	r1, [r7, #0]
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f7fe fcfe 	bl	800d9e4 <move_window>
 800efe8:	4603      	mov	r3, r0
 800efea:	2b00      	cmp	r3, #0
 800efec:	d001      	beq.n	800eff2 <check_fs+0x2a>
 800efee:	2304      	movs	r3, #4
 800eff0:	e038      	b.n	800f064 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	3338      	adds	r3, #56	@ 0x38
 800eff6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800effa:	4618      	mov	r0, r3
 800effc:	f7fe fa10 	bl	800d420 <ld_word>
 800f000:	4603      	mov	r3, r0
 800f002:	461a      	mov	r2, r3
 800f004:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f008:	429a      	cmp	r2, r3
 800f00a:	d001      	beq.n	800f010 <check_fs+0x48>
 800f00c:	2303      	movs	r3, #3
 800f00e:	e029      	b.n	800f064 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f016:	2be9      	cmp	r3, #233	@ 0xe9
 800f018:	d009      	beq.n	800f02e <check_fs+0x66>
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800f020:	2beb      	cmp	r3, #235	@ 0xeb
 800f022:	d11e      	bne.n	800f062 <check_fs+0x9a>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f02a:	2b90      	cmp	r3, #144	@ 0x90
 800f02c:	d119      	bne.n	800f062 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	3338      	adds	r3, #56	@ 0x38
 800f032:	3336      	adds	r3, #54	@ 0x36
 800f034:	4618      	mov	r0, r3
 800f036:	f7fe fa0b 	bl	800d450 <ld_dword>
 800f03a:	4603      	mov	r3, r0
 800f03c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800f040:	4a0a      	ldr	r2, [pc, #40]	@ (800f06c <check_fs+0xa4>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d101      	bne.n	800f04a <check_fs+0x82>
 800f046:	2300      	movs	r3, #0
 800f048:	e00c      	b.n	800f064 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	3338      	adds	r3, #56	@ 0x38
 800f04e:	3352      	adds	r3, #82	@ 0x52
 800f050:	4618      	mov	r0, r3
 800f052:	f7fe f9fd 	bl	800d450 <ld_dword>
 800f056:	4603      	mov	r3, r0
 800f058:	4a05      	ldr	r2, [pc, #20]	@ (800f070 <check_fs+0xa8>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d101      	bne.n	800f062 <check_fs+0x9a>
 800f05e:	2300      	movs	r3, #0
 800f060:	e000      	b.n	800f064 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f062:	2302      	movs	r3, #2
}
 800f064:	4618      	mov	r0, r3
 800f066:	3708      	adds	r7, #8
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}
 800f06c:	00544146 	.word	0x00544146
 800f070:	33544146 	.word	0x33544146

0800f074 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b096      	sub	sp, #88	@ 0x58
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	4613      	mov	r3, r2
 800f080:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	2200      	movs	r2, #0
 800f086:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f088:	68f8      	ldr	r0, [r7, #12]
 800f08a:	f7ff ff58 	bl	800ef3e <get_ldnumber>
 800f08e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f092:	2b00      	cmp	r3, #0
 800f094:	da01      	bge.n	800f09a <find_volume+0x26>
 800f096:	230b      	movs	r3, #11
 800f098:	e235      	b.n	800f506 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f09a:	4aa5      	ldr	r2, [pc, #660]	@ (800f330 <find_volume+0x2bc>)
 800f09c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f09e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f0a2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f0a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d101      	bne.n	800f0ae <find_volume+0x3a>
 800f0aa:	230c      	movs	r3, #12
 800f0ac:	e22b      	b.n	800f506 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800f0ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f0b0:	f7fe fab6 	bl	800d620 <lock_fs>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d101      	bne.n	800f0be <find_volume+0x4a>
 800f0ba:	230f      	movs	r3, #15
 800f0bc:	e223      	b.n	800f506 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800f0be:	68bb      	ldr	r3, [r7, #8]
 800f0c0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f0c2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f0c4:	79fb      	ldrb	r3, [r7, #7]
 800f0c6:	f023 0301 	bic.w	r3, r3, #1
 800f0ca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f0cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0ce:	781b      	ldrb	r3, [r3, #0]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d01a      	beq.n	800f10a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800f0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f0d6:	785b      	ldrb	r3, [r3, #1]
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fe f903 	bl	800d2e4 <disk_status>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f0e4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f0e8:	f003 0301 	and.w	r3, r3, #1
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d10c      	bne.n	800f10a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f0f0:	79fb      	ldrb	r3, [r7, #7]
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d007      	beq.n	800f106 <find_volume+0x92>
 800f0f6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f0fa:	f003 0304 	and.w	r3, r3, #4
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d001      	beq.n	800f106 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800f102:	230a      	movs	r3, #10
 800f104:	e1ff      	b.n	800f506 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800f106:	2300      	movs	r3, #0
 800f108:	e1fd      	b.n	800f506 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f10a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f10c:	2200      	movs	r2, #0
 800f10e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f110:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f112:	b2da      	uxtb	r2, r3
 800f114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f116:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f11a:	785b      	ldrb	r3, [r3, #1]
 800f11c:	4618      	mov	r0, r3
 800f11e:	f7fe f8fb 	bl	800d318 <disk_initialize>
 800f122:	4603      	mov	r3, r0
 800f124:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f128:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f12c:	f003 0301 	and.w	r3, r3, #1
 800f130:	2b00      	cmp	r3, #0
 800f132:	d001      	beq.n	800f138 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f134:	2303      	movs	r3, #3
 800f136:	e1e6      	b.n	800f506 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f138:	79fb      	ldrb	r3, [r7, #7]
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d007      	beq.n	800f14e <find_volume+0xda>
 800f13e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f142:	f003 0304 	and.w	r3, r3, #4
 800f146:	2b00      	cmp	r3, #0
 800f148:	d001      	beq.n	800f14e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800f14a:	230a      	movs	r3, #10
 800f14c:	e1db      	b.n	800f506 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f14e:	2300      	movs	r3, #0
 800f150:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f152:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f154:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f156:	f7ff ff37 	bl	800efc8 <check_fs>
 800f15a:	4603      	mov	r3, r0
 800f15c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f160:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f164:	2b02      	cmp	r3, #2
 800f166:	d149      	bne.n	800f1fc <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f168:	2300      	movs	r3, #0
 800f16a:	643b      	str	r3, [r7, #64]	@ 0x40
 800f16c:	e01e      	b.n	800f1ac <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f170:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800f174:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f176:	011b      	lsls	r3, r3, #4
 800f178:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800f17c:	4413      	add	r3, r2
 800f17e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f182:	3304      	adds	r3, #4
 800f184:	781b      	ldrb	r3, [r3, #0]
 800f186:	2b00      	cmp	r3, #0
 800f188:	d006      	beq.n	800f198 <find_volume+0x124>
 800f18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f18c:	3308      	adds	r3, #8
 800f18e:	4618      	mov	r0, r3
 800f190:	f7fe f95e 	bl	800d450 <ld_dword>
 800f194:	4602      	mov	r2, r0
 800f196:	e000      	b.n	800f19a <find_volume+0x126>
 800f198:	2200      	movs	r2, #0
 800f19a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f19c:	009b      	lsls	r3, r3, #2
 800f19e:	3358      	adds	r3, #88	@ 0x58
 800f1a0:	443b      	add	r3, r7
 800f1a2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f1a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	643b      	str	r3, [r7, #64]	@ 0x40
 800f1ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1ae:	2b03      	cmp	r3, #3
 800f1b0:	d9dd      	bls.n	800f16e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800f1b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d002      	beq.n	800f1c2 <find_volume+0x14e>
 800f1bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1be:	3b01      	subs	r3, #1
 800f1c0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f1c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	3358      	adds	r3, #88	@ 0x58
 800f1c8:	443b      	add	r3, r7
 800f1ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f1ce:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f1d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d005      	beq.n	800f1e2 <find_volume+0x16e>
 800f1d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800f1d8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f1da:	f7ff fef5 	bl	800efc8 <check_fs>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	e000      	b.n	800f1e4 <find_volume+0x170>
 800f1e2:	2303      	movs	r3, #3
 800f1e4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f1e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f1ec:	2b01      	cmp	r3, #1
 800f1ee:	d905      	bls.n	800f1fc <find_volume+0x188>
 800f1f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	643b      	str	r3, [r7, #64]	@ 0x40
 800f1f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f1f8:	2b03      	cmp	r3, #3
 800f1fa:	d9e2      	bls.n	800f1c2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f1fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f200:	2b04      	cmp	r3, #4
 800f202:	d101      	bne.n	800f208 <find_volume+0x194>
 800f204:	2301      	movs	r3, #1
 800f206:	e17e      	b.n	800f506 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f208:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d901      	bls.n	800f214 <find_volume+0x1a0>
 800f210:	230d      	movs	r3, #13
 800f212:	e178      	b.n	800f506 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f216:	3338      	adds	r3, #56	@ 0x38
 800f218:	330b      	adds	r3, #11
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7fe f900 	bl	800d420 <ld_word>
 800f220:	4603      	mov	r3, r0
 800f222:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f226:	d001      	beq.n	800f22c <find_volume+0x1b8>
 800f228:	230d      	movs	r3, #13
 800f22a:	e16c      	b.n	800f506 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f22c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f22e:	3338      	adds	r3, #56	@ 0x38
 800f230:	3316      	adds	r3, #22
 800f232:	4618      	mov	r0, r3
 800f234:	f7fe f8f4 	bl	800d420 <ld_word>
 800f238:	4603      	mov	r3, r0
 800f23a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f23c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d106      	bne.n	800f250 <find_volume+0x1dc>
 800f242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f244:	3338      	adds	r3, #56	@ 0x38
 800f246:	3324      	adds	r3, #36	@ 0x24
 800f248:	4618      	mov	r0, r3
 800f24a:	f7fe f901 	bl	800d450 <ld_dword>
 800f24e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800f250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f252:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f254:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f258:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800f25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f25e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f262:	789b      	ldrb	r3, [r3, #2]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d005      	beq.n	800f274 <find_volume+0x200>
 800f268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f26a:	789b      	ldrb	r3, [r3, #2]
 800f26c:	2b02      	cmp	r3, #2
 800f26e:	d001      	beq.n	800f274 <find_volume+0x200>
 800f270:	230d      	movs	r3, #13
 800f272:	e148      	b.n	800f506 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f276:	789b      	ldrb	r3, [r3, #2]
 800f278:	461a      	mov	r2, r3
 800f27a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f27c:	fb02 f303 	mul.w	r3, r2, r3
 800f280:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f284:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800f288:	461a      	mov	r2, r3
 800f28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f28c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f290:	895b      	ldrh	r3, [r3, #10]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d008      	beq.n	800f2a8 <find_volume+0x234>
 800f296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f298:	895b      	ldrh	r3, [r3, #10]
 800f29a:	461a      	mov	r2, r3
 800f29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f29e:	895b      	ldrh	r3, [r3, #10]
 800f2a0:	3b01      	subs	r3, #1
 800f2a2:	4013      	ands	r3, r2
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d001      	beq.n	800f2ac <find_volume+0x238>
 800f2a8:	230d      	movs	r3, #13
 800f2aa:	e12c      	b.n	800f506 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ae:	3338      	adds	r3, #56	@ 0x38
 800f2b0:	3311      	adds	r3, #17
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fe f8b4 	bl	800d420 <ld_word>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	461a      	mov	r2, r3
 800f2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2be:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2c2:	891b      	ldrh	r3, [r3, #8]
 800f2c4:	f003 030f 	and.w	r3, r3, #15
 800f2c8:	b29b      	uxth	r3, r3
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d001      	beq.n	800f2d2 <find_volume+0x25e>
 800f2ce:	230d      	movs	r3, #13
 800f2d0:	e119      	b.n	800f506 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f2d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2d4:	3338      	adds	r3, #56	@ 0x38
 800f2d6:	3313      	adds	r3, #19
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7fe f8a1 	bl	800d420 <ld_word>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f2e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d106      	bne.n	800f2f6 <find_volume+0x282>
 800f2e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2ea:	3338      	adds	r3, #56	@ 0x38
 800f2ec:	3320      	adds	r3, #32
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7fe f8ae 	bl	800d450 <ld_dword>
 800f2f4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f2f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2f8:	3338      	adds	r3, #56	@ 0x38
 800f2fa:	330e      	adds	r3, #14
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7fe f88f 	bl	800d420 <ld_word>
 800f302:	4603      	mov	r3, r0
 800f304:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f306:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d101      	bne.n	800f310 <find_volume+0x29c>
 800f30c:	230d      	movs	r3, #13
 800f30e:	e0fa      	b.n	800f506 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f310:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f314:	4413      	add	r3, r2
 800f316:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f318:	8912      	ldrh	r2, [r2, #8]
 800f31a:	0912      	lsrs	r2, r2, #4
 800f31c:	b292      	uxth	r2, r2
 800f31e:	4413      	add	r3, r2
 800f320:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f322:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f326:	429a      	cmp	r2, r3
 800f328:	d204      	bcs.n	800f334 <find_volume+0x2c0>
 800f32a:	230d      	movs	r3, #13
 800f32c:	e0eb      	b.n	800f506 <find_volume+0x492>
 800f32e:	bf00      	nop
 800f330:	20000df8 	.word	0x20000df8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f33c:	8952      	ldrh	r2, [r2, #10]
 800f33e:	fbb3 f3f2 	udiv	r3, r3, r2
 800f342:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f346:	2b00      	cmp	r3, #0
 800f348:	d101      	bne.n	800f34e <find_volume+0x2da>
 800f34a:	230d      	movs	r3, #13
 800f34c:	e0db      	b.n	800f506 <find_volume+0x492>
		fmt = FS_FAT32;
 800f34e:	2303      	movs	r3, #3
 800f350:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f356:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d802      	bhi.n	800f364 <find_volume+0x2f0>
 800f35e:	2302      	movs	r3, #2
 800f360:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f366:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d802      	bhi.n	800f374 <find_volume+0x300>
 800f36e:	2301      	movs	r3, #1
 800f370:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f376:	1c9a      	adds	r2, r3, #2
 800f378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f37a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800f37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f37e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f380:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f382:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800f384:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f386:	441a      	add	r2, r3
 800f388:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f38a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800f38c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f390:	441a      	add	r2, r3
 800f392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f394:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 800f396:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f39a:	2b03      	cmp	r3, #3
 800f39c:	d11e      	bne.n	800f3dc <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3a0:	3338      	adds	r3, #56	@ 0x38
 800f3a2:	332a      	adds	r3, #42	@ 0x2a
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	f7fe f83b 	bl	800d420 <ld_word>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d001      	beq.n	800f3b4 <find_volume+0x340>
 800f3b0:	230d      	movs	r3, #13
 800f3b2:	e0a8      	b.n	800f506 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f3b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3b6:	891b      	ldrh	r3, [r3, #8]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d001      	beq.n	800f3c0 <find_volume+0x34c>
 800f3bc:	230d      	movs	r3, #13
 800f3be:	e0a2      	b.n	800f506 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f3c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3c2:	3338      	adds	r3, #56	@ 0x38
 800f3c4:	332c      	adds	r3, #44	@ 0x2c
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	f7fe f842 	bl	800d450 <ld_dword>
 800f3cc:	4602      	mov	r2, r0
 800f3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3d0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3d4:	69db      	ldr	r3, [r3, #28]
 800f3d6:	009b      	lsls	r3, r3, #2
 800f3d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800f3da:	e01f      	b.n	800f41c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3de:	891b      	ldrh	r3, [r3, #8]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d101      	bne.n	800f3e8 <find_volume+0x374>
 800f3e4:	230d      	movs	r3, #13
 800f3e6:	e08e      	b.n	800f506 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f3e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f3ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f3ee:	441a      	add	r2, r3
 800f3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3f2:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f3f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f3f8:	2b02      	cmp	r3, #2
 800f3fa:	d103      	bne.n	800f404 <find_volume+0x390>
 800f3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3fe:	69db      	ldr	r3, [r3, #28]
 800f400:	005b      	lsls	r3, r3, #1
 800f402:	e00a      	b.n	800f41a <find_volume+0x3a6>
 800f404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f406:	69da      	ldr	r2, [r3, #28]
 800f408:	4613      	mov	r3, r2
 800f40a:	005b      	lsls	r3, r3, #1
 800f40c:	4413      	add	r3, r2
 800f40e:	085a      	lsrs	r2, r3, #1
 800f410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f412:	69db      	ldr	r3, [r3, #28]
 800f414:	f003 0301 	and.w	r3, r3, #1
 800f418:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f41a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f41c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f41e:	6a1a      	ldr	r2, [r3, #32]
 800f420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f422:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800f426:	0a5b      	lsrs	r3, r3, #9
 800f428:	429a      	cmp	r2, r3
 800f42a:	d201      	bcs.n	800f430 <find_volume+0x3bc>
 800f42c:	230d      	movs	r3, #13
 800f42e:	e06a      	b.n	800f506 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f432:	f04f 32ff 	mov.w	r2, #4294967295
 800f436:	619a      	str	r2, [r3, #24]
 800f438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f43a:	699a      	ldr	r2, [r3, #24]
 800f43c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f43e:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f442:	2280      	movs	r2, #128	@ 0x80
 800f444:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f446:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800f44a:	2b03      	cmp	r3, #3
 800f44c:	d149      	bne.n	800f4e2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f450:	3338      	adds	r3, #56	@ 0x38
 800f452:	3330      	adds	r3, #48	@ 0x30
 800f454:	4618      	mov	r0, r3
 800f456:	f7fd ffe3 	bl	800d420 <ld_word>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b01      	cmp	r3, #1
 800f45e:	d140      	bne.n	800f4e2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f460:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f462:	3301      	adds	r3, #1
 800f464:	4619      	mov	r1, r3
 800f466:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f468:	f7fe fabc 	bl	800d9e4 <move_window>
 800f46c:	4603      	mov	r3, r0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d137      	bne.n	800f4e2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800f472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f474:	2200      	movs	r2, #0
 800f476:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f47a:	3338      	adds	r3, #56	@ 0x38
 800f47c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800f480:	4618      	mov	r0, r3
 800f482:	f7fd ffcd 	bl	800d420 <ld_word>
 800f486:	4603      	mov	r3, r0
 800f488:	461a      	mov	r2, r3
 800f48a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800f48e:	429a      	cmp	r2, r3
 800f490:	d127      	bne.n	800f4e2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f494:	3338      	adds	r3, #56	@ 0x38
 800f496:	4618      	mov	r0, r3
 800f498:	f7fd ffda 	bl	800d450 <ld_dword>
 800f49c:	4603      	mov	r3, r0
 800f49e:	4a1c      	ldr	r2, [pc, #112]	@ (800f510 <find_volume+0x49c>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d11e      	bne.n	800f4e2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4a6:	3338      	adds	r3, #56	@ 0x38
 800f4a8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fd ffcf 	bl	800d450 <ld_dword>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	4a17      	ldr	r2, [pc, #92]	@ (800f514 <find_volume+0x4a0>)
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d113      	bne.n	800f4e2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4bc:	3338      	adds	r3, #56	@ 0x38
 800f4be:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	f7fd ffc4 	bl	800d450 <ld_dword>
 800f4c8:	4602      	mov	r2, r0
 800f4ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4cc:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4d0:	3338      	adds	r3, #56	@ 0x38
 800f4d2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f7fd ffba 	bl	800d450 <ld_dword>
 800f4dc:	4602      	mov	r2, r0
 800f4de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e0:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800f4e8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f4ea:	4b0b      	ldr	r3, [pc, #44]	@ (800f518 <find_volume+0x4a4>)
 800f4ec:	881b      	ldrh	r3, [r3, #0]
 800f4ee:	3301      	adds	r3, #1
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	4b09      	ldr	r3, [pc, #36]	@ (800f518 <find_volume+0x4a4>)
 800f4f4:	801a      	strh	r2, [r3, #0]
 800f4f6:	4b08      	ldr	r3, [pc, #32]	@ (800f518 <find_volume+0x4a4>)
 800f4f8:	881a      	ldrh	r2, [r3, #0]
 800f4fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4fc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f4fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800f500:	f7fe fa08 	bl	800d914 <clear_lock>
#endif
	return FR_OK;
 800f504:	2300      	movs	r3, #0
}
 800f506:	4618      	mov	r0, r3
 800f508:	3758      	adds	r7, #88	@ 0x58
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	41615252 	.word	0x41615252
 800f514:	61417272 	.word	0x61417272
 800f518:	20000dfc 	.word	0x20000dfc

0800f51c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b084      	sub	sp, #16
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
 800f524:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f526:	2309      	movs	r3, #9
 800f528:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d02e      	beq.n	800f58e <validate+0x72>
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	2b00      	cmp	r3, #0
 800f536:	d02a      	beq.n	800f58e <validate+0x72>
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d025      	beq.n	800f58e <validate+0x72>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	889a      	ldrh	r2, [r3, #4]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	88db      	ldrh	r3, [r3, #6]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d11e      	bne.n	800f58e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	4618      	mov	r0, r3
 800f556:	f7fe f863 	bl	800d620 <lock_fs>
 800f55a:	4603      	mov	r3, r0
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d014      	beq.n	800f58a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	785b      	ldrb	r3, [r3, #1]
 800f566:	4618      	mov	r0, r3
 800f568:	f7fd febc 	bl	800d2e4 <disk_status>
 800f56c:	4603      	mov	r3, r0
 800f56e:	f003 0301 	and.w	r3, r3, #1
 800f572:	2b00      	cmp	r3, #0
 800f574:	d102      	bne.n	800f57c <validate+0x60>
				res = FR_OK;
 800f576:	2300      	movs	r3, #0
 800f578:	73fb      	strb	r3, [r7, #15]
 800f57a:	e008      	b.n	800f58e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2100      	movs	r1, #0
 800f582:	4618      	mov	r0, r3
 800f584:	f7fe f862 	bl	800d64c <unlock_fs>
 800f588:	e001      	b.n	800f58e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f58a:	230f      	movs	r3, #15
 800f58c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f58e:	7bfb      	ldrb	r3, [r7, #15]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d102      	bne.n	800f59a <validate+0x7e>
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	e000      	b.n	800f59c <validate+0x80>
 800f59a:	2300      	movs	r3, #0
 800f59c:	683a      	ldr	r2, [r7, #0]
 800f59e:	6013      	str	r3, [r2, #0]
	return res;
 800f5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3710      	adds	r7, #16
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}

0800f5aa <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	f5ad 7d1a 	sub.w	sp, sp, #616	@ 0x268
 800f5b0:	af00      	add	r7, sp, #0
 800f5b2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f5b6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f5ba:	6018      	str	r0, [r3, #0]
 800f5bc:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f5c0:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800f5c4:	6019      	str	r1, [r3, #0]
 800f5c6:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f5ca:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f5ce:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f5d0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f5d4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d101      	bne.n	800f5e2 <f_open+0x38>
 800f5de:	2309      	movs	r3, #9
 800f5e0:	e299      	b.n	800fb16 <f_open+0x56c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f5e2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f5e6:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f5ea:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f5ee:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f5f2:	7812      	ldrb	r2, [r2, #0]
 800f5f4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800f5f8:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800f5fa:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f5fe:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f602:	781a      	ldrb	r2, [r3, #0]
 800f604:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 800f608:	f107 0308 	add.w	r3, r7, #8
 800f60c:	4618      	mov	r0, r3
 800f60e:	f7ff fd31 	bl	800f074 <find_volume>
 800f612:	4603      	mov	r3, r0
 800f614:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (res == FR_OK) {
 800f618:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	f040 8265 	bne.w	800faec <f_open+0x542>
		dj.obj.fs = fs;
 800f622:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f626:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
		INIT_NAMBUF(fs);
 800f62a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f62e:	f107 0214 	add.w	r2, r7, #20
 800f632:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f634:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f638:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f642:	4611      	mov	r1, r2
 800f644:	4618      	mov	r0, r3
 800f646:	f7ff fc09 	bl	800ee5c <follow_path>
 800f64a:	4603      	mov	r3, r0
 800f64c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f650:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f654:	2b00      	cmp	r3, #0
 800f656:	d11c      	bne.n	800f692 <f_open+0xe8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f658:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 800f65c:	b25b      	sxtb	r3, r3
 800f65e:	2b00      	cmp	r3, #0
 800f660:	da03      	bge.n	800f66a <f_open+0xc0>
				res = FR_INVALID_NAME;
 800f662:	2306      	movs	r3, #6
 800f664:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f668:	e013      	b.n	800f692 <f_open+0xe8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f66a:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f66e:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f672:	781b      	ldrb	r3, [r3, #0]
 800f674:	2b01      	cmp	r3, #1
 800f676:	bf8c      	ite	hi
 800f678:	2301      	movhi	r3, #1
 800f67a:	2300      	movls	r3, #0
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	461a      	mov	r2, r3
 800f680:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f684:	4611      	mov	r1, r2
 800f686:	4618      	mov	r0, r3
 800f688:	f7fd fffc 	bl	800d684 <chk_lock>
 800f68c:	4603      	mov	r3, r0
 800f68e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f692:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f696:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	f003 031c 	and.w	r3, r3, #28
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	f000 80a7 	beq.w	800f7f4 <f_open+0x24a>
			if (res != FR_OK) {					/* No file, create new */
 800f6a6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d01f      	beq.n	800f6ee <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f6ae:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f6b2:	2b04      	cmp	r3, #4
 800f6b4:	d10e      	bne.n	800f6d4 <f_open+0x12a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f6b6:	f7fe f841 	bl	800d73c <enq_lock>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d006      	beq.n	800f6ce <f_open+0x124>
 800f6c0:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f6c4:	4618      	mov	r0, r3
 800f6c6:	f7ff f919 	bl	800e8fc <dir_register>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	e000      	b.n	800f6d0 <f_open+0x126>
 800f6ce:	2312      	movs	r3, #18
 800f6d0:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f6d4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f6d8:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f6dc:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f6e0:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f6e4:	7812      	ldrb	r2, [r2, #0]
 800f6e6:	f042 0208 	orr.w	r2, r2, #8
 800f6ea:	701a      	strb	r2, [r3, #0]
 800f6ec:	e015      	b.n	800f71a <f_open+0x170>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f6ee:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f6f2:	f003 0311 	and.w	r3, r3, #17
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d003      	beq.n	800f702 <f_open+0x158>
					res = FR_DENIED;
 800f6fa:	2307      	movs	r3, #7
 800f6fc:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f700:	e00b      	b.n	800f71a <f_open+0x170>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f702:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f706:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	f003 0304 	and.w	r3, r3, #4
 800f710:	2b00      	cmp	r3, #0
 800f712:	d002      	beq.n	800f71a <f_open+0x170>
 800f714:	2308      	movs	r3, #8
 800f716:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f71a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f71e:	2b00      	cmp	r3, #0
 800f720:	f040 8088 	bne.w	800f834 <f_open+0x28a>
 800f724:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f728:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f72c:	781b      	ldrb	r3, [r3, #0]
 800f72e:	f003 0308 	and.w	r3, r3, #8
 800f732:	2b00      	cmp	r3, #0
 800f734:	d07e      	beq.n	800f834 <f_open+0x28a>
				dw = GET_FATTIME();
 800f736:	f7fd fb9d 	bl	800ce74 <get_fattime>
 800f73a:	f8c7 0258 	str.w	r0, [r7, #600]	@ 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f73e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f742:	330e      	adds	r3, #14
 800f744:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fd febf 	bl	800d4cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f74e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f752:	3316      	adds	r3, #22
 800f754:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fd feb7 	bl	800d4cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f75e:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f762:	330b      	adds	r3, #11
 800f764:	2220      	movs	r2, #32
 800f766:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f768:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f76c:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f770:	4611      	mov	r1, r2
 800f772:	4618      	mov	r0, r3
 800f774:	f7fe fe3a 	bl	800e3ec <ld_clust>
 800f778:	f8c7 0254 	str.w	r0, [r7, #596]	@ 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f77c:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f780:	f8d7 1238 	ldr.w	r1, [r7, #568]	@ 0x238
 800f784:	2200      	movs	r2, #0
 800f786:	4618      	mov	r0, r3
 800f788:	f7fe fe4f 	bl	800e42a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f78c:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f790:	331c      	adds	r3, #28
 800f792:	2100      	movs	r1, #0
 800f794:	4618      	mov	r0, r3
 800f796:	f7fd fe99 	bl	800d4cc <st_dword>
					fs->wflag = 1;
 800f79a:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f79e:	2201      	movs	r2, #1
 800f7a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f7a2:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d044      	beq.n	800f834 <f_open+0x28a>
						dw = fs->winsect;
 800f7aa:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f7ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7b0:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800f7b4:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	f8d7 1254 	ldr.w	r1, [r7, #596]	@ 0x254
 800f7be:	4618      	mov	r0, r3
 800f7c0:	f7fe fb5c 	bl	800de7c <remove_chain>
 800f7c4:	4603      	mov	r3, r0
 800f7c6:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
						if (res == FR_OK) {
 800f7ca:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d130      	bne.n	800f834 <f_open+0x28a>
							res = move_window(fs, dw);
 800f7d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f7d6:	f8d7 1258 	ldr.w	r1, [r7, #600]	@ 0x258
 800f7da:	4618      	mov	r0, r3
 800f7dc:	f7fe f902 	bl	800d9e4 <move_window>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f7e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f7ea:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800f7ee:	3a01      	subs	r2, #1
 800f7f0:	615a      	str	r2, [r3, #20]
 800f7f2:	e01f      	b.n	800f834 <f_open+0x28a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f7f4:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d11b      	bne.n	800f834 <f_open+0x28a>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f7fc:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f800:	f003 0310 	and.w	r3, r3, #16
 800f804:	2b00      	cmp	r3, #0
 800f806:	d003      	beq.n	800f810 <f_open+0x266>
					res = FR_NO_FILE;
 800f808:	2304      	movs	r3, #4
 800f80a:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800f80e:	e011      	b.n	800f834 <f_open+0x28a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f810:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f814:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f818:	781b      	ldrb	r3, [r3, #0]
 800f81a:	f003 0302 	and.w	r3, r3, #2
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d008      	beq.n	800f834 <f_open+0x28a>
 800f822:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 800f826:	f003 0301 	and.w	r3, r3, #1
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d002      	beq.n	800f834 <f_open+0x28a>
						res = FR_DENIED;
 800f82e:	2307      	movs	r3, #7
 800f830:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800f834:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d148      	bne.n	800f8ce <f_open+0x324>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f83c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f840:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	f003 0308 	and.w	r3, r3, #8
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d00b      	beq.n	800f866 <f_open+0x2bc>
				mode |= FA_MODIFIED;
 800f84e:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f852:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f856:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f85a:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f85e:	7812      	ldrb	r2, [r2, #0]
 800f860:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f864:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f866:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f86a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f86c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f870:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800f878:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f87c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f880:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f888:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f88c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	2b01      	cmp	r3, #1
 800f894:	bf8c      	ite	hi
 800f896:	2301      	movhi	r3, #1
 800f898:	2300      	movls	r3, #0
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	461a      	mov	r2, r3
 800f89e:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 800f8a2:	4611      	mov	r1, r2
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	f7fd ff6b 	bl	800d780 <inc_lock>
 800f8aa:	4602      	mov	r2, r0
 800f8ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8b0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8b4:	681b      	ldr	r3, [r3, #0]
 800f8b6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f8b8:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8bc:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	691b      	ldr	r3, [r3, #16]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d102      	bne.n	800f8ce <f_open+0x324>
 800f8c8:	2302      	movs	r3, #2
 800f8ca:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f8ce:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	f040 810a 	bne.w	800faec <f_open+0x542>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f8d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f8dc:	f8d7 2238 	ldr.w	r2, [r7, #568]	@ 0x238
 800f8e0:	4611      	mov	r1, r2
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fe fd82 	bl	800e3ec <ld_clust>
 800f8e8:	4602      	mov	r2, r0
 800f8ea:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f8ee:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f8f6:	f8d7 3238 	ldr.w	r3, [r7, #568]	@ 0x238
 800f8fa:	331c      	adds	r3, #28
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	f7fd fda7 	bl	800d450 <ld_dword>
 800f902:	4602      	mov	r2, r0
 800f904:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f908:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f910:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f914:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	2200      	movs	r2, #0
 800f91c:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f91e:	f8d7 2214 	ldr.w	r2, [r7, #532]	@ 0x214
 800f922:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f926:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f92e:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f932:	88da      	ldrh	r2, [r3, #6]
 800f934:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f938:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f93c:	681b      	ldr	r3, [r3, #0]
 800f93e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f940:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f944:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800f94e:	f2a2 2261 	subw	r2, r2, #609	@ 0x261
 800f952:	7812      	ldrb	r2, [r2, #0]
 800f954:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f956:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f95a:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	2200      	movs	r2, #0
 800f962:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f964:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f968:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	2200      	movs	r2, #0
 800f970:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f972:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f976:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f97a:	681b      	ldr	r3, [r3, #0]
 800f97c:	2200      	movs	r2, #0
 800f97e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f980:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f984:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	3330      	adds	r3, #48	@ 0x30
 800f98c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f990:	2100      	movs	r1, #0
 800f992:	4618      	mov	r0, r3
 800f994:	f7fd fde7 	bl	800d566 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f998:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f99c:	f2a3 2361 	subw	r3, r3, #609	@ 0x261
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	f003 0320 	and.w	r3, r3, #32
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	f000 80a0 	beq.w	800faec <f_open+0x542>
 800f9ac:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9b0:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	68db      	ldr	r3, [r3, #12]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f000 8097 	beq.w	800faec <f_open+0x542>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f9be:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9c2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	68da      	ldr	r2, [r3, #12]
 800f9ca:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9ce:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f9d6:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800f9da:	895b      	ldrh	r3, [r3, #10]
 800f9dc:	025b      	lsls	r3, r3, #9
 800f9de:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f9e2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9e6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f9f2:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800f9f6:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	68db      	ldr	r3, [r3, #12]
 800f9fe:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800fa02:	e021      	b.n	800fa48 <f_open+0x49e>
					clst = get_fat(&fp->obj, clst);
 800fa04:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fa08:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7fe f8a1 	bl	800db5a <get_fat>
 800fa18:	f8c7 0260 	str.w	r0, [r7, #608]	@ 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800fa1c:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d802      	bhi.n	800fa2a <f_open+0x480>
 800fa24:	2302      	movs	r3, #2
 800fa26:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fa2a:	f8d7 3260 	ldr.w	r3, [r7, #608]	@ 0x260
 800fa2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa32:	d102      	bne.n	800fa3a <f_open+0x490>
 800fa34:	2301      	movs	r3, #1
 800fa36:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fa3a:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800fa3e:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800fa42:	1ad3      	subs	r3, r2, r3
 800fa44:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 800fa48:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d105      	bne.n	800fa5c <f_open+0x4b2>
 800fa50:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 800fa54:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d8d3      	bhi.n	800fa04 <f_open+0x45a>
				}
				fp->clust = clst;
 800fa5c:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fa60:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 800fa6a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fa6c:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d13b      	bne.n	800faec <f_open+0x542>
 800fa74:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800fa78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d035      	beq.n	800faec <f_open+0x542>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fa80:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fa84:	f8d7 1260 	ldr.w	r1, [r7, #608]	@ 0x260
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7fe f847 	bl	800db1c <clust2sect>
 800fa8e:	f8c7 024c 	str.w	r0, [r7, #588]	@ 0x24c
 800fa92:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d103      	bne.n	800faa2 <f_open+0x4f8>
						res = FR_INT_ERR;
 800fa9a:	2302      	movs	r3, #2
 800fa9c:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
 800faa0:	e024      	b.n	800faec <f_open+0x542>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800faa2:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800faa6:	0a5a      	lsrs	r2, r3, #9
 800faa8:	f8d7 324c 	ldr.w	r3, [r7, #588]	@ 0x24c
 800faac:	441a      	add	r2, r3
 800faae:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fab2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800faba:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fabe:	7858      	ldrb	r0, [r3, #1]
 800fac0:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fac4:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800face:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800fad2:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	6a1a      	ldr	r2, [r3, #32]
 800fada:	2301      	movs	r3, #1
 800fadc:	f7fd fc42 	bl	800d364 <disk_read>
 800fae0:	4603      	mov	r3, r0
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d002      	beq.n	800faec <f_open+0x542>
 800fae6:	2301      	movs	r3, #1
 800fae8:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800faec:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d006      	beq.n	800fb02 <f_open+0x558>
 800faf4:	f507 731a 	add.w	r3, r7, #616	@ 0x268
 800faf8:	f5a3 7317 	sub.w	r3, r3, #604	@ 0x25c
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2200      	movs	r2, #0
 800fb00:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fb02:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 800fb06:	f897 2267 	ldrb.w	r2, [r7, #615]	@ 0x267
 800fb0a:	4611      	mov	r1, r2
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7fd fd9d 	bl	800d64c <unlock_fs>
 800fb12:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	f507 771a 	add.w	r7, r7, #616	@ 0x268
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	bd80      	pop	{r7, pc}

0800fb20 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800fb20:	b580      	push	{r7, lr}
 800fb22:	b08e      	sub	sp, #56	@ 0x38
 800fb24:	af00      	add	r7, sp, #0
 800fb26:	60f8      	str	r0, [r7, #12]
 800fb28:	60b9      	str	r1, [r7, #8]
 800fb2a:	607a      	str	r2, [r7, #4]
 800fb2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fb2e:	68bb      	ldr	r3, [r7, #8]
 800fb30:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	2200      	movs	r2, #0
 800fb36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f107 0214 	add.w	r2, r7, #20
 800fb3e:	4611      	mov	r1, r2
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7ff fceb 	bl	800f51c <validate>
 800fb46:	4603      	mov	r3, r0
 800fb48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fb4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d107      	bne.n	800fb64 <f_read+0x44>
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	7d5b      	ldrb	r3, [r3, #21]
 800fb58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800fb5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d009      	beq.n	800fb78 <f_read+0x58>
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800fb6a:	4611      	mov	r1, r2
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	f7fd fd6d 	bl	800d64c <unlock_fs>
 800fb72:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800fb76:	e13d      	b.n	800fdf4 <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	7d1b      	ldrb	r3, [r3, #20]
 800fb7c:	f003 0301 	and.w	r3, r3, #1
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d106      	bne.n	800fb92 <f_read+0x72>
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	2107      	movs	r1, #7
 800fb88:	4618      	mov	r0, r3
 800fb8a:	f7fd fd5f 	bl	800d64c <unlock_fs>
 800fb8e:	2307      	movs	r3, #7
 800fb90:	e130      	b.n	800fdf4 <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	68da      	ldr	r2, [r3, #12]
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	699b      	ldr	r3, [r3, #24]
 800fb9a:	1ad3      	subs	r3, r2, r3
 800fb9c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fb9e:	687a      	ldr	r2, [r7, #4]
 800fba0:	6a3b      	ldr	r3, [r7, #32]
 800fba2:	429a      	cmp	r2, r3
 800fba4:	f240 811c 	bls.w	800fde0 <f_read+0x2c0>
 800fba8:	6a3b      	ldr	r3, [r7, #32]
 800fbaa:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fbac:	e118      	b.n	800fde0 <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	699b      	ldr	r3, [r3, #24]
 800fbb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	f040 80e4 	bne.w	800fd84 <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	699b      	ldr	r3, [r3, #24]
 800fbc0:	0a5b      	lsrs	r3, r3, #9
 800fbc2:	697a      	ldr	r2, [r7, #20]
 800fbc4:	8952      	ldrh	r2, [r2, #10]
 800fbc6:	3a01      	subs	r2, #1
 800fbc8:	4013      	ands	r3, r2
 800fbca:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d139      	bne.n	800fc46 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	699b      	ldr	r3, [r3, #24]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d103      	bne.n	800fbe2 <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	689b      	ldr	r3, [r3, #8]
 800fbde:	633b      	str	r3, [r7, #48]	@ 0x30
 800fbe0:	e013      	b.n	800fc0a <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d007      	beq.n	800fbfa <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	699b      	ldr	r3, [r3, #24]
 800fbee:	4619      	mov	r1, r3
 800fbf0:	68f8      	ldr	r0, [r7, #12]
 800fbf2:	f7fe fa40 	bl	800e076 <clmt_clust>
 800fbf6:	6338      	str	r0, [r7, #48]	@ 0x30
 800fbf8:	e007      	b.n	800fc0a <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fbfa:	68fa      	ldr	r2, [r7, #12]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	69db      	ldr	r3, [r3, #28]
 800fc00:	4619      	mov	r1, r3
 800fc02:	4610      	mov	r0, r2
 800fc04:	f7fd ffa9 	bl	800db5a <get_fat>
 800fc08:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d809      	bhi.n	800fc24 <f_read+0x104>
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2202      	movs	r2, #2
 800fc14:	755a      	strb	r2, [r3, #21]
 800fc16:	697b      	ldr	r3, [r7, #20]
 800fc18:	2102      	movs	r1, #2
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7fd fd16 	bl	800d64c <unlock_fs>
 800fc20:	2302      	movs	r3, #2
 800fc22:	e0e7      	b.n	800fdf4 <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc2a:	d109      	bne.n	800fc40 <f_read+0x120>
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	2201      	movs	r2, #1
 800fc30:	755a      	strb	r2, [r3, #21]
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	2101      	movs	r1, #1
 800fc36:	4618      	mov	r0, r3
 800fc38:	f7fd fd08 	bl	800d64c <unlock_fs>
 800fc3c:	2301      	movs	r3, #1
 800fc3e:	e0d9      	b.n	800fdf4 <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc44:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fc46:	697a      	ldr	r2, [r7, #20]
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	69db      	ldr	r3, [r3, #28]
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	4610      	mov	r0, r2
 800fc50:	f7fd ff64 	bl	800db1c <clust2sect>
 800fc54:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fc56:	69bb      	ldr	r3, [r7, #24]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d109      	bne.n	800fc70 <f_read+0x150>
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2202      	movs	r2, #2
 800fc60:	755a      	strb	r2, [r3, #21]
 800fc62:	697b      	ldr	r3, [r7, #20]
 800fc64:	2102      	movs	r1, #2
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fd fcf0 	bl	800d64c <unlock_fs>
 800fc6c:	2302      	movs	r3, #2
 800fc6e:	e0c1      	b.n	800fdf4 <f_read+0x2d4>
			sect += csect;
 800fc70:	69ba      	ldr	r2, [r7, #24]
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	4413      	add	r3, r2
 800fc76:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	0a5b      	lsrs	r3, r3, #9
 800fc7c:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fc7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d03e      	beq.n	800fd02 <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fc84:	69fa      	ldr	r2, [r7, #28]
 800fc86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc88:	4413      	add	r3, r2
 800fc8a:	697a      	ldr	r2, [r7, #20]
 800fc8c:	8952      	ldrh	r2, [r2, #10]
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d905      	bls.n	800fc9e <f_read+0x17e>
					cc = fs->csize - csect;
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	895b      	ldrh	r3, [r3, #10]
 800fc96:	461a      	mov	r2, r3
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	7858      	ldrb	r0, [r3, #1]
 800fca2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fca4:	69ba      	ldr	r2, [r7, #24]
 800fca6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800fca8:	f7fd fb5c 	bl	800d364 <disk_read>
 800fcac:	4603      	mov	r3, r0
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d009      	beq.n	800fcc6 <f_read+0x1a6>
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	755a      	strb	r2, [r3, #21]
 800fcb8:	697b      	ldr	r3, [r7, #20]
 800fcba:	2101      	movs	r1, #1
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fd fcc5 	bl	800d64c <unlock_fs>
 800fcc2:	2301      	movs	r3, #1
 800fcc4:	e096      	b.n	800fdf4 <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	7d1b      	ldrb	r3, [r3, #20]
 800fcca:	b25b      	sxtb	r3, r3
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	da14      	bge.n	800fcfa <f_read+0x1da>
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	6a1a      	ldr	r2, [r3, #32]
 800fcd4:	69bb      	ldr	r3, [r7, #24]
 800fcd6:	1ad3      	subs	r3, r2, r3
 800fcd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	d90d      	bls.n	800fcfa <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	6a1a      	ldr	r2, [r3, #32]
 800fce2:	69bb      	ldr	r3, [r7, #24]
 800fce4:	1ad3      	subs	r3, r2, r3
 800fce6:	025b      	lsls	r3, r3, #9
 800fce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcea:	18d0      	adds	r0, r2, r3
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	3330      	adds	r3, #48	@ 0x30
 800fcf0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800fcf4:	4619      	mov	r1, r3
 800fcf6:	f7fd fc15 	bl	800d524 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fcfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fcfc:	025b      	lsls	r3, r3, #9
 800fcfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800fd00:	e05a      	b.n	800fdb8 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	6a1b      	ldr	r3, [r3, #32]
 800fd06:	69ba      	ldr	r2, [r7, #24]
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d038      	beq.n	800fd7e <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	7d1b      	ldrb	r3, [r3, #20]
 800fd10:	b25b      	sxtb	r3, r3
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	da1d      	bge.n	800fd52 <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	7858      	ldrb	r0, [r3, #1]
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd20:	68fb      	ldr	r3, [r7, #12]
 800fd22:	6a1a      	ldr	r2, [r3, #32]
 800fd24:	2301      	movs	r3, #1
 800fd26:	f7fd fb3d 	bl	800d3a4 <disk_write>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d009      	beq.n	800fd44 <f_read+0x224>
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2201      	movs	r2, #1
 800fd34:	755a      	strb	r2, [r3, #21]
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	2101      	movs	r1, #1
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f7fd fc86 	bl	800d64c <unlock_fs>
 800fd40:	2301      	movs	r3, #1
 800fd42:	e057      	b.n	800fdf4 <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	7d1b      	ldrb	r3, [r3, #20]
 800fd48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fd4c:	b2da      	uxtb	r2, r3
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	7858      	ldrb	r0, [r3, #1]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	69ba      	ldr	r2, [r7, #24]
 800fd60:	f7fd fb00 	bl	800d364 <disk_read>
 800fd64:	4603      	mov	r3, r0
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d009      	beq.n	800fd7e <f_read+0x25e>
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	755a      	strb	r2, [r3, #21]
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	2101      	movs	r1, #1
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7fd fc69 	bl	800d64c <unlock_fs>
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	e03a      	b.n	800fdf4 <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	69ba      	ldr	r2, [r7, #24]
 800fd82:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	699b      	ldr	r3, [r3, #24]
 800fd88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd8c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800fd90:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fd92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	429a      	cmp	r2, r3
 800fd98:	d901      	bls.n	800fd9e <f_read+0x27e>
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	699b      	ldr	r3, [r3, #24]
 800fda8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdac:	4413      	add	r3, r2
 800fdae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fdb0:	4619      	mov	r1, r3
 800fdb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fdb4:	f7fd fbb6 	bl	800d524 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fdb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdbc:	4413      	add	r3, r2
 800fdbe:	627b      	str	r3, [r7, #36]	@ 0x24
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	699a      	ldr	r2, [r3, #24]
 800fdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdc6:	441a      	add	r2, r3
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	619a      	str	r2, [r3, #24]
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	681a      	ldr	r2, [r3, #0]
 800fdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdd2:	441a      	add	r2, r3
 800fdd4:	683b      	ldr	r3, [r7, #0]
 800fdd6:	601a      	str	r2, [r3, #0]
 800fdd8:	687a      	ldr	r2, [r7, #4]
 800fdda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fddc:	1ad3      	subs	r3, r2, r3
 800fdde:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	f47f aee3 	bne.w	800fbae <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fde8:	697b      	ldr	r3, [r7, #20]
 800fdea:	2100      	movs	r1, #0
 800fdec:	4618      	mov	r0, r3
 800fdee:	f7fd fc2d 	bl	800d64c <unlock_fs>
 800fdf2:	2300      	movs	r3, #0
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	3738      	adds	r7, #56	@ 0x38
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd80      	pop	{r7, pc}

0800fdfc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b086      	sub	sp, #24
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f107 0208 	add.w	r2, r7, #8
 800fe0a:	4611      	mov	r1, r2
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	f7ff fb85 	bl	800f51c <validate>
 800fe12:	4603      	mov	r3, r0
 800fe14:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fe16:	7dfb      	ldrb	r3, [r7, #23]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d16d      	bne.n	800fef8 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	7d1b      	ldrb	r3, [r3, #20]
 800fe20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d067      	beq.n	800fef8 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	7d1b      	ldrb	r3, [r3, #20]
 800fe2c:	b25b      	sxtb	r3, r3
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	da1a      	bge.n	800fe68 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fe32:	68bb      	ldr	r3, [r7, #8]
 800fe34:	7858      	ldrb	r0, [r3, #1]
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	6a1a      	ldr	r2, [r3, #32]
 800fe40:	2301      	movs	r3, #1
 800fe42:	f7fd faaf 	bl	800d3a4 <disk_write>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d006      	beq.n	800fe5a <f_sync+0x5e>
 800fe4c:	68bb      	ldr	r3, [r7, #8]
 800fe4e:	2101      	movs	r1, #1
 800fe50:	4618      	mov	r0, r3
 800fe52:	f7fd fbfb 	bl	800d64c <unlock_fs>
 800fe56:	2301      	movs	r3, #1
 800fe58:	e055      	b.n	800ff06 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	7d1b      	ldrb	r3, [r3, #20]
 800fe5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe62:	b2da      	uxtb	r2, r3
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fe68:	f7fd f804 	bl	800ce74 <get_fattime>
 800fe6c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fe6e:	68ba      	ldr	r2, [r7, #8]
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fe74:	4619      	mov	r1, r3
 800fe76:	4610      	mov	r0, r2
 800fe78:	f7fd fdb4 	bl	800d9e4 <move_window>
 800fe7c:	4603      	mov	r3, r0
 800fe7e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fe80:	7dfb      	ldrb	r3, [r7, #23]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d138      	bne.n	800fef8 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe8a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	330b      	adds	r3, #11
 800fe90:	781a      	ldrb	r2, [r3, #0]
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	330b      	adds	r3, #11
 800fe96:	f042 0220 	orr.w	r2, r2, #32
 800fe9a:	b2d2      	uxtb	r2, r2
 800fe9c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6818      	ldr	r0, [r3, #0]
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	689b      	ldr	r3, [r3, #8]
 800fea6:	461a      	mov	r2, r3
 800fea8:	68f9      	ldr	r1, [r7, #12]
 800feaa:	f7fe fabe 	bl	800e42a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f103 021c 	add.w	r2, r3, #28
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	4619      	mov	r1, r3
 800feba:	4610      	mov	r0, r2
 800febc:	f7fd fb06 	bl	800d4cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	3316      	adds	r3, #22
 800fec4:	6939      	ldr	r1, [r7, #16]
 800fec6:	4618      	mov	r0, r3
 800fec8:	f7fd fb00 	bl	800d4cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	3312      	adds	r3, #18
 800fed0:	2100      	movs	r1, #0
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fd fadf 	bl	800d496 <st_word>
					fs->wflag = 1;
 800fed8:	68bb      	ldr	r3, [r7, #8]
 800feda:	2201      	movs	r2, #1
 800fedc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	4618      	mov	r0, r3
 800fee2:	f7fd fdad 	bl	800da40 <sync_fs>
 800fee6:	4603      	mov	r3, r0
 800fee8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	7d1b      	ldrb	r3, [r3, #20]
 800feee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fef2:	b2da      	uxtb	r2, r3
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	7dfa      	ldrb	r2, [r7, #23]
 800fefc:	4611      	mov	r1, r2
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7fd fba4 	bl	800d64c <unlock_fs>
 800ff04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff06:	4618      	mov	r0, r3
 800ff08:	3718      	adds	r7, #24
 800ff0a:	46bd      	mov	sp, r7
 800ff0c:	bd80      	pop	{r7, pc}

0800ff0e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ff0e:	b580      	push	{r7, lr}
 800ff10:	b084      	sub	sp, #16
 800ff12:	af00      	add	r7, sp, #0
 800ff14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f7ff ff70 	bl	800fdfc <f_sync>
 800ff1c:	4603      	mov	r3, r0
 800ff1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ff20:	7bfb      	ldrb	r3, [r7, #15]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d11d      	bne.n	800ff62 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	f107 0208 	add.w	r2, r7, #8
 800ff2c:	4611      	mov	r1, r2
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7ff faf4 	bl	800f51c <validate>
 800ff34:	4603      	mov	r3, r0
 800ff36:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ff38:	7bfb      	ldrb	r3, [r7, #15]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d111      	bne.n	800ff62 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	691b      	ldr	r3, [r3, #16]
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fd fcaa 	bl	800d89c <dec_lock>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ff4c:	7bfb      	ldrb	r3, [r7, #15]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d102      	bne.n	800ff58 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	2200      	movs	r2, #0
 800ff56:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800ff58:	68bb      	ldr	r3, [r7, #8]
 800ff5a:	2100      	movs	r1, #0
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f7fd fb75 	bl	800d64c <unlock_fs>
#endif
		}
	}
	return res;
 800ff62:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff64:	4618      	mov	r0, r3
 800ff66:	3710      	adds	r7, #16
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b087      	sub	sp, #28
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	60f8      	str	r0, [r7, #12]
 800ff74:	60b9      	str	r1, [r7, #8]
 800ff76:	4613      	mov	r3, r2
 800ff78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ff7a:	2301      	movs	r3, #1
 800ff7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ff82:	4b1f      	ldr	r3, [pc, #124]	@ (8010000 <FATFS_LinkDriverEx+0x94>)
 800ff84:	7a5b      	ldrb	r3, [r3, #9]
 800ff86:	b2db      	uxtb	r3, r3
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d131      	bne.n	800fff0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ff8c:	4b1c      	ldr	r3, [pc, #112]	@ (8010000 <FATFS_LinkDriverEx+0x94>)
 800ff8e:	7a5b      	ldrb	r3, [r3, #9]
 800ff90:	b2db      	uxtb	r3, r3
 800ff92:	461a      	mov	r2, r3
 800ff94:	4b1a      	ldr	r3, [pc, #104]	@ (8010000 <FATFS_LinkDriverEx+0x94>)
 800ff96:	2100      	movs	r1, #0
 800ff98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ff9a:	4b19      	ldr	r3, [pc, #100]	@ (8010000 <FATFS_LinkDriverEx+0x94>)
 800ff9c:	7a5b      	ldrb	r3, [r3, #9]
 800ff9e:	b2db      	uxtb	r3, r3
 800ffa0:	4a17      	ldr	r2, [pc, #92]	@ (8010000 <FATFS_LinkDriverEx+0x94>)
 800ffa2:	009b      	lsls	r3, r3, #2
 800ffa4:	4413      	add	r3, r2
 800ffa6:	68fa      	ldr	r2, [r7, #12]
 800ffa8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ffaa:	4b15      	ldr	r3, [pc, #84]	@ (8010000 <FATFS_LinkDriverEx+0x94>)
 800ffac:	7a5b      	ldrb	r3, [r3, #9]
 800ffae:	b2db      	uxtb	r3, r3
 800ffb0:	461a      	mov	r2, r3
 800ffb2:	4b13      	ldr	r3, [pc, #76]	@ (8010000 <FATFS_LinkDriverEx+0x94>)
 800ffb4:	4413      	add	r3, r2
 800ffb6:	79fa      	ldrb	r2, [r7, #7]
 800ffb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ffba:	4b11      	ldr	r3, [pc, #68]	@ (8010000 <FATFS_LinkDriverEx+0x94>)
 800ffbc:	7a5b      	ldrb	r3, [r3, #9]
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	1c5a      	adds	r2, r3, #1
 800ffc2:	b2d1      	uxtb	r1, r2
 800ffc4:	4a0e      	ldr	r2, [pc, #56]	@ (8010000 <FATFS_LinkDriverEx+0x94>)
 800ffc6:	7251      	strb	r1, [r2, #9]
 800ffc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ffca:	7dbb      	ldrb	r3, [r7, #22]
 800ffcc:	3330      	adds	r3, #48	@ 0x30
 800ffce:	b2da      	uxtb	r2, r3
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	223a      	movs	r2, #58	@ 0x3a
 800ffda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	3302      	adds	r3, #2
 800ffe0:	222f      	movs	r2, #47	@ 0x2f
 800ffe2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	3303      	adds	r3, #3
 800ffe8:	2200      	movs	r2, #0
 800ffea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ffec:	2300      	movs	r3, #0
 800ffee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800fff0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fff2:	4618      	mov	r0, r3
 800fff4:	371c      	adds	r7, #28
 800fff6:	46bd      	mov	sp, r7
 800fff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffc:	4770      	bx	lr
 800fffe:	bf00      	nop
 8010000:	20000e20 	.word	0x20000e20

08010004 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801000e:	2200      	movs	r2, #0
 8010010:	6839      	ldr	r1, [r7, #0]
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f7ff ffaa 	bl	800ff6c <FATFS_LinkDriverEx>
 8010018:	4603      	mov	r3, r0
}
 801001a:	4618      	mov	r0, r3
 801001c:	3708      	adds	r7, #8
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
	...

08010024 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010024:	b480      	push	{r7}
 8010026:	b085      	sub	sp, #20
 8010028:	af00      	add	r7, sp, #0
 801002a:	4603      	mov	r3, r0
 801002c:	6039      	str	r1, [r7, #0]
 801002e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010030:	88fb      	ldrh	r3, [r7, #6]
 8010032:	2b7f      	cmp	r3, #127	@ 0x7f
 8010034:	d802      	bhi.n	801003c <ff_convert+0x18>
		c = chr;
 8010036:	88fb      	ldrh	r3, [r7, #6]
 8010038:	81fb      	strh	r3, [r7, #14]
 801003a:	e025      	b.n	8010088 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 801003c:	683b      	ldr	r3, [r7, #0]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d00b      	beq.n	801005a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010042:	88fb      	ldrh	r3, [r7, #6]
 8010044:	2bff      	cmp	r3, #255	@ 0xff
 8010046:	d805      	bhi.n	8010054 <ff_convert+0x30>
 8010048:	88fb      	ldrh	r3, [r7, #6]
 801004a:	3b80      	subs	r3, #128	@ 0x80
 801004c:	4a12      	ldr	r2, [pc, #72]	@ (8010098 <ff_convert+0x74>)
 801004e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010052:	e000      	b.n	8010056 <ff_convert+0x32>
 8010054:	2300      	movs	r3, #0
 8010056:	81fb      	strh	r3, [r7, #14]
 8010058:	e016      	b.n	8010088 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 801005a:	2300      	movs	r3, #0
 801005c:	81fb      	strh	r3, [r7, #14]
 801005e:	e009      	b.n	8010074 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010060:	89fb      	ldrh	r3, [r7, #14]
 8010062:	4a0d      	ldr	r2, [pc, #52]	@ (8010098 <ff_convert+0x74>)
 8010064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010068:	88fa      	ldrh	r2, [r7, #6]
 801006a:	429a      	cmp	r2, r3
 801006c:	d006      	beq.n	801007c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801006e:	89fb      	ldrh	r3, [r7, #14]
 8010070:	3301      	adds	r3, #1
 8010072:	81fb      	strh	r3, [r7, #14]
 8010074:	89fb      	ldrh	r3, [r7, #14]
 8010076:	2b7f      	cmp	r3, #127	@ 0x7f
 8010078:	d9f2      	bls.n	8010060 <ff_convert+0x3c>
 801007a:	e000      	b.n	801007e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 801007c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801007e:	89fb      	ldrh	r3, [r7, #14]
 8010080:	3380      	adds	r3, #128	@ 0x80
 8010082:	b29b      	uxth	r3, r3
 8010084:	b2db      	uxtb	r3, r3
 8010086:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010088:	89fb      	ldrh	r3, [r7, #14]
}
 801008a:	4618      	mov	r0, r3
 801008c:	3714      	adds	r7, #20
 801008e:	46bd      	mov	sp, r7
 8010090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010094:	4770      	bx	lr
 8010096:	bf00      	nop
 8010098:	0801573c 	.word	0x0801573c

0801009c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801009c:	b480      	push	{r7}
 801009e:	b087      	sub	sp, #28
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	4603      	mov	r3, r0
 80100a4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80100a6:	88fb      	ldrh	r3, [r7, #6]
 80100a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80100ac:	d201      	bcs.n	80100b2 <ff_wtoupper+0x16>
 80100ae:	4b3e      	ldr	r3, [pc, #248]	@ (80101a8 <ff_wtoupper+0x10c>)
 80100b0:	e000      	b.n	80100b4 <ff_wtoupper+0x18>
 80100b2:	4b3e      	ldr	r3, [pc, #248]	@ (80101ac <ff_wtoupper+0x110>)
 80100b4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80100b6:	697b      	ldr	r3, [r7, #20]
 80100b8:	1c9a      	adds	r2, r3, #2
 80100ba:	617a      	str	r2, [r7, #20]
 80100bc:	881b      	ldrh	r3, [r3, #0]
 80100be:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80100c0:	8a7b      	ldrh	r3, [r7, #18]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d068      	beq.n	8010198 <ff_wtoupper+0xfc>
 80100c6:	88fa      	ldrh	r2, [r7, #6]
 80100c8:	8a7b      	ldrh	r3, [r7, #18]
 80100ca:	429a      	cmp	r2, r3
 80100cc:	d364      	bcc.n	8010198 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	1c9a      	adds	r2, r3, #2
 80100d2:	617a      	str	r2, [r7, #20]
 80100d4:	881b      	ldrh	r3, [r3, #0]
 80100d6:	823b      	strh	r3, [r7, #16]
 80100d8:	8a3b      	ldrh	r3, [r7, #16]
 80100da:	0a1b      	lsrs	r3, r3, #8
 80100dc:	81fb      	strh	r3, [r7, #14]
 80100de:	8a3b      	ldrh	r3, [r7, #16]
 80100e0:	b2db      	uxtb	r3, r3
 80100e2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80100e4:	88fa      	ldrh	r2, [r7, #6]
 80100e6:	8a79      	ldrh	r1, [r7, #18]
 80100e8:	8a3b      	ldrh	r3, [r7, #16]
 80100ea:	440b      	add	r3, r1
 80100ec:	429a      	cmp	r2, r3
 80100ee:	da49      	bge.n	8010184 <ff_wtoupper+0xe8>
			switch (cmd) {
 80100f0:	89fb      	ldrh	r3, [r7, #14]
 80100f2:	2b08      	cmp	r3, #8
 80100f4:	d84f      	bhi.n	8010196 <ff_wtoupper+0xfa>
 80100f6:	a201      	add	r2, pc, #4	@ (adr r2, 80100fc <ff_wtoupper+0x60>)
 80100f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100fc:	08010121 	.word	0x08010121
 8010100:	08010133 	.word	0x08010133
 8010104:	08010149 	.word	0x08010149
 8010108:	08010151 	.word	0x08010151
 801010c:	08010159 	.word	0x08010159
 8010110:	08010161 	.word	0x08010161
 8010114:	08010169 	.word	0x08010169
 8010118:	08010171 	.word	0x08010171
 801011c:	08010179 	.word	0x08010179
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010120:	88fa      	ldrh	r2, [r7, #6]
 8010122:	8a7b      	ldrh	r3, [r7, #18]
 8010124:	1ad3      	subs	r3, r2, r3
 8010126:	005b      	lsls	r3, r3, #1
 8010128:	697a      	ldr	r2, [r7, #20]
 801012a:	4413      	add	r3, r2
 801012c:	881b      	ldrh	r3, [r3, #0]
 801012e:	80fb      	strh	r3, [r7, #6]
 8010130:	e027      	b.n	8010182 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010132:	88fa      	ldrh	r2, [r7, #6]
 8010134:	8a7b      	ldrh	r3, [r7, #18]
 8010136:	1ad3      	subs	r3, r2, r3
 8010138:	b29b      	uxth	r3, r3
 801013a:	f003 0301 	and.w	r3, r3, #1
 801013e:	b29b      	uxth	r3, r3
 8010140:	88fa      	ldrh	r2, [r7, #6]
 8010142:	1ad3      	subs	r3, r2, r3
 8010144:	80fb      	strh	r3, [r7, #6]
 8010146:	e01c      	b.n	8010182 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010148:	88fb      	ldrh	r3, [r7, #6]
 801014a:	3b10      	subs	r3, #16
 801014c:	80fb      	strh	r3, [r7, #6]
 801014e:	e018      	b.n	8010182 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010150:	88fb      	ldrh	r3, [r7, #6]
 8010152:	3b20      	subs	r3, #32
 8010154:	80fb      	strh	r3, [r7, #6]
 8010156:	e014      	b.n	8010182 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010158:	88fb      	ldrh	r3, [r7, #6]
 801015a:	3b30      	subs	r3, #48	@ 0x30
 801015c:	80fb      	strh	r3, [r7, #6]
 801015e:	e010      	b.n	8010182 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010160:	88fb      	ldrh	r3, [r7, #6]
 8010162:	3b1a      	subs	r3, #26
 8010164:	80fb      	strh	r3, [r7, #6]
 8010166:	e00c      	b.n	8010182 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010168:	88fb      	ldrh	r3, [r7, #6]
 801016a:	3308      	adds	r3, #8
 801016c:	80fb      	strh	r3, [r7, #6]
 801016e:	e008      	b.n	8010182 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010170:	88fb      	ldrh	r3, [r7, #6]
 8010172:	3b50      	subs	r3, #80	@ 0x50
 8010174:	80fb      	strh	r3, [r7, #6]
 8010176:	e004      	b.n	8010182 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010178:	88fb      	ldrh	r3, [r7, #6]
 801017a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 801017e:	80fb      	strh	r3, [r7, #6]
 8010180:	bf00      	nop
			}
			break;
 8010182:	e008      	b.n	8010196 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010184:	89fb      	ldrh	r3, [r7, #14]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d195      	bne.n	80100b6 <ff_wtoupper+0x1a>
 801018a:	8a3b      	ldrh	r3, [r7, #16]
 801018c:	005b      	lsls	r3, r3, #1
 801018e:	697a      	ldr	r2, [r7, #20]
 8010190:	4413      	add	r3, r2
 8010192:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010194:	e78f      	b.n	80100b6 <ff_wtoupper+0x1a>
			break;
 8010196:	bf00      	nop
	}

	return chr;
 8010198:	88fb      	ldrh	r3, [r7, #6]
}
 801019a:	4618      	mov	r0, r3
 801019c:	371c      	adds	r7, #28
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr
 80101a6:	bf00      	nop
 80101a8:	0801583c 	.word	0x0801583c
 80101ac:	08015a30 	.word	0x08015a30

080101b0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b084      	sub	sp, #16
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80101b8:	2300      	movs	r3, #0
 80101ba:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80101bc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f000 f8db 	bl	801037c <osSemaphoreWait>
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d101      	bne.n	80101d0 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 80101cc:	2301      	movs	r3, #1
 80101ce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80101d0:	68fb      	ldr	r3, [r7, #12]
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3710      	adds	r7, #16
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}

080101da <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80101da:	b580      	push	{r7, lr}
 80101dc:	b082      	sub	sp, #8
 80101de:	af00      	add	r7, sp, #0
 80101e0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80101e2:	6878      	ldr	r0, [r7, #4]
 80101e4:	f000 f918 	bl	8010418 <osSemaphoreRelease>
#endif
}
 80101e8:	bf00      	nop
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b085      	sub	sp, #20
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	4603      	mov	r3, r0
 80101f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80101fa:	2300      	movs	r3, #0
 80101fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80101fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010202:	2b84      	cmp	r3, #132	@ 0x84
 8010204:	d005      	beq.n	8010212 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8010206:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	4413      	add	r3, r2
 801020e:	3303      	adds	r3, #3
 8010210:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010212:	68fb      	ldr	r3, [r7, #12]
}
 8010214:	4618      	mov	r0, r3
 8010216:	3714      	adds	r7, #20
 8010218:	46bd      	mov	sp, r7
 801021a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021e:	4770      	bx	lr

08010220 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010220:	b480      	push	{r7}
 8010222:	b083      	sub	sp, #12
 8010224:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010226:	f3ef 8305 	mrs	r3, IPSR
 801022a:	607b      	str	r3, [r7, #4]
  return(result);
 801022c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801022e:	2b00      	cmp	r3, #0
 8010230:	bf14      	ite	ne
 8010232:	2301      	movne	r3, #1
 8010234:	2300      	moveq	r3, #0
 8010236:	b2db      	uxtb	r3, r3
}
 8010238:	4618      	mov	r0, r3
 801023a:	370c      	adds	r7, #12
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr

08010244 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8010244:	b580      	push	{r7, lr}
 8010246:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8010248:	f001 fc34 	bl	8011ab4 <vTaskStartScheduler>
  
  return osOK;
 801024c:	2300      	movs	r3, #0
}
 801024e:	4618      	mov	r0, r3
 8010250:	bd80      	pop	{r7, pc}

08010252 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010252:	b580      	push	{r7, lr}
 8010254:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010256:	f002 f883 	bl	8012360 <xTaskGetSchedulerState>
 801025a:	4603      	mov	r3, r0
 801025c:	2b01      	cmp	r3, #1
 801025e:	d101      	bne.n	8010264 <osKernelRunning+0x12>
    return 0;
 8010260:	2300      	movs	r3, #0
 8010262:	e000      	b.n	8010266 <osKernelRunning+0x14>
  else
    return 1;
 8010264:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010266:	4618      	mov	r0, r3
 8010268:	bd80      	pop	{r7, pc}

0801026a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801026a:	b580      	push	{r7, lr}
 801026c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801026e:	f7ff ffd7 	bl	8010220 <inHandlerMode>
 8010272:	4603      	mov	r3, r0
 8010274:	2b00      	cmp	r3, #0
 8010276:	d003      	beq.n	8010280 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8010278:	f001 fd48 	bl	8011d0c <xTaskGetTickCountFromISR>
 801027c:	4603      	mov	r3, r0
 801027e:	e002      	b.n	8010286 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010280:	f001 fd34 	bl	8011cec <xTaskGetTickCount>
 8010284:	4603      	mov	r3, r0
  }
}
 8010286:	4618      	mov	r0, r3
 8010288:	bd80      	pop	{r7, pc}

0801028a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801028a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801028c:	b089      	sub	sp, #36	@ 0x24
 801028e:	af04      	add	r7, sp, #16
 8010290:	6078      	str	r0, [r7, #4]
 8010292:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	695b      	ldr	r3, [r3, #20]
 8010298:	2b00      	cmp	r3, #0
 801029a:	d020      	beq.n	80102de <osThreadCreate+0x54>
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	699b      	ldr	r3, [r3, #24]
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d01c      	beq.n	80102de <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	685c      	ldr	r4, [r3, #4]
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	691e      	ldr	r6, [r3, #16]
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7ff ff9a 	bl	80101f0 <makeFreeRtosPriority>
 80102bc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	695b      	ldr	r3, [r3, #20]
 80102c2:	687a      	ldr	r2, [r7, #4]
 80102c4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102c6:	9202      	str	r2, [sp, #8]
 80102c8:	9301      	str	r3, [sp, #4]
 80102ca:	9100      	str	r1, [sp, #0]
 80102cc:	683b      	ldr	r3, [r7, #0]
 80102ce:	4632      	mov	r2, r6
 80102d0:	4629      	mov	r1, r5
 80102d2:	4620      	mov	r0, r4
 80102d4:	f001 f9fe 	bl	80116d4 <xTaskCreateStatic>
 80102d8:	4603      	mov	r3, r0
 80102da:	60fb      	str	r3, [r7, #12]
 80102dc:	e01c      	b.n	8010318 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	685c      	ldr	r4, [r3, #4]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102ea:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80102f2:	4618      	mov	r0, r3
 80102f4:	f7ff ff7c 	bl	80101f0 <makeFreeRtosPriority>
 80102f8:	4602      	mov	r2, r0
 80102fa:	f107 030c 	add.w	r3, r7, #12
 80102fe:	9301      	str	r3, [sp, #4]
 8010300:	9200      	str	r2, [sp, #0]
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	4632      	mov	r2, r6
 8010306:	4629      	mov	r1, r5
 8010308:	4620      	mov	r0, r4
 801030a:	f001 fa49 	bl	80117a0 <xTaskCreate>
 801030e:	4603      	mov	r3, r0
 8010310:	2b01      	cmp	r3, #1
 8010312:	d001      	beq.n	8010318 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8010314:	2300      	movs	r3, #0
 8010316:	e000      	b.n	801031a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8010318:	68fb      	ldr	r3, [r7, #12]
}
 801031a:	4618      	mov	r0, r3
 801031c:	3714      	adds	r7, #20
 801031e:	46bd      	mov	sp, r7
 8010320:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010322 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010322:	b580      	push	{r7, lr}
 8010324:	b084      	sub	sp, #16
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d001      	beq.n	8010338 <osDelay+0x16>
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	e000      	b.n	801033a <osDelay+0x18>
 8010338:	2301      	movs	r3, #1
 801033a:	4618      	mov	r0, r3
 801033c:	f001 fb82 	bl	8011a44 <vTaskDelay>
  
  return osOK;
 8010340:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010342:	4618      	mov	r0, r3
 8010344:	3710      	adds	r7, #16
 8010346:	46bd      	mov	sp, r7
 8010348:	bd80      	pop	{r7, pc}

0801034a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 801034a:	b580      	push	{r7, lr}
 801034c:	b082      	sub	sp, #8
 801034e:	af00      	add	r7, sp, #0
 8010350:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d007      	beq.n	801036a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	4619      	mov	r1, r3
 8010360:	2001      	movs	r0, #1
 8010362:	f000 fba6 	bl	8010ab2 <xQueueCreateMutexStatic>
 8010366:	4603      	mov	r3, r0
 8010368:	e003      	b.n	8010372 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 801036a:	2001      	movs	r0, #1
 801036c:	f000 fb89 	bl	8010a82 <xQueueCreateMutex>
 8010370:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8010372:	4618      	mov	r0, r3
 8010374:	3708      	adds	r7, #8
 8010376:	46bd      	mov	sp, r7
 8010378:	bd80      	pop	{r7, pc}
	...

0801037c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b084      	sub	sp, #16
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8010386:	2300      	movs	r3, #0
 8010388:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d101      	bne.n	8010394 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010390:	2380      	movs	r3, #128	@ 0x80
 8010392:	e03a      	b.n	801040a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8010394:	2300      	movs	r3, #0
 8010396:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801039e:	d103      	bne.n	80103a8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80103a0:	f04f 33ff 	mov.w	r3, #4294967295
 80103a4:	60fb      	str	r3, [r7, #12]
 80103a6:	e009      	b.n	80103bc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80103a8:	683b      	ldr	r3, [r7, #0]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d006      	beq.n	80103bc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80103ae:	683b      	ldr	r3, [r7, #0]
 80103b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80103b2:	68fb      	ldr	r3, [r7, #12]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d101      	bne.n	80103bc <osSemaphoreWait+0x40>
      ticks = 1;
 80103b8:	2301      	movs	r3, #1
 80103ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80103bc:	f7ff ff30 	bl	8010220 <inHandlerMode>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d017      	beq.n	80103f6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80103c6:	f107 0308 	add.w	r3, r7, #8
 80103ca:	461a      	mov	r2, r3
 80103cc:	2100      	movs	r1, #0
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f000 ffd0 	bl	8011374 <xQueueReceiveFromISR>
 80103d4:	4603      	mov	r3, r0
 80103d6:	2b01      	cmp	r3, #1
 80103d8:	d001      	beq.n	80103de <osSemaphoreWait+0x62>
      return osErrorOS;
 80103da:	23ff      	movs	r3, #255	@ 0xff
 80103dc:	e015      	b.n	801040a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80103de:	68bb      	ldr	r3, [r7, #8]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d011      	beq.n	8010408 <osSemaphoreWait+0x8c>
 80103e4:	4b0b      	ldr	r3, [pc, #44]	@ (8010414 <osSemaphoreWait+0x98>)
 80103e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80103ea:	601a      	str	r2, [r3, #0]
 80103ec:	f3bf 8f4f 	dsb	sy
 80103f0:	f3bf 8f6f 	isb	sy
 80103f4:	e008      	b.n	8010408 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80103f6:	68f9      	ldr	r1, [r7, #12]
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 fea3 	bl	8011144 <xQueueSemaphoreTake>
 80103fe:	4603      	mov	r3, r0
 8010400:	2b01      	cmp	r3, #1
 8010402:	d001      	beq.n	8010408 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8010404:	23ff      	movs	r3, #255	@ 0xff
 8010406:	e000      	b.n	801040a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010408:	2300      	movs	r3, #0
}
 801040a:	4618      	mov	r0, r3
 801040c:	3710      	adds	r7, #16
 801040e:	46bd      	mov	sp, r7
 8010410:	bd80      	pop	{r7, pc}
 8010412:	bf00      	nop
 8010414:	e000ed04 	.word	0xe000ed04

08010418 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b084      	sub	sp, #16
 801041c:	af00      	add	r7, sp, #0
 801041e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010420:	2300      	movs	r3, #0
 8010422:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010424:	2300      	movs	r3, #0
 8010426:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010428:	f7ff fefa 	bl	8010220 <inHandlerMode>
 801042c:	4603      	mov	r3, r0
 801042e:	2b00      	cmp	r3, #0
 8010430:	d016      	beq.n	8010460 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010432:	f107 0308 	add.w	r3, r7, #8
 8010436:	4619      	mov	r1, r3
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 fd02 	bl	8010e42 <xQueueGiveFromISR>
 801043e:	4603      	mov	r3, r0
 8010440:	2b01      	cmp	r3, #1
 8010442:	d001      	beq.n	8010448 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8010444:	23ff      	movs	r3, #255	@ 0xff
 8010446:	e017      	b.n	8010478 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010448:	68bb      	ldr	r3, [r7, #8]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d013      	beq.n	8010476 <osSemaphoreRelease+0x5e>
 801044e:	4b0c      	ldr	r3, [pc, #48]	@ (8010480 <osSemaphoreRelease+0x68>)
 8010450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010454:	601a      	str	r2, [r3, #0]
 8010456:	f3bf 8f4f 	dsb	sy
 801045a:	f3bf 8f6f 	isb	sy
 801045e:	e00a      	b.n	8010476 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010460:	2300      	movs	r3, #0
 8010462:	2200      	movs	r2, #0
 8010464:	2100      	movs	r1, #0
 8010466:	6878      	ldr	r0, [r7, #4]
 8010468:	f000 fb3e 	bl	8010ae8 <xQueueGenericSend>
 801046c:	4603      	mov	r3, r0
 801046e:	2b01      	cmp	r3, #1
 8010470:	d001      	beq.n	8010476 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8010472:	23ff      	movs	r3, #255	@ 0xff
 8010474:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8010476:	68fb      	ldr	r3, [r7, #12]
}
 8010478:	4618      	mov	r0, r3
 801047a:	3710      	adds	r7, #16
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	e000ed04 	.word	0xe000ed04

08010484 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010484:	b590      	push	{r4, r7, lr}
 8010486:	b085      	sub	sp, #20
 8010488:	af02      	add	r7, sp, #8
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	689b      	ldr	r3, [r3, #8]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d011      	beq.n	80104ba <osMessageCreate+0x36>
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	68db      	ldr	r3, [r3, #12]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d00d      	beq.n	80104ba <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6818      	ldr	r0, [r3, #0]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6859      	ldr	r1, [r3, #4]
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	689a      	ldr	r2, [r3, #8]
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	2400      	movs	r4, #0
 80104b0:	9400      	str	r4, [sp, #0]
 80104b2:	f000 f9e3 	bl	801087c <xQueueGenericCreateStatic>
 80104b6:	4603      	mov	r3, r0
 80104b8:	e008      	b.n	80104cc <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	6818      	ldr	r0, [r3, #0]
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	2200      	movs	r2, #0
 80104c4:	4619      	mov	r1, r3
 80104c6:	f000 fa60 	bl	801098a <xQueueGenericCreate>
 80104ca:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	370c      	adds	r7, #12
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd90      	pop	{r4, r7, pc}

080104d4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b086      	sub	sp, #24
 80104d8:	af00      	add	r7, sp, #0
 80104da:	60f8      	str	r0, [r7, #12]
 80104dc:	60b9      	str	r1, [r7, #8]
 80104de:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80104e0:	2300      	movs	r3, #0
 80104e2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80104e8:	697b      	ldr	r3, [r7, #20]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d101      	bne.n	80104f2 <osMessagePut+0x1e>
    ticks = 1;
 80104ee:	2301      	movs	r3, #1
 80104f0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80104f2:	f7ff fe95 	bl	8010220 <inHandlerMode>
 80104f6:	4603      	mov	r3, r0
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d018      	beq.n	801052e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80104fc:	f107 0210 	add.w	r2, r7, #16
 8010500:	f107 0108 	add.w	r1, r7, #8
 8010504:	2300      	movs	r3, #0
 8010506:	68f8      	ldr	r0, [r7, #12]
 8010508:	f000 fbf8 	bl	8010cfc <xQueueGenericSendFromISR>
 801050c:	4603      	mov	r3, r0
 801050e:	2b01      	cmp	r3, #1
 8010510:	d001      	beq.n	8010516 <osMessagePut+0x42>
      return osErrorOS;
 8010512:	23ff      	movs	r3, #255	@ 0xff
 8010514:	e018      	b.n	8010548 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010516:	693b      	ldr	r3, [r7, #16]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d014      	beq.n	8010546 <osMessagePut+0x72>
 801051c:	4b0c      	ldr	r3, [pc, #48]	@ (8010550 <osMessagePut+0x7c>)
 801051e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010522:	601a      	str	r2, [r3, #0]
 8010524:	f3bf 8f4f 	dsb	sy
 8010528:	f3bf 8f6f 	isb	sy
 801052c:	e00b      	b.n	8010546 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801052e:	f107 0108 	add.w	r1, r7, #8
 8010532:	2300      	movs	r3, #0
 8010534:	697a      	ldr	r2, [r7, #20]
 8010536:	68f8      	ldr	r0, [r7, #12]
 8010538:	f000 fad6 	bl	8010ae8 <xQueueGenericSend>
 801053c:	4603      	mov	r3, r0
 801053e:	2b01      	cmp	r3, #1
 8010540:	d001      	beq.n	8010546 <osMessagePut+0x72>
      return osErrorOS;
 8010542:	23ff      	movs	r3, #255	@ 0xff
 8010544:	e000      	b.n	8010548 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010546:	2300      	movs	r3, #0
}
 8010548:	4618      	mov	r0, r3
 801054a:	3718      	adds	r7, #24
 801054c:	46bd      	mov	sp, r7
 801054e:	bd80      	pop	{r7, pc}
 8010550:	e000ed04 	.word	0xe000ed04

08010554 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010554:	b590      	push	{r4, r7, lr}
 8010556:	b08b      	sub	sp, #44	@ 0x2c
 8010558:	af00      	add	r7, sp, #0
 801055a:	60f8      	str	r0, [r7, #12]
 801055c:	60b9      	str	r1, [r7, #8]
 801055e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010564:	2300      	movs	r3, #0
 8010566:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010568:	68bb      	ldr	r3, [r7, #8]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d10a      	bne.n	8010584 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801056e:	2380      	movs	r3, #128	@ 0x80
 8010570:	617b      	str	r3, [r7, #20]
    return event;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	461c      	mov	r4, r3
 8010576:	f107 0314 	add.w	r3, r7, #20
 801057a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801057e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010582:	e054      	b.n	801062e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010584:	2300      	movs	r3, #0
 8010586:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010588:	2300      	movs	r3, #0
 801058a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010592:	d103      	bne.n	801059c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010594:	f04f 33ff 	mov.w	r3, #4294967295
 8010598:	627b      	str	r3, [r7, #36]	@ 0x24
 801059a:	e009      	b.n	80105b0 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d006      	beq.n	80105b0 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80105a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d101      	bne.n	80105b0 <osMessageGet+0x5c>
      ticks = 1;
 80105ac:	2301      	movs	r3, #1
 80105ae:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80105b0:	f7ff fe36 	bl	8010220 <inHandlerMode>
 80105b4:	4603      	mov	r3, r0
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d01c      	beq.n	80105f4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80105ba:	f107 0220 	add.w	r2, r7, #32
 80105be:	f107 0314 	add.w	r3, r7, #20
 80105c2:	3304      	adds	r3, #4
 80105c4:	4619      	mov	r1, r3
 80105c6:	68b8      	ldr	r0, [r7, #8]
 80105c8:	f000 fed4 	bl	8011374 <xQueueReceiveFromISR>
 80105cc:	4603      	mov	r3, r0
 80105ce:	2b01      	cmp	r3, #1
 80105d0:	d102      	bne.n	80105d8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80105d2:	2310      	movs	r3, #16
 80105d4:	617b      	str	r3, [r7, #20]
 80105d6:	e001      	b.n	80105dc <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80105d8:	2300      	movs	r3, #0
 80105da:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80105dc:	6a3b      	ldr	r3, [r7, #32]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d01d      	beq.n	801061e <osMessageGet+0xca>
 80105e2:	4b15      	ldr	r3, [pc, #84]	@ (8010638 <osMessageGet+0xe4>)
 80105e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105e8:	601a      	str	r2, [r3, #0]
 80105ea:	f3bf 8f4f 	dsb	sy
 80105ee:	f3bf 8f6f 	isb	sy
 80105f2:	e014      	b.n	801061e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80105f4:	f107 0314 	add.w	r3, r7, #20
 80105f8:	3304      	adds	r3, #4
 80105fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80105fc:	4619      	mov	r1, r3
 80105fe:	68b8      	ldr	r0, [r7, #8]
 8010600:	f000 fcb8 	bl	8010f74 <xQueueReceive>
 8010604:	4603      	mov	r3, r0
 8010606:	2b01      	cmp	r3, #1
 8010608:	d102      	bne.n	8010610 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801060a:	2310      	movs	r3, #16
 801060c:	617b      	str	r3, [r7, #20]
 801060e:	e006      	b.n	801061e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010612:	2b00      	cmp	r3, #0
 8010614:	d101      	bne.n	801061a <osMessageGet+0xc6>
 8010616:	2300      	movs	r3, #0
 8010618:	e000      	b.n	801061c <osMessageGet+0xc8>
 801061a:	2340      	movs	r3, #64	@ 0x40
 801061c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	461c      	mov	r4, r3
 8010622:	f107 0314 	add.w	r3, r7, #20
 8010626:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801062a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801062e:	68f8      	ldr	r0, [r7, #12]
 8010630:	372c      	adds	r7, #44	@ 0x2c
 8010632:	46bd      	mov	sp, r7
 8010634:	bd90      	pop	{r4, r7, pc}
 8010636:	bf00      	nop
 8010638:	e000ed04 	.word	0xe000ed04

0801063c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f103 0208 	add.w	r2, r3, #8
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	f04f 32ff 	mov.w	r2, #4294967295
 8010654:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	f103 0208 	add.w	r2, r3, #8
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f103 0208 	add.w	r2, r3, #8
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2200      	movs	r2, #0
 801066e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010670:	bf00      	nop
 8010672:	370c      	adds	r7, #12
 8010674:	46bd      	mov	sp, r7
 8010676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067a:	4770      	bx	lr

0801067c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2200      	movs	r2, #0
 8010688:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801068a:	bf00      	nop
 801068c:	370c      	adds	r7, #12
 801068e:	46bd      	mov	sp, r7
 8010690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010694:	4770      	bx	lr

08010696 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010696:	b480      	push	{r7}
 8010698:	b085      	sub	sp, #20
 801069a:	af00      	add	r7, sp, #0
 801069c:	6078      	str	r0, [r7, #4]
 801069e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	685b      	ldr	r3, [r3, #4]
 80106a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80106a6:	683b      	ldr	r3, [r7, #0]
 80106a8:	68fa      	ldr	r2, [r7, #12]
 80106aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80106ac:	68fb      	ldr	r3, [r7, #12]
 80106ae:	689a      	ldr	r2, [r3, #8]
 80106b0:	683b      	ldr	r3, [r7, #0]
 80106b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	689b      	ldr	r3, [r3, #8]
 80106b8:	683a      	ldr	r2, [r7, #0]
 80106ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	683a      	ldr	r2, [r7, #0]
 80106c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	687a      	ldr	r2, [r7, #4]
 80106c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	1c5a      	adds	r2, r3, #1
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	601a      	str	r2, [r3, #0]
}
 80106d2:	bf00      	nop
 80106d4:	3714      	adds	r7, #20
 80106d6:	46bd      	mov	sp, r7
 80106d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106dc:	4770      	bx	lr

080106de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80106de:	b480      	push	{r7}
 80106e0:	b085      	sub	sp, #20
 80106e2:	af00      	add	r7, sp, #0
 80106e4:	6078      	str	r0, [r7, #4]
 80106e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106f4:	d103      	bne.n	80106fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	691b      	ldr	r3, [r3, #16]
 80106fa:	60fb      	str	r3, [r7, #12]
 80106fc:	e00c      	b.n	8010718 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	3308      	adds	r3, #8
 8010702:	60fb      	str	r3, [r7, #12]
 8010704:	e002      	b.n	801070c <vListInsert+0x2e>
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	60fb      	str	r3, [r7, #12]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	685b      	ldr	r3, [r3, #4]
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	68ba      	ldr	r2, [r7, #8]
 8010714:	429a      	cmp	r2, r3
 8010716:	d2f6      	bcs.n	8010706 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	685a      	ldr	r2, [r3, #4]
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010720:	683b      	ldr	r3, [r7, #0]
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	683a      	ldr	r2, [r7, #0]
 8010726:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010728:	683b      	ldr	r3, [r7, #0]
 801072a:	68fa      	ldr	r2, [r7, #12]
 801072c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	683a      	ldr	r2, [r7, #0]
 8010732:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	687a      	ldr	r2, [r7, #4]
 8010738:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	1c5a      	adds	r2, r3, #1
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	601a      	str	r2, [r3, #0]
}
 8010744:	bf00      	nop
 8010746:	3714      	adds	r7, #20
 8010748:	46bd      	mov	sp, r7
 801074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074e:	4770      	bx	lr

08010750 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010750:	b480      	push	{r7}
 8010752:	b085      	sub	sp, #20
 8010754:	af00      	add	r7, sp, #0
 8010756:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	691b      	ldr	r3, [r3, #16]
 801075c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	687a      	ldr	r2, [r7, #4]
 8010764:	6892      	ldr	r2, [r2, #8]
 8010766:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	689b      	ldr	r3, [r3, #8]
 801076c:	687a      	ldr	r2, [r7, #4]
 801076e:	6852      	ldr	r2, [r2, #4]
 8010770:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	685b      	ldr	r3, [r3, #4]
 8010776:	687a      	ldr	r2, [r7, #4]
 8010778:	429a      	cmp	r2, r3
 801077a:	d103      	bne.n	8010784 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	689a      	ldr	r2, [r3, #8]
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	2200      	movs	r2, #0
 8010788:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	1e5a      	subs	r2, r3, #1
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	681b      	ldr	r3, [r3, #0]
}
 8010798:	4618      	mov	r0, r3
 801079a:	3714      	adds	r7, #20
 801079c:	46bd      	mov	sp, r7
 801079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a2:	4770      	bx	lr

080107a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d10d      	bne.n	80107d4 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80107b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80107bc:	b672      	cpsid	i
 80107be:	f383 8811 	msr	BASEPRI, r3
 80107c2:	f3bf 8f6f 	isb	sy
 80107c6:	f3bf 8f4f 	dsb	sy
 80107ca:	b662      	cpsie	i
 80107cc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80107ce:	bf00      	nop
 80107d0:	bf00      	nop
 80107d2:	e7fd      	b.n	80107d0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80107d4:	f002 f91a 	bl	8012a0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	681a      	ldr	r2, [r3, #0]
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80107e0:	68f9      	ldr	r1, [r7, #12]
 80107e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80107e4:	fb01 f303 	mul.w	r3, r1, r3
 80107e8:	441a      	add	r2, r3
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2200      	movs	r2, #0
 80107f2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	681a      	ldr	r2, [r3, #0]
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681a      	ldr	r2, [r3, #0]
 8010800:	68fb      	ldr	r3, [r7, #12]
 8010802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010804:	3b01      	subs	r3, #1
 8010806:	68f9      	ldr	r1, [r7, #12]
 8010808:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801080a:	fb01 f303 	mul.w	r3, r1, r3
 801080e:	441a      	add	r2, r3
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010814:	68fb      	ldr	r3, [r7, #12]
 8010816:	22ff      	movs	r2, #255	@ 0xff
 8010818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	22ff      	movs	r2, #255	@ 0xff
 8010820:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d114      	bne.n	8010854 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	691b      	ldr	r3, [r3, #16]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d01a      	beq.n	8010868 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	3310      	adds	r3, #16
 8010836:	4618      	mov	r0, r3
 8010838:	f001 fbc4 	bl	8011fc4 <xTaskRemoveFromEventList>
 801083c:	4603      	mov	r3, r0
 801083e:	2b00      	cmp	r3, #0
 8010840:	d012      	beq.n	8010868 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010842:	4b0d      	ldr	r3, [pc, #52]	@ (8010878 <xQueueGenericReset+0xd4>)
 8010844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010848:	601a      	str	r2, [r3, #0]
 801084a:	f3bf 8f4f 	dsb	sy
 801084e:	f3bf 8f6f 	isb	sy
 8010852:	e009      	b.n	8010868 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010854:	68fb      	ldr	r3, [r7, #12]
 8010856:	3310      	adds	r3, #16
 8010858:	4618      	mov	r0, r3
 801085a:	f7ff feef 	bl	801063c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	3324      	adds	r3, #36	@ 0x24
 8010862:	4618      	mov	r0, r3
 8010864:	f7ff feea 	bl	801063c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010868:	f002 f906 	bl	8012a78 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801086c:	2301      	movs	r3, #1
}
 801086e:	4618      	mov	r0, r3
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}
 8010876:	bf00      	nop
 8010878:	e000ed04 	.word	0xe000ed04

0801087c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801087c:	b580      	push	{r7, lr}
 801087e:	b08e      	sub	sp, #56	@ 0x38
 8010880:	af02      	add	r7, sp, #8
 8010882:	60f8      	str	r0, [r7, #12]
 8010884:	60b9      	str	r1, [r7, #8]
 8010886:	607a      	str	r2, [r7, #4]
 8010888:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d10d      	bne.n	80108ac <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8010890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010894:	b672      	cpsid	i
 8010896:	f383 8811 	msr	BASEPRI, r3
 801089a:	f3bf 8f6f 	isb	sy
 801089e:	f3bf 8f4f 	dsb	sy
 80108a2:	b662      	cpsie	i
 80108a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80108a6:	bf00      	nop
 80108a8:	bf00      	nop
 80108aa:	e7fd      	b.n	80108a8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d10d      	bne.n	80108ce <xQueueGenericCreateStatic+0x52>
	__asm volatile
 80108b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108b6:	b672      	cpsid	i
 80108b8:	f383 8811 	msr	BASEPRI, r3
 80108bc:	f3bf 8f6f 	isb	sy
 80108c0:	f3bf 8f4f 	dsb	sy
 80108c4:	b662      	cpsie	i
 80108c6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80108c8:	bf00      	nop
 80108ca:	bf00      	nop
 80108cc:	e7fd      	b.n	80108ca <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d002      	beq.n	80108da <xQueueGenericCreateStatic+0x5e>
 80108d4:	68bb      	ldr	r3, [r7, #8]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d001      	beq.n	80108de <xQueueGenericCreateStatic+0x62>
 80108da:	2301      	movs	r3, #1
 80108dc:	e000      	b.n	80108e0 <xQueueGenericCreateStatic+0x64>
 80108de:	2300      	movs	r3, #0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d10d      	bne.n	8010900 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 80108e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80108e8:	b672      	cpsid	i
 80108ea:	f383 8811 	msr	BASEPRI, r3
 80108ee:	f3bf 8f6f 	isb	sy
 80108f2:	f3bf 8f4f 	dsb	sy
 80108f6:	b662      	cpsie	i
 80108f8:	623b      	str	r3, [r7, #32]
}
 80108fa:	bf00      	nop
 80108fc:	bf00      	nop
 80108fe:	e7fd      	b.n	80108fc <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d102      	bne.n	801090c <xQueueGenericCreateStatic+0x90>
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d101      	bne.n	8010910 <xQueueGenericCreateStatic+0x94>
 801090c:	2301      	movs	r3, #1
 801090e:	e000      	b.n	8010912 <xQueueGenericCreateStatic+0x96>
 8010910:	2300      	movs	r3, #0
 8010912:	2b00      	cmp	r3, #0
 8010914:	d10d      	bne.n	8010932 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8010916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801091a:	b672      	cpsid	i
 801091c:	f383 8811 	msr	BASEPRI, r3
 8010920:	f3bf 8f6f 	isb	sy
 8010924:	f3bf 8f4f 	dsb	sy
 8010928:	b662      	cpsie	i
 801092a:	61fb      	str	r3, [r7, #28]
}
 801092c:	bf00      	nop
 801092e:	bf00      	nop
 8010930:	e7fd      	b.n	801092e <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010932:	2348      	movs	r3, #72	@ 0x48
 8010934:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	2b48      	cmp	r3, #72	@ 0x48
 801093a:	d00d      	beq.n	8010958 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 801093c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010940:	b672      	cpsid	i
 8010942:	f383 8811 	msr	BASEPRI, r3
 8010946:	f3bf 8f6f 	isb	sy
 801094a:	f3bf 8f4f 	dsb	sy
 801094e:	b662      	cpsie	i
 8010950:	61bb      	str	r3, [r7, #24]
}
 8010952:	bf00      	nop
 8010954:	bf00      	nop
 8010956:	e7fd      	b.n	8010954 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010958:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 801095e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010960:	2b00      	cmp	r3, #0
 8010962:	d00d      	beq.n	8010980 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010966:	2201      	movs	r2, #1
 8010968:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801096c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8010970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010972:	9300      	str	r3, [sp, #0]
 8010974:	4613      	mov	r3, r2
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	68b9      	ldr	r1, [r7, #8]
 801097a:	68f8      	ldr	r0, [r7, #12]
 801097c:	f000 f848 	bl	8010a10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8010982:	4618      	mov	r0, r3
 8010984:	3730      	adds	r7, #48	@ 0x30
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}

0801098a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801098a:	b580      	push	{r7, lr}
 801098c:	b08a      	sub	sp, #40	@ 0x28
 801098e:	af02      	add	r7, sp, #8
 8010990:	60f8      	str	r0, [r7, #12]
 8010992:	60b9      	str	r1, [r7, #8]
 8010994:	4613      	mov	r3, r2
 8010996:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010998:	68fb      	ldr	r3, [r7, #12]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d10d      	bne.n	80109ba <xQueueGenericCreate+0x30>
	__asm volatile
 801099e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80109a2:	b672      	cpsid	i
 80109a4:	f383 8811 	msr	BASEPRI, r3
 80109a8:	f3bf 8f6f 	isb	sy
 80109ac:	f3bf 8f4f 	dsb	sy
 80109b0:	b662      	cpsie	i
 80109b2:	613b      	str	r3, [r7, #16]
}
 80109b4:	bf00      	nop
 80109b6:	bf00      	nop
 80109b8:	e7fd      	b.n	80109b6 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d102      	bne.n	80109c6 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80109c0:	2300      	movs	r3, #0
 80109c2:	61fb      	str	r3, [r7, #28]
 80109c4:	e004      	b.n	80109d0 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	68ba      	ldr	r2, [r7, #8]
 80109ca:	fb02 f303 	mul.w	r3, r2, r3
 80109ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80109d0:	69fb      	ldr	r3, [r7, #28]
 80109d2:	3348      	adds	r3, #72	@ 0x48
 80109d4:	4618      	mov	r0, r3
 80109d6:	f002 f947 	bl	8012c68 <pvPortMalloc>
 80109da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80109dc:	69bb      	ldr	r3, [r7, #24]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d011      	beq.n	8010a06 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80109e2:	69bb      	ldr	r3, [r7, #24]
 80109e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	3348      	adds	r3, #72	@ 0x48
 80109ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80109ec:	69bb      	ldr	r3, [r7, #24]
 80109ee:	2200      	movs	r2, #0
 80109f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80109f4:	79fa      	ldrb	r2, [r7, #7]
 80109f6:	69bb      	ldr	r3, [r7, #24]
 80109f8:	9300      	str	r3, [sp, #0]
 80109fa:	4613      	mov	r3, r2
 80109fc:	697a      	ldr	r2, [r7, #20]
 80109fe:	68b9      	ldr	r1, [r7, #8]
 8010a00:	68f8      	ldr	r0, [r7, #12]
 8010a02:	f000 f805 	bl	8010a10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010a06:	69bb      	ldr	r3, [r7, #24]
	}
 8010a08:	4618      	mov	r0, r3
 8010a0a:	3720      	adds	r7, #32
 8010a0c:	46bd      	mov	sp, r7
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b084      	sub	sp, #16
 8010a14:	af00      	add	r7, sp, #0
 8010a16:	60f8      	str	r0, [r7, #12]
 8010a18:	60b9      	str	r1, [r7, #8]
 8010a1a:	607a      	str	r2, [r7, #4]
 8010a1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d103      	bne.n	8010a2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010a24:	69bb      	ldr	r3, [r7, #24]
 8010a26:	69ba      	ldr	r2, [r7, #24]
 8010a28:	601a      	str	r2, [r3, #0]
 8010a2a:	e002      	b.n	8010a32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010a2c:	69bb      	ldr	r3, [r7, #24]
 8010a2e:	687a      	ldr	r2, [r7, #4]
 8010a30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010a32:	69bb      	ldr	r3, [r7, #24]
 8010a34:	68fa      	ldr	r2, [r7, #12]
 8010a36:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010a38:	69bb      	ldr	r3, [r7, #24]
 8010a3a:	68ba      	ldr	r2, [r7, #8]
 8010a3c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010a3e:	2101      	movs	r1, #1
 8010a40:	69b8      	ldr	r0, [r7, #24]
 8010a42:	f7ff feaf 	bl	80107a4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010a46:	bf00      	nop
 8010a48:	3710      	adds	r7, #16
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	bd80      	pop	{r7, pc}

08010a4e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8010a4e:	b580      	push	{r7, lr}
 8010a50:	b082      	sub	sp, #8
 8010a52:	af00      	add	r7, sp, #0
 8010a54:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d00e      	beq.n	8010a7a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2200      	movs	r2, #0
 8010a60:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	2200      	movs	r2, #0
 8010a66:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8010a6e:	2300      	movs	r3, #0
 8010a70:	2200      	movs	r2, #0
 8010a72:	2100      	movs	r1, #0
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f000 f837 	bl	8010ae8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8010a7a:	bf00      	nop
 8010a7c:	3708      	adds	r7, #8
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	bd80      	pop	{r7, pc}

08010a82 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8010a82:	b580      	push	{r7, lr}
 8010a84:	b086      	sub	sp, #24
 8010a86:	af00      	add	r7, sp, #0
 8010a88:	4603      	mov	r3, r0
 8010a8a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	617b      	str	r3, [r7, #20]
 8010a90:	2300      	movs	r3, #0
 8010a92:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8010a94:	79fb      	ldrb	r3, [r7, #7]
 8010a96:	461a      	mov	r2, r3
 8010a98:	6939      	ldr	r1, [r7, #16]
 8010a9a:	6978      	ldr	r0, [r7, #20]
 8010a9c:	f7ff ff75 	bl	801098a <xQueueGenericCreate>
 8010aa0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010aa2:	68f8      	ldr	r0, [r7, #12]
 8010aa4:	f7ff ffd3 	bl	8010a4e <prvInitialiseMutex>

		return xNewQueue;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
	}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3718      	adds	r7, #24
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}

08010ab2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8010ab2:	b580      	push	{r7, lr}
 8010ab4:	b088      	sub	sp, #32
 8010ab6:	af02      	add	r7, sp, #8
 8010ab8:	4603      	mov	r3, r0
 8010aba:	6039      	str	r1, [r7, #0]
 8010abc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8010abe:	2301      	movs	r3, #1
 8010ac0:	617b      	str	r3, [r7, #20]
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8010ac6:	79fb      	ldrb	r3, [r7, #7]
 8010ac8:	9300      	str	r3, [sp, #0]
 8010aca:	683b      	ldr	r3, [r7, #0]
 8010acc:	2200      	movs	r2, #0
 8010ace:	6939      	ldr	r1, [r7, #16]
 8010ad0:	6978      	ldr	r0, [r7, #20]
 8010ad2:	f7ff fed3 	bl	801087c <xQueueGenericCreateStatic>
 8010ad6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8010ad8:	68f8      	ldr	r0, [r7, #12]
 8010ada:	f7ff ffb8 	bl	8010a4e <prvInitialiseMutex>

		return xNewQueue;
 8010ade:	68fb      	ldr	r3, [r7, #12]
	}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3718      	adds	r7, #24
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	bd80      	pop	{r7, pc}

08010ae8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010ae8:	b580      	push	{r7, lr}
 8010aea:	b08e      	sub	sp, #56	@ 0x38
 8010aec:	af00      	add	r7, sp, #0
 8010aee:	60f8      	str	r0, [r7, #12]
 8010af0:	60b9      	str	r1, [r7, #8]
 8010af2:	607a      	str	r2, [r7, #4]
 8010af4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010af6:	2300      	movs	r3, #0
 8010af8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d10d      	bne.n	8010b20 <xQueueGenericSend+0x38>
	__asm volatile
 8010b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b08:	b672      	cpsid	i
 8010b0a:	f383 8811 	msr	BASEPRI, r3
 8010b0e:	f3bf 8f6f 	isb	sy
 8010b12:	f3bf 8f4f 	dsb	sy
 8010b16:	b662      	cpsie	i
 8010b18:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010b1a:	bf00      	nop
 8010b1c:	bf00      	nop
 8010b1e:	e7fd      	b.n	8010b1c <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010b20:	68bb      	ldr	r3, [r7, #8]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d103      	bne.n	8010b2e <xQueueGenericSend+0x46>
 8010b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d101      	bne.n	8010b32 <xQueueGenericSend+0x4a>
 8010b2e:	2301      	movs	r3, #1
 8010b30:	e000      	b.n	8010b34 <xQueueGenericSend+0x4c>
 8010b32:	2300      	movs	r3, #0
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d10d      	bne.n	8010b54 <xQueueGenericSend+0x6c>
	__asm volatile
 8010b38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b3c:	b672      	cpsid	i
 8010b3e:	f383 8811 	msr	BASEPRI, r3
 8010b42:	f3bf 8f6f 	isb	sy
 8010b46:	f3bf 8f4f 	dsb	sy
 8010b4a:	b662      	cpsie	i
 8010b4c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010b4e:	bf00      	nop
 8010b50:	bf00      	nop
 8010b52:	e7fd      	b.n	8010b50 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010b54:	683b      	ldr	r3, [r7, #0]
 8010b56:	2b02      	cmp	r3, #2
 8010b58:	d103      	bne.n	8010b62 <xQueueGenericSend+0x7a>
 8010b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010b5e:	2b01      	cmp	r3, #1
 8010b60:	d101      	bne.n	8010b66 <xQueueGenericSend+0x7e>
 8010b62:	2301      	movs	r3, #1
 8010b64:	e000      	b.n	8010b68 <xQueueGenericSend+0x80>
 8010b66:	2300      	movs	r3, #0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d10d      	bne.n	8010b88 <xQueueGenericSend+0xa0>
	__asm volatile
 8010b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010b70:	b672      	cpsid	i
 8010b72:	f383 8811 	msr	BASEPRI, r3
 8010b76:	f3bf 8f6f 	isb	sy
 8010b7a:	f3bf 8f4f 	dsb	sy
 8010b7e:	b662      	cpsie	i
 8010b80:	623b      	str	r3, [r7, #32]
}
 8010b82:	bf00      	nop
 8010b84:	bf00      	nop
 8010b86:	e7fd      	b.n	8010b84 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010b88:	f001 fbea 	bl	8012360 <xTaskGetSchedulerState>
 8010b8c:	4603      	mov	r3, r0
 8010b8e:	2b00      	cmp	r3, #0
 8010b90:	d102      	bne.n	8010b98 <xQueueGenericSend+0xb0>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d101      	bne.n	8010b9c <xQueueGenericSend+0xb4>
 8010b98:	2301      	movs	r3, #1
 8010b9a:	e000      	b.n	8010b9e <xQueueGenericSend+0xb6>
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d10d      	bne.n	8010bbe <xQueueGenericSend+0xd6>
	__asm volatile
 8010ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ba6:	b672      	cpsid	i
 8010ba8:	f383 8811 	msr	BASEPRI, r3
 8010bac:	f3bf 8f6f 	isb	sy
 8010bb0:	f3bf 8f4f 	dsb	sy
 8010bb4:	b662      	cpsie	i
 8010bb6:	61fb      	str	r3, [r7, #28]
}
 8010bb8:	bf00      	nop
 8010bba:	bf00      	nop
 8010bbc:	e7fd      	b.n	8010bba <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010bbe:	f001 ff25 	bl	8012a0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010bca:	429a      	cmp	r2, r3
 8010bcc:	d302      	bcc.n	8010bd4 <xQueueGenericSend+0xec>
 8010bce:	683b      	ldr	r3, [r7, #0]
 8010bd0:	2b02      	cmp	r3, #2
 8010bd2:	d129      	bne.n	8010c28 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010bd4:	683a      	ldr	r2, [r7, #0]
 8010bd6:	68b9      	ldr	r1, [r7, #8]
 8010bd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010bda:	f000 fc6b 	bl	80114b4 <prvCopyDataToQueue>
 8010bde:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d010      	beq.n	8010c0a <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010bea:	3324      	adds	r3, #36	@ 0x24
 8010bec:	4618      	mov	r0, r3
 8010bee:	f001 f9e9 	bl	8011fc4 <xTaskRemoveFromEventList>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d013      	beq.n	8010c20 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010bf8:	4b3f      	ldr	r3, [pc, #252]	@ (8010cf8 <xQueueGenericSend+0x210>)
 8010bfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010bfe:	601a      	str	r2, [r3, #0]
 8010c00:	f3bf 8f4f 	dsb	sy
 8010c04:	f3bf 8f6f 	isb	sy
 8010c08:	e00a      	b.n	8010c20 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d007      	beq.n	8010c20 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010c10:	4b39      	ldr	r3, [pc, #228]	@ (8010cf8 <xQueueGenericSend+0x210>)
 8010c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010c16:	601a      	str	r2, [r3, #0]
 8010c18:	f3bf 8f4f 	dsb	sy
 8010c1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010c20:	f001 ff2a 	bl	8012a78 <vPortExitCritical>
				return pdPASS;
 8010c24:	2301      	movs	r3, #1
 8010c26:	e063      	b.n	8010cf0 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d103      	bne.n	8010c36 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010c2e:	f001 ff23 	bl	8012a78 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010c32:	2300      	movs	r3, #0
 8010c34:	e05c      	b.n	8010cf0 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010c36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d106      	bne.n	8010c4a <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010c3c:	f107 0314 	add.w	r3, r7, #20
 8010c40:	4618      	mov	r0, r3
 8010c42:	f001 fa25 	bl	8012090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010c46:	2301      	movs	r3, #1
 8010c48:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010c4a:	f001 ff15 	bl	8012a78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010c4e:	f000 ff9f 	bl	8011b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010c52:	f001 fedb 	bl	8012a0c <vPortEnterCritical>
 8010c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010c5c:	b25b      	sxtb	r3, r3
 8010c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c62:	d103      	bne.n	8010c6c <xQueueGenericSend+0x184>
 8010c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c66:	2200      	movs	r2, #0
 8010c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c72:	b25b      	sxtb	r3, r3
 8010c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c78:	d103      	bne.n	8010c82 <xQueueGenericSend+0x19a>
 8010c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c7c:	2200      	movs	r2, #0
 8010c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010c82:	f001 fef9 	bl	8012a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010c86:	1d3a      	adds	r2, r7, #4
 8010c88:	f107 0314 	add.w	r3, r7, #20
 8010c8c:	4611      	mov	r1, r2
 8010c8e:	4618      	mov	r0, r3
 8010c90:	f001 fa14 	bl	80120bc <xTaskCheckForTimeOut>
 8010c94:	4603      	mov	r3, r0
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d124      	bne.n	8010ce4 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010c9a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010c9c:	f000 fd02 	bl	80116a4 <prvIsQueueFull>
 8010ca0:	4603      	mov	r3, r0
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d018      	beq.n	8010cd8 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ca8:	3310      	adds	r3, #16
 8010caa:	687a      	ldr	r2, [r7, #4]
 8010cac:	4611      	mov	r1, r2
 8010cae:	4618      	mov	r0, r3
 8010cb0:	f001 f960 	bl	8011f74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8010cb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010cb6:	f000 fc8d 	bl	80115d4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8010cba:	f000 ff77 	bl	8011bac <xTaskResumeAll>
 8010cbe:	4603      	mov	r3, r0
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	f47f af7c 	bne.w	8010bbe <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 8010cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8010cf8 <xQueueGenericSend+0x210>)
 8010cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ccc:	601a      	str	r2, [r3, #0]
 8010cce:	f3bf 8f4f 	dsb	sy
 8010cd2:	f3bf 8f6f 	isb	sy
 8010cd6:	e772      	b.n	8010bbe <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8010cd8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010cda:	f000 fc7b 	bl	80115d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010cde:	f000 ff65 	bl	8011bac <xTaskResumeAll>
 8010ce2:	e76c      	b.n	8010bbe <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8010ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010ce6:	f000 fc75 	bl	80115d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010cea:	f000 ff5f 	bl	8011bac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8010cee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	3738      	adds	r7, #56	@ 0x38
 8010cf4:	46bd      	mov	sp, r7
 8010cf6:	bd80      	pop	{r7, pc}
 8010cf8:	e000ed04 	.word	0xe000ed04

08010cfc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b08e      	sub	sp, #56	@ 0x38
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	60f8      	str	r0, [r7, #12]
 8010d04:	60b9      	str	r1, [r7, #8]
 8010d06:	607a      	str	r2, [r7, #4]
 8010d08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d10d      	bne.n	8010d30 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8010d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d18:	b672      	cpsid	i
 8010d1a:	f383 8811 	msr	BASEPRI, r3
 8010d1e:	f3bf 8f6f 	isb	sy
 8010d22:	f3bf 8f4f 	dsb	sy
 8010d26:	b662      	cpsie	i
 8010d28:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010d2a:	bf00      	nop
 8010d2c:	bf00      	nop
 8010d2e:	e7fd      	b.n	8010d2c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010d30:	68bb      	ldr	r3, [r7, #8]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d103      	bne.n	8010d3e <xQueueGenericSendFromISR+0x42>
 8010d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d101      	bne.n	8010d42 <xQueueGenericSendFromISR+0x46>
 8010d3e:	2301      	movs	r3, #1
 8010d40:	e000      	b.n	8010d44 <xQueueGenericSendFromISR+0x48>
 8010d42:	2300      	movs	r3, #0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d10d      	bne.n	8010d64 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8010d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d4c:	b672      	cpsid	i
 8010d4e:	f383 8811 	msr	BASEPRI, r3
 8010d52:	f3bf 8f6f 	isb	sy
 8010d56:	f3bf 8f4f 	dsb	sy
 8010d5a:	b662      	cpsie	i
 8010d5c:	623b      	str	r3, [r7, #32]
}
 8010d5e:	bf00      	nop
 8010d60:	bf00      	nop
 8010d62:	e7fd      	b.n	8010d60 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010d64:	683b      	ldr	r3, [r7, #0]
 8010d66:	2b02      	cmp	r3, #2
 8010d68:	d103      	bne.n	8010d72 <xQueueGenericSendFromISR+0x76>
 8010d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	d101      	bne.n	8010d76 <xQueueGenericSendFromISR+0x7a>
 8010d72:	2301      	movs	r3, #1
 8010d74:	e000      	b.n	8010d78 <xQueueGenericSendFromISR+0x7c>
 8010d76:	2300      	movs	r3, #0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d10d      	bne.n	8010d98 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8010d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d80:	b672      	cpsid	i
 8010d82:	f383 8811 	msr	BASEPRI, r3
 8010d86:	f3bf 8f6f 	isb	sy
 8010d8a:	f3bf 8f4f 	dsb	sy
 8010d8e:	b662      	cpsie	i
 8010d90:	61fb      	str	r3, [r7, #28]
}
 8010d92:	bf00      	nop
 8010d94:	bf00      	nop
 8010d96:	e7fd      	b.n	8010d94 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010d98:	f001 ff20 	bl	8012bdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010d9c:	f3ef 8211 	mrs	r2, BASEPRI
 8010da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010da4:	b672      	cpsid	i
 8010da6:	f383 8811 	msr	BASEPRI, r3
 8010daa:	f3bf 8f6f 	isb	sy
 8010dae:	f3bf 8f4f 	dsb	sy
 8010db2:	b662      	cpsie	i
 8010db4:	61ba      	str	r2, [r7, #24]
 8010db6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010db8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d302      	bcc.n	8010dce <xQueueGenericSendFromISR+0xd2>
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	2b02      	cmp	r3, #2
 8010dcc:	d12c      	bne.n	8010e28 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010dd4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010dd8:	683a      	ldr	r2, [r7, #0]
 8010dda:	68b9      	ldr	r1, [r7, #8]
 8010ddc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010dde:	f000 fb69 	bl	80114b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010de2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8010de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dea:	d112      	bne.n	8010e12 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d016      	beq.n	8010e22 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010df6:	3324      	adds	r3, #36	@ 0x24
 8010df8:	4618      	mov	r0, r3
 8010dfa:	f001 f8e3 	bl	8011fc4 <xTaskRemoveFromEventList>
 8010dfe:	4603      	mov	r3, r0
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	d00e      	beq.n	8010e22 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00b      	beq.n	8010e22 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	2201      	movs	r2, #1
 8010e0e:	601a      	str	r2, [r3, #0]
 8010e10:	e007      	b.n	8010e22 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010e12:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010e16:	3301      	adds	r3, #1
 8010e18:	b2db      	uxtb	r3, r3
 8010e1a:	b25a      	sxtb	r2, r3
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010e22:	2301      	movs	r3, #1
 8010e24:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8010e26:	e001      	b.n	8010e2c <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e2e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010e30:	693b      	ldr	r3, [r7, #16]
 8010e32:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010e36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	3738      	adds	r7, #56	@ 0x38
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	bd80      	pop	{r7, pc}

08010e42 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010e42:	b580      	push	{r7, lr}
 8010e44:	b08e      	sub	sp, #56	@ 0x38
 8010e46:	af00      	add	r7, sp, #0
 8010e48:	6078      	str	r0, [r7, #4]
 8010e4a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010e50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d10d      	bne.n	8010e72 <xQueueGiveFromISR+0x30>
	__asm volatile
 8010e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e5a:	b672      	cpsid	i
 8010e5c:	f383 8811 	msr	BASEPRI, r3
 8010e60:	f3bf 8f6f 	isb	sy
 8010e64:	f3bf 8f4f 	dsb	sy
 8010e68:	b662      	cpsie	i
 8010e6a:	623b      	str	r3, [r7, #32]
}
 8010e6c:	bf00      	nop
 8010e6e:	bf00      	nop
 8010e70:	e7fd      	b.n	8010e6e <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d00d      	beq.n	8010e96 <xQueueGiveFromISR+0x54>
	__asm volatile
 8010e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e7e:	b672      	cpsid	i
 8010e80:	f383 8811 	msr	BASEPRI, r3
 8010e84:	f3bf 8f6f 	isb	sy
 8010e88:	f3bf 8f4f 	dsb	sy
 8010e8c:	b662      	cpsie	i
 8010e8e:	61fb      	str	r3, [r7, #28]
}
 8010e90:	bf00      	nop
 8010e92:	bf00      	nop
 8010e94:	e7fd      	b.n	8010e92 <xQueueGiveFromISR+0x50>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d103      	bne.n	8010ea6 <xQueueGiveFromISR+0x64>
 8010e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ea0:	689b      	ldr	r3, [r3, #8]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d101      	bne.n	8010eaa <xQueueGiveFromISR+0x68>
 8010ea6:	2301      	movs	r3, #1
 8010ea8:	e000      	b.n	8010eac <xQueueGiveFromISR+0x6a>
 8010eaa:	2300      	movs	r3, #0
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d10d      	bne.n	8010ecc <xQueueGiveFromISR+0x8a>
	__asm volatile
 8010eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010eb4:	b672      	cpsid	i
 8010eb6:	f383 8811 	msr	BASEPRI, r3
 8010eba:	f3bf 8f6f 	isb	sy
 8010ebe:	f3bf 8f4f 	dsb	sy
 8010ec2:	b662      	cpsie	i
 8010ec4:	61bb      	str	r3, [r7, #24]
}
 8010ec6:	bf00      	nop
 8010ec8:	bf00      	nop
 8010eca:	e7fd      	b.n	8010ec8 <xQueueGiveFromISR+0x86>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ecc:	f001 fe86 	bl	8012bdc <vPortValidateInterruptPriority>
	__asm volatile
 8010ed0:	f3ef 8211 	mrs	r2, BASEPRI
 8010ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ed8:	b672      	cpsid	i
 8010eda:	f383 8811 	msr	BASEPRI, r3
 8010ede:	f3bf 8f6f 	isb	sy
 8010ee2:	f3bf 8f4f 	dsb	sy
 8010ee6:	b662      	cpsie	i
 8010ee8:	617a      	str	r2, [r7, #20]
 8010eea:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8010eec:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010ef4:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8010ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ef8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010efa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010efc:	429a      	cmp	r2, r3
 8010efe:	d22b      	bcs.n	8010f58 <xQueueGiveFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8010f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010f06:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f0c:	1c5a      	adds	r2, r3, #1
 8010f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f10:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8010f12:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8010f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f1a:	d112      	bne.n	8010f42 <xQueueGiveFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d016      	beq.n	8010f52 <xQueueGiveFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f26:	3324      	adds	r3, #36	@ 0x24
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f001 f84b 	bl	8011fc4 <xTaskRemoveFromEventList>
 8010f2e:	4603      	mov	r3, r0
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d00e      	beq.n	8010f52 <xQueueGiveFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d00b      	beq.n	8010f52 <xQueueGiveFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010f3a:	683b      	ldr	r3, [r7, #0]
 8010f3c:	2201      	movs	r2, #1
 8010f3e:	601a      	str	r2, [r3, #0]
 8010f40:	e007      	b.n	8010f52 <xQueueGiveFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010f42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010f46:	3301      	adds	r3, #1
 8010f48:	b2db      	uxtb	r3, r3
 8010f4a:	b25a      	sxtb	r2, r3
 8010f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010f52:	2301      	movs	r3, #1
 8010f54:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f56:	e001      	b.n	8010f5c <xQueueGiveFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f5e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	f383 8811 	msr	BASEPRI, r3
}
 8010f66:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	3738      	adds	r7, #56	@ 0x38
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd80      	pop	{r7, pc}
	...

08010f74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010f74:	b580      	push	{r7, lr}
 8010f76:	b08c      	sub	sp, #48	@ 0x30
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	60f8      	str	r0, [r7, #12]
 8010f7c:	60b9      	str	r1, [r7, #8]
 8010f7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010f80:	2300      	movs	r3, #0
 8010f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d10d      	bne.n	8010faa <xQueueReceive+0x36>
	__asm volatile
 8010f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010f92:	b672      	cpsid	i
 8010f94:	f383 8811 	msr	BASEPRI, r3
 8010f98:	f3bf 8f6f 	isb	sy
 8010f9c:	f3bf 8f4f 	dsb	sy
 8010fa0:	b662      	cpsie	i
 8010fa2:	623b      	str	r3, [r7, #32]
}
 8010fa4:	bf00      	nop
 8010fa6:	bf00      	nop
 8010fa8:	e7fd      	b.n	8010fa6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d103      	bne.n	8010fb8 <xQueueReceive+0x44>
 8010fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d101      	bne.n	8010fbc <xQueueReceive+0x48>
 8010fb8:	2301      	movs	r3, #1
 8010fba:	e000      	b.n	8010fbe <xQueueReceive+0x4a>
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d10d      	bne.n	8010fde <xQueueReceive+0x6a>
	__asm volatile
 8010fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010fc6:	b672      	cpsid	i
 8010fc8:	f383 8811 	msr	BASEPRI, r3
 8010fcc:	f3bf 8f6f 	isb	sy
 8010fd0:	f3bf 8f4f 	dsb	sy
 8010fd4:	b662      	cpsie	i
 8010fd6:	61fb      	str	r3, [r7, #28]
}
 8010fd8:	bf00      	nop
 8010fda:	bf00      	nop
 8010fdc:	e7fd      	b.n	8010fda <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010fde:	f001 f9bf 	bl	8012360 <xTaskGetSchedulerState>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d102      	bne.n	8010fee <xQueueReceive+0x7a>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d101      	bne.n	8010ff2 <xQueueReceive+0x7e>
 8010fee:	2301      	movs	r3, #1
 8010ff0:	e000      	b.n	8010ff4 <xQueueReceive+0x80>
 8010ff2:	2300      	movs	r3, #0
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d10d      	bne.n	8011014 <xQueueReceive+0xa0>
	__asm volatile
 8010ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010ffc:	b672      	cpsid	i
 8010ffe:	f383 8811 	msr	BASEPRI, r3
 8011002:	f3bf 8f6f 	isb	sy
 8011006:	f3bf 8f4f 	dsb	sy
 801100a:	b662      	cpsie	i
 801100c:	61bb      	str	r3, [r7, #24]
}
 801100e:	bf00      	nop
 8011010:	bf00      	nop
 8011012:	e7fd      	b.n	8011010 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011014:	f001 fcfa 	bl	8012a0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801101a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801101c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011020:	2b00      	cmp	r3, #0
 8011022:	d01f      	beq.n	8011064 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011024:	68b9      	ldr	r1, [r7, #8]
 8011026:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011028:	f000 faae 	bl	8011588 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801102c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801102e:	1e5a      	subs	r2, r3, #1
 8011030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011032:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011036:	691b      	ldr	r3, [r3, #16]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d00f      	beq.n	801105c <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801103c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801103e:	3310      	adds	r3, #16
 8011040:	4618      	mov	r0, r3
 8011042:	f000 ffbf 	bl	8011fc4 <xTaskRemoveFromEventList>
 8011046:	4603      	mov	r3, r0
 8011048:	2b00      	cmp	r3, #0
 801104a:	d007      	beq.n	801105c <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801104c:	4b3c      	ldr	r3, [pc, #240]	@ (8011140 <xQueueReceive+0x1cc>)
 801104e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011052:	601a      	str	r2, [r3, #0]
 8011054:	f3bf 8f4f 	dsb	sy
 8011058:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801105c:	f001 fd0c 	bl	8012a78 <vPortExitCritical>
				return pdPASS;
 8011060:	2301      	movs	r3, #1
 8011062:	e069      	b.n	8011138 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d103      	bne.n	8011072 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801106a:	f001 fd05 	bl	8012a78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801106e:	2300      	movs	r3, #0
 8011070:	e062      	b.n	8011138 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011072:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011074:	2b00      	cmp	r3, #0
 8011076:	d106      	bne.n	8011086 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011078:	f107 0310 	add.w	r3, r7, #16
 801107c:	4618      	mov	r0, r3
 801107e:	f001 f807 	bl	8012090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011082:	2301      	movs	r3, #1
 8011084:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011086:	f001 fcf7 	bl	8012a78 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801108a:	f000 fd81 	bl	8011b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801108e:	f001 fcbd 	bl	8012a0c <vPortEnterCritical>
 8011092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011094:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011098:	b25b      	sxtb	r3, r3
 801109a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801109e:	d103      	bne.n	80110a8 <xQueueReceive+0x134>
 80110a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110a2:	2200      	movs	r2, #0
 80110a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80110a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80110ae:	b25b      	sxtb	r3, r3
 80110b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110b4:	d103      	bne.n	80110be <xQueueReceive+0x14a>
 80110b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110b8:	2200      	movs	r2, #0
 80110ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80110be:	f001 fcdb 	bl	8012a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80110c2:	1d3a      	adds	r2, r7, #4
 80110c4:	f107 0310 	add.w	r3, r7, #16
 80110c8:	4611      	mov	r1, r2
 80110ca:	4618      	mov	r0, r3
 80110cc:	f000 fff6 	bl	80120bc <xTaskCheckForTimeOut>
 80110d0:	4603      	mov	r3, r0
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d123      	bne.n	801111e <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80110d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80110d8:	f000 face 	bl	8011678 <prvIsQueueEmpty>
 80110dc:	4603      	mov	r3, r0
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d017      	beq.n	8011112 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80110e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80110e4:	3324      	adds	r3, #36	@ 0x24
 80110e6:	687a      	ldr	r2, [r7, #4]
 80110e8:	4611      	mov	r1, r2
 80110ea:	4618      	mov	r0, r3
 80110ec:	f000 ff42 	bl	8011f74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80110f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80110f2:	f000 fa6f 	bl	80115d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80110f6:	f000 fd59 	bl	8011bac <xTaskResumeAll>
 80110fa:	4603      	mov	r3, r0
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d189      	bne.n	8011014 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8011100:	4b0f      	ldr	r3, [pc, #60]	@ (8011140 <xQueueReceive+0x1cc>)
 8011102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011106:	601a      	str	r2, [r3, #0]
 8011108:	f3bf 8f4f 	dsb	sy
 801110c:	f3bf 8f6f 	isb	sy
 8011110:	e780      	b.n	8011014 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011114:	f000 fa5e 	bl	80115d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011118:	f000 fd48 	bl	8011bac <xTaskResumeAll>
 801111c:	e77a      	b.n	8011014 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801111e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011120:	f000 fa58 	bl	80115d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011124:	f000 fd42 	bl	8011bac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801112a:	f000 faa5 	bl	8011678 <prvIsQueueEmpty>
 801112e:	4603      	mov	r3, r0
 8011130:	2b00      	cmp	r3, #0
 8011132:	f43f af6f 	beq.w	8011014 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011136:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011138:	4618      	mov	r0, r3
 801113a:	3730      	adds	r7, #48	@ 0x30
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}
 8011140:	e000ed04 	.word	0xe000ed04

08011144 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b08e      	sub	sp, #56	@ 0x38
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
 801114c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801114e:	2300      	movs	r3, #0
 8011150:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011156:	2300      	movs	r3, #0
 8011158:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801115a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801115c:	2b00      	cmp	r3, #0
 801115e:	d10d      	bne.n	801117c <xQueueSemaphoreTake+0x38>
	__asm volatile
 8011160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011164:	b672      	cpsid	i
 8011166:	f383 8811 	msr	BASEPRI, r3
 801116a:	f3bf 8f6f 	isb	sy
 801116e:	f3bf 8f4f 	dsb	sy
 8011172:	b662      	cpsie	i
 8011174:	623b      	str	r3, [r7, #32]
}
 8011176:	bf00      	nop
 8011178:	bf00      	nop
 801117a:	e7fd      	b.n	8011178 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801117c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801117e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011180:	2b00      	cmp	r3, #0
 8011182:	d00d      	beq.n	80111a0 <xQueueSemaphoreTake+0x5c>
	__asm volatile
 8011184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011188:	b672      	cpsid	i
 801118a:	f383 8811 	msr	BASEPRI, r3
 801118e:	f3bf 8f6f 	isb	sy
 8011192:	f3bf 8f4f 	dsb	sy
 8011196:	b662      	cpsie	i
 8011198:	61fb      	str	r3, [r7, #28]
}
 801119a:	bf00      	nop
 801119c:	bf00      	nop
 801119e:	e7fd      	b.n	801119c <xQueueSemaphoreTake+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80111a0:	f001 f8de 	bl	8012360 <xTaskGetSchedulerState>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d102      	bne.n	80111b0 <xQueueSemaphoreTake+0x6c>
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d101      	bne.n	80111b4 <xQueueSemaphoreTake+0x70>
 80111b0:	2301      	movs	r3, #1
 80111b2:	e000      	b.n	80111b6 <xQueueSemaphoreTake+0x72>
 80111b4:	2300      	movs	r3, #0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d10d      	bne.n	80111d6 <xQueueSemaphoreTake+0x92>
	__asm volatile
 80111ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80111be:	b672      	cpsid	i
 80111c0:	f383 8811 	msr	BASEPRI, r3
 80111c4:	f3bf 8f6f 	isb	sy
 80111c8:	f3bf 8f4f 	dsb	sy
 80111cc:	b662      	cpsie	i
 80111ce:	61bb      	str	r3, [r7, #24]
}
 80111d0:	bf00      	nop
 80111d2:	bf00      	nop
 80111d4:	e7fd      	b.n	80111d2 <xQueueSemaphoreTake+0x8e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80111d6:	f001 fc19 	bl	8012a0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80111da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80111de:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80111e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d024      	beq.n	8011230 <xQueueSemaphoreTake+0xec>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80111e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111e8:	1e5a      	subs	r2, r3, #1
 80111ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111ec:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80111ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d104      	bne.n	8011200 <xQueueSemaphoreTake+0xbc>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80111f6:	f001 fa7d 	bl	80126f4 <pvTaskIncrementMutexHeldCount>
 80111fa:	4602      	mov	r2, r0
 80111fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111fe:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011202:	691b      	ldr	r3, [r3, #16]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d00f      	beq.n	8011228 <xQueueSemaphoreTake+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801120a:	3310      	adds	r3, #16
 801120c:	4618      	mov	r0, r3
 801120e:	f000 fed9 	bl	8011fc4 <xTaskRemoveFromEventList>
 8011212:	4603      	mov	r3, r0
 8011214:	2b00      	cmp	r3, #0
 8011216:	d007      	beq.n	8011228 <xQueueSemaphoreTake+0xe4>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011218:	4b55      	ldr	r3, [pc, #340]	@ (8011370 <xQueueSemaphoreTake+0x22c>)
 801121a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801121e:	601a      	str	r2, [r3, #0]
 8011220:	f3bf 8f4f 	dsb	sy
 8011224:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011228:	f001 fc26 	bl	8012a78 <vPortExitCritical>
				return pdPASS;
 801122c:	2301      	movs	r3, #1
 801122e:	e09a      	b.n	8011366 <xQueueSemaphoreTake+0x222>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011230:	683b      	ldr	r3, [r7, #0]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d114      	bne.n	8011260 <xQueueSemaphoreTake+0x11c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011238:	2b00      	cmp	r3, #0
 801123a:	d00d      	beq.n	8011258 <xQueueSemaphoreTake+0x114>
	__asm volatile
 801123c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011240:	b672      	cpsid	i
 8011242:	f383 8811 	msr	BASEPRI, r3
 8011246:	f3bf 8f6f 	isb	sy
 801124a:	f3bf 8f4f 	dsb	sy
 801124e:	b662      	cpsie	i
 8011250:	617b      	str	r3, [r7, #20]
}
 8011252:	bf00      	nop
 8011254:	bf00      	nop
 8011256:	e7fd      	b.n	8011254 <xQueueSemaphoreTake+0x110>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011258:	f001 fc0e 	bl	8012a78 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801125c:	2300      	movs	r3, #0
 801125e:	e082      	b.n	8011366 <xQueueSemaphoreTake+0x222>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011262:	2b00      	cmp	r3, #0
 8011264:	d106      	bne.n	8011274 <xQueueSemaphoreTake+0x130>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011266:	f107 030c 	add.w	r3, r7, #12
 801126a:	4618      	mov	r0, r3
 801126c:	f000 ff10 	bl	8012090 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011270:	2301      	movs	r3, #1
 8011272:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011274:	f001 fc00 	bl	8012a78 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011278:	f000 fc8a 	bl	8011b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801127c:	f001 fbc6 	bl	8012a0c <vPortEnterCritical>
 8011280:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011282:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011286:	b25b      	sxtb	r3, r3
 8011288:	f1b3 3fff 	cmp.w	r3, #4294967295
 801128c:	d103      	bne.n	8011296 <xQueueSemaphoreTake+0x152>
 801128e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011290:	2200      	movs	r2, #0
 8011292:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011298:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801129c:	b25b      	sxtb	r3, r3
 801129e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112a2:	d103      	bne.n	80112ac <xQueueSemaphoreTake+0x168>
 80112a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112a6:	2200      	movs	r2, #0
 80112a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80112ac:	f001 fbe4 	bl	8012a78 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80112b0:	463a      	mov	r2, r7
 80112b2:	f107 030c 	add.w	r3, r7, #12
 80112b6:	4611      	mov	r1, r2
 80112b8:	4618      	mov	r0, r3
 80112ba:	f000 feff 	bl	80120bc <xTaskCheckForTimeOut>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d132      	bne.n	801132a <xQueueSemaphoreTake+0x1e6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80112c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80112c6:	f000 f9d7 	bl	8011678 <prvIsQueueEmpty>
 80112ca:	4603      	mov	r3, r0
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d026      	beq.n	801131e <xQueueSemaphoreTake+0x1da>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80112d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d109      	bne.n	80112ec <xQueueSemaphoreTake+0x1a8>
					{
						taskENTER_CRITICAL();
 80112d8:	f001 fb98 	bl	8012a0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80112dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112de:	689b      	ldr	r3, [r3, #8]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f001 f85b 	bl	801239c <xTaskPriorityInherit>
 80112e6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80112e8:	f001 fbc6 	bl	8012a78 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80112ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112ee:	3324      	adds	r3, #36	@ 0x24
 80112f0:	683a      	ldr	r2, [r7, #0]
 80112f2:	4611      	mov	r1, r2
 80112f4:	4618      	mov	r0, r3
 80112f6:	f000 fe3d 	bl	8011f74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80112fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80112fc:	f000 f96a 	bl	80115d4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011300:	f000 fc54 	bl	8011bac <xTaskResumeAll>
 8011304:	4603      	mov	r3, r0
 8011306:	2b00      	cmp	r3, #0
 8011308:	f47f af65 	bne.w	80111d6 <xQueueSemaphoreTake+0x92>
				{
					portYIELD_WITHIN_API();
 801130c:	4b18      	ldr	r3, [pc, #96]	@ (8011370 <xQueueSemaphoreTake+0x22c>)
 801130e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011312:	601a      	str	r2, [r3, #0]
 8011314:	f3bf 8f4f 	dsb	sy
 8011318:	f3bf 8f6f 	isb	sy
 801131c:	e75b      	b.n	80111d6 <xQueueSemaphoreTake+0x92>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 801131e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011320:	f000 f958 	bl	80115d4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011324:	f000 fc42 	bl	8011bac <xTaskResumeAll>
 8011328:	e755      	b.n	80111d6 <xQueueSemaphoreTake+0x92>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801132a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801132c:	f000 f952 	bl	80115d4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011330:	f000 fc3c 	bl	8011bac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011334:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011336:	f000 f99f 	bl	8011678 <prvIsQueueEmpty>
 801133a:	4603      	mov	r3, r0
 801133c:	2b00      	cmp	r3, #0
 801133e:	f43f af4a 	beq.w	80111d6 <xQueueSemaphoreTake+0x92>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011344:	2b00      	cmp	r3, #0
 8011346:	d00d      	beq.n	8011364 <xQueueSemaphoreTake+0x220>
					{
						taskENTER_CRITICAL();
 8011348:	f001 fb60 	bl	8012a0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801134c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801134e:	f000 f899 	bl	8011484 <prvGetDisinheritPriorityAfterTimeout>
 8011352:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011356:	689b      	ldr	r3, [r3, #8]
 8011358:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801135a:	4618      	mov	r0, r3
 801135c:	f001 f92a 	bl	80125b4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011360:	f001 fb8a 	bl	8012a78 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011364:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011366:	4618      	mov	r0, r3
 8011368:	3738      	adds	r7, #56	@ 0x38
 801136a:	46bd      	mov	sp, r7
 801136c:	bd80      	pop	{r7, pc}
 801136e:	bf00      	nop
 8011370:	e000ed04 	.word	0xe000ed04

08011374 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b08e      	sub	sp, #56	@ 0x38
 8011378:	af00      	add	r7, sp, #0
 801137a:	60f8      	str	r0, [r7, #12]
 801137c:	60b9      	str	r1, [r7, #8]
 801137e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011380:	68fb      	ldr	r3, [r7, #12]
 8011382:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011386:	2b00      	cmp	r3, #0
 8011388:	d10d      	bne.n	80113a6 <xQueueReceiveFromISR+0x32>
	__asm volatile
 801138a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801138e:	b672      	cpsid	i
 8011390:	f383 8811 	msr	BASEPRI, r3
 8011394:	f3bf 8f6f 	isb	sy
 8011398:	f3bf 8f4f 	dsb	sy
 801139c:	b662      	cpsie	i
 801139e:	623b      	str	r3, [r7, #32]
}
 80113a0:	bf00      	nop
 80113a2:	bf00      	nop
 80113a4:	e7fd      	b.n	80113a2 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80113a6:	68bb      	ldr	r3, [r7, #8]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d103      	bne.n	80113b4 <xQueueReceiveFromISR+0x40>
 80113ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80113ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d101      	bne.n	80113b8 <xQueueReceiveFromISR+0x44>
 80113b4:	2301      	movs	r3, #1
 80113b6:	e000      	b.n	80113ba <xQueueReceiveFromISR+0x46>
 80113b8:	2300      	movs	r3, #0
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d10d      	bne.n	80113da <xQueueReceiveFromISR+0x66>
	__asm volatile
 80113be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113c2:	b672      	cpsid	i
 80113c4:	f383 8811 	msr	BASEPRI, r3
 80113c8:	f3bf 8f6f 	isb	sy
 80113cc:	f3bf 8f4f 	dsb	sy
 80113d0:	b662      	cpsie	i
 80113d2:	61fb      	str	r3, [r7, #28]
}
 80113d4:	bf00      	nop
 80113d6:	bf00      	nop
 80113d8:	e7fd      	b.n	80113d6 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80113da:	f001 fbff 	bl	8012bdc <vPortValidateInterruptPriority>
	__asm volatile
 80113de:	f3ef 8211 	mrs	r2, BASEPRI
 80113e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80113e6:	b672      	cpsid	i
 80113e8:	f383 8811 	msr	BASEPRI, r3
 80113ec:	f3bf 8f6f 	isb	sy
 80113f0:	f3bf 8f4f 	dsb	sy
 80113f4:	b662      	cpsie	i
 80113f6:	61ba      	str	r2, [r7, #24]
 80113f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80113fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80113fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011402:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011406:	2b00      	cmp	r3, #0
 8011408:	d02f      	beq.n	801146a <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801140a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801140c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011414:	68b9      	ldr	r1, [r7, #8]
 8011416:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011418:	f000 f8b6 	bl	8011588 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801141c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801141e:	1e5a      	subs	r2, r3, #1
 8011420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011422:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011424:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8011428:	f1b3 3fff 	cmp.w	r3, #4294967295
 801142c:	d112      	bne.n	8011454 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801142e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011430:	691b      	ldr	r3, [r3, #16]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d016      	beq.n	8011464 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011438:	3310      	adds	r3, #16
 801143a:	4618      	mov	r0, r3
 801143c:	f000 fdc2 	bl	8011fc4 <xTaskRemoveFromEventList>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d00e      	beq.n	8011464 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00b      	beq.n	8011464 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2201      	movs	r2, #1
 8011450:	601a      	str	r2, [r3, #0]
 8011452:	e007      	b.n	8011464 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011454:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011458:	3301      	adds	r3, #1
 801145a:	b2db      	uxtb	r3, r3
 801145c:	b25a      	sxtb	r2, r3
 801145e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8011464:	2301      	movs	r3, #1
 8011466:	637b      	str	r3, [r7, #52]	@ 0x34
 8011468:	e001      	b.n	801146e <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 801146a:	2300      	movs	r3, #0
 801146c:	637b      	str	r3, [r7, #52]	@ 0x34
 801146e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011470:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011472:	693b      	ldr	r3, [r7, #16]
 8011474:	f383 8811 	msr	BASEPRI, r3
}
 8011478:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801147a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801147c:	4618      	mov	r0, r3
 801147e:	3738      	adds	r7, #56	@ 0x38
 8011480:	46bd      	mov	sp, r7
 8011482:	bd80      	pop	{r7, pc}

08011484 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011484:	b480      	push	{r7}
 8011486:	b085      	sub	sp, #20
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011490:	2b00      	cmp	r3, #0
 8011492:	d006      	beq.n	80114a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f1c3 0307 	rsb	r3, r3, #7
 801149e:	60fb      	str	r3, [r7, #12]
 80114a0:	e001      	b.n	80114a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80114a2:	2300      	movs	r3, #0
 80114a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80114a6:	68fb      	ldr	r3, [r7, #12]
	}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3714      	adds	r7, #20
 80114ac:	46bd      	mov	sp, r7
 80114ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b2:	4770      	bx	lr

080114b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80114b4:	b580      	push	{r7, lr}
 80114b6:	b086      	sub	sp, #24
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	60f8      	str	r0, [r7, #12]
 80114bc:	60b9      	str	r1, [r7, #8]
 80114be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80114c0:	2300      	movs	r3, #0
 80114c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80114c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d10d      	bne.n	80114ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d14d      	bne.n	8011576 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	689b      	ldr	r3, [r3, #8]
 80114de:	4618      	mov	r0, r3
 80114e0:	f000 ffdc 	bl	801249c <xTaskPriorityDisinherit>
 80114e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	2200      	movs	r2, #0
 80114ea:	609a      	str	r2, [r3, #8]
 80114ec:	e043      	b.n	8011576 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d119      	bne.n	8011528 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	6858      	ldr	r0, [r3, #4]
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80114fc:	461a      	mov	r2, r3
 80114fe:	68b9      	ldr	r1, [r7, #8]
 8011500:	f001 fe46 	bl	8013190 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	685a      	ldr	r2, [r3, #4]
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801150c:	441a      	add	r2, r3
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	685a      	ldr	r2, [r3, #4]
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	689b      	ldr	r3, [r3, #8]
 801151a:	429a      	cmp	r2, r3
 801151c:	d32b      	bcc.n	8011576 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	605a      	str	r2, [r3, #4]
 8011526:	e026      	b.n	8011576 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	68d8      	ldr	r0, [r3, #12]
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011530:	461a      	mov	r2, r3
 8011532:	68b9      	ldr	r1, [r7, #8]
 8011534:	f001 fe2c 	bl	8013190 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	68da      	ldr	r2, [r3, #12]
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011540:	425b      	negs	r3, r3
 8011542:	441a      	add	r2, r3
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	68da      	ldr	r2, [r3, #12]
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	429a      	cmp	r2, r3
 8011552:	d207      	bcs.n	8011564 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011554:	68fb      	ldr	r3, [r7, #12]
 8011556:	689a      	ldr	r2, [r3, #8]
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801155c:	425b      	negs	r3, r3
 801155e:	441a      	add	r2, r3
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	2b02      	cmp	r3, #2
 8011568:	d105      	bne.n	8011576 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d002      	beq.n	8011576 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	3b01      	subs	r3, #1
 8011574:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011576:	693b      	ldr	r3, [r7, #16]
 8011578:	1c5a      	adds	r2, r3, #1
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 801157e:	697b      	ldr	r3, [r7, #20]
}
 8011580:	4618      	mov	r0, r3
 8011582:	3718      	adds	r7, #24
 8011584:	46bd      	mov	sp, r7
 8011586:	bd80      	pop	{r7, pc}

08011588 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011588:	b580      	push	{r7, lr}
 801158a:	b082      	sub	sp, #8
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
 8011590:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011596:	2b00      	cmp	r3, #0
 8011598:	d018      	beq.n	80115cc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	68da      	ldr	r2, [r3, #12]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115a2:	441a      	add	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	68da      	ldr	r2, [r3, #12]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	689b      	ldr	r3, [r3, #8]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d303      	bcc.n	80115bc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681a      	ldr	r2, [r3, #0]
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	68d9      	ldr	r1, [r3, #12]
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80115c4:	461a      	mov	r2, r3
 80115c6:	6838      	ldr	r0, [r7, #0]
 80115c8:	f001 fde2 	bl	8013190 <memcpy>
	}
}
 80115cc:	bf00      	nop
 80115ce:	3708      	adds	r7, #8
 80115d0:	46bd      	mov	sp, r7
 80115d2:	bd80      	pop	{r7, pc}

080115d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b084      	sub	sp, #16
 80115d8:	af00      	add	r7, sp, #0
 80115da:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80115dc:	f001 fa16 	bl	8012a0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80115e6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80115e8:	e011      	b.n	801160e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d012      	beq.n	8011618 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	3324      	adds	r3, #36	@ 0x24
 80115f6:	4618      	mov	r0, r3
 80115f8:	f000 fce4 	bl	8011fc4 <xTaskRemoveFromEventList>
 80115fc:	4603      	mov	r3, r0
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d001      	beq.n	8011606 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011602:	f000 fdc3 	bl	801218c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011606:	7bfb      	ldrb	r3, [r7, #15]
 8011608:	3b01      	subs	r3, #1
 801160a:	b2db      	uxtb	r3, r3
 801160c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801160e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011612:	2b00      	cmp	r3, #0
 8011614:	dce9      	bgt.n	80115ea <prvUnlockQueue+0x16>
 8011616:	e000      	b.n	801161a <prvUnlockQueue+0x46>
					break;
 8011618:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	22ff      	movs	r2, #255	@ 0xff
 801161e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8011622:	f001 fa29 	bl	8012a78 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011626:	f001 f9f1 	bl	8012a0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011630:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011632:	e011      	b.n	8011658 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	691b      	ldr	r3, [r3, #16]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d012      	beq.n	8011662 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	3310      	adds	r3, #16
 8011640:	4618      	mov	r0, r3
 8011642:	f000 fcbf 	bl	8011fc4 <xTaskRemoveFromEventList>
 8011646:	4603      	mov	r3, r0
 8011648:	2b00      	cmp	r3, #0
 801164a:	d001      	beq.n	8011650 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801164c:	f000 fd9e 	bl	801218c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011650:	7bbb      	ldrb	r3, [r7, #14]
 8011652:	3b01      	subs	r3, #1
 8011654:	b2db      	uxtb	r3, r3
 8011656:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801165c:	2b00      	cmp	r3, #0
 801165e:	dce9      	bgt.n	8011634 <prvUnlockQueue+0x60>
 8011660:	e000      	b.n	8011664 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011662:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	22ff      	movs	r2, #255	@ 0xff
 8011668:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 801166c:	f001 fa04 	bl	8012a78 <vPortExitCritical>
}
 8011670:	bf00      	nop
 8011672:	3710      	adds	r7, #16
 8011674:	46bd      	mov	sp, r7
 8011676:	bd80      	pop	{r7, pc}

08011678 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011678:	b580      	push	{r7, lr}
 801167a:	b084      	sub	sp, #16
 801167c:	af00      	add	r7, sp, #0
 801167e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011680:	f001 f9c4 	bl	8012a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011688:	2b00      	cmp	r3, #0
 801168a:	d102      	bne.n	8011692 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801168c:	2301      	movs	r3, #1
 801168e:	60fb      	str	r3, [r7, #12]
 8011690:	e001      	b.n	8011696 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011692:	2300      	movs	r3, #0
 8011694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011696:	f001 f9ef 	bl	8012a78 <vPortExitCritical>

	return xReturn;
 801169a:	68fb      	ldr	r3, [r7, #12]
}
 801169c:	4618      	mov	r0, r3
 801169e:	3710      	adds	r7, #16
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}

080116a4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	b084      	sub	sp, #16
 80116a8:	af00      	add	r7, sp, #0
 80116aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80116ac:	f001 f9ae 	bl	8012a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80116b8:	429a      	cmp	r2, r3
 80116ba:	d102      	bne.n	80116c2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80116bc:	2301      	movs	r3, #1
 80116be:	60fb      	str	r3, [r7, #12]
 80116c0:	e001      	b.n	80116c6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80116c2:	2300      	movs	r3, #0
 80116c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80116c6:	f001 f9d7 	bl	8012a78 <vPortExitCritical>

	return xReturn;
 80116ca:	68fb      	ldr	r3, [r7, #12]
}
 80116cc:	4618      	mov	r0, r3
 80116ce:	3710      	adds	r7, #16
 80116d0:	46bd      	mov	sp, r7
 80116d2:	bd80      	pop	{r7, pc}

080116d4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b08e      	sub	sp, #56	@ 0x38
 80116d8:	af04      	add	r7, sp, #16
 80116da:	60f8      	str	r0, [r7, #12]
 80116dc:	60b9      	str	r1, [r7, #8]
 80116de:	607a      	str	r2, [r7, #4]
 80116e0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80116e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d10d      	bne.n	8011704 <xTaskCreateStatic+0x30>
	__asm volatile
 80116e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80116ec:	b672      	cpsid	i
 80116ee:	f383 8811 	msr	BASEPRI, r3
 80116f2:	f3bf 8f6f 	isb	sy
 80116f6:	f3bf 8f4f 	dsb	sy
 80116fa:	b662      	cpsie	i
 80116fc:	623b      	str	r3, [r7, #32]
}
 80116fe:	bf00      	nop
 8011700:	bf00      	nop
 8011702:	e7fd      	b.n	8011700 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011706:	2b00      	cmp	r3, #0
 8011708:	d10d      	bne.n	8011726 <xTaskCreateStatic+0x52>
	__asm volatile
 801170a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801170e:	b672      	cpsid	i
 8011710:	f383 8811 	msr	BASEPRI, r3
 8011714:	f3bf 8f6f 	isb	sy
 8011718:	f3bf 8f4f 	dsb	sy
 801171c:	b662      	cpsie	i
 801171e:	61fb      	str	r3, [r7, #28]
}
 8011720:	bf00      	nop
 8011722:	bf00      	nop
 8011724:	e7fd      	b.n	8011722 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011726:	23a0      	movs	r3, #160	@ 0xa0
 8011728:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801172a:	693b      	ldr	r3, [r7, #16]
 801172c:	2ba0      	cmp	r3, #160	@ 0xa0
 801172e:	d00d      	beq.n	801174c <xTaskCreateStatic+0x78>
	__asm volatile
 8011730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011734:	b672      	cpsid	i
 8011736:	f383 8811 	msr	BASEPRI, r3
 801173a:	f3bf 8f6f 	isb	sy
 801173e:	f3bf 8f4f 	dsb	sy
 8011742:	b662      	cpsie	i
 8011744:	61bb      	str	r3, [r7, #24]
}
 8011746:	bf00      	nop
 8011748:	bf00      	nop
 801174a:	e7fd      	b.n	8011748 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801174c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801174e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011750:	2b00      	cmp	r3, #0
 8011752:	d01e      	beq.n	8011792 <xTaskCreateStatic+0xbe>
 8011754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011756:	2b00      	cmp	r3, #0
 8011758:	d01b      	beq.n	8011792 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801175a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801175c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801175e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011760:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011762:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011766:	2202      	movs	r2, #2
 8011768:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801176c:	2300      	movs	r3, #0
 801176e:	9303      	str	r3, [sp, #12]
 8011770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011772:	9302      	str	r3, [sp, #8]
 8011774:	f107 0314 	add.w	r3, r7, #20
 8011778:	9301      	str	r3, [sp, #4]
 801177a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801177c:	9300      	str	r3, [sp, #0]
 801177e:	683b      	ldr	r3, [r7, #0]
 8011780:	687a      	ldr	r2, [r7, #4]
 8011782:	68b9      	ldr	r1, [r7, #8]
 8011784:	68f8      	ldr	r0, [r7, #12]
 8011786:	f000 f851 	bl	801182c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801178a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801178c:	f000 f8f0 	bl	8011970 <prvAddNewTaskToReadyList>
 8011790:	e001      	b.n	8011796 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8011792:	2300      	movs	r3, #0
 8011794:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011796:	697b      	ldr	r3, [r7, #20]
	}
 8011798:	4618      	mov	r0, r3
 801179a:	3728      	adds	r7, #40	@ 0x28
 801179c:	46bd      	mov	sp, r7
 801179e:	bd80      	pop	{r7, pc}

080117a0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b08c      	sub	sp, #48	@ 0x30
 80117a4:	af04      	add	r7, sp, #16
 80117a6:	60f8      	str	r0, [r7, #12]
 80117a8:	60b9      	str	r1, [r7, #8]
 80117aa:	603b      	str	r3, [r7, #0]
 80117ac:	4613      	mov	r3, r2
 80117ae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80117b0:	88fb      	ldrh	r3, [r7, #6]
 80117b2:	009b      	lsls	r3, r3, #2
 80117b4:	4618      	mov	r0, r3
 80117b6:	f001 fa57 	bl	8012c68 <pvPortMalloc>
 80117ba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80117bc:	697b      	ldr	r3, [r7, #20]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d00e      	beq.n	80117e0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80117c2:	20a0      	movs	r0, #160	@ 0xa0
 80117c4:	f001 fa50 	bl	8012c68 <pvPortMalloc>
 80117c8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80117ca:	69fb      	ldr	r3, [r7, #28]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d003      	beq.n	80117d8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80117d0:	69fb      	ldr	r3, [r7, #28]
 80117d2:	697a      	ldr	r2, [r7, #20]
 80117d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80117d6:	e005      	b.n	80117e4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80117d8:	6978      	ldr	r0, [r7, #20]
 80117da:	f001 fb13 	bl	8012e04 <vPortFree>
 80117de:	e001      	b.n	80117e4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80117e0:	2300      	movs	r3, #0
 80117e2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80117e4:	69fb      	ldr	r3, [r7, #28]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d017      	beq.n	801181a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80117ea:	69fb      	ldr	r3, [r7, #28]
 80117ec:	2200      	movs	r2, #0
 80117ee:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80117f2:	88fa      	ldrh	r2, [r7, #6]
 80117f4:	2300      	movs	r3, #0
 80117f6:	9303      	str	r3, [sp, #12]
 80117f8:	69fb      	ldr	r3, [r7, #28]
 80117fa:	9302      	str	r3, [sp, #8]
 80117fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80117fe:	9301      	str	r3, [sp, #4]
 8011800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011802:	9300      	str	r3, [sp, #0]
 8011804:	683b      	ldr	r3, [r7, #0]
 8011806:	68b9      	ldr	r1, [r7, #8]
 8011808:	68f8      	ldr	r0, [r7, #12]
 801180a:	f000 f80f 	bl	801182c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801180e:	69f8      	ldr	r0, [r7, #28]
 8011810:	f000 f8ae 	bl	8011970 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011814:	2301      	movs	r3, #1
 8011816:	61bb      	str	r3, [r7, #24]
 8011818:	e002      	b.n	8011820 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801181a:	f04f 33ff 	mov.w	r3, #4294967295
 801181e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011820:	69bb      	ldr	r3, [r7, #24]
	}
 8011822:	4618      	mov	r0, r3
 8011824:	3720      	adds	r7, #32
 8011826:	46bd      	mov	sp, r7
 8011828:	bd80      	pop	{r7, pc}
	...

0801182c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b088      	sub	sp, #32
 8011830:	af00      	add	r7, sp, #0
 8011832:	60f8      	str	r0, [r7, #12]
 8011834:	60b9      	str	r1, [r7, #8]
 8011836:	607a      	str	r2, [r7, #4]
 8011838:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801183a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801183c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801183e:	6879      	ldr	r1, [r7, #4]
 8011840:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8011844:	440b      	add	r3, r1
 8011846:	009b      	lsls	r3, r3, #2
 8011848:	4413      	add	r3, r2
 801184a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801184c:	69bb      	ldr	r3, [r7, #24]
 801184e:	f023 0307 	bic.w	r3, r3, #7
 8011852:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011854:	69bb      	ldr	r3, [r7, #24]
 8011856:	f003 0307 	and.w	r3, r3, #7
 801185a:	2b00      	cmp	r3, #0
 801185c:	d00d      	beq.n	801187a <prvInitialiseNewTask+0x4e>
	__asm volatile
 801185e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011862:	b672      	cpsid	i
 8011864:	f383 8811 	msr	BASEPRI, r3
 8011868:	f3bf 8f6f 	isb	sy
 801186c:	f3bf 8f4f 	dsb	sy
 8011870:	b662      	cpsie	i
 8011872:	617b      	str	r3, [r7, #20]
}
 8011874:	bf00      	nop
 8011876:	bf00      	nop
 8011878:	e7fd      	b.n	8011876 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d01f      	beq.n	80118c0 <prvInitialiseNewTask+0x94>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011880:	2300      	movs	r3, #0
 8011882:	61fb      	str	r3, [r7, #28]
 8011884:	e012      	b.n	80118ac <prvInitialiseNewTask+0x80>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011886:	68ba      	ldr	r2, [r7, #8]
 8011888:	69fb      	ldr	r3, [r7, #28]
 801188a:	4413      	add	r3, r2
 801188c:	7819      	ldrb	r1, [r3, #0]
 801188e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011890:	69fb      	ldr	r3, [r7, #28]
 8011892:	4413      	add	r3, r2
 8011894:	3334      	adds	r3, #52	@ 0x34
 8011896:	460a      	mov	r2, r1
 8011898:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801189a:	68ba      	ldr	r2, [r7, #8]
 801189c:	69fb      	ldr	r3, [r7, #28]
 801189e:	4413      	add	r3, r2
 80118a0:	781b      	ldrb	r3, [r3, #0]
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d006      	beq.n	80118b4 <prvInitialiseNewTask+0x88>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80118a6:	69fb      	ldr	r3, [r7, #28]
 80118a8:	3301      	adds	r3, #1
 80118aa:	61fb      	str	r3, [r7, #28]
 80118ac:	69fb      	ldr	r3, [r7, #28]
 80118ae:	2b0f      	cmp	r3, #15
 80118b0:	d9e9      	bls.n	8011886 <prvInitialiseNewTask+0x5a>
 80118b2:	e000      	b.n	80118b6 <prvInitialiseNewTask+0x8a>
			{
				break;
 80118b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80118b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118b8:	2200      	movs	r2, #0
 80118ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80118be:	e003      	b.n	80118c8 <prvInitialiseNewTask+0x9c>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80118c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118c2:	2200      	movs	r2, #0
 80118c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80118c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80118ca:	2b06      	cmp	r3, #6
 80118cc:	d901      	bls.n	80118d2 <prvInitialiseNewTask+0xa6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80118ce:	2306      	movs	r3, #6
 80118d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80118d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80118d6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80118d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80118dc:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80118de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118e0:	2200      	movs	r2, #0
 80118e2:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80118e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118e6:	3304      	adds	r3, #4
 80118e8:	4618      	mov	r0, r3
 80118ea:	f7fe fec7 	bl	801067c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80118ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118f0:	3318      	adds	r3, #24
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7fe fec2 	bl	801067c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80118f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80118fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80118fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011900:	f1c3 0207 	rsb	r2, r3, #7
 8011904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011906:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801190a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801190c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801190e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011910:	2200      	movs	r2, #0
 8011912:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011918:	2200      	movs	r2, #0
 801191a:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801191e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011920:	334c      	adds	r3, #76	@ 0x4c
 8011922:	224c      	movs	r2, #76	@ 0x4c
 8011924:	2100      	movs	r1, #0
 8011926:	4618      	mov	r0, r3
 8011928:	f001 fba8 	bl	801307c <memset>
 801192c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801192e:	4a0d      	ldr	r2, [pc, #52]	@ (8011964 <prvInitialiseNewTask+0x138>)
 8011930:	651a      	str	r2, [r3, #80]	@ 0x50
 8011932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011934:	4a0c      	ldr	r2, [pc, #48]	@ (8011968 <prvInitialiseNewTask+0x13c>)
 8011936:	655a      	str	r2, [r3, #84]	@ 0x54
 8011938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801193a:	4a0c      	ldr	r2, [pc, #48]	@ (801196c <prvInitialiseNewTask+0x140>)
 801193c:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801193e:	683a      	ldr	r2, [r7, #0]
 8011940:	68f9      	ldr	r1, [r7, #12]
 8011942:	69b8      	ldr	r0, [r7, #24]
 8011944:	f000 ff50 	bl	80127e8 <pxPortInitialiseStack>
 8011948:	4602      	mov	r2, r0
 801194a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801194c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801194e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011950:	2b00      	cmp	r3, #0
 8011952:	d002      	beq.n	801195a <prvInitialiseNewTask+0x12e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011958:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801195a:	bf00      	nop
 801195c:	3720      	adds	r7, #32
 801195e:	46bd      	mov	sp, r7
 8011960:	bd80      	pop	{r7, pc}
 8011962:	bf00      	nop
 8011964:	20004b78 	.word	0x20004b78
 8011968:	20004be0 	.word	0x20004be0
 801196c:	20004c48 	.word	0x20004c48

08011970 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011978:	f001 f848 	bl	8012a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801197c:	4b2a      	ldr	r3, [pc, #168]	@ (8011a28 <prvAddNewTaskToReadyList+0xb8>)
 801197e:	681b      	ldr	r3, [r3, #0]
 8011980:	3301      	adds	r3, #1
 8011982:	4a29      	ldr	r2, [pc, #164]	@ (8011a28 <prvAddNewTaskToReadyList+0xb8>)
 8011984:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011986:	4b29      	ldr	r3, [pc, #164]	@ (8011a2c <prvAddNewTaskToReadyList+0xbc>)
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d109      	bne.n	80119a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801198e:	4a27      	ldr	r2, [pc, #156]	@ (8011a2c <prvAddNewTaskToReadyList+0xbc>)
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011994:	4b24      	ldr	r3, [pc, #144]	@ (8011a28 <prvAddNewTaskToReadyList+0xb8>)
 8011996:	681b      	ldr	r3, [r3, #0]
 8011998:	2b01      	cmp	r3, #1
 801199a:	d110      	bne.n	80119be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801199c:	f000 fc1a 	bl	80121d4 <prvInitialiseTaskLists>
 80119a0:	e00d      	b.n	80119be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80119a2:	4b23      	ldr	r3, [pc, #140]	@ (8011a30 <prvAddNewTaskToReadyList+0xc0>)
 80119a4:	681b      	ldr	r3, [r3, #0]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d109      	bne.n	80119be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80119aa:	4b20      	ldr	r3, [pc, #128]	@ (8011a2c <prvAddNewTaskToReadyList+0xbc>)
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119b4:	429a      	cmp	r2, r3
 80119b6:	d802      	bhi.n	80119be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80119b8:	4a1c      	ldr	r2, [pc, #112]	@ (8011a2c <prvAddNewTaskToReadyList+0xbc>)
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80119be:	4b1d      	ldr	r3, [pc, #116]	@ (8011a34 <prvAddNewTaskToReadyList+0xc4>)
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	3301      	adds	r3, #1
 80119c4:	4a1b      	ldr	r2, [pc, #108]	@ (8011a34 <prvAddNewTaskToReadyList+0xc4>)
 80119c6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119cc:	2201      	movs	r2, #1
 80119ce:	409a      	lsls	r2, r3
 80119d0:	4b19      	ldr	r3, [pc, #100]	@ (8011a38 <prvAddNewTaskToReadyList+0xc8>)
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	4313      	orrs	r3, r2
 80119d6:	4a18      	ldr	r2, [pc, #96]	@ (8011a38 <prvAddNewTaskToReadyList+0xc8>)
 80119d8:	6013      	str	r3, [r2, #0]
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80119de:	4613      	mov	r3, r2
 80119e0:	009b      	lsls	r3, r3, #2
 80119e2:	4413      	add	r3, r2
 80119e4:	009b      	lsls	r3, r3, #2
 80119e6:	4a15      	ldr	r2, [pc, #84]	@ (8011a3c <prvAddNewTaskToReadyList+0xcc>)
 80119e8:	441a      	add	r2, r3
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	3304      	adds	r3, #4
 80119ee:	4619      	mov	r1, r3
 80119f0:	4610      	mov	r0, r2
 80119f2:	f7fe fe50 	bl	8010696 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80119f6:	f001 f83f 	bl	8012a78 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80119fa:	4b0d      	ldr	r3, [pc, #52]	@ (8011a30 <prvAddNewTaskToReadyList+0xc0>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d00e      	beq.n	8011a20 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011a02:	4b0a      	ldr	r3, [pc, #40]	@ (8011a2c <prvAddNewTaskToReadyList+0xbc>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d207      	bcs.n	8011a20 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011a10:	4b0b      	ldr	r3, [pc, #44]	@ (8011a40 <prvAddNewTaskToReadyList+0xd0>)
 8011a12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a16:	601a      	str	r2, [r3, #0]
 8011a18:	f3bf 8f4f 	dsb	sy
 8011a1c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011a20:	bf00      	nop
 8011a22:	3708      	adds	r7, #8
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd80      	pop	{r7, pc}
 8011a28:	20000f2c 	.word	0x20000f2c
 8011a2c:	20000e2c 	.word	0x20000e2c
 8011a30:	20000f38 	.word	0x20000f38
 8011a34:	20000f48 	.word	0x20000f48
 8011a38:	20000f34 	.word	0x20000f34
 8011a3c:	20000e30 	.word	0x20000e30
 8011a40:	e000ed04 	.word	0xe000ed04

08011a44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011a44:	b580      	push	{r7, lr}
 8011a46:	b084      	sub	sp, #16
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d01a      	beq.n	8011a8c <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011a56:	4b15      	ldr	r3, [pc, #84]	@ (8011aac <vTaskDelay+0x68>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d00d      	beq.n	8011a7a <vTaskDelay+0x36>
	__asm volatile
 8011a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a62:	b672      	cpsid	i
 8011a64:	f383 8811 	msr	BASEPRI, r3
 8011a68:	f3bf 8f6f 	isb	sy
 8011a6c:	f3bf 8f4f 	dsb	sy
 8011a70:	b662      	cpsie	i
 8011a72:	60bb      	str	r3, [r7, #8]
}
 8011a74:	bf00      	nop
 8011a76:	bf00      	nop
 8011a78:	e7fd      	b.n	8011a76 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8011a7a:	f000 f889 	bl	8011b90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011a7e:	2100      	movs	r1, #0
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f000 fe4b 	bl	801271c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011a86:	f000 f891 	bl	8011bac <xTaskResumeAll>
 8011a8a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d107      	bne.n	8011aa2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8011a92:	4b07      	ldr	r3, [pc, #28]	@ (8011ab0 <vTaskDelay+0x6c>)
 8011a94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a98:	601a      	str	r2, [r3, #0]
 8011a9a:	f3bf 8f4f 	dsb	sy
 8011a9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011aa2:	bf00      	nop
 8011aa4:	3710      	adds	r7, #16
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}
 8011aaa:	bf00      	nop
 8011aac:	20000f54 	.word	0x20000f54
 8011ab0:	e000ed04 	.word	0xe000ed04

08011ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b08a      	sub	sp, #40	@ 0x28
 8011ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011aba:	2300      	movs	r3, #0
 8011abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011abe:	2300      	movs	r3, #0
 8011ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011ac2:	463a      	mov	r2, r7
 8011ac4:	1d39      	adds	r1, r7, #4
 8011ac6:	f107 0308 	add.w	r3, r7, #8
 8011aca:	4618      	mov	r0, r3
 8011acc:	f7ef f852 	bl	8000b74 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011ad0:	6839      	ldr	r1, [r7, #0]
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	68ba      	ldr	r2, [r7, #8]
 8011ad6:	9202      	str	r2, [sp, #8]
 8011ad8:	9301      	str	r3, [sp, #4]
 8011ada:	2300      	movs	r3, #0
 8011adc:	9300      	str	r3, [sp, #0]
 8011ade:	2300      	movs	r3, #0
 8011ae0:	460a      	mov	r2, r1
 8011ae2:	4923      	ldr	r1, [pc, #140]	@ (8011b70 <vTaskStartScheduler+0xbc>)
 8011ae4:	4823      	ldr	r0, [pc, #140]	@ (8011b74 <vTaskStartScheduler+0xc0>)
 8011ae6:	f7ff fdf5 	bl	80116d4 <xTaskCreateStatic>
 8011aea:	4603      	mov	r3, r0
 8011aec:	4a22      	ldr	r2, [pc, #136]	@ (8011b78 <vTaskStartScheduler+0xc4>)
 8011aee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011af0:	4b21      	ldr	r3, [pc, #132]	@ (8011b78 <vTaskStartScheduler+0xc4>)
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	d002      	beq.n	8011afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011af8:	2301      	movs	r3, #1
 8011afa:	617b      	str	r3, [r7, #20]
 8011afc:	e001      	b.n	8011b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011afe:	2300      	movs	r3, #0
 8011b00:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d11d      	bne.n	8011b44 <vTaskStartScheduler+0x90>
	__asm volatile
 8011b08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b0c:	b672      	cpsid	i
 8011b0e:	f383 8811 	msr	BASEPRI, r3
 8011b12:	f3bf 8f6f 	isb	sy
 8011b16:	f3bf 8f4f 	dsb	sy
 8011b1a:	b662      	cpsie	i
 8011b1c:	613b      	str	r3, [r7, #16]
}
 8011b1e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011b20:	4b16      	ldr	r3, [pc, #88]	@ (8011b7c <vTaskStartScheduler+0xc8>)
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	334c      	adds	r3, #76	@ 0x4c
 8011b26:	4a16      	ldr	r2, [pc, #88]	@ (8011b80 <vTaskStartScheduler+0xcc>)
 8011b28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011b2a:	4b16      	ldr	r3, [pc, #88]	@ (8011b84 <vTaskStartScheduler+0xd0>)
 8011b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011b32:	4b15      	ldr	r3, [pc, #84]	@ (8011b88 <vTaskStartScheduler+0xd4>)
 8011b34:	2201      	movs	r2, #1
 8011b36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011b38:	4b14      	ldr	r3, [pc, #80]	@ (8011b8c <vTaskStartScheduler+0xd8>)
 8011b3a:	2200      	movs	r2, #0
 8011b3c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011b3e:	f000 fee7 	bl	8012910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011b42:	e011      	b.n	8011b68 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011b44:	697b      	ldr	r3, [r7, #20]
 8011b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b4a:	d10d      	bne.n	8011b68 <vTaskStartScheduler+0xb4>
	__asm volatile
 8011b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b50:	b672      	cpsid	i
 8011b52:	f383 8811 	msr	BASEPRI, r3
 8011b56:	f3bf 8f6f 	isb	sy
 8011b5a:	f3bf 8f4f 	dsb	sy
 8011b5e:	b662      	cpsie	i
 8011b60:	60fb      	str	r3, [r7, #12]
}
 8011b62:	bf00      	nop
 8011b64:	bf00      	nop
 8011b66:	e7fd      	b.n	8011b64 <vTaskStartScheduler+0xb0>
}
 8011b68:	bf00      	nop
 8011b6a:	3718      	adds	r7, #24
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	08013bb8 	.word	0x08013bb8
 8011b74:	080121a5 	.word	0x080121a5
 8011b78:	20000f50 	.word	0x20000f50
 8011b7c:	20000e2c 	.word	0x20000e2c
 8011b80:	20000044 	.word	0x20000044
 8011b84:	20000f4c 	.word	0x20000f4c
 8011b88:	20000f38 	.word	0x20000f38
 8011b8c:	20000f30 	.word	0x20000f30

08011b90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011b90:	b480      	push	{r7}
 8011b92:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011b94:	4b04      	ldr	r3, [pc, #16]	@ (8011ba8 <vTaskSuspendAll+0x18>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	3301      	adds	r3, #1
 8011b9a:	4a03      	ldr	r2, [pc, #12]	@ (8011ba8 <vTaskSuspendAll+0x18>)
 8011b9c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011b9e:	bf00      	nop
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr
 8011ba8:	20000f54 	.word	0x20000f54

08011bac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011bac:	b580      	push	{r7, lr}
 8011bae:	b084      	sub	sp, #16
 8011bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011bba:	4b43      	ldr	r3, [pc, #268]	@ (8011cc8 <xTaskResumeAll+0x11c>)
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d10d      	bne.n	8011bde <xTaskResumeAll+0x32>
	__asm volatile
 8011bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011bc6:	b672      	cpsid	i
 8011bc8:	f383 8811 	msr	BASEPRI, r3
 8011bcc:	f3bf 8f6f 	isb	sy
 8011bd0:	f3bf 8f4f 	dsb	sy
 8011bd4:	b662      	cpsie	i
 8011bd6:	603b      	str	r3, [r7, #0]
}
 8011bd8:	bf00      	nop
 8011bda:	bf00      	nop
 8011bdc:	e7fd      	b.n	8011bda <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011bde:	f000 ff15 	bl	8012a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011be2:	4b39      	ldr	r3, [pc, #228]	@ (8011cc8 <xTaskResumeAll+0x11c>)
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	3b01      	subs	r3, #1
 8011be8:	4a37      	ldr	r2, [pc, #220]	@ (8011cc8 <xTaskResumeAll+0x11c>)
 8011bea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011bec:	4b36      	ldr	r3, [pc, #216]	@ (8011cc8 <xTaskResumeAll+0x11c>)
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	2b00      	cmp	r3, #0
 8011bf2:	d161      	bne.n	8011cb8 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011bf4:	4b35      	ldr	r3, [pc, #212]	@ (8011ccc <xTaskResumeAll+0x120>)
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d05d      	beq.n	8011cb8 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011bfc:	e02e      	b.n	8011c5c <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bfe:	4b34      	ldr	r3, [pc, #208]	@ (8011cd0 <xTaskResumeAll+0x124>)
 8011c00:	68db      	ldr	r3, [r3, #12]
 8011c02:	68db      	ldr	r3, [r3, #12]
 8011c04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	3318      	adds	r3, #24
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f7fe fda0 	bl	8010750 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	3304      	adds	r3, #4
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7fe fd9b 	bl	8010750 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c1e:	2201      	movs	r2, #1
 8011c20:	409a      	lsls	r2, r3
 8011c22:	4b2c      	ldr	r3, [pc, #176]	@ (8011cd4 <xTaskResumeAll+0x128>)
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	4313      	orrs	r3, r2
 8011c28:	4a2a      	ldr	r2, [pc, #168]	@ (8011cd4 <xTaskResumeAll+0x128>)
 8011c2a:	6013      	str	r3, [r2, #0]
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c30:	4613      	mov	r3, r2
 8011c32:	009b      	lsls	r3, r3, #2
 8011c34:	4413      	add	r3, r2
 8011c36:	009b      	lsls	r3, r3, #2
 8011c38:	4a27      	ldr	r2, [pc, #156]	@ (8011cd8 <xTaskResumeAll+0x12c>)
 8011c3a:	441a      	add	r2, r3
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	3304      	adds	r3, #4
 8011c40:	4619      	mov	r1, r3
 8011c42:	4610      	mov	r0, r2
 8011c44:	f7fe fd27 	bl	8010696 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011c4c:	4b23      	ldr	r3, [pc, #140]	@ (8011cdc <xTaskResumeAll+0x130>)
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c52:	429a      	cmp	r2, r3
 8011c54:	d302      	bcc.n	8011c5c <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 8011c56:	4b22      	ldr	r3, [pc, #136]	@ (8011ce0 <xTaskResumeAll+0x134>)
 8011c58:	2201      	movs	r2, #1
 8011c5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011c5c:	4b1c      	ldr	r3, [pc, #112]	@ (8011cd0 <xTaskResumeAll+0x124>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d1cc      	bne.n	8011bfe <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d001      	beq.n	8011c6e <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011c6a:	f000 fb59 	bl	8012320 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8011ce4 <xTaskResumeAll+0x138>)
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d010      	beq.n	8011c9c <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011c7a:	f000 f859 	bl	8011d30 <xTaskIncrementTick>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d002      	beq.n	8011c8a <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8011c84:	4b16      	ldr	r3, [pc, #88]	@ (8011ce0 <xTaskResumeAll+0x134>)
 8011c86:	2201      	movs	r2, #1
 8011c88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	3b01      	subs	r3, #1
 8011c8e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d1f1      	bne.n	8011c7a <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8011c96:	4b13      	ldr	r3, [pc, #76]	@ (8011ce4 <xTaskResumeAll+0x138>)
 8011c98:	2200      	movs	r2, #0
 8011c9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011c9c:	4b10      	ldr	r3, [pc, #64]	@ (8011ce0 <xTaskResumeAll+0x134>)
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d009      	beq.n	8011cb8 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011ca4:	2301      	movs	r3, #1
 8011ca6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8011ce8 <xTaskResumeAll+0x13c>)
 8011caa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011cae:	601a      	str	r2, [r3, #0]
 8011cb0:	f3bf 8f4f 	dsb	sy
 8011cb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011cb8:	f000 fede 	bl	8012a78 <vPortExitCritical>

	return xAlreadyYielded;
 8011cbc:	68bb      	ldr	r3, [r7, #8]
}
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	3710      	adds	r7, #16
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	bd80      	pop	{r7, pc}
 8011cc6:	bf00      	nop
 8011cc8:	20000f54 	.word	0x20000f54
 8011ccc:	20000f2c 	.word	0x20000f2c
 8011cd0:	20000eec 	.word	0x20000eec
 8011cd4:	20000f34 	.word	0x20000f34
 8011cd8:	20000e30 	.word	0x20000e30
 8011cdc:	20000e2c 	.word	0x20000e2c
 8011ce0:	20000f40 	.word	0x20000f40
 8011ce4:	20000f3c 	.word	0x20000f3c
 8011ce8:	e000ed04 	.word	0xe000ed04

08011cec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011cec:	b480      	push	{r7}
 8011cee:	b083      	sub	sp, #12
 8011cf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8011cf2:	4b05      	ldr	r3, [pc, #20]	@ (8011d08 <xTaskGetTickCount+0x1c>)
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011cf8:	687b      	ldr	r3, [r7, #4]
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	370c      	adds	r7, #12
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d04:	4770      	bx	lr
 8011d06:	bf00      	nop
 8011d08:	20000f30 	.word	0x20000f30

08011d0c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d12:	f000 ff63 	bl	8012bdc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8011d16:	2300      	movs	r3, #0
 8011d18:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8011d1a:	4b04      	ldr	r3, [pc, #16]	@ (8011d2c <xTaskGetTickCountFromISR+0x20>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d20:	683b      	ldr	r3, [r7, #0]
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3708      	adds	r7, #8
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
 8011d2a:	bf00      	nop
 8011d2c:	20000f30 	.word	0x20000f30

08011d30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b086      	sub	sp, #24
 8011d34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8011d36:	2300      	movs	r3, #0
 8011d38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011d3a:	4b50      	ldr	r3, [pc, #320]	@ (8011e7c <xTaskIncrementTick+0x14c>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	f040 808b 	bne.w	8011e5a <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011d44:	4b4e      	ldr	r3, [pc, #312]	@ (8011e80 <xTaskIncrementTick+0x150>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	3301      	adds	r3, #1
 8011d4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011d4c:	4a4c      	ldr	r2, [pc, #304]	@ (8011e80 <xTaskIncrementTick+0x150>)
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d123      	bne.n	8011da0 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8011d58:	4b4a      	ldr	r3, [pc, #296]	@ (8011e84 <xTaskIncrementTick+0x154>)
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d00d      	beq.n	8011d7e <xTaskIncrementTick+0x4e>
	__asm volatile
 8011d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d66:	b672      	cpsid	i
 8011d68:	f383 8811 	msr	BASEPRI, r3
 8011d6c:	f3bf 8f6f 	isb	sy
 8011d70:	f3bf 8f4f 	dsb	sy
 8011d74:	b662      	cpsie	i
 8011d76:	603b      	str	r3, [r7, #0]
}
 8011d78:	bf00      	nop
 8011d7a:	bf00      	nop
 8011d7c:	e7fd      	b.n	8011d7a <xTaskIncrementTick+0x4a>
 8011d7e:	4b41      	ldr	r3, [pc, #260]	@ (8011e84 <xTaskIncrementTick+0x154>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	60fb      	str	r3, [r7, #12]
 8011d84:	4b40      	ldr	r3, [pc, #256]	@ (8011e88 <xTaskIncrementTick+0x158>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	4a3e      	ldr	r2, [pc, #248]	@ (8011e84 <xTaskIncrementTick+0x154>)
 8011d8a:	6013      	str	r3, [r2, #0]
 8011d8c:	4a3e      	ldr	r2, [pc, #248]	@ (8011e88 <xTaskIncrementTick+0x158>)
 8011d8e:	68fb      	ldr	r3, [r7, #12]
 8011d90:	6013      	str	r3, [r2, #0]
 8011d92:	4b3e      	ldr	r3, [pc, #248]	@ (8011e8c <xTaskIncrementTick+0x15c>)
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	3301      	adds	r3, #1
 8011d98:	4a3c      	ldr	r2, [pc, #240]	@ (8011e8c <xTaskIncrementTick+0x15c>)
 8011d9a:	6013      	str	r3, [r2, #0]
 8011d9c:	f000 fac0 	bl	8012320 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8011da0:	4b3b      	ldr	r3, [pc, #236]	@ (8011e90 <xTaskIncrementTick+0x160>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	693a      	ldr	r2, [r7, #16]
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d348      	bcc.n	8011e3c <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011daa:	4b36      	ldr	r3, [pc, #216]	@ (8011e84 <xTaskIncrementTick+0x154>)
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d104      	bne.n	8011dbe <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011db4:	4b36      	ldr	r3, [pc, #216]	@ (8011e90 <xTaskIncrementTick+0x160>)
 8011db6:	f04f 32ff 	mov.w	r2, #4294967295
 8011dba:	601a      	str	r2, [r3, #0]
					break;
 8011dbc:	e03e      	b.n	8011e3c <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dbe:	4b31      	ldr	r3, [pc, #196]	@ (8011e84 <xTaskIncrementTick+0x154>)
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	68db      	ldr	r3, [r3, #12]
 8011dc4:	68db      	ldr	r3, [r3, #12]
 8011dc6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011dc8:	68bb      	ldr	r3, [r7, #8]
 8011dca:	685b      	ldr	r3, [r3, #4]
 8011dcc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011dce:	693a      	ldr	r2, [r7, #16]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	429a      	cmp	r2, r3
 8011dd4:	d203      	bcs.n	8011dde <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011dd6:	4a2e      	ldr	r2, [pc, #184]	@ (8011e90 <xTaskIncrementTick+0x160>)
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011ddc:	e02e      	b.n	8011e3c <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	3304      	adds	r3, #4
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fe fcb4 	bl	8010750 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011de8:	68bb      	ldr	r3, [r7, #8]
 8011dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d004      	beq.n	8011dfa <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	3318      	adds	r3, #24
 8011df4:	4618      	mov	r0, r3
 8011df6:	f7fe fcab 	bl	8010750 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011dfe:	2201      	movs	r2, #1
 8011e00:	409a      	lsls	r2, r3
 8011e02:	4b24      	ldr	r3, [pc, #144]	@ (8011e94 <xTaskIncrementTick+0x164>)
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	4313      	orrs	r3, r2
 8011e08:	4a22      	ldr	r2, [pc, #136]	@ (8011e94 <xTaskIncrementTick+0x164>)
 8011e0a:	6013      	str	r3, [r2, #0]
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e10:	4613      	mov	r3, r2
 8011e12:	009b      	lsls	r3, r3, #2
 8011e14:	4413      	add	r3, r2
 8011e16:	009b      	lsls	r3, r3, #2
 8011e18:	4a1f      	ldr	r2, [pc, #124]	@ (8011e98 <xTaskIncrementTick+0x168>)
 8011e1a:	441a      	add	r2, r3
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	3304      	adds	r3, #4
 8011e20:	4619      	mov	r1, r3
 8011e22:	4610      	mov	r0, r2
 8011e24:	f7fe fc37 	bl	8010696 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011e28:	68bb      	ldr	r3, [r7, #8]
 8011e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8011e9c <xTaskIncrementTick+0x16c>)
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011e32:	429a      	cmp	r2, r3
 8011e34:	d3b9      	bcc.n	8011daa <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8011e36:	2301      	movs	r3, #1
 8011e38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011e3a:	e7b6      	b.n	8011daa <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011e3c:	4b17      	ldr	r3, [pc, #92]	@ (8011e9c <xTaskIncrementTick+0x16c>)
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011e42:	4915      	ldr	r1, [pc, #84]	@ (8011e98 <xTaskIncrementTick+0x168>)
 8011e44:	4613      	mov	r3, r2
 8011e46:	009b      	lsls	r3, r3, #2
 8011e48:	4413      	add	r3, r2
 8011e4a:	009b      	lsls	r3, r3, #2
 8011e4c:	440b      	add	r3, r1
 8011e4e:	681b      	ldr	r3, [r3, #0]
 8011e50:	2b01      	cmp	r3, #1
 8011e52:	d907      	bls.n	8011e64 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8011e54:	2301      	movs	r3, #1
 8011e56:	617b      	str	r3, [r7, #20]
 8011e58:	e004      	b.n	8011e64 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8011e5a:	4b11      	ldr	r3, [pc, #68]	@ (8011ea0 <xTaskIncrementTick+0x170>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	3301      	adds	r3, #1
 8011e60:	4a0f      	ldr	r2, [pc, #60]	@ (8011ea0 <xTaskIncrementTick+0x170>)
 8011e62:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011e64:	4b0f      	ldr	r3, [pc, #60]	@ (8011ea4 <xTaskIncrementTick+0x174>)
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d001      	beq.n	8011e70 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8011e6c:	2301      	movs	r3, #1
 8011e6e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011e70:	697b      	ldr	r3, [r7, #20]
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3718      	adds	r7, #24
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	20000f54 	.word	0x20000f54
 8011e80:	20000f30 	.word	0x20000f30
 8011e84:	20000ee4 	.word	0x20000ee4
 8011e88:	20000ee8 	.word	0x20000ee8
 8011e8c:	20000f44 	.word	0x20000f44
 8011e90:	20000f4c 	.word	0x20000f4c
 8011e94:	20000f34 	.word	0x20000f34
 8011e98:	20000e30 	.word	0x20000e30
 8011e9c:	20000e2c 	.word	0x20000e2c
 8011ea0:	20000f3c 	.word	0x20000f3c
 8011ea4:	20000f40 	.word	0x20000f40

08011ea8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011ea8:	b480      	push	{r7}
 8011eaa:	b087      	sub	sp, #28
 8011eac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8011eae:	4b2b      	ldr	r3, [pc, #172]	@ (8011f5c <vTaskSwitchContext+0xb4>)
 8011eb0:	681b      	ldr	r3, [r3, #0]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d003      	beq.n	8011ebe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8011f60 <vTaskSwitchContext+0xb8>)
 8011eb8:	2201      	movs	r2, #1
 8011eba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011ebc:	e047      	b.n	8011f4e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8011ebe:	4b28      	ldr	r3, [pc, #160]	@ (8011f60 <vTaskSwitchContext+0xb8>)
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011ec4:	4b27      	ldr	r3, [pc, #156]	@ (8011f64 <vTaskSwitchContext+0xbc>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	fab3 f383 	clz	r3, r3
 8011ed0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8011ed2:	7afb      	ldrb	r3, [r7, #11]
 8011ed4:	f1c3 031f 	rsb	r3, r3, #31
 8011ed8:	617b      	str	r3, [r7, #20]
 8011eda:	4923      	ldr	r1, [pc, #140]	@ (8011f68 <vTaskSwitchContext+0xc0>)
 8011edc:	697a      	ldr	r2, [r7, #20]
 8011ede:	4613      	mov	r3, r2
 8011ee0:	009b      	lsls	r3, r3, #2
 8011ee2:	4413      	add	r3, r2
 8011ee4:	009b      	lsls	r3, r3, #2
 8011ee6:	440b      	add	r3, r1
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d10d      	bne.n	8011f0a <vTaskSwitchContext+0x62>
	__asm volatile
 8011eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ef2:	b672      	cpsid	i
 8011ef4:	f383 8811 	msr	BASEPRI, r3
 8011ef8:	f3bf 8f6f 	isb	sy
 8011efc:	f3bf 8f4f 	dsb	sy
 8011f00:	b662      	cpsie	i
 8011f02:	607b      	str	r3, [r7, #4]
}
 8011f04:	bf00      	nop
 8011f06:	bf00      	nop
 8011f08:	e7fd      	b.n	8011f06 <vTaskSwitchContext+0x5e>
 8011f0a:	697a      	ldr	r2, [r7, #20]
 8011f0c:	4613      	mov	r3, r2
 8011f0e:	009b      	lsls	r3, r3, #2
 8011f10:	4413      	add	r3, r2
 8011f12:	009b      	lsls	r3, r3, #2
 8011f14:	4a14      	ldr	r2, [pc, #80]	@ (8011f68 <vTaskSwitchContext+0xc0>)
 8011f16:	4413      	add	r3, r2
 8011f18:	613b      	str	r3, [r7, #16]
 8011f1a:	693b      	ldr	r3, [r7, #16]
 8011f1c:	685b      	ldr	r3, [r3, #4]
 8011f1e:	685a      	ldr	r2, [r3, #4]
 8011f20:	693b      	ldr	r3, [r7, #16]
 8011f22:	605a      	str	r2, [r3, #4]
 8011f24:	693b      	ldr	r3, [r7, #16]
 8011f26:	685a      	ldr	r2, [r3, #4]
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	3308      	adds	r3, #8
 8011f2c:	429a      	cmp	r2, r3
 8011f2e:	d104      	bne.n	8011f3a <vTaskSwitchContext+0x92>
 8011f30:	693b      	ldr	r3, [r7, #16]
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	685a      	ldr	r2, [r3, #4]
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	605a      	str	r2, [r3, #4]
 8011f3a:	693b      	ldr	r3, [r7, #16]
 8011f3c:	685b      	ldr	r3, [r3, #4]
 8011f3e:	68db      	ldr	r3, [r3, #12]
 8011f40:	4a0a      	ldr	r2, [pc, #40]	@ (8011f6c <vTaskSwitchContext+0xc4>)
 8011f42:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011f44:	4b09      	ldr	r3, [pc, #36]	@ (8011f6c <vTaskSwitchContext+0xc4>)
 8011f46:	681b      	ldr	r3, [r3, #0]
 8011f48:	334c      	adds	r3, #76	@ 0x4c
 8011f4a:	4a09      	ldr	r2, [pc, #36]	@ (8011f70 <vTaskSwitchContext+0xc8>)
 8011f4c:	6013      	str	r3, [r2, #0]
}
 8011f4e:	bf00      	nop
 8011f50:	371c      	adds	r7, #28
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr
 8011f5a:	bf00      	nop
 8011f5c:	20000f54 	.word	0x20000f54
 8011f60:	20000f40 	.word	0x20000f40
 8011f64:	20000f34 	.word	0x20000f34
 8011f68:	20000e30 	.word	0x20000e30
 8011f6c:	20000e2c 	.word	0x20000e2c
 8011f70:	20000044 	.word	0x20000044

08011f74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b084      	sub	sp, #16
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d10d      	bne.n	8011fa0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 8011f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011f88:	b672      	cpsid	i
 8011f8a:	f383 8811 	msr	BASEPRI, r3
 8011f8e:	f3bf 8f6f 	isb	sy
 8011f92:	f3bf 8f4f 	dsb	sy
 8011f96:	b662      	cpsie	i
 8011f98:	60fb      	str	r3, [r7, #12]
}
 8011f9a:	bf00      	nop
 8011f9c:	bf00      	nop
 8011f9e:	e7fd      	b.n	8011f9c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011fa0:	4b07      	ldr	r3, [pc, #28]	@ (8011fc0 <vTaskPlaceOnEventList+0x4c>)
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	3318      	adds	r3, #24
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	6878      	ldr	r0, [r7, #4]
 8011faa:	f7fe fb98 	bl	80106de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011fae:	2101      	movs	r1, #1
 8011fb0:	6838      	ldr	r0, [r7, #0]
 8011fb2:	f000 fbb3 	bl	801271c <prvAddCurrentTaskToDelayedList>
}
 8011fb6:	bf00      	nop
 8011fb8:	3710      	adds	r7, #16
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}
 8011fbe:	bf00      	nop
 8011fc0:	20000e2c 	.word	0x20000e2c

08011fc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b086      	sub	sp, #24
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	68db      	ldr	r3, [r3, #12]
 8011fd0:	68db      	ldr	r3, [r3, #12]
 8011fd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011fd4:	693b      	ldr	r3, [r7, #16]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d10d      	bne.n	8011ff6 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8011fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011fde:	b672      	cpsid	i
 8011fe0:	f383 8811 	msr	BASEPRI, r3
 8011fe4:	f3bf 8f6f 	isb	sy
 8011fe8:	f3bf 8f4f 	dsb	sy
 8011fec:	b662      	cpsie	i
 8011fee:	60fb      	str	r3, [r7, #12]
}
 8011ff0:	bf00      	nop
 8011ff2:	bf00      	nop
 8011ff4:	e7fd      	b.n	8011ff2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011ff6:	693b      	ldr	r3, [r7, #16]
 8011ff8:	3318      	adds	r3, #24
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7fe fba8 	bl	8010750 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012000:	4b1d      	ldr	r3, [pc, #116]	@ (8012078 <xTaskRemoveFromEventList+0xb4>)
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d11c      	bne.n	8012042 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012008:	693b      	ldr	r3, [r7, #16]
 801200a:	3304      	adds	r3, #4
 801200c:	4618      	mov	r0, r3
 801200e:	f7fe fb9f 	bl	8010750 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012012:	693b      	ldr	r3, [r7, #16]
 8012014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012016:	2201      	movs	r2, #1
 8012018:	409a      	lsls	r2, r3
 801201a:	4b18      	ldr	r3, [pc, #96]	@ (801207c <xTaskRemoveFromEventList+0xb8>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	4313      	orrs	r3, r2
 8012020:	4a16      	ldr	r2, [pc, #88]	@ (801207c <xTaskRemoveFromEventList+0xb8>)
 8012022:	6013      	str	r3, [r2, #0]
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012028:	4613      	mov	r3, r2
 801202a:	009b      	lsls	r3, r3, #2
 801202c:	4413      	add	r3, r2
 801202e:	009b      	lsls	r3, r3, #2
 8012030:	4a13      	ldr	r2, [pc, #76]	@ (8012080 <xTaskRemoveFromEventList+0xbc>)
 8012032:	441a      	add	r2, r3
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	3304      	adds	r3, #4
 8012038:	4619      	mov	r1, r3
 801203a:	4610      	mov	r0, r2
 801203c:	f7fe fb2b 	bl	8010696 <vListInsertEnd>
 8012040:	e005      	b.n	801204e <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012042:	693b      	ldr	r3, [r7, #16]
 8012044:	3318      	adds	r3, #24
 8012046:	4619      	mov	r1, r3
 8012048:	480e      	ldr	r0, [pc, #56]	@ (8012084 <xTaskRemoveFromEventList+0xc0>)
 801204a:	f7fe fb24 	bl	8010696 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801204e:	693b      	ldr	r3, [r7, #16]
 8012050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012052:	4b0d      	ldr	r3, [pc, #52]	@ (8012088 <xTaskRemoveFromEventList+0xc4>)
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012058:	429a      	cmp	r2, r3
 801205a:	d905      	bls.n	8012068 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801205c:	2301      	movs	r3, #1
 801205e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012060:	4b0a      	ldr	r3, [pc, #40]	@ (801208c <xTaskRemoveFromEventList+0xc8>)
 8012062:	2201      	movs	r2, #1
 8012064:	601a      	str	r2, [r3, #0]
 8012066:	e001      	b.n	801206c <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8012068:	2300      	movs	r3, #0
 801206a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801206c:	697b      	ldr	r3, [r7, #20]
}
 801206e:	4618      	mov	r0, r3
 8012070:	3718      	adds	r7, #24
 8012072:	46bd      	mov	sp, r7
 8012074:	bd80      	pop	{r7, pc}
 8012076:	bf00      	nop
 8012078:	20000f54 	.word	0x20000f54
 801207c:	20000f34 	.word	0x20000f34
 8012080:	20000e30 	.word	0x20000e30
 8012084:	20000eec 	.word	0x20000eec
 8012088:	20000e2c 	.word	0x20000e2c
 801208c:	20000f40 	.word	0x20000f40

08012090 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012090:	b480      	push	{r7}
 8012092:	b083      	sub	sp, #12
 8012094:	af00      	add	r7, sp, #0
 8012096:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012098:	4b06      	ldr	r3, [pc, #24]	@ (80120b4 <vTaskInternalSetTimeOutState+0x24>)
 801209a:	681a      	ldr	r2, [r3, #0]
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80120a0:	4b05      	ldr	r3, [pc, #20]	@ (80120b8 <vTaskInternalSetTimeOutState+0x28>)
 80120a2:	681a      	ldr	r2, [r3, #0]
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	605a      	str	r2, [r3, #4]
}
 80120a8:	bf00      	nop
 80120aa:	370c      	adds	r7, #12
 80120ac:	46bd      	mov	sp, r7
 80120ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120b2:	4770      	bx	lr
 80120b4:	20000f44 	.word	0x20000f44
 80120b8:	20000f30 	.word	0x20000f30

080120bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b088      	sub	sp, #32
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d10d      	bne.n	80120e8 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80120cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120d0:	b672      	cpsid	i
 80120d2:	f383 8811 	msr	BASEPRI, r3
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	f3bf 8f4f 	dsb	sy
 80120de:	b662      	cpsie	i
 80120e0:	613b      	str	r3, [r7, #16]
}
 80120e2:	bf00      	nop
 80120e4:	bf00      	nop
 80120e6:	e7fd      	b.n	80120e4 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d10d      	bne.n	801210a <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80120ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80120f2:	b672      	cpsid	i
 80120f4:	f383 8811 	msr	BASEPRI, r3
 80120f8:	f3bf 8f6f 	isb	sy
 80120fc:	f3bf 8f4f 	dsb	sy
 8012100:	b662      	cpsie	i
 8012102:	60fb      	str	r3, [r7, #12]
}
 8012104:	bf00      	nop
 8012106:	bf00      	nop
 8012108:	e7fd      	b.n	8012106 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 801210a:	f000 fc7f 	bl	8012a0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801210e:	4b1d      	ldr	r3, [pc, #116]	@ (8012184 <xTaskCheckForTimeOut+0xc8>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	685b      	ldr	r3, [r3, #4]
 8012118:	69ba      	ldr	r2, [r7, #24]
 801211a:	1ad3      	subs	r3, r2, r3
 801211c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801211e:	683b      	ldr	r3, [r7, #0]
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012126:	d102      	bne.n	801212e <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012128:	2300      	movs	r3, #0
 801212a:	61fb      	str	r3, [r7, #28]
 801212c:	e023      	b.n	8012176 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	4b15      	ldr	r3, [pc, #84]	@ (8012188 <xTaskCheckForTimeOut+0xcc>)
 8012134:	681b      	ldr	r3, [r3, #0]
 8012136:	429a      	cmp	r2, r3
 8012138:	d007      	beq.n	801214a <xTaskCheckForTimeOut+0x8e>
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	685b      	ldr	r3, [r3, #4]
 801213e:	69ba      	ldr	r2, [r7, #24]
 8012140:	429a      	cmp	r2, r3
 8012142:	d302      	bcc.n	801214a <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012144:	2301      	movs	r3, #1
 8012146:	61fb      	str	r3, [r7, #28]
 8012148:	e015      	b.n	8012176 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801214a:	683b      	ldr	r3, [r7, #0]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	697a      	ldr	r2, [r7, #20]
 8012150:	429a      	cmp	r2, r3
 8012152:	d20b      	bcs.n	801216c <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	681a      	ldr	r2, [r3, #0]
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	1ad2      	subs	r2, r2, r3
 801215c:	683b      	ldr	r3, [r7, #0]
 801215e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012160:	6878      	ldr	r0, [r7, #4]
 8012162:	f7ff ff95 	bl	8012090 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012166:	2300      	movs	r3, #0
 8012168:	61fb      	str	r3, [r7, #28]
 801216a:	e004      	b.n	8012176 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	2200      	movs	r2, #0
 8012170:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012172:	2301      	movs	r3, #1
 8012174:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012176:	f000 fc7f 	bl	8012a78 <vPortExitCritical>

	return xReturn;
 801217a:	69fb      	ldr	r3, [r7, #28]
}
 801217c:	4618      	mov	r0, r3
 801217e:	3720      	adds	r7, #32
 8012180:	46bd      	mov	sp, r7
 8012182:	bd80      	pop	{r7, pc}
 8012184:	20000f30 	.word	0x20000f30
 8012188:	20000f44 	.word	0x20000f44

0801218c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801218c:	b480      	push	{r7}
 801218e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012190:	4b03      	ldr	r3, [pc, #12]	@ (80121a0 <vTaskMissedYield+0x14>)
 8012192:	2201      	movs	r2, #1
 8012194:	601a      	str	r2, [r3, #0]
}
 8012196:	bf00      	nop
 8012198:	46bd      	mov	sp, r7
 801219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801219e:	4770      	bx	lr
 80121a0:	20000f40 	.word	0x20000f40

080121a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b082      	sub	sp, #8
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80121ac:	f000 f852 	bl	8012254 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80121b0:	4b06      	ldr	r3, [pc, #24]	@ (80121cc <prvIdleTask+0x28>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	2b01      	cmp	r3, #1
 80121b6:	d9f9      	bls.n	80121ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80121b8:	4b05      	ldr	r3, [pc, #20]	@ (80121d0 <prvIdleTask+0x2c>)
 80121ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80121be:	601a      	str	r2, [r3, #0]
 80121c0:	f3bf 8f4f 	dsb	sy
 80121c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80121c8:	e7f0      	b.n	80121ac <prvIdleTask+0x8>
 80121ca:	bf00      	nop
 80121cc:	20000e30 	.word	0x20000e30
 80121d0:	e000ed04 	.word	0xe000ed04

080121d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80121da:	2300      	movs	r3, #0
 80121dc:	607b      	str	r3, [r7, #4]
 80121de:	e00c      	b.n	80121fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	4613      	mov	r3, r2
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	4413      	add	r3, r2
 80121e8:	009b      	lsls	r3, r3, #2
 80121ea:	4a12      	ldr	r2, [pc, #72]	@ (8012234 <prvInitialiseTaskLists+0x60>)
 80121ec:	4413      	add	r3, r2
 80121ee:	4618      	mov	r0, r3
 80121f0:	f7fe fa24 	bl	801063c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	3301      	adds	r3, #1
 80121f8:	607b      	str	r3, [r7, #4]
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	2b06      	cmp	r3, #6
 80121fe:	d9ef      	bls.n	80121e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012200:	480d      	ldr	r0, [pc, #52]	@ (8012238 <prvInitialiseTaskLists+0x64>)
 8012202:	f7fe fa1b 	bl	801063c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012206:	480d      	ldr	r0, [pc, #52]	@ (801223c <prvInitialiseTaskLists+0x68>)
 8012208:	f7fe fa18 	bl	801063c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801220c:	480c      	ldr	r0, [pc, #48]	@ (8012240 <prvInitialiseTaskLists+0x6c>)
 801220e:	f7fe fa15 	bl	801063c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012212:	480c      	ldr	r0, [pc, #48]	@ (8012244 <prvInitialiseTaskLists+0x70>)
 8012214:	f7fe fa12 	bl	801063c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012218:	480b      	ldr	r0, [pc, #44]	@ (8012248 <prvInitialiseTaskLists+0x74>)
 801221a:	f7fe fa0f 	bl	801063c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801221e:	4b0b      	ldr	r3, [pc, #44]	@ (801224c <prvInitialiseTaskLists+0x78>)
 8012220:	4a05      	ldr	r2, [pc, #20]	@ (8012238 <prvInitialiseTaskLists+0x64>)
 8012222:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012224:	4b0a      	ldr	r3, [pc, #40]	@ (8012250 <prvInitialiseTaskLists+0x7c>)
 8012226:	4a05      	ldr	r2, [pc, #20]	@ (801223c <prvInitialiseTaskLists+0x68>)
 8012228:	601a      	str	r2, [r3, #0]
}
 801222a:	bf00      	nop
 801222c:	3708      	adds	r7, #8
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	20000e30 	.word	0x20000e30
 8012238:	20000ebc 	.word	0x20000ebc
 801223c:	20000ed0 	.word	0x20000ed0
 8012240:	20000eec 	.word	0x20000eec
 8012244:	20000f00 	.word	0x20000f00
 8012248:	20000f18 	.word	0x20000f18
 801224c:	20000ee4 	.word	0x20000ee4
 8012250:	20000ee8 	.word	0x20000ee8

08012254 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b082      	sub	sp, #8
 8012258:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801225a:	e019      	b.n	8012290 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801225c:	f000 fbd6 	bl	8012a0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012260:	4b10      	ldr	r3, [pc, #64]	@ (80122a4 <prvCheckTasksWaitingTermination+0x50>)
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	3304      	adds	r3, #4
 801226c:	4618      	mov	r0, r3
 801226e:	f7fe fa6f 	bl	8010750 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012272:	4b0d      	ldr	r3, [pc, #52]	@ (80122a8 <prvCheckTasksWaitingTermination+0x54>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	3b01      	subs	r3, #1
 8012278:	4a0b      	ldr	r2, [pc, #44]	@ (80122a8 <prvCheckTasksWaitingTermination+0x54>)
 801227a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801227c:	4b0b      	ldr	r3, [pc, #44]	@ (80122ac <prvCheckTasksWaitingTermination+0x58>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	3b01      	subs	r3, #1
 8012282:	4a0a      	ldr	r2, [pc, #40]	@ (80122ac <prvCheckTasksWaitingTermination+0x58>)
 8012284:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012286:	f000 fbf7 	bl	8012a78 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801228a:	6878      	ldr	r0, [r7, #4]
 801228c:	f000 f810 	bl	80122b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012290:	4b06      	ldr	r3, [pc, #24]	@ (80122ac <prvCheckTasksWaitingTermination+0x58>)
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d1e1      	bne.n	801225c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012298:	bf00      	nop
 801229a:	bf00      	nop
 801229c:	3708      	adds	r7, #8
 801229e:	46bd      	mov	sp, r7
 80122a0:	bd80      	pop	{r7, pc}
 80122a2:	bf00      	nop
 80122a4:	20000f00 	.word	0x20000f00
 80122a8:	20000f2c 	.word	0x20000f2c
 80122ac:	20000f14 	.word	0x20000f14

080122b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b084      	sub	sp, #16
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	334c      	adds	r3, #76	@ 0x4c
 80122bc:	4618      	mov	r0, r3
 80122be:	f000 fee5 	bl	801308c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d108      	bne.n	80122de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80122cc:	687b      	ldr	r3, [r7, #4]
 80122ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122d0:	4618      	mov	r0, r3
 80122d2:	f000 fd97 	bl	8012e04 <vPortFree>
				vPortFree( pxTCB );
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f000 fd94 	bl	8012e04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80122dc:	e01b      	b.n	8012316 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80122e4:	2b01      	cmp	r3, #1
 80122e6:	d103      	bne.n	80122f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f000 fd8b 	bl	8012e04 <vPortFree>
	}
 80122ee:	e012      	b.n	8012316 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 80122f6:	2b02      	cmp	r3, #2
 80122f8:	d00d      	beq.n	8012316 <prvDeleteTCB+0x66>
	__asm volatile
 80122fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80122fe:	b672      	cpsid	i
 8012300:	f383 8811 	msr	BASEPRI, r3
 8012304:	f3bf 8f6f 	isb	sy
 8012308:	f3bf 8f4f 	dsb	sy
 801230c:	b662      	cpsie	i
 801230e:	60fb      	str	r3, [r7, #12]
}
 8012310:	bf00      	nop
 8012312:	bf00      	nop
 8012314:	e7fd      	b.n	8012312 <prvDeleteTCB+0x62>
	}
 8012316:	bf00      	nop
 8012318:	3710      	adds	r7, #16
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}
	...

08012320 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012320:	b480      	push	{r7}
 8012322:	b083      	sub	sp, #12
 8012324:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012326:	4b0c      	ldr	r3, [pc, #48]	@ (8012358 <prvResetNextTaskUnblockTime+0x38>)
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	681b      	ldr	r3, [r3, #0]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d104      	bne.n	801233a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012330:	4b0a      	ldr	r3, [pc, #40]	@ (801235c <prvResetNextTaskUnblockTime+0x3c>)
 8012332:	f04f 32ff 	mov.w	r2, #4294967295
 8012336:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012338:	e008      	b.n	801234c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801233a:	4b07      	ldr	r3, [pc, #28]	@ (8012358 <prvResetNextTaskUnblockTime+0x38>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	68db      	ldr	r3, [r3, #12]
 8012340:	68db      	ldr	r3, [r3, #12]
 8012342:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	685b      	ldr	r3, [r3, #4]
 8012348:	4a04      	ldr	r2, [pc, #16]	@ (801235c <prvResetNextTaskUnblockTime+0x3c>)
 801234a:	6013      	str	r3, [r2, #0]
}
 801234c:	bf00      	nop
 801234e:	370c      	adds	r7, #12
 8012350:	46bd      	mov	sp, r7
 8012352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012356:	4770      	bx	lr
 8012358:	20000ee4 	.word	0x20000ee4
 801235c:	20000f4c 	.word	0x20000f4c

08012360 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012360:	b480      	push	{r7}
 8012362:	b083      	sub	sp, #12
 8012364:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012366:	4b0b      	ldr	r3, [pc, #44]	@ (8012394 <xTaskGetSchedulerState+0x34>)
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d102      	bne.n	8012374 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801236e:	2301      	movs	r3, #1
 8012370:	607b      	str	r3, [r7, #4]
 8012372:	e008      	b.n	8012386 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012374:	4b08      	ldr	r3, [pc, #32]	@ (8012398 <xTaskGetSchedulerState+0x38>)
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d102      	bne.n	8012382 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801237c:	2302      	movs	r3, #2
 801237e:	607b      	str	r3, [r7, #4]
 8012380:	e001      	b.n	8012386 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012382:	2300      	movs	r3, #0
 8012384:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012386:	687b      	ldr	r3, [r7, #4]
	}
 8012388:	4618      	mov	r0, r3
 801238a:	370c      	adds	r7, #12
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr
 8012394:	20000f38 	.word	0x20000f38
 8012398:	20000f54 	.word	0x20000f54

0801239c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801239c:	b580      	push	{r7, lr}
 801239e:	b084      	sub	sp, #16
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80123a8:	2300      	movs	r3, #0
 80123aa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d069      	beq.n	8012486 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123b6:	4b36      	ldr	r3, [pc, #216]	@ (8012490 <xTaskPriorityInherit+0xf4>)
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123bc:	429a      	cmp	r2, r3
 80123be:	d259      	bcs.n	8012474 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	699b      	ldr	r3, [r3, #24]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	db06      	blt.n	80123d6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80123c8:	4b31      	ldr	r3, [pc, #196]	@ (8012490 <xTaskPriorityInherit+0xf4>)
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80123ce:	f1c3 0207 	rsb	r2, r3, #7
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	6959      	ldr	r1, [r3, #20]
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80123de:	4613      	mov	r3, r2
 80123e0:	009b      	lsls	r3, r3, #2
 80123e2:	4413      	add	r3, r2
 80123e4:	009b      	lsls	r3, r3, #2
 80123e6:	4a2b      	ldr	r2, [pc, #172]	@ (8012494 <xTaskPriorityInherit+0xf8>)
 80123e8:	4413      	add	r3, r2
 80123ea:	4299      	cmp	r1, r3
 80123ec:	d13a      	bne.n	8012464 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	3304      	adds	r3, #4
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7fe f9ac 	bl	8010750 <uxListRemove>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d115      	bne.n	801242a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012402:	4924      	ldr	r1, [pc, #144]	@ (8012494 <xTaskPriorityInherit+0xf8>)
 8012404:	4613      	mov	r3, r2
 8012406:	009b      	lsls	r3, r3, #2
 8012408:	4413      	add	r3, r2
 801240a:	009b      	lsls	r3, r3, #2
 801240c:	440b      	add	r3, r1
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d10a      	bne.n	801242a <xTaskPriorityInherit+0x8e>
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012418:	2201      	movs	r2, #1
 801241a:	fa02 f303 	lsl.w	r3, r2, r3
 801241e:	43da      	mvns	r2, r3
 8012420:	4b1d      	ldr	r3, [pc, #116]	@ (8012498 <xTaskPriorityInherit+0xfc>)
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	4013      	ands	r3, r2
 8012426:	4a1c      	ldr	r2, [pc, #112]	@ (8012498 <xTaskPriorityInherit+0xfc>)
 8012428:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801242a:	4b19      	ldr	r3, [pc, #100]	@ (8012490 <xTaskPriorityInherit+0xf4>)
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012438:	2201      	movs	r2, #1
 801243a:	409a      	lsls	r2, r3
 801243c:	4b16      	ldr	r3, [pc, #88]	@ (8012498 <xTaskPriorityInherit+0xfc>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	4313      	orrs	r3, r2
 8012442:	4a15      	ldr	r2, [pc, #84]	@ (8012498 <xTaskPriorityInherit+0xfc>)
 8012444:	6013      	str	r3, [r2, #0]
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801244a:	4613      	mov	r3, r2
 801244c:	009b      	lsls	r3, r3, #2
 801244e:	4413      	add	r3, r2
 8012450:	009b      	lsls	r3, r3, #2
 8012452:	4a10      	ldr	r2, [pc, #64]	@ (8012494 <xTaskPriorityInherit+0xf8>)
 8012454:	441a      	add	r2, r3
 8012456:	68bb      	ldr	r3, [r7, #8]
 8012458:	3304      	adds	r3, #4
 801245a:	4619      	mov	r1, r3
 801245c:	4610      	mov	r0, r2
 801245e:	f7fe f91a 	bl	8010696 <vListInsertEnd>
 8012462:	e004      	b.n	801246e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012464:	4b0a      	ldr	r3, [pc, #40]	@ (8012490 <xTaskPriorityInherit+0xf4>)
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801246e:	2301      	movs	r3, #1
 8012470:	60fb      	str	r3, [r7, #12]
 8012472:	e008      	b.n	8012486 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8012478:	4b05      	ldr	r3, [pc, #20]	@ (8012490 <xTaskPriorityInherit+0xf4>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801247e:	429a      	cmp	r2, r3
 8012480:	d201      	bcs.n	8012486 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012482:	2301      	movs	r3, #1
 8012484:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012486:	68fb      	ldr	r3, [r7, #12]
	}
 8012488:	4618      	mov	r0, r3
 801248a:	3710      	adds	r7, #16
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}
 8012490:	20000e2c 	.word	0x20000e2c
 8012494:	20000e30 	.word	0x20000e30
 8012498:	20000f34 	.word	0x20000f34

0801249c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801249c:	b580      	push	{r7, lr}
 801249e:	b086      	sub	sp, #24
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80124a8:	2300      	movs	r3, #0
 80124aa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d074      	beq.n	801259c <xTaskPriorityDisinherit+0x100>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80124b2:	4b3d      	ldr	r3, [pc, #244]	@ (80125a8 <xTaskPriorityDisinherit+0x10c>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	693a      	ldr	r2, [r7, #16]
 80124b8:	429a      	cmp	r2, r3
 80124ba:	d00d      	beq.n	80124d8 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80124bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124c0:	b672      	cpsid	i
 80124c2:	f383 8811 	msr	BASEPRI, r3
 80124c6:	f3bf 8f6f 	isb	sy
 80124ca:	f3bf 8f4f 	dsb	sy
 80124ce:	b662      	cpsie	i
 80124d0:	60fb      	str	r3, [r7, #12]
}
 80124d2:	bf00      	nop
 80124d4:	bf00      	nop
 80124d6:	e7fd      	b.n	80124d4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80124d8:	693b      	ldr	r3, [r7, #16]
 80124da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d10d      	bne.n	80124fc <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80124e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124e4:	b672      	cpsid	i
 80124e6:	f383 8811 	msr	BASEPRI, r3
 80124ea:	f3bf 8f6f 	isb	sy
 80124ee:	f3bf 8f4f 	dsb	sy
 80124f2:	b662      	cpsie	i
 80124f4:	60bb      	str	r3, [r7, #8]
}
 80124f6:	bf00      	nop
 80124f8:	bf00      	nop
 80124fa:	e7fd      	b.n	80124f8 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80124fc:	693b      	ldr	r3, [r7, #16]
 80124fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012500:	1e5a      	subs	r2, r3, #1
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012506:	693b      	ldr	r3, [r7, #16]
 8012508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801250a:	693b      	ldr	r3, [r7, #16]
 801250c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801250e:	429a      	cmp	r2, r3
 8012510:	d044      	beq.n	801259c <xTaskPriorityDisinherit+0x100>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012512:	693b      	ldr	r3, [r7, #16]
 8012514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012516:	2b00      	cmp	r3, #0
 8012518:	d140      	bne.n	801259c <xTaskPriorityDisinherit+0x100>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	3304      	adds	r3, #4
 801251e:	4618      	mov	r0, r3
 8012520:	f7fe f916 	bl	8010750 <uxListRemove>
 8012524:	4603      	mov	r3, r0
 8012526:	2b00      	cmp	r3, #0
 8012528:	d115      	bne.n	8012556 <xTaskPriorityDisinherit+0xba>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801252a:	693b      	ldr	r3, [r7, #16]
 801252c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801252e:	491f      	ldr	r1, [pc, #124]	@ (80125ac <xTaskPriorityDisinherit+0x110>)
 8012530:	4613      	mov	r3, r2
 8012532:	009b      	lsls	r3, r3, #2
 8012534:	4413      	add	r3, r2
 8012536:	009b      	lsls	r3, r3, #2
 8012538:	440b      	add	r3, r1
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d10a      	bne.n	8012556 <xTaskPriorityDisinherit+0xba>
 8012540:	693b      	ldr	r3, [r7, #16]
 8012542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012544:	2201      	movs	r2, #1
 8012546:	fa02 f303 	lsl.w	r3, r2, r3
 801254a:	43da      	mvns	r2, r3
 801254c:	4b18      	ldr	r3, [pc, #96]	@ (80125b0 <xTaskPriorityDisinherit+0x114>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	4013      	ands	r3, r2
 8012552:	4a17      	ldr	r2, [pc, #92]	@ (80125b0 <xTaskPriorityDisinherit+0x114>)
 8012554:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012556:	693b      	ldr	r3, [r7, #16]
 8012558:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801255e:	693b      	ldr	r3, [r7, #16]
 8012560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012562:	f1c3 0207 	rsb	r2, r3, #7
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801256a:	693b      	ldr	r3, [r7, #16]
 801256c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801256e:	2201      	movs	r2, #1
 8012570:	409a      	lsls	r2, r3
 8012572:	4b0f      	ldr	r3, [pc, #60]	@ (80125b0 <xTaskPriorityDisinherit+0x114>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	4313      	orrs	r3, r2
 8012578:	4a0d      	ldr	r2, [pc, #52]	@ (80125b0 <xTaskPriorityDisinherit+0x114>)
 801257a:	6013      	str	r3, [r2, #0]
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012580:	4613      	mov	r3, r2
 8012582:	009b      	lsls	r3, r3, #2
 8012584:	4413      	add	r3, r2
 8012586:	009b      	lsls	r3, r3, #2
 8012588:	4a08      	ldr	r2, [pc, #32]	@ (80125ac <xTaskPriorityDisinherit+0x110>)
 801258a:	441a      	add	r2, r3
 801258c:	693b      	ldr	r3, [r7, #16]
 801258e:	3304      	adds	r3, #4
 8012590:	4619      	mov	r1, r3
 8012592:	4610      	mov	r0, r2
 8012594:	f7fe f87f 	bl	8010696 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012598:	2301      	movs	r3, #1
 801259a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801259c:	697b      	ldr	r3, [r7, #20]
	}
 801259e:	4618      	mov	r0, r3
 80125a0:	3718      	adds	r7, #24
 80125a2:	46bd      	mov	sp, r7
 80125a4:	bd80      	pop	{r7, pc}
 80125a6:	bf00      	nop
 80125a8:	20000e2c 	.word	0x20000e2c
 80125ac:	20000e30 	.word	0x20000e30
 80125b0:	20000f34 	.word	0x20000f34

080125b4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b088      	sub	sp, #32
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
 80125bc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80125c2:	2301      	movs	r3, #1
 80125c4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	f000 8089 	beq.w	80126e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d10d      	bne.n	80125f2 <vTaskPriorityDisinheritAfterTimeout+0x3e>
	__asm volatile
 80125d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125da:	b672      	cpsid	i
 80125dc:	f383 8811 	msr	BASEPRI, r3
 80125e0:	f3bf 8f6f 	isb	sy
 80125e4:	f3bf 8f4f 	dsb	sy
 80125e8:	b662      	cpsie	i
 80125ea:	60fb      	str	r3, [r7, #12]
}
 80125ec:	bf00      	nop
 80125ee:	bf00      	nop
 80125f0:	e7fd      	b.n	80125ee <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80125f2:	69bb      	ldr	r3, [r7, #24]
 80125f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80125f6:	683a      	ldr	r2, [r7, #0]
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d902      	bls.n	8012602 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	61fb      	str	r3, [r7, #28]
 8012600:	e002      	b.n	8012608 <vTaskPriorityDisinheritAfterTimeout+0x54>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012602:	69bb      	ldr	r3, [r7, #24]
 8012604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012606:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012608:	69bb      	ldr	r3, [r7, #24]
 801260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801260c:	69fa      	ldr	r2, [r7, #28]
 801260e:	429a      	cmp	r2, r3
 8012610:	d066      	beq.n	80126e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012612:	69bb      	ldr	r3, [r7, #24]
 8012614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012616:	697a      	ldr	r2, [r7, #20]
 8012618:	429a      	cmp	r2, r3
 801261a:	d161      	bne.n	80126e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801261c:	4b32      	ldr	r3, [pc, #200]	@ (80126e8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	69ba      	ldr	r2, [r7, #24]
 8012622:	429a      	cmp	r2, r3
 8012624:	d10d      	bne.n	8012642 <vTaskPriorityDisinheritAfterTimeout+0x8e>
	__asm volatile
 8012626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801262a:	b672      	cpsid	i
 801262c:	f383 8811 	msr	BASEPRI, r3
 8012630:	f3bf 8f6f 	isb	sy
 8012634:	f3bf 8f4f 	dsb	sy
 8012638:	b662      	cpsie	i
 801263a:	60bb      	str	r3, [r7, #8]
}
 801263c:	bf00      	nop
 801263e:	bf00      	nop
 8012640:	e7fd      	b.n	801263e <vTaskPriorityDisinheritAfterTimeout+0x8a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012646:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012648:	69bb      	ldr	r3, [r7, #24]
 801264a:	69fa      	ldr	r2, [r7, #28]
 801264c:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801264e:	69bb      	ldr	r3, [r7, #24]
 8012650:	699b      	ldr	r3, [r3, #24]
 8012652:	2b00      	cmp	r3, #0
 8012654:	db04      	blt.n	8012660 <vTaskPriorityDisinheritAfterTimeout+0xac>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012656:	69fb      	ldr	r3, [r7, #28]
 8012658:	f1c3 0207 	rsb	r2, r3, #7
 801265c:	69bb      	ldr	r3, [r7, #24]
 801265e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012660:	69bb      	ldr	r3, [r7, #24]
 8012662:	6959      	ldr	r1, [r3, #20]
 8012664:	693a      	ldr	r2, [r7, #16]
 8012666:	4613      	mov	r3, r2
 8012668:	009b      	lsls	r3, r3, #2
 801266a:	4413      	add	r3, r2
 801266c:	009b      	lsls	r3, r3, #2
 801266e:	4a1f      	ldr	r2, [pc, #124]	@ (80126ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012670:	4413      	add	r3, r2
 8012672:	4299      	cmp	r1, r3
 8012674:	d134      	bne.n	80126e0 <vTaskPriorityDisinheritAfterTimeout+0x12c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012676:	69bb      	ldr	r3, [r7, #24]
 8012678:	3304      	adds	r3, #4
 801267a:	4618      	mov	r0, r3
 801267c:	f7fe f868 	bl	8010750 <uxListRemove>
 8012680:	4603      	mov	r3, r0
 8012682:	2b00      	cmp	r3, #0
 8012684:	d115      	bne.n	80126b2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012686:	69bb      	ldr	r3, [r7, #24]
 8012688:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801268a:	4918      	ldr	r1, [pc, #96]	@ (80126ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801268c:	4613      	mov	r3, r2
 801268e:	009b      	lsls	r3, r3, #2
 8012690:	4413      	add	r3, r2
 8012692:	009b      	lsls	r3, r3, #2
 8012694:	440b      	add	r3, r1
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	2b00      	cmp	r3, #0
 801269a:	d10a      	bne.n	80126b2 <vTaskPriorityDisinheritAfterTimeout+0xfe>
 801269c:	69bb      	ldr	r3, [r7, #24]
 801269e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126a0:	2201      	movs	r2, #1
 80126a2:	fa02 f303 	lsl.w	r3, r2, r3
 80126a6:	43da      	mvns	r2, r3
 80126a8:	4b11      	ldr	r3, [pc, #68]	@ (80126f0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	4013      	ands	r3, r2
 80126ae:	4a10      	ldr	r2, [pc, #64]	@ (80126f0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80126b0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80126b2:	69bb      	ldr	r3, [r7, #24]
 80126b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80126b6:	2201      	movs	r2, #1
 80126b8:	409a      	lsls	r2, r3
 80126ba:	4b0d      	ldr	r3, [pc, #52]	@ (80126f0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80126bc:	681b      	ldr	r3, [r3, #0]
 80126be:	4313      	orrs	r3, r2
 80126c0:	4a0b      	ldr	r2, [pc, #44]	@ (80126f0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80126c2:	6013      	str	r3, [r2, #0]
 80126c4:	69bb      	ldr	r3, [r7, #24]
 80126c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80126c8:	4613      	mov	r3, r2
 80126ca:	009b      	lsls	r3, r3, #2
 80126cc:	4413      	add	r3, r2
 80126ce:	009b      	lsls	r3, r3, #2
 80126d0:	4a06      	ldr	r2, [pc, #24]	@ (80126ec <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80126d2:	441a      	add	r2, r3
 80126d4:	69bb      	ldr	r3, [r7, #24]
 80126d6:	3304      	adds	r3, #4
 80126d8:	4619      	mov	r1, r3
 80126da:	4610      	mov	r0, r2
 80126dc:	f7fd ffdb 	bl	8010696 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80126e0:	bf00      	nop
 80126e2:	3720      	adds	r7, #32
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}
 80126e8:	20000e2c 	.word	0x20000e2c
 80126ec:	20000e30 	.word	0x20000e30
 80126f0:	20000f34 	.word	0x20000f34

080126f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80126f4:	b480      	push	{r7}
 80126f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80126f8:	4b07      	ldr	r3, [pc, #28]	@ (8012718 <pvTaskIncrementMutexHeldCount+0x24>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d004      	beq.n	801270a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012700:	4b05      	ldr	r3, [pc, #20]	@ (8012718 <pvTaskIncrementMutexHeldCount+0x24>)
 8012702:	681b      	ldr	r3, [r3, #0]
 8012704:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8012706:	3201      	adds	r2, #1
 8012708:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 801270a:	4b03      	ldr	r3, [pc, #12]	@ (8012718 <pvTaskIncrementMutexHeldCount+0x24>)
 801270c:	681b      	ldr	r3, [r3, #0]
	}
 801270e:	4618      	mov	r0, r3
 8012710:	46bd      	mov	sp, r7
 8012712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012716:	4770      	bx	lr
 8012718:	20000e2c 	.word	0x20000e2c

0801271c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b084      	sub	sp, #16
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
 8012724:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012726:	4b29      	ldr	r3, [pc, #164]	@ (80127cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801272c:	4b28      	ldr	r3, [pc, #160]	@ (80127d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	3304      	adds	r3, #4
 8012732:	4618      	mov	r0, r3
 8012734:	f7fe f80c 	bl	8010750 <uxListRemove>
 8012738:	4603      	mov	r3, r0
 801273a:	2b00      	cmp	r3, #0
 801273c:	d10b      	bne.n	8012756 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801273e:	4b24      	ldr	r3, [pc, #144]	@ (80127d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012744:	2201      	movs	r2, #1
 8012746:	fa02 f303 	lsl.w	r3, r2, r3
 801274a:	43da      	mvns	r2, r3
 801274c:	4b21      	ldr	r3, [pc, #132]	@ (80127d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	4013      	ands	r3, r2
 8012752:	4a20      	ldr	r2, [pc, #128]	@ (80127d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012754:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f1b3 3fff 	cmp.w	r3, #4294967295
 801275c:	d10a      	bne.n	8012774 <prvAddCurrentTaskToDelayedList+0x58>
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d007      	beq.n	8012774 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012764:	4b1a      	ldr	r3, [pc, #104]	@ (80127d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	3304      	adds	r3, #4
 801276a:	4619      	mov	r1, r3
 801276c:	481a      	ldr	r0, [pc, #104]	@ (80127d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801276e:	f7fd ff92 	bl	8010696 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012772:	e026      	b.n	80127c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012774:	68fa      	ldr	r2, [r7, #12]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	4413      	add	r3, r2
 801277a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801277c:	4b14      	ldr	r3, [pc, #80]	@ (80127d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	68ba      	ldr	r2, [r7, #8]
 8012782:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012784:	68ba      	ldr	r2, [r7, #8]
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	429a      	cmp	r2, r3
 801278a:	d209      	bcs.n	80127a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801278c:	4b13      	ldr	r3, [pc, #76]	@ (80127dc <prvAddCurrentTaskToDelayedList+0xc0>)
 801278e:	681a      	ldr	r2, [r3, #0]
 8012790:	4b0f      	ldr	r3, [pc, #60]	@ (80127d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	3304      	adds	r3, #4
 8012796:	4619      	mov	r1, r3
 8012798:	4610      	mov	r0, r2
 801279a:	f7fd ffa0 	bl	80106de <vListInsert>
}
 801279e:	e010      	b.n	80127c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80127a0:	4b0f      	ldr	r3, [pc, #60]	@ (80127e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80127a2:	681a      	ldr	r2, [r3, #0]
 80127a4:	4b0a      	ldr	r3, [pc, #40]	@ (80127d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	3304      	adds	r3, #4
 80127aa:	4619      	mov	r1, r3
 80127ac:	4610      	mov	r0, r2
 80127ae:	f7fd ff96 	bl	80106de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80127b2:	4b0c      	ldr	r3, [pc, #48]	@ (80127e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	68ba      	ldr	r2, [r7, #8]
 80127b8:	429a      	cmp	r2, r3
 80127ba:	d202      	bcs.n	80127c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80127bc:	4a09      	ldr	r2, [pc, #36]	@ (80127e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	6013      	str	r3, [r2, #0]
}
 80127c2:	bf00      	nop
 80127c4:	3710      	adds	r7, #16
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	20000f30 	.word	0x20000f30
 80127d0:	20000e2c 	.word	0x20000e2c
 80127d4:	20000f34 	.word	0x20000f34
 80127d8:	20000f18 	.word	0x20000f18
 80127dc:	20000ee8 	.word	0x20000ee8
 80127e0:	20000ee4 	.word	0x20000ee4
 80127e4:	20000f4c 	.word	0x20000f4c

080127e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80127e8:	b480      	push	{r7}
 80127ea:	b085      	sub	sp, #20
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	60f8      	str	r0, [r7, #12]
 80127f0:	60b9      	str	r1, [r7, #8]
 80127f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	3b04      	subs	r3, #4
 80127f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8012800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	3b04      	subs	r3, #4
 8012806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012808:	68bb      	ldr	r3, [r7, #8]
 801280a:	f023 0201 	bic.w	r2, r3, #1
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	3b04      	subs	r3, #4
 8012816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012818:	4a0c      	ldr	r2, [pc, #48]	@ (801284c <pxPortInitialiseStack+0x64>)
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	3b14      	subs	r3, #20
 8012822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012824:	687a      	ldr	r2, [r7, #4]
 8012826:	68fb      	ldr	r3, [r7, #12]
 8012828:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801282a:	68fb      	ldr	r3, [r7, #12]
 801282c:	3b04      	subs	r3, #4
 801282e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	f06f 0202 	mvn.w	r2, #2
 8012836:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	3b20      	subs	r3, #32
 801283c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801283e:	68fb      	ldr	r3, [r7, #12]
}
 8012840:	4618      	mov	r0, r3
 8012842:	3714      	adds	r7, #20
 8012844:	46bd      	mov	sp, r7
 8012846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284a:	4770      	bx	lr
 801284c:	08012851 	.word	0x08012851

08012850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012850:	b480      	push	{r7}
 8012852:	b085      	sub	sp, #20
 8012854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012856:	2300      	movs	r3, #0
 8012858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801285a:	4b15      	ldr	r3, [pc, #84]	@ (80128b0 <prvTaskExitError+0x60>)
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012862:	d00d      	beq.n	8012880 <prvTaskExitError+0x30>
	__asm volatile
 8012864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012868:	b672      	cpsid	i
 801286a:	f383 8811 	msr	BASEPRI, r3
 801286e:	f3bf 8f6f 	isb	sy
 8012872:	f3bf 8f4f 	dsb	sy
 8012876:	b662      	cpsie	i
 8012878:	60fb      	str	r3, [r7, #12]
}
 801287a:	bf00      	nop
 801287c:	bf00      	nop
 801287e:	e7fd      	b.n	801287c <prvTaskExitError+0x2c>
	__asm volatile
 8012880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012884:	b672      	cpsid	i
 8012886:	f383 8811 	msr	BASEPRI, r3
 801288a:	f3bf 8f6f 	isb	sy
 801288e:	f3bf 8f4f 	dsb	sy
 8012892:	b662      	cpsie	i
 8012894:	60bb      	str	r3, [r7, #8]
}
 8012896:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012898:	bf00      	nop
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d0fc      	beq.n	801289a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80128a0:	bf00      	nop
 80128a2:	bf00      	nop
 80128a4:	3714      	adds	r7, #20
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop
 80128b0:	20000040 	.word	0x20000040
	...

080128c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80128c0:	4b07      	ldr	r3, [pc, #28]	@ (80128e0 <pxCurrentTCBConst2>)
 80128c2:	6819      	ldr	r1, [r3, #0]
 80128c4:	6808      	ldr	r0, [r1, #0]
 80128c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80128ca:	f380 8809 	msr	PSP, r0
 80128ce:	f3bf 8f6f 	isb	sy
 80128d2:	f04f 0000 	mov.w	r0, #0
 80128d6:	f380 8811 	msr	BASEPRI, r0
 80128da:	4770      	bx	lr
 80128dc:	f3af 8000 	nop.w

080128e0 <pxCurrentTCBConst2>:
 80128e0:	20000e2c 	.word	0x20000e2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80128e4:	bf00      	nop
 80128e6:	bf00      	nop

080128e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80128e8:	4808      	ldr	r0, [pc, #32]	@ (801290c <prvPortStartFirstTask+0x24>)
 80128ea:	6800      	ldr	r0, [r0, #0]
 80128ec:	6800      	ldr	r0, [r0, #0]
 80128ee:	f380 8808 	msr	MSP, r0
 80128f2:	f04f 0000 	mov.w	r0, #0
 80128f6:	f380 8814 	msr	CONTROL, r0
 80128fa:	b662      	cpsie	i
 80128fc:	b661      	cpsie	f
 80128fe:	f3bf 8f4f 	dsb	sy
 8012902:	f3bf 8f6f 	isb	sy
 8012906:	df00      	svc	0
 8012908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801290a:	bf00      	nop
 801290c:	e000ed08 	.word	0xe000ed08

08012910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012916:	4b37      	ldr	r3, [pc, #220]	@ (80129f4 <xPortStartScheduler+0xe4>)
 8012918:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	781b      	ldrb	r3, [r3, #0]
 801291e:	b2db      	uxtb	r3, r3
 8012920:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	22ff      	movs	r2, #255	@ 0xff
 8012926:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	b2db      	uxtb	r3, r3
 801292e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012930:	78fb      	ldrb	r3, [r7, #3]
 8012932:	b2db      	uxtb	r3, r3
 8012934:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8012938:	b2da      	uxtb	r2, r3
 801293a:	4b2f      	ldr	r3, [pc, #188]	@ (80129f8 <xPortStartScheduler+0xe8>)
 801293c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801293e:	4b2f      	ldr	r3, [pc, #188]	@ (80129fc <xPortStartScheduler+0xec>)
 8012940:	2207      	movs	r2, #7
 8012942:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012944:	e009      	b.n	801295a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012946:	4b2d      	ldr	r3, [pc, #180]	@ (80129fc <xPortStartScheduler+0xec>)
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	3b01      	subs	r3, #1
 801294c:	4a2b      	ldr	r2, [pc, #172]	@ (80129fc <xPortStartScheduler+0xec>)
 801294e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012950:	78fb      	ldrb	r3, [r7, #3]
 8012952:	b2db      	uxtb	r3, r3
 8012954:	005b      	lsls	r3, r3, #1
 8012956:	b2db      	uxtb	r3, r3
 8012958:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801295a:	78fb      	ldrb	r3, [r7, #3]
 801295c:	b2db      	uxtb	r3, r3
 801295e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012962:	2b80      	cmp	r3, #128	@ 0x80
 8012964:	d0ef      	beq.n	8012946 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012966:	4b25      	ldr	r3, [pc, #148]	@ (80129fc <xPortStartScheduler+0xec>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	f1c3 0307 	rsb	r3, r3, #7
 801296e:	2b04      	cmp	r3, #4
 8012970:	d00d      	beq.n	801298e <xPortStartScheduler+0x7e>
	__asm volatile
 8012972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012976:	b672      	cpsid	i
 8012978:	f383 8811 	msr	BASEPRI, r3
 801297c:	f3bf 8f6f 	isb	sy
 8012980:	f3bf 8f4f 	dsb	sy
 8012984:	b662      	cpsie	i
 8012986:	60bb      	str	r3, [r7, #8]
}
 8012988:	bf00      	nop
 801298a:	bf00      	nop
 801298c:	e7fd      	b.n	801298a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801298e:	4b1b      	ldr	r3, [pc, #108]	@ (80129fc <xPortStartScheduler+0xec>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	021b      	lsls	r3, r3, #8
 8012994:	4a19      	ldr	r2, [pc, #100]	@ (80129fc <xPortStartScheduler+0xec>)
 8012996:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012998:	4b18      	ldr	r3, [pc, #96]	@ (80129fc <xPortStartScheduler+0xec>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80129a0:	4a16      	ldr	r2, [pc, #88]	@ (80129fc <xPortStartScheduler+0xec>)
 80129a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	b2da      	uxtb	r2, r3
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80129ac:	4b14      	ldr	r3, [pc, #80]	@ (8012a00 <xPortStartScheduler+0xf0>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	4a13      	ldr	r2, [pc, #76]	@ (8012a00 <xPortStartScheduler+0xf0>)
 80129b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80129b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80129b8:	4b11      	ldr	r3, [pc, #68]	@ (8012a00 <xPortStartScheduler+0xf0>)
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	4a10      	ldr	r2, [pc, #64]	@ (8012a00 <xPortStartScheduler+0xf0>)
 80129be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80129c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80129c4:	f000 f8dc 	bl	8012b80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80129c8:	4b0e      	ldr	r3, [pc, #56]	@ (8012a04 <xPortStartScheduler+0xf4>)
 80129ca:	2200      	movs	r2, #0
 80129cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80129ce:	f000 f8fb 	bl	8012bc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80129d2:	4b0d      	ldr	r3, [pc, #52]	@ (8012a08 <xPortStartScheduler+0xf8>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	4a0c      	ldr	r2, [pc, #48]	@ (8012a08 <xPortStartScheduler+0xf8>)
 80129d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80129dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80129de:	f7ff ff83 	bl	80128e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80129e2:	f7ff fa61 	bl	8011ea8 <vTaskSwitchContext>
	prvTaskExitError();
 80129e6:	f7ff ff33 	bl	8012850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80129ea:	2300      	movs	r3, #0
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3710      	adds	r7, #16
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	e000e400 	.word	0xe000e400
 80129f8:	20000f58 	.word	0x20000f58
 80129fc:	20000f5c 	.word	0x20000f5c
 8012a00:	e000ed20 	.word	0xe000ed20
 8012a04:	20000040 	.word	0x20000040
 8012a08:	e000ef34 	.word	0xe000ef34

08012a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012a0c:	b480      	push	{r7}
 8012a0e:	b083      	sub	sp, #12
 8012a10:	af00      	add	r7, sp, #0
	__asm volatile
 8012a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a16:	b672      	cpsid	i
 8012a18:	f383 8811 	msr	BASEPRI, r3
 8012a1c:	f3bf 8f6f 	isb	sy
 8012a20:	f3bf 8f4f 	dsb	sy
 8012a24:	b662      	cpsie	i
 8012a26:	607b      	str	r3, [r7, #4]
}
 8012a28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012a2a:	4b11      	ldr	r3, [pc, #68]	@ (8012a70 <vPortEnterCritical+0x64>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	3301      	adds	r3, #1
 8012a30:	4a0f      	ldr	r2, [pc, #60]	@ (8012a70 <vPortEnterCritical+0x64>)
 8012a32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012a34:	4b0e      	ldr	r3, [pc, #56]	@ (8012a70 <vPortEnterCritical+0x64>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2b01      	cmp	r3, #1
 8012a3a:	d112      	bne.n	8012a62 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8012a74 <vPortEnterCritical+0x68>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	b2db      	uxtb	r3, r3
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d00d      	beq.n	8012a62 <vPortEnterCritical+0x56>
	__asm volatile
 8012a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a4a:	b672      	cpsid	i
 8012a4c:	f383 8811 	msr	BASEPRI, r3
 8012a50:	f3bf 8f6f 	isb	sy
 8012a54:	f3bf 8f4f 	dsb	sy
 8012a58:	b662      	cpsie	i
 8012a5a:	603b      	str	r3, [r7, #0]
}
 8012a5c:	bf00      	nop
 8012a5e:	bf00      	nop
 8012a60:	e7fd      	b.n	8012a5e <vPortEnterCritical+0x52>
	}
}
 8012a62:	bf00      	nop
 8012a64:	370c      	adds	r7, #12
 8012a66:	46bd      	mov	sp, r7
 8012a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a6c:	4770      	bx	lr
 8012a6e:	bf00      	nop
 8012a70:	20000040 	.word	0x20000040
 8012a74:	e000ed04 	.word	0xe000ed04

08012a78 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012a78:	b480      	push	{r7}
 8012a7a:	b083      	sub	sp, #12
 8012a7c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012a7e:	4b13      	ldr	r3, [pc, #76]	@ (8012acc <vPortExitCritical+0x54>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d10d      	bne.n	8012aa2 <vPortExitCritical+0x2a>
	__asm volatile
 8012a86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012a8a:	b672      	cpsid	i
 8012a8c:	f383 8811 	msr	BASEPRI, r3
 8012a90:	f3bf 8f6f 	isb	sy
 8012a94:	f3bf 8f4f 	dsb	sy
 8012a98:	b662      	cpsie	i
 8012a9a:	607b      	str	r3, [r7, #4]
}
 8012a9c:	bf00      	nop
 8012a9e:	bf00      	nop
 8012aa0:	e7fd      	b.n	8012a9e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8012acc <vPortExitCritical+0x54>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	3b01      	subs	r3, #1
 8012aa8:	4a08      	ldr	r2, [pc, #32]	@ (8012acc <vPortExitCritical+0x54>)
 8012aaa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012aac:	4b07      	ldr	r3, [pc, #28]	@ (8012acc <vPortExitCritical+0x54>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d105      	bne.n	8012ac0 <vPortExitCritical+0x48>
 8012ab4:	2300      	movs	r3, #0
 8012ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ab8:	683b      	ldr	r3, [r7, #0]
 8012aba:	f383 8811 	msr	BASEPRI, r3
}
 8012abe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012ac0:	bf00      	nop
 8012ac2:	370c      	adds	r7, #12
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr
 8012acc:	20000040 	.word	0x20000040

08012ad0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012ad0:	f3ef 8009 	mrs	r0, PSP
 8012ad4:	f3bf 8f6f 	isb	sy
 8012ad8:	4b15      	ldr	r3, [pc, #84]	@ (8012b30 <pxCurrentTCBConst>)
 8012ada:	681a      	ldr	r2, [r3, #0]
 8012adc:	f01e 0f10 	tst.w	lr, #16
 8012ae0:	bf08      	it	eq
 8012ae2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012ae6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012aea:	6010      	str	r0, [r2, #0]
 8012aec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012af0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012af4:	b672      	cpsid	i
 8012af6:	f380 8811 	msr	BASEPRI, r0
 8012afa:	f3bf 8f4f 	dsb	sy
 8012afe:	f3bf 8f6f 	isb	sy
 8012b02:	b662      	cpsie	i
 8012b04:	f7ff f9d0 	bl	8011ea8 <vTaskSwitchContext>
 8012b08:	f04f 0000 	mov.w	r0, #0
 8012b0c:	f380 8811 	msr	BASEPRI, r0
 8012b10:	bc09      	pop	{r0, r3}
 8012b12:	6819      	ldr	r1, [r3, #0]
 8012b14:	6808      	ldr	r0, [r1, #0]
 8012b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b1a:	f01e 0f10 	tst.w	lr, #16
 8012b1e:	bf08      	it	eq
 8012b20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012b24:	f380 8809 	msr	PSP, r0
 8012b28:	f3bf 8f6f 	isb	sy
 8012b2c:	4770      	bx	lr
 8012b2e:	bf00      	nop

08012b30 <pxCurrentTCBConst>:
 8012b30:	20000e2c 	.word	0x20000e2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012b34:	bf00      	nop
 8012b36:	bf00      	nop

08012b38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b082      	sub	sp, #8
 8012b3c:	af00      	add	r7, sp, #0
	__asm volatile
 8012b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012b42:	b672      	cpsid	i
 8012b44:	f383 8811 	msr	BASEPRI, r3
 8012b48:	f3bf 8f6f 	isb	sy
 8012b4c:	f3bf 8f4f 	dsb	sy
 8012b50:	b662      	cpsie	i
 8012b52:	607b      	str	r3, [r7, #4]
}
 8012b54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012b56:	f7ff f8eb 	bl	8011d30 <xTaskIncrementTick>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d003      	beq.n	8012b68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012b60:	4b06      	ldr	r3, [pc, #24]	@ (8012b7c <SysTick_Handler+0x44>)
 8012b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012b66:	601a      	str	r2, [r3, #0]
 8012b68:	2300      	movs	r3, #0
 8012b6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	f383 8811 	msr	BASEPRI, r3
}
 8012b72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012b74:	bf00      	nop
 8012b76:	3708      	adds	r7, #8
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	e000ed04 	.word	0xe000ed04

08012b80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012b80:	b480      	push	{r7}
 8012b82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012b84:	4b0b      	ldr	r3, [pc, #44]	@ (8012bb4 <vPortSetupTimerInterrupt+0x34>)
 8012b86:	2200      	movs	r2, #0
 8012b88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8012bb8 <vPortSetupTimerInterrupt+0x38>)
 8012b8c:	2200      	movs	r2, #0
 8012b8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012b90:	4b0a      	ldr	r3, [pc, #40]	@ (8012bbc <vPortSetupTimerInterrupt+0x3c>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	4a0a      	ldr	r2, [pc, #40]	@ (8012bc0 <vPortSetupTimerInterrupt+0x40>)
 8012b96:	fba2 2303 	umull	r2, r3, r2, r3
 8012b9a:	099b      	lsrs	r3, r3, #6
 8012b9c:	4a09      	ldr	r2, [pc, #36]	@ (8012bc4 <vPortSetupTimerInterrupt+0x44>)
 8012b9e:	3b01      	subs	r3, #1
 8012ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012ba2:	4b04      	ldr	r3, [pc, #16]	@ (8012bb4 <vPortSetupTimerInterrupt+0x34>)
 8012ba4:	2207      	movs	r2, #7
 8012ba6:	601a      	str	r2, [r3, #0]
}
 8012ba8:	bf00      	nop
 8012baa:	46bd      	mov	sp, r7
 8012bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb0:	4770      	bx	lr
 8012bb2:	bf00      	nop
 8012bb4:	e000e010 	.word	0xe000e010
 8012bb8:	e000e018 	.word	0xe000e018
 8012bbc:	20000034 	.word	0x20000034
 8012bc0:	10624dd3 	.word	0x10624dd3
 8012bc4:	e000e014 	.word	0xe000e014

08012bc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012bc8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012bd8 <vPortEnableVFP+0x10>
 8012bcc:	6801      	ldr	r1, [r0, #0]
 8012bce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8012bd2:	6001      	str	r1, [r0, #0]
 8012bd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012bd6:	bf00      	nop
 8012bd8:	e000ed88 	.word	0xe000ed88

08012bdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012bdc:	b480      	push	{r7}
 8012bde:	b085      	sub	sp, #20
 8012be0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012be2:	f3ef 8305 	mrs	r3, IPSR
 8012be6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	2b0f      	cmp	r3, #15
 8012bec:	d917      	bls.n	8012c1e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012bee:	4a1a      	ldr	r2, [pc, #104]	@ (8012c58 <vPortValidateInterruptPriority+0x7c>)
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	4413      	add	r3, r2
 8012bf4:	781b      	ldrb	r3, [r3, #0]
 8012bf6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012bf8:	4b18      	ldr	r3, [pc, #96]	@ (8012c5c <vPortValidateInterruptPriority+0x80>)
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	7afa      	ldrb	r2, [r7, #11]
 8012bfe:	429a      	cmp	r2, r3
 8012c00:	d20d      	bcs.n	8012c1e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8012c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c06:	b672      	cpsid	i
 8012c08:	f383 8811 	msr	BASEPRI, r3
 8012c0c:	f3bf 8f6f 	isb	sy
 8012c10:	f3bf 8f4f 	dsb	sy
 8012c14:	b662      	cpsie	i
 8012c16:	607b      	str	r3, [r7, #4]
}
 8012c18:	bf00      	nop
 8012c1a:	bf00      	nop
 8012c1c:	e7fd      	b.n	8012c1a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012c1e:	4b10      	ldr	r3, [pc, #64]	@ (8012c60 <vPortValidateInterruptPriority+0x84>)
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8012c26:	4b0f      	ldr	r3, [pc, #60]	@ (8012c64 <vPortValidateInterruptPriority+0x88>)
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	429a      	cmp	r2, r3
 8012c2c:	d90d      	bls.n	8012c4a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 8012c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012c32:	b672      	cpsid	i
 8012c34:	f383 8811 	msr	BASEPRI, r3
 8012c38:	f3bf 8f6f 	isb	sy
 8012c3c:	f3bf 8f4f 	dsb	sy
 8012c40:	b662      	cpsie	i
 8012c42:	603b      	str	r3, [r7, #0]
}
 8012c44:	bf00      	nop
 8012c46:	bf00      	nop
 8012c48:	e7fd      	b.n	8012c46 <vPortValidateInterruptPriority+0x6a>
	}
 8012c4a:	bf00      	nop
 8012c4c:	3714      	adds	r7, #20
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c54:	4770      	bx	lr
 8012c56:	bf00      	nop
 8012c58:	e000e3f0 	.word	0xe000e3f0
 8012c5c:	20000f58 	.word	0x20000f58
 8012c60:	e000ed0c 	.word	0xe000ed0c
 8012c64:	20000f5c 	.word	0x20000f5c

08012c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b08a      	sub	sp, #40	@ 0x28
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012c70:	2300      	movs	r3, #0
 8012c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012c74:	f7fe ff8c 	bl	8011b90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012c78:	4b5d      	ldr	r3, [pc, #372]	@ (8012df0 <pvPortMalloc+0x188>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d101      	bne.n	8012c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012c80:	f000 f920 	bl	8012ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012c84:	4b5b      	ldr	r3, [pc, #364]	@ (8012df4 <pvPortMalloc+0x18c>)
 8012c86:	681a      	ldr	r2, [r3, #0]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	4013      	ands	r3, r2
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	f040 8094 	bne.w	8012dba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2b00      	cmp	r3, #0
 8012c96:	d020      	beq.n	8012cda <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8012c98:	2208      	movs	r2, #8
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	4413      	add	r3, r2
 8012c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	f003 0307 	and.w	r3, r3, #7
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d017      	beq.n	8012cda <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	f023 0307 	bic.w	r3, r3, #7
 8012cb0:	3308      	adds	r3, #8
 8012cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f003 0307 	and.w	r3, r3, #7
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d00d      	beq.n	8012cda <pvPortMalloc+0x72>
	__asm volatile
 8012cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012cc2:	b672      	cpsid	i
 8012cc4:	f383 8811 	msr	BASEPRI, r3
 8012cc8:	f3bf 8f6f 	isb	sy
 8012ccc:	f3bf 8f4f 	dsb	sy
 8012cd0:	b662      	cpsie	i
 8012cd2:	617b      	str	r3, [r7, #20]
}
 8012cd4:	bf00      	nop
 8012cd6:	bf00      	nop
 8012cd8:	e7fd      	b.n	8012cd6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d06c      	beq.n	8012dba <pvPortMalloc+0x152>
 8012ce0:	4b45      	ldr	r3, [pc, #276]	@ (8012df8 <pvPortMalloc+0x190>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	687a      	ldr	r2, [r7, #4]
 8012ce6:	429a      	cmp	r2, r3
 8012ce8:	d867      	bhi.n	8012dba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012cea:	4b44      	ldr	r3, [pc, #272]	@ (8012dfc <pvPortMalloc+0x194>)
 8012cec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012cee:	4b43      	ldr	r3, [pc, #268]	@ (8012dfc <pvPortMalloc+0x194>)
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012cf4:	e004      	b.n	8012d00 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8012cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d02:	685b      	ldr	r3, [r3, #4]
 8012d04:	687a      	ldr	r2, [r7, #4]
 8012d06:	429a      	cmp	r2, r3
 8012d08:	d903      	bls.n	8012d12 <pvPortMalloc+0xaa>
 8012d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d0c:	681b      	ldr	r3, [r3, #0]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d1f1      	bne.n	8012cf6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012d12:	4b37      	ldr	r3, [pc, #220]	@ (8012df0 <pvPortMalloc+0x188>)
 8012d14:	681b      	ldr	r3, [r3, #0]
 8012d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d18:	429a      	cmp	r2, r3
 8012d1a:	d04e      	beq.n	8012dba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012d1c:	6a3b      	ldr	r3, [r7, #32]
 8012d1e:	681b      	ldr	r3, [r3, #0]
 8012d20:	2208      	movs	r2, #8
 8012d22:	4413      	add	r3, r2
 8012d24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d28:	681a      	ldr	r2, [r3, #0]
 8012d2a:	6a3b      	ldr	r3, [r7, #32]
 8012d2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d30:	685a      	ldr	r2, [r3, #4]
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	1ad2      	subs	r2, r2, r3
 8012d36:	2308      	movs	r3, #8
 8012d38:	005b      	lsls	r3, r3, #1
 8012d3a:	429a      	cmp	r2, r3
 8012d3c:	d922      	bls.n	8012d84 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	4413      	add	r3, r2
 8012d44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012d46:	69bb      	ldr	r3, [r7, #24]
 8012d48:	f003 0307 	and.w	r3, r3, #7
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d00d      	beq.n	8012d6c <pvPortMalloc+0x104>
	__asm volatile
 8012d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012d54:	b672      	cpsid	i
 8012d56:	f383 8811 	msr	BASEPRI, r3
 8012d5a:	f3bf 8f6f 	isb	sy
 8012d5e:	f3bf 8f4f 	dsb	sy
 8012d62:	b662      	cpsie	i
 8012d64:	613b      	str	r3, [r7, #16]
}
 8012d66:	bf00      	nop
 8012d68:	bf00      	nop
 8012d6a:	e7fd      	b.n	8012d68 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d6e:	685a      	ldr	r2, [r3, #4]
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	1ad2      	subs	r2, r2, r3
 8012d74:	69bb      	ldr	r3, [r7, #24]
 8012d76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012d7e:	69b8      	ldr	r0, [r7, #24]
 8012d80:	f000 f902 	bl	8012f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012d84:	4b1c      	ldr	r3, [pc, #112]	@ (8012df8 <pvPortMalloc+0x190>)
 8012d86:	681a      	ldr	r2, [r3, #0]
 8012d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012d8a:	685b      	ldr	r3, [r3, #4]
 8012d8c:	1ad3      	subs	r3, r2, r3
 8012d8e:	4a1a      	ldr	r2, [pc, #104]	@ (8012df8 <pvPortMalloc+0x190>)
 8012d90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012d92:	4b19      	ldr	r3, [pc, #100]	@ (8012df8 <pvPortMalloc+0x190>)
 8012d94:	681a      	ldr	r2, [r3, #0]
 8012d96:	4b1a      	ldr	r3, [pc, #104]	@ (8012e00 <pvPortMalloc+0x198>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d203      	bcs.n	8012da6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012d9e:	4b16      	ldr	r3, [pc, #88]	@ (8012df8 <pvPortMalloc+0x190>)
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	4a17      	ldr	r2, [pc, #92]	@ (8012e00 <pvPortMalloc+0x198>)
 8012da4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012da8:	685a      	ldr	r2, [r3, #4]
 8012daa:	4b12      	ldr	r3, [pc, #72]	@ (8012df4 <pvPortMalloc+0x18c>)
 8012dac:	681b      	ldr	r3, [r3, #0]
 8012dae:	431a      	orrs	r2, r3
 8012db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012db6:	2200      	movs	r2, #0
 8012db8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012dba:	f7fe fef7 	bl	8011bac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012dbe:	69fb      	ldr	r3, [r7, #28]
 8012dc0:	f003 0307 	and.w	r3, r3, #7
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d00d      	beq.n	8012de4 <pvPortMalloc+0x17c>
	__asm volatile
 8012dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012dcc:	b672      	cpsid	i
 8012dce:	f383 8811 	msr	BASEPRI, r3
 8012dd2:	f3bf 8f6f 	isb	sy
 8012dd6:	f3bf 8f4f 	dsb	sy
 8012dda:	b662      	cpsie	i
 8012ddc:	60fb      	str	r3, [r7, #12]
}
 8012dde:	bf00      	nop
 8012de0:	bf00      	nop
 8012de2:	e7fd      	b.n	8012de0 <pvPortMalloc+0x178>
	return pvReturn;
 8012de4:	69fb      	ldr	r3, [r7, #28]
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3728      	adds	r7, #40	@ 0x28
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
 8012dee:	bf00      	nop
 8012df0:	20004b68 	.word	0x20004b68
 8012df4:	20004b74 	.word	0x20004b74
 8012df8:	20004b6c 	.word	0x20004b6c
 8012dfc:	20004b60 	.word	0x20004b60
 8012e00:	20004b70 	.word	0x20004b70

08012e04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b086      	sub	sp, #24
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d04e      	beq.n	8012eb4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012e16:	2308      	movs	r3, #8
 8012e18:	425b      	negs	r3, r3
 8012e1a:	697a      	ldr	r2, [r7, #20]
 8012e1c:	4413      	add	r3, r2
 8012e1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012e20:	697b      	ldr	r3, [r7, #20]
 8012e22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	685a      	ldr	r2, [r3, #4]
 8012e28:	4b24      	ldr	r3, [pc, #144]	@ (8012ebc <vPortFree+0xb8>)
 8012e2a:	681b      	ldr	r3, [r3, #0]
 8012e2c:	4013      	ands	r3, r2
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d10d      	bne.n	8012e4e <vPortFree+0x4a>
	__asm volatile
 8012e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e36:	b672      	cpsid	i
 8012e38:	f383 8811 	msr	BASEPRI, r3
 8012e3c:	f3bf 8f6f 	isb	sy
 8012e40:	f3bf 8f4f 	dsb	sy
 8012e44:	b662      	cpsie	i
 8012e46:	60fb      	str	r3, [r7, #12]
}
 8012e48:	bf00      	nop
 8012e4a:	bf00      	nop
 8012e4c:	e7fd      	b.n	8012e4a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012e4e:	693b      	ldr	r3, [r7, #16]
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d00d      	beq.n	8012e72 <vPortFree+0x6e>
	__asm volatile
 8012e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012e5a:	b672      	cpsid	i
 8012e5c:	f383 8811 	msr	BASEPRI, r3
 8012e60:	f3bf 8f6f 	isb	sy
 8012e64:	f3bf 8f4f 	dsb	sy
 8012e68:	b662      	cpsie	i
 8012e6a:	60bb      	str	r3, [r7, #8]
}
 8012e6c:	bf00      	nop
 8012e6e:	bf00      	nop
 8012e70:	e7fd      	b.n	8012e6e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	685a      	ldr	r2, [r3, #4]
 8012e76:	4b11      	ldr	r3, [pc, #68]	@ (8012ebc <vPortFree+0xb8>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4013      	ands	r3, r2
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d019      	beq.n	8012eb4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012e80:	693b      	ldr	r3, [r7, #16]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d115      	bne.n	8012eb4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012e88:	693b      	ldr	r3, [r7, #16]
 8012e8a:	685a      	ldr	r2, [r3, #4]
 8012e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8012ebc <vPortFree+0xb8>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	43db      	mvns	r3, r3
 8012e92:	401a      	ands	r2, r3
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012e98:	f7fe fe7a 	bl	8011b90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012e9c:	693b      	ldr	r3, [r7, #16]
 8012e9e:	685a      	ldr	r2, [r3, #4]
 8012ea0:	4b07      	ldr	r3, [pc, #28]	@ (8012ec0 <vPortFree+0xbc>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	4413      	add	r3, r2
 8012ea6:	4a06      	ldr	r2, [pc, #24]	@ (8012ec0 <vPortFree+0xbc>)
 8012ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012eaa:	6938      	ldr	r0, [r7, #16]
 8012eac:	f000 f86c 	bl	8012f88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012eb0:	f7fe fe7c 	bl	8011bac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012eb4:	bf00      	nop
 8012eb6:	3718      	adds	r7, #24
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	20004b74 	.word	0x20004b74
 8012ec0:	20004b6c 	.word	0x20004b6c

08012ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b085      	sub	sp, #20
 8012ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012eca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8012ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012ed0:	4b27      	ldr	r3, [pc, #156]	@ (8012f70 <prvHeapInit+0xac>)
 8012ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	f003 0307 	and.w	r3, r3, #7
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d00c      	beq.n	8012ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	3307      	adds	r3, #7
 8012ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	f023 0307 	bic.w	r3, r3, #7
 8012eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012eec:	68ba      	ldr	r2, [r7, #8]
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	1ad3      	subs	r3, r2, r3
 8012ef2:	4a1f      	ldr	r2, [pc, #124]	@ (8012f70 <prvHeapInit+0xac>)
 8012ef4:	4413      	add	r3, r2
 8012ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012efc:	4a1d      	ldr	r2, [pc, #116]	@ (8012f74 <prvHeapInit+0xb0>)
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012f02:	4b1c      	ldr	r3, [pc, #112]	@ (8012f74 <prvHeapInit+0xb0>)
 8012f04:	2200      	movs	r2, #0
 8012f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	68ba      	ldr	r2, [r7, #8]
 8012f0c:	4413      	add	r3, r2
 8012f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012f10:	2208      	movs	r2, #8
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	1a9b      	subs	r3, r3, r2
 8012f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	f023 0307 	bic.w	r3, r3, #7
 8012f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	4a15      	ldr	r2, [pc, #84]	@ (8012f78 <prvHeapInit+0xb4>)
 8012f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012f26:	4b14      	ldr	r3, [pc, #80]	@ (8012f78 <prvHeapInit+0xb4>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012f2e:	4b12      	ldr	r3, [pc, #72]	@ (8012f78 <prvHeapInit+0xb4>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	2200      	movs	r2, #0
 8012f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012f3a:	683b      	ldr	r3, [r7, #0]
 8012f3c:	68fa      	ldr	r2, [r7, #12]
 8012f3e:	1ad2      	subs	r2, r2, r3
 8012f40:	683b      	ldr	r3, [r7, #0]
 8012f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012f44:	4b0c      	ldr	r3, [pc, #48]	@ (8012f78 <prvHeapInit+0xb4>)
 8012f46:	681a      	ldr	r2, [r3, #0]
 8012f48:	683b      	ldr	r3, [r7, #0]
 8012f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	685b      	ldr	r3, [r3, #4]
 8012f50:	4a0a      	ldr	r2, [pc, #40]	@ (8012f7c <prvHeapInit+0xb8>)
 8012f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	4a09      	ldr	r2, [pc, #36]	@ (8012f80 <prvHeapInit+0xbc>)
 8012f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012f5c:	4b09      	ldr	r3, [pc, #36]	@ (8012f84 <prvHeapInit+0xc0>)
 8012f5e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012f62:	601a      	str	r2, [r3, #0]
}
 8012f64:	bf00      	nop
 8012f66:	3714      	adds	r7, #20
 8012f68:	46bd      	mov	sp, r7
 8012f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6e:	4770      	bx	lr
 8012f70:	20000f60 	.word	0x20000f60
 8012f74:	20004b60 	.word	0x20004b60
 8012f78:	20004b68 	.word	0x20004b68
 8012f7c:	20004b70 	.word	0x20004b70
 8012f80:	20004b6c 	.word	0x20004b6c
 8012f84:	20004b74 	.word	0x20004b74

08012f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012f88:	b480      	push	{r7}
 8012f8a:	b085      	sub	sp, #20
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012f90:	4b28      	ldr	r3, [pc, #160]	@ (8013034 <prvInsertBlockIntoFreeList+0xac>)
 8012f92:	60fb      	str	r3, [r7, #12]
 8012f94:	e002      	b.n	8012f9c <prvInsertBlockIntoFreeList+0x14>
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	60fb      	str	r3, [r7, #12]
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	687a      	ldr	r2, [r7, #4]
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d8f7      	bhi.n	8012f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	68ba      	ldr	r2, [r7, #8]
 8012fb0:	4413      	add	r3, r2
 8012fb2:	687a      	ldr	r2, [r7, #4]
 8012fb4:	429a      	cmp	r2, r3
 8012fb6:	d108      	bne.n	8012fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	685a      	ldr	r2, [r3, #4]
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	685b      	ldr	r3, [r3, #4]
 8012fc0:	441a      	add	r2, r3
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	685b      	ldr	r3, [r3, #4]
 8012fd2:	68ba      	ldr	r2, [r7, #8]
 8012fd4:	441a      	add	r2, r3
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d118      	bne.n	8013010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	681a      	ldr	r2, [r3, #0]
 8012fe2:	4b15      	ldr	r3, [pc, #84]	@ (8013038 <prvInsertBlockIntoFreeList+0xb0>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d00d      	beq.n	8013006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	685a      	ldr	r2, [r3, #4]
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	441a      	add	r2, r3
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	681b      	ldr	r3, [r3, #0]
 8012ffe:	681a      	ldr	r2, [r3, #0]
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	601a      	str	r2, [r3, #0]
 8013004:	e008      	b.n	8013018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013006:	4b0c      	ldr	r3, [pc, #48]	@ (8013038 <prvInsertBlockIntoFreeList+0xb0>)
 8013008:	681a      	ldr	r2, [r3, #0]
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	601a      	str	r2, [r3, #0]
 801300e:	e003      	b.n	8013018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	681a      	ldr	r2, [r3, #0]
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013018:	68fa      	ldr	r2, [r7, #12]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	429a      	cmp	r2, r3
 801301e:	d002      	beq.n	8013026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	687a      	ldr	r2, [r7, #4]
 8013024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013026:	bf00      	nop
 8013028:	3714      	adds	r7, #20
 801302a:	46bd      	mov	sp, r7
 801302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013030:	4770      	bx	lr
 8013032:	bf00      	nop
 8013034:	20004b60 	.word	0x20004b60
 8013038:	20004b68 	.word	0x20004b68

0801303c <siprintf>:
 801303c:	b40e      	push	{r1, r2, r3}
 801303e:	b500      	push	{lr}
 8013040:	b09c      	sub	sp, #112	@ 0x70
 8013042:	ab1d      	add	r3, sp, #116	@ 0x74
 8013044:	9002      	str	r0, [sp, #8]
 8013046:	9006      	str	r0, [sp, #24]
 8013048:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801304c:	4809      	ldr	r0, [pc, #36]	@ (8013074 <siprintf+0x38>)
 801304e:	9107      	str	r1, [sp, #28]
 8013050:	9104      	str	r1, [sp, #16]
 8013052:	4909      	ldr	r1, [pc, #36]	@ (8013078 <siprintf+0x3c>)
 8013054:	f853 2b04 	ldr.w	r2, [r3], #4
 8013058:	9105      	str	r1, [sp, #20]
 801305a:	6800      	ldr	r0, [r0, #0]
 801305c:	9301      	str	r3, [sp, #4]
 801305e:	a902      	add	r1, sp, #8
 8013060:	f000 f9f8 	bl	8013454 <_svfiprintf_r>
 8013064:	9b02      	ldr	r3, [sp, #8]
 8013066:	2200      	movs	r2, #0
 8013068:	701a      	strb	r2, [r3, #0]
 801306a:	b01c      	add	sp, #112	@ 0x70
 801306c:	f85d eb04 	ldr.w	lr, [sp], #4
 8013070:	b003      	add	sp, #12
 8013072:	4770      	bx	lr
 8013074:	20000044 	.word	0x20000044
 8013078:	ffff0208 	.word	0xffff0208

0801307c <memset>:
 801307c:	4402      	add	r2, r0
 801307e:	4603      	mov	r3, r0
 8013080:	4293      	cmp	r3, r2
 8013082:	d100      	bne.n	8013086 <memset+0xa>
 8013084:	4770      	bx	lr
 8013086:	f803 1b01 	strb.w	r1, [r3], #1
 801308a:	e7f9      	b.n	8013080 <memset+0x4>

0801308c <_reclaim_reent>:
 801308c:	4b29      	ldr	r3, [pc, #164]	@ (8013134 <_reclaim_reent+0xa8>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	4283      	cmp	r3, r0
 8013092:	b570      	push	{r4, r5, r6, lr}
 8013094:	4604      	mov	r4, r0
 8013096:	d04b      	beq.n	8013130 <_reclaim_reent+0xa4>
 8013098:	69c3      	ldr	r3, [r0, #28]
 801309a:	b1ab      	cbz	r3, 80130c8 <_reclaim_reent+0x3c>
 801309c:	68db      	ldr	r3, [r3, #12]
 801309e:	b16b      	cbz	r3, 80130bc <_reclaim_reent+0x30>
 80130a0:	2500      	movs	r5, #0
 80130a2:	69e3      	ldr	r3, [r4, #28]
 80130a4:	68db      	ldr	r3, [r3, #12]
 80130a6:	5959      	ldr	r1, [r3, r5]
 80130a8:	2900      	cmp	r1, #0
 80130aa:	d13b      	bne.n	8013124 <_reclaim_reent+0x98>
 80130ac:	3504      	adds	r5, #4
 80130ae:	2d80      	cmp	r5, #128	@ 0x80
 80130b0:	d1f7      	bne.n	80130a2 <_reclaim_reent+0x16>
 80130b2:	69e3      	ldr	r3, [r4, #28]
 80130b4:	4620      	mov	r0, r4
 80130b6:	68d9      	ldr	r1, [r3, #12]
 80130b8:	f000 f878 	bl	80131ac <_free_r>
 80130bc:	69e3      	ldr	r3, [r4, #28]
 80130be:	6819      	ldr	r1, [r3, #0]
 80130c0:	b111      	cbz	r1, 80130c8 <_reclaim_reent+0x3c>
 80130c2:	4620      	mov	r0, r4
 80130c4:	f000 f872 	bl	80131ac <_free_r>
 80130c8:	6961      	ldr	r1, [r4, #20]
 80130ca:	b111      	cbz	r1, 80130d2 <_reclaim_reent+0x46>
 80130cc:	4620      	mov	r0, r4
 80130ce:	f000 f86d 	bl	80131ac <_free_r>
 80130d2:	69e1      	ldr	r1, [r4, #28]
 80130d4:	b111      	cbz	r1, 80130dc <_reclaim_reent+0x50>
 80130d6:	4620      	mov	r0, r4
 80130d8:	f000 f868 	bl	80131ac <_free_r>
 80130dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80130de:	b111      	cbz	r1, 80130e6 <_reclaim_reent+0x5a>
 80130e0:	4620      	mov	r0, r4
 80130e2:	f000 f863 	bl	80131ac <_free_r>
 80130e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80130e8:	b111      	cbz	r1, 80130f0 <_reclaim_reent+0x64>
 80130ea:	4620      	mov	r0, r4
 80130ec:	f000 f85e 	bl	80131ac <_free_r>
 80130f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80130f2:	b111      	cbz	r1, 80130fa <_reclaim_reent+0x6e>
 80130f4:	4620      	mov	r0, r4
 80130f6:	f000 f859 	bl	80131ac <_free_r>
 80130fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80130fc:	b111      	cbz	r1, 8013104 <_reclaim_reent+0x78>
 80130fe:	4620      	mov	r0, r4
 8013100:	f000 f854 	bl	80131ac <_free_r>
 8013104:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8013106:	b111      	cbz	r1, 801310e <_reclaim_reent+0x82>
 8013108:	4620      	mov	r0, r4
 801310a:	f000 f84f 	bl	80131ac <_free_r>
 801310e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8013110:	b111      	cbz	r1, 8013118 <_reclaim_reent+0x8c>
 8013112:	4620      	mov	r0, r4
 8013114:	f000 f84a 	bl	80131ac <_free_r>
 8013118:	6a23      	ldr	r3, [r4, #32]
 801311a:	b14b      	cbz	r3, 8013130 <_reclaim_reent+0xa4>
 801311c:	4620      	mov	r0, r4
 801311e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013122:	4718      	bx	r3
 8013124:	680e      	ldr	r6, [r1, #0]
 8013126:	4620      	mov	r0, r4
 8013128:	f000 f840 	bl	80131ac <_free_r>
 801312c:	4631      	mov	r1, r6
 801312e:	e7bb      	b.n	80130a8 <_reclaim_reent+0x1c>
 8013130:	bd70      	pop	{r4, r5, r6, pc}
 8013132:	bf00      	nop
 8013134:	20000044 	.word	0x20000044

08013138 <__errno>:
 8013138:	4b01      	ldr	r3, [pc, #4]	@ (8013140 <__errno+0x8>)
 801313a:	6818      	ldr	r0, [r3, #0]
 801313c:	4770      	bx	lr
 801313e:	bf00      	nop
 8013140:	20000044 	.word	0x20000044

08013144 <__libc_init_array>:
 8013144:	b570      	push	{r4, r5, r6, lr}
 8013146:	4d0d      	ldr	r5, [pc, #52]	@ (801317c <__libc_init_array+0x38>)
 8013148:	4c0d      	ldr	r4, [pc, #52]	@ (8013180 <__libc_init_array+0x3c>)
 801314a:	1b64      	subs	r4, r4, r5
 801314c:	10a4      	asrs	r4, r4, #2
 801314e:	2600      	movs	r6, #0
 8013150:	42a6      	cmp	r6, r4
 8013152:	d109      	bne.n	8013168 <__libc_init_array+0x24>
 8013154:	4d0b      	ldr	r5, [pc, #44]	@ (8013184 <__libc_init_array+0x40>)
 8013156:	4c0c      	ldr	r4, [pc, #48]	@ (8013188 <__libc_init_array+0x44>)
 8013158:	f000 fc66 	bl	8013a28 <_init>
 801315c:	1b64      	subs	r4, r4, r5
 801315e:	10a4      	asrs	r4, r4, #2
 8013160:	2600      	movs	r6, #0
 8013162:	42a6      	cmp	r6, r4
 8013164:	d105      	bne.n	8013172 <__libc_init_array+0x2e>
 8013166:	bd70      	pop	{r4, r5, r6, pc}
 8013168:	f855 3b04 	ldr.w	r3, [r5], #4
 801316c:	4798      	blx	r3
 801316e:	3601      	adds	r6, #1
 8013170:	e7ee      	b.n	8013150 <__libc_init_array+0xc>
 8013172:	f855 3b04 	ldr.w	r3, [r5], #4
 8013176:	4798      	blx	r3
 8013178:	3601      	adds	r6, #1
 801317a:	e7f2      	b.n	8013162 <__libc_init_array+0x1e>
 801317c:	08015b28 	.word	0x08015b28
 8013180:	08015b28 	.word	0x08015b28
 8013184:	08015b28 	.word	0x08015b28
 8013188:	08015b2c 	.word	0x08015b2c

0801318c <__retarget_lock_acquire_recursive>:
 801318c:	4770      	bx	lr

0801318e <__retarget_lock_release_recursive>:
 801318e:	4770      	bx	lr

08013190 <memcpy>:
 8013190:	440a      	add	r2, r1
 8013192:	4291      	cmp	r1, r2
 8013194:	f100 33ff 	add.w	r3, r0, #4294967295
 8013198:	d100      	bne.n	801319c <memcpy+0xc>
 801319a:	4770      	bx	lr
 801319c:	b510      	push	{r4, lr}
 801319e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80131a6:	4291      	cmp	r1, r2
 80131a8:	d1f9      	bne.n	801319e <memcpy+0xe>
 80131aa:	bd10      	pop	{r4, pc}

080131ac <_free_r>:
 80131ac:	b538      	push	{r3, r4, r5, lr}
 80131ae:	4605      	mov	r5, r0
 80131b0:	2900      	cmp	r1, #0
 80131b2:	d041      	beq.n	8013238 <_free_r+0x8c>
 80131b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80131b8:	1f0c      	subs	r4, r1, #4
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	bfb8      	it	lt
 80131be:	18e4      	addlt	r4, r4, r3
 80131c0:	f000 f8e0 	bl	8013384 <__malloc_lock>
 80131c4:	4a1d      	ldr	r2, [pc, #116]	@ (801323c <_free_r+0x90>)
 80131c6:	6813      	ldr	r3, [r2, #0]
 80131c8:	b933      	cbnz	r3, 80131d8 <_free_r+0x2c>
 80131ca:	6063      	str	r3, [r4, #4]
 80131cc:	6014      	str	r4, [r2, #0]
 80131ce:	4628      	mov	r0, r5
 80131d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80131d4:	f000 b8dc 	b.w	8013390 <__malloc_unlock>
 80131d8:	42a3      	cmp	r3, r4
 80131da:	d908      	bls.n	80131ee <_free_r+0x42>
 80131dc:	6820      	ldr	r0, [r4, #0]
 80131de:	1821      	adds	r1, r4, r0
 80131e0:	428b      	cmp	r3, r1
 80131e2:	bf01      	itttt	eq
 80131e4:	6819      	ldreq	r1, [r3, #0]
 80131e6:	685b      	ldreq	r3, [r3, #4]
 80131e8:	1809      	addeq	r1, r1, r0
 80131ea:	6021      	streq	r1, [r4, #0]
 80131ec:	e7ed      	b.n	80131ca <_free_r+0x1e>
 80131ee:	461a      	mov	r2, r3
 80131f0:	685b      	ldr	r3, [r3, #4]
 80131f2:	b10b      	cbz	r3, 80131f8 <_free_r+0x4c>
 80131f4:	42a3      	cmp	r3, r4
 80131f6:	d9fa      	bls.n	80131ee <_free_r+0x42>
 80131f8:	6811      	ldr	r1, [r2, #0]
 80131fa:	1850      	adds	r0, r2, r1
 80131fc:	42a0      	cmp	r0, r4
 80131fe:	d10b      	bne.n	8013218 <_free_r+0x6c>
 8013200:	6820      	ldr	r0, [r4, #0]
 8013202:	4401      	add	r1, r0
 8013204:	1850      	adds	r0, r2, r1
 8013206:	4283      	cmp	r3, r0
 8013208:	6011      	str	r1, [r2, #0]
 801320a:	d1e0      	bne.n	80131ce <_free_r+0x22>
 801320c:	6818      	ldr	r0, [r3, #0]
 801320e:	685b      	ldr	r3, [r3, #4]
 8013210:	6053      	str	r3, [r2, #4]
 8013212:	4408      	add	r0, r1
 8013214:	6010      	str	r0, [r2, #0]
 8013216:	e7da      	b.n	80131ce <_free_r+0x22>
 8013218:	d902      	bls.n	8013220 <_free_r+0x74>
 801321a:	230c      	movs	r3, #12
 801321c:	602b      	str	r3, [r5, #0]
 801321e:	e7d6      	b.n	80131ce <_free_r+0x22>
 8013220:	6820      	ldr	r0, [r4, #0]
 8013222:	1821      	adds	r1, r4, r0
 8013224:	428b      	cmp	r3, r1
 8013226:	bf04      	itt	eq
 8013228:	6819      	ldreq	r1, [r3, #0]
 801322a:	685b      	ldreq	r3, [r3, #4]
 801322c:	6063      	str	r3, [r4, #4]
 801322e:	bf04      	itt	eq
 8013230:	1809      	addeq	r1, r1, r0
 8013232:	6021      	streq	r1, [r4, #0]
 8013234:	6054      	str	r4, [r2, #4]
 8013236:	e7ca      	b.n	80131ce <_free_r+0x22>
 8013238:	bd38      	pop	{r3, r4, r5, pc}
 801323a:	bf00      	nop
 801323c:	20004cbc 	.word	0x20004cbc

08013240 <sbrk_aligned>:
 8013240:	b570      	push	{r4, r5, r6, lr}
 8013242:	4e0f      	ldr	r6, [pc, #60]	@ (8013280 <sbrk_aligned+0x40>)
 8013244:	460c      	mov	r4, r1
 8013246:	6831      	ldr	r1, [r6, #0]
 8013248:	4605      	mov	r5, r0
 801324a:	b911      	cbnz	r1, 8013252 <sbrk_aligned+0x12>
 801324c:	f000 fba6 	bl	801399c <_sbrk_r>
 8013250:	6030      	str	r0, [r6, #0]
 8013252:	4621      	mov	r1, r4
 8013254:	4628      	mov	r0, r5
 8013256:	f000 fba1 	bl	801399c <_sbrk_r>
 801325a:	1c43      	adds	r3, r0, #1
 801325c:	d103      	bne.n	8013266 <sbrk_aligned+0x26>
 801325e:	f04f 34ff 	mov.w	r4, #4294967295
 8013262:	4620      	mov	r0, r4
 8013264:	bd70      	pop	{r4, r5, r6, pc}
 8013266:	1cc4      	adds	r4, r0, #3
 8013268:	f024 0403 	bic.w	r4, r4, #3
 801326c:	42a0      	cmp	r0, r4
 801326e:	d0f8      	beq.n	8013262 <sbrk_aligned+0x22>
 8013270:	1a21      	subs	r1, r4, r0
 8013272:	4628      	mov	r0, r5
 8013274:	f000 fb92 	bl	801399c <_sbrk_r>
 8013278:	3001      	adds	r0, #1
 801327a:	d1f2      	bne.n	8013262 <sbrk_aligned+0x22>
 801327c:	e7ef      	b.n	801325e <sbrk_aligned+0x1e>
 801327e:	bf00      	nop
 8013280:	20004cb8 	.word	0x20004cb8

08013284 <_malloc_r>:
 8013284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013288:	1ccd      	adds	r5, r1, #3
 801328a:	f025 0503 	bic.w	r5, r5, #3
 801328e:	3508      	adds	r5, #8
 8013290:	2d0c      	cmp	r5, #12
 8013292:	bf38      	it	cc
 8013294:	250c      	movcc	r5, #12
 8013296:	2d00      	cmp	r5, #0
 8013298:	4606      	mov	r6, r0
 801329a:	db01      	blt.n	80132a0 <_malloc_r+0x1c>
 801329c:	42a9      	cmp	r1, r5
 801329e:	d904      	bls.n	80132aa <_malloc_r+0x26>
 80132a0:	230c      	movs	r3, #12
 80132a2:	6033      	str	r3, [r6, #0]
 80132a4:	2000      	movs	r0, #0
 80132a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013380 <_malloc_r+0xfc>
 80132ae:	f000 f869 	bl	8013384 <__malloc_lock>
 80132b2:	f8d8 3000 	ldr.w	r3, [r8]
 80132b6:	461c      	mov	r4, r3
 80132b8:	bb44      	cbnz	r4, 801330c <_malloc_r+0x88>
 80132ba:	4629      	mov	r1, r5
 80132bc:	4630      	mov	r0, r6
 80132be:	f7ff ffbf 	bl	8013240 <sbrk_aligned>
 80132c2:	1c43      	adds	r3, r0, #1
 80132c4:	4604      	mov	r4, r0
 80132c6:	d158      	bne.n	801337a <_malloc_r+0xf6>
 80132c8:	f8d8 4000 	ldr.w	r4, [r8]
 80132cc:	4627      	mov	r7, r4
 80132ce:	2f00      	cmp	r7, #0
 80132d0:	d143      	bne.n	801335a <_malloc_r+0xd6>
 80132d2:	2c00      	cmp	r4, #0
 80132d4:	d04b      	beq.n	801336e <_malloc_r+0xea>
 80132d6:	6823      	ldr	r3, [r4, #0]
 80132d8:	4639      	mov	r1, r7
 80132da:	4630      	mov	r0, r6
 80132dc:	eb04 0903 	add.w	r9, r4, r3
 80132e0:	f000 fb5c 	bl	801399c <_sbrk_r>
 80132e4:	4581      	cmp	r9, r0
 80132e6:	d142      	bne.n	801336e <_malloc_r+0xea>
 80132e8:	6821      	ldr	r1, [r4, #0]
 80132ea:	1a6d      	subs	r5, r5, r1
 80132ec:	4629      	mov	r1, r5
 80132ee:	4630      	mov	r0, r6
 80132f0:	f7ff ffa6 	bl	8013240 <sbrk_aligned>
 80132f4:	3001      	adds	r0, #1
 80132f6:	d03a      	beq.n	801336e <_malloc_r+0xea>
 80132f8:	6823      	ldr	r3, [r4, #0]
 80132fa:	442b      	add	r3, r5
 80132fc:	6023      	str	r3, [r4, #0]
 80132fe:	f8d8 3000 	ldr.w	r3, [r8]
 8013302:	685a      	ldr	r2, [r3, #4]
 8013304:	bb62      	cbnz	r2, 8013360 <_malloc_r+0xdc>
 8013306:	f8c8 7000 	str.w	r7, [r8]
 801330a:	e00f      	b.n	801332c <_malloc_r+0xa8>
 801330c:	6822      	ldr	r2, [r4, #0]
 801330e:	1b52      	subs	r2, r2, r5
 8013310:	d420      	bmi.n	8013354 <_malloc_r+0xd0>
 8013312:	2a0b      	cmp	r2, #11
 8013314:	d917      	bls.n	8013346 <_malloc_r+0xc2>
 8013316:	1961      	adds	r1, r4, r5
 8013318:	42a3      	cmp	r3, r4
 801331a:	6025      	str	r5, [r4, #0]
 801331c:	bf18      	it	ne
 801331e:	6059      	strne	r1, [r3, #4]
 8013320:	6863      	ldr	r3, [r4, #4]
 8013322:	bf08      	it	eq
 8013324:	f8c8 1000 	streq.w	r1, [r8]
 8013328:	5162      	str	r2, [r4, r5]
 801332a:	604b      	str	r3, [r1, #4]
 801332c:	4630      	mov	r0, r6
 801332e:	f000 f82f 	bl	8013390 <__malloc_unlock>
 8013332:	f104 000b 	add.w	r0, r4, #11
 8013336:	1d23      	adds	r3, r4, #4
 8013338:	f020 0007 	bic.w	r0, r0, #7
 801333c:	1ac2      	subs	r2, r0, r3
 801333e:	bf1c      	itt	ne
 8013340:	1a1b      	subne	r3, r3, r0
 8013342:	50a3      	strne	r3, [r4, r2]
 8013344:	e7af      	b.n	80132a6 <_malloc_r+0x22>
 8013346:	6862      	ldr	r2, [r4, #4]
 8013348:	42a3      	cmp	r3, r4
 801334a:	bf0c      	ite	eq
 801334c:	f8c8 2000 	streq.w	r2, [r8]
 8013350:	605a      	strne	r2, [r3, #4]
 8013352:	e7eb      	b.n	801332c <_malloc_r+0xa8>
 8013354:	4623      	mov	r3, r4
 8013356:	6864      	ldr	r4, [r4, #4]
 8013358:	e7ae      	b.n	80132b8 <_malloc_r+0x34>
 801335a:	463c      	mov	r4, r7
 801335c:	687f      	ldr	r7, [r7, #4]
 801335e:	e7b6      	b.n	80132ce <_malloc_r+0x4a>
 8013360:	461a      	mov	r2, r3
 8013362:	685b      	ldr	r3, [r3, #4]
 8013364:	42a3      	cmp	r3, r4
 8013366:	d1fb      	bne.n	8013360 <_malloc_r+0xdc>
 8013368:	2300      	movs	r3, #0
 801336a:	6053      	str	r3, [r2, #4]
 801336c:	e7de      	b.n	801332c <_malloc_r+0xa8>
 801336e:	230c      	movs	r3, #12
 8013370:	6033      	str	r3, [r6, #0]
 8013372:	4630      	mov	r0, r6
 8013374:	f000 f80c 	bl	8013390 <__malloc_unlock>
 8013378:	e794      	b.n	80132a4 <_malloc_r+0x20>
 801337a:	6005      	str	r5, [r0, #0]
 801337c:	e7d6      	b.n	801332c <_malloc_r+0xa8>
 801337e:	bf00      	nop
 8013380:	20004cbc 	.word	0x20004cbc

08013384 <__malloc_lock>:
 8013384:	4801      	ldr	r0, [pc, #4]	@ (801338c <__malloc_lock+0x8>)
 8013386:	f7ff bf01 	b.w	801318c <__retarget_lock_acquire_recursive>
 801338a:	bf00      	nop
 801338c:	20004cb4 	.word	0x20004cb4

08013390 <__malloc_unlock>:
 8013390:	4801      	ldr	r0, [pc, #4]	@ (8013398 <__malloc_unlock+0x8>)
 8013392:	f7ff befc 	b.w	801318e <__retarget_lock_release_recursive>
 8013396:	bf00      	nop
 8013398:	20004cb4 	.word	0x20004cb4

0801339c <__ssputs_r>:
 801339c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80133a0:	688e      	ldr	r6, [r1, #8]
 80133a2:	461f      	mov	r7, r3
 80133a4:	42be      	cmp	r6, r7
 80133a6:	680b      	ldr	r3, [r1, #0]
 80133a8:	4682      	mov	sl, r0
 80133aa:	460c      	mov	r4, r1
 80133ac:	4690      	mov	r8, r2
 80133ae:	d82d      	bhi.n	801340c <__ssputs_r+0x70>
 80133b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80133b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80133b8:	d026      	beq.n	8013408 <__ssputs_r+0x6c>
 80133ba:	6965      	ldr	r5, [r4, #20]
 80133bc:	6909      	ldr	r1, [r1, #16]
 80133be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80133c2:	eba3 0901 	sub.w	r9, r3, r1
 80133c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80133ca:	1c7b      	adds	r3, r7, #1
 80133cc:	444b      	add	r3, r9
 80133ce:	106d      	asrs	r5, r5, #1
 80133d0:	429d      	cmp	r5, r3
 80133d2:	bf38      	it	cc
 80133d4:	461d      	movcc	r5, r3
 80133d6:	0553      	lsls	r3, r2, #21
 80133d8:	d527      	bpl.n	801342a <__ssputs_r+0x8e>
 80133da:	4629      	mov	r1, r5
 80133dc:	f7ff ff52 	bl	8013284 <_malloc_r>
 80133e0:	4606      	mov	r6, r0
 80133e2:	b360      	cbz	r0, 801343e <__ssputs_r+0xa2>
 80133e4:	6921      	ldr	r1, [r4, #16]
 80133e6:	464a      	mov	r2, r9
 80133e8:	f7ff fed2 	bl	8013190 <memcpy>
 80133ec:	89a3      	ldrh	r3, [r4, #12]
 80133ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80133f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80133f6:	81a3      	strh	r3, [r4, #12]
 80133f8:	6126      	str	r6, [r4, #16]
 80133fa:	6165      	str	r5, [r4, #20]
 80133fc:	444e      	add	r6, r9
 80133fe:	eba5 0509 	sub.w	r5, r5, r9
 8013402:	6026      	str	r6, [r4, #0]
 8013404:	60a5      	str	r5, [r4, #8]
 8013406:	463e      	mov	r6, r7
 8013408:	42be      	cmp	r6, r7
 801340a:	d900      	bls.n	801340e <__ssputs_r+0x72>
 801340c:	463e      	mov	r6, r7
 801340e:	6820      	ldr	r0, [r4, #0]
 8013410:	4632      	mov	r2, r6
 8013412:	4641      	mov	r1, r8
 8013414:	f000 faa8 	bl	8013968 <memmove>
 8013418:	68a3      	ldr	r3, [r4, #8]
 801341a:	1b9b      	subs	r3, r3, r6
 801341c:	60a3      	str	r3, [r4, #8]
 801341e:	6823      	ldr	r3, [r4, #0]
 8013420:	4433      	add	r3, r6
 8013422:	6023      	str	r3, [r4, #0]
 8013424:	2000      	movs	r0, #0
 8013426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801342a:	462a      	mov	r2, r5
 801342c:	f000 fac6 	bl	80139bc <_realloc_r>
 8013430:	4606      	mov	r6, r0
 8013432:	2800      	cmp	r0, #0
 8013434:	d1e0      	bne.n	80133f8 <__ssputs_r+0x5c>
 8013436:	6921      	ldr	r1, [r4, #16]
 8013438:	4650      	mov	r0, sl
 801343a:	f7ff feb7 	bl	80131ac <_free_r>
 801343e:	230c      	movs	r3, #12
 8013440:	f8ca 3000 	str.w	r3, [sl]
 8013444:	89a3      	ldrh	r3, [r4, #12]
 8013446:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801344a:	81a3      	strh	r3, [r4, #12]
 801344c:	f04f 30ff 	mov.w	r0, #4294967295
 8013450:	e7e9      	b.n	8013426 <__ssputs_r+0x8a>
	...

08013454 <_svfiprintf_r>:
 8013454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013458:	4698      	mov	r8, r3
 801345a:	898b      	ldrh	r3, [r1, #12]
 801345c:	061b      	lsls	r3, r3, #24
 801345e:	b09d      	sub	sp, #116	@ 0x74
 8013460:	4607      	mov	r7, r0
 8013462:	460d      	mov	r5, r1
 8013464:	4614      	mov	r4, r2
 8013466:	d510      	bpl.n	801348a <_svfiprintf_r+0x36>
 8013468:	690b      	ldr	r3, [r1, #16]
 801346a:	b973      	cbnz	r3, 801348a <_svfiprintf_r+0x36>
 801346c:	2140      	movs	r1, #64	@ 0x40
 801346e:	f7ff ff09 	bl	8013284 <_malloc_r>
 8013472:	6028      	str	r0, [r5, #0]
 8013474:	6128      	str	r0, [r5, #16]
 8013476:	b930      	cbnz	r0, 8013486 <_svfiprintf_r+0x32>
 8013478:	230c      	movs	r3, #12
 801347a:	603b      	str	r3, [r7, #0]
 801347c:	f04f 30ff 	mov.w	r0, #4294967295
 8013480:	b01d      	add	sp, #116	@ 0x74
 8013482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013486:	2340      	movs	r3, #64	@ 0x40
 8013488:	616b      	str	r3, [r5, #20]
 801348a:	2300      	movs	r3, #0
 801348c:	9309      	str	r3, [sp, #36]	@ 0x24
 801348e:	2320      	movs	r3, #32
 8013490:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013494:	f8cd 800c 	str.w	r8, [sp, #12]
 8013498:	2330      	movs	r3, #48	@ 0x30
 801349a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013638 <_svfiprintf_r+0x1e4>
 801349e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80134a2:	f04f 0901 	mov.w	r9, #1
 80134a6:	4623      	mov	r3, r4
 80134a8:	469a      	mov	sl, r3
 80134aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80134ae:	b10a      	cbz	r2, 80134b4 <_svfiprintf_r+0x60>
 80134b0:	2a25      	cmp	r2, #37	@ 0x25
 80134b2:	d1f9      	bne.n	80134a8 <_svfiprintf_r+0x54>
 80134b4:	ebba 0b04 	subs.w	fp, sl, r4
 80134b8:	d00b      	beq.n	80134d2 <_svfiprintf_r+0x7e>
 80134ba:	465b      	mov	r3, fp
 80134bc:	4622      	mov	r2, r4
 80134be:	4629      	mov	r1, r5
 80134c0:	4638      	mov	r0, r7
 80134c2:	f7ff ff6b 	bl	801339c <__ssputs_r>
 80134c6:	3001      	adds	r0, #1
 80134c8:	f000 80a7 	beq.w	801361a <_svfiprintf_r+0x1c6>
 80134cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80134ce:	445a      	add	r2, fp
 80134d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80134d2:	f89a 3000 	ldrb.w	r3, [sl]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	f000 809f 	beq.w	801361a <_svfiprintf_r+0x1c6>
 80134dc:	2300      	movs	r3, #0
 80134de:	f04f 32ff 	mov.w	r2, #4294967295
 80134e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80134e6:	f10a 0a01 	add.w	sl, sl, #1
 80134ea:	9304      	str	r3, [sp, #16]
 80134ec:	9307      	str	r3, [sp, #28]
 80134ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80134f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80134f4:	4654      	mov	r4, sl
 80134f6:	2205      	movs	r2, #5
 80134f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80134fc:	484e      	ldr	r0, [pc, #312]	@ (8013638 <_svfiprintf_r+0x1e4>)
 80134fe:	f7ec fe87 	bl	8000210 <memchr>
 8013502:	9a04      	ldr	r2, [sp, #16]
 8013504:	b9d8      	cbnz	r0, 801353e <_svfiprintf_r+0xea>
 8013506:	06d0      	lsls	r0, r2, #27
 8013508:	bf44      	itt	mi
 801350a:	2320      	movmi	r3, #32
 801350c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013510:	0711      	lsls	r1, r2, #28
 8013512:	bf44      	itt	mi
 8013514:	232b      	movmi	r3, #43	@ 0x2b
 8013516:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801351a:	f89a 3000 	ldrb.w	r3, [sl]
 801351e:	2b2a      	cmp	r3, #42	@ 0x2a
 8013520:	d015      	beq.n	801354e <_svfiprintf_r+0xfa>
 8013522:	9a07      	ldr	r2, [sp, #28]
 8013524:	4654      	mov	r4, sl
 8013526:	2000      	movs	r0, #0
 8013528:	f04f 0c0a 	mov.w	ip, #10
 801352c:	4621      	mov	r1, r4
 801352e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013532:	3b30      	subs	r3, #48	@ 0x30
 8013534:	2b09      	cmp	r3, #9
 8013536:	d94b      	bls.n	80135d0 <_svfiprintf_r+0x17c>
 8013538:	b1b0      	cbz	r0, 8013568 <_svfiprintf_r+0x114>
 801353a:	9207      	str	r2, [sp, #28]
 801353c:	e014      	b.n	8013568 <_svfiprintf_r+0x114>
 801353e:	eba0 0308 	sub.w	r3, r0, r8
 8013542:	fa09 f303 	lsl.w	r3, r9, r3
 8013546:	4313      	orrs	r3, r2
 8013548:	9304      	str	r3, [sp, #16]
 801354a:	46a2      	mov	sl, r4
 801354c:	e7d2      	b.n	80134f4 <_svfiprintf_r+0xa0>
 801354e:	9b03      	ldr	r3, [sp, #12]
 8013550:	1d19      	adds	r1, r3, #4
 8013552:	681b      	ldr	r3, [r3, #0]
 8013554:	9103      	str	r1, [sp, #12]
 8013556:	2b00      	cmp	r3, #0
 8013558:	bfbb      	ittet	lt
 801355a:	425b      	neglt	r3, r3
 801355c:	f042 0202 	orrlt.w	r2, r2, #2
 8013560:	9307      	strge	r3, [sp, #28]
 8013562:	9307      	strlt	r3, [sp, #28]
 8013564:	bfb8      	it	lt
 8013566:	9204      	strlt	r2, [sp, #16]
 8013568:	7823      	ldrb	r3, [r4, #0]
 801356a:	2b2e      	cmp	r3, #46	@ 0x2e
 801356c:	d10a      	bne.n	8013584 <_svfiprintf_r+0x130>
 801356e:	7863      	ldrb	r3, [r4, #1]
 8013570:	2b2a      	cmp	r3, #42	@ 0x2a
 8013572:	d132      	bne.n	80135da <_svfiprintf_r+0x186>
 8013574:	9b03      	ldr	r3, [sp, #12]
 8013576:	1d1a      	adds	r2, r3, #4
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	9203      	str	r2, [sp, #12]
 801357c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013580:	3402      	adds	r4, #2
 8013582:	9305      	str	r3, [sp, #20]
 8013584:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013648 <_svfiprintf_r+0x1f4>
 8013588:	7821      	ldrb	r1, [r4, #0]
 801358a:	2203      	movs	r2, #3
 801358c:	4650      	mov	r0, sl
 801358e:	f7ec fe3f 	bl	8000210 <memchr>
 8013592:	b138      	cbz	r0, 80135a4 <_svfiprintf_r+0x150>
 8013594:	9b04      	ldr	r3, [sp, #16]
 8013596:	eba0 000a 	sub.w	r0, r0, sl
 801359a:	2240      	movs	r2, #64	@ 0x40
 801359c:	4082      	lsls	r2, r0
 801359e:	4313      	orrs	r3, r2
 80135a0:	3401      	adds	r4, #1
 80135a2:	9304      	str	r3, [sp, #16]
 80135a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80135a8:	4824      	ldr	r0, [pc, #144]	@ (801363c <_svfiprintf_r+0x1e8>)
 80135aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80135ae:	2206      	movs	r2, #6
 80135b0:	f7ec fe2e 	bl	8000210 <memchr>
 80135b4:	2800      	cmp	r0, #0
 80135b6:	d036      	beq.n	8013626 <_svfiprintf_r+0x1d2>
 80135b8:	4b21      	ldr	r3, [pc, #132]	@ (8013640 <_svfiprintf_r+0x1ec>)
 80135ba:	bb1b      	cbnz	r3, 8013604 <_svfiprintf_r+0x1b0>
 80135bc:	9b03      	ldr	r3, [sp, #12]
 80135be:	3307      	adds	r3, #7
 80135c0:	f023 0307 	bic.w	r3, r3, #7
 80135c4:	3308      	adds	r3, #8
 80135c6:	9303      	str	r3, [sp, #12]
 80135c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80135ca:	4433      	add	r3, r6
 80135cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80135ce:	e76a      	b.n	80134a6 <_svfiprintf_r+0x52>
 80135d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80135d4:	460c      	mov	r4, r1
 80135d6:	2001      	movs	r0, #1
 80135d8:	e7a8      	b.n	801352c <_svfiprintf_r+0xd8>
 80135da:	2300      	movs	r3, #0
 80135dc:	3401      	adds	r4, #1
 80135de:	9305      	str	r3, [sp, #20]
 80135e0:	4619      	mov	r1, r3
 80135e2:	f04f 0c0a 	mov.w	ip, #10
 80135e6:	4620      	mov	r0, r4
 80135e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80135ec:	3a30      	subs	r2, #48	@ 0x30
 80135ee:	2a09      	cmp	r2, #9
 80135f0:	d903      	bls.n	80135fa <_svfiprintf_r+0x1a6>
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d0c6      	beq.n	8013584 <_svfiprintf_r+0x130>
 80135f6:	9105      	str	r1, [sp, #20]
 80135f8:	e7c4      	b.n	8013584 <_svfiprintf_r+0x130>
 80135fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80135fe:	4604      	mov	r4, r0
 8013600:	2301      	movs	r3, #1
 8013602:	e7f0      	b.n	80135e6 <_svfiprintf_r+0x192>
 8013604:	ab03      	add	r3, sp, #12
 8013606:	9300      	str	r3, [sp, #0]
 8013608:	462a      	mov	r2, r5
 801360a:	4b0e      	ldr	r3, [pc, #56]	@ (8013644 <_svfiprintf_r+0x1f0>)
 801360c:	a904      	add	r1, sp, #16
 801360e:	4638      	mov	r0, r7
 8013610:	f3af 8000 	nop.w
 8013614:	1c42      	adds	r2, r0, #1
 8013616:	4606      	mov	r6, r0
 8013618:	d1d6      	bne.n	80135c8 <_svfiprintf_r+0x174>
 801361a:	89ab      	ldrh	r3, [r5, #12]
 801361c:	065b      	lsls	r3, r3, #25
 801361e:	f53f af2d 	bmi.w	801347c <_svfiprintf_r+0x28>
 8013622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013624:	e72c      	b.n	8013480 <_svfiprintf_r+0x2c>
 8013626:	ab03      	add	r3, sp, #12
 8013628:	9300      	str	r3, [sp, #0]
 801362a:	462a      	mov	r2, r5
 801362c:	4b05      	ldr	r3, [pc, #20]	@ (8013644 <_svfiprintf_r+0x1f0>)
 801362e:	a904      	add	r1, sp, #16
 8013630:	4638      	mov	r0, r7
 8013632:	f000 f879 	bl	8013728 <_printf_i>
 8013636:	e7ed      	b.n	8013614 <_svfiprintf_r+0x1c0>
 8013638:	08015aec 	.word	0x08015aec
 801363c:	08015af6 	.word	0x08015af6
 8013640:	00000000 	.word	0x00000000
 8013644:	0801339d 	.word	0x0801339d
 8013648:	08015af2 	.word	0x08015af2

0801364c <_printf_common>:
 801364c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013650:	4616      	mov	r6, r2
 8013652:	4698      	mov	r8, r3
 8013654:	688a      	ldr	r2, [r1, #8]
 8013656:	690b      	ldr	r3, [r1, #16]
 8013658:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801365c:	4293      	cmp	r3, r2
 801365e:	bfb8      	it	lt
 8013660:	4613      	movlt	r3, r2
 8013662:	6033      	str	r3, [r6, #0]
 8013664:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8013668:	4607      	mov	r7, r0
 801366a:	460c      	mov	r4, r1
 801366c:	b10a      	cbz	r2, 8013672 <_printf_common+0x26>
 801366e:	3301      	adds	r3, #1
 8013670:	6033      	str	r3, [r6, #0]
 8013672:	6823      	ldr	r3, [r4, #0]
 8013674:	0699      	lsls	r1, r3, #26
 8013676:	bf42      	ittt	mi
 8013678:	6833      	ldrmi	r3, [r6, #0]
 801367a:	3302      	addmi	r3, #2
 801367c:	6033      	strmi	r3, [r6, #0]
 801367e:	6825      	ldr	r5, [r4, #0]
 8013680:	f015 0506 	ands.w	r5, r5, #6
 8013684:	d106      	bne.n	8013694 <_printf_common+0x48>
 8013686:	f104 0a19 	add.w	sl, r4, #25
 801368a:	68e3      	ldr	r3, [r4, #12]
 801368c:	6832      	ldr	r2, [r6, #0]
 801368e:	1a9b      	subs	r3, r3, r2
 8013690:	42ab      	cmp	r3, r5
 8013692:	dc26      	bgt.n	80136e2 <_printf_common+0x96>
 8013694:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8013698:	6822      	ldr	r2, [r4, #0]
 801369a:	3b00      	subs	r3, #0
 801369c:	bf18      	it	ne
 801369e:	2301      	movne	r3, #1
 80136a0:	0692      	lsls	r2, r2, #26
 80136a2:	d42b      	bmi.n	80136fc <_printf_common+0xb0>
 80136a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80136a8:	4641      	mov	r1, r8
 80136aa:	4638      	mov	r0, r7
 80136ac:	47c8      	blx	r9
 80136ae:	3001      	adds	r0, #1
 80136b0:	d01e      	beq.n	80136f0 <_printf_common+0xa4>
 80136b2:	6823      	ldr	r3, [r4, #0]
 80136b4:	6922      	ldr	r2, [r4, #16]
 80136b6:	f003 0306 	and.w	r3, r3, #6
 80136ba:	2b04      	cmp	r3, #4
 80136bc:	bf02      	ittt	eq
 80136be:	68e5      	ldreq	r5, [r4, #12]
 80136c0:	6833      	ldreq	r3, [r6, #0]
 80136c2:	1aed      	subeq	r5, r5, r3
 80136c4:	68a3      	ldr	r3, [r4, #8]
 80136c6:	bf0c      	ite	eq
 80136c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80136cc:	2500      	movne	r5, #0
 80136ce:	4293      	cmp	r3, r2
 80136d0:	bfc4      	itt	gt
 80136d2:	1a9b      	subgt	r3, r3, r2
 80136d4:	18ed      	addgt	r5, r5, r3
 80136d6:	2600      	movs	r6, #0
 80136d8:	341a      	adds	r4, #26
 80136da:	42b5      	cmp	r5, r6
 80136dc:	d11a      	bne.n	8013714 <_printf_common+0xc8>
 80136de:	2000      	movs	r0, #0
 80136e0:	e008      	b.n	80136f4 <_printf_common+0xa8>
 80136e2:	2301      	movs	r3, #1
 80136e4:	4652      	mov	r2, sl
 80136e6:	4641      	mov	r1, r8
 80136e8:	4638      	mov	r0, r7
 80136ea:	47c8      	blx	r9
 80136ec:	3001      	adds	r0, #1
 80136ee:	d103      	bne.n	80136f8 <_printf_common+0xac>
 80136f0:	f04f 30ff 	mov.w	r0, #4294967295
 80136f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80136f8:	3501      	adds	r5, #1
 80136fa:	e7c6      	b.n	801368a <_printf_common+0x3e>
 80136fc:	18e1      	adds	r1, r4, r3
 80136fe:	1c5a      	adds	r2, r3, #1
 8013700:	2030      	movs	r0, #48	@ 0x30
 8013702:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8013706:	4422      	add	r2, r4
 8013708:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801370c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013710:	3302      	adds	r3, #2
 8013712:	e7c7      	b.n	80136a4 <_printf_common+0x58>
 8013714:	2301      	movs	r3, #1
 8013716:	4622      	mov	r2, r4
 8013718:	4641      	mov	r1, r8
 801371a:	4638      	mov	r0, r7
 801371c:	47c8      	blx	r9
 801371e:	3001      	adds	r0, #1
 8013720:	d0e6      	beq.n	80136f0 <_printf_common+0xa4>
 8013722:	3601      	adds	r6, #1
 8013724:	e7d9      	b.n	80136da <_printf_common+0x8e>
	...

08013728 <_printf_i>:
 8013728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801372c:	7e0f      	ldrb	r7, [r1, #24]
 801372e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013730:	2f78      	cmp	r7, #120	@ 0x78
 8013732:	4691      	mov	r9, r2
 8013734:	4680      	mov	r8, r0
 8013736:	460c      	mov	r4, r1
 8013738:	469a      	mov	sl, r3
 801373a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801373e:	d807      	bhi.n	8013750 <_printf_i+0x28>
 8013740:	2f62      	cmp	r7, #98	@ 0x62
 8013742:	d80a      	bhi.n	801375a <_printf_i+0x32>
 8013744:	2f00      	cmp	r7, #0
 8013746:	f000 80d2 	beq.w	80138ee <_printf_i+0x1c6>
 801374a:	2f58      	cmp	r7, #88	@ 0x58
 801374c:	f000 80b9 	beq.w	80138c2 <_printf_i+0x19a>
 8013750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013754:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8013758:	e03a      	b.n	80137d0 <_printf_i+0xa8>
 801375a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801375e:	2b15      	cmp	r3, #21
 8013760:	d8f6      	bhi.n	8013750 <_printf_i+0x28>
 8013762:	a101      	add	r1, pc, #4	@ (adr r1, 8013768 <_printf_i+0x40>)
 8013764:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013768:	080137c1 	.word	0x080137c1
 801376c:	080137d5 	.word	0x080137d5
 8013770:	08013751 	.word	0x08013751
 8013774:	08013751 	.word	0x08013751
 8013778:	08013751 	.word	0x08013751
 801377c:	08013751 	.word	0x08013751
 8013780:	080137d5 	.word	0x080137d5
 8013784:	08013751 	.word	0x08013751
 8013788:	08013751 	.word	0x08013751
 801378c:	08013751 	.word	0x08013751
 8013790:	08013751 	.word	0x08013751
 8013794:	080138d5 	.word	0x080138d5
 8013798:	080137ff 	.word	0x080137ff
 801379c:	0801388f 	.word	0x0801388f
 80137a0:	08013751 	.word	0x08013751
 80137a4:	08013751 	.word	0x08013751
 80137a8:	080138f7 	.word	0x080138f7
 80137ac:	08013751 	.word	0x08013751
 80137b0:	080137ff 	.word	0x080137ff
 80137b4:	08013751 	.word	0x08013751
 80137b8:	08013751 	.word	0x08013751
 80137bc:	08013897 	.word	0x08013897
 80137c0:	6833      	ldr	r3, [r6, #0]
 80137c2:	1d1a      	adds	r2, r3, #4
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	6032      	str	r2, [r6, #0]
 80137c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80137cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80137d0:	2301      	movs	r3, #1
 80137d2:	e09d      	b.n	8013910 <_printf_i+0x1e8>
 80137d4:	6833      	ldr	r3, [r6, #0]
 80137d6:	6820      	ldr	r0, [r4, #0]
 80137d8:	1d19      	adds	r1, r3, #4
 80137da:	6031      	str	r1, [r6, #0]
 80137dc:	0606      	lsls	r6, r0, #24
 80137de:	d501      	bpl.n	80137e4 <_printf_i+0xbc>
 80137e0:	681d      	ldr	r5, [r3, #0]
 80137e2:	e003      	b.n	80137ec <_printf_i+0xc4>
 80137e4:	0645      	lsls	r5, r0, #25
 80137e6:	d5fb      	bpl.n	80137e0 <_printf_i+0xb8>
 80137e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80137ec:	2d00      	cmp	r5, #0
 80137ee:	da03      	bge.n	80137f8 <_printf_i+0xd0>
 80137f0:	232d      	movs	r3, #45	@ 0x2d
 80137f2:	426d      	negs	r5, r5
 80137f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80137f8:	4859      	ldr	r0, [pc, #356]	@ (8013960 <_printf_i+0x238>)
 80137fa:	230a      	movs	r3, #10
 80137fc:	e011      	b.n	8013822 <_printf_i+0xfa>
 80137fe:	6821      	ldr	r1, [r4, #0]
 8013800:	6833      	ldr	r3, [r6, #0]
 8013802:	0608      	lsls	r0, r1, #24
 8013804:	f853 5b04 	ldr.w	r5, [r3], #4
 8013808:	d402      	bmi.n	8013810 <_printf_i+0xe8>
 801380a:	0649      	lsls	r1, r1, #25
 801380c:	bf48      	it	mi
 801380e:	b2ad      	uxthmi	r5, r5
 8013810:	2f6f      	cmp	r7, #111	@ 0x6f
 8013812:	4853      	ldr	r0, [pc, #332]	@ (8013960 <_printf_i+0x238>)
 8013814:	6033      	str	r3, [r6, #0]
 8013816:	bf14      	ite	ne
 8013818:	230a      	movne	r3, #10
 801381a:	2308      	moveq	r3, #8
 801381c:	2100      	movs	r1, #0
 801381e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8013822:	6866      	ldr	r6, [r4, #4]
 8013824:	60a6      	str	r6, [r4, #8]
 8013826:	2e00      	cmp	r6, #0
 8013828:	bfa2      	ittt	ge
 801382a:	6821      	ldrge	r1, [r4, #0]
 801382c:	f021 0104 	bicge.w	r1, r1, #4
 8013830:	6021      	strge	r1, [r4, #0]
 8013832:	b90d      	cbnz	r5, 8013838 <_printf_i+0x110>
 8013834:	2e00      	cmp	r6, #0
 8013836:	d04b      	beq.n	80138d0 <_printf_i+0x1a8>
 8013838:	4616      	mov	r6, r2
 801383a:	fbb5 f1f3 	udiv	r1, r5, r3
 801383e:	fb03 5711 	mls	r7, r3, r1, r5
 8013842:	5dc7      	ldrb	r7, [r0, r7]
 8013844:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013848:	462f      	mov	r7, r5
 801384a:	42bb      	cmp	r3, r7
 801384c:	460d      	mov	r5, r1
 801384e:	d9f4      	bls.n	801383a <_printf_i+0x112>
 8013850:	2b08      	cmp	r3, #8
 8013852:	d10b      	bne.n	801386c <_printf_i+0x144>
 8013854:	6823      	ldr	r3, [r4, #0]
 8013856:	07df      	lsls	r7, r3, #31
 8013858:	d508      	bpl.n	801386c <_printf_i+0x144>
 801385a:	6923      	ldr	r3, [r4, #16]
 801385c:	6861      	ldr	r1, [r4, #4]
 801385e:	4299      	cmp	r1, r3
 8013860:	bfde      	ittt	le
 8013862:	2330      	movle	r3, #48	@ 0x30
 8013864:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013868:	f106 36ff 	addle.w	r6, r6, #4294967295
 801386c:	1b92      	subs	r2, r2, r6
 801386e:	6122      	str	r2, [r4, #16]
 8013870:	f8cd a000 	str.w	sl, [sp]
 8013874:	464b      	mov	r3, r9
 8013876:	aa03      	add	r2, sp, #12
 8013878:	4621      	mov	r1, r4
 801387a:	4640      	mov	r0, r8
 801387c:	f7ff fee6 	bl	801364c <_printf_common>
 8013880:	3001      	adds	r0, #1
 8013882:	d14a      	bne.n	801391a <_printf_i+0x1f2>
 8013884:	f04f 30ff 	mov.w	r0, #4294967295
 8013888:	b004      	add	sp, #16
 801388a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801388e:	6823      	ldr	r3, [r4, #0]
 8013890:	f043 0320 	orr.w	r3, r3, #32
 8013894:	6023      	str	r3, [r4, #0]
 8013896:	4833      	ldr	r0, [pc, #204]	@ (8013964 <_printf_i+0x23c>)
 8013898:	2778      	movs	r7, #120	@ 0x78
 801389a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801389e:	6823      	ldr	r3, [r4, #0]
 80138a0:	6831      	ldr	r1, [r6, #0]
 80138a2:	061f      	lsls	r7, r3, #24
 80138a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80138a8:	d402      	bmi.n	80138b0 <_printf_i+0x188>
 80138aa:	065f      	lsls	r7, r3, #25
 80138ac:	bf48      	it	mi
 80138ae:	b2ad      	uxthmi	r5, r5
 80138b0:	6031      	str	r1, [r6, #0]
 80138b2:	07d9      	lsls	r1, r3, #31
 80138b4:	bf44      	itt	mi
 80138b6:	f043 0320 	orrmi.w	r3, r3, #32
 80138ba:	6023      	strmi	r3, [r4, #0]
 80138bc:	b11d      	cbz	r5, 80138c6 <_printf_i+0x19e>
 80138be:	2310      	movs	r3, #16
 80138c0:	e7ac      	b.n	801381c <_printf_i+0xf4>
 80138c2:	4827      	ldr	r0, [pc, #156]	@ (8013960 <_printf_i+0x238>)
 80138c4:	e7e9      	b.n	801389a <_printf_i+0x172>
 80138c6:	6823      	ldr	r3, [r4, #0]
 80138c8:	f023 0320 	bic.w	r3, r3, #32
 80138cc:	6023      	str	r3, [r4, #0]
 80138ce:	e7f6      	b.n	80138be <_printf_i+0x196>
 80138d0:	4616      	mov	r6, r2
 80138d2:	e7bd      	b.n	8013850 <_printf_i+0x128>
 80138d4:	6833      	ldr	r3, [r6, #0]
 80138d6:	6825      	ldr	r5, [r4, #0]
 80138d8:	6961      	ldr	r1, [r4, #20]
 80138da:	1d18      	adds	r0, r3, #4
 80138dc:	6030      	str	r0, [r6, #0]
 80138de:	062e      	lsls	r6, r5, #24
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	d501      	bpl.n	80138e8 <_printf_i+0x1c0>
 80138e4:	6019      	str	r1, [r3, #0]
 80138e6:	e002      	b.n	80138ee <_printf_i+0x1c6>
 80138e8:	0668      	lsls	r0, r5, #25
 80138ea:	d5fb      	bpl.n	80138e4 <_printf_i+0x1bc>
 80138ec:	8019      	strh	r1, [r3, #0]
 80138ee:	2300      	movs	r3, #0
 80138f0:	6123      	str	r3, [r4, #16]
 80138f2:	4616      	mov	r6, r2
 80138f4:	e7bc      	b.n	8013870 <_printf_i+0x148>
 80138f6:	6833      	ldr	r3, [r6, #0]
 80138f8:	1d1a      	adds	r2, r3, #4
 80138fa:	6032      	str	r2, [r6, #0]
 80138fc:	681e      	ldr	r6, [r3, #0]
 80138fe:	6862      	ldr	r2, [r4, #4]
 8013900:	2100      	movs	r1, #0
 8013902:	4630      	mov	r0, r6
 8013904:	f7ec fc84 	bl	8000210 <memchr>
 8013908:	b108      	cbz	r0, 801390e <_printf_i+0x1e6>
 801390a:	1b80      	subs	r0, r0, r6
 801390c:	6060      	str	r0, [r4, #4]
 801390e:	6863      	ldr	r3, [r4, #4]
 8013910:	6123      	str	r3, [r4, #16]
 8013912:	2300      	movs	r3, #0
 8013914:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013918:	e7aa      	b.n	8013870 <_printf_i+0x148>
 801391a:	6923      	ldr	r3, [r4, #16]
 801391c:	4632      	mov	r2, r6
 801391e:	4649      	mov	r1, r9
 8013920:	4640      	mov	r0, r8
 8013922:	47d0      	blx	sl
 8013924:	3001      	adds	r0, #1
 8013926:	d0ad      	beq.n	8013884 <_printf_i+0x15c>
 8013928:	6823      	ldr	r3, [r4, #0]
 801392a:	079b      	lsls	r3, r3, #30
 801392c:	d413      	bmi.n	8013956 <_printf_i+0x22e>
 801392e:	68e0      	ldr	r0, [r4, #12]
 8013930:	9b03      	ldr	r3, [sp, #12]
 8013932:	4298      	cmp	r0, r3
 8013934:	bfb8      	it	lt
 8013936:	4618      	movlt	r0, r3
 8013938:	e7a6      	b.n	8013888 <_printf_i+0x160>
 801393a:	2301      	movs	r3, #1
 801393c:	4632      	mov	r2, r6
 801393e:	4649      	mov	r1, r9
 8013940:	4640      	mov	r0, r8
 8013942:	47d0      	blx	sl
 8013944:	3001      	adds	r0, #1
 8013946:	d09d      	beq.n	8013884 <_printf_i+0x15c>
 8013948:	3501      	adds	r5, #1
 801394a:	68e3      	ldr	r3, [r4, #12]
 801394c:	9903      	ldr	r1, [sp, #12]
 801394e:	1a5b      	subs	r3, r3, r1
 8013950:	42ab      	cmp	r3, r5
 8013952:	dcf2      	bgt.n	801393a <_printf_i+0x212>
 8013954:	e7eb      	b.n	801392e <_printf_i+0x206>
 8013956:	2500      	movs	r5, #0
 8013958:	f104 0619 	add.w	r6, r4, #25
 801395c:	e7f5      	b.n	801394a <_printf_i+0x222>
 801395e:	bf00      	nop
 8013960:	08015afd 	.word	0x08015afd
 8013964:	08015b0e 	.word	0x08015b0e

08013968 <memmove>:
 8013968:	4288      	cmp	r0, r1
 801396a:	b510      	push	{r4, lr}
 801396c:	eb01 0402 	add.w	r4, r1, r2
 8013970:	d902      	bls.n	8013978 <memmove+0x10>
 8013972:	4284      	cmp	r4, r0
 8013974:	4623      	mov	r3, r4
 8013976:	d807      	bhi.n	8013988 <memmove+0x20>
 8013978:	1e43      	subs	r3, r0, #1
 801397a:	42a1      	cmp	r1, r4
 801397c:	d008      	beq.n	8013990 <memmove+0x28>
 801397e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013982:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013986:	e7f8      	b.n	801397a <memmove+0x12>
 8013988:	4402      	add	r2, r0
 801398a:	4601      	mov	r1, r0
 801398c:	428a      	cmp	r2, r1
 801398e:	d100      	bne.n	8013992 <memmove+0x2a>
 8013990:	bd10      	pop	{r4, pc}
 8013992:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013996:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801399a:	e7f7      	b.n	801398c <memmove+0x24>

0801399c <_sbrk_r>:
 801399c:	b538      	push	{r3, r4, r5, lr}
 801399e:	4d06      	ldr	r5, [pc, #24]	@ (80139b8 <_sbrk_r+0x1c>)
 80139a0:	2300      	movs	r3, #0
 80139a2:	4604      	mov	r4, r0
 80139a4:	4608      	mov	r0, r1
 80139a6:	602b      	str	r3, [r5, #0]
 80139a8:	f7f0 fa58 	bl	8003e5c <_sbrk>
 80139ac:	1c43      	adds	r3, r0, #1
 80139ae:	d102      	bne.n	80139b6 <_sbrk_r+0x1a>
 80139b0:	682b      	ldr	r3, [r5, #0]
 80139b2:	b103      	cbz	r3, 80139b6 <_sbrk_r+0x1a>
 80139b4:	6023      	str	r3, [r4, #0]
 80139b6:	bd38      	pop	{r3, r4, r5, pc}
 80139b8:	20004cb0 	.word	0x20004cb0

080139bc <_realloc_r>:
 80139bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80139c0:	4680      	mov	r8, r0
 80139c2:	4615      	mov	r5, r2
 80139c4:	460c      	mov	r4, r1
 80139c6:	b921      	cbnz	r1, 80139d2 <_realloc_r+0x16>
 80139c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139cc:	4611      	mov	r1, r2
 80139ce:	f7ff bc59 	b.w	8013284 <_malloc_r>
 80139d2:	b92a      	cbnz	r2, 80139e0 <_realloc_r+0x24>
 80139d4:	f7ff fbea 	bl	80131ac <_free_r>
 80139d8:	2400      	movs	r4, #0
 80139da:	4620      	mov	r0, r4
 80139dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80139e0:	f000 f81a 	bl	8013a18 <_malloc_usable_size_r>
 80139e4:	4285      	cmp	r5, r0
 80139e6:	4606      	mov	r6, r0
 80139e8:	d802      	bhi.n	80139f0 <_realloc_r+0x34>
 80139ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80139ee:	d8f4      	bhi.n	80139da <_realloc_r+0x1e>
 80139f0:	4629      	mov	r1, r5
 80139f2:	4640      	mov	r0, r8
 80139f4:	f7ff fc46 	bl	8013284 <_malloc_r>
 80139f8:	4607      	mov	r7, r0
 80139fa:	2800      	cmp	r0, #0
 80139fc:	d0ec      	beq.n	80139d8 <_realloc_r+0x1c>
 80139fe:	42b5      	cmp	r5, r6
 8013a00:	462a      	mov	r2, r5
 8013a02:	4621      	mov	r1, r4
 8013a04:	bf28      	it	cs
 8013a06:	4632      	movcs	r2, r6
 8013a08:	f7ff fbc2 	bl	8013190 <memcpy>
 8013a0c:	4621      	mov	r1, r4
 8013a0e:	4640      	mov	r0, r8
 8013a10:	f7ff fbcc 	bl	80131ac <_free_r>
 8013a14:	463c      	mov	r4, r7
 8013a16:	e7e0      	b.n	80139da <_realloc_r+0x1e>

08013a18 <_malloc_usable_size_r>:
 8013a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013a1c:	1f18      	subs	r0, r3, #4
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	bfbc      	itt	lt
 8013a22:	580b      	ldrlt	r3, [r1, r0]
 8013a24:	18c0      	addlt	r0, r0, r3
 8013a26:	4770      	bx	lr

08013a28 <_init>:
 8013a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a2a:	bf00      	nop
 8013a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a2e:	bc08      	pop	{r3}
 8013a30:	469e      	mov	lr, r3
 8013a32:	4770      	bx	lr

08013a34 <_fini>:
 8013a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013a36:	bf00      	nop
 8013a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013a3a:	bc08      	pop	{r3}
 8013a3c:	469e      	mov	lr, r3
 8013a3e:	4770      	bx	lr
