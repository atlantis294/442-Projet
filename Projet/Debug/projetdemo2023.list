
projetdemo2023.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00037f54  0800b7b0  0800b7b0  0001b7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08043704  08043704  00060090  2**0
                  CONTENTS
  4 .ARM          00000008  08043704  08043704  00053704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804370c  0804370c  00060090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804370c  0804370c  0005370c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08043710  08043710  00053710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08043714  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad4  20000090  080437a4  00060090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b64  080437a4  00060b64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000600c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029264  00000000  00000000  00060103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005e96  00000000  00000000  00089367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000021b0  00000000  00000000  0008f200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a01  00000000  00000000  000913b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e5d7  00000000  00000000  00092db1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e559  00000000  00000000  000c1388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e2ae  00000000  00000000  000ef8e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009134  00000000  00000000  001fdb90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00206cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b798 	.word	0x0800b798

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	0800b798 	.word	0x0800b798

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ce:	4b21      	ldr	r3, [pc, #132]	; (8000654 <MX_ADC1_Init+0x98>)
 80005d0:	4a21      	ldr	r2, [pc, #132]	; (8000658 <MX_ADC1_Init+0x9c>)
 80005d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005d4:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <MX_ADC1_Init+0x98>)
 80005d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005dc:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_ADC1_Init+0x98>)
 80005de:	2200      	movs	r2, #0
 80005e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005e8:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_ADC1_Init+0x98>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ee:	4b19      	ldr	r3, [pc, #100]	; (8000654 <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_ADC1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005fc:	4b15      	ldr	r3, [pc, #84]	; (8000654 <MX_ADC1_Init+0x98>)
 80005fe:	4a17      	ldr	r2, [pc, #92]	; (800065c <MX_ADC1_Init+0xa0>)
 8000600:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_ADC1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_ADC1_Init+0x98>)
 800060a:	2201      	movs	r2, #1
 800060c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_ADC1_Init+0x98>)
 8000618:	2201      	movs	r2, #1
 800061a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <MX_ADC1_Init+0x98>)
 800061e:	f004 fa23 	bl	8004a68 <HAL_ADC_Init>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000628:	f001 fd64 	bl	80020f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800062c:	2300      	movs	r3, #0
 800062e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000630:	2301      	movs	r3, #1
 8000632:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000638:	463b      	mov	r3, r7
 800063a:	4619      	mov	r1, r3
 800063c:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_ADC1_Init+0x98>)
 800063e:	f004 fbbd 	bl	8004dbc <HAL_ADC_ConfigChannel>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000648:	f001 fd54 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000ac 	.word	0x200000ac
 8000658:	40012000 	.word	0x40012000
 800065c:	0f000001 	.word	0x0f000001

08000660 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000666:	463b      	mov	r3, r7
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <MX_ADC3_Init+0x98>)
 8000674:	4a21      	ldr	r2, [pc, #132]	; (80006fc <MX_ADC3_Init+0x9c>)
 8000676:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000678:	4b1f      	ldr	r3, [pc, #124]	; (80006f8 <MX_ADC3_Init+0x98>)
 800067a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800067e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <MX_ADC3_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000686:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <MX_ADC3_Init+0x98>)
 8000688:	2200      	movs	r2, #0
 800068a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800068c:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_ADC3_Init+0x98>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000692:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <MX_ADC3_Init+0x98>)
 8000694:	2200      	movs	r2, #0
 8000696:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800069a:	4b17      	ldr	r3, [pc, #92]	; (80006f8 <MX_ADC3_Init+0x98>)
 800069c:	2200      	movs	r2, #0
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006a2:	4a17      	ldr	r2, [pc, #92]	; (8000700 <MX_ADC3_Init+0xa0>)
 80006a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006bc:	2201      	movs	r2, #1
 80006be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006c2:	f004 f9d1 	bl	8004a68 <HAL_ADC_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80006cc:	f001 fd12 	bl	80020f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006d0:	2306      	movs	r3, #6
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d4:	2301      	movs	r3, #1
 80006d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006dc:	463b      	mov	r3, r7
 80006de:	4619      	mov	r1, r3
 80006e0:	4805      	ldr	r0, [pc, #20]	; (80006f8 <MX_ADC3_Init+0x98>)
 80006e2:	f004 fb6b 	bl	8004dbc <HAL_ADC_ConfigChannel>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80006ec:	f001 fd02 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	200000f4 	.word	0x200000f4
 80006fc:	40012200 	.word	0x40012200
 8000700:	0f000001 	.word	0x0f000001

08000704 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08c      	sub	sp, #48	; 0x30
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070c:	f107 031c 	add.w	r3, r7, #28
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]
 800071a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <HAL_ADC_MspInit+0xc8>)
 8000722:	4293      	cmp	r3, r2
 8000724:	d124      	bne.n	8000770 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000726:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072a:	4a29      	ldr	r2, [pc, #164]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 800072c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000730:	6453      	str	r3, [r2, #68]	; 0x44
 8000732:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800073a:	61bb      	str	r3, [r7, #24]
 800073c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6313      	str	r3, [r2, #48]	; 0x30
 800074a:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	617b      	str	r3, [r7, #20]
 8000754:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000756:	2301      	movs	r3, #1
 8000758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075a:	2303      	movs	r3, #3
 800075c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	481a      	ldr	r0, [pc, #104]	; (80007d4 <HAL_ADC_MspInit+0xd0>)
 800076a:	f005 fc93 	bl	8006094 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800076e:	e029      	b.n	80007c4 <HAL_ADC_MspInit+0xc0>
  else if(adcHandle->Instance==ADC3)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <HAL_ADC_MspInit+0xd4>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d124      	bne.n	80007c4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800077a:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 800077c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077e:	4a14      	ldr	r2, [pc, #80]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000780:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000784:	6453      	str	r3, [r2, #68]	; 0x44
 8000786:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800078e:	613b      	str	r3, [r7, #16]
 8000790:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a0e      	ldr	r2, [pc, #56]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 8000798:	f043 0320 	orr.w	r3, r3, #32
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <HAL_ADC_MspInit+0xcc>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0320 	and.w	r3, r3, #32
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 80007aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b0:	2303      	movs	r3, #3
 80007b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <HAL_ADC_MspInit+0xd8>)
 80007c0:	f005 fc68 	bl	8006094 <HAL_GPIO_Init>
}
 80007c4:	bf00      	nop
 80007c6:	3730      	adds	r7, #48	; 0x30
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40012000 	.word	0x40012000
 80007d0:	40023800 	.word	0x40023800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40012200 	.word	0x40012200
 80007dc:	40021400 	.word	0x40021400

080007e0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007e6:	463b      	mov	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007ee:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_DAC_Init+0x4c>)
 80007f0:	4a0f      	ldr	r2, [pc, #60]	; (8000830 <MX_DAC_Init+0x50>)
 80007f2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007f4:	480d      	ldr	r0, [pc, #52]	; (800082c <MX_DAC_Init+0x4c>)
 80007f6:	f004 fe13 	bl	8005420 <HAL_DAC_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000800:	f001 fc78 	bl	80020f4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000804:	2300      	movs	r3, #0
 8000806:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800080c:	463b      	mov	r3, r7
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_DAC_Init+0x4c>)
 8000814:	f004 fe8a 	bl	800552c <HAL_DAC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800081e:	f001 fc69 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000013c 	.word	0x2000013c
 8000830:	40007400 	.word	0x40007400

08000834 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <HAL_DAC_MspInit+0x84>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d12b      	bne.n	80008ae <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_DAC_MspInit+0x88>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <HAL_DAC_MspInit+0x88>)
 800085c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000860:	6413      	str	r3, [r2, #64]	; 0x40
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_DAC_MspInit+0x88>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086e:	4b13      	ldr	r3, [pc, #76]	; (80008bc <HAL_DAC_MspInit+0x88>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a12      	ldr	r2, [pc, #72]	; (80008bc <HAL_DAC_MspInit+0x88>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_DAC_MspInit+0x88>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000886:	2310      	movs	r3, #16
 8000888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	4619      	mov	r1, r3
 8000898:	4809      	ldr	r0, [pc, #36]	; (80008c0 <HAL_DAC_MspInit+0x8c>)
 800089a:	f005 fbfb 	bl	8006094 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	210f      	movs	r1, #15
 80008a2:	2036      	movs	r0, #54	; 0x36
 80008a4:	f004 fd92 	bl	80053cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008a8:	2036      	movs	r0, #54	; 0x36
 80008aa:	f004 fdab 	bl	8005404 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80008ae:	bf00      	nop
 80008b0:	3728      	adds	r7, #40	; 0x28
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40007400 	.word	0x40007400
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000

080008c4 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008c8:	4b15      	ldr	r3, [pc, #84]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008ca:	4a16      	ldr	r2, [pc, #88]	; (8000924 <MX_DMA2D_Init+0x60>)
 80008cc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <MX_DMA2D_Init+0x5c>)
 80008fa:	f005 f82f 	bl	800595c <HAL_DMA2D_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000904:	f001 fbf6 	bl	80020f4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000908:	2101      	movs	r1, #1
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_DMA2D_Init+0x5c>)
 800090c:	f005 fa94 	bl	8005e38 <HAL_DMA2D_ConfigLayer>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000916:	f001 fbed 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000150 	.word	0x20000150
 8000924:	4002b000 	.word	0x4002b000

08000928 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <HAL_DMA2D_MspInit+0x44>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d113      	bne.n	8000962 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_DMA2D_MspInit+0x48>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a0c      	ldr	r2, [pc, #48]	; (8000970 <HAL_DMA2D_MspInit+0x48>)
 8000940:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b0a      	ldr	r3, [pc, #40]	; (8000970 <HAL_DMA2D_MspInit+0x48>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	205a      	movs	r0, #90	; 0x5a
 8000958:	f004 fd38 	bl	80053cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800095c:	205a      	movs	r0, #90	; 0x5a
 800095e:	f004 fd51 	bl	8005404 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	4002b000 	.word	0x4002b000
 8000970:	40023800 	.word	0x40023800

08000974 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800098c:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <MX_FMC_Init+0x98>)
 800098e:	4a20      	ldr	r2, [pc, #128]	; (8000a10 <MX_FMC_Init+0x9c>)
 8000990:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000992:	4b1e      	ldr	r3, [pc, #120]	; (8000a0c <MX_FMC_Init+0x98>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <MX_FMC_Init+0x98>)
 800099a:	2200      	movs	r2, #0
 800099c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <MX_FMC_Init+0x98>)
 80009a0:	2204      	movs	r2, #4
 80009a2:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <MX_FMC_Init+0x98>)
 80009a6:	2210      	movs	r2, #16
 80009a8:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <MX_FMC_Init+0x98>)
 80009ac:	2240      	movs	r2, #64	; 0x40
 80009ae:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <MX_FMC_Init+0x98>)
 80009b2:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80009b6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <MX_FMC_Init+0x98>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009be:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <MX_FMC_Init+0x98>)
 80009c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009c4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80009c6:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <MX_FMC_Init+0x98>)
 80009c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80009ce:	4b0f      	ldr	r3, [pc, #60]	; (8000a0c <MX_FMC_Init+0x98>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80009d4:	2302      	movs	r3, #2
 80009d6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80009d8:	2307      	movs	r3, #7
 80009da:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80009dc:	2304      	movs	r3, #4
 80009de:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80009e0:	2307      	movs	r3, #7
 80009e2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80009e4:	2303      	movs	r3, #3
 80009e6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80009f0:	1d3b      	adds	r3, r7, #4
 80009f2:	4619      	mov	r1, r3
 80009f4:	4805      	ldr	r0, [pc, #20]	; (8000a0c <MX_FMC_Init+0x98>)
 80009f6:	f008 fd8b 	bl	8009510 <HAL_SDRAM_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a00:	f001 fb78 	bl	80020f4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a04:	bf00      	nop
 8000a06:	3720      	adds	r7, #32
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	20000190 	.word	0x20000190
 8000a10:	a0000140 	.word	0xa0000140

08000a14 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1a:	1d3b      	adds	r3, r7, #4
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8000a28:	4b3a      	ldr	r3, [pc, #232]	; (8000b14 <HAL_FMC_MspInit+0x100>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d16d      	bne.n	8000b0c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8000a30:	4b38      	ldr	r3, [pc, #224]	; (8000b14 <HAL_FMC_MspInit+0x100>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8000a36:	4b38      	ldr	r3, [pc, #224]	; (8000b18 <HAL_FMC_MspInit+0x104>)
 8000a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a3a:	4a37      	ldr	r2, [pc, #220]	; (8000b18 <HAL_FMC_MspInit+0x104>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6393      	str	r3, [r2, #56]	; 0x38
 8000a42:	4b35      	ldr	r3, [pc, #212]	; (8000b18 <HAL_FMC_MspInit+0x104>)
 8000a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000a4e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a52:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a54:	2302      	movs	r3, #2
 8000a56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a60:	230c      	movs	r3, #12
 8000a62:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	482c      	ldr	r0, [pc, #176]	; (8000b1c <HAL_FMC_MspInit+0x108>)
 8000a6a:	f005 fb13 	bl	8006094 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8000a6e:	f248 1333 	movw	r3, #33075	; 0x8133
 8000a72:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a74:	2302      	movs	r3, #2
 8000a76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7c:	2303      	movs	r3, #3
 8000a7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a80:	230c      	movs	r3, #12
 8000a82:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	4619      	mov	r1, r3
 8000a88:	4825      	ldr	r0, [pc, #148]	; (8000b20 <HAL_FMC_MspInit+0x10c>)
 8000a8a:	f005 fb03 	bl	8006094 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000a8e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000a92:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a94:	2302      	movs	r3, #2
 8000a96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aa0:	230c      	movs	r3, #12
 8000aa2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	481e      	ldr	r0, [pc, #120]	; (8000b24 <HAL_FMC_MspInit+0x110>)
 8000aaa:	f005 faf3 	bl	8006094 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000aae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8000ab2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ac0:	230c      	movs	r3, #12
 8000ac2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4817      	ldr	r0, [pc, #92]	; (8000b28 <HAL_FMC_MspInit+0x114>)
 8000aca:	f005 fae3 	bl	8006094 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8000ace:	2328      	movs	r3, #40	; 0x28
 8000ad0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ada:	2303      	movs	r3, #3
 8000adc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ade:	230c      	movs	r3, #12
 8000ae0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4811      	ldr	r0, [pc, #68]	; (8000b2c <HAL_FMC_MspInit+0x118>)
 8000ae8:	f005 fad4 	bl	8006094 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8000aec:	2308      	movs	r3, #8
 8000aee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af0:	2302      	movs	r3, #2
 8000af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af8:	2303      	movs	r3, #3
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afc:	230c      	movs	r3, #12
 8000afe:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	4619      	mov	r1, r3
 8000b04:	480a      	ldr	r0, [pc, #40]	; (8000b30 <HAL_FMC_MspInit+0x11c>)
 8000b06:	f005 fac5 	bl	8006094 <HAL_GPIO_Init>
 8000b0a:	e000      	b.n	8000b0e <HAL_FMC_MspInit+0xfa>
    return;
 8000b0c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	200001c4 	.word	0x200001c4
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40021000 	.word	0x40021000
 8000b20:	40021800 	.word	0x40021800
 8000b24:	40020c00 	.word	0x40020c00
 8000b28:	40021400 	.word	0x40021400
 8000b2c:	40021c00 	.word	0x40021c00
 8000b30:	40020800 	.word	0x40020800

08000b34 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000b3c:	f7ff ff6a 	bl	8000a14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000b52:	20c8      	movs	r0, #200	; 0xc8
 8000b54:	f001 fdde 	bl	8002714 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000b58:	f000 fa7a 	bl	8001050 <ft5336_I2C_InitializeIfRequired>
}
 8000b5c:	bf00      	nop
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	4603      	mov	r3, r0
 8000b82:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000b90:	f000 fa5e 	bl	8001050 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
 8000b98:	e010      	b.n	8000bbc <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	21a8      	movs	r1, #168	; 0xa8
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fd99 	bl	80026d8 <TS_IO_Read>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000baa:	7b7b      	ldrb	r3, [r7, #13]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b51      	cmp	r3, #81	; 0x51
 8000bb0:	d101      	bne.n	8000bb6 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b02      	cmp	r3, #2
 8000bc0:	d802      	bhi.n	8000bc8 <ft5336_ReadID+0x4e>
 8000bc2:	7bbb      	ldrb	r3, [r7, #14]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0e8      	beq.n	8000b9a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000bc8:	7b7b      	ldrb	r3, [r7, #13]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	b29b      	uxth	r3, r3
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fa44 	bl	8001070 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000be8:	88fb      	ldrh	r3, [r7, #6]
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f932 	bl	8000e54 <ft5336_TS_DisableIT>
}
 8000bf0:	bf00      	nop
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000c06:	88fb      	ldrh	r3, [r7, #6]
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f001 fd63 	bl	80026d8 <TS_IO_Read>
 8000c12:	4603      	mov	r3, r0
 8000c14:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000c16:	7bfb      	ldrb	r3, [r7, #15]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000c22:	7bfb      	ldrb	r3, [r7, #15]
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b05      	cmp	r3, #5
 8000c28:	d901      	bls.n	8000c2e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000c2e:	7bfb      	ldrb	r3, [r7, #15]
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <ft5336_TS_DetectTouch+0x50>)
 8000c34:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000c36:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <ft5336_TS_DetectTouch+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	b2db      	uxtb	r3, r3
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	200001c8 	.word	0x200001c8

08000c4c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000c6e:	4b6d      	ldr	r3, [pc, #436]	; (8000e24 <ft5336_TS_GetXY+0x1d8>)
 8000c70:	789a      	ldrb	r2, [r3, #2]
 8000c72:	4b6c      	ldr	r3, [pc, #432]	; (8000e24 <ft5336_TS_GetXY+0x1d8>)
 8000c74:	785b      	ldrb	r3, [r3, #1]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	f080 80cf 	bcs.w	8000e1a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000c7c:	4b69      	ldr	r3, [pc, #420]	; (8000e24 <ft5336_TS_GetXY+0x1d8>)
 8000c7e:	789b      	ldrb	r3, [r3, #2]
 8000c80:	2b09      	cmp	r3, #9
 8000c82:	d871      	bhi.n	8000d68 <ft5336_TS_GetXY+0x11c>
 8000c84:	a201      	add	r2, pc, #4	; (adr r2, 8000c8c <ft5336_TS_GetXY+0x40>)
 8000c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c8a:	bf00      	nop
 8000c8c:	08000cb5 	.word	0x08000cb5
 8000c90:	08000cc7 	.word	0x08000cc7
 8000c94:	08000cd9 	.word	0x08000cd9
 8000c98:	08000ceb 	.word	0x08000ceb
 8000c9c:	08000cfd 	.word	0x08000cfd
 8000ca0:	08000d0f 	.word	0x08000d0f
 8000ca4:	08000d21 	.word	0x08000d21
 8000ca8:	08000d33 	.word	0x08000d33
 8000cac:	08000d45 	.word	0x08000d45
 8000cb0:	08000d57 	.word	0x08000d57
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000cbc:	2306      	movs	r3, #6
 8000cbe:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000cc0:	2305      	movs	r3, #5
 8000cc2:	753b      	strb	r3, [r7, #20]
      break;
 8000cc4:	e051      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000cc6:	230a      	movs	r3, #10
 8000cc8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000cca:	2309      	movs	r3, #9
 8000ccc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000cd2:	230b      	movs	r3, #11
 8000cd4:	753b      	strb	r3, [r7, #20]
      break;
 8000cd6:	e048      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000cd8:	2310      	movs	r3, #16
 8000cda:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000cdc:	230f      	movs	r3, #15
 8000cde:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000ce0:	2312      	movs	r3, #18
 8000ce2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000ce4:	2311      	movs	r3, #17
 8000ce6:	753b      	strb	r3, [r7, #20]
      break;
 8000ce8:	e03f      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000cea:	2316      	movs	r3, #22
 8000cec:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000cee:	2315      	movs	r3, #21
 8000cf0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000cf2:	2318      	movs	r3, #24
 8000cf4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000cf6:	2317      	movs	r3, #23
 8000cf8:	753b      	strb	r3, [r7, #20]
      break;
 8000cfa:	e036      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000cfc:	231c      	movs	r3, #28
 8000cfe:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000d00:	231b      	movs	r3, #27
 8000d02:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000d04:	231e      	movs	r3, #30
 8000d06:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000d08:	231d      	movs	r3, #29
 8000d0a:	753b      	strb	r3, [r7, #20]
      break;
 8000d0c:	e02d      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000d0e:	2322      	movs	r3, #34	; 0x22
 8000d10:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000d12:	2321      	movs	r3, #33	; 0x21
 8000d14:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000d16:	2324      	movs	r3, #36	; 0x24
 8000d18:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000d1a:	2323      	movs	r3, #35	; 0x23
 8000d1c:	753b      	strb	r3, [r7, #20]
      break;
 8000d1e:	e024      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000d20:	2328      	movs	r3, #40	; 0x28
 8000d22:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000d24:	2327      	movs	r3, #39	; 0x27
 8000d26:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000d28:	232a      	movs	r3, #42	; 0x2a
 8000d2a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000d2c:	2329      	movs	r3, #41	; 0x29
 8000d2e:	753b      	strb	r3, [r7, #20]
      break;
 8000d30:	e01b      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000d32:	232e      	movs	r3, #46	; 0x2e
 8000d34:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000d36:	232d      	movs	r3, #45	; 0x2d
 8000d38:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000d3a:	2330      	movs	r3, #48	; 0x30
 8000d3c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000d3e:	232f      	movs	r3, #47	; 0x2f
 8000d40:	753b      	strb	r3, [r7, #20]
      break;
 8000d42:	e012      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000d44:	2334      	movs	r3, #52	; 0x34
 8000d46:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000d48:	2333      	movs	r3, #51	; 0x33
 8000d4a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000d4c:	2336      	movs	r3, #54	; 0x36
 8000d4e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000d50:	2335      	movs	r3, #53	; 0x35
 8000d52:	753b      	strb	r3, [r7, #20]
      break;
 8000d54:	e009      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000d56:	233a      	movs	r3, #58	; 0x3a
 8000d58:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000d5a:	2339      	movs	r3, #57	; 0x39
 8000d5c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000d5e:	233c      	movs	r3, #60	; 0x3c
 8000d60:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000d62:	233b      	movs	r3, #59	; 0x3b
 8000d64:	753b      	strb	r3, [r7, #20]
      break;
 8000d66:	e000      	b.n	8000d6a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000d68:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000d6a:	89fb      	ldrh	r3, [r7, #14]
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	7dfa      	ldrb	r2, [r7, #23]
 8000d70:	4611      	mov	r1, r2
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 fcb0 	bl	80026d8 <TS_IO_Read>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000d7c:	7cfb      	ldrb	r3, [r7, #19]
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000d84:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000d86:	89fb      	ldrh	r3, [r7, #14]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	7dba      	ldrb	r2, [r7, #22]
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fca2 	bl	80026d8 <TS_IO_Read>
 8000d94:	4603      	mov	r3, r0
 8000d96:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000d98:	7cfb      	ldrb	r3, [r7, #19]
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	4b20      	ldr	r3, [pc, #128]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	b21b      	sxth	r3, r3
 8000daa:	4313      	orrs	r3, r2
 8000dac:	b21b      	sxth	r3, r3
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	4b1d      	ldr	r3, [pc, #116]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000db2:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000db4:	4b1c      	ldr	r3, [pc, #112]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000db6:	881a      	ldrh	r2, [r3, #0]
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000dbc:	89fb      	ldrh	r3, [r7, #14]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	7d7a      	ldrb	r2, [r7, #21]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fc87 	bl	80026d8 <TS_IO_Read>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000dce:	7cfb      	ldrb	r3, [r7, #19]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000dd6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000dd8:	89fb      	ldrh	r3, [r7, #14]
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	7d3a      	ldrb	r2, [r7, #20]
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f001 fc79 	bl	80026d8 <TS_IO_Read>
 8000de6:	4603      	mov	r3, r0
 8000de8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000dea:	7cfb      	ldrb	r3, [r7, #19]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000df4:	b21a      	sxth	r2, r3
 8000df6:	4b0c      	ldr	r3, [pc, #48]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000e04:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000e06:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <ft5336_TS_GetXY+0x1dc>)
 8000e08:	881a      	ldrh	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <ft5336_TS_GetXY+0x1d8>)
 8000e10:	789b      	ldrb	r3, [r3, #2]
 8000e12:	3301      	adds	r3, #1
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <ft5336_TS_GetXY+0x1d8>)
 8000e18:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200001c8 	.word	0x200001c8
 8000e28:	200001cc 	.word	0x200001cc

08000e2c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	7bfa      	ldrb	r2, [r7, #15]
 8000e44:	21a4      	movs	r1, #164	; 0xa4
 8000e46:	4618      	mov	r0, r3
 8000e48:	f001 fc2c 	bl	80026a4 <TS_IO_Write>
}
 8000e4c:	bf00      	nop
 8000e4e:	3710      	adds	r7, #16
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000e62:	2300      	movs	r3, #0
 8000e64:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000e66:	88fb      	ldrh	r3, [r7, #6]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	7bfa      	ldrb	r2, [r7, #15]
 8000e6c:	21a4      	movs	r1, #164	; 0xa4
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fc18 	bl	80026a4 <TS_IO_Write>
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr

08000eaa <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b084      	sub	sp, #16
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	6039      	str	r1, [r7, #0]
 8000eb4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fc09 	bl	80026d8 <TS_IO_Read>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	461a      	mov	r2, r3
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	4603      	mov	r3, r0
 8000eea:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000efc:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <ft5336_TS_GetTouchInfo+0x158>)
 8000efe:	785b      	ldrb	r3, [r3, #1]
 8000f00:	461a      	mov	r2, r3
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	4293      	cmp	r3, r2
 8000f06:	f080 8090 	bcs.w	800102a <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	2b09      	cmp	r3, #9
 8000f0e:	d85d      	bhi.n	8000fcc <ft5336_TS_GetTouchInfo+0xf0>
 8000f10:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <ft5336_TS_GetTouchInfo+0x3c>)
 8000f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f16:	bf00      	nop
 8000f18:	08000f41 	.word	0x08000f41
 8000f1c:	08000f4f 	.word	0x08000f4f
 8000f20:	08000f5d 	.word	0x08000f5d
 8000f24:	08000f6b 	.word	0x08000f6b
 8000f28:	08000f79 	.word	0x08000f79
 8000f2c:	08000f87 	.word	0x08000f87
 8000f30:	08000f95 	.word	0x08000f95
 8000f34:	08000fa3 	.word	0x08000fa3
 8000f38:	08000fb1 	.word	0x08000fb1
 8000f3c:	08000fbf 	.word	0x08000fbf
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 8000f40:	2303      	movs	r3, #3
 8000f42:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 8000f44:	2307      	movs	r3, #7
 8000f46:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 8000f48:	2308      	movs	r3, #8
 8000f4a:	757b      	strb	r3, [r7, #21]
      break;
 8000f4c:	e03f      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 8000f4e:	2309      	movs	r3, #9
 8000f50:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 8000f52:	230d      	movs	r3, #13
 8000f54:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 8000f56:	230e      	movs	r3, #14
 8000f58:	757b      	strb	r3, [r7, #21]
      break;
 8000f5a:	e038      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 8000f60:	2313      	movs	r3, #19
 8000f62:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 8000f64:	2314      	movs	r3, #20
 8000f66:	757b      	strb	r3, [r7, #21]
      break;
 8000f68:	e031      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 8000f6a:	2315      	movs	r3, #21
 8000f6c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 8000f6e:	2319      	movs	r3, #25
 8000f70:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 8000f72:	231a      	movs	r3, #26
 8000f74:	757b      	strb	r3, [r7, #21]
      break;
 8000f76:	e02a      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 8000f78:	231b      	movs	r3, #27
 8000f7a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 8000f7c:	231f      	movs	r3, #31
 8000f7e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 8000f80:	2320      	movs	r3, #32
 8000f82:	757b      	strb	r3, [r7, #21]
      break;
 8000f84:	e023      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 8000f86:	2321      	movs	r3, #33	; 0x21
 8000f88:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 8000f8a:	2325      	movs	r3, #37	; 0x25
 8000f8c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 8000f8e:	2326      	movs	r3, #38	; 0x26
 8000f90:	757b      	strb	r3, [r7, #21]
      break;
 8000f92:	e01c      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 8000f94:	2327      	movs	r3, #39	; 0x27
 8000f96:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000f98:	232b      	movs	r3, #43	; 0x2b
 8000f9a:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000f9c:	232c      	movs	r3, #44	; 0x2c
 8000f9e:	757b      	strb	r3, [r7, #21]
      break;
 8000fa0:	e015      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000fa2:	232d      	movs	r3, #45	; 0x2d
 8000fa4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000fa6:	2331      	movs	r3, #49	; 0x31
 8000fa8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000faa:	2332      	movs	r3, #50	; 0x32
 8000fac:	757b      	strb	r3, [r7, #21]
      break;
 8000fae:	e00e      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000fb0:	2333      	movs	r3, #51	; 0x33
 8000fb2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000fb4:	2337      	movs	r3, #55	; 0x37
 8000fb6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000fb8:	2338      	movs	r3, #56	; 0x38
 8000fba:	757b      	strb	r3, [r7, #21]
      break;
 8000fbc:	e007      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000fbe:	2339      	movs	r3, #57	; 0x39
 8000fc0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000fc2:	233d      	movs	r3, #61	; 0x3d
 8000fc4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000fc6:	233e      	movs	r3, #62	; 0x3e
 8000fc8:	757b      	strb	r3, [r7, #21]
      break;
 8000fca:	e000      	b.n	8000fce <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000fcc:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	7dfa      	ldrb	r2, [r7, #23]
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fb7e 	bl	80026d8 <TS_IO_Read>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000fe0:	7d3b      	ldrb	r3, [r7, #20]
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	119b      	asrs	r3, r3, #6
 8000fe6:	f003 0203 	and.w	r2, r3, #3
 8000fea:	6a3b      	ldr	r3, [r7, #32]
 8000fec:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	7dba      	ldrb	r2, [r7, #22]
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 fb6e 	bl	80026d8 <TS_IO_Read>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8001000:	7d3b      	ldrb	r3, [r7, #20]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 800100a:	89fb      	ldrh	r3, [r7, #14]
 800100c:	b2db      	uxtb	r3, r3
 800100e:	7d7a      	ldrb	r2, [r7, #21]
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f001 fb60 	bl	80026d8 <TS_IO_Read>
 8001018:	4603      	mov	r3, r0
 800101a:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 800101c:	7d3b      	ldrb	r3, [r7, #20]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	111b      	asrs	r3, r3, #4
 8001022:	f003 0204 	and.w	r2, r3, #4
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200001c8 	.word	0x200001c8

08001038 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 800103c:	4b03      	ldr	r3, [pc, #12]	; (800104c <ft5336_Get_I2C_InitializedStatus+0x14>)
 800103e:	781b      	ldrb	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	200001c8 	.word	0x200001c8

08001050 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8001054:	f7ff fff0 	bl	8001038 <ft5336_Get_I2C_InitializedStatus>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d104      	bne.n	8001068 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 800105e:	f001 fb17 	bl	8002690 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8001062:	4b02      	ldr	r3, [pc, #8]	; (800106c <ft5336_I2C_InitializeIfRequired+0x1c>)
 8001064:	2201      	movs	r2, #1
 8001066:	701a      	strb	r2, [r3, #0]
  }
}
 8001068:	bf00      	nop
 800106a:	bd80      	pop	{r7, pc}
 800106c:	200001c8 	.word	0x200001c8

08001070 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3714      	adds	r7, #20
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <MX_GPIO_Init>:
     PB1   ------> USB_OTG_HS_ULPI_D2
     PB0   ------> USB_OTG_HS_ULPI_D1
     PB11   ------> USB_OTG_HS_ULPI_D4
*/
void MX_GPIO_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b090      	sub	sp, #64	; 0x40
 8001090:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
 800109a:	605a      	str	r2, [r3, #4]
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	60da      	str	r2, [r3, #12]
 80010a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a2:	4baf      	ldr	r3, [pc, #700]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4aae      	ldr	r2, [pc, #696]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010a8:	f043 0310 	orr.w	r3, r3, #16
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4bac      	ldr	r3, [pc, #688]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0310 	and.w	r3, r3, #16
 80010b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80010b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ba:	4ba9      	ldr	r3, [pc, #676]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4aa8      	ldr	r2, [pc, #672]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4ba6      	ldr	r3, [pc, #664]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	4ba3      	ldr	r3, [pc, #652]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4aa2      	ldr	r2, [pc, #648]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4ba0      	ldr	r3, [pc, #640]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
 80010e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ea:	4b9d      	ldr	r3, [pc, #628]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a9c      	ldr	r2, [pc, #624]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010f0:	f043 0308 	orr.w	r3, r3, #8
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b9a      	ldr	r3, [pc, #616]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0308 	and.w	r3, r3, #8
 80010fe:	61fb      	str	r3, [r7, #28]
 8001100:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b97      	ldr	r3, [pc, #604]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a96      	ldr	r2, [pc, #600]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b94      	ldr	r3, [pc, #592]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b91      	ldr	r3, [pc, #580]	; (8001360 <MX_GPIO_Init+0x2d4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a90      	ldr	r2, [pc, #576]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b8e      	ldr	r3, [pc, #568]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001132:	4b8b      	ldr	r3, [pc, #556]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a8a      	ldr	r2, [pc, #552]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001138:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b88      	ldr	r3, [pc, #544]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800114a:	4b85      	ldr	r3, [pc, #532]	; (8001360 <MX_GPIO_Init+0x2d4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a84      	ldr	r2, [pc, #528]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b82      	ldr	r3, [pc, #520]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001162:	4b7f      	ldr	r3, [pc, #508]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a7e      	ldr	r2, [pc, #504]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001168:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b7c      	ldr	r3, [pc, #496]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800117a:	4b79      	ldr	r3, [pc, #484]	; (8001360 <MX_GPIO_Init+0x2d4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a78      	ldr	r2, [pc, #480]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001180:	f043 0320 	orr.w	r3, r3, #32
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b76      	ldr	r3, [pc, #472]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	4b73      	ldr	r3, [pc, #460]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a72      	ldr	r2, [pc, #456]	; (8001360 <MX_GPIO_Init+0x2d4>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b70      	ldr	r3, [pc, #448]	; (8001360 <MX_GPIO_Init+0x2d4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2160      	movs	r1, #96	; 0x60
 80011ae:	486d      	ldr	r0, [pc, #436]	; (8001364 <MX_GPIO_Init+0x2d8>)
 80011b0:	f005 fa40 	bl	8006634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2120      	movs	r1, #32
 80011b8:	486b      	ldr	r0, [pc, #428]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80011ba:	f005 fa3b 	bl	8006634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2108      	movs	r1, #8
 80011c2:	4869      	ldr	r0, [pc, #420]	; (8001368 <MX_GPIO_Init+0x2dc>)
 80011c4:	f005 fa36 	bl	8006634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	2108      	movs	r1, #8
 80011cc:	4867      	ldr	r0, [pc, #412]	; (800136c <MX_GPIO_Init+0x2e0>)
 80011ce:	f005 fa31 	bl	8006634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d8:	4865      	ldr	r0, [pc, #404]	; (8001370 <MX_GPIO_Init+0x2e4>)
 80011da:	f005 fa2b 	bl	8006634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80011de:	2200      	movs	r2, #0
 80011e0:	f645 6140 	movw	r1, #24128	; 0x5e40
 80011e4:	4863      	ldr	r0, [pc, #396]	; (8001374 <MX_GPIO_Init+0x2e8>)
 80011e6:	f005 fa25 	bl	8006634 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	21c8      	movs	r1, #200	; 0xc8
 80011ee:	4862      	ldr	r0, [pc, #392]	; (8001378 <MX_GPIO_Init+0x2ec>)
 80011f0:	f005 fa20 	bl	8006634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80011f4:	2308      	movs	r3, #8
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001204:	4619      	mov	r1, r3
 8001206:	4857      	ldr	r0, [pc, #348]	; (8001364 <MX_GPIO_Init+0x2d8>)
 8001208:	f004 ff44 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 800120c:	2304      	movs	r3, #4
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001218:	2303      	movs	r3, #3
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800121c:	2309      	movs	r3, #9
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001224:	4619      	mov	r1, r3
 8001226:	484f      	ldr	r0, [pc, #316]	; (8001364 <MX_GPIO_Init+0x2d8>)
 8001228:	f004 ff34 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 800122c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800123e:	230b      	movs	r3, #11
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	484b      	ldr	r0, [pc, #300]	; (8001378 <MX_GPIO_Init+0x2ec>)
 800124a:	f004 ff23 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 800124e:	f643 0323 	movw	r3, #14371	; 0x3823
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001260:	230a      	movs	r3, #10
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001268:	4619      	mov	r1, r3
 800126a:	4844      	ldr	r0, [pc, #272]	; (800137c <MX_GPIO_Init+0x2f0>)
 800126c:	f004 ff12 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8001280:	2308      	movs	r3, #8
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001288:	4619      	mov	r1, r3
 800128a:	4837      	ldr	r0, [pc, #220]	; (8001368 <MX_GPIO_Init+0x2dc>)
 800128c:	f004 ff02 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PC9
                           PC8 */
  GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8001290:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800129e:	2303      	movs	r3, #3
 80012a0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80012a2:	230c      	movs	r3, #12
 80012a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012aa:	4619      	mov	r1, r3
 80012ac:	4834      	ldr	r0, [pc, #208]	; (8001380 <MX_GPIO_Init+0x2f4>)
 80012ae:	f004 fef1 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PA6 */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin|GPIO_PIN_6;
 80012b2:	f248 1340 	movw	r3, #33088	; 0x8140
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c4:	4619      	mov	r1, r3
 80012c6:	482f      	ldr	r0, [pc, #188]	; (8001384 <MX_GPIO_Init+0x2f8>)
 80012c8:	f004 fee4 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80012cc:	2360      	movs	r3, #96	; 0x60
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d0:	2301      	movs	r3, #1
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e0:	4619      	mov	r1, r3
 80012e2:	4820      	ldr	r0, [pc, #128]	; (8001364 <MX_GPIO_Init+0x2d8>)
 80012e4:	f004 fed6 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012f4:	2303      	movs	r3, #3
 80012f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80012f8:	230a      	movs	r3, #10
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80012fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001300:	4619      	mov	r1, r3
 8001302:	481e      	ldr	r0, [pc, #120]	; (800137c <MX_GPIO_Init+0x2f0>)
 8001304:	f004 fec6 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001308:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800130e:	2300      	movs	r3, #0
 8001310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001316:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800131a:	4619      	mov	r1, r3
 800131c:	481a      	ldr	r0, [pc, #104]	; (8001388 <MX_GPIO_Init+0x2fc>)
 800131e:	f004 feb9 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001322:	2340      	movs	r3, #64	; 0x40
 8001324:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001326:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001330:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001334:	4619      	mov	r1, r3
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <MX_GPIO_Init+0x2dc>)
 8001338:	f004 feac 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin;
 800133c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800134e:	230a      	movs	r3, #10
 8001350:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001356:	4619      	mov	r1, r3
 8001358:	480a      	ldr	r0, [pc, #40]	; (8001384 <MX_GPIO_Init+0x2f8>)
 800135a:	f004 fe9b 	bl	8006094 <HAL_GPIO_Init>
 800135e:	e015      	b.n	800138c <MX_GPIO_Init+0x300>
 8001360:	40023800 	.word	0x40023800
 8001364:	40021000 	.word	0x40021000
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40022800 	.word	0x40022800
 8001370:	40022000 	.word	0x40022000
 8001374:	40021c00 	.word	0x40021c00
 8001378:	40021800 	.word	0x40021800
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020000 	.word	0x40020000
 8001388:	40022400 	.word	0x40022400

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 800138c:	23f0      	movs	r3, #240	; 0xf0
 800138e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800139c:	230a      	movs	r3, #10
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a4:	4619      	mov	r1, r3
 80013a6:	4891      	ldr	r0, [pc, #580]	; (80015ec <MX_GPIO_Init+0x560>)
 80013a8:	f004 fe74 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80013ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b2:	2302      	movs	r3, #2
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80013be:	230a      	movs	r3, #10
 80013c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013c6:	4619      	mov	r1, r3
 80013c8:	4889      	ldr	r0, [pc, #548]	; (80015f0 <MX_GPIO_Init+0x564>)
 80013ca:	f004 fe63 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 80013ce:	2328      	movs	r3, #40	; 0x28
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013e2:	4619      	mov	r1, r3
 80013e4:	4883      	ldr	r0, [pc, #524]	; (80015f4 <MX_GPIO_Init+0x568>)
 80013e6:	f004 fe55 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80013ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f0:	2300      	movs	r3, #0
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013fc:	4619      	mov	r1, r3
 80013fe:	487e      	ldr	r0, [pc, #504]	; (80015f8 <MX_GPIO_Init+0x56c>)
 8001400:	f004 fe48 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001404:	2308      	movs	r3, #8
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001410:	2300      	movs	r3, #0
 8001412:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001418:	4619      	mov	r1, r3
 800141a:	4878      	ldr	r0, [pc, #480]	; (80015fc <MX_GPIO_Init+0x570>)
 800141c:	f004 fe3a 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_9|RMII_RXER_Pin;
 8001420:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001426:	2300      	movs	r3, #0
 8001428:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142a:	2300      	movs	r3, #0
 800142c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800142e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001432:	4619      	mov	r1, r3
 8001434:	486e      	ldr	r0, [pc, #440]	; (80015f0 <MX_GPIO_Init+0x564>)
 8001436:	f004 fe2d 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800143a:	2310      	movs	r3, #16
 800143c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143e:	2300      	movs	r3, #0
 8001440:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144a:	4619      	mov	r1, r3
 800144c:	4869      	ldr	r0, [pc, #420]	; (80015f4 <MX_GPIO_Init+0x568>)
 800144e:	f004 fe21 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001452:	2304      	movs	r3, #4
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145e:	2303      	movs	r3, #3
 8001460:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001462:	230c      	movs	r3, #12
 8001464:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800146a:	4619      	mov	r1, r3
 800146c:	4861      	ldr	r0, [pc, #388]	; (80015f4 <MX_GPIO_Init+0x568>)
 800146e:	f004 fe11 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PH13 PHPin */
  GPIO_InitStruct.Pin = TP3_Pin|GPIO_PIN_13|NC2_Pin;
 8001472:	f24a 0304 	movw	r3, #40964	; 0xa004
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001478:	2300      	movs	r3, #0
 800147a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001480:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001484:	4619      	mov	r1, r3
 8001486:	485e      	ldr	r0, [pc, #376]	; (8001600 <MX_GPIO_Init+0x574>)
 8001488:	f004 fe04 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_DISP_Pin;
 800148c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001492:	2301      	movs	r3, #1
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149a:	2300      	movs	r3, #0
 800149c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_DISP_GPIO_Port, &GPIO_InitStruct);
 800149e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014a2:	4619      	mov	r1, r3
 80014a4:	4851      	ldr	r0, [pc, #324]	; (80015ec <MX_GPIO_Init+0x560>)
 80014a6:	f004 fdf5 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin
                           PHPin PHPin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80014aa:	f645 6340 	movw	r3, #24128	; 0x5e40
 80014ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80014bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014c0:	4619      	mov	r1, r3
 80014c2:	484f      	ldr	r0, [pc, #316]	; (8001600 <MX_GPIO_Init+0x574>)
 80014c4:	f004 fde6 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80014c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014ce:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80014d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014dc:	4619      	mov	r1, r3
 80014de:	4843      	ldr	r0, [pc, #268]	; (80015ec <MX_GPIO_Init+0x560>)
 80014e0:	f004 fdd8 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80014e4:	2310      	movs	r3, #16
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2302      	movs	r3, #2
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f0:	2303      	movs	r3, #3
 80014f2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80014f4:	230a      	movs	r3, #10
 80014f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fc:	4619      	mov	r1, r3
 80014fe:	4840      	ldr	r0, [pc, #256]	; (8001600 <MX_GPIO_Init+0x574>)
 8001500:	f004 fdc8 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 8001504:	23c8      	movs	r3, #200	; 0xc8
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001518:	4619      	mov	r1, r3
 800151a:	4835      	ldr	r0, [pc, #212]	; (80015f0 <MX_GPIO_Init+0x564>)
 800151c:	f004 fdba 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001520:	2305      	movs	r3, #5
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001524:	2302      	movs	r3, #2
 8001526:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001530:	230a      	movs	r3, #10
 8001532:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001538:	4619      	mov	r1, r3
 800153a:	482f      	ldr	r0, [pc, #188]	; (80015f8 <MX_GPIO_Init+0x56c>)
 800153c:	f004 fdaa 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001540:	2332      	movs	r3, #50	; 0x32
 8001542:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001550:	230b      	movs	r3, #11
 8001552:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001558:	4619      	mov	r1, r3
 800155a:	4827      	ldr	r0, [pc, #156]	; (80015f8 <MX_GPIO_Init+0x56c>)
 800155c:	f004 fd9a 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001560:	2304      	movs	r3, #4
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001570:	2309      	movs	r3, #9
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001574:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001578:	4619      	mov	r1, r3
 800157a:	4822      	ldr	r0, [pc, #136]	; (8001604 <MX_GPIO_Init+0x578>)
 800157c:	f004 fd8a 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8001580:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001592:	2309      	movs	r3, #9
 8001594:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001596:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800159a:	4619      	mov	r1, r3
 800159c:	4815      	ldr	r0, [pc, #84]	; (80015f4 <MX_GPIO_Init+0x568>)
 800159e:	f004 fd79 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80015a2:	2386      	movs	r3, #134	; 0x86
 80015a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b2:	230b      	movs	r3, #11
 80015b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015ba:	4619      	mov	r1, r3
 80015bc:	4812      	ldr	r0, [pc, #72]	; (8001608 <MX_GPIO_Init+0x57c>)
 80015be:	f004 fd69 	bl	8006094 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80015c2:	2328      	movs	r3, #40	; 0x28
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c6:	2302      	movs	r3, #2
 80015c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ce:	2303      	movs	r3, #3
 80015d0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80015d2:	230a      	movs	r3, #10
 80015d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015da:	4619      	mov	r1, r3
 80015dc:	480a      	ldr	r0, [pc, #40]	; (8001608 <MX_GPIO_Init+0x57c>)
 80015de:	f004 fd59 	bl	8006094 <HAL_GPIO_Init>

}
 80015e2:	bf00      	nop
 80015e4:	3740      	adds	r7, #64	; 0x40
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40022000 	.word	0x40022000
 80015f0:	40021800 	.word	0x40021800
 80015f4:	40020c00 	.word	0x40020c00
 80015f8:	40020800 	.word	0x40020800
 80015fc:	40022800 	.word	0x40022800
 8001600:	40021c00 	.word	0x40021c00
 8001604:	40020400 	.word	0x40020400
 8001608:	40020000 	.word	0x40020000

0800160c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001610:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <MX_I2C1_Init+0x74>)
 8001612:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <MX_I2C1_Init+0x78>)
 8001614:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001616:	4b1a      	ldr	r3, [pc, #104]	; (8001680 <MX_I2C1_Init+0x74>)
 8001618:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <MX_I2C1_Init+0x7c>)
 800161a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800161c:	4b18      	ldr	r3, [pc, #96]	; (8001680 <MX_I2C1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001622:	4b17      	ldr	r3, [pc, #92]	; (8001680 <MX_I2C1_Init+0x74>)
 8001624:	2201      	movs	r2, #1
 8001626:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <MX_I2C1_Init+0x74>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800162e:	4b14      	ldr	r3, [pc, #80]	; (8001680 <MX_I2C1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_I2C1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_I2C1_Init+0x74>)
 800163c:	2200      	movs	r2, #0
 800163e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_I2C1_Init+0x74>)
 8001642:	2200      	movs	r2, #0
 8001644:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001646:	480e      	ldr	r0, [pc, #56]	; (8001680 <MX_I2C1_Init+0x74>)
 8001648:	f005 f80e 	bl	8006668 <HAL_I2C_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001652:	f000 fd4f 	bl	80020f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001656:	2100      	movs	r1, #0
 8001658:	4809      	ldr	r0, [pc, #36]	; (8001680 <MX_I2C1_Init+0x74>)
 800165a:	f005 fd9b 	bl	8007194 <HAL_I2CEx_ConfigAnalogFilter>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001664:	f000 fd46 	bl	80020f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001668:	2100      	movs	r1, #0
 800166a:	4805      	ldr	r0, [pc, #20]	; (8001680 <MX_I2C1_Init+0x74>)
 800166c:	f005 fddd 	bl	800722a <HAL_I2CEx_ConfigDigitalFilter>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001676:	f000 fd3d 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200001d0 	.word	0x200001d0
 8001684:	40005400 	.word	0x40005400
 8001688:	00c0eaff 	.word	0x00c0eaff

0800168c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001690:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <MX_I2C3_Init+0x74>)
 8001692:	4a1c      	ldr	r2, [pc, #112]	; (8001704 <MX_I2C3_Init+0x78>)
 8001694:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <MX_I2C3_Init+0x74>)
 8001698:	4a1b      	ldr	r2, [pc, #108]	; (8001708 <MX_I2C3_Init+0x7c>)
 800169a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <MX_I2C3_Init+0x74>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a2:	4b17      	ldr	r3, [pc, #92]	; (8001700 <MX_I2C3_Init+0x74>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <MX_I2C3_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <MX_I2C3_Init+0x74>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <MX_I2C3_Init+0x74>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_I2C3_Init+0x74>)
 80016bc:	2200      	movs	r2, #0
 80016be:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <MX_I2C3_Init+0x74>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016c6:	480e      	ldr	r0, [pc, #56]	; (8001700 <MX_I2C3_Init+0x74>)
 80016c8:	f004 ffce 	bl	8006668 <HAL_I2C_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80016d2:	f000 fd0f 	bl	80020f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016d6:	2100      	movs	r1, #0
 80016d8:	4809      	ldr	r0, [pc, #36]	; (8001700 <MX_I2C3_Init+0x74>)
 80016da:	f005 fd5b 	bl	8007194 <HAL_I2CEx_ConfigAnalogFilter>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80016e4:	f000 fd06 	bl	80020f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80016e8:	2100      	movs	r1, #0
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_I2C3_Init+0x74>)
 80016ec:	f005 fd9d 	bl	800722a <HAL_I2CEx_ConfigDigitalFilter>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80016f6:	f000 fcfd 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000224 	.word	0x20000224
 8001704:	40005c00 	.word	0x40005c00
 8001708:	00c0eaff 	.word	0x00c0eaff

0800170c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b0ac      	sub	sp, #176	; 0xb0
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001714:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001724:	f107 0318 	add.w	r3, r7, #24
 8001728:	2284      	movs	r2, #132	; 0x84
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f009 fbaf 	bl	800ae90 <memset>
  if(i2cHandle->Instance==I2C1)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a44      	ldr	r2, [pc, #272]	; (8001848 <HAL_I2C_MspInit+0x13c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d13d      	bne.n	80017b8 <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800173c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001740:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001742:	2300      	movs	r3, #0
 8001744:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	4618      	mov	r0, r3
 800174c:	f006 fe4e 	bl	80083ec <HAL_RCCEx_PeriphCLKConfig>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001756:	f000 fccd 	bl	80020f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	4b3c      	ldr	r3, [pc, #240]	; (800184c <HAL_I2C_MspInit+0x140>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	4a3b      	ldr	r2, [pc, #236]	; (800184c <HAL_I2C_MspInit+0x140>)
 8001760:	f043 0302 	orr.w	r3, r3, #2
 8001764:	6313      	str	r3, [r2, #48]	; 0x30
 8001766:	4b39      	ldr	r3, [pc, #228]	; (800184c <HAL_I2C_MspInit+0x140>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	617b      	str	r3, [r7, #20]
 8001770:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001772:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001776:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800177a:	2312      	movs	r3, #18
 800177c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001786:	2303      	movs	r3, #3
 8001788:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800178c:	2304      	movs	r3, #4
 800178e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001796:	4619      	mov	r1, r3
 8001798:	482d      	ldr	r0, [pc, #180]	; (8001850 <HAL_I2C_MspInit+0x144>)
 800179a:	f004 fc7b 	bl	8006094 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800179e:	4b2b      	ldr	r3, [pc, #172]	; (800184c <HAL_I2C_MspInit+0x140>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a2a      	ldr	r2, [pc, #168]	; (800184c <HAL_I2C_MspInit+0x140>)
 80017a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b28      	ldr	r3, [pc, #160]	; (800184c <HAL_I2C_MspInit+0x140>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80017b6:	e042      	b.n	800183e <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C3)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a25      	ldr	r2, [pc, #148]	; (8001854 <HAL_I2C_MspInit+0x148>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d13d      	bne.n	800183e <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80017c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017ce:	f107 0318 	add.w	r3, r7, #24
 80017d2:	4618      	mov	r0, r3
 80017d4:	f006 fe0a 	bl	80083ec <HAL_RCCEx_PeriphCLKConfig>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_I2C_MspInit+0xd6>
      Error_Handler();
 80017de:	f000 fc89 	bl	80020f4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e2:	4b1a      	ldr	r3, [pc, #104]	; (800184c <HAL_I2C_MspInit+0x140>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a19      	ldr	r2, [pc, #100]	; (800184c <HAL_I2C_MspInit+0x140>)
 80017e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b17      	ldr	r3, [pc, #92]	; (800184c <HAL_I2C_MspInit+0x140>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 80017fa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80017fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001802:	2312      	movs	r3, #18
 8001804:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001808:	2301      	movs	r3, #1
 800180a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800180e:	2303      	movs	r3, #3
 8001810:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001814:	2304      	movs	r3, #4
 8001816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800181a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800181e:	4619      	mov	r1, r3
 8001820:	480d      	ldr	r0, [pc, #52]	; (8001858 <HAL_I2C_MspInit+0x14c>)
 8001822:	f004 fc37 	bl	8006094 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_I2C_MspInit+0x140>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_I2C_MspInit+0x140>)
 800182c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_I2C_MspInit+0x140>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
}
 800183e:	bf00      	nop
 8001840:	37b0      	adds	r7, #176	; 0xb0
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40005400 	.word	0x40005400
 800184c:	40023800 	.word	0x40023800
 8001850:	40020400 	.word	0x40020400
 8001854:	40005c00 	.word	0x40005c00
 8001858:	40021c00 	.word	0x40021c00

0800185c <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a15      	ldr	r2, [pc, #84]	; (80018c0 <HAL_I2C_MspDeInit+0x64>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d110      	bne.n	8001890 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <HAL_I2C_MspDeInit+0x68>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	4a14      	ldr	r2, [pc, #80]	; (80018c4 <HAL_I2C_MspDeInit+0x68>)
 8001874:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001878:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 800187a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800187e:	4812      	ldr	r0, [pc, #72]	; (80018c8 <HAL_I2C_MspDeInit+0x6c>)
 8001880:	f004 fdb4 	bl	80063ec <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8001884:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001888:	480f      	ldr	r0, [pc, #60]	; (80018c8 <HAL_I2C_MspDeInit+0x6c>)
 800188a:	f004 fdaf 	bl	80063ec <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
}
 800188e:	e013      	b.n	80018b8 <HAL_I2C_MspDeInit+0x5c>
  else if(i2cHandle->Instance==I2C3)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <HAL_I2C_MspDeInit+0x70>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d10e      	bne.n	80018b8 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 800189a:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <HAL_I2C_MspDeInit+0x68>)
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <HAL_I2C_MspDeInit+0x68>)
 80018a0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018a4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80018a6:	2180      	movs	r1, #128	; 0x80
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <HAL_I2C_MspDeInit+0x74>)
 80018aa:	f004 fd9f 	bl	80063ec <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80018ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b2:	4807      	ldr	r0, [pc, #28]	; (80018d0 <HAL_I2C_MspDeInit+0x74>)
 80018b4:	f004 fd9a 	bl	80063ec <HAL_GPIO_DeInit>
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40005400 	.word	0x40005400
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020400 	.word	0x40020400
 80018cc:	40005c00 	.word	0x40005c00
 80018d0:	40021c00 	.word	0x40021c00

080018d4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08e      	sub	sp, #56	; 0x38
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2234      	movs	r2, #52	; 0x34
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f009 fad5 	bl	800ae90 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80018e6:	4b3a      	ldr	r3, [pc, #232]	; (80019d0 <MX_LTDC_Init+0xfc>)
 80018e8:	4a3a      	ldr	r2, [pc, #232]	; (80019d4 <MX_LTDC_Init+0x100>)
 80018ea:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80018ec:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <MX_LTDC_Init+0xfc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80018f2:	4b37      	ldr	r3, [pc, #220]	; (80019d0 <MX_LTDC_Init+0xfc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80018f8:	4b35      	ldr	r3, [pc, #212]	; (80019d0 <MX_LTDC_Init+0xfc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80018fe:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001904:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001906:	2228      	movs	r2, #40	; 0x28
 8001908:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800190a:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <MX_LTDC_Init+0xfc>)
 800190c:	2209      	movs	r2, #9
 800190e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001910:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001912:	2235      	movs	r2, #53	; 0x35
 8001914:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001916:	4b2e      	ldr	r3, [pc, #184]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001918:	220b      	movs	r2, #11
 800191a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 800191c:	4b2c      	ldr	r3, [pc, #176]	; (80019d0 <MX_LTDC_Init+0xfc>)
 800191e:	f240 2215 	movw	r2, #533	; 0x215
 8001922:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001924:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001926:	f240 121b 	movw	r2, #283	; 0x11b
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 800192c:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <MX_LTDC_Init+0xfc>)
 800192e:	f240 2235 	movw	r2, #565	; 0x235
 8001932:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001934:	4b26      	ldr	r3, [pc, #152]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001936:	f240 121d 	movw	r2, #285	; 0x11d
 800193a:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <MX_LTDC_Init+0xfc>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001944:	4b22      	ldr	r3, [pc, #136]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 800194c:	4b20      	ldr	r3, [pc, #128]	; (80019d0 <MX_LTDC_Init+0xfc>)
 800194e:	2200      	movs	r2, #0
 8001950:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001954:	481e      	ldr	r0, [pc, #120]	; (80019d0 <MX_LTDC_Init+0xfc>)
 8001956:	f005 fcb5 	bl	80072c4 <HAL_LTDC_Init>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001960:	f000 fbc8 	bl	80020f4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001968:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800196c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001972:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001976:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001978:	2302      	movs	r3, #2
 800197a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800197c:	23ff      	movs	r3, #255	; 0xff
 800197e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001984:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001988:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800198a:	2307      	movs	r3, #7
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800198e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001994:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001998:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800199a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	4619      	mov	r1, r3
 80019b8:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_LTDC_Init+0xfc>)
 80019ba:	f005 fe15 	bl	80075e8 <HAL_LTDC_ConfigLayer>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 80019c4:	f000 fb96 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80019c8:	bf00      	nop
 80019ca:	3738      	adds	r7, #56	; 0x38
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000278 	.word	0x20000278
 80019d4:	40016800 	.word	0x40016800

080019d8 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b0ae      	sub	sp, #184	; 0xb8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019f0:	f107 0320 	add.w	r3, r7, #32
 80019f4:	2284      	movs	r2, #132	; 0x84
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f009 fa49 	bl	800ae90 <memset>
  if(ltdcHandle->Instance==LTDC)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6f      	ldr	r2, [pc, #444]	; (8001bc0 <HAL_LTDC_MspInit+0x1e8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	f040 80d6 	bne.w	8001bb6 <HAL_LTDC_MspInit+0x1de>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001a0a:	2308      	movs	r3, #8
 8001a0c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001a0e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a12:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001a14:	2305      	movs	r3, #5
 8001a16:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001a20:	2301      	movs	r3, #1
 8001a22:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001a24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a28:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a2a:	f107 0320 	add.w	r3, r7, #32
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f006 fcdc 	bl	80083ec <HAL_RCCEx_PeriphCLKConfig>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8001a3a:	f000 fb5b 	bl	80020f4 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001a3e:	4b61      	ldr	r3, [pc, #388]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	4a60      	ldr	r2, [pc, #384]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a48:	6453      	str	r3, [r2, #68]	; 0x44
 8001a4a:	4b5e      	ldr	r3, [pc, #376]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a52:	61fb      	str	r3, [r7, #28]
 8001a54:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a56:	4b5b      	ldr	r3, [pc, #364]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a5a      	ldr	r2, [pc, #360]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a5c:	f043 0310 	orr.w	r3, r3, #16
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b58      	ldr	r3, [pc, #352]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0310 	and.w	r3, r3, #16
 8001a6a:	61bb      	str	r3, [r7, #24]
 8001a6c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001a6e:	4b55      	ldr	r3, [pc, #340]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a54      	ldr	r2, [pc, #336]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b52      	ldr	r3, [pc, #328]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001a86:	4b4f      	ldr	r3, [pc, #316]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8a:	4a4e      	ldr	r2, [pc, #312]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a90:	6313      	str	r3, [r2, #48]	; 0x30
 8001a92:	4b4c      	ldr	r3, [pc, #304]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a9e:	4b49      	ldr	r3, [pc, #292]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a48      	ldr	r2, [pc, #288]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001aa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b46      	ldr	r3, [pc, #280]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001ab6:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a42      	ldr	r2, [pc, #264]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <HAL_LTDC_MspInit+0x1ec>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aca:	60bb      	str	r3, [r7, #8]
 8001acc:	68bb      	ldr	r3, [r7, #8]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8001ace:	2310      	movs	r3, #16
 8001ad0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ae6:	230e      	movs	r3, #14
 8001ae8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8001aec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001af0:	4619      	mov	r1, r3
 8001af2:	4835      	ldr	r0, [pc, #212]	; (8001bc8 <HAL_LTDC_MspInit+0x1f0>)
 8001af4:	f004 face 	bl	8006094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8001af8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8001afc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b00:	2302      	movs	r3, #2
 8001b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b12:	230e      	movs	r3, #14
 8001b14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001b18:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	482b      	ldr	r0, [pc, #172]	; (8001bcc <HAL_LTDC_MspInit+0x1f4>)
 8001b20:	f004 fab8 	bl	8006094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8001b24:	23f7      	movs	r3, #247	; 0xf7
 8001b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b30:	2300      	movs	r3, #0
 8001b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b3c:	230e      	movs	r3, #14
 8001b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001b42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b46:	4619      	mov	r1, r3
 8001b48:	4821      	ldr	r0, [pc, #132]	; (8001bd0 <HAL_LTDC_MspInit+0x1f8>)
 8001b4a:	f004 faa3 	bl	8006094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8001b4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001b68:	2309      	movs	r3, #9
 8001b6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8001b6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b72:	4619      	mov	r1, r3
 8001b74:	4817      	ldr	r0, [pc, #92]	; (8001bd4 <HAL_LTDC_MspInit+0x1fc>)
 8001b76:	f004 fa8d 	bl	8006094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8001b7a:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8001b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001b94:	230e      	movs	r3, #14
 8001b96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480d      	ldr	r0, [pc, #52]	; (8001bd8 <HAL_LTDC_MspInit+0x200>)
 8001ba2:	f004 fa77 	bl	8006094 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 0, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2100      	movs	r1, #0
 8001baa:	2058      	movs	r0, #88	; 0x58
 8001bac:	f003 fc0e 	bl	80053cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001bb0:	2058      	movs	r0, #88	; 0x58
 8001bb2:	f003 fc27 	bl	8005404 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	37b8      	adds	r7, #184	; 0xb8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40016800 	.word	0x40016800
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40022400 	.word	0x40022400
 8001bd0:	40022800 	.word	0x40022800
 8001bd4:	40021800 	.word	0x40021800
 8001bd8:	40022000 	.word	0x40022000

08001bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b0af      	sub	sp, #188	; 0xbc
 8001be0:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	int etat=0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	char text[50]={},text2[50]={};
 8001be8:	2300      	movs	r3, #0
 8001bea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001bec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bf0:	222e      	movs	r2, #46	; 0x2e
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f009 f94b 	bl	800ae90 <memset>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bfe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c02:	222e      	movs	r2, #46	; 0x2e
 8001c04:	2100      	movs	r1, #0
 8001c06:	4618      	mov	r0, r3
 8001c08:	f009 f942 	bl	800ae90 <memset>
	static TS_StateTypeDef  TS_State;
	uint32_t potl,potr,joystick_h, joystick_v;
	//ADC_ChannelConfTypeDef sConfig = {0};
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c0c:	4bb1      	ldr	r3, [pc, #708]	; (8001ed4 <main+0x2f8>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	605a      	str	r2, [r3, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001c12:	4bb0      	ldr	r3, [pc, #704]	; (8001ed4 <main+0x2f8>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c18:	f002 fed5 	bl	80049c6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c1c:	f000 f982 	bl	8001f24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c20:	f7ff fa34 	bl	800108c <MX_GPIO_Init>
  MX_ADC3_Init();
 8001c24:	f7fe fd1c 	bl	8000660 <MX_ADC3_Init>
  MX_DMA2D_Init();
 8001c28:	f7fe fe4c 	bl	80008c4 <MX_DMA2D_Init>
  MX_FMC_Init();
 8001c2c:	f7fe fea2 	bl	8000974 <MX_FMC_Init>
  MX_I2C1_Init();
 8001c30:	f7ff fcec 	bl	800160c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001c34:	f7ff fd2a 	bl	800168c <MX_I2C3_Init>
  MX_LTDC_Init();
 8001c38:	f7ff fe4c 	bl	80018d4 <MX_LTDC_Init>
  MX_RTC_Init();
 8001c3c:	f000 fa60 	bl	8002100 <MX_RTC_Init>
  MX_SPI2_Init();
 8001c40:	f000 fb30 	bl	80022a4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001c44:	f002 fad2 	bl	80041ec <MX_TIM1_Init>
  MX_TIM2_Init();
 8001c48:	f002 fb24 	bl	8004294 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001c4c:	f002 fb70 	bl	8004330 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001c50:	f002 fbbc 	bl	80043cc <MX_TIM5_Init>
  MX_TIM8_Init();
 8001c54:	f002 fc08 	bl	8004468 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8001c58:	f002 fd1c 	bl	8004694 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001c5c:	f002 fd4a 	bl	80046f4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8001c60:	f7fe fcac 	bl	80005bc <MX_ADC1_Init>
  MX_DAC_Init();
 8001c64:	f7fe fdbc 	bl	80007e0 <MX_DAC_Init>
  MX_UART7_Init();
 8001c68:	f002 fce4 	bl	8004634 <MX_UART7_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8001c6c:	f000 fd5e 	bl	800272c <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8001c70:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8001c74:	2000      	movs	r0, #0
 8001c76:	f000 fdf1 	bl	800285c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_LayerDefaultInit(1, LCD_FB_START_ADDRESS+ BSP_LCD_GetXSize()*BSP_LCD_GetYSize()*4);
 8001c7a:	f000 fdc7 	bl	800280c <BSP_LCD_GetXSize>
 8001c7e:	4604      	mov	r4, r0
 8001c80:	f000 fdd8 	bl	8002834 <BSP_LCD_GetYSize>
 8001c84:	4603      	mov	r3, r0
 8001c86:	fb04 f303 	mul.w	r3, r4, r3
 8001c8a:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4619      	mov	r1, r3
 8001c92:	2001      	movs	r0, #1
 8001c94:	f000 fde2 	bl	800285c <BSP_LCD_LayerDefaultInit>
  BSP_LCD_DisplayOn();
 8001c98:	f001 fae0 	bl	800325c <BSP_LCD_DisplayOn>
  BSP_LCD_SelectLayer(0);
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f000 fe3d 	bl	800291c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001ca2:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001ca6:	f000 feab 	bl	8002a00 <BSP_LCD_Clear>
  BSP_LCD_DrawBitmap(0,0,(uint8_t*)rugby_2522306_1920_bmp);
 8001caa:	4a8b      	ldr	r2, [pc, #556]	; (8001ed8 <main+0x2fc>)
 8001cac:	2100      	movs	r1, #0
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f001 f982 	bl	8002fb8 <BSP_LCD_DrawBitmap>
  BSP_LCD_SelectLayer(1);
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f000 fe31 	bl	800291c <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(00);
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f000 fea0 	bl	8002a00 <BSP_LCD_Clear>
  BSP_LCD_SetFont(&Font24);
 8001cc0:	4886      	ldr	r0, [pc, #536]	; (8001edc <main+0x300>)
 8001cc2:	f000 fe6d 	bl	80029a0 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001cc6:	4886      	ldr	r0, [pc, #536]	; (8001ee0 <main+0x304>)
 8001cc8:	f000 fe38 	bl	800293c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(00);
 8001ccc:	2000      	movs	r0, #0
 8001cce:	f000 fe4d 	bl	800296c <BSP_LCD_SetBackColor>

  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001cd2:	f000 fd9b 	bl	800280c <BSP_LCD_GetXSize>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	b29c      	uxth	r4, r3
 8001cda:	f000 fdab 	bl	8002834 <BSP_LCD_GetYSize>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4620      	mov	r0, r4
 8001ce6:	f001 fecb 	bl	8003a80 <BSP_TS_Init>

  uint8_t Test[25]="Fin init\r\n";
 8001cea:	4a7e      	ldr	r2, [pc, #504]	; (8001ee4 <main+0x308>)
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cf2:	c303      	stmia	r3!, {r0, r1}
 8001cf4:	801a      	strh	r2, [r3, #0]
 8001cf6:	3302      	adds	r3, #2
 8001cf8:	0c12      	lsrs	r2, r2, #16
 8001cfa:	701a      	strb	r2, [r3, #0]
 8001cfc:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	819a      	strh	r2, [r3, #12]
  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);
 8001d0a:	f107 011c 	add.w	r1, r7, #28
 8001d0e:	230a      	movs	r3, #10
 8001d10:	2219      	movs	r2, #25
 8001d12:	4875      	ldr	r0, [pc, #468]	; (8001ee8 <main+0x30c>)
 8001d14:	f008 fa4e 	bl	800a1b4 <HAL_UART_Transmit>
	  	 // Bouton + LED
	  	//HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
		//HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,HAL_GPIO_ReadPin(BP2_GPIO_Port,BP2_Pin));
		//sprintf(text,"BP1 : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
		//BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
	  	BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8001d18:	4874      	ldr	r0, [pc, #464]	; (8001eec <main+0x310>)
 8001d1a:	f000 fe0f 	bl	800293c <BSP_LCD_SetTextColor>
	  	sprintf(text,"BP : %d",HAL_GPIO_ReadPin(BP1_GPIO_Port,BP1_Pin));
 8001d1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d22:	4873      	ldr	r0, [pc, #460]	; (8001ef0 <main+0x314>)
 8001d24:	f004 fc6e 	bl	8006604 <HAL_GPIO_ReadPin>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d30:	4970      	ldr	r1, [pc, #448]	; (8001ef4 <main+0x318>)
 8001d32:	4618      	mov	r0, r3
 8001d34:	f009 f88c 	bl	800ae50 <siprintf>
	  	BSP_LCD_DisplayStringAtLine(1,(uint8_t*) text);
 8001d38:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f000 ff92 	bl	8002c68 <BSP_LCD_DisplayStringAtLine>
		//HAL_ADC_ConfigChannel(&hadc3, &sConfig);
		//HAL_ADC_Start(&hadc3);
		//while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
		//potr = HAL_ADC_GetValue(&hadc3);

	  	potl=PotarEtLed(ADC_CHANNEL_7);
 8001d44:	2007      	movs	r0, #7
 8001d46:	f000 f95f 	bl	8002008 <PotarEtLed>
 8001d4a:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

	  	RTC_DateTypeDef sDate;
	  	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001d4e:	f107 0318 	add.w	r3, r7, #24
 8001d52:	2200      	movs	r2, #0
 8001d54:	4619      	mov	r1, r3
 8001d56:	4868      	ldr	r0, [pc, #416]	; (8001ef8 <main+0x31c>)
 8001d58:	f007 f938 	bl	8008fcc <HAL_RTC_GetDate>
	  	sprintf(text,"Date actuelle: %02d-%02d-%02d", sDate.Year, sDate.Month, sDate.Date);
 8001d5c:	7efb      	ldrb	r3, [r7, #27]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	7e7b      	ldrb	r3, [r7, #25]
 8001d62:	4619      	mov	r1, r3
 8001d64:	7ebb      	ldrb	r3, [r7, #26]
 8001d66:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4963      	ldr	r1, [pc, #396]	; (8001efc <main+0x320>)
 8001d70:	f009 f86e 	bl	800ae50 <siprintf>
	  	BSP_LCD_DisplayStringAtLine(2,(uint8_t*) text);
 8001d74:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d78:	4619      	mov	r1, r3
 8001d7a:	2002      	movs	r0, #2
 8001d7c:	f000 ff74 	bl	8002c68 <BSP_LCD_DisplayStringAtLine>

	  	RTC_TimeTypeDef sTime; // Structure pour stocker l'heure
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001d80:	1d3b      	adds	r3, r7, #4
 8001d82:	2200      	movs	r2, #0
 8001d84:	4619      	mov	r1, r3
 8001d86:	485c      	ldr	r0, [pc, #368]	; (8001ef8 <main+0x31c>)
 8001d88:	f007 f83e 	bl	8008e08 <HAL_RTC_GetTime>
		sprintf(text2,"Heure actuelle: %02d:%02d:%02d", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8001d8c:	793b      	ldrb	r3, [r7, #4]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	797b      	ldrb	r3, [r7, #5]
 8001d92:	4619      	mov	r1, r3
 8001d94:	79bb      	ldrb	r3, [r7, #6]
 8001d96:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4958      	ldr	r1, [pc, #352]	; (8001f00 <main+0x324>)
 8001da0:	f009 f856 	bl	800ae50 <siprintf>
		BSP_LCD_DisplayStringAtLine(3,(uint8_t*) text2);
 8001da4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001da8:	4619      	mov	r1, r3
 8001daa:	2003      	movs	r0, #3
 8001dac:	f000 ff5c 	bl	8002c68 <BSP_LCD_DisplayStringAtLine>

		HAL_UART_Receive(&huart1,&caractere_recu,1,1);
 8001db0:	2301      	movs	r3, #1
 8001db2:	2201      	movs	r2, #1
 8001db4:	4953      	ldr	r1, [pc, #332]	; (8001f04 <main+0x328>)
 8001db6:	484c      	ldr	r0, [pc, #304]	; (8001ee8 <main+0x30c>)
 8001db8:	f008 fa7f 	bl	800a2ba <HAL_UART_Receive>
		if(caractere_recu=='a') {
 8001dbc:	4b51      	ldr	r3, [pc, #324]	; (8001f04 <main+0x328>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2b61      	cmp	r3, #97	; 0x61
 8001dc2:	d118      	bne.n	8001df6 <main+0x21a>
			strcat(text2,"\r\n");
 8001dc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fa21 	bl	8000210 <strlen>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a4b      	ldr	r2, [pc, #300]	; (8001f08 <main+0x32c>)
 8001dda:	8811      	ldrh	r1, [r2, #0]
 8001ddc:	7892      	ldrb	r2, [r2, #2]
 8001dde:	8019      	strh	r1, [r3, #0]
 8001de0:	709a      	strb	r2, [r3, #2]
			HAL_UART_Transmit(&huart1,text2,sizeof(text2),10);
 8001de2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001de6:	230a      	movs	r3, #10
 8001de8:	2232      	movs	r2, #50	; 0x32
 8001dea:	483f      	ldr	r0, [pc, #252]	; (8001ee8 <main+0x30c>)
 8001dec:	f008 f9e2 	bl	800a1b4 <HAL_UART_Transmit>
			caractere_recu=0;
 8001df0:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <main+0x328>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	701a      	strb	r2, [r3, #0]
		}

		sConfig.Channel = ADC_CHANNEL_8;
 8001df6:	4b37      	ldr	r3, [pc, #220]	; (8001ed4 <main+0x2f8>)
 8001df8:	2208      	movs	r2, #8
 8001dfa:	601a      	str	r2, [r3, #0]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001dfc:	4935      	ldr	r1, [pc, #212]	; (8001ed4 <main+0x2f8>)
 8001dfe:	4843      	ldr	r0, [pc, #268]	; (8001f0c <main+0x330>)
 8001e00:	f002 ffdc 	bl	8004dbc <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001e04:	4841      	ldr	r0, [pc, #260]	; (8001f0c <main+0x330>)
 8001e06:	f002 fe73 	bl	8004af0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8001e0a:	bf00      	nop
 8001e0c:	2164      	movs	r1, #100	; 0x64
 8001e0e:	483f      	ldr	r0, [pc, #252]	; (8001f0c <main+0x330>)
 8001e10:	f002 ff3c 	bl	8004c8c <HAL_ADC_PollForConversion>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f8      	bne.n	8001e0c <main+0x230>
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001e1a:	483c      	ldr	r0, [pc, #240]	; (8001f0c <main+0x330>)
 8001e1c:	f002 ffc1 	bl	8004da2 <HAL_ADC_GetValue>
 8001e20:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

		HAL_ADC_Start(&hadc1);
 8001e24:	483a      	ldr	r0, [pc, #232]	; (8001f10 <main+0x334>)
 8001e26:	f002 fe63 	bl	8004af0 <HAL_ADC_Start>
		while(HAL_ADC_PollForConversion(&hadc1, 100)!=HAL_OK);
 8001e2a:	bf00      	nop
 8001e2c:	2164      	movs	r1, #100	; 0x64
 8001e2e:	4838      	ldr	r0, [pc, #224]	; (8001f10 <main+0x334>)
 8001e30:	f002 ff2c 	bl	8004c8c <HAL_ADC_PollForConversion>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f8      	bne.n	8001e2c <main+0x250>
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001e3a:	4835      	ldr	r0, [pc, #212]	; (8001f10 <main+0x334>)
 8001e3c:	f002 ffb1 	bl	8004da2 <HAL_ADC_GetValue>
 8001e40:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001e44:	4826      	ldr	r0, [pc, #152]	; (8001ee0 <main+0x304>)
 8001e46:	f000 fd79 	bl	800293c <BSP_LCD_SetTextColor>
		sprintf(text,"POTL : %4u joy_v : %4u joy_h : %4u",(uint16_t)potl,(uint16_t)joystick_v,(uint16_t)joystick_h);
 8001e4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8001e64:	9300      	str	r3, [sp, #0]
 8001e66:	460b      	mov	r3, r1
 8001e68:	492a      	ldr	r1, [pc, #168]	; (8001f14 <main+0x338>)
 8001e6a:	f008 fff1 	bl	800ae50 <siprintf>
		BSP_LCD_DisplayStringAtLine(9,(uint8_t*) text);
 8001e6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e72:	4619      	mov	r1, r3
 8001e74:	2009      	movs	r0, #9
 8001e76:	f000 fef7 	bl	8002c68 <BSP_LCD_DisplayStringAtLine>

		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001e7a:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001e7e:	f000 fd5d 	bl	800293c <BSP_LCD_SetTextColor>
		BSP_TS_GetState(&TS_State);
 8001e82:	4825      	ldr	r0, [pc, #148]	; (8001f18 <main+0x33c>)
 8001e84:	f001 fe3c 	bl	8003b00 <BSP_TS_GetState>

		sprintf(text,"                     ");
 8001e88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e8c:	4923      	ldr	r1, [pc, #140]	; (8001f1c <main+0x340>)
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f008 ffde 	bl	800ae50 <siprintf>
		BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8001e94:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e98:	4619      	mov	r1, r3
 8001e9a:	2005      	movs	r0, #5
 8001e9c:	f000 fee4 	bl	8002c68 <BSP_LCD_DisplayStringAtLine>
		if(TS_State.touchDetected){
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <main+0x33c>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f43f af37 	beq.w	8001d18 <main+0x13c>
			sprintf(text,"   Essai de l'ASPIQUE");
 8001eaa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eae:	491c      	ldr	r1, [pc, #112]	; (8001f20 <main+0x344>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f008 ffcd 	bl	800ae50 <siprintf>
			BSP_LCD_DisplayStringAtLine(5,(uint8_t*) text);
 8001eb6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001eba:	4619      	mov	r1, r3
 8001ebc:	2005      	movs	r0, #5
 8001ebe:	f000 fed3 	bl	8002c68 <BSP_LCD_DisplayStringAtLine>
		  BSP_LCD_FillCircle(TS_State.touchX[0],TS_State.touchY[0],4);
 8001ec2:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <main+0x33c>)
 8001ec4:	885b      	ldrh	r3, [r3, #2]
 8001ec6:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <main+0x33c>)
 8001ec8:	8991      	ldrh	r1, [r2, #12]
 8001eca:	2204      	movs	r2, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f001 f925 	bl	800311c <BSP_LCD_FillCircle>
  {
 8001ed2:	e721      	b.n	8001d18 <main+0x13c>
 8001ed4:	20000320 	.word	0x20000320
 8001ed8:	0800b86c 	.word	0x0800b86c
 8001edc:	20000028 	.word	0x20000028
 8001ee0:	ffff0000 	.word	0xffff0000
 8001ee4:	0800b850 	.word	0x0800b850
 8001ee8:	20000908 	.word	0x20000908
 8001eec:	ff0000ff 	.word	0xff0000ff
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	0800b7b0 	.word	0x0800b7b0
 8001ef8:	20000360 	.word	0x20000360
 8001efc:	0800b7b8 	.word	0x0800b7b8
 8001f00:	0800b7d8 	.word	0x0800b7d8
 8001f04:	20000330 	.word	0x20000330
 8001f08:	0800b7f8 	.word	0x0800b7f8
 8001f0c:	200000f4 	.word	0x200000f4
 8001f10:	200000ac 	.word	0x200000ac
 8001f14:	0800b7fc 	.word	0x0800b7fc
 8001f18:	20000334 	.word	0x20000334
 8001f1c:	0800b820 	.word	0x0800b820
 8001f20:	0800b838 	.word	0x0800b838

08001f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b094      	sub	sp, #80	; 0x50
 8001f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f2a:	f107 0320 	add.w	r3, r7, #32
 8001f2e:	2230      	movs	r2, #48	; 0x30
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f008 ffac 	bl	800ae90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f38:	f107 030c 	add.w	r3, r7, #12
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f48:	f005 fd34 	bl	80079b4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f4c:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <SystemClock_Config+0xdc>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f50:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <SystemClock_Config+0xdc>)
 8001f52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f56:	6413      	str	r3, [r2, #64]	; 0x40
 8001f58:	4b29      	ldr	r3, [pc, #164]	; (8002000 <SystemClock_Config+0xdc>)
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f60:	60bb      	str	r3, [r7, #8]
 8001f62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <SystemClock_Config+0xe0>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a26      	ldr	r2, [pc, #152]	; (8002004 <SystemClock_Config+0xe0>)
 8001f6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f6e:	6013      	str	r3, [r2, #0]
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <SystemClock_Config+0xe0>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001f7c:	2309      	movs	r3, #9
 8001f7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f86:	2301      	movs	r3, #1
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001f94:	2319      	movs	r3, #25
 8001f96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001f98:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001fa2:	2309      	movs	r3, #9
 8001fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa6:	f107 0320 	add.w	r3, r7, #32
 8001faa:	4618      	mov	r0, r3
 8001fac:	f005 fd62 	bl	8007a74 <HAL_RCC_OscConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001fb6:	f000 f89d 	bl	80020f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001fba:	f005 fd0b 	bl	80079d4 <HAL_PWREx_EnableOverDrive>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001fc4:	f000 f896 	bl	80020f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fc8:	230f      	movs	r3, #15
 8001fca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001fe0:	f107 030c 	add.w	r3, r7, #12
 8001fe4:	2106      	movs	r1, #6
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f005 ffe8 	bl	8007fbc <HAL_RCC_ClockConfig>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001ff2:	f000 f87f 	bl	80020f4 <Error_Handler>
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	3750      	adds	r7, #80	; 0x50
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023800 	.word	0x40023800
 8002004:	40007000 	.word	0x40007000

08002008 <PotarEtLed>:

/* USER CODE BEGIN 4 */
// ==============================================================================================================

uint32_t PotarEtLed(uint32_t canal_adc){
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
	uint32_t potl;
	sConfig.Channel = canal_adc;
 8002010:	4a2b      	ldr	r2, [pc, #172]	; (80020c0 <PotarEtLed+0xb8>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6013      	str	r3, [r2, #0]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8002016:	492a      	ldr	r1, [pc, #168]	; (80020c0 <PotarEtLed+0xb8>)
 8002018:	482a      	ldr	r0, [pc, #168]	; (80020c4 <PotarEtLed+0xbc>)
 800201a:	f002 fecf 	bl	8004dbc <HAL_ADC_ConfigChannel>
	HAL_ADC_Start(&hadc3);
 800201e:	4829      	ldr	r0, [pc, #164]	; (80020c4 <PotarEtLed+0xbc>)
 8002020:	f002 fd66 	bl	8004af0 <HAL_ADC_Start>
	while(HAL_ADC_PollForConversion(&hadc3, 100)!=HAL_OK);
 8002024:	bf00      	nop
 8002026:	2164      	movs	r1, #100	; 0x64
 8002028:	4826      	ldr	r0, [pc, #152]	; (80020c4 <PotarEtLed+0xbc>)
 800202a:	f002 fe2f 	bl	8004c8c <HAL_ADC_PollForConversion>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1f8      	bne.n	8002026 <PotarEtLed+0x1e>
	potl = HAL_ADC_GetValue(&hadc3);
 8002034:	4823      	ldr	r0, [pc, #140]	; (80020c4 <PotarEtLed+0xbc>)
 8002036:	f002 feb4 	bl	8004da2 <HAL_ADC_GetValue>
 800203a:	60f8      	str	r0, [r7, #12]

	HAL_GPIO_WritePin(LED11_GPIO_Port,LED11_Pin,0);
 800203c:	2200      	movs	r2, #0
 800203e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002042:	4821      	ldr	r0, [pc, #132]	; (80020c8 <PotarEtLed+0xc0>)
 8002044:	f004 faf6 	bl	8006634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,0);
 8002048:	2200      	movs	r2, #0
 800204a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800204e:	481e      	ldr	r0, [pc, #120]	; (80020c8 <PotarEtLed+0xc0>)
 8002050:	f004 faf0 	bl	8006634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,0);
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800205a:	481b      	ldr	r0, [pc, #108]	; (80020c8 <PotarEtLed+0xc0>)
 800205c:	f004 faea 	bl	8006634 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,0);
 8002060:	2200      	movs	r2, #0
 8002062:	2120      	movs	r1, #32
 8002064:	4819      	ldr	r0, [pc, #100]	; (80020cc <PotarEtLed+0xc4>)
 8002066:	f004 fae5 	bl	8006634 <HAL_GPIO_WritePin>
	if (potl<200){
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2bc7      	cmp	r3, #199	; 0xc7
 800206e:	d805      	bhi.n	800207c <PotarEtLed+0x74>
		HAL_GPIO_WritePin(LED11_GPIO_Port,LED11_Pin,1);
 8002070:	2201      	movs	r2, #1
 8002072:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002076:	4814      	ldr	r0, [pc, #80]	; (80020c8 <PotarEtLed+0xc0>)
 8002078:	f004 fadc 	bl	8006634 <HAL_GPIO_WritePin>
	}
	if (potl<400){
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002082:	d205      	bcs.n	8002090 <PotarEtLed+0x88>
			HAL_GPIO_WritePin(LED12_GPIO_Port,LED12_Pin,1);
 8002084:	2201      	movs	r2, #1
 8002086:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208a:	480f      	ldr	r0, [pc, #60]	; (80020c8 <PotarEtLed+0xc0>)
 800208c:	f004 fad2 	bl	8006634 <HAL_GPIO_WritePin>
	}
	if (potl<600){
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002096:	d205      	bcs.n	80020a4 <PotarEtLed+0x9c>
			HAL_GPIO_WritePin(LED13_GPIO_Port,LED13_Pin,1);
 8002098:	2201      	movs	r2, #1
 800209a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800209e:	480a      	ldr	r0, [pc, #40]	; (80020c8 <PotarEtLed+0xc0>)
 80020a0:	f004 fac8 	bl	8006634 <HAL_GPIO_WritePin>
	}
	if (potl<800){
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80020aa:	d204      	bcs.n	80020b6 <PotarEtLed+0xae>
			HAL_GPIO_WritePin(LED14_GPIO_Port,LED14_Pin,1);
 80020ac:	2201      	movs	r2, #1
 80020ae:	2120      	movs	r1, #32
 80020b0:	4806      	ldr	r0, [pc, #24]	; (80020cc <PotarEtLed+0xc4>)
 80020b2:	f004 fabf 	bl	8006634 <HAL_GPIO_WritePin>
	}
	return(potl);
 80020b6:	68fb      	ldr	r3, [r7, #12]

}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20000320 	.word	0x20000320
 80020c4:	200000f4 	.word	0x200000f4
 80020c8:	40021c00 	.word	0x40021c00
 80020cc:	40021000 	.word	0x40021000

080020d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a04      	ldr	r2, [pc, #16]	; (80020f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020e2:	f002 fc7d 	bl	80049e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40001000 	.word	0x40001000

080020f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i
}
 80020fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020fc:	e7fe      	b.n	80020fc <Error_Handler+0x8>
	...

08002100 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b090      	sub	sp, #64	; 0x40
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8002106:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
 8002114:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002116:	2300      	movs	r3, #0
 8002118:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800211a:	463b      	mov	r3, r7
 800211c:	2228      	movs	r2, #40	; 0x28
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f008 feb5 	bl	800ae90 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002126:	4b46      	ldr	r3, [pc, #280]	; (8002240 <MX_RTC_Init+0x140>)
 8002128:	4a46      	ldr	r2, [pc, #280]	; (8002244 <MX_RTC_Init+0x144>)
 800212a:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800212c:	4b44      	ldr	r3, [pc, #272]	; (8002240 <MX_RTC_Init+0x140>)
 800212e:	2200      	movs	r2, #0
 8002130:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002132:	4b43      	ldr	r3, [pc, #268]	; (8002240 <MX_RTC_Init+0x140>)
 8002134:	227f      	movs	r2, #127	; 0x7f
 8002136:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002138:	4b41      	ldr	r3, [pc, #260]	; (8002240 <MX_RTC_Init+0x140>)
 800213a:	22ff      	movs	r2, #255	; 0xff
 800213c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800213e:	4b40      	ldr	r3, [pc, #256]	; (8002240 <MX_RTC_Init+0x140>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002144:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <MX_RTC_Init+0x140>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800214a:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <MX_RTC_Init+0x140>)
 800214c:	2200      	movs	r2, #0
 800214e:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002150:	483b      	ldr	r0, [pc, #236]	; (8002240 <MX_RTC_Init+0x140>)
 8002152:	f006 fd3b 	bl	8008bcc <HAL_RTC_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800215c:	f7ff ffca 	bl	80020f4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8002160:	2300      	movs	r3, #0
 8002162:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8002166:	2300      	movs	r3, #0
 8002168:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800216c:	2300      	movs	r3, #0
 800216e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002172:	2300      	movs	r3, #0
 8002174:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800217a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800217e:	2201      	movs	r2, #1
 8002180:	4619      	mov	r1, r3
 8002182:	482f      	ldr	r0, [pc, #188]	; (8002240 <MX_RTC_Init+0x140>)
 8002184:	f006 fda6 	bl	8008cd4 <HAL_RTC_SetTime>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800218e:	f7ff ffb1 	bl	80020f4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002192:	2301      	movs	r3, #1
 8002194:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8002198:	2301      	movs	r3, #1
 800219a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800219e:	2301      	movs	r3, #1
 80021a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80021aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ae:	2201      	movs	r2, #1
 80021b0:	4619      	mov	r1, r3
 80021b2:	4823      	ldr	r0, [pc, #140]	; (8002240 <MX_RTC_Init+0x140>)
 80021b4:	f006 fe86 	bl	8008ec4 <HAL_RTC_SetDate>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80021be:	f7ff ff99 	bl	80020f4 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80021d2:	2300      	movs	r3, #0
 80021d4:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80021ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80021f2:	463b      	mov	r3, r7
 80021f4:	2201      	movs	r2, #1
 80021f6:	4619      	mov	r1, r3
 80021f8:	4811      	ldr	r0, [pc, #68]	; (8002240 <MX_RTC_Init+0x140>)
 80021fa:	f006 ff37 	bl	800906c <HAL_RTC_SetAlarm>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8002204:	f7ff ff76 	bl	80020f4 <Error_Handler>
  }

  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8002208:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800220e:	463b      	mov	r3, r7
 8002210:	2201      	movs	r2, #1
 8002212:	4619      	mov	r1, r3
 8002214:	480a      	ldr	r0, [pc, #40]	; (8002240 <MX_RTC_Init+0x140>)
 8002216:	f006 ff29 	bl	800906c <HAL_RTC_SetAlarm>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_RTC_Init+0x124>
  {
    Error_Handler();
 8002220:	f7ff ff68 	bl	80020f4 <Error_Handler>
  }

  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8002224:	2202      	movs	r2, #2
 8002226:	2100      	movs	r1, #0
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_RTC_Init+0x140>)
 800222a:	f007 f909 	bl	8009440 <HAL_RTCEx_SetTimeStamp>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_RTC_Init+0x138>
  {
    Error_Handler();
 8002234:	f7ff ff5e 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002238:	bf00      	nop
 800223a:	3740      	adds	r7, #64	; 0x40
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000360 	.word	0x20000360
 8002244:	40002800 	.word	0x40002800

08002248 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b0a4      	sub	sp, #144	; 0x90
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002250:	f107 030c 	add.w	r3, r7, #12
 8002254:	2284      	movs	r2, #132	; 0x84
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f008 fe19 	bl	800ae90 <memset>
  if(rtcHandle->Instance==RTC)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_RTC_MspInit+0x54>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d114      	bne.n	8002292 <HAL_RTC_MspInit+0x4a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002268:	2320      	movs	r3, #32
 800226a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800226c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002270:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	4618      	mov	r0, r3
 8002278:	f006 f8b8 	bl	80083ec <HAL_RCCEx_PeriphCLKConfig>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002282:	f7ff ff37 	bl	80020f4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RTC_MspInit+0x58>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800228a:	4a05      	ldr	r2, [pc, #20]	; (80022a0 <HAL_RTC_MspInit+0x58>)
 800228c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002290:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8002292:	bf00      	nop
 8002294:	3790      	adds	r7, #144	; 0x90
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40002800 	.word	0x40002800
 80022a0:	40023800 	.word	0x40023800

080022a4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <MX_SPI2_Init+0x74>)
 80022aa:	4a1c      	ldr	r2, [pc, #112]	; (800231c <MX_SPI2_Init+0x78>)
 80022ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <MX_SPI2_Init+0x74>)
 80022b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <MX_SPI2_Init+0x74>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80022bc:	4b16      	ldr	r3, [pc, #88]	; (8002318 <MX_SPI2_Init+0x74>)
 80022be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80022c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022c4:	4b14      	ldr	r3, [pc, #80]	; (8002318 <MX_SPI2_Init+0x74>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <MX_SPI2_Init+0x74>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <MX_SPI2_Init+0x74>)
 80022d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80022d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022d8:	4b0f      	ldr	r3, [pc, #60]	; (8002318 <MX_SPI2_Init+0x74>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022de:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <MX_SPI2_Init+0x74>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <MX_SPI2_Init+0x74>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022ea:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <MX_SPI2_Init+0x74>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <MX_SPI2_Init+0x74>)
 80022f2:	2207      	movs	r2, #7
 80022f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022f6:	4b08      	ldr	r3, [pc, #32]	; (8002318 <MX_SPI2_Init+0x74>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <MX_SPI2_Init+0x74>)
 80022fe:	2208      	movs	r2, #8
 8002300:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002302:	4805      	ldr	r0, [pc, #20]	; (8002318 <MX_SPI2_Init+0x74>)
 8002304:	f007 f995 	bl	8009632 <HAL_SPI_Init>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800230e:	f7ff fef1 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002312:	bf00      	nop
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000380 	.word	0x20000380
 800231c:	40003800 	.word	0x40003800

08002320 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08a      	sub	sp, #40	; 0x28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0314 	add.w	r3, r7, #20
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a25      	ldr	r2, [pc, #148]	; (80023d4 <HAL_SPI_MspInit+0xb4>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d144      	bne.n	80023cc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002342:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <HAL_SPI_MspInit+0xb8>)
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	4a24      	ldr	r2, [pc, #144]	; (80023d8 <HAL_SPI_MspInit+0xb8>)
 8002348:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800234c:	6413      	str	r3, [r2, #64]	; 0x40
 800234e:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_SPI_MspInit+0xb8>)
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800235a:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <HAL_SPI_MspInit+0xb8>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a1e      	ldr	r2, [pc, #120]	; (80023d8 <HAL_SPI_MspInit+0xb8>)
 8002360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <HAL_SPI_MspInit+0xb8>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <HAL_SPI_MspInit+0xb8>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a18      	ldr	r2, [pc, #96]	; (80023d8 <HAL_SPI_MspInit+0xb8>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <HAL_SPI_MspInit+0xb8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800238a:	2303      	movs	r3, #3
 800238c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002396:	2303      	movs	r3, #3
 8002398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800239a:	2305      	movs	r3, #5
 800239c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800239e:	f107 0314 	add.w	r3, r7, #20
 80023a2:	4619      	mov	r1, r3
 80023a4:	480d      	ldr	r0, [pc, #52]	; (80023dc <HAL_SPI_MspInit+0xbc>)
 80023a6:	f003 fe75 	bl	8006094 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80023aa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80023ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023bc:	2305      	movs	r3, #5
 80023be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	4806      	ldr	r0, [pc, #24]	; (80023e0 <HAL_SPI_MspInit+0xc0>)
 80023c8:	f003 fe64 	bl	8006094 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80023cc:	bf00      	nop
 80023ce:	3728      	adds	r7, #40	; 0x28
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40003800 	.word	0x40003800
 80023d8:	40023800 	.word	0x40023800
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40020400 	.word	0x40020400

080023e4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08c      	sub	sp, #48	; 0x30
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a51      	ldr	r2, [pc, #324]	; (8002534 <I2Cx_MspInit+0x150>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d14d      	bne.n	8002490 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80023f4:	4b50      	ldr	r3, [pc, #320]	; (8002538 <I2Cx_MspInit+0x154>)
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	4a4f      	ldr	r2, [pc, #316]	; (8002538 <I2Cx_MspInit+0x154>)
 80023fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fe:	6313      	str	r3, [r2, #48]	; 0x30
 8002400:	4b4d      	ldr	r3, [pc, #308]	; (8002538 <I2Cx_MspInit+0x154>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002410:	2312      	movs	r3, #18
 8002412:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002414:	2300      	movs	r3, #0
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002418:	2302      	movs	r3, #2
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800241c:	2304      	movs	r3, #4
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002420:	f107 031c 	add.w	r3, r7, #28
 8002424:	4619      	mov	r1, r3
 8002426:	4845      	ldr	r0, [pc, #276]	; (800253c <I2Cx_MspInit+0x158>)
 8002428:	f003 fe34 	bl	8006094 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800242c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002430:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	4619      	mov	r1, r3
 8002438:	4840      	ldr	r0, [pc, #256]	; (800253c <I2Cx_MspInit+0x158>)
 800243a:	f003 fe2b 	bl	8006094 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800243e:	4b3e      	ldr	r3, [pc, #248]	; (8002538 <I2Cx_MspInit+0x154>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	4a3d      	ldr	r2, [pc, #244]	; (8002538 <I2Cx_MspInit+0x154>)
 8002444:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002448:	6413      	str	r3, [r2, #64]	; 0x40
 800244a:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <I2Cx_MspInit+0x154>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002456:	4b38      	ldr	r3, [pc, #224]	; (8002538 <I2Cx_MspInit+0x154>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	4a37      	ldr	r2, [pc, #220]	; (8002538 <I2Cx_MspInit+0x154>)
 800245c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002460:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002462:	4b35      	ldr	r3, [pc, #212]	; (8002538 <I2Cx_MspInit+0x154>)
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	4a34      	ldr	r2, [pc, #208]	; (8002538 <I2Cx_MspInit+0x154>)
 8002468:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800246c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800246e:	2200      	movs	r2, #0
 8002470:	210f      	movs	r1, #15
 8002472:	2048      	movs	r0, #72	; 0x48
 8002474:	f002 ffaa 	bl	80053cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002478:	2048      	movs	r0, #72	; 0x48
 800247a:	f002 ffc3 	bl	8005404 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800247e:	2200      	movs	r2, #0
 8002480:	210f      	movs	r1, #15
 8002482:	2049      	movs	r0, #73	; 0x49
 8002484:	f002 ffa2 	bl	80053cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002488:	2049      	movs	r0, #73	; 0x49
 800248a:	f002 ffbb 	bl	8005404 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800248e:	e04d      	b.n	800252c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002490:	4b29      	ldr	r3, [pc, #164]	; (8002538 <I2Cx_MspInit+0x154>)
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	4a28      	ldr	r2, [pc, #160]	; (8002538 <I2Cx_MspInit+0x154>)
 8002496:	f043 0302 	orr.w	r3, r3, #2
 800249a:	6313      	str	r3, [r2, #48]	; 0x30
 800249c:	4b26      	ldr	r3, [pc, #152]	; (8002538 <I2Cx_MspInit+0x154>)
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80024a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024ac:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80024ae:	2312      	movs	r3, #18
 80024b0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80024b6:	2302      	movs	r3, #2
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80024ba:	2304      	movs	r3, #4
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024be:	f107 031c 	add.w	r3, r7, #28
 80024c2:	4619      	mov	r1, r3
 80024c4:	481e      	ldr	r0, [pc, #120]	; (8002540 <I2Cx_MspInit+0x15c>)
 80024c6:	f003 fde5 	bl	8006094 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80024ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024d0:	f107 031c 	add.w	r3, r7, #28
 80024d4:	4619      	mov	r1, r3
 80024d6:	481a      	ldr	r0, [pc, #104]	; (8002540 <I2Cx_MspInit+0x15c>)
 80024d8:	f003 fddc 	bl	8006094 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80024dc:	4b16      	ldr	r3, [pc, #88]	; (8002538 <I2Cx_MspInit+0x154>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	4a15      	ldr	r2, [pc, #84]	; (8002538 <I2Cx_MspInit+0x154>)
 80024e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024e6:	6413      	str	r3, [r2, #64]	; 0x40
 80024e8:	4b13      	ldr	r3, [pc, #76]	; (8002538 <I2Cx_MspInit+0x154>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80024f4:	4b10      	ldr	r3, [pc, #64]	; (8002538 <I2Cx_MspInit+0x154>)
 80024f6:	6a1b      	ldr	r3, [r3, #32]
 80024f8:	4a0f      	ldr	r2, [pc, #60]	; (8002538 <I2Cx_MspInit+0x154>)
 80024fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024fe:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002500:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <I2Cx_MspInit+0x154>)
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <I2Cx_MspInit+0x154>)
 8002506:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800250a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800250c:	2200      	movs	r2, #0
 800250e:	210f      	movs	r1, #15
 8002510:	201f      	movs	r0, #31
 8002512:	f002 ff5b 	bl	80053cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002516:	201f      	movs	r0, #31
 8002518:	f002 ff74 	bl	8005404 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800251c:	2200      	movs	r2, #0
 800251e:	210f      	movs	r1, #15
 8002520:	2020      	movs	r0, #32
 8002522:	f002 ff53 	bl	80053cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002526:	2020      	movs	r0, #32
 8002528:	f002 ff6c 	bl	8005404 <HAL_NVIC_EnableIRQ>
}
 800252c:	bf00      	nop
 800252e:	3730      	adds	r7, #48	; 0x30
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200003e4 	.word	0x200003e4
 8002538:	40023800 	.word	0x40023800
 800253c:	40021c00 	.word	0x40021c00
 8002540:	40020400 	.word	0x40020400

08002544 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f004 fb79 	bl	8006c44 <HAL_I2C_GetState>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d125      	bne.n	80025a4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a14      	ldr	r2, [pc, #80]	; (80025ac <I2Cx_Init+0x68>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d103      	bne.n	8002568 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	4a13      	ldr	r2, [pc, #76]	; (80025b0 <I2Cx_Init+0x6c>)
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e002      	b.n	800256e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <I2Cx_Init+0x70>)
 800256c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <I2Cx_Init+0x74>)
 8002572:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2201      	movs	r2, #1
 800257e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff23 	bl	80023e4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f004 f862 	bl	8006668 <HAL_I2C_Init>
  }
}
 80025a4:	bf00      	nop
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200003e4 	.word	0x200003e4
 80025b0:	40005c00 	.word	0x40005c00
 80025b4:	40005400 	.word	0x40005400
 80025b8:	40912732 	.word	0x40912732

080025bc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	; 0x28
 80025c0:	af04      	add	r7, sp, #16
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	4608      	mov	r0, r1
 80025c6:	4611      	mov	r1, r2
 80025c8:	461a      	mov	r2, r3
 80025ca:	4603      	mov	r3, r0
 80025cc:	72fb      	strb	r3, [r7, #11]
 80025ce:	460b      	mov	r3, r1
 80025d0:	813b      	strh	r3, [r7, #8]
 80025d2:	4613      	mov	r3, r2
 80025d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80025da:	7afb      	ldrb	r3, [r7, #11]
 80025dc:	b299      	uxth	r1, r3
 80025de:	88f8      	ldrh	r0, [r7, #6]
 80025e0:	893a      	ldrh	r2, [r7, #8]
 80025e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e6:	9302      	str	r3, [sp, #8]
 80025e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	6a3b      	ldr	r3, [r7, #32]
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	4603      	mov	r3, r0
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f004 fa0c 	bl	8006a10 <HAL_I2C_Mem_Read>
 80025f8:	4603      	mov	r3, r0
 80025fa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80025fc:	7dfb      	ldrb	r3, [r7, #23]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002602:	7afb      	ldrb	r3, [r7, #11]
 8002604:	4619      	mov	r1, r3
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f000 f832 	bl	8002670 <I2Cx_Error>
  }
  return status;    
 800260c:	7dfb      	ldrb	r3, [r7, #23]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b08a      	sub	sp, #40	; 0x28
 800261a:	af04      	add	r7, sp, #16
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	4608      	mov	r0, r1
 8002620:	4611      	mov	r1, r2
 8002622:	461a      	mov	r2, r3
 8002624:	4603      	mov	r3, r0
 8002626:	72fb      	strb	r3, [r7, #11]
 8002628:	460b      	mov	r3, r1
 800262a:	813b      	strh	r3, [r7, #8]
 800262c:	4613      	mov	r3, r2
 800262e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002630:	2300      	movs	r3, #0
 8002632:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002634:	7afb      	ldrb	r3, [r7, #11]
 8002636:	b299      	uxth	r1, r3
 8002638:	88f8      	ldrh	r0, [r7, #6]
 800263a:	893a      	ldrh	r2, [r7, #8]
 800263c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002640:	9302      	str	r3, [sp, #8]
 8002642:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	6a3b      	ldr	r3, [r7, #32]
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	4603      	mov	r3, r0
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f004 f8cb 	bl	80067e8 <HAL_I2C_Mem_Write>
 8002652:	4603      	mov	r3, r0
 8002654:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d004      	beq.n	8002666 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800265c:	7afb      	ldrb	r3, [r7, #11]
 800265e:	4619      	mov	r1, r3
 8002660:	68f8      	ldr	r0, [r7, #12]
 8002662:	f000 f805 	bl	8002670 <I2Cx_Error>
  }
  return status;
 8002666:	7dfb      	ldrb	r3, [r7, #23]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b082      	sub	sp, #8
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	460b      	mov	r3, r1
 800267a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f004 f883 	bl	8006788 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7ff ff5e 	bl	8002544 <I2Cx_Init>
}
 8002688:	bf00      	nop
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002694:	4802      	ldr	r0, [pc, #8]	; (80026a0 <TS_IO_Init+0x10>)
 8002696:	f7ff ff55 	bl	8002544 <I2Cx_Init>
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	200003e4 	.word	0x200003e4

080026a4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af02      	add	r7, sp, #8
 80026aa:	4603      	mov	r3, r0
 80026ac:	71fb      	strb	r3, [r7, #7]
 80026ae:	460b      	mov	r3, r1
 80026b0:	71bb      	strb	r3, [r7, #6]
 80026b2:	4613      	mov	r3, r2
 80026b4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80026b6:	79bb      	ldrb	r3, [r7, #6]
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	79f9      	ldrb	r1, [r7, #7]
 80026bc:	2301      	movs	r3, #1
 80026be:	9301      	str	r3, [sp, #4]
 80026c0:	1d7b      	adds	r3, r7, #5
 80026c2:	9300      	str	r3, [sp, #0]
 80026c4:	2301      	movs	r3, #1
 80026c6:	4803      	ldr	r0, [pc, #12]	; (80026d4 <TS_IO_Write+0x30>)
 80026c8:	f7ff ffa5 	bl	8002616 <I2Cx_WriteMultiple>
}
 80026cc:	bf00      	nop
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	200003e4 	.word	0x200003e4

080026d8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af02      	add	r7, sp, #8
 80026de:	4603      	mov	r3, r0
 80026e0:	460a      	mov	r2, r1
 80026e2:	71fb      	strb	r3, [r7, #7]
 80026e4:	4613      	mov	r3, r2
 80026e6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80026ec:	79bb      	ldrb	r3, [r7, #6]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	79f9      	ldrb	r1, [r7, #7]
 80026f2:	2301      	movs	r3, #1
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	f107 030f 	add.w	r3, r7, #15
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2301      	movs	r3, #1
 80026fe:	4804      	ldr	r0, [pc, #16]	; (8002710 <TS_IO_Read+0x38>)
 8002700:	f7ff ff5c 	bl	80025bc <I2Cx_ReadMultiple>

  return read_value;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	200003e4 	.word	0x200003e4

08002714 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f002 f97f 	bl	8004a20 <HAL_Delay>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
	...

0800272c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002730:	4b31      	ldr	r3, [pc, #196]	; (80027f8 <BSP_LCD_Init+0xcc>)
 8002732:	2228      	movs	r2, #40	; 0x28
 8002734:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002736:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <BSP_LCD_Init+0xcc>)
 8002738:	2209      	movs	r2, #9
 800273a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 800273c:	4b2e      	ldr	r3, [pc, #184]	; (80027f8 <BSP_LCD_Init+0xcc>)
 800273e:	2235      	movs	r2, #53	; 0x35
 8002740:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002742:	4b2d      	ldr	r3, [pc, #180]	; (80027f8 <BSP_LCD_Init+0xcc>)
 8002744:	220b      	movs	r2, #11
 8002746:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002748:	4b2b      	ldr	r3, [pc, #172]	; (80027f8 <BSP_LCD_Init+0xcc>)
 800274a:	f240 121b 	movw	r2, #283	; 0x11b
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002750:	4b29      	ldr	r3, [pc, #164]	; (80027f8 <BSP_LCD_Init+0xcc>)
 8002752:	f240 2215 	movw	r2, #533	; 0x215
 8002756:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002758:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <BSP_LCD_Init+0xcc>)
 800275a:	f240 121d 	movw	r2, #285	; 0x11d
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002760:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <BSP_LCD_Init+0xcc>)
 8002762:	f240 2235 	movw	r2, #565	; 0x235
 8002766:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002768:	2100      	movs	r1, #0
 800276a:	4823      	ldr	r0, [pc, #140]	; (80027f8 <BSP_LCD_Init+0xcc>)
 800276c:	f000 fe6e 	bl	800344c <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002770:	4b21      	ldr	r3, [pc, #132]	; (80027f8 <BSP_LCD_Init+0xcc>)
 8002772:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002776:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002778:	4b1f      	ldr	r3, [pc, #124]	; (80027f8 <BSP_LCD_Init+0xcc>)
 800277a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800277e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <BSP_LCD_Init+0xcc>)
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002788:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <BSP_LCD_Init+0xcc>)
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002790:	4b19      	ldr	r3, [pc, #100]	; (80027f8 <BSP_LCD_Init+0xcc>)
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002798:	4b17      	ldr	r3, [pc, #92]	; (80027f8 <BSP_LCD_Init+0xcc>)
 800279a:	2200      	movs	r2, #0
 800279c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800279e:	4b16      	ldr	r3, [pc, #88]	; (80027f8 <BSP_LCD_Init+0xcc>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80027a4:	4b14      	ldr	r3, [pc, #80]	; (80027f8 <BSP_LCD_Init+0xcc>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80027aa:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <BSP_LCD_Init+0xcc>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80027b0:	4b11      	ldr	r3, [pc, #68]	; (80027f8 <BSP_LCD_Init+0xcc>)
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <BSP_LCD_Init+0xd0>)
 80027b4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80027b6:	4810      	ldr	r0, [pc, #64]	; (80027f8 <BSP_LCD_Init+0xcc>)
 80027b8:	f004 ff54 	bl	8007664 <HAL_LTDC_GetState>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80027c2:	2100      	movs	r1, #0
 80027c4:	480c      	ldr	r0, [pc, #48]	; (80027f8 <BSP_LCD_Init+0xcc>)
 80027c6:	f000 fd67 	bl	8003298 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80027ca:	480b      	ldr	r0, [pc, #44]	; (80027f8 <BSP_LCD_Init+0xcc>)
 80027cc:	f004 fd7a 	bl	80072c4 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027d6:	480a      	ldr	r0, [pc, #40]	; (8002800 <BSP_LCD_Init+0xd4>)
 80027d8:	f003 ff2c 	bl	8006634 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80027dc:	2201      	movs	r2, #1
 80027de:	2108      	movs	r1, #8
 80027e0:	4808      	ldr	r0, [pc, #32]	; (8002804 <BSP_LCD_Init+0xd8>)
 80027e2:	f003 ff27 	bl	8006634 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80027e6:	f000 ff95 	bl	8003714 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80027ea:	4807      	ldr	r0, [pc, #28]	; (8002808 <BSP_LCD_Init+0xdc>)
 80027ec:	f000 f8d8 	bl	80029a0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	20000438 	.word	0x20000438
 80027fc:	40016800 	.word	0x40016800
 8002800:	40022000 	.word	0x40022000
 8002804:	40022800 	.word	0x40022800
 8002808:	20000028 	.word	0x20000028

0800280c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002810:	4b06      	ldr	r3, [pc, #24]	; (800282c <BSP_LCD_GetXSize+0x20>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a06      	ldr	r2, [pc, #24]	; (8002830 <BSP_LCD_GetXSize+0x24>)
 8002816:	2134      	movs	r1, #52	; 0x34
 8002818:	fb01 f303 	mul.w	r3, r1, r3
 800281c:	4413      	add	r3, r2
 800281e:	3360      	adds	r3, #96	; 0x60
 8002820:	681b      	ldr	r3, [r3, #0]
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	20000520 	.word	0x20000520
 8002830:	20000438 	.word	0x20000438

08002834 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <BSP_LCD_GetYSize+0x20>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a06      	ldr	r2, [pc, #24]	; (8002858 <BSP_LCD_GetYSize+0x24>)
 800283e:	2134      	movs	r1, #52	; 0x34
 8002840:	fb01 f303 	mul.w	r3, r1, r3
 8002844:	4413      	add	r3, r2
 8002846:	3364      	adds	r3, #100	; 0x64
 8002848:	681b      	ldr	r3, [r3, #0]
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	20000520 	.word	0x20000520
 8002858:	20000438 	.word	0x20000438

0800285c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 800285c:	b580      	push	{r7, lr}
 800285e:	b090      	sub	sp, #64	; 0x40
 8002860:	af00      	add	r7, sp, #0
 8002862:	4603      	mov	r3, r0
 8002864:	6039      	str	r1, [r7, #0]
 8002866:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 800286c:	f7ff ffce 	bl	800280c <BSP_LCD_GetXSize>
 8002870:	4603      	mov	r3, r0
 8002872:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002878:	f7ff ffdc 	bl	8002834 <BSP_LCD_GetYSize>
 800287c:	4603      	mov	r3, r0
 800287e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002880:	2300      	movs	r3, #0
 8002882:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002888:	23ff      	movs	r3, #255	; 0xff
 800288a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80028a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80028a8:	2307      	movs	r3, #7
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80028ac:	f7ff ffae 	bl	800280c <BSP_LCD_GetXSize>
 80028b0:	4603      	mov	r3, r0
 80028b2:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80028b4:	f7ff ffbe 	bl	8002834 <BSP_LCD_GetYSize>
 80028b8:	4603      	mov	r3, r0
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80028bc:	88fa      	ldrh	r2, [r7, #6]
 80028be:	f107 030c 	add.w	r3, r7, #12
 80028c2:	4619      	mov	r1, r3
 80028c4:	4812      	ldr	r0, [pc, #72]	; (8002910 <BSP_LCD_LayerDefaultInit+0xb4>)
 80028c6:	f004 fe8f 	bl	80075e8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80028ca:	88fa      	ldrh	r2, [r7, #6]
 80028cc:	4911      	ldr	r1, [pc, #68]	; (8002914 <BSP_LCD_LayerDefaultInit+0xb8>)
 80028ce:	4613      	mov	r3, r2
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	4413      	add	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	3304      	adds	r3, #4
 80028da:	f04f 32ff 	mov.w	r2, #4294967295
 80028de:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80028e0:	88fa      	ldrh	r2, [r7, #6]
 80028e2:	490c      	ldr	r1, [pc, #48]	; (8002914 <BSP_LCD_LayerDefaultInit+0xb8>)
 80028e4:	4613      	mov	r3, r2
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	4413      	add	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	3308      	adds	r3, #8
 80028f0:	4a09      	ldr	r2, [pc, #36]	; (8002918 <BSP_LCD_LayerDefaultInit+0xbc>)
 80028f2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80028f4:	88fa      	ldrh	r2, [r7, #6]
 80028f6:	4907      	ldr	r1, [pc, #28]	; (8002914 <BSP_LCD_LayerDefaultInit+0xb8>)
 80028f8:	4613      	mov	r3, r2
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002906:	601a      	str	r2, [r3, #0]
}
 8002908:	bf00      	nop
 800290a:	3740      	adds	r7, #64	; 0x40
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000438 	.word	0x20000438
 8002914:	20000524 	.word	0x20000524
 8002918:	20000028 	.word	0x20000028

0800291c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002924:	4a04      	ldr	r2, [pc, #16]	; (8002938 <BSP_LCD_SelectLayer+0x1c>)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6013      	str	r3, [r2, #0]
} 
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000520 	.word	0x20000520

0800293c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 800293c:	b480      	push	{r7}
 800293e:	b083      	sub	sp, #12
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002944:	4b07      	ldr	r3, [pc, #28]	; (8002964 <BSP_LCD_SetTextColor+0x28>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	4907      	ldr	r1, [pc, #28]	; (8002968 <BSP_LCD_SetTextColor+0x2c>)
 800294a:	4613      	mov	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	601a      	str	r2, [r3, #0]
}
 8002958:	bf00      	nop
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr
 8002964:	20000520 	.word	0x20000520
 8002968:	20000524 	.word	0x20000524

0800296c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002974:	4b08      	ldr	r3, [pc, #32]	; (8002998 <BSP_LCD_SetBackColor+0x2c>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4908      	ldr	r1, [pc, #32]	; (800299c <BSP_LCD_SetBackColor+0x30>)
 800297a:	4613      	mov	r3, r2
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	440b      	add	r3, r1
 8002984:	3304      	adds	r3, #4
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	601a      	str	r2, [r3, #0]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000520 	.word	0x20000520
 800299c:	20000524 	.word	0x20000524

080029a0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <BSP_LCD_SetFont+0x2c>)
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	4908      	ldr	r1, [pc, #32]	; (80029d0 <BSP_LCD_SetFont+0x30>)
 80029ae:	4613      	mov	r3, r2
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	4413      	add	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	3308      	adds	r3, #8
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	601a      	str	r2, [r3, #0]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	20000520 	.word	0x20000520
 80029d0:	20000524 	.word	0x20000524

080029d4 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80029d8:	4b07      	ldr	r3, [pc, #28]	; (80029f8 <BSP_LCD_GetFont+0x24>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4907      	ldr	r1, [pc, #28]	; (80029fc <BSP_LCD_GetFont+0x28>)
 80029de:	4613      	mov	r3, r2
 80029e0:	005b      	lsls	r3, r3, #1
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	3308      	adds	r3, #8
 80029ea:	681b      	ldr	r3, [r3, #0]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	20000520 	.word	0x20000520
 80029fc:	20000524 	.word	0x20000524

08002a00 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af02      	add	r7, sp, #8
 8002a06:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <BSP_LCD_Clear+0x48>)
 8002a0a:	681c      	ldr	r4, [r3, #0]
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <BSP_LCD_Clear+0x48>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0e      	ldr	r2, [pc, #56]	; (8002a4c <BSP_LCD_Clear+0x4c>)
 8002a12:	2134      	movs	r1, #52	; 0x34
 8002a14:	fb01 f303 	mul.w	r3, r1, r3
 8002a18:	4413      	add	r3, r2
 8002a1a:	335c      	adds	r3, #92	; 0x5c
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	461e      	mov	r6, r3
 8002a20:	f7ff fef4 	bl	800280c <BSP_LCD_GetXSize>
 8002a24:	4605      	mov	r5, r0
 8002a26:	f7ff ff05 	bl	8002834 <BSP_LCD_GetYSize>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	9301      	str	r3, [sp, #4]
 8002a30:	2300      	movs	r3, #0
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	4613      	mov	r3, r2
 8002a36:	462a      	mov	r2, r5
 8002a38:	4631      	mov	r1, r6
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f000 fdda 	bl	80035f4 <LL_FillBuffer>
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a48:	20000520 	.word	0x20000520
 8002a4c:	20000438 	.word	0x20000438

08002a50 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002a50:	b590      	push	{r4, r7, lr}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	80fb      	strh	r3, [r7, #6]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	80bb      	strh	r3, [r7, #4]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a62:	4b1b      	ldr	r3, [pc, #108]	; (8002ad0 <BSP_LCD_DisplayChar+0x80>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	491b      	ldr	r1, [pc, #108]	; (8002ad4 <BSP_LCD_DisplayChar+0x84>)
 8002a68:	4613      	mov	r3, r2
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4413      	add	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	3308      	adds	r3, #8
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	6819      	ldr	r1, [r3, #0]
 8002a78:	78fb      	ldrb	r3, [r7, #3]
 8002a7a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <BSP_LCD_DisplayChar+0x80>)
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	4c14      	ldr	r4, [pc, #80]	; (8002ad4 <BSP_LCD_DisplayChar+0x84>)
 8002a84:	4613      	mov	r3, r2
 8002a86:	005b      	lsls	r3, r3, #1
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4423      	add	r3, r4
 8002a8e:	3308      	adds	r3, #8
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a94:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <BSP_LCD_DisplayChar+0x80>)
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	4c0d      	ldr	r4, [pc, #52]	; (8002ad4 <BSP_LCD_DisplayChar+0x84>)
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	4413      	add	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4423      	add	r3, r4
 8002aa8:	3308      	adds	r3, #8
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	889b      	ldrh	r3, [r3, #4]
 8002aae:	3307      	adds	r3, #7
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	da00      	bge.n	8002ab6 <BSP_LCD_DisplayChar+0x66>
 8002ab4:	3307      	adds	r3, #7
 8002ab6:	10db      	asrs	r3, r3, #3
 8002ab8:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002abc:	18ca      	adds	r2, r1, r3
 8002abe:	88b9      	ldrh	r1, [r7, #4]
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fcde 	bl	8003484 <DrawChar>
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd90      	pop	{r4, r7, pc}
 8002ad0:	20000520 	.word	0x20000520
 8002ad4:	20000524 	.word	0x20000524

08002ad8 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002ad8:	b5b0      	push	{r4, r5, r7, lr}
 8002ada:	b088      	sub	sp, #32
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60ba      	str	r2, [r7, #8]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	81fb      	strh	r3, [r7, #14]
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	81bb      	strh	r3, [r7, #12]
 8002aea:	4613      	mov	r3, r2
 8002aec:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002aee:	2301      	movs	r3, #1
 8002af0:	83fb      	strh	r3, [r7, #30]
 8002af2:	2300      	movs	r3, #0
 8002af4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002af6:	2300      	movs	r3, #0
 8002af8:	61bb      	str	r3, [r7, #24]
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002b02:	e002      	b.n	8002b0a <BSP_LCD_DisplayStringAt+0x32>
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	3301      	adds	r3, #1
 8002b08:	61bb      	str	r3, [r7, #24]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	617a      	str	r2, [r7, #20]
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f6      	bne.n	8002b04 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002b16:	f7ff fe79 	bl	800280c <BSP_LCD_GetXSize>
 8002b1a:	4601      	mov	r1, r0
 8002b1c:	4b50      	ldr	r3, [pc, #320]	; (8002c60 <BSP_LCD_DisplayStringAt+0x188>)
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4850      	ldr	r0, [pc, #320]	; (8002c64 <BSP_LCD_DisplayStringAt+0x18c>)
 8002b22:	4613      	mov	r3, r2
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4403      	add	r3, r0
 8002b2c:	3308      	adds	r3, #8
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	889b      	ldrh	r3, [r3, #4]
 8002b32:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b36:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002b38:	79fb      	ldrb	r3, [r7, #7]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d01c      	beq.n	8002b78 <BSP_LCD_DisplayStringAt+0xa0>
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	dc33      	bgt.n	8002baa <BSP_LCD_DisplayStringAt+0xd2>
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d002      	beq.n	8002b4c <BSP_LCD_DisplayStringAt+0x74>
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d019      	beq.n	8002b7e <BSP_LCD_DisplayStringAt+0xa6>
 8002b4a:	e02e      	b.n	8002baa <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002b4c:	693a      	ldr	r2, [r7, #16]
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	1ad1      	subs	r1, r2, r3
 8002b52:	4b43      	ldr	r3, [pc, #268]	; (8002c60 <BSP_LCD_DisplayStringAt+0x188>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4843      	ldr	r0, [pc, #268]	; (8002c64 <BSP_LCD_DisplayStringAt+0x18c>)
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4403      	add	r3, r0
 8002b62:	3308      	adds	r3, #8
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	889b      	ldrh	r3, [r3, #4]
 8002b68:	fb01 f303 	mul.w	r3, r1, r3
 8002b6c:	085b      	lsrs	r3, r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	89fb      	ldrh	r3, [r7, #14]
 8002b72:	4413      	add	r3, r2
 8002b74:	83fb      	strh	r3, [r7, #30]
      break;
 8002b76:	e01b      	b.n	8002bb0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002b78:	89fb      	ldrh	r3, [r7, #14]
 8002b7a:	83fb      	strh	r3, [r7, #30]
      break;
 8002b7c:	e018      	b.n	8002bb0 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	b299      	uxth	r1, r3
 8002b86:	4b36      	ldr	r3, [pc, #216]	; (8002c60 <BSP_LCD_DisplayStringAt+0x188>)
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	4836      	ldr	r0, [pc, #216]	; (8002c64 <BSP_LCD_DisplayStringAt+0x18c>)
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4403      	add	r3, r0
 8002b96:	3308      	adds	r3, #8
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	889b      	ldrh	r3, [r3, #4]
 8002b9c:	fb11 f303 	smulbb	r3, r1, r3
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	89fb      	ldrh	r3, [r7, #14]
 8002ba4:	1ad3      	subs	r3, r2, r3
 8002ba6:	83fb      	strh	r3, [r7, #30]
      break;
 8002ba8:	e002      	b.n	8002bb0 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8002baa:	89fb      	ldrh	r3, [r7, #14]
 8002bac:	83fb      	strh	r3, [r7, #30]
      break;
 8002bae:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002bb0:	8bfb      	ldrh	r3, [r7, #30]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <BSP_LCD_DisplayStringAt+0xe6>
 8002bb6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	da1d      	bge.n	8002bfa <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002bc2:	e01a      	b.n	8002bfa <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	781a      	ldrb	r2, [r3, #0]
 8002bc8:	89b9      	ldrh	r1, [r7, #12]
 8002bca:	8bfb      	ldrh	r3, [r7, #30]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff3f 	bl	8002a50 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <BSP_LCD_DisplayStringAt+0x188>)
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	4923      	ldr	r1, [pc, #140]	; (8002c64 <BSP_LCD_DisplayStringAt+0x18c>)
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	3308      	adds	r3, #8
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	889a      	ldrh	r2, [r3, #4]
 8002be8:	8bfb      	ldrh	r3, [r7, #30]
 8002bea:	4413      	add	r3, r2
 8002bec:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
    i++;
 8002bf4:	8bbb      	ldrh	r3, [r7, #28]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	bf14      	ite	ne
 8002c02:	2301      	movne	r3, #1
 8002c04:	2300      	moveq	r3, #0
 8002c06:	b2dc      	uxtb	r4, r3
 8002c08:	f7ff fe00 	bl	800280c <BSP_LCD_GetXSize>
 8002c0c:	8bb9      	ldrh	r1, [r7, #28]
 8002c0e:	4b14      	ldr	r3, [pc, #80]	; (8002c60 <BSP_LCD_DisplayStringAt+0x188>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	4d14      	ldr	r5, [pc, #80]	; (8002c64 <BSP_LCD_DisplayStringAt+0x18c>)
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	442b      	add	r3, r5
 8002c1e:	3308      	adds	r3, #8
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	889b      	ldrh	r3, [r3, #4]
 8002c24:	fb01 f303 	mul.w	r3, r1, r3
 8002c28:	1ac3      	subs	r3, r0, r3
 8002c2a:	b299      	uxth	r1, r3
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <BSP_LCD_DisplayStringAt+0x188>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	480c      	ldr	r0, [pc, #48]	; (8002c64 <BSP_LCD_DisplayStringAt+0x18c>)
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4403      	add	r3, r0
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	889b      	ldrh	r3, [r3, #4]
 8002c42:	4299      	cmp	r1, r3
 8002c44:	bf2c      	ite	cs
 8002c46:	2301      	movcs	r3, #1
 8002c48:	2300      	movcc	r3, #0
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	4023      	ands	r3, r4
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1b7      	bne.n	8002bc4 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000520 	.word	0x20000520
 8002c64:	20000524 	.word	0x20000524

08002c68 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002c74:	f7ff feae 	bl	80029d4 <BSP_LCD_GetFont>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	88db      	ldrh	r3, [r3, #6]
 8002c7c:	88fa      	ldrh	r2, [r7, #6]
 8002c7e:	fb12 f303 	smulbb	r3, r2, r3
 8002c82:	b299      	uxth	r1, r3
 8002c84:	2303      	movs	r3, #3
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	2000      	movs	r0, #0
 8002c8a:	f7ff ff25 	bl	8002ad8 <BSP_LCD_DisplayStringAt>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002c98:	b5b0      	push	{r4, r5, r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af02      	add	r7, sp, #8
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	80fb      	strh	r3, [r7, #6]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	80bb      	strh	r3, [r7, #4]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002cae:	4b26      	ldr	r3, [pc, #152]	; (8002d48 <BSP_LCD_DrawHLine+0xb0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a26      	ldr	r2, [pc, #152]	; (8002d4c <BSP_LCD_DrawHLine+0xb4>)
 8002cb4:	2134      	movs	r1, #52	; 0x34
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3348      	adds	r3, #72	; 0x48
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b02      	cmp	r3, #2
 8002cc2:	d114      	bne.n	8002cee <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002cc4:	4b20      	ldr	r3, [pc, #128]	; (8002d48 <BSP_LCD_DrawHLine+0xb0>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a20      	ldr	r2, [pc, #128]	; (8002d4c <BSP_LCD_DrawHLine+0xb4>)
 8002cca:	2134      	movs	r1, #52	; 0x34
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	335c      	adds	r3, #92	; 0x5c
 8002cd4:	681c      	ldr	r4, [r3, #0]
 8002cd6:	f7ff fd99 	bl	800280c <BSP_LCD_GetXSize>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	88bb      	ldrh	r3, [r7, #4]
 8002cde:	fb03 f202 	mul.w	r2, r3, r2
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4423      	add	r3, r4
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	e013      	b.n	8002d16 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002cee:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <BSP_LCD_DrawHLine+0xb0>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a16      	ldr	r2, [pc, #88]	; (8002d4c <BSP_LCD_DrawHLine+0xb4>)
 8002cf4:	2134      	movs	r1, #52	; 0x34
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	335c      	adds	r3, #92	; 0x5c
 8002cfe:	681c      	ldr	r4, [r3, #0]
 8002d00:	f7ff fd84 	bl	800280c <BSP_LCD_GetXSize>
 8002d04:	4602      	mov	r2, r0
 8002d06:	88bb      	ldrh	r3, [r7, #4]
 8002d08:	fb03 f202 	mul.w	r2, r3, r2
 8002d0c:	88fb      	ldrh	r3, [r7, #6]
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4423      	add	r3, r4
 8002d14:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002d16:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <BSP_LCD_DrawHLine+0xb0>)
 8002d18:	6818      	ldr	r0, [r3, #0]
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	887c      	ldrh	r4, [r7, #2]
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <BSP_LCD_DrawHLine+0xb0>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	4d0b      	ldr	r5, [pc, #44]	; (8002d50 <BSP_LCD_DrawHLine+0xb8>)
 8002d24:	4613      	mov	r3, r2
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	442b      	add	r3, r5
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	2300      	movs	r3, #0
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	2301      	movs	r3, #1
 8002d38:	4622      	mov	r2, r4
 8002d3a:	f000 fc5b 	bl	80035f4 <LL_FillBuffer>
}
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bdb0      	pop	{r4, r5, r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000520 	.word	0x20000520
 8002d4c:	20000438 	.word	0x20000438
 8002d50:	20000524 	.word	0x20000524

08002d54 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	80fb      	strh	r3, [r7, #6]
 8002d5e:	460b      	mov	r3, r1
 8002d60:	80bb      	strh	r3, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002d66:	887b      	ldrh	r3, [r7, #2]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	f1c3 0303 	rsb	r3, r3, #3
 8002d6e:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002d74:	887b      	ldrh	r3, [r7, #2]
 8002d76:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002d78:	e0c7      	b.n	8002f0a <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	88fb      	ldrh	r3, [r7, #6]
 8002d80:	4413      	add	r3, r2
 8002d82:	b298      	uxth	r0, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	88ba      	ldrh	r2, [r7, #4]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	b299      	uxth	r1, r3
 8002d8e:	4b64      	ldr	r3, [pc, #400]	; (8002f20 <BSP_LCD_DrawCircle+0x1cc>)
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	4c64      	ldr	r4, [pc, #400]	; (8002f24 <BSP_LCD_DrawCircle+0x1d0>)
 8002d94:	4613      	mov	r3, r2
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4423      	add	r3, r4
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	f000 f8c1 	bl	8002f28 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	88fa      	ldrh	r2, [r7, #6]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	b298      	uxth	r0, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	88ba      	ldrh	r2, [r7, #4]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	b299      	uxth	r1, r3
 8002dba:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <BSP_LCD_DrawCircle+0x1cc>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	4c59      	ldr	r4, [pc, #356]	; (8002f24 <BSP_LCD_DrawCircle+0x1d0>)
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	4413      	add	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4423      	add	r3, r4
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	461a      	mov	r2, r3
 8002dce:	f000 f8ab 	bl	8002f28 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	b29a      	uxth	r2, r3
 8002dd6:	88fb      	ldrh	r3, [r7, #6]
 8002dd8:	4413      	add	r3, r2
 8002dda:	b298      	uxth	r0, r3
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	88ba      	ldrh	r2, [r7, #4]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	b299      	uxth	r1, r3
 8002de6:	4b4e      	ldr	r3, [pc, #312]	; (8002f20 <BSP_LCD_DrawCircle+0x1cc>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	4c4e      	ldr	r4, [pc, #312]	; (8002f24 <BSP_LCD_DrawCircle+0x1d0>)
 8002dec:	4613      	mov	r3, r2
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	4413      	add	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4423      	add	r3, r4
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f000 f895 	bl	8002f28 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	88fa      	ldrh	r2, [r7, #6]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	b298      	uxth	r0, r3
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	88ba      	ldrh	r2, [r7, #4]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	b299      	uxth	r1, r3
 8002e12:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <BSP_LCD_DrawCircle+0x1cc>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4c43      	ldr	r4, [pc, #268]	; (8002f24 <BSP_LCD_DrawCircle+0x1d0>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4423      	add	r3, r4
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	f000 f87f 	bl	8002f28 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	88fb      	ldrh	r3, [r7, #6]
 8002e30:	4413      	add	r3, r2
 8002e32:	b298      	uxth	r0, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	88bb      	ldrh	r3, [r7, #4]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	b299      	uxth	r1, r3
 8002e3e:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <BSP_LCD_DrawCircle+0x1cc>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4c38      	ldr	r4, [pc, #224]	; (8002f24 <BSP_LCD_DrawCircle+0x1d0>)
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4423      	add	r3, r4
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	461a      	mov	r2, r3
 8002e52:	f000 f869 	bl	8002f28 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	88fa      	ldrh	r2, [r7, #6]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	b298      	uxth	r0, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	b29a      	uxth	r2, r3
 8002e64:	88bb      	ldrh	r3, [r7, #4]
 8002e66:	4413      	add	r3, r2
 8002e68:	b299      	uxth	r1, r3
 8002e6a:	4b2d      	ldr	r3, [pc, #180]	; (8002f20 <BSP_LCD_DrawCircle+0x1cc>)
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	4c2d      	ldr	r4, [pc, #180]	; (8002f24 <BSP_LCD_DrawCircle+0x1d0>)
 8002e70:	4613      	mov	r3, r2
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	4413      	add	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4423      	add	r3, r4
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	f000 f853 	bl	8002f28 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	4413      	add	r3, r2
 8002e8a:	b298      	uxth	r0, r3
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	b29a      	uxth	r2, r3
 8002e90:	88bb      	ldrh	r3, [r7, #4]
 8002e92:	4413      	add	r3, r2
 8002e94:	b299      	uxth	r1, r3
 8002e96:	4b22      	ldr	r3, [pc, #136]	; (8002f20 <BSP_LCD_DrawCircle+0x1cc>)
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	4c22      	ldr	r4, [pc, #136]	; (8002f24 <BSP_LCD_DrawCircle+0x1d0>)
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4423      	add	r3, r4
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f000 f83d 	bl	8002f28 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	b298      	uxth	r0, r3
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	b29a      	uxth	r2, r3
 8002ebc:	88bb      	ldrh	r3, [r7, #4]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	b299      	uxth	r1, r3
 8002ec2:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <BSP_LCD_DrawCircle+0x1cc>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4c17      	ldr	r4, [pc, #92]	; (8002f24 <BSP_LCD_DrawCircle+0x1d0>)
 8002ec8:	4613      	mov	r3, r2
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4423      	add	r3, r4
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	f000 f827 	bl	8002f28 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	da06      	bge.n	8002eee <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	009a      	lsls	r2, r3, #2
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3306      	adds	r3, #6
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e00a      	b.n	8002f04 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	009a      	lsls	r2, r3, #2
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	4413      	add	r3, r2
 8002efa:	330a      	adds	r3, #10
 8002efc:	617b      	str	r3, [r7, #20]
      current_y--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	3b01      	subs	r3, #1
 8002f02:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	3301      	adds	r3, #1
 8002f08:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	f67f af33 	bls.w	8002d7a <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	371c      	adds	r7, #28
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd90      	pop	{r4, r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	20000520 	.word	0x20000520
 8002f24:	20000524 	.word	0x20000524

08002f28 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002f28:	b5b0      	push	{r4, r5, r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	603a      	str	r2, [r7, #0]
 8002f32:	80fb      	strh	r3, [r7, #6]
 8002f34:	460b      	mov	r3, r1
 8002f36:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002f38:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <BSP_LCD_DrawPixel+0x88>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <BSP_LCD_DrawPixel+0x8c>)
 8002f3e:	2134      	movs	r1, #52	; 0x34
 8002f40:	fb01 f303 	mul.w	r3, r1, r3
 8002f44:	4413      	add	r3, r2
 8002f46:	3348      	adds	r3, #72	; 0x48
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d116      	bne.n	8002f7c <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002f4e:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <BSP_LCD_DrawPixel+0x88>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a18      	ldr	r2, [pc, #96]	; (8002fb4 <BSP_LCD_DrawPixel+0x8c>)
 8002f54:	2134      	movs	r1, #52	; 0x34
 8002f56:	fb01 f303 	mul.w	r3, r1, r3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	335c      	adds	r3, #92	; 0x5c
 8002f5e:	681c      	ldr	r4, [r3, #0]
 8002f60:	88bd      	ldrh	r5, [r7, #4]
 8002f62:	f7ff fc53 	bl	800280c <BSP_LCD_GetXSize>
 8002f66:	4603      	mov	r3, r0
 8002f68:	fb03 f205 	mul.w	r2, r3, r5
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	4413      	add	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4423      	add	r3, r4
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	b292      	uxth	r2, r2
 8002f78:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002f7a:	e015      	b.n	8002fa8 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <BSP_LCD_DrawPixel+0x88>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <BSP_LCD_DrawPixel+0x8c>)
 8002f82:	2134      	movs	r1, #52	; 0x34
 8002f84:	fb01 f303 	mul.w	r3, r1, r3
 8002f88:	4413      	add	r3, r2
 8002f8a:	335c      	adds	r3, #92	; 0x5c
 8002f8c:	681c      	ldr	r4, [r3, #0]
 8002f8e:	88bd      	ldrh	r5, [r7, #4]
 8002f90:	f7ff fc3c 	bl	800280c <BSP_LCD_GetXSize>
 8002f94:	4603      	mov	r3, r0
 8002f96:	fb03 f205 	mul.w	r2, r3, r5
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4423      	add	r3, r4
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	6013      	str	r3, [r2, #0]
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb0:	20000520 	.word	0x20000520
 8002fb4:	20000438 	.word	0x20000438

08002fb8 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pbmp: Pointer to Bmp picture address in the internal Flash
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pbmp)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b08b      	sub	sp, #44	; 0x2c
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  uint32_t index = 0, width = 0, height = 0, bit_pixel = 0;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc8:	2300      	movs	r3, #0
 8002fca:	61bb      	str	r3, [r7, #24]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	613b      	str	r3, [r7, #16]
  uint32_t address;
  uint32_t input_color_mode = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61fb      	str	r3, [r7, #28]
  
  /* Get bitmap data address offset */
  index = pbmp[10] + (pbmp[11] << 8) + (pbmp[12] << 16)  + (pbmp[13] << 24);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	330a      	adds	r3, #10
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	330b      	adds	r3, #11
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	021b      	lsls	r3, r3, #8
 8002fe8:	441a      	add	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	330c      	adds	r3, #12
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	041b      	lsls	r3, r3, #16
 8002ff2:	441a      	add	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	330d      	adds	r3, #13
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	061b      	lsls	r3, r3, #24
 8002ffc:	4413      	add	r3, r2
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read bitmap width */
  width = pbmp[18] + (pbmp[19] << 8) + (pbmp[20] << 16)  + (pbmp[21] << 24);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3312      	adds	r3, #18
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	3313      	adds	r3, #19
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	441a      	add	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3314      	adds	r3, #20
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	041b      	lsls	r3, r3, #16
 800301a:	441a      	add	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3315      	adds	r3, #21
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	061b      	lsls	r3, r3, #24
 8003024:	4413      	add	r3, r2
 8003026:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = pbmp[22] + (pbmp[23] << 8) + (pbmp[24] << 16)  + (pbmp[25] << 24);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3316      	adds	r3, #22
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3317      	adds	r3, #23
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	021b      	lsls	r3, r3, #8
 8003038:	441a      	add	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3318      	adds	r3, #24
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	441a      	add	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3319      	adds	r3, #25
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	061b      	lsls	r3, r3, #24
 800304c:	4413      	add	r3, r2
 800304e:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = pbmp[28] + (pbmp[29] << 8);  
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	331c      	adds	r3, #28
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	331d      	adds	r3, #29
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	021b      	lsls	r3, r3, #8
 8003060:	4413      	add	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
  
  /* Set the address */
  address = hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Ypos) + Xpos)*(4));
 8003064:	4b2b      	ldr	r3, [pc, #172]	; (8003114 <BSP_LCD_DrawBitmap+0x15c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a2b      	ldr	r2, [pc, #172]	; (8003118 <BSP_LCD_DrawBitmap+0x160>)
 800306a:	2134      	movs	r1, #52	; 0x34
 800306c:	fb01 f303 	mul.w	r3, r1, r3
 8003070:	4413      	add	r3, r2
 8003072:	335c      	adds	r3, #92	; 0x5c
 8003074:	681c      	ldr	r4, [r3, #0]
 8003076:	f7ff fbc9 	bl	800280c <BSP_LCD_GetXSize>
 800307a:	4602      	mov	r2, r0
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	fb03 f202 	mul.w	r2, r3, r2
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4423      	add	r3, r4
 800308a:	623b      	str	r3, [r7, #32]
  
  /* Get the layer pixel format */    
  if ((bit_pixel/8) == 4)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	3b20      	subs	r3, #32
 8003090:	2b07      	cmp	r3, #7
 8003092:	d802      	bhi.n	800309a <BSP_LCD_DrawBitmap+0xe2>
  {
    input_color_mode = CM_ARGB8888;
 8003094:	2300      	movs	r3, #0
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	e008      	b.n	80030ac <BSP_LCD_DrawBitmap+0xf4>
  }
  else if ((bit_pixel/8) == 2)
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	3b10      	subs	r3, #16
 800309e:	2b07      	cmp	r3, #7
 80030a0:	d802      	bhi.n	80030a8 <BSP_LCD_DrawBitmap+0xf0>
  {
    input_color_mode = CM_RGB565;   
 80030a2:	2302      	movs	r3, #2
 80030a4:	61fb      	str	r3, [r7, #28]
 80030a6:	e001      	b.n	80030ac <BSP_LCD_DrawBitmap+0xf4>
  }
  else 
  {
    input_color_mode = CM_RGB888;
 80030a8:	2301      	movs	r3, #1
 80030aa:	61fb      	str	r3, [r7, #28]
  }
  
  /* Bypass the bitmap header */
  pbmp += (index + (width * (height - 1) * (bit_pixel/8)));  
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	fb02 f303 	mul.w	r3, r2, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	08d2      	lsrs	r2, r2, #3
 80030ba:	fb03 f202 	mul.w	r2, r3, r2
 80030be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c0:	4413      	add	r3, r2
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	4413      	add	r3, r2
 80030c6:	607b      	str	r3, [r7, #4]
  
  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 80030c8:	2300      	movs	r3, #0
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
 80030cc:	e018      	b.n	8003100 <BSP_LCD_DrawBitmap+0x148>
  {
    /* Pixel format conversion */
    LL_ConvertLineToARGB8888((uint32_t *)pbmp, (uint32_t *)address, width, input_color_mode);
 80030ce:	6a39      	ldr	r1, [r7, #32]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	6878      	ldr	r0, [r7, #4]
 80030d6:	f000 fad9 	bl	800368c <LL_ConvertLineToARGB8888>
    
    /* Increment the source and destination buffers */
    address+=  (BSP_LCD_GetXSize()*4);
 80030da:	f7ff fb97 	bl	800280c <BSP_LCD_GetXSize>
 80030de:	4603      	mov	r3, r0
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	6a3a      	ldr	r2, [r7, #32]
 80030e4:	4413      	add	r3, r2
 80030e6:	623b      	str	r3, [r7, #32]
    pbmp -= width*(bit_pixel/8);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	08db      	lsrs	r3, r3, #3
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	fb02 f303 	mul.w	r3, r2, r3
 80030f2:	425b      	negs	r3, r3
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	4413      	add	r3, r2
 80030f8:	607b      	str	r3, [r7, #4]
  for(index=0; index < height; index++)
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	3301      	adds	r3, #1
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	429a      	cmp	r2, r3
 8003106:	d3e2      	bcc.n	80030ce <BSP_LCD_DrawBitmap+0x116>
  } 
}
 8003108:	bf00      	nop
 800310a:	bf00      	nop
 800310c:	372c      	adds	r7, #44	; 0x2c
 800310e:	46bd      	mov	sp, r7
 8003110:	bd90      	pop	{r4, r7, pc}
 8003112:	bf00      	nop
 8003114:	20000520 	.word	0x20000520
 8003118:	20000438 	.word	0x20000438

0800311c <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	80fb      	strh	r3, [r7, #6]
 8003126:	460b      	mov	r3, r1
 8003128:	80bb      	strh	r3, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800312e:	887b      	ldrh	r3, [r7, #2]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	f1c3 0303 	rsb	r3, r3, #3
 8003136:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 800313c:	887b      	ldrh	r3, [r7, #2]
 800313e:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003140:	4b44      	ldr	r3, [pc, #272]	; (8003254 <BSP_LCD_FillCircle+0x138>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4944      	ldr	r1, [pc, #272]	; (8003258 <BSP_LCD_FillCircle+0x13c>)
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff fbf2 	bl	800293c <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003158:	e061      	b.n	800321e <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d021      	beq.n	80031a4 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	b29b      	uxth	r3, r3
 8003164:	88fa      	ldrh	r2, [r7, #6]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	b298      	uxth	r0, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	b29a      	uxth	r2, r3
 800316e:	88bb      	ldrh	r3, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	b299      	uxth	r1, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	b29b      	uxth	r3, r3
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	b29b      	uxth	r3, r3
 800317c:	461a      	mov	r2, r3
 800317e:	f7ff fd8b 	bl	8002c98 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	b29b      	uxth	r3, r3
 8003186:	88fa      	ldrh	r2, [r7, #6]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	b298      	uxth	r0, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	b29b      	uxth	r3, r3
 8003190:	88ba      	ldrh	r2, [r7, #4]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	b299      	uxth	r1, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	b29b      	uxth	r3, r3
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	b29b      	uxth	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	f7ff fd7a 	bl	8002c98 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d021      	beq.n	80031ee <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	88fa      	ldrh	r2, [r7, #6]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	b298      	uxth	r0, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	88ba      	ldrh	r2, [r7, #4]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	b299      	uxth	r1, r3
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	461a      	mov	r2, r3
 80031c8:	f7ff fd66 	bl	8002c98 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	88fa      	ldrh	r2, [r7, #6]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	b298      	uxth	r0, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	88bb      	ldrh	r3, [r7, #4]
 80031dc:	4413      	add	r3, r2
 80031de:	b299      	uxth	r1, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	461a      	mov	r2, r3
 80031ea:	f7ff fd55 	bl	8002c98 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da06      	bge.n	8003202 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	009a      	lsls	r2, r3, #2
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	4413      	add	r3, r2
 80031fc:	3306      	adds	r3, #6
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	e00a      	b.n	8003218 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003202:	693a      	ldr	r2, [r7, #16]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	009a      	lsls	r2, r3, #2
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	4413      	add	r3, r2
 800320e:	330a      	adds	r3, #10
 8003210:	617b      	str	r3, [r7, #20]
      current_y--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	3b01      	subs	r3, #1
 8003216:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	3301      	adds	r3, #1
 800321c:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	429a      	cmp	r2, r3
 8003224:	d999      	bls.n	800315a <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003226:	4b0b      	ldr	r3, [pc, #44]	; (8003254 <BSP_LCD_FillCircle+0x138>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	490b      	ldr	r1, [pc, #44]	; (8003258 <BSP_LCD_FillCircle+0x13c>)
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fb7f 	bl	800293c <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	88b9      	ldrh	r1, [r7, #4]
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fd85 	bl	8002d54 <BSP_LCD_DrawCircle>
}
 800324a:	bf00      	nop
 800324c:	3718      	adds	r7, #24
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000520 	.word	0x20000520
 8003258:	20000524 	.word	0x20000524

0800325c <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003260:	4b0a      	ldr	r3, [pc, #40]	; (800328c <BSP_LCD_DisplayOn+0x30>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <BSP_LCD_DisplayOn+0x30>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003270:	2201      	movs	r2, #1
 8003272:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003276:	4806      	ldr	r0, [pc, #24]	; (8003290 <BSP_LCD_DisplayOn+0x34>)
 8003278:	f003 f9dc 	bl	8006634 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 800327c:	2201      	movs	r2, #1
 800327e:	2108      	movs	r1, #8
 8003280:	4804      	ldr	r0, [pc, #16]	; (8003294 <BSP_LCD_DisplayOn+0x38>)
 8003282:	f003 f9d7 	bl	8006634 <HAL_GPIO_WritePin>
}
 8003286:	bf00      	nop
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	20000438 	.word	0x20000438
 8003290:	40022000 	.word	0x40022000
 8003294:	40022800 	.word	0x40022800

08003298 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b090      	sub	sp, #64	; 0x40
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80032a2:	4b64      	ldr	r3, [pc, #400]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	4a63      	ldr	r2, [pc, #396]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 80032a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032ac:	6453      	str	r3, [r2, #68]	; 0x44
 80032ae:	4b61      	ldr	r3, [pc, #388]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80032b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80032ba:	4b5e      	ldr	r3, [pc, #376]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032be:	4a5d      	ldr	r2, [pc, #372]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 80032c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032c4:	6313      	str	r3, [r2, #48]	; 0x30
 80032c6:	4b5b      	ldr	r3, [pc, #364]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
 80032d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032d2:	4b58      	ldr	r3, [pc, #352]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 80032d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d6:	4a57      	ldr	r2, [pc, #348]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 80032d8:	f043 0310 	orr.w	r3, r3, #16
 80032dc:	6313      	str	r3, [r2, #48]	; 0x30
 80032de:	4b55      	ldr	r3, [pc, #340]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e2:	f003 0310 	and.w	r3, r3, #16
 80032e6:	623b      	str	r3, [r7, #32]
 80032e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032ea:	4b52      	ldr	r3, [pc, #328]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a51      	ldr	r2, [pc, #324]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 80032f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b4f      	ldr	r3, [pc, #316]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003302:	4b4c      	ldr	r3, [pc, #304]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	4a4b      	ldr	r2, [pc, #300]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003308:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800330c:	6313      	str	r3, [r2, #48]	; 0x30
 800330e:	4b49      	ldr	r3, [pc, #292]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003316:	61bb      	str	r3, [r7, #24]
 8003318:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800331a:	4b46      	ldr	r3, [pc, #280]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	4a45      	ldr	r2, [pc, #276]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003320:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003324:	6313      	str	r3, [r2, #48]	; 0x30
 8003326:	4b43      	ldr	r3, [pc, #268]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003332:	4b40      	ldr	r3, [pc, #256]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a3f      	ldr	r2, [pc, #252]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b3d      	ldr	r3, [pc, #244]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003346:	613b      	str	r3, [r7, #16]
 8003348:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800334a:	4b3a      	ldr	r3, [pc, #232]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	4a39      	ldr	r2, [pc, #228]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003354:	6313      	str	r3, [r2, #48]	; 0x30
 8003356:	4b37      	ldr	r3, [pc, #220]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003362:	4b34      	ldr	r3, [pc, #208]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a33      	ldr	r2, [pc, #204]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003368:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <BSP_LCD_MspInit+0x19c>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003376:	60bb      	str	r3, [r7, #8]
 8003378:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800337a:	2310      	movs	r3, #16
 800337c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800337e:	2302      	movs	r3, #2
 8003380:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003382:	2300      	movs	r3, #0
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003386:	2302      	movs	r3, #2
 8003388:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800338a:	230e      	movs	r3, #14
 800338c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800338e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003392:	4619      	mov	r1, r3
 8003394:	4828      	ldr	r0, [pc, #160]	; (8003438 <BSP_LCD_MspInit+0x1a0>)
 8003396:	f002 fe7d 	bl	8006094 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800339a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800339e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80033a4:	2309      	movs	r3, #9
 80033a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80033a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ac:	4619      	mov	r1, r3
 80033ae:	4823      	ldr	r0, [pc, #140]	; (800343c <BSP_LCD_MspInit+0x1a4>)
 80033b0:	f002 fe70 	bl	8006094 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80033b4:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80033b8:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033be:	230e      	movs	r3, #14
 80033c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80033c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033c6:	4619      	mov	r1, r3
 80033c8:	481d      	ldr	r0, [pc, #116]	; (8003440 <BSP_LCD_MspInit+0x1a8>)
 80033ca:	f002 fe63 	bl	8006094 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80033ce:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80033d2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033d4:	2302      	movs	r3, #2
 80033d6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033d8:	230e      	movs	r3, #14
 80033da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80033dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033e0:	4619      	mov	r1, r3
 80033e2:	4818      	ldr	r0, [pc, #96]	; (8003444 <BSP_LCD_MspInit+0x1ac>)
 80033e4:	f002 fe56 	bl	8006094 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80033e8:	23f7      	movs	r3, #247	; 0xf7
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
 80033ee:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033f0:	230e      	movs	r3, #14
 80033f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80033f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033f8:	4619      	mov	r1, r3
 80033fa:	4813      	ldr	r0, [pc, #76]	; (8003448 <BSP_LCD_MspInit+0x1b0>)
 80033fc:	f002 fe4a 	bl	8006094 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003406:	2301      	movs	r3, #1
 8003408:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800340a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800340e:	4619      	mov	r1, r3
 8003410:	480b      	ldr	r0, [pc, #44]	; (8003440 <BSP_LCD_MspInit+0x1a8>)
 8003412:	f002 fe3f 	bl	8006094 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003416:	2308      	movs	r3, #8
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800341a:	2301      	movs	r3, #1
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800341e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003422:	4619      	mov	r1, r3
 8003424:	4808      	ldr	r0, [pc, #32]	; (8003448 <BSP_LCD_MspInit+0x1b0>)
 8003426:	f002 fe35 	bl	8006094 <HAL_GPIO_Init>
}
 800342a:	bf00      	nop
 800342c:	3740      	adds	r7, #64	; 0x40
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800
 8003438:	40021000 	.word	0x40021000
 800343c:	40021800 	.word	0x40021800
 8003440:	40022000 	.word	0x40022000
 8003444:	40022400 	.word	0x40022400
 8003448:	40022800 	.word	0x40022800

0800344c <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <BSP_LCD_ClockConfig+0x34>)
 8003458:	2208      	movs	r2, #8
 800345a:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 800345c:	4b08      	ldr	r3, [pc, #32]	; (8003480 <BSP_LCD_ClockConfig+0x34>)
 800345e:	22c0      	movs	r2, #192	; 0xc0
 8003460:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003462:	4b07      	ldr	r3, [pc, #28]	; (8003480 <BSP_LCD_ClockConfig+0x34>)
 8003464:	2205      	movs	r2, #5
 8003466:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003468:	4b05      	ldr	r3, [pc, #20]	; (8003480 <BSP_LCD_ClockConfig+0x34>)
 800346a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003470:	4803      	ldr	r0, [pc, #12]	; (8003480 <BSP_LCD_ClockConfig+0x34>)
 8003472:	f004 ffbb 	bl	80083ec <HAL_RCCEx_PeriphCLKConfig>
}
 8003476:	bf00      	nop
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	2000053c 	.word	0x2000053c

08003484 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	603a      	str	r2, [r7, #0]
 800348e:	80fb      	strh	r3, [r7, #6]
 8003490:	460b      	mov	r3, r1
 8003492:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	2300      	movs	r3, #0
 800349a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800349c:	4b53      	ldr	r3, [pc, #332]	; (80035ec <DrawChar+0x168>)
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4953      	ldr	r1, [pc, #332]	; (80035f0 <DrawChar+0x16c>)
 80034a2:	4613      	mov	r3, r2
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	4413      	add	r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	3308      	adds	r3, #8
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	88db      	ldrh	r3, [r3, #6]
 80034b2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80034b4:	4b4d      	ldr	r3, [pc, #308]	; (80035ec <DrawChar+0x168>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	494d      	ldr	r1, [pc, #308]	; (80035f0 <DrawChar+0x16c>)
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	3308      	adds	r3, #8
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	889b      	ldrh	r3, [r3, #4]
 80034ca:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80034cc:	8a3b      	ldrh	r3, [r7, #16]
 80034ce:	3307      	adds	r3, #7
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	da00      	bge.n	80034d6 <DrawChar+0x52>
 80034d4:	3307      	adds	r3, #7
 80034d6:	10db      	asrs	r3, r3, #3
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	8a3b      	ldrh	r3, [r7, #16]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e076      	b.n	80035da <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80034ec:	8a3b      	ldrh	r3, [r7, #16]
 80034ee:	3307      	adds	r3, #7
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	da00      	bge.n	80034f6 <DrawChar+0x72>
 80034f4:	3307      	adds	r3, #7
 80034f6:	10db      	asrs	r3, r3, #3
 80034f8:	461a      	mov	r2, r3
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	fb02 f303 	mul.w	r3, r2, r3
 8003500:	683a      	ldr	r2, [r7, #0]
 8003502:	4413      	add	r3, r2
 8003504:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003506:	8a3b      	ldrh	r3, [r7, #16]
 8003508:	3307      	adds	r3, #7
 800350a:	2b00      	cmp	r3, #0
 800350c:	da00      	bge.n	8003510 <DrawChar+0x8c>
 800350e:	3307      	adds	r3, #7
 8003510:	10db      	asrs	r3, r3, #3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d002      	beq.n	800351c <DrawChar+0x98>
 8003516:	2b02      	cmp	r3, #2
 8003518:	d004      	beq.n	8003524 <DrawChar+0xa0>
 800351a:	e00c      	b.n	8003536 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	617b      	str	r3, [r7, #20]
      break;
 8003522:	e016      	b.n	8003552 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	3201      	adds	r2, #1
 800352e:	7812      	ldrb	r2, [r2, #0]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
      break;
 8003534:	e00d      	b.n	8003552 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	041a      	lsls	r2, r3, #16
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	3301      	adds	r3, #1
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	021b      	lsls	r3, r3, #8
 8003544:	4313      	orrs	r3, r2
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	3202      	adds	r2, #2
 800354a:	7812      	ldrb	r2, [r2, #0]
 800354c:	4313      	orrs	r3, r2
 800354e:	617b      	str	r3, [r7, #20]
      break;
 8003550:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003552:	2300      	movs	r3, #0
 8003554:	61bb      	str	r3, [r7, #24]
 8003556:	e036      	b.n	80035c6 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003558:	8a3a      	ldrh	r2, [r7, #16]
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	1ad2      	subs	r2, r2, r3
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	4413      	add	r3, r2
 8003562:	3b01      	subs	r3, #1
 8003564:	2201      	movs	r2, #1
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	461a      	mov	r2, r3
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	4013      	ands	r3, r2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d012      	beq.n	800359a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	b29a      	uxth	r2, r3
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	4413      	add	r3, r2
 800357c:	b298      	uxth	r0, r3
 800357e:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <DrawChar+0x168>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	491b      	ldr	r1, [pc, #108]	; (80035f0 <DrawChar+0x16c>)
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	88bb      	ldrh	r3, [r7, #4]
 8003592:	4619      	mov	r1, r3
 8003594:	f7ff fcc8 	bl	8002f28 <BSP_LCD_DrawPixel>
 8003598:	e012      	b.n	80035c0 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	b29a      	uxth	r2, r3
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	4413      	add	r3, r2
 80035a2:	b298      	uxth	r0, r3
 80035a4:	4b11      	ldr	r3, [pc, #68]	; (80035ec <DrawChar+0x168>)
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4911      	ldr	r1, [pc, #68]	; (80035f0 <DrawChar+0x16c>)
 80035aa:	4613      	mov	r3, r2
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3304      	adds	r3, #4
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	88bb      	ldrh	r3, [r7, #4]
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7ff fcb4 	bl	8002f28 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	3301      	adds	r3, #1
 80035c4:	61bb      	str	r3, [r7, #24]
 80035c6:	8a3b      	ldrh	r3, [r7, #16]
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d3c4      	bcc.n	8003558 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80035ce:	88bb      	ldrh	r3, [r7, #4]
 80035d0:	3301      	adds	r3, #1
 80035d2:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	3301      	adds	r3, #1
 80035d8:	61fb      	str	r3, [r7, #28]
 80035da:	8a7b      	ldrh	r3, [r7, #18]
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d384      	bcc.n	80034ec <DrawChar+0x68>
  }
}
 80035e2:	bf00      	nop
 80035e4:	bf00      	nop
 80035e6:	3720      	adds	r7, #32
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	20000520 	.word	0x20000520
 80035f0:	20000524 	.word	0x20000524

080035f4 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af02      	add	r7, sp, #8
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003602:	4b1e      	ldr	r3, [pc, #120]	; (800367c <LL_FillBuffer+0x88>)
 8003604:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003608:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800360a:	4b1d      	ldr	r3, [pc, #116]	; (8003680 <LL_FillBuffer+0x8c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <LL_FillBuffer+0x90>)
 8003610:	2134      	movs	r1, #52	; 0x34
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	4413      	add	r3, r2
 8003618:	3348      	adds	r3, #72	; 0x48
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2b02      	cmp	r3, #2
 800361e:	d103      	bne.n	8003628 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003620:	4b16      	ldr	r3, [pc, #88]	; (800367c <LL_FillBuffer+0x88>)
 8003622:	2202      	movs	r2, #2
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	e002      	b.n	800362e <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003628:	4b14      	ldr	r3, [pc, #80]	; (800367c <LL_FillBuffer+0x88>)
 800362a:	2200      	movs	r2, #0
 800362c:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 800362e:	4a13      	ldr	r2, [pc, #76]	; (800367c <LL_FillBuffer+0x88>)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003634:	4b11      	ldr	r3, [pc, #68]	; (800367c <LL_FillBuffer+0x88>)
 8003636:	4a14      	ldr	r2, [pc, #80]	; (8003688 <LL_FillBuffer+0x94>)
 8003638:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800363a:	4810      	ldr	r0, [pc, #64]	; (800367c <LL_FillBuffer+0x88>)
 800363c:	f002 f98e 	bl	800595c <HAL_DMA2D_Init>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d115      	bne.n	8003672 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003646:	68f9      	ldr	r1, [r7, #12]
 8003648:	480c      	ldr	r0, [pc, #48]	; (800367c <LL_FillBuffer+0x88>)
 800364a:	f002 fbf5 	bl	8005e38 <HAL_DMA2D_ConfigLayer>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10e      	bne.n	8003672 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69f9      	ldr	r1, [r7, #28]
 800365e:	4807      	ldr	r0, [pc, #28]	; (800367c <LL_FillBuffer+0x88>)
 8003660:	f002 f9c6 	bl	80059f0 <HAL_DMA2D_Start>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800366a:	210a      	movs	r1, #10
 800366c:	4803      	ldr	r0, [pc, #12]	; (800367c <LL_FillBuffer+0x88>)
 800366e:	f002 f9ea 	bl	8005a46 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003672:	bf00      	nop
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	200004e0 	.word	0x200004e0
 8003680:	20000520 	.word	0x20000520
 8003684:	20000438 	.word	0x20000438
 8003688:	4002b000 	.word	0x4002b000

0800368c <LL_ConvertLineToARGB8888>:
  * @param  xSize: Buffer width
  * @param  ColorMode: Input color mode   
  * @retval None
  */
static void LL_ConvertLineToARGB8888(void *pSrc, void *pDst, uint32_t xSize, uint32_t ColorMode)
{    
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af02      	add	r7, sp, #8
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hDma2dHandler.Init.Mode         = DMA2D_M2M_PFC;
 800369a:	4b1c      	ldr	r3, [pc, #112]	; (800370c <LL_ConvertLineToARGB8888+0x80>)
 800369c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80036a0:	605a      	str	r2, [r3, #4]
  hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80036a2:	4b1a      	ldr	r3, [pc, #104]	; (800370c <LL_ConvertLineToARGB8888+0x80>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
  hDma2dHandler.Init.OutputOffset = 0;     
 80036a8:	4b18      	ldr	r3, [pc, #96]	; (800370c <LL_ConvertLineToARGB8888+0x80>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	60da      	str	r2, [r3, #12]
  
  /* Foreground Configuration */
  hDma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80036ae:	4b17      	ldr	r3, [pc, #92]	; (800370c <LL_ConvertLineToARGB8888+0x80>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
  hDma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 80036b4:	4b15      	ldr	r3, [pc, #84]	; (800370c <LL_ConvertLineToARGB8888+0x80>)
 80036b6:	22ff      	movs	r2, #255	; 0xff
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34
  hDma2dHandler.LayerCfg[1].InputColorMode = ColorMode;
 80036ba:	4a14      	ldr	r2, [pc, #80]	; (800370c <LL_ConvertLineToARGB8888+0x80>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	62d3      	str	r3, [r2, #44]	; 0x2c
  hDma2dHandler.LayerCfg[1].InputOffset = 0;
 80036c0:	4b12      	ldr	r3, [pc, #72]	; (800370c <LL_ConvertLineToARGB8888+0x80>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	629a      	str	r2, [r3, #40]	; 0x28
  
  hDma2dHandler.Instance = DMA2D; 
 80036c6:	4b11      	ldr	r3, [pc, #68]	; (800370c <LL_ConvertLineToARGB8888+0x80>)
 80036c8:	4a11      	ldr	r2, [pc, #68]	; (8003710 <LL_ConvertLineToARGB8888+0x84>)
 80036ca:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80036cc:	480f      	ldr	r0, [pc, #60]	; (800370c <LL_ConvertLineToARGB8888+0x80>)
 80036ce:	f002 f945 	bl	800595c <HAL_DMA2D_Init>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d115      	bne.n	8003704 <LL_ConvertLineToARGB8888+0x78>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, 1) == HAL_OK) 
 80036d8:	2101      	movs	r1, #1
 80036da:	480c      	ldr	r0, [pc, #48]	; (800370c <LL_ConvertLineToARGB8888+0x80>)
 80036dc:	f002 fbac 	bl	8005e38 <HAL_DMA2D_ConfigLayer>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10e      	bne.n	8003704 <LL_ConvertLineToARGB8888+0x78>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 80036e6:	68f9      	ldr	r1, [r7, #12]
 80036e8:	68ba      	ldr	r2, [r7, #8]
 80036ea:	2301      	movs	r3, #1
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4806      	ldr	r0, [pc, #24]	; (800370c <LL_ConvertLineToARGB8888+0x80>)
 80036f2:	f002 f97d 	bl	80059f0 <HAL_DMA2D_Start>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d103      	bne.n	8003704 <LL_ConvertLineToARGB8888+0x78>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80036fc:	210a      	movs	r1, #10
 80036fe:	4803      	ldr	r0, [pc, #12]	; (800370c <LL_ConvertLineToARGB8888+0x80>)
 8003700:	f002 f9a1 	bl	8005a46 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003704:	bf00      	nop
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	200004e0 	.word	0x200004e0
 8003710:	4002b000 	.word	0x4002b000

08003714 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003718:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 800371a:	4a2a      	ldr	r2, [pc, #168]	; (80037c4 <BSP_SDRAM_Init+0xb0>)
 800371c:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800371e:	4b2a      	ldr	r3, [pc, #168]	; (80037c8 <BSP_SDRAM_Init+0xb4>)
 8003720:	2202      	movs	r2, #2
 8003722:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003724:	4b28      	ldr	r3, [pc, #160]	; (80037c8 <BSP_SDRAM_Init+0xb4>)
 8003726:	2207      	movs	r2, #7
 8003728:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 800372a:	4b27      	ldr	r3, [pc, #156]	; (80037c8 <BSP_SDRAM_Init+0xb4>)
 800372c:	2204      	movs	r2, #4
 800372e:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003730:	4b25      	ldr	r3, [pc, #148]	; (80037c8 <BSP_SDRAM_Init+0xb4>)
 8003732:	2207      	movs	r2, #7
 8003734:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003736:	4b24      	ldr	r3, [pc, #144]	; (80037c8 <BSP_SDRAM_Init+0xb4>)
 8003738:	2202      	movs	r2, #2
 800373a:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 800373c:	4b22      	ldr	r3, [pc, #136]	; (80037c8 <BSP_SDRAM_Init+0xb4>)
 800373e:	2202      	movs	r2, #2
 8003740:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003742:	4b21      	ldr	r3, [pc, #132]	; (80037c8 <BSP_SDRAM_Init+0xb4>)
 8003744:	2202      	movs	r2, #2
 8003746:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003748:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 800374a:	2200      	movs	r2, #0
 800374c:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800374e:	4b1c      	ldr	r3, [pc, #112]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 8003750:	2200      	movs	r2, #0
 8003752:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003754:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 8003756:	2204      	movs	r2, #4
 8003758:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800375a:	4b19      	ldr	r3, [pc, #100]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 800375c:	2210      	movs	r2, #16
 800375e:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 8003762:	2240      	movs	r2, #64	; 0x40
 8003764:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003766:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 8003768:	f44f 7280 	mov.w	r2, #256	; 0x100
 800376c:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 8003770:	2200      	movs	r2, #0
 8003772:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 8003776:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800377a:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 800377e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003782:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003784:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 8003786:	2200      	movs	r2, #0
 8003788:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 800378a:	2100      	movs	r1, #0
 800378c:	480c      	ldr	r0, [pc, #48]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 800378e:	f000 f87f 	bl	8003890 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003792:	490d      	ldr	r1, [pc, #52]	; (80037c8 <BSP_SDRAM_Init+0xb4>)
 8003794:	480a      	ldr	r0, [pc, #40]	; (80037c0 <BSP_SDRAM_Init+0xac>)
 8003796:	f005 febb 	bl	8009510 <HAL_SDRAM_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d003      	beq.n	80037a8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <BSP_SDRAM_Init+0xb8>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	e002      	b.n	80037ae <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80037a8:	4b08      	ldr	r3, [pc, #32]	; (80037cc <BSP_SDRAM_Init+0xb8>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80037ae:	f240 6003 	movw	r0, #1539	; 0x603
 80037b2:	f000 f80d 	bl	80037d0 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <BSP_SDRAM_Init+0xb8>)
 80037b8:	781b      	ldrb	r3, [r3, #0]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	200005c0 	.word	0x200005c0
 80037c4:	a0000140 	.word	0xa0000140
 80037c8:	200005f4 	.word	0x200005f4
 80037cc:	20000030 	.word	0x20000030

080037d0 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80037dc:	4b2a      	ldr	r3, [pc, #168]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037de:	2201      	movs	r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037e2:	4b29      	ldr	r3, [pc, #164]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037e4:	2210      	movs	r2, #16
 80037e6:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80037e8:	4b27      	ldr	r3, [pc, #156]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80037ee:	4b26      	ldr	r3, [pc, #152]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037f0:	2200      	movs	r2, #0
 80037f2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80037f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037f8:	4923      	ldr	r1, [pc, #140]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037fa:	4824      	ldr	r0, [pc, #144]	; (800388c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037fc:	f005 febc 	bl	8009578 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003800:	2001      	movs	r0, #1
 8003802:	f001 f90d 	bl	8004a20 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003806:	4b20      	ldr	r3, [pc, #128]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003808:	2202      	movs	r2, #2
 800380a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800380c:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800380e:	2210      	movs	r2, #16
 8003810:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003812:	4b1d      	ldr	r3, [pc, #116]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003814:	2201      	movs	r2, #1
 8003816:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003818:	4b1b      	ldr	r3, [pc, #108]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800381a:	2200      	movs	r2, #0
 800381c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800381e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003822:	4919      	ldr	r1, [pc, #100]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003824:	4819      	ldr	r0, [pc, #100]	; (800388c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003826:	f005 fea7 	bl	8009578 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800382a:	4b17      	ldr	r3, [pc, #92]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800382c:	2203      	movs	r2, #3
 800382e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003830:	4b15      	ldr	r3, [pc, #84]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003832:	2210      	movs	r2, #16
 8003834:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003838:	2208      	movs	r2, #8
 800383a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800383c:	4b12      	ldr	r3, [pc, #72]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800383e:	2200      	movs	r2, #0
 8003840:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003846:	4910      	ldr	r1, [pc, #64]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003848:	4810      	ldr	r0, [pc, #64]	; (800388c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800384a:	f005 fe95 	bl	8009578 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 800384e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003852:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003856:	2204      	movs	r2, #4
 8003858:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800385c:	2210      	movs	r2, #16
 800385e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003860:	4b09      	ldr	r3, [pc, #36]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003862:	2201      	movs	r2, #1
 8003864:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a07      	ldr	r2, [pc, #28]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800386a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800386c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003870:	4905      	ldr	r1, [pc, #20]	; (8003888 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003872:	4806      	ldr	r0, [pc, #24]	; (800388c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003874:	f005 fe80 	bl	8009578 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4804      	ldr	r0, [pc, #16]	; (800388c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800387c:	f005 feb1 	bl	80095e2 <HAL_SDRAM_ProgramRefreshRate>
}
 8003880:	bf00      	nop
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	20000610 	.word	0x20000610
 800388c:	200005c0 	.word	0x200005c0

08003890 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003890:	b580      	push	{r7, lr}
 8003892:	b090      	sub	sp, #64	; 0x40
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 800389a:	4b70      	ldr	r3, [pc, #448]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	4a6f      	ldr	r2, [pc, #444]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 80038a0:	f043 0301 	orr.w	r3, r3, #1
 80038a4:	6393      	str	r3, [r2, #56]	; 0x38
 80038a6:	4b6d      	ldr	r3, [pc, #436]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	f003 0301 	and.w	r3, r3, #1
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80038b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80038b2:	4b6a      	ldr	r3, [pc, #424]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a69      	ldr	r2, [pc, #420]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 80038b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b67      	ldr	r3, [pc, #412]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ca:	4b64      	ldr	r3, [pc, #400]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	4a63      	ldr	r2, [pc, #396]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 80038d0:	f043 0304 	orr.w	r3, r3, #4
 80038d4:	6313      	str	r3, [r2, #48]	; 0x30
 80038d6:	4b61      	ldr	r3, [pc, #388]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 80038d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038da:	f003 0304 	and.w	r3, r3, #4
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038e2:	4b5e      	ldr	r3, [pc, #376]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	4a5d      	ldr	r2, [pc, #372]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 80038e8:	f043 0308 	orr.w	r3, r3, #8
 80038ec:	6313      	str	r3, [r2, #48]	; 0x30
 80038ee:	4b5b      	ldr	r3, [pc, #364]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 80038f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	61fb      	str	r3, [r7, #28]
 80038f8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038fa:	4b58      	ldr	r3, [pc, #352]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	4a57      	ldr	r2, [pc, #348]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 8003900:	f043 0310 	orr.w	r3, r3, #16
 8003904:	6313      	str	r3, [r2, #48]	; 0x30
 8003906:	4b55      	ldr	r3, [pc, #340]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	61bb      	str	r3, [r7, #24]
 8003910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003912:	4b52      	ldr	r3, [pc, #328]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4a51      	ldr	r2, [pc, #324]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 8003918:	f043 0320 	orr.w	r3, r3, #32
 800391c:	6313      	str	r3, [r2, #48]	; 0x30
 800391e:	4b4f      	ldr	r3, [pc, #316]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f003 0320 	and.w	r3, r3, #32
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800392a:	4b4c      	ldr	r3, [pc, #304]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	4a4b      	ldr	r2, [pc, #300]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 8003930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003934:	6313      	str	r3, [r2, #48]	; 0x30
 8003936:	4b49      	ldr	r3, [pc, #292]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 8003938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003942:	4b46      	ldr	r3, [pc, #280]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4a45      	ldr	r2, [pc, #276]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 8003948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4b43      	ldr	r3, [pc, #268]	; (8003a5c <BSP_SDRAM_MspInit+0x1cc>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800395a:	2302      	movs	r3, #2
 800395c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800395e:	2301      	movs	r3, #1
 8003960:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003962:	2302      	movs	r3, #2
 8003964:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003966:	230c      	movs	r3, #12
 8003968:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 800396a:	2308      	movs	r3, #8
 800396c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800396e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003972:	4619      	mov	r1, r3
 8003974:	483a      	ldr	r0, [pc, #232]	; (8003a60 <BSP_SDRAM_MspInit+0x1d0>)
 8003976:	f002 fb8d 	bl	8006094 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 800397a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800397e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003984:	4619      	mov	r1, r3
 8003986:	4837      	ldr	r0, [pc, #220]	; (8003a64 <BSP_SDRAM_MspInit+0x1d4>)
 8003988:	f002 fb84 	bl	8006094 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800398c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003992:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003996:	4619      	mov	r1, r3
 8003998:	4833      	ldr	r0, [pc, #204]	; (8003a68 <BSP_SDRAM_MspInit+0x1d8>)
 800399a:	f002 fb7b 	bl	8006094 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800399e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80039a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039a8:	4619      	mov	r1, r3
 80039aa:	4830      	ldr	r0, [pc, #192]	; (8003a6c <BSP_SDRAM_MspInit+0x1dc>)
 80039ac:	f002 fb72 	bl	8006094 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80039b0:	f248 1333 	movw	r3, #33075	; 0x8133
 80039b4:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80039b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ba:	4619      	mov	r1, r3
 80039bc:	482c      	ldr	r0, [pc, #176]	; (8003a70 <BSP_SDRAM_MspInit+0x1e0>)
 80039be:	f002 fb69 	bl	8006094 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80039c2:	2328      	movs	r3, #40	; 0x28
 80039c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80039c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039ca:	4619      	mov	r1, r3
 80039cc:	4829      	ldr	r0, [pc, #164]	; (8003a74 <BSP_SDRAM_MspInit+0x1e4>)
 80039ce:	f002 fb61 	bl	8006094 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80039d2:	4b29      	ldr	r3, [pc, #164]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80039d8:	4b27      	ldr	r3, [pc, #156]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 80039da:	2280      	movs	r2, #128	; 0x80
 80039dc:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80039de:	4b26      	ldr	r3, [pc, #152]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 80039e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e4:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80039e6:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 80039e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039ec:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80039ee:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 80039f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80039f4:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80039f6:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 80039f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039fc:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80039fe:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003a04:	4b1c      	ldr	r3, [pc, #112]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 8003a06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003a0a:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003a12:	4b19      	ldr	r3, [pc, #100]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 8003a14:	2203      	movs	r2, #3
 8003a16:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003a18:	4b17      	ldr	r3, [pc, #92]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003a1e:	4b16      	ldr	r3, [pc, #88]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003a24:	4b14      	ldr	r3, [pc, #80]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 8003a26:	4a15      	ldr	r2, [pc, #84]	; (8003a7c <BSP_SDRAM_MspInit+0x1ec>)
 8003a28:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 8003a2e:	631a      	str	r2, [r3, #48]	; 0x30
 8003a30:	4a11      	ldr	r2, [pc, #68]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003a36:	4810      	ldr	r0, [pc, #64]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 8003a38:	f001 fe80 	bl	800573c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003a3c:	480e      	ldr	r0, [pc, #56]	; (8003a78 <BSP_SDRAM_MspInit+0x1e8>)
 8003a3e:	f001 fdcf 	bl	80055e0 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003a42:	2200      	movs	r2, #0
 8003a44:	210f      	movs	r1, #15
 8003a46:	2038      	movs	r0, #56	; 0x38
 8003a48:	f001 fcc0 	bl	80053cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003a4c:	2038      	movs	r0, #56	; 0x38
 8003a4e:	f001 fcd9 	bl	8005404 <HAL_NVIC_EnableIRQ>
}
 8003a52:	bf00      	nop
 8003a54:	3740      	adds	r7, #64	; 0x40
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	40023800 	.word	0x40023800
 8003a60:	40020800 	.word	0x40020800
 8003a64:	40020c00 	.word	0x40020c00
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40021400 	.word	0x40021400
 8003a70:	40021800 	.word	0x40021800
 8003a74:	40021c00 	.word	0x40021c00
 8003a78:	20000620 	.word	0x20000620
 8003a7c:	40026410 	.word	0x40026410

08003a80 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	460a      	mov	r2, r1
 8003a8a:	80fb      	strh	r3, [r7, #6]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003a90:	2300      	movs	r3, #0
 8003a92:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003a94:	4a14      	ldr	r2, [pc, #80]	; (8003ae8 <BSP_TS_Init+0x68>)
 8003a96:	88fb      	ldrh	r3, [r7, #6]
 8003a98:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003a9a:	4a14      	ldr	r2, [pc, #80]	; (8003aec <BSP_TS_Init+0x6c>)
 8003a9c:	88bb      	ldrh	r3, [r7, #4]
 8003a9e:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003aa0:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <BSP_TS_Init+0x70>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2070      	movs	r0, #112	; 0x70
 8003aa6:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003aa8:	4b11      	ldr	r3, [pc, #68]	; (8003af0 <BSP_TS_Init+0x70>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2070      	movs	r0, #112	; 0x70
 8003aae:	4798      	blx	r3
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b51      	cmp	r3, #81	; 0x51
 8003ab4:	d111      	bne.n	8003ada <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003ab6:	4b0f      	ldr	r3, [pc, #60]	; (8003af4 <BSP_TS_Init+0x74>)
 8003ab8:	4a0d      	ldr	r2, [pc, #52]	; (8003af0 <BSP_TS_Init+0x70>)
 8003aba:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003abc:	4b0e      	ldr	r3, [pc, #56]	; (8003af8 <BSP_TS_Init+0x78>)
 8003abe:	2270      	movs	r2, #112	; 0x70
 8003ac0:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003ac2:	4b0e      	ldr	r3, [pc, #56]	; (8003afc <BSP_TS_Init+0x7c>)
 8003ac4:	2208      	movs	r2, #8
 8003ac6:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <BSP_TS_Init+0x74>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <BSP_TS_Init+0x78>)
 8003ad0:	7812      	ldrb	r2, [r2, #0]
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	4798      	blx	r3
 8003ad8:	e001      	b.n	8003ade <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003ada:	2303      	movs	r3, #3
 8003adc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	3710      	adds	r7, #16
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000684 	.word	0x20000684
 8003aec:	20000686 	.word	0x20000686
 8003af0:	20000000 	.word	0x20000000
 8003af4:	20000680 	.word	0x20000680
 8003af8:	20000689 	.word	0x20000689
 8003afc:	20000688 	.word	0x20000688

08003b00 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 8003b00:	b590      	push	{r4, r7, lr}
 8003b02:	b097      	sub	sp, #92	; 0x5c
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 8003b12:	2300      	movs	r3, #0
 8003b14:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8003b1a:	4bb4      	ldr	r3, [pc, #720]	; (8003dec <BSP_TS_GetState+0x2ec>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	4ab3      	ldr	r2, [pc, #716]	; (8003df0 <BSP_TS_GetState+0x2f0>)
 8003b22:	7812      	ldrb	r2, [r2, #0]
 8003b24:	b292      	uxth	r2, r2
 8003b26:	4610      	mov	r0, r2
 8003b28:	4798      	blx	r3
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 8196 	beq.w	8003e68 <BSP_TS_GetState+0x368>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b40:	e185      	b.n	8003e4e <BSP_TS_GetState+0x34e>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 8003b42:	4baa      	ldr	r3, [pc, #680]	; (8003dec <BSP_TS_GetState+0x2ec>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	4aa9      	ldr	r2, [pc, #676]	; (8003df0 <BSP_TS_GetState+0x2f0>)
 8003b4a:	7812      	ldrb	r2, [r2, #0]
 8003b4c:	b290      	uxth	r0, r2
 8003b4e:	f107 0120 	add.w	r1, r7, #32
 8003b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b54:	0052      	lsls	r2, r2, #1
 8003b56:	188c      	adds	r4, r1, r2
 8003b58:	f107 0114 	add.w	r1, r7, #20
 8003b5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b5e:	0052      	lsls	r2, r2, #1
 8003b60:	440a      	add	r2, r1
 8003b62:	4621      	mov	r1, r4
 8003b64:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8003b66:	4ba3      	ldr	r3, [pc, #652]	; (8003df4 <BSP_TS_GetState+0x2f4>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d117      	bne.n	8003b9e <BSP_TS_GetState+0x9e>
      {
        x[index] = brute_x[index];
 8003b6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	3350      	adds	r3, #80	; 0x50
 8003b74:	443b      	add	r3, r7
 8003b76:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	3350      	adds	r3, #80	; 0x50
 8003b80:	443b      	add	r3, r7
 8003b82:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8003b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	3350      	adds	r3, #80	; 0x50
 8003b8c:	443b      	add	r3, r7
 8003b8e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	3350      	adds	r3, #80	; 0x50
 8003b98:	443b      	add	r3, r7
 8003b9a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8003b9e:	4b95      	ldr	r3, [pc, #596]	; (8003df4 <BSP_TS_GetState+0x2f4>)
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00e      	beq.n	8003bc8 <BSP_TS_GetState+0xc8>
      {
        x[index] = 4096 - brute_x[index];
 8003baa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	3350      	adds	r3, #80	; 0x50
 8003bb0:	443b      	add	r3, r7
 8003bb2:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8003bb6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bbe:	005b      	lsls	r3, r3, #1
 8003bc0:	3350      	adds	r3, #80	; 0x50
 8003bc2:	443b      	add	r3, r7
 8003bc4:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8003bc8:	4b8a      	ldr	r3, [pc, #552]	; (8003df4 <BSP_TS_GetState+0x2f4>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00e      	beq.n	8003bf2 <BSP_TS_GetState+0xf2>
      {
        y[index] = 4096 - brute_y[index];
 8003bd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bd6:	005b      	lsls	r3, r3, #1
 8003bd8:	3350      	adds	r3, #80	; 0x50
 8003bda:	443b      	add	r3, r7
 8003bdc:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 8003be0:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8003be4:	b29a      	uxth	r2, r3
 8003be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	3350      	adds	r3, #80	; 0x50
 8003bec:	443b      	add	r3, r7
 8003bee:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 8003bf2:	4b80      	ldr	r3, [pc, #512]	; (8003df4 <BSP_TS_GetState+0x2f4>)
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d017      	beq.n	8003c2e <BSP_TS_GetState+0x12e>
      {
        y[index] = brute_x[index];
 8003bfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c00:	005b      	lsls	r3, r3, #1
 8003c02:	3350      	adds	r3, #80	; 0x50
 8003c04:	443b      	add	r3, r7
 8003c06:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8003c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	3350      	adds	r3, #80	; 0x50
 8003c10:	443b      	add	r3, r7
 8003c12:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8003c16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	3350      	adds	r3, #80	; 0x50
 8003c1c:	443b      	add	r3, r7
 8003c1e:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8003c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	3350      	adds	r3, #80	; 0x50
 8003c28:	443b      	add	r3, r7
 8003c2a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 8003c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	3350      	adds	r3, #80	; 0x50
 8003c34:	443b      	add	r3, r7
 8003c36:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4a6e      	ldr	r2, [pc, #440]	; (8003df8 <BSP_TS_GetState+0x2f8>)
 8003c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c44:	4299      	cmp	r1, r3
 8003c46:	d90d      	bls.n	8003c64 <BSP_TS_GetState+0x164>
 8003c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	3350      	adds	r3, #80	; 0x50
 8003c4e:	443b      	add	r3, r7
 8003c50:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8003c54:	4968      	ldr	r1, [pc, #416]	; (8003df8 <BSP_TS_GetState+0x2f8>)
 8003c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	1ad3      	subs	r3, r2, r3
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	e00c      	b.n	8003c7e <BSP_TS_GetState+0x17e>
 8003c64:	4a64      	ldr	r2, [pc, #400]	; (8003df8 <BSP_TS_GetState+0x2f8>)
 8003c66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	3350      	adds	r3, #80	; 0x50
 8003c74:	443b      	add	r3, r7
 8003c76:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8003c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	3350      	adds	r3, #80	; 0x50
 8003c88:	443b      	add	r3, r7
 8003c8a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003c8e:	4619      	mov	r1, r3
 8003c90:	4a5a      	ldr	r2, [pc, #360]	; (8003dfc <BSP_TS_GetState+0x2fc>)
 8003c92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c98:	4299      	cmp	r1, r3
 8003c9a:	d90d      	bls.n	8003cb8 <BSP_TS_GetState+0x1b8>
 8003c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	3350      	adds	r3, #80	; 0x50
 8003ca2:	443b      	add	r3, r7
 8003ca4:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8003ca8:	4954      	ldr	r1, [pc, #336]	; (8003dfc <BSP_TS_GetState+0x2fc>)
 8003caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	e00c      	b.n	8003cd2 <BSP_TS_GetState+0x1d2>
 8003cb8:	4a50      	ldr	r2, [pc, #320]	; (8003dfc <BSP_TS_GetState+0x2fc>)
 8003cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	3350      	adds	r3, #80	; 0x50
 8003cc8:	443b      	add	r3, r7
 8003cca:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 8003cd6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8003cda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003cde:	4413      	add	r3, r2
 8003ce0:	2b05      	cmp	r3, #5
 8003ce2:	dd15      	ble.n	8003d10 <BSP_TS_GetState+0x210>
      {
        _x[index] = x[index];
 8003ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	3350      	adds	r3, #80	; 0x50
 8003cea:	443b      	add	r3, r7
 8003cec:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4a41      	ldr	r2, [pc, #260]	; (8003df8 <BSP_TS_GetState+0x2f8>)
 8003cf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8003cfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	3350      	adds	r3, #80	; 0x50
 8003d00:	443b      	add	r3, r7
 8003d02:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8003d06:	4619      	mov	r1, r3
 8003d08:	4a3c      	ldr	r2, [pc, #240]	; (8003dfc <BSP_TS_GetState+0x2fc>)
 8003d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8003d10:	4b37      	ldr	r3, [pc, #220]	; (8003df0 <BSP_TS_GetState+0x2f0>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	2b70      	cmp	r3, #112	; 0x70
 8003d16:	d119      	bne.n	8003d4c <BSP_TS_GetState+0x24c>
      {
        TS_State->touchX[index] = x[index];
 8003d18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	3350      	adds	r3, #80	; 0x50
 8003d1e:	443b      	add	r3, r7
 8003d20:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	4413      	add	r3, r2
 8003d2c:	460a      	mov	r2, r1
 8003d2e:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8003d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	3350      	adds	r3, #80	; 0x50
 8003d36:	443b      	add	r3, r7
 8003d38:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d40:	3304      	adds	r3, #4
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	4413      	add	r3, r2
 8003d46:	460a      	mov	r2, r1
 8003d48:	809a      	strh	r2, [r3, #4]
 8003d4a:	e022      	b.n	8003d92 <BSP_TS_GetState+0x292>
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8003d4c:	4b2c      	ldr	r3, [pc, #176]	; (8003e00 <BSP_TS_GetState+0x300>)
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	4619      	mov	r1, r3
 8003d52:	4a29      	ldr	r2, [pc, #164]	; (8003df8 <BSP_TS_GetState+0x2f8>)
 8003d54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5a:	fb01 f303 	mul.w	r3, r1, r3
 8003d5e:	0b1b      	lsrs	r3, r3, #12
 8003d60:	b299      	uxth	r1, r3
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	4413      	add	r3, r2
 8003d6a:	460a      	mov	r2, r1
 8003d6c:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 8003d6e:	4b25      	ldr	r3, [pc, #148]	; (8003e04 <BSP_TS_GetState+0x304>)
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	4619      	mov	r1, r3
 8003d74:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <BSP_TS_GetState+0x2fc>)
 8003d76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	0b1b      	lsrs	r3, r3, #12
 8003d82:	b299      	uxth	r1, r3
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d88:	3304      	adds	r3, #4
 8003d8a:	005b      	lsls	r3, r3, #1
 8003d8c:	4413      	add	r3, r2
 8003d8e:	460a      	mov	r2, r1
 8003d90:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 8003d92:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <BSP_TS_GetState+0x2f0>)
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	b298      	uxth	r0, r3
 8003d98:	f107 010c 	add.w	r1, r7, #12
 8003d9c:	f107 0210 	add.w	r2, r7, #16
 8003da0:	f107 0308 	add.w	r3, r7, #8
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	460b      	mov	r3, r1
 8003da8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003daa:	f7fd f897 	bl	8000edc <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	b2d9      	uxtb	r1, r3
 8003db2:	687a      	ldr	r2, [r7, #4]
 8003db4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db6:	4413      	add	r3, r2
 8003db8:	3316      	adds	r3, #22
 8003dba:	460a      	mov	r2, r1
 8003dbc:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	b2d9      	uxtb	r1, r3
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3320      	adds	r3, #32
 8003dca:	460a      	mov	r2, r1
 8003dcc:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d835      	bhi.n	8003e40 <BSP_TS_GetState+0x340>
 8003dd4:	a201      	add	r2, pc, #4	; (adr r2, 8003ddc <BSP_TS_GetState+0x2dc>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003e09 	.word	0x08003e09
 8003de0:	08003e17 	.word	0x08003e17
 8003de4:	08003e25 	.word	0x08003e25
 8003de8:	08003e33 	.word	0x08003e33
 8003dec:	20000680 	.word	0x20000680
 8003df0:	20000689 	.word	0x20000689
 8003df4:	20000688 	.word	0x20000688
 8003df8:	2000068c 	.word	0x2000068c
 8003dfc:	200006a0 	.word	0x200006a0
 8003e00:	20000684 	.word	0x20000684
 8003e04:	20000686 	.word	0x20000686
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e0c:	4413      	add	r3, r2
 8003e0e:	331b      	adds	r3, #27
 8003e10:	2201      	movs	r2, #1
 8003e12:	701a      	strb	r2, [r3, #0]
          break;
 8003e14:	e018      	b.n	8003e48 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e1a:	4413      	add	r3, r2
 8003e1c:	331b      	adds	r3, #27
 8003e1e:	2202      	movs	r2, #2
 8003e20:	701a      	strb	r2, [r3, #0]
          break;
 8003e22:	e011      	b.n	8003e48 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e28:	4413      	add	r3, r2
 8003e2a:	331b      	adds	r3, #27
 8003e2c:	2203      	movs	r2, #3
 8003e2e:	701a      	strb	r2, [r3, #0]
          break;
 8003e30:	e00a      	b.n	8003e48 <BSP_TS_GetState+0x348>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e36:	4413      	add	r3, r2
 8003e38:	331b      	adds	r3, #27
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
          break;
 8003e3e:	e003      	b.n	8003e48 <BSP_TS_GetState+0x348>
        default :
          ts_status = TS_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8003e46:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8003e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	461a      	mov	r2, r3
 8003e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e56:	4293      	cmp	r3, r2
 8003e58:	f4ff ae73 	bcc.w	8003b42 <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f809 	bl	8003e74 <BSP_TS_Get_GestureId>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8003e68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3754      	adds	r7, #84	; 0x54
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd90      	pop	{r4, r7, pc}

08003e74 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8003e84:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <BSP_TS_Get_GestureId+0x100>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f107 0208 	add.w	r2, r7, #8
 8003e8e:	4611      	mov	r1, r2
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7fd f80a 	bl	8000eaa <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b49      	cmp	r3, #73	; 0x49
 8003e9a:	d05e      	beq.n	8003f5a <BSP_TS_Get_GestureId+0xe6>
 8003e9c:	2b49      	cmp	r3, #73	; 0x49
 8003e9e:	d860      	bhi.n	8003f62 <BSP_TS_Get_GestureId+0xee>
 8003ea0:	2b1c      	cmp	r3, #28
 8003ea2:	d83f      	bhi.n	8003f24 <BSP_TS_Get_GestureId+0xb0>
 8003ea4:	2b1c      	cmp	r3, #28
 8003ea6:	d85c      	bhi.n	8003f62 <BSP_TS_Get_GestureId+0xee>
 8003ea8:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <BSP_TS_Get_GestureId+0x3c>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003f2b 	.word	0x08003f2b
 8003eb4:	08003f63 	.word	0x08003f63
 8003eb8:	08003f63 	.word	0x08003f63
 8003ebc:	08003f63 	.word	0x08003f63
 8003ec0:	08003f63 	.word	0x08003f63
 8003ec4:	08003f63 	.word	0x08003f63
 8003ec8:	08003f63 	.word	0x08003f63
 8003ecc:	08003f63 	.word	0x08003f63
 8003ed0:	08003f63 	.word	0x08003f63
 8003ed4:	08003f63 	.word	0x08003f63
 8003ed8:	08003f63 	.word	0x08003f63
 8003edc:	08003f63 	.word	0x08003f63
 8003ee0:	08003f63 	.word	0x08003f63
 8003ee4:	08003f63 	.word	0x08003f63
 8003ee8:	08003f63 	.word	0x08003f63
 8003eec:	08003f63 	.word	0x08003f63
 8003ef0:	08003f33 	.word	0x08003f33
 8003ef4:	08003f63 	.word	0x08003f63
 8003ef8:	08003f63 	.word	0x08003f63
 8003efc:	08003f63 	.word	0x08003f63
 8003f00:	08003f3b 	.word	0x08003f3b
 8003f04:	08003f63 	.word	0x08003f63
 8003f08:	08003f63 	.word	0x08003f63
 8003f0c:	08003f63 	.word	0x08003f63
 8003f10:	08003f43 	.word	0x08003f43
 8003f14:	08003f63 	.word	0x08003f63
 8003f18:	08003f63 	.word	0x08003f63
 8003f1c:	08003f63 	.word	0x08003f63
 8003f20:	08003f4b 	.word	0x08003f4b
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d014      	beq.n	8003f52 <BSP_TS_Get_GestureId+0xde>
 8003f28:	e01b      	b.n	8003f62 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003f30:	e01a      	b.n	8003f68 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003f38:	e016      	b.n	8003f68 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003f40:	e012      	b.n	8003f68 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2203      	movs	r2, #3
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003f48:	e00e      	b.n	8003f68 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003f50:	e00a      	b.n	8003f68 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2205      	movs	r2, #5
 8003f56:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003f58:	e006      	b.n	8003f68 <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2206      	movs	r2, #6
 8003f5e:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8003f60:	e002      	b.n	8003f68 <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	73fb      	strb	r3, [r7, #15]
      break;
 8003f66:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 8003f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000689 	.word	0x20000689

08003f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f7e:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <HAL_MspInit+0x44>)
 8003f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f82:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <HAL_MspInit+0x44>)
 8003f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f88:	6413      	str	r3, [r2, #64]	; 0x40
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <HAL_MspInit+0x44>)
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f92:	607b      	str	r3, [r7, #4]
 8003f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f96:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <HAL_MspInit+0x44>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	4a08      	ldr	r2, [pc, #32]	; (8003fbc <HAL_MspInit+0x44>)
 8003f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8003fa2:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <HAL_MspInit+0x44>)
 8003fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fae:	bf00      	nop
 8003fb0:	370c      	adds	r7, #12
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800

08003fc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b08e      	sub	sp, #56	; 0x38
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003fd0:	4b33      	ldr	r3, [pc, #204]	; (80040a0 <HAL_InitTick+0xe0>)
 8003fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd4:	4a32      	ldr	r2, [pc, #200]	; (80040a0 <HAL_InitTick+0xe0>)
 8003fd6:	f043 0310 	orr.w	r3, r3, #16
 8003fda:	6413      	str	r3, [r2, #64]	; 0x40
 8003fdc:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <HAL_InitTick+0xe0>)
 8003fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	60fb      	str	r3, [r7, #12]
 8003fe6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003fe8:	f107 0210 	add.w	r2, r7, #16
 8003fec:	f107 0314 	add.w	r3, r7, #20
 8003ff0:	4611      	mov	r1, r2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f004 f9c8 	bl	8008388 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ff8:	6a3b      	ldr	r3, [r7, #32]
 8003ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d103      	bne.n	800400a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004002:	f004 f999 	bl	8008338 <HAL_RCC_GetPCLK1Freq>
 8004006:	6378      	str	r0, [r7, #52]	; 0x34
 8004008:	e004      	b.n	8004014 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800400a:	f004 f995 	bl	8008338 <HAL_RCC_GetPCLK1Freq>
 800400e:	4603      	mov	r3, r0
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	4a23      	ldr	r2, [pc, #140]	; (80040a4 <HAL_InitTick+0xe4>)
 8004018:	fba2 2303 	umull	r2, r3, r2, r3
 800401c:	0c9b      	lsrs	r3, r3, #18
 800401e:	3b01      	subs	r3, #1
 8004020:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004022:	4b21      	ldr	r3, [pc, #132]	; (80040a8 <HAL_InitTick+0xe8>)
 8004024:	4a21      	ldr	r2, [pc, #132]	; (80040ac <HAL_InitTick+0xec>)
 8004026:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004028:	4b1f      	ldr	r3, [pc, #124]	; (80040a8 <HAL_InitTick+0xe8>)
 800402a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800402e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004030:	4a1d      	ldr	r2, [pc, #116]	; (80040a8 <HAL_InitTick+0xe8>)
 8004032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004034:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004036:	4b1c      	ldr	r3, [pc, #112]	; (80040a8 <HAL_InitTick+0xe8>)
 8004038:	2200      	movs	r2, #0
 800403a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800403c:	4b1a      	ldr	r3, [pc, #104]	; (80040a8 <HAL_InitTick+0xe8>)
 800403e:	2200      	movs	r2, #0
 8004040:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004042:	4b19      	ldr	r3, [pc, #100]	; (80040a8 <HAL_InitTick+0xe8>)
 8004044:	2200      	movs	r2, #0
 8004046:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8004048:	4817      	ldr	r0, [pc, #92]	; (80040a8 <HAL_InitTick+0xe8>)
 800404a:	f005 fb9d 	bl	8009788 <HAL_TIM_Base_Init>
 800404e:	4603      	mov	r3, r0
 8004050:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8004054:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004058:	2b00      	cmp	r3, #0
 800405a:	d11b      	bne.n	8004094 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800405c:	4812      	ldr	r0, [pc, #72]	; (80040a8 <HAL_InitTick+0xe8>)
 800405e:	f005 fbeb 	bl	8009838 <HAL_TIM_Base_Start_IT>
 8004062:	4603      	mov	r3, r0
 8004064:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8004068:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800406c:	2b00      	cmp	r3, #0
 800406e:	d111      	bne.n	8004094 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004070:	2036      	movs	r0, #54	; 0x36
 8004072:	f001 f9c7 	bl	8005404 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b0f      	cmp	r3, #15
 800407a:	d808      	bhi.n	800408e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800407c:	2200      	movs	r2, #0
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	2036      	movs	r0, #54	; 0x36
 8004082:	f001 f9a3 	bl	80053cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004086:	4a0a      	ldr	r2, [pc, #40]	; (80040b0 <HAL_InitTick+0xf0>)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6013      	str	r3, [r2, #0]
 800408c:	e002      	b.n	8004094 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8004094:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8004098:	4618      	mov	r0, r3
 800409a:	3738      	adds	r7, #56	; 0x38
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	40023800 	.word	0x40023800
 80040a4:	431bde83 	.word	0x431bde83
 80040a8:	200006b4 	.word	0x200006b4
 80040ac:	40001000 	.word	0x40001000
 80040b0:	20000038 	.word	0x20000038

080040b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040b4:	b480      	push	{r7}
 80040b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80040b8:	e7fe      	b.n	80040b8 <NMI_Handler+0x4>

080040ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040ba:	b480      	push	{r7}
 80040bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040be:	e7fe      	b.n	80040be <HardFault_Handler+0x4>

080040c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040c4:	e7fe      	b.n	80040c4 <MemManage_Handler+0x4>

080040c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040c6:	b480      	push	{r7}
 80040c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040ca:	e7fe      	b.n	80040ca <BusFault_Handler+0x4>

080040cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040d0:	e7fe      	b.n	80040d0 <UsageFault_Handler+0x4>

080040d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040d2:	b480      	push	{r7}
 80040d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040e4:	bf00      	nop
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040ee:	b480      	push	{r7}
 80040f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040f2:	bf00      	nop
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
	...

0800410c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <TIM6_DAC_IRQHandler+0x20>)
 8004112:	791b      	ldrb	r3, [r3, #4]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d002      	beq.n	8004120 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800411a:	4804      	ldr	r0, [pc, #16]	; (800412c <TIM6_DAC_IRQHandler+0x20>)
 800411c:	f001 f9a2 	bl	8005464 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004120:	4803      	ldr	r0, [pc, #12]	; (8004130 <TIM6_DAC_IRQHandler+0x24>)
 8004122:	f005 fc01 	bl	8009928 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004126:	bf00      	nop
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	2000013c 	.word	0x2000013c
 8004130:	200006b4 	.word	0x200006b4

08004134 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004138:	4802      	ldr	r0, [pc, #8]	; (8004144 <LTDC_IRQHandler+0x10>)
 800413a:	f003 f993 	bl	8007464 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	20000278 	.word	0x20000278

08004148 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800414c:	4802      	ldr	r0, [pc, #8]	; (8004158 <DMA2D_IRQHandler+0x10>)
 800414e:	f001 fd63 	bl	8005c18 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000150 	.word	0x20000150

0800415c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004164:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <_sbrk+0x5c>)
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <_sbrk+0x60>)
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004170:	4b13      	ldr	r3, [pc, #76]	; (80041c0 <_sbrk+0x64>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d102      	bne.n	800417e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004178:	4b11      	ldr	r3, [pc, #68]	; (80041c0 <_sbrk+0x64>)
 800417a:	4a12      	ldr	r2, [pc, #72]	; (80041c4 <_sbrk+0x68>)
 800417c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <_sbrk+0x64>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	429a      	cmp	r2, r3
 800418a:	d207      	bcs.n	800419c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800418c:	f006 fe88 	bl	800aea0 <__errno>
 8004190:	4603      	mov	r3, r0
 8004192:	220c      	movs	r2, #12
 8004194:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004196:	f04f 33ff 	mov.w	r3, #4294967295
 800419a:	e009      	b.n	80041b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800419c:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <_sbrk+0x64>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041a2:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <_sbrk+0x64>)
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4413      	add	r3, r2
 80041aa:	4a05      	ldr	r2, [pc, #20]	; (80041c0 <_sbrk+0x64>)
 80041ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041ae:	68fb      	ldr	r3, [r7, #12]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20050000 	.word	0x20050000
 80041bc:	00000400 	.word	0x00000400
 80041c0:	20000700 	.word	0x20000700
 80041c4:	20000b68 	.word	0x20000b68

080041c8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041c8:	b480      	push	{r7}
 80041ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041cc:	4b06      	ldr	r3, [pc, #24]	; (80041e8 <SystemInit+0x20>)
 80041ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d2:	4a05      	ldr	r2, [pc, #20]	; (80041e8 <SystemInit+0x20>)
 80041d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041dc:	bf00      	nop
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	e000ed00 	.word	0xe000ed00

080041ec <MX_TIM1_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b088      	sub	sp, #32
 80041f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041f2:	f107 0310 	add.w	r3, r7, #16
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	605a      	str	r2, [r3, #4]
 80041fc:	609a      	str	r2, [r3, #8]
 80041fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	2200      	movs	r2, #0
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
 8004208:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800420a:	4b20      	ldr	r3, [pc, #128]	; (800428c <MX_TIM1_Init+0xa0>)
 800420c:	4a20      	ldr	r2, [pc, #128]	; (8004290 <MX_TIM1_Init+0xa4>)
 800420e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004210:	4b1e      	ldr	r3, [pc, #120]	; (800428c <MX_TIM1_Init+0xa0>)
 8004212:	2200      	movs	r2, #0
 8004214:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004216:	4b1d      	ldr	r3, [pc, #116]	; (800428c <MX_TIM1_Init+0xa0>)
 8004218:	2200      	movs	r2, #0
 800421a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800421c:	4b1b      	ldr	r3, [pc, #108]	; (800428c <MX_TIM1_Init+0xa0>)
 800421e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004222:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004224:	4b19      	ldr	r3, [pc, #100]	; (800428c <MX_TIM1_Init+0xa0>)
 8004226:	2200      	movs	r2, #0
 8004228:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800422a:	4b18      	ldr	r3, [pc, #96]	; (800428c <MX_TIM1_Init+0xa0>)
 800422c:	2200      	movs	r2, #0
 800422e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004230:	4b16      	ldr	r3, [pc, #88]	; (800428c <MX_TIM1_Init+0xa0>)
 8004232:	2200      	movs	r2, #0
 8004234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004236:	4815      	ldr	r0, [pc, #84]	; (800428c <MX_TIM1_Init+0xa0>)
 8004238:	f005 faa6 	bl	8009788 <HAL_TIM_Base_Init>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8004242:	f7fd ff57 	bl	80020f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800424a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800424c:	f107 0310 	add.w	r3, r7, #16
 8004250:	4619      	mov	r1, r3
 8004252:	480e      	ldr	r0, [pc, #56]	; (800428c <MX_TIM1_Init+0xa0>)
 8004254:	f005 fc88 	bl	8009b68 <HAL_TIM_ConfigClockSource>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800425e:	f7fd ff49 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004262:	2300      	movs	r3, #0
 8004264:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004266:	2300      	movs	r3, #0
 8004268:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	4619      	mov	r1, r3
 8004272:	4806      	ldr	r0, [pc, #24]	; (800428c <MX_TIM1_Init+0xa0>)
 8004274:	f005 fea4 	bl	8009fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800427e:	f7fd ff39 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004282:	bf00      	nop
 8004284:	3720      	adds	r7, #32
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000704 	.word	0x20000704
 8004290:	40010000 	.word	0x40010000

08004294 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800429a:	f107 0310 	add.w	r3, r7, #16
 800429e:	2200      	movs	r2, #0
 80042a0:	601a      	str	r2, [r3, #0]
 80042a2:	605a      	str	r2, [r3, #4]
 80042a4:	609a      	str	r2, [r3, #8]
 80042a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042a8:	1d3b      	adds	r3, r7, #4
 80042aa:	2200      	movs	r2, #0
 80042ac:	601a      	str	r2, [r3, #0]
 80042ae:	605a      	str	r2, [r3, #4]
 80042b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80042b2:	4b1e      	ldr	r3, [pc, #120]	; (800432c <MX_TIM2_Init+0x98>)
 80042b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80042b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80042ba:	4b1c      	ldr	r3, [pc, #112]	; (800432c <MX_TIM2_Init+0x98>)
 80042bc:	2200      	movs	r2, #0
 80042be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042c0:	4b1a      	ldr	r3, [pc, #104]	; (800432c <MX_TIM2_Init+0x98>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80042c6:	4b19      	ldr	r3, [pc, #100]	; (800432c <MX_TIM2_Init+0x98>)
 80042c8:	f04f 32ff 	mov.w	r2, #4294967295
 80042cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042ce:	4b17      	ldr	r3, [pc, #92]	; (800432c <MX_TIM2_Init+0x98>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042d4:	4b15      	ldr	r3, [pc, #84]	; (800432c <MX_TIM2_Init+0x98>)
 80042d6:	2200      	movs	r2, #0
 80042d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80042da:	4814      	ldr	r0, [pc, #80]	; (800432c <MX_TIM2_Init+0x98>)
 80042dc:	f005 fa54 	bl	8009788 <HAL_TIM_Base_Init>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80042e6:	f7fd ff05 	bl	80020f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80042ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80042f0:	f107 0310 	add.w	r3, r7, #16
 80042f4:	4619      	mov	r1, r3
 80042f6:	480d      	ldr	r0, [pc, #52]	; (800432c <MX_TIM2_Init+0x98>)
 80042f8:	f005 fc36 	bl	8009b68 <HAL_TIM_ConfigClockSource>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004302:	f7fd fef7 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004306:	2300      	movs	r3, #0
 8004308:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800430e:	1d3b      	adds	r3, r7, #4
 8004310:	4619      	mov	r1, r3
 8004312:	4806      	ldr	r0, [pc, #24]	; (800432c <MX_TIM2_Init+0x98>)
 8004314:	f005 fe54 	bl	8009fc0 <HAL_TIMEx_MasterConfigSynchronization>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800431e:	f7fd fee9 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004322:	bf00      	nop
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	20000750 	.word	0x20000750

08004330 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b088      	sub	sp, #32
 8004334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004336:	f107 0310 	add.w	r3, r7, #16
 800433a:	2200      	movs	r2, #0
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	605a      	str	r2, [r3, #4]
 8004340:	609a      	str	r2, [r3, #8]
 8004342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004344:	1d3b      	adds	r3, r7, #4
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	605a      	str	r2, [r3, #4]
 800434c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800434e:	4b1d      	ldr	r3, [pc, #116]	; (80043c4 <MX_TIM3_Init+0x94>)
 8004350:	4a1d      	ldr	r2, [pc, #116]	; (80043c8 <MX_TIM3_Init+0x98>)
 8004352:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <MX_TIM3_Init+0x94>)
 8004356:	2200      	movs	r2, #0
 8004358:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800435a:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <MX_TIM3_Init+0x94>)
 800435c:	2200      	movs	r2, #0
 800435e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004360:	4b18      	ldr	r3, [pc, #96]	; (80043c4 <MX_TIM3_Init+0x94>)
 8004362:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004366:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004368:	4b16      	ldr	r3, [pc, #88]	; (80043c4 <MX_TIM3_Init+0x94>)
 800436a:	2200      	movs	r2, #0
 800436c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <MX_TIM3_Init+0x94>)
 8004370:	2200      	movs	r2, #0
 8004372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004374:	4813      	ldr	r0, [pc, #76]	; (80043c4 <MX_TIM3_Init+0x94>)
 8004376:	f005 fa07 	bl	8009788 <HAL_TIM_Base_Init>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004380:	f7fd feb8 	bl	80020f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004388:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800438a:	f107 0310 	add.w	r3, r7, #16
 800438e:	4619      	mov	r1, r3
 8004390:	480c      	ldr	r0, [pc, #48]	; (80043c4 <MX_TIM3_Init+0x94>)
 8004392:	f005 fbe9 	bl	8009b68 <HAL_TIM_ConfigClockSource>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800439c:	f7fd feaa 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043a0:	2300      	movs	r3, #0
 80043a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80043a8:	1d3b      	adds	r3, r7, #4
 80043aa:	4619      	mov	r1, r3
 80043ac:	4805      	ldr	r0, [pc, #20]	; (80043c4 <MX_TIM3_Init+0x94>)
 80043ae:	f005 fe07 	bl	8009fc0 <HAL_TIMEx_MasterConfigSynchronization>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80043b8:	f7fd fe9c 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80043bc:	bf00      	nop
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	2000079c 	.word	0x2000079c
 80043c8:	40000400 	.word	0x40000400

080043cc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043d2:	f107 0310 	add.w	r3, r7, #16
 80043d6:	2200      	movs	r2, #0
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	605a      	str	r2, [r3, #4]
 80043dc:	609a      	str	r2, [r3, #8]
 80043de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043e0:	1d3b      	adds	r3, r7, #4
 80043e2:	2200      	movs	r2, #0
 80043e4:	601a      	str	r2, [r3, #0]
 80043e6:	605a      	str	r2, [r3, #4]
 80043e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80043ea:	4b1d      	ldr	r3, [pc, #116]	; (8004460 <MX_TIM5_Init+0x94>)
 80043ec:	4a1d      	ldr	r2, [pc, #116]	; (8004464 <MX_TIM5_Init+0x98>)
 80043ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80043f0:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <MX_TIM5_Init+0x94>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043f6:	4b1a      	ldr	r3, [pc, #104]	; (8004460 <MX_TIM5_Init+0x94>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80043fc:	4b18      	ldr	r3, [pc, #96]	; (8004460 <MX_TIM5_Init+0x94>)
 80043fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004402:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004404:	4b16      	ldr	r3, [pc, #88]	; (8004460 <MX_TIM5_Init+0x94>)
 8004406:	2200      	movs	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800440a:	4b15      	ldr	r3, [pc, #84]	; (8004460 <MX_TIM5_Init+0x94>)
 800440c:	2200      	movs	r2, #0
 800440e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8004410:	4813      	ldr	r0, [pc, #76]	; (8004460 <MX_TIM5_Init+0x94>)
 8004412:	f005 f9b9 	bl	8009788 <HAL_TIM_Base_Init>
 8004416:	4603      	mov	r3, r0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800441c:	f7fd fe6a 	bl	80020f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004424:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8004426:	f107 0310 	add.w	r3, r7, #16
 800442a:	4619      	mov	r1, r3
 800442c:	480c      	ldr	r0, [pc, #48]	; (8004460 <MX_TIM5_Init+0x94>)
 800442e:	f005 fb9b 	bl	8009b68 <HAL_TIM_ConfigClockSource>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8004438:	f7fd fe5c 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800443c:	2300      	movs	r3, #0
 800443e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004444:	1d3b      	adds	r3, r7, #4
 8004446:	4619      	mov	r1, r3
 8004448:	4805      	ldr	r0, [pc, #20]	; (8004460 <MX_TIM5_Init+0x94>)
 800444a:	f005 fdb9 	bl	8009fc0 <HAL_TIMEx_MasterConfigSynchronization>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8004454:	f7fd fe4e 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8004458:	bf00      	nop
 800445a:	3720      	adds	r7, #32
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	200007e8 	.word	0x200007e8
 8004464:	40000c00 	.word	0x40000c00

08004468 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800446e:	f107 0310 	add.w	r3, r7, #16
 8004472:	2200      	movs	r2, #0
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	605a      	str	r2, [r3, #4]
 8004478:	609a      	str	r2, [r3, #8]
 800447a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800447c:	1d3b      	adds	r3, r7, #4
 800447e:	2200      	movs	r2, #0
 8004480:	601a      	str	r2, [r3, #0]
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8004486:	4b20      	ldr	r3, [pc, #128]	; (8004508 <MX_TIM8_Init+0xa0>)
 8004488:	4a20      	ldr	r2, [pc, #128]	; (800450c <MX_TIM8_Init+0xa4>)
 800448a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800448c:	4b1e      	ldr	r3, [pc, #120]	; (8004508 <MX_TIM8_Init+0xa0>)
 800448e:	2200      	movs	r2, #0
 8004490:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004492:	4b1d      	ldr	r3, [pc, #116]	; (8004508 <MX_TIM8_Init+0xa0>)
 8004494:	2200      	movs	r2, #0
 8004496:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8004498:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <MX_TIM8_Init+0xa0>)
 800449a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800449e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044a0:	4b19      	ldr	r3, [pc, #100]	; (8004508 <MX_TIM8_Init+0xa0>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80044a6:	4b18      	ldr	r3, [pc, #96]	; (8004508 <MX_TIM8_Init+0xa0>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044ac:	4b16      	ldr	r3, [pc, #88]	; (8004508 <MX_TIM8_Init+0xa0>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80044b2:	4815      	ldr	r0, [pc, #84]	; (8004508 <MX_TIM8_Init+0xa0>)
 80044b4:	f005 f968 	bl	8009788 <HAL_TIM_Base_Init>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 80044be:	f7fd fe19 	bl	80020f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80044c8:	f107 0310 	add.w	r3, r7, #16
 80044cc:	4619      	mov	r1, r3
 80044ce:	480e      	ldr	r0, [pc, #56]	; (8004508 <MX_TIM8_Init+0xa0>)
 80044d0:	f005 fb4a 	bl	8009b68 <HAL_TIM_ConfigClockSource>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80044da:	f7fd fe0b 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044de:	2300      	movs	r3, #0
 80044e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80044e2:	2300      	movs	r3, #0
 80044e4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80044ea:	1d3b      	adds	r3, r7, #4
 80044ec:	4619      	mov	r1, r3
 80044ee:	4806      	ldr	r0, [pc, #24]	; (8004508 <MX_TIM8_Init+0xa0>)
 80044f0:	f005 fd66 	bl	8009fc0 <HAL_TIMEx_MasterConfigSynchronization>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d001      	beq.n	80044fe <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80044fa:	f7fd fdfb 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80044fe:	bf00      	nop
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000834 	.word	0x20000834
 800450c:	40010400 	.word	0x40010400

08004510 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08e      	sub	sp, #56	; 0x38
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004518:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	605a      	str	r2, [r3, #4]
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	60da      	str	r2, [r3, #12]
 8004526:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a3b      	ldr	r2, [pc, #236]	; (800461c <HAL_TIM_Base_MspInit+0x10c>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d10c      	bne.n	800454c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004532:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	4a3a      	ldr	r2, [pc, #232]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6453      	str	r3, [r2, #68]	; 0x44
 800453e:	4b38      	ldr	r3, [pc, #224]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	623b      	str	r3, [r7, #32]
 8004548:	6a3b      	ldr	r3, [r7, #32]

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800454a:	e062      	b.n	8004612 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM2)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004554:	d10c      	bne.n	8004570 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004556:	4b32      	ldr	r3, [pc, #200]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	4a31      	ldr	r2, [pc, #196]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 800455c:	f043 0301 	orr.w	r3, r3, #1
 8004560:	6413      	str	r3, [r2, #64]	; 0x40
 8004562:	4b2f      	ldr	r3, [pc, #188]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	61fb      	str	r3, [r7, #28]
 800456c:	69fb      	ldr	r3, [r7, #28]
}
 800456e:	e050      	b.n	8004612 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM3)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a2b      	ldr	r2, [pc, #172]	; (8004624 <HAL_TIM_Base_MspInit+0x114>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10c      	bne.n	8004594 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800457a:	4b29      	ldr	r3, [pc, #164]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	4a28      	ldr	r2, [pc, #160]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	6413      	str	r3, [r2, #64]	; 0x40
 8004586:	4b26      	ldr	r3, [pc, #152]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	61bb      	str	r3, [r7, #24]
 8004590:	69bb      	ldr	r3, [r7, #24]
}
 8004592:	e03e      	b.n	8004612 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM5)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a23      	ldr	r2, [pc, #140]	; (8004628 <HAL_TIM_Base_MspInit+0x118>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d10c      	bne.n	80045b8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	4a1f      	ldr	r2, [pc, #124]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 80045a4:	f043 0308 	orr.w	r3, r3, #8
 80045a8:	6413      	str	r3, [r2, #64]	; 0x40
 80045aa:	4b1d      	ldr	r3, [pc, #116]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	697b      	ldr	r3, [r7, #20]
}
 80045b6:	e02c      	b.n	8004612 <HAL_TIM_Base_MspInit+0x102>
  else if(tim_baseHandle->Instance==TIM8)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1b      	ldr	r2, [pc, #108]	; (800462c <HAL_TIM_Base_MspInit+0x11c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d127      	bne.n	8004612 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80045c2:	4b17      	ldr	r3, [pc, #92]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 80045c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c6:	4a16      	ldr	r2, [pc, #88]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 80045c8:	f043 0302 	orr.w	r3, r3, #2
 80045cc:	6453      	str	r3, [r2, #68]	; 0x44
 80045ce:	4b14      	ldr	r3, [pc, #80]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 80045d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80045da:	4b11      	ldr	r3, [pc, #68]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	4a10      	ldr	r2, [pc, #64]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 80045e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e4:	6313      	str	r3, [r2, #48]	; 0x30
 80045e6:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_TIM_Base_MspInit+0x110>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045f2:	2304      	movs	r3, #4
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f6:	2302      	movs	r3, #2
 80045f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045fe:	2300      	movs	r3, #0
 8004600:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004602:	2303      	movs	r3, #3
 8004604:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800460a:	4619      	mov	r1, r3
 800460c:	4808      	ldr	r0, [pc, #32]	; (8004630 <HAL_TIM_Base_MspInit+0x120>)
 800460e:	f001 fd41 	bl	8006094 <HAL_GPIO_Init>
}
 8004612:	bf00      	nop
 8004614:	3738      	adds	r7, #56	; 0x38
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40010000 	.word	0x40010000
 8004620:	40023800 	.word	0x40023800
 8004624:	40000400 	.word	0x40000400
 8004628:	40000c00 	.word	0x40000c00
 800462c:	40010400 	.word	0x40010400
 8004630:	40022000 	.word	0x40022000

08004634 <MX_UART7_Init>:
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart6;

/* UART7 init function */
void MX_UART7_Init(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004638:	4b14      	ldr	r3, [pc, #80]	; (800468c <MX_UART7_Init+0x58>)
 800463a:	4a15      	ldr	r2, [pc, #84]	; (8004690 <MX_UART7_Init+0x5c>)
 800463c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800463e:	4b13      	ldr	r3, [pc, #76]	; (800468c <MX_UART7_Init+0x58>)
 8004640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004644:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <MX_UART7_Init+0x58>)
 8004648:	2200      	movs	r2, #0
 800464a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800464c:	4b0f      	ldr	r3, [pc, #60]	; (800468c <MX_UART7_Init+0x58>)
 800464e:	2200      	movs	r2, #0
 8004650:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004652:	4b0e      	ldr	r3, [pc, #56]	; (800468c <MX_UART7_Init+0x58>)
 8004654:	2200      	movs	r2, #0
 8004656:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004658:	4b0c      	ldr	r3, [pc, #48]	; (800468c <MX_UART7_Init+0x58>)
 800465a:	220c      	movs	r2, #12
 800465c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <MX_UART7_Init+0x58>)
 8004660:	2200      	movs	r2, #0
 8004662:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004664:	4b09      	ldr	r3, [pc, #36]	; (800468c <MX_UART7_Init+0x58>)
 8004666:	2200      	movs	r2, #0
 8004668:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800466a:	4b08      	ldr	r3, [pc, #32]	; (800468c <MX_UART7_Init+0x58>)
 800466c:	2200      	movs	r2, #0
 800466e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004670:	4b06      	ldr	r3, [pc, #24]	; (800468c <MX_UART7_Init+0x58>)
 8004672:	2200      	movs	r2, #0
 8004674:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004676:	4805      	ldr	r0, [pc, #20]	; (800468c <MX_UART7_Init+0x58>)
 8004678:	f005 fd4e 	bl	800a118 <HAL_UART_Init>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8004682:	f7fd fd37 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004686:	bf00      	nop
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000880 	.word	0x20000880
 8004690:	40007800 	.word	0x40007800

08004694 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004698:	4b14      	ldr	r3, [pc, #80]	; (80046ec <MX_USART1_UART_Init+0x58>)
 800469a:	4a15      	ldr	r2, [pc, #84]	; (80046f0 <MX_USART1_UART_Init+0x5c>)
 800469c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800469e:	4b13      	ldr	r3, [pc, #76]	; (80046ec <MX_USART1_UART_Init+0x58>)
 80046a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80046a6:	4b11      	ldr	r3, [pc, #68]	; (80046ec <MX_USART1_UART_Init+0x58>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80046ac:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <MX_USART1_UART_Init+0x58>)
 80046ae:	2200      	movs	r2, #0
 80046b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80046b2:	4b0e      	ldr	r3, [pc, #56]	; (80046ec <MX_USART1_UART_Init+0x58>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80046b8:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <MX_USART1_UART_Init+0x58>)
 80046ba:	220c      	movs	r2, #12
 80046bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80046be:	4b0b      	ldr	r3, [pc, #44]	; (80046ec <MX_USART1_UART_Init+0x58>)
 80046c0:	2200      	movs	r2, #0
 80046c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <MX_USART1_UART_Init+0x58>)
 80046c6:	2200      	movs	r2, #0
 80046c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <MX_USART1_UART_Init+0x58>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80046d0:	4b06      	ldr	r3, [pc, #24]	; (80046ec <MX_USART1_UART_Init+0x58>)
 80046d2:	2200      	movs	r2, #0
 80046d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80046d6:	4805      	ldr	r0, [pc, #20]	; (80046ec <MX_USART1_UART_Init+0x58>)
 80046d8:	f005 fd1e 	bl	800a118 <HAL_UART_Init>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d001      	beq.n	80046e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80046e2:	f7fd fd07 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80046e6:	bf00      	nop
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	20000908 	.word	0x20000908
 80046f0:	40011000 	.word	0x40011000

080046f4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80046f8:	4b14      	ldr	r3, [pc, #80]	; (800474c <MX_USART6_UART_Init+0x58>)
 80046fa:	4a15      	ldr	r2, [pc, #84]	; (8004750 <MX_USART6_UART_Init+0x5c>)
 80046fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80046fe:	4b13      	ldr	r3, [pc, #76]	; (800474c <MX_USART6_UART_Init+0x58>)
 8004700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004704:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8004706:	4b11      	ldr	r3, [pc, #68]	; (800474c <MX_USART6_UART_Init+0x58>)
 8004708:	2200      	movs	r2, #0
 800470a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800470c:	4b0f      	ldr	r3, [pc, #60]	; (800474c <MX_USART6_UART_Init+0x58>)
 800470e:	2200      	movs	r2, #0
 8004710:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004712:	4b0e      	ldr	r3, [pc, #56]	; (800474c <MX_USART6_UART_Init+0x58>)
 8004714:	2200      	movs	r2, #0
 8004716:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8004718:	4b0c      	ldr	r3, [pc, #48]	; (800474c <MX_USART6_UART_Init+0x58>)
 800471a:	220c      	movs	r2, #12
 800471c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800471e:	4b0b      	ldr	r3, [pc, #44]	; (800474c <MX_USART6_UART_Init+0x58>)
 8004720:	2200      	movs	r2, #0
 8004722:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <MX_USART6_UART_Init+0x58>)
 8004726:	2200      	movs	r2, #0
 8004728:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800472a:	4b08      	ldr	r3, [pc, #32]	; (800474c <MX_USART6_UART_Init+0x58>)
 800472c:	2200      	movs	r2, #0
 800472e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004730:	4b06      	ldr	r3, [pc, #24]	; (800474c <MX_USART6_UART_Init+0x58>)
 8004732:	2200      	movs	r2, #0
 8004734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8004736:	4805      	ldr	r0, [pc, #20]	; (800474c <MX_USART6_UART_Init+0x58>)
 8004738:	f005 fcee 	bl	800a118 <HAL_UART_Init>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8004742:	f7fd fcd7 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8004746:	bf00      	nop
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000990 	.word	0x20000990
 8004750:	40011400 	.word	0x40011400

08004754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b0b0      	sub	sp, #192	; 0xc0
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800475c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	605a      	str	r2, [r3, #4]
 8004766:	609a      	str	r2, [r3, #8]
 8004768:	60da      	str	r2, [r3, #12]
 800476a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800476c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004770:	2284      	movs	r2, #132	; 0x84
 8004772:	2100      	movs	r1, #0
 8004774:	4618      	mov	r0, r3
 8004776:	f006 fb8b 	bl	800ae90 <memset>
  if(uartHandle->Instance==UART7)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a75      	ldr	r2, [pc, #468]	; (8004954 <HAL_UART_MspInit+0x200>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d13d      	bne.n	8004800 <HAL_UART_MspInit+0xac>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004784:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004788:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 800478a:	2300      	movs	r3, #0
 800478c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004790:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004794:	4618      	mov	r0, r3
 8004796:	f003 fe29 	bl	80083ec <HAL_RCCEx_PeriphCLKConfig>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80047a0:	f7fd fca8 	bl	80020f4 <Error_Handler>
    }

    /* UART7 clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80047a4:	4b6c      	ldr	r3, [pc, #432]	; (8004958 <HAL_UART_MspInit+0x204>)
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	4a6b      	ldr	r2, [pc, #428]	; (8004958 <HAL_UART_MspInit+0x204>)
 80047aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047ae:	6413      	str	r3, [r2, #64]	; 0x40
 80047b0:	4b69      	ldr	r3, [pc, #420]	; (8004958 <HAL_UART_MspInit+0x204>)
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80047bc:	4b66      	ldr	r3, [pc, #408]	; (8004958 <HAL_UART_MspInit+0x204>)
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	4a65      	ldr	r2, [pc, #404]	; (8004958 <HAL_UART_MspInit+0x204>)
 80047c2:	f043 0320 	orr.w	r3, r3, #32
 80047c6:	6313      	str	r3, [r2, #48]	; 0x30
 80047c8:	4b63      	ldr	r3, [pc, #396]	; (8004958 <HAL_UART_MspInit+0x204>)
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	f003 0320 	and.w	r3, r3, #32
 80047d0:	623b      	str	r3, [r7, #32]
 80047d2:	6a3b      	ldr	r3, [r7, #32]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80047d4:	23c0      	movs	r3, #192	; 0xc0
 80047d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047da:	2302      	movs	r3, #2
 80047dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047e0:	2300      	movs	r3, #0
 80047e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e6:	2303      	movs	r3, #3
 80047e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80047ec:	2308      	movs	r3, #8
 80047ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80047f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80047f6:	4619      	mov	r1, r3
 80047f8:	4858      	ldr	r0, [pc, #352]	; (800495c <HAL_UART_MspInit+0x208>)
 80047fa:	f001 fc4b 	bl	8006094 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80047fe:	e0a4      	b.n	800494a <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a56      	ldr	r2, [pc, #344]	; (8004960 <HAL_UART_MspInit+0x20c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d15d      	bne.n	80048c6 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800480a:	2340      	movs	r3, #64	; 0x40
 800480c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800480e:	2300      	movs	r3, #0
 8004810:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004812:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004816:	4618      	mov	r0, r3
 8004818:	f003 fde8 	bl	80083ec <HAL_RCCEx_PeriphCLKConfig>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8004822:	f7fd fc67 	bl	80020f4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004826:	4b4c      	ldr	r3, [pc, #304]	; (8004958 <HAL_UART_MspInit+0x204>)
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	4a4b      	ldr	r2, [pc, #300]	; (8004958 <HAL_UART_MspInit+0x204>)
 800482c:	f043 0310 	orr.w	r3, r3, #16
 8004830:	6453      	str	r3, [r2, #68]	; 0x44
 8004832:	4b49      	ldr	r3, [pc, #292]	; (8004958 <HAL_UART_MspInit+0x204>)
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	f003 0310 	and.w	r3, r3, #16
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800483e:	4b46      	ldr	r3, [pc, #280]	; (8004958 <HAL_UART_MspInit+0x204>)
 8004840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004842:	4a45      	ldr	r2, [pc, #276]	; (8004958 <HAL_UART_MspInit+0x204>)
 8004844:	f043 0302 	orr.w	r3, r3, #2
 8004848:	6313      	str	r3, [r2, #48]	; 0x30
 800484a:	4b43      	ldr	r3, [pc, #268]	; (8004958 <HAL_UART_MspInit+0x204>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484e:	f003 0302 	and.w	r3, r3, #2
 8004852:	61bb      	str	r3, [r7, #24]
 8004854:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004856:	4b40      	ldr	r3, [pc, #256]	; (8004958 <HAL_UART_MspInit+0x204>)
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	4a3f      	ldr	r2, [pc, #252]	; (8004958 <HAL_UART_MspInit+0x204>)
 800485c:	f043 0301 	orr.w	r3, r3, #1
 8004860:	6313      	str	r3, [r2, #48]	; 0x30
 8004862:	4b3d      	ldr	r3, [pc, #244]	; (8004958 <HAL_UART_MspInit+0x204>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800486e:	2380      	movs	r3, #128	; 0x80
 8004870:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004874:	2302      	movs	r3, #2
 8004876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487a:	2300      	movs	r3, #0
 800487c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004886:	2307      	movs	r3, #7
 8004888:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800488c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004890:	4619      	mov	r1, r3
 8004892:	4834      	ldr	r0, [pc, #208]	; (8004964 <HAL_UART_MspInit+0x210>)
 8004894:	f001 fbfe 	bl	8006094 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800489c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a0:	2302      	movs	r3, #2
 80048a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048ac:	2300      	movs	r3, #0
 80048ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048b2:	2307      	movs	r3, #7
 80048b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80048b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80048bc:	4619      	mov	r1, r3
 80048be:	482a      	ldr	r0, [pc, #168]	; (8004968 <HAL_UART_MspInit+0x214>)
 80048c0:	f001 fbe8 	bl	8006094 <HAL_GPIO_Init>
}
 80048c4:	e041      	b.n	800494a <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART6)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a28      	ldr	r2, [pc, #160]	; (800496c <HAL_UART_MspInit+0x218>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d13c      	bne.n	800494a <HAL_UART_MspInit+0x1f6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80048d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80048d4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80048d6:	2300      	movs	r3, #0
 80048d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048e0:	4618      	mov	r0, r3
 80048e2:	f003 fd83 	bl	80083ec <HAL_RCCEx_PeriphCLKConfig>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80048ec:	f7fd fc02 	bl	80020f4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80048f0:	4b19      	ldr	r3, [pc, #100]	; (8004958 <HAL_UART_MspInit+0x204>)
 80048f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f4:	4a18      	ldr	r2, [pc, #96]	; (8004958 <HAL_UART_MspInit+0x204>)
 80048f6:	f043 0320 	orr.w	r3, r3, #32
 80048fa:	6453      	str	r3, [r2, #68]	; 0x44
 80048fc:	4b16      	ldr	r3, [pc, #88]	; (8004958 <HAL_UART_MspInit+0x204>)
 80048fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <HAL_UART_MspInit+0x204>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	4a12      	ldr	r2, [pc, #72]	; (8004958 <HAL_UART_MspInit+0x204>)
 800490e:	f043 0304 	orr.w	r3, r3, #4
 8004912:	6313      	str	r3, [r2, #48]	; 0x30
 8004914:	4b10      	ldr	r3, [pc, #64]	; (8004958 <HAL_UART_MspInit+0x204>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	f003 0304 	and.w	r3, r3, #4
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8004920:	23c0      	movs	r3, #192	; 0xc0
 8004922:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004926:	2302      	movs	r3, #2
 8004928:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	2300      	movs	r3, #0
 800492e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004932:	2303      	movs	r3, #3
 8004934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004938:	2308      	movs	r3, #8
 800493a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800493e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004942:	4619      	mov	r1, r3
 8004944:	480a      	ldr	r0, [pc, #40]	; (8004970 <HAL_UART_MspInit+0x21c>)
 8004946:	f001 fba5 	bl	8006094 <HAL_GPIO_Init>
}
 800494a:	bf00      	nop
 800494c:	37c0      	adds	r7, #192	; 0xc0
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40007800 	.word	0x40007800
 8004958:	40023800 	.word	0x40023800
 800495c:	40021400 	.word	0x40021400
 8004960:	40011000 	.word	0x40011000
 8004964:	40020400 	.word	0x40020400
 8004968:	40020000 	.word	0x40020000
 800496c:	40011400 	.word	0x40011400
 8004970:	40020800 	.word	0x40020800

08004974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004978:	480d      	ldr	r0, [pc, #52]	; (80049b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800497a:	490e      	ldr	r1, [pc, #56]	; (80049b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800497c:	4a0e      	ldr	r2, [pc, #56]	; (80049b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800497e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004980:	e002      	b.n	8004988 <LoopCopyDataInit>

08004982 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004982:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004984:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004986:	3304      	adds	r3, #4

08004988 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004988:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800498a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800498c:	d3f9      	bcc.n	8004982 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800498e:	4a0b      	ldr	r2, [pc, #44]	; (80049bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004990:	4c0b      	ldr	r4, [pc, #44]	; (80049c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004992:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004994:	e001      	b.n	800499a <LoopFillZerobss>

08004996 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004996:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004998:	3204      	adds	r2, #4

0800499a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800499a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800499c:	d3fb      	bcc.n	8004996 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800499e:	f7ff fc13 	bl	80041c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049a2:	f006 fa83 	bl	800aeac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049a6:	f7fd f919 	bl	8001bdc <main>
  bx  lr    
 80049aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049ac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80049b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049b4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80049b8:	08043714 	.word	0x08043714
  ldr r2, =_sbss
 80049bc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80049c0:	20000b64 	.word	0x20000b64

080049c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049c4:	e7fe      	b.n	80049c4 <ADC_IRQHandler>

080049c6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80049ca:	2003      	movs	r0, #3
 80049cc:	f000 fcf3 	bl	80053b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80049d0:	200f      	movs	r0, #15
 80049d2:	f7ff faf5 	bl	8003fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049d6:	f7ff facf 	bl	8003f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	bd80      	pop	{r7, pc}

080049e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049e4:	4b06      	ldr	r3, [pc, #24]	; (8004a00 <HAL_IncTick+0x20>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	4b06      	ldr	r3, [pc, #24]	; (8004a04 <HAL_IncTick+0x24>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4413      	add	r3, r2
 80049f0:	4a04      	ldr	r2, [pc, #16]	; (8004a04 <HAL_IncTick+0x24>)
 80049f2:	6013      	str	r3, [r2, #0]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	2000003c 	.word	0x2000003c
 8004a04:	20000a18 	.word	0x20000a18

08004a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8004a0c:	4b03      	ldr	r3, [pc, #12]	; (8004a1c <HAL_GetTick+0x14>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr
 8004a1a:	bf00      	nop
 8004a1c:	20000a18 	.word	0x20000a18

08004a20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b084      	sub	sp, #16
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a28:	f7ff ffee 	bl	8004a08 <HAL_GetTick>
 8004a2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a38:	d005      	beq.n	8004a46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a3a:	4b0a      	ldr	r3, [pc, #40]	; (8004a64 <HAL_Delay+0x44>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004a46:	bf00      	nop
 8004a48:	f7ff ffde 	bl	8004a08 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d8f7      	bhi.n	8004a48 <HAL_Delay+0x28>
  {
  }
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	2000003c 	.word	0x2000003c

08004a68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a70:	2300      	movs	r3, #0
 8004a72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e031      	b.n	8004ae2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d109      	bne.n	8004a9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7fb fe3c 	bl	8000704 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d116      	bne.n	8004ad4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aaa:	4b10      	ldr	r3, [pc, #64]	; (8004aec <HAL_ADC_Init+0x84>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	f043 0202 	orr.w	r2, r3, #2
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fad6 	bl	8005068 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f023 0303 	bic.w	r3, r3, #3
 8004aca:	f043 0201 	orr.w	r2, r3, #1
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	641a      	str	r2, [r3, #64]	; 0x40
 8004ad2:	e001      	b.n	8004ad8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	ffffeefd 	.word	0xffffeefd

08004af0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d101      	bne.n	8004b0a <HAL_ADC_Start+0x1a>
 8004b06:	2302      	movs	r3, #2
 8004b08:	e0ad      	b.n	8004c66 <HAL_ADC_Start+0x176>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b01      	cmp	r3, #1
 8004b1e:	d018      	beq.n	8004b52 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689a      	ldr	r2, [r3, #8]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004b30:	4b50      	ldr	r3, [pc, #320]	; (8004c74 <HAL_ADC_Start+0x184>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a50      	ldr	r2, [pc, #320]	; (8004c78 <HAL_ADC_Start+0x188>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	0c9a      	lsrs	r2, r3, #18
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	4413      	add	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004b44:	e002      	b.n	8004b4c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f9      	bne.n	8004b46 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d175      	bne.n	8004c4c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b64:	4b45      	ldr	r3, [pc, #276]	; (8004c7c <HAL_ADC_Start+0x18c>)
 8004b66:	4013      	ands	r3, r2
 8004b68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b86:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b9a:	d106      	bne.n	8004baa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba0:	f023 0206 	bic.w	r2, r3, #6
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	645a      	str	r2, [r3, #68]	; 0x44
 8004ba8:	e002      	b.n	8004bb0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004bc0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004bc2:	4b2f      	ldr	r3, [pc, #188]	; (8004c80 <HAL_ADC_Start+0x190>)
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f003 031f 	and.w	r3, r3, #31
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10f      	bne.n	8004bee <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d143      	bne.n	8004c64 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bea:	609a      	str	r2, [r3, #8]
 8004bec:	e03a      	b.n	8004c64 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a24      	ldr	r2, [pc, #144]	; (8004c84 <HAL_ADC_Start+0x194>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d10e      	bne.n	8004c16 <HAL_ADC_Start+0x126>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d107      	bne.n	8004c16 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689a      	ldr	r2, [r3, #8]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c14:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004c16:	4b1a      	ldr	r3, [pc, #104]	; (8004c80 <HAL_ADC_Start+0x190>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f003 0310 	and.w	r3, r3, #16
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d120      	bne.n	8004c64 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <HAL_ADC_Start+0x198>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d11b      	bne.n	8004c64 <HAL_ADC_Start+0x174>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d114      	bne.n	8004c64 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c48:	609a      	str	r2, [r3, #8]
 8004c4a:	e00b      	b.n	8004c64 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c50:	f043 0210 	orr.w	r2, r3, #16
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c5c:	f043 0201 	orr.w	r2, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004c64:	2300      	movs	r3, #0
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20000034 	.word	0x20000034
 8004c78:	431bde83 	.word	0x431bde83
 8004c7c:	fffff8fe 	.word	0xfffff8fe
 8004c80:	40012300 	.word	0x40012300
 8004c84:	40012000 	.word	0x40012000
 8004c88:	40012200 	.word	0x40012200

08004c8c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ca8:	d113      	bne.n	8004cd2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cb8:	d10b      	bne.n	8004cd2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f043 0220 	orr.w	r2, r3, #32
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e063      	b.n	8004d9a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004cd2:	f7ff fe99 	bl	8004a08 <HAL_GetTick>
 8004cd6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004cd8:	e021      	b.n	8004d1e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d01d      	beq.n	8004d1e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d007      	beq.n	8004cf8 <HAL_ADC_PollForConversion+0x6c>
 8004ce8:	f7ff fe8e 	bl	8004a08 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d212      	bcs.n	8004d1e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d00b      	beq.n	8004d1e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	f043 0204 	orr.w	r2, r3, #4
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e03d      	b.n	8004d9a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d1d6      	bne.n	8004cda <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f06f 0212 	mvn.w	r2, #18
 8004d34:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d123      	bne.n	8004d98 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d11f      	bne.n	8004d98 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d006      	beq.n	8004d74 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d111      	bne.n	8004d98 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d105      	bne.n	8004d98 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d90:	f043 0201 	orr.w	r2, r3, #1
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004d98:	2300      	movs	r3, #0
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004da2:	b480      	push	{r7}
 8004da4:	b083      	sub	sp, #12
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x1c>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e136      	b.n	8005046 <HAL_ADC_ConfigChannel+0x28a>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b09      	cmp	r3, #9
 8004de6:	d93a      	bls.n	8004e5e <HAL_ADC_ConfigChannel+0xa2>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004df0:	d035      	beq.n	8004e5e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68d9      	ldr	r1, [r3, #12]
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	461a      	mov	r2, r3
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	3b1e      	subs	r3, #30
 8004e08:	2207      	movs	r2, #7
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43da      	mvns	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	400a      	ands	r2, r1
 8004e16:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a8d      	ldr	r2, [pc, #564]	; (8005054 <HAL_ADC_ConfigChannel+0x298>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d10a      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68d9      	ldr	r1, [r3, #12]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	061a      	lsls	r2, r3, #24
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e36:	e035      	b.n	8004ea4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68d9      	ldr	r1, [r3, #12]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	4618      	mov	r0, r3
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	4403      	add	r3, r0
 8004e50:	3b1e      	subs	r3, #30
 8004e52:	409a      	lsls	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e5c:	e022      	b.n	8004ea4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6919      	ldr	r1, [r3, #16]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4413      	add	r3, r2
 8004e72:	2207      	movs	r2, #7
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	43da      	mvns	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	400a      	ands	r2, r1
 8004e80:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6919      	ldr	r1, [r3, #16]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	4618      	mov	r0, r3
 8004e94:	4603      	mov	r3, r0
 8004e96:	005b      	lsls	r3, r3, #1
 8004e98:	4403      	add	r3, r0
 8004e9a:	409a      	lsls	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	2b06      	cmp	r3, #6
 8004eaa:	d824      	bhi.n	8004ef6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	4413      	add	r3, r2
 8004ebc:	3b05      	subs	r3, #5
 8004ebe:	221f      	movs	r2, #31
 8004ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec4:	43da      	mvns	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	400a      	ands	r2, r1
 8004ecc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	4618      	mov	r0, r3
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	3b05      	subs	r3, #5
 8004ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	635a      	str	r2, [r3, #52]	; 0x34
 8004ef4:	e04c      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b0c      	cmp	r3, #12
 8004efc:	d824      	bhi.n	8004f48 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	685a      	ldr	r2, [r3, #4]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3b23      	subs	r3, #35	; 0x23
 8004f10:	221f      	movs	r2, #31
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	43da      	mvns	r2, r3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	400a      	ands	r2, r1
 8004f1e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	4613      	mov	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4413      	add	r3, r2
 8004f38:	3b23      	subs	r3, #35	; 0x23
 8004f3a:	fa00 f203 	lsl.w	r2, r0, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	631a      	str	r2, [r3, #48]	; 0x30
 8004f46:	e023      	b.n	8004f90 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	4413      	add	r3, r2
 8004f58:	3b41      	subs	r3, #65	; 0x41
 8004f5a:	221f      	movs	r2, #31
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	43da      	mvns	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	400a      	ands	r2, r1
 8004f68:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	4618      	mov	r0, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685a      	ldr	r2, [r3, #4]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	3b41      	subs	r3, #65	; 0x41
 8004f84:	fa00 f203 	lsl.w	r2, r0, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	430a      	orrs	r2, r1
 8004f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a30      	ldr	r2, [pc, #192]	; (8005058 <HAL_ADC_ConfigChannel+0x29c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d10a      	bne.n	8004fb0 <HAL_ADC_ConfigChannel+0x1f4>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fa2:	d105      	bne.n	8004fb0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004fa4:	4b2d      	ldr	r3, [pc, #180]	; (800505c <HAL_ADC_ConfigChannel+0x2a0>)
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	4a2c      	ldr	r2, [pc, #176]	; (800505c <HAL_ADC_ConfigChannel+0x2a0>)
 8004faa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004fae:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a28      	ldr	r2, [pc, #160]	; (8005058 <HAL_ADC_ConfigChannel+0x29c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d10f      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x21e>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2b12      	cmp	r3, #18
 8004fc0:	d10b      	bne.n	8004fda <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004fc2:	4b26      	ldr	r3, [pc, #152]	; (800505c <HAL_ADC_ConfigChannel+0x2a0>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	4a25      	ldr	r2, [pc, #148]	; (800505c <HAL_ADC_ConfigChannel+0x2a0>)
 8004fc8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004fcc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004fce:	4b23      	ldr	r3, [pc, #140]	; (800505c <HAL_ADC_ConfigChannel+0x2a0>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	4a22      	ldr	r2, [pc, #136]	; (800505c <HAL_ADC_ConfigChannel+0x2a0>)
 8004fd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004fd8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a1e      	ldr	r2, [pc, #120]	; (8005058 <HAL_ADC_ConfigChannel+0x29c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d12b      	bne.n	800503c <HAL_ADC_ConfigChannel+0x280>
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1a      	ldr	r2, [pc, #104]	; (8005054 <HAL_ADC_ConfigChannel+0x298>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d003      	beq.n	8004ff6 <HAL_ADC_ConfigChannel+0x23a>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b11      	cmp	r3, #17
 8004ff4:	d122      	bne.n	800503c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004ff6:	4b19      	ldr	r3, [pc, #100]	; (800505c <HAL_ADC_ConfigChannel+0x2a0>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4a18      	ldr	r2, [pc, #96]	; (800505c <HAL_ADC_ConfigChannel+0x2a0>)
 8004ffc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005000:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005002:	4b16      	ldr	r3, [pc, #88]	; (800505c <HAL_ADC_ConfigChannel+0x2a0>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	4a15      	ldr	r2, [pc, #84]	; (800505c <HAL_ADC_ConfigChannel+0x2a0>)
 8005008:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800500c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a10      	ldr	r2, [pc, #64]	; (8005054 <HAL_ADC_ConfigChannel+0x298>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d111      	bne.n	800503c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005018:	4b11      	ldr	r3, [pc, #68]	; (8005060 <HAL_ADC_ConfigChannel+0x2a4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a11      	ldr	r2, [pc, #68]	; (8005064 <HAL_ADC_ConfigChannel+0x2a8>)
 800501e:	fba2 2303 	umull	r2, r3, r2, r3
 8005022:	0c9a      	lsrs	r2, r3, #18
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800502e:	e002      	b.n	8005036 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	3b01      	subs	r3, #1
 8005034:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1f9      	bne.n	8005030 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	10000012 	.word	0x10000012
 8005058:	40012000 	.word	0x40012000
 800505c:	40012300 	.word	0x40012300
 8005060:	20000034 	.word	0x20000034
 8005064:	431bde83 	.word	0x431bde83

08005068 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005070:	4b78      	ldr	r3, [pc, #480]	; (8005254 <ADC_Init+0x1ec>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	4a77      	ldr	r2, [pc, #476]	; (8005254 <ADC_Init+0x1ec>)
 8005076:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800507a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800507c:	4b75      	ldr	r3, [pc, #468]	; (8005254 <ADC_Init+0x1ec>)
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	4973      	ldr	r1, [pc, #460]	; (8005254 <ADC_Init+0x1ec>)
 8005086:	4313      	orrs	r3, r2
 8005088:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005098:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	6859      	ldr	r1, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	021a      	lsls	r2, r3, #8
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	430a      	orrs	r2, r1
 80050ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80050bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6859      	ldr	r1, [r3, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	430a      	orrs	r2, r1
 80050ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	689a      	ldr	r2, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6899      	ldr	r1, [r3, #8]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	4a58      	ldr	r2, [pc, #352]	; (8005258 <ADC_Init+0x1f0>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d022      	beq.n	8005142 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800510a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6899      	ldr	r1, [r3, #8]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800512c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6899      	ldr	r1, [r3, #8]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	609a      	str	r2, [r3, #8]
 8005140:	e00f      	b.n	8005162 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005150:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005160:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0202 	bic.w	r2, r2, #2
 8005170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6899      	ldr	r1, [r3, #8]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	005a      	lsls	r2, r3, #1
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	430a      	orrs	r2, r1
 8005184:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d01b      	beq.n	80051c8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800519e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80051ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6859      	ldr	r1, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	3b01      	subs	r3, #1
 80051bc:	035a      	lsls	r2, r3, #13
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	605a      	str	r2, [r3, #4]
 80051c6:	e007      	b.n	80051d8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80051e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	051a      	lsls	r2, r3, #20
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689a      	ldr	r2, [r3, #8]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800520c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6899      	ldr	r1, [r3, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800521a:	025a      	lsls	r2, r3, #9
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	689a      	ldr	r2, [r3, #8]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005232:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	6899      	ldr	r1, [r3, #8]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	029a      	lsls	r2, r3, #10
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	609a      	str	r2, [r3, #8]
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr
 8005254:	40012300 	.word	0x40012300
 8005258:	0f000001 	.word	0x0f000001

0800525c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800526c:	4b0b      	ldr	r3, [pc, #44]	; (800529c <__NVIC_SetPriorityGrouping+0x40>)
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005272:	68ba      	ldr	r2, [r7, #8]
 8005274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005278:	4013      	ands	r3, r2
 800527a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005284:	4b06      	ldr	r3, [pc, #24]	; (80052a0 <__NVIC_SetPriorityGrouping+0x44>)
 8005286:	4313      	orrs	r3, r2
 8005288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800528a:	4a04      	ldr	r2, [pc, #16]	; (800529c <__NVIC_SetPriorityGrouping+0x40>)
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	60d3      	str	r3, [r2, #12]
}
 8005290:	bf00      	nop
 8005292:	3714      	adds	r7, #20
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr
 800529c:	e000ed00 	.word	0xe000ed00
 80052a0:	05fa0000 	.word	0x05fa0000

080052a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052a8:	4b04      	ldr	r3, [pc, #16]	; (80052bc <__NVIC_GetPriorityGrouping+0x18>)
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	0a1b      	lsrs	r3, r3, #8
 80052ae:	f003 0307 	and.w	r3, r3, #7
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr
 80052bc:	e000ed00 	.word	0xe000ed00

080052c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	4603      	mov	r3, r0
 80052c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	db0b      	blt.n	80052ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	f003 021f 	and.w	r2, r3, #31
 80052d8:	4907      	ldr	r1, [pc, #28]	; (80052f8 <__NVIC_EnableIRQ+0x38>)
 80052da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052de:	095b      	lsrs	r3, r3, #5
 80052e0:	2001      	movs	r0, #1
 80052e2:	fa00 f202 	lsl.w	r2, r0, r2
 80052e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	e000e100 	.word	0xe000e100

080052fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	4603      	mov	r3, r0
 8005304:	6039      	str	r1, [r7, #0]
 8005306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800530c:	2b00      	cmp	r3, #0
 800530e:	db0a      	blt.n	8005326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	b2da      	uxtb	r2, r3
 8005314:	490c      	ldr	r1, [pc, #48]	; (8005348 <__NVIC_SetPriority+0x4c>)
 8005316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800531a:	0112      	lsls	r2, r2, #4
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	440b      	add	r3, r1
 8005320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005324:	e00a      	b.n	800533c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	b2da      	uxtb	r2, r3
 800532a:	4908      	ldr	r1, [pc, #32]	; (800534c <__NVIC_SetPriority+0x50>)
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	3b04      	subs	r3, #4
 8005334:	0112      	lsls	r2, r2, #4
 8005336:	b2d2      	uxtb	r2, r2
 8005338:	440b      	add	r3, r1
 800533a:	761a      	strb	r2, [r3, #24]
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	e000e100 	.word	0xe000e100
 800534c:	e000ed00 	.word	0xe000ed00

08005350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005350:	b480      	push	{r7}
 8005352:	b089      	sub	sp, #36	; 0x24
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	f1c3 0307 	rsb	r3, r3, #7
 800536a:	2b04      	cmp	r3, #4
 800536c:	bf28      	it	cs
 800536e:	2304      	movcs	r3, #4
 8005370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	3304      	adds	r3, #4
 8005376:	2b06      	cmp	r3, #6
 8005378:	d902      	bls.n	8005380 <NVIC_EncodePriority+0x30>
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	3b03      	subs	r3, #3
 800537e:	e000      	b.n	8005382 <NVIC_EncodePriority+0x32>
 8005380:	2300      	movs	r3, #0
 8005382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005384:	f04f 32ff 	mov.w	r2, #4294967295
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43da      	mvns	r2, r3
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	401a      	ands	r2, r3
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005398:	f04f 31ff 	mov.w	r1, #4294967295
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	fa01 f303 	lsl.w	r3, r1, r3
 80053a2:	43d9      	mvns	r1, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053a8:	4313      	orrs	r3, r2
         );
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3724      	adds	r7, #36	; 0x24
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053b6:	b580      	push	{r7, lr}
 80053b8:	b082      	sub	sp, #8
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff ff4c 	bl	800525c <__NVIC_SetPriorityGrouping>
}
 80053c4:	bf00      	nop
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	4603      	mov	r3, r0
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80053da:	2300      	movs	r3, #0
 80053dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053de:	f7ff ff61 	bl	80052a4 <__NVIC_GetPriorityGrouping>
 80053e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	68b9      	ldr	r1, [r7, #8]
 80053e8:	6978      	ldr	r0, [r7, #20]
 80053ea:	f7ff ffb1 	bl	8005350 <NVIC_EncodePriority>
 80053ee:	4602      	mov	r2, r0
 80053f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053f4:	4611      	mov	r1, r2
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7ff ff80 	bl	80052fc <__NVIC_SetPriority>
}
 80053fc:	bf00      	nop
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800540e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005412:	4618      	mov	r0, r3
 8005414:	f7ff ff54 	bl	80052c0 <__NVIC_EnableIRQ>
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d101      	bne.n	8005432 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e014      	b.n	800545c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	791b      	ldrb	r3, [r3, #4]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	d105      	bne.n	8005448 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2200      	movs	r2, #0
 8005440:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fb f9f6 	bl	8000834 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800545a:	2300      	movs	r3, #0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800547a:	d120      	bne.n	80054be <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005482:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800548a:	d118      	bne.n	80054be <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2204      	movs	r2, #4
 8005490:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f043 0201 	orr.w	r2, r3, #1
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054b6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f82d 	bl	8005518 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054cc:	d120      	bne.n	8005510 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054dc:	d118      	bne.n	8005510 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2204      	movs	r2, #4
 80054e2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	691b      	ldr	r3, [r3, #16]
 80054e8:	f043 0202 	orr.w	r2, r3, #2
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80054f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005508:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f85d 	bl	80055ca <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005510:	bf00      	nop
 8005512:	3708      	adds	r7, #8
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}

08005518 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	795b      	ldrb	r3, [r3, #5]
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_DAC_ConfigChannel+0x18>
 8005540:	2302      	movs	r3, #2
 8005542:	e03c      	b.n	80055be <HAL_DAC_ConfigChannel+0x92>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2202      	movs	r2, #2
 800554e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43db      	mvns	r3, r3
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4013      	ands	r3, r2
 800556c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4313      	orrs	r3, r2
 8005578:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f003 0310 	and.w	r3, r3, #16
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	fa02 f303 	lsl.w	r3, r2, r3
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6819      	ldr	r1, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	22c0      	movs	r2, #192	; 0xc0
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43da      	mvns	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	400a      	ands	r2, r1
 80055ae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2201      	movs	r2, #1
 80055b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
	...

080055e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055ec:	f7ff fa0c 	bl	8004a08 <HAL_GetTick>
 80055f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	e099      	b.n	8005730 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0201 	bic.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800561c:	e00f      	b.n	800563e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800561e:	f7ff f9f3 	bl	8004a08 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b05      	cmp	r3, #5
 800562a:	d908      	bls.n	800563e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2220      	movs	r2, #32
 8005630:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2203      	movs	r2, #3
 8005636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e078      	b.n	8005730 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d1e8      	bne.n	800561e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4b38      	ldr	r3, [pc, #224]	; (8005738 <HAL_DMA_Init+0x158>)
 8005658:	4013      	ands	r3, r2
 800565a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800566a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005676:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005682:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a1b      	ldr	r3, [r3, #32]
 8005688:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005694:	2b04      	cmp	r3, #4
 8005696:	d107      	bne.n	80056a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a0:	4313      	orrs	r3, r2
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	f023 0307 	bic.w	r3, r3, #7
 80056be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d117      	bne.n	8005702 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	4313      	orrs	r3, r2
 80056da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00e      	beq.n	8005702 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f8bd 	bl	8005864 <DMA_CheckFifoParam>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d008      	beq.n	8005702 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2240      	movs	r2, #64	; 0x40
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2201      	movs	r2, #1
 80056fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80056fe:	2301      	movs	r3, #1
 8005700:	e016      	b.n	8005730 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f874 	bl	80057f8 <DMA_CalcBaseAndBitshift>
 8005710:	4603      	mov	r3, r0
 8005712:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005718:	223f      	movs	r2, #63	; 0x3f
 800571a:	409a      	lsls	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2201      	movs	r2, #1
 800572a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3718      	adds	r7, #24
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	f010803f 	.word	0xf010803f

0800573c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d101      	bne.n	800574e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e050      	b.n	80057f0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005754:	b2db      	uxtb	r3, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d101      	bne.n	800575e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800575a:	2302      	movs	r3, #2
 800575c:	e048      	b.n	80057f0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 0201 	bic.w	r2, r2, #1
 800576c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2200      	movs	r2, #0
 800577c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	2200      	movs	r2, #0
 800578c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2200      	movs	r2, #0
 8005794:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2221      	movs	r2, #33	; 0x21
 800579c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 f82a 	bl	80057f8 <DMA_CalcBaseAndBitshift>
 80057a4:	4603      	mov	r3, r0
 80057a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ac:	223f      	movs	r2, #63	; 0x3f
 80057ae:	409a      	lsls	r2, r3
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	b2db      	uxtb	r3, r3
 8005806:	3b10      	subs	r3, #16
 8005808:	4a13      	ldr	r2, [pc, #76]	; (8005858 <DMA_CalcBaseAndBitshift+0x60>)
 800580a:	fba2 2303 	umull	r2, r3, r2, r3
 800580e:	091b      	lsrs	r3, r3, #4
 8005810:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005812:	4a12      	ldr	r2, [pc, #72]	; (800585c <DMA_CalcBaseAndBitshift+0x64>)
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	4413      	add	r3, r2
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2b03      	cmp	r3, #3
 8005824:	d908      	bls.n	8005838 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	461a      	mov	r2, r3
 800582c:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <DMA_CalcBaseAndBitshift+0x68>)
 800582e:	4013      	ands	r3, r2
 8005830:	1d1a      	adds	r2, r3, #4
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	659a      	str	r2, [r3, #88]	; 0x58
 8005836:	e006      	b.n	8005846 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	4b08      	ldr	r3, [pc, #32]	; (8005860 <DMA_CalcBaseAndBitshift+0x68>)
 8005840:	4013      	ands	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	aaaaaaab 	.word	0xaaaaaaab
 800585c:	080436c8 	.word	0x080436c8
 8005860:	fffffc00 	.word	0xfffffc00

08005864 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d11f      	bne.n	80058be <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b03      	cmp	r3, #3
 8005882:	d856      	bhi.n	8005932 <DMA_CheckFifoParam+0xce>
 8005884:	a201      	add	r2, pc, #4	; (adr r2, 800588c <DMA_CheckFifoParam+0x28>)
 8005886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800588a:	bf00      	nop
 800588c:	0800589d 	.word	0x0800589d
 8005890:	080058af 	.word	0x080058af
 8005894:	0800589d 	.word	0x0800589d
 8005898:	08005933 	.word	0x08005933
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d046      	beq.n	8005936 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058ac:	e043      	b.n	8005936 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80058b6:	d140      	bne.n	800593a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058bc:	e03d      	b.n	800593a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c6:	d121      	bne.n	800590c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b03      	cmp	r3, #3
 80058cc:	d837      	bhi.n	800593e <DMA_CheckFifoParam+0xda>
 80058ce:	a201      	add	r2, pc, #4	; (adr r2, 80058d4 <DMA_CheckFifoParam+0x70>)
 80058d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d4:	080058e5 	.word	0x080058e5
 80058d8:	080058eb 	.word	0x080058eb
 80058dc:	080058e5 	.word	0x080058e5
 80058e0:	080058fd 	.word	0x080058fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	73fb      	strb	r3, [r7, #15]
      break;
 80058e8:	e030      	b.n	800594c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d025      	beq.n	8005942 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058fa:	e022      	b.n	8005942 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005900:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005904:	d11f      	bne.n	8005946 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005906:	2301      	movs	r3, #1
 8005908:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800590a:	e01c      	b.n	8005946 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b02      	cmp	r3, #2
 8005910:	d903      	bls.n	800591a <DMA_CheckFifoParam+0xb6>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	2b03      	cmp	r3, #3
 8005916:	d003      	beq.n	8005920 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005918:	e018      	b.n	800594c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	73fb      	strb	r3, [r7, #15]
      break;
 800591e:	e015      	b.n	800594c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005924:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00e      	beq.n	800594a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
      break;
 8005930:	e00b      	b.n	800594a <DMA_CheckFifoParam+0xe6>
      break;
 8005932:	bf00      	nop
 8005934:	e00a      	b.n	800594c <DMA_CheckFifoParam+0xe8>
      break;
 8005936:	bf00      	nop
 8005938:	e008      	b.n	800594c <DMA_CheckFifoParam+0xe8>
      break;
 800593a:	bf00      	nop
 800593c:	e006      	b.n	800594c <DMA_CheckFifoParam+0xe8>
      break;
 800593e:	bf00      	nop
 8005940:	e004      	b.n	800594c <DMA_CheckFifoParam+0xe8>
      break;
 8005942:	bf00      	nop
 8005944:	e002      	b.n	800594c <DMA_CheckFifoParam+0xe8>
      break;   
 8005946:	bf00      	nop
 8005948:	e000      	b.n	800594c <DMA_CheckFifoParam+0xe8>
      break;
 800594a:	bf00      	nop
    }
  } 
  
  return status; 
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop

0800595c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e039      	b.n	80059e2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fa ffd0 	bl	8000928 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685a      	ldr	r2, [r3, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	430a      	orrs	r2, r1
 80059a4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ac:	f023 0107 	bic.w	r1, r3, #7
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059c2:	4b0a      	ldr	r3, [pc, #40]	; (80059ec <HAL_DMA2D_Init+0x90>)
 80059c4:	4013      	ands	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	68d1      	ldr	r1, [r2, #12]
 80059ca:	687a      	ldr	r2, [r7, #4]
 80059cc:	6812      	ldr	r2, [r2, #0]
 80059ce:	430b      	orrs	r3, r1
 80059d0:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	ffffc000 	.word	0xffffc000

080059f0 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af02      	add	r7, sp, #8
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d101      	bne.n	8005a0c <HAL_DMA2D_Start+0x1c>
 8005a08:	2302      	movs	r3, #2
 8005a0a:	e018      	b.n	8005a3e <HAL_DMA2D_Start+0x4e>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f000 fa98 	bl	8005f5c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f042 0201 	orr.w	r2, r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b086      	sub	sp, #24
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d056      	beq.n	8005b10 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a62:	f7fe ffd1 	bl	8004a08 <HAL_GetTick>
 8005a66:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005a68:	e04b      	b.n	8005b02 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d023      	beq.n	8005ac4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d005      	beq.n	8005a92 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8a:	f043 0202 	orr.w	r2, r3, #2
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d005      	beq.n	8005aa8 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa0:	f043 0201 	orr.w	r2, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	2221      	movs	r2, #33	; 0x21
 8005aae:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2204      	movs	r2, #4
 8005ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	e0a5      	b.n	8005c10 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aca:	d01a      	beq.n	8005b02 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005acc:	f7fe ff9c 	bl	8004a08 <HAL_GetTick>
 8005ad0:	4602      	mov	r2, r0
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	1ad3      	subs	r3, r2, r3
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d302      	bcc.n	8005ae2 <HAL_DMA2D_PollForTransfer+0x9c>
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10f      	bne.n	8005b02 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae6:	f043 0220 	orr.w	r2, r3, #32
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2203      	movs	r2, #3
 8005af2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e086      	b.n	8005c10 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 0302 	and.w	r3, r3, #2
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d0ac      	beq.n	8005a6a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	f003 0320 	and.w	r3, r3, #32
 8005b1a:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b22:	f003 0320 	and.w	r3, r3, #32
 8005b26:	693a      	ldr	r2, [r7, #16]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d061      	beq.n	8005bf6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005b32:	f7fe ff69 	bl	8004a08 <HAL_GetTick>
 8005b36:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005b38:	e056      	b.n	8005be8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d02e      	beq.n	8005baa <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f003 0308 	and.w	r3, r3, #8
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d005      	beq.n	8005b62 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5a:	f043 0204 	orr.w	r2, r3, #4
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f003 0320 	and.w	r3, r3, #32
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d005      	beq.n	8005b78 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b70:	f043 0202 	orr.w	r2, r3, #2
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b86:	f043 0201 	orr.w	r2, r3, #1
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2229      	movs	r2, #41	; 0x29
 8005b94:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2204      	movs	r2, #4
 8005b9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	e032      	b.n	8005c10 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d01a      	beq.n	8005be8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005bb2:	f7fe ff29 	bl	8004a08 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d302      	bcc.n	8005bc8 <HAL_DMA2D_PollForTransfer+0x182>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d10f      	bne.n	8005be8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bcc:	f043 0220 	orr.w	r2, r3, #32
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2203      	movs	r2, #3
 8005bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005be4:	2303      	movs	r3, #3
 8005be6:	e013      	b.n	8005c10 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d0a1      	beq.n	8005b3a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2212      	movs	r2, #18
 8005bfc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3718      	adds	r7, #24
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f003 0301 	and.w	r3, r3, #1
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d026      	beq.n	8005c88 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d021      	beq.n	8005c88 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c52:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c58:	f043 0201 	orr.w	r2, r3, #1
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2201      	movs	r2, #1
 8005c66:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2204      	movs	r2, #4
 8005c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	695b      	ldr	r3, [r3, #20]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d003      	beq.n	8005c88 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d026      	beq.n	8005ce0 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d021      	beq.n	8005ce0 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005caa:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb8:	f043 0202 	orr.w	r2, r3, #2
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2204      	movs	r2, #4
 8005cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d003      	beq.n	8005ce0 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	695b      	ldr	r3, [r3, #20]
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d026      	beq.n	8005d38 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d021      	beq.n	8005d38 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d02:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2208      	movs	r2, #8
 8005d0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d10:	f043 0204 	orr.w	r2, r3, #4
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2204      	movs	r2, #4
 8005d1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d003      	beq.n	8005d38 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	695b      	ldr	r3, [r3, #20]
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f003 0304 	and.w	r3, r3, #4
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d013      	beq.n	8005d6a <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00e      	beq.n	8005d6a <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681a      	ldr	r2, [r3, #0]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d5a:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2204      	movs	r2, #4
 8005d62:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f000 f853 	bl	8005e10 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f003 0302 	and.w	r3, r3, #2
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d024      	beq.n	8005dbe <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d01f      	beq.n	8005dbe <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005d8c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2202      	movs	r2, #2
 8005d94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f003 0310 	and.w	r3, r3, #16
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d01f      	beq.n	8005e08 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d01a      	beq.n	8005e08 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005de0:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2210      	movs	r2, #16
 8005de8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f80e 	bl	8005e24 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8005e08:	bf00      	nop
 8005e0a:	3710      	adds	r7, #16
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b087      	sub	sp, #28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_DMA2D_ConfigLayer+0x20>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e079      	b.n	8005f4c <HAL_DMA2D_ConfigLayer+0x114>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	3318      	adds	r3, #24
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	4413      	add	r3, r2
 8005e72:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	041b      	lsls	r3, r3, #16
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005e82:	4b35      	ldr	r3, [pc, #212]	; (8005f58 <HAL_DMA2D_ConfigLayer+0x120>)
 8005e84:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b0a      	cmp	r3, #10
 8005e8c:	d003      	beq.n	8005e96 <HAL_DMA2D_ConfigLayer+0x5e>
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2b09      	cmp	r3, #9
 8005e94:	d107      	bne.n	8005ea6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005e96:	693b      	ldr	r3, [r7, #16]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	e005      	b.n	8005eb2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	061b      	lsls	r3, r3, #24
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d120      	bne.n	8005efa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	ea02 0103 	and.w	r1, r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	6812      	ldr	r2, [r2, #0]
 8005ed8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	2b0a      	cmp	r3, #10
 8005ee0:	d003      	beq.n	8005eea <HAL_DMA2D_ConfigLayer+0xb2>
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2b09      	cmp	r3, #9
 8005ee8:	d127      	bne.n	8005f3a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	68da      	ldr	r2, [r3, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005ef6:	629a      	str	r2, [r3, #40]	; 0x28
 8005ef8:	e01f      	b.n	8005f3a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	69da      	ldr	r2, [r3, #28]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	43db      	mvns	r3, r3
 8005f04:	ea02 0103 	and.w	r1, r2, r3
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	430a      	orrs	r2, r1
 8005f10:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	6812      	ldr	r2, [r2, #0]
 8005f1a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	2b0a      	cmp	r3, #10
 8005f22:	d003      	beq.n	8005f2c <HAL_DMA2D_ConfigLayer+0xf4>
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	2b09      	cmp	r3, #9
 8005f2a:	d106      	bne.n	8005f3a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005f38:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	ff03000f 	.word	0xff03000f

08005f5c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b08b      	sub	sp, #44	; 0x2c
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f70:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	041a      	lsls	r2, r3, #16
 8005f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	430a      	orrs	r2, r1
 8005f82:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f94:	d174      	bne.n	8006080 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005f9c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fa4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005fac:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d108      	bne.n	8005fce <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8005fbc:	69ba      	ldr	r2, [r7, #24]
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	627b      	str	r3, [r7, #36]	; 0x24
 8005fcc:	e053      	b.n	8006076 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d106      	bne.n	8005fe4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005fd6:	69ba      	ldr	r2, [r7, #24]
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
 8005fe2:	e048      	b.n	8006076 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d111      	bne.n	8006010 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	0cdb      	lsrs	r3, r3, #19
 8005ff0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005ff2:	69bb      	ldr	r3, [r7, #24]
 8005ff4:	0a9b      	lsrs	r3, r3, #10
 8005ff6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	08db      	lsrs	r3, r3, #3
 8005ffc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	015a      	lsls	r2, r3, #5
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	02db      	lsls	r3, r3, #11
 8006006:	4313      	orrs	r3, r2
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	4313      	orrs	r3, r2
 800600c:	627b      	str	r3, [r7, #36]	; 0x24
 800600e:	e032      	b.n	8006076 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	2b03      	cmp	r3, #3
 8006016:	d117      	bne.n	8006048 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	0fdb      	lsrs	r3, r3, #31
 800601c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	0cdb      	lsrs	r3, r3, #19
 8006022:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	0adb      	lsrs	r3, r3, #11
 8006028:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	08db      	lsrs	r3, r3, #3
 800602e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	015a      	lsls	r2, r3, #5
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	029b      	lsls	r3, r3, #10
 8006038:	431a      	orrs	r2, r3
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	03db      	lsls	r3, r3, #15
 800603e:	4313      	orrs	r3, r2
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	4313      	orrs	r3, r2
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
 8006046:	e016      	b.n	8006076 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	0f1b      	lsrs	r3, r3, #28
 800604c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	0d1b      	lsrs	r3, r3, #20
 8006052:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	0b1b      	lsrs	r3, r3, #12
 8006058:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	091b      	lsrs	r3, r3, #4
 800605e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	011a      	lsls	r2, r3, #4
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	021b      	lsls	r3, r3, #8
 8006068:	431a      	orrs	r2, r3
 800606a:	6a3b      	ldr	r3, [r7, #32]
 800606c:	031b      	lsls	r3, r3, #12
 800606e:	4313      	orrs	r3, r2
 8006070:	697a      	ldr	r2, [r7, #20]
 8006072:	4313      	orrs	r3, r2
 8006074:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800607c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800607e:	e003      	b.n	8006088 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	60da      	str	r2, [r3, #12]
}
 8006088:	bf00      	nop
 800608a:	372c      	adds	r7, #44	; 0x2c
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006094:	b480      	push	{r7}
 8006096:	b089      	sub	sp, #36	; 0x24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
 800609c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80060a2:	2300      	movs	r3, #0
 80060a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80060a6:	2300      	movs	r3, #0
 80060a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80060ae:	2300      	movs	r3, #0
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	e175      	b.n	80063a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80060b4:	2201      	movs	r2, #1
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4013      	ands	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	f040 8164 	bne.w	800639a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d005      	beq.n	80060ea <HAL_GPIO_Init+0x56>
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f003 0303 	and.w	r3, r3, #3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d130      	bne.n	800614c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	2203      	movs	r2, #3
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	43db      	mvns	r3, r3
 80060fc:	69ba      	ldr	r2, [r7, #24]
 80060fe:	4013      	ands	r3, r2
 8006100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68da      	ldr	r2, [r3, #12]
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4313      	orrs	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006120:	2201      	movs	r2, #1
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	fa02 f303 	lsl.w	r3, r2, r3
 8006128:	43db      	mvns	r3, r3
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	4013      	ands	r3, r2
 800612e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	091b      	lsrs	r3, r3, #4
 8006136:	f003 0201 	and.w	r2, r3, #1
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	4313      	orrs	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f003 0303 	and.w	r3, r3, #3
 8006154:	2b03      	cmp	r3, #3
 8006156:	d017      	beq.n	8006188 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	2203      	movs	r2, #3
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	43db      	mvns	r3, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4013      	ands	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	4313      	orrs	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f003 0303 	and.w	r3, r3, #3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d123      	bne.n	80061dc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	08da      	lsrs	r2, r3, #3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3208      	adds	r2, #8
 800619c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	f003 0307 	and.w	r3, r3, #7
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	220f      	movs	r2, #15
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	43db      	mvns	r3, r3
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	4013      	ands	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	08da      	lsrs	r2, r3, #3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3208      	adds	r2, #8
 80061d6:	69b9      	ldr	r1, [r7, #24]
 80061d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	2203      	movs	r2, #3
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	43db      	mvns	r3, r3
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	4013      	ands	r3, r2
 80061f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f003 0203 	and.w	r2, r3, #3
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4313      	orrs	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 80be 	beq.w	800639a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800621e:	4b66      	ldr	r3, [pc, #408]	; (80063b8 <HAL_GPIO_Init+0x324>)
 8006220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006222:	4a65      	ldr	r2, [pc, #404]	; (80063b8 <HAL_GPIO_Init+0x324>)
 8006224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006228:	6453      	str	r3, [r2, #68]	; 0x44
 800622a:	4b63      	ldr	r3, [pc, #396]	; (80063b8 <HAL_GPIO_Init+0x324>)
 800622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006236:	4a61      	ldr	r2, [pc, #388]	; (80063bc <HAL_GPIO_Init+0x328>)
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	089b      	lsrs	r3, r3, #2
 800623c:	3302      	adds	r3, #2
 800623e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006242:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	f003 0303 	and.w	r3, r3, #3
 800624a:	009b      	lsls	r3, r3, #2
 800624c:	220f      	movs	r2, #15
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	43db      	mvns	r3, r3
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	4013      	ands	r3, r2
 8006258:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a58      	ldr	r2, [pc, #352]	; (80063c0 <HAL_GPIO_Init+0x32c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d037      	beq.n	80062d2 <HAL_GPIO_Init+0x23e>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a57      	ldr	r2, [pc, #348]	; (80063c4 <HAL_GPIO_Init+0x330>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d031      	beq.n	80062ce <HAL_GPIO_Init+0x23a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a56      	ldr	r2, [pc, #344]	; (80063c8 <HAL_GPIO_Init+0x334>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d02b      	beq.n	80062ca <HAL_GPIO_Init+0x236>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a55      	ldr	r2, [pc, #340]	; (80063cc <HAL_GPIO_Init+0x338>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d025      	beq.n	80062c6 <HAL_GPIO_Init+0x232>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a54      	ldr	r2, [pc, #336]	; (80063d0 <HAL_GPIO_Init+0x33c>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d01f      	beq.n	80062c2 <HAL_GPIO_Init+0x22e>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a53      	ldr	r2, [pc, #332]	; (80063d4 <HAL_GPIO_Init+0x340>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d019      	beq.n	80062be <HAL_GPIO_Init+0x22a>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a52      	ldr	r2, [pc, #328]	; (80063d8 <HAL_GPIO_Init+0x344>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d013      	beq.n	80062ba <HAL_GPIO_Init+0x226>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a51      	ldr	r2, [pc, #324]	; (80063dc <HAL_GPIO_Init+0x348>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d00d      	beq.n	80062b6 <HAL_GPIO_Init+0x222>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a50      	ldr	r2, [pc, #320]	; (80063e0 <HAL_GPIO_Init+0x34c>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d007      	beq.n	80062b2 <HAL_GPIO_Init+0x21e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	4a4f      	ldr	r2, [pc, #316]	; (80063e4 <HAL_GPIO_Init+0x350>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d101      	bne.n	80062ae <HAL_GPIO_Init+0x21a>
 80062aa:	2309      	movs	r3, #9
 80062ac:	e012      	b.n	80062d4 <HAL_GPIO_Init+0x240>
 80062ae:	230a      	movs	r3, #10
 80062b0:	e010      	b.n	80062d4 <HAL_GPIO_Init+0x240>
 80062b2:	2308      	movs	r3, #8
 80062b4:	e00e      	b.n	80062d4 <HAL_GPIO_Init+0x240>
 80062b6:	2307      	movs	r3, #7
 80062b8:	e00c      	b.n	80062d4 <HAL_GPIO_Init+0x240>
 80062ba:	2306      	movs	r3, #6
 80062bc:	e00a      	b.n	80062d4 <HAL_GPIO_Init+0x240>
 80062be:	2305      	movs	r3, #5
 80062c0:	e008      	b.n	80062d4 <HAL_GPIO_Init+0x240>
 80062c2:	2304      	movs	r3, #4
 80062c4:	e006      	b.n	80062d4 <HAL_GPIO_Init+0x240>
 80062c6:	2303      	movs	r3, #3
 80062c8:	e004      	b.n	80062d4 <HAL_GPIO_Init+0x240>
 80062ca:	2302      	movs	r3, #2
 80062cc:	e002      	b.n	80062d4 <HAL_GPIO_Init+0x240>
 80062ce:	2301      	movs	r3, #1
 80062d0:	e000      	b.n	80062d4 <HAL_GPIO_Init+0x240>
 80062d2:	2300      	movs	r3, #0
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	f002 0203 	and.w	r2, r2, #3
 80062da:	0092      	lsls	r2, r2, #2
 80062dc:	4093      	lsls	r3, r2
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80062e4:	4935      	ldr	r1, [pc, #212]	; (80063bc <HAL_GPIO_Init+0x328>)
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	089b      	lsrs	r3, r3, #2
 80062ea:	3302      	adds	r3, #2
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062f2:	4b3d      	ldr	r3, [pc, #244]	; (80063e8 <HAL_GPIO_Init+0x354>)
 80062f4:	689b      	ldr	r3, [r3, #8]
 80062f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	43db      	mvns	r3, r3
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	4013      	ands	r3, r2
 8006300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d003      	beq.n	8006316 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006316:	4a34      	ldr	r2, [pc, #208]	; (80063e8 <HAL_GPIO_Init+0x354>)
 8006318:	69bb      	ldr	r3, [r7, #24]
 800631a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800631c:	4b32      	ldr	r3, [pc, #200]	; (80063e8 <HAL_GPIO_Init+0x354>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	43db      	mvns	r3, r3
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	4013      	ands	r3, r2
 800632a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	4313      	orrs	r3, r2
 800633e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006340:	4a29      	ldr	r2, [pc, #164]	; (80063e8 <HAL_GPIO_Init+0x354>)
 8006342:	69bb      	ldr	r3, [r7, #24]
 8006344:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006346:	4b28      	ldr	r3, [pc, #160]	; (80063e8 <HAL_GPIO_Init+0x354>)
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	43db      	mvns	r3, r3
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	4013      	ands	r3, r2
 8006354:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4313      	orrs	r3, r2
 8006368:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800636a:	4a1f      	ldr	r2, [pc, #124]	; (80063e8 <HAL_GPIO_Init+0x354>)
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006370:	4b1d      	ldr	r3, [pc, #116]	; (80063e8 <HAL_GPIO_Init+0x354>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	43db      	mvns	r3, r3
 800637a:	69ba      	ldr	r2, [r7, #24]
 800637c:	4013      	ands	r3, r2
 800637e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	4313      	orrs	r3, r2
 8006392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006394:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <HAL_GPIO_Init+0x354>)
 8006396:	69bb      	ldr	r3, [r7, #24]
 8006398:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	3301      	adds	r3, #1
 800639e:	61fb      	str	r3, [r7, #28]
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	2b0f      	cmp	r3, #15
 80063a4:	f67f ae86 	bls.w	80060b4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80063a8:	bf00      	nop
 80063aa:	bf00      	nop
 80063ac:	3724      	adds	r7, #36	; 0x24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40023800 	.word	0x40023800
 80063bc:	40013800 	.word	0x40013800
 80063c0:	40020000 	.word	0x40020000
 80063c4:	40020400 	.word	0x40020400
 80063c8:	40020800 	.word	0x40020800
 80063cc:	40020c00 	.word	0x40020c00
 80063d0:	40021000 	.word	0x40021000
 80063d4:	40021400 	.word	0x40021400
 80063d8:	40021800 	.word	0x40021800
 80063dc:	40021c00 	.word	0x40021c00
 80063e0:	40022000 	.word	0x40022000
 80063e4:	40022400 	.word	0x40022400
 80063e8:	40013c00 	.word	0x40013c00

080063ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b087      	sub	sp, #28
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80063f6:	2300      	movs	r3, #0
 80063f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80063fe:	2300      	movs	r3, #0
 8006400:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006402:	2300      	movs	r3, #0
 8006404:	617b      	str	r3, [r7, #20]
 8006406:	e0d9      	b.n	80065bc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006408:	2201      	movs	r2, #1
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	fa02 f303 	lsl.w	r3, r2, r3
 8006410:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006412:	683a      	ldr	r2, [r7, #0]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	4013      	ands	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800641a:	68fa      	ldr	r2, [r7, #12]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	429a      	cmp	r2, r3
 8006420:	f040 80c9 	bne.w	80065b6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006424:	4a6b      	ldr	r2, [pc, #428]	; (80065d4 <HAL_GPIO_DeInit+0x1e8>)
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	089b      	lsrs	r3, r3, #2
 800642a:	3302      	adds	r3, #2
 800642c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006430:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	220f      	movs	r2, #15
 800643c:	fa02 f303 	lsl.w	r3, r2, r3
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	4013      	ands	r3, r2
 8006444:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a63      	ldr	r2, [pc, #396]	; (80065d8 <HAL_GPIO_DeInit+0x1ec>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d037      	beq.n	80064be <HAL_GPIO_DeInit+0xd2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a62      	ldr	r2, [pc, #392]	; (80065dc <HAL_GPIO_DeInit+0x1f0>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d031      	beq.n	80064ba <HAL_GPIO_DeInit+0xce>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a61      	ldr	r2, [pc, #388]	; (80065e0 <HAL_GPIO_DeInit+0x1f4>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d02b      	beq.n	80064b6 <HAL_GPIO_DeInit+0xca>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a60      	ldr	r2, [pc, #384]	; (80065e4 <HAL_GPIO_DeInit+0x1f8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d025      	beq.n	80064b2 <HAL_GPIO_DeInit+0xc6>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a5f      	ldr	r2, [pc, #380]	; (80065e8 <HAL_GPIO_DeInit+0x1fc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01f      	beq.n	80064ae <HAL_GPIO_DeInit+0xc2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a5e      	ldr	r2, [pc, #376]	; (80065ec <HAL_GPIO_DeInit+0x200>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d019      	beq.n	80064aa <HAL_GPIO_DeInit+0xbe>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a5d      	ldr	r2, [pc, #372]	; (80065f0 <HAL_GPIO_DeInit+0x204>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d013      	beq.n	80064a6 <HAL_GPIO_DeInit+0xba>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a5c      	ldr	r2, [pc, #368]	; (80065f4 <HAL_GPIO_DeInit+0x208>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00d      	beq.n	80064a2 <HAL_GPIO_DeInit+0xb6>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a5b      	ldr	r2, [pc, #364]	; (80065f8 <HAL_GPIO_DeInit+0x20c>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d007      	beq.n	800649e <HAL_GPIO_DeInit+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a5a      	ldr	r2, [pc, #360]	; (80065fc <HAL_GPIO_DeInit+0x210>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d101      	bne.n	800649a <HAL_GPIO_DeInit+0xae>
 8006496:	2309      	movs	r3, #9
 8006498:	e012      	b.n	80064c0 <HAL_GPIO_DeInit+0xd4>
 800649a:	230a      	movs	r3, #10
 800649c:	e010      	b.n	80064c0 <HAL_GPIO_DeInit+0xd4>
 800649e:	2308      	movs	r3, #8
 80064a0:	e00e      	b.n	80064c0 <HAL_GPIO_DeInit+0xd4>
 80064a2:	2307      	movs	r3, #7
 80064a4:	e00c      	b.n	80064c0 <HAL_GPIO_DeInit+0xd4>
 80064a6:	2306      	movs	r3, #6
 80064a8:	e00a      	b.n	80064c0 <HAL_GPIO_DeInit+0xd4>
 80064aa:	2305      	movs	r3, #5
 80064ac:	e008      	b.n	80064c0 <HAL_GPIO_DeInit+0xd4>
 80064ae:	2304      	movs	r3, #4
 80064b0:	e006      	b.n	80064c0 <HAL_GPIO_DeInit+0xd4>
 80064b2:	2303      	movs	r3, #3
 80064b4:	e004      	b.n	80064c0 <HAL_GPIO_DeInit+0xd4>
 80064b6:	2302      	movs	r3, #2
 80064b8:	e002      	b.n	80064c0 <HAL_GPIO_DeInit+0xd4>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <HAL_GPIO_DeInit+0xd4>
 80064be:	2300      	movs	r3, #0
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	f002 0203 	and.w	r2, r2, #3
 80064c6:	0092      	lsls	r2, r2, #2
 80064c8:	4093      	lsls	r3, r2
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d132      	bne.n	8006536 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80064d0:	4b4b      	ldr	r3, [pc, #300]	; (8006600 <HAL_GPIO_DeInit+0x214>)
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	43db      	mvns	r3, r3
 80064d8:	4949      	ldr	r1, [pc, #292]	; (8006600 <HAL_GPIO_DeInit+0x214>)
 80064da:	4013      	ands	r3, r2
 80064dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80064de:	4b48      	ldr	r3, [pc, #288]	; (8006600 <HAL_GPIO_DeInit+0x214>)
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	43db      	mvns	r3, r3
 80064e6:	4946      	ldr	r1, [pc, #280]	; (8006600 <HAL_GPIO_DeInit+0x214>)
 80064e8:	4013      	ands	r3, r2
 80064ea:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80064ec:	4b44      	ldr	r3, [pc, #272]	; (8006600 <HAL_GPIO_DeInit+0x214>)
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	43db      	mvns	r3, r3
 80064f4:	4942      	ldr	r1, [pc, #264]	; (8006600 <HAL_GPIO_DeInit+0x214>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80064fa:	4b41      	ldr	r3, [pc, #260]	; (8006600 <HAL_GPIO_DeInit+0x214>)
 80064fc:	689a      	ldr	r2, [r3, #8]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	43db      	mvns	r3, r3
 8006502:	493f      	ldr	r1, [pc, #252]	; (8006600 <HAL_GPIO_DeInit+0x214>)
 8006504:	4013      	ands	r3, r2
 8006506:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f003 0303 	and.w	r3, r3, #3
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	220f      	movs	r2, #15
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006518:	4a2e      	ldr	r2, [pc, #184]	; (80065d4 <HAL_GPIO_DeInit+0x1e8>)
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	089b      	lsrs	r3, r3, #2
 800651e:	3302      	adds	r3, #2
 8006520:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	43da      	mvns	r2, r3
 8006528:	482a      	ldr	r0, [pc, #168]	; (80065d4 <HAL_GPIO_DeInit+0x1e8>)
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	089b      	lsrs	r3, r3, #2
 800652e:	400a      	ands	r2, r1
 8006530:	3302      	adds	r3, #2
 8006532:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	2103      	movs	r1, #3
 8006540:	fa01 f303 	lsl.w	r3, r1, r3
 8006544:	43db      	mvns	r3, r3
 8006546:	401a      	ands	r2, r3
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	08da      	lsrs	r2, r3, #3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	3208      	adds	r2, #8
 8006554:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	f003 0307 	and.w	r3, r3, #7
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	220f      	movs	r2, #15
 8006562:	fa02 f303 	lsl.w	r3, r2, r3
 8006566:	43db      	mvns	r3, r3
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	08d2      	lsrs	r2, r2, #3
 800656c:	4019      	ands	r1, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3208      	adds	r2, #8
 8006572:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68da      	ldr	r2, [r3, #12]
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	005b      	lsls	r3, r3, #1
 800657e:	2103      	movs	r1, #3
 8006580:	fa01 f303 	lsl.w	r3, r1, r3
 8006584:	43db      	mvns	r3, r3
 8006586:	401a      	ands	r2, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	2101      	movs	r1, #1
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	fa01 f303 	lsl.w	r3, r1, r3
 8006598:	43db      	mvns	r3, r3
 800659a:	401a      	ands	r2, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	689a      	ldr	r2, [r3, #8]
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	2103      	movs	r1, #3
 80065aa:	fa01 f303 	lsl.w	r3, r1, r3
 80065ae:	43db      	mvns	r3, r3
 80065b0:	401a      	ands	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	3301      	adds	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2b0f      	cmp	r3, #15
 80065c0:	f67f af22 	bls.w	8006408 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	371c      	adds	r7, #28
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40013800 	.word	0x40013800
 80065d8:	40020000 	.word	0x40020000
 80065dc:	40020400 	.word	0x40020400
 80065e0:	40020800 	.word	0x40020800
 80065e4:	40020c00 	.word	0x40020c00
 80065e8:	40021000 	.word	0x40021000
 80065ec:	40021400 	.word	0x40021400
 80065f0:	40021800 	.word	0x40021800
 80065f4:	40021c00 	.word	0x40021c00
 80065f8:	40022000 	.word	0x40022000
 80065fc:	40022400 	.word	0x40022400
 8006600:	40013c00 	.word	0x40013c00

08006604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
 800660c:	460b      	mov	r3, r1
 800660e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	887b      	ldrh	r3, [r7, #2]
 8006616:	4013      	ands	r3, r2
 8006618:	2b00      	cmp	r3, #0
 800661a:	d002      	beq.n	8006622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800661c:	2301      	movs	r3, #1
 800661e:	73fb      	strb	r3, [r7, #15]
 8006620:	e001      	b.n	8006626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006626:	7bfb      	ldrb	r3, [r7, #15]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	807b      	strh	r3, [r7, #2]
 8006640:	4613      	mov	r3, r2
 8006642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006644:	787b      	ldrb	r3, [r7, #1]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800664a:	887a      	ldrh	r2, [r7, #2]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006650:	e003      	b.n	800665a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006652:	887b      	ldrh	r3, [r7, #2]
 8006654:	041a      	lsls	r2, r3, #16
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	619a      	str	r2, [r3, #24]
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
	...

08006668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d101      	bne.n	800667a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e07f      	b.n	800677a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006680:	b2db      	uxtb	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d106      	bne.n	8006694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fb f83c 	bl	800170c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2224      	movs	r2, #36	; 0x24
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0201 	bic.w	r2, r2, #1
 80066aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685a      	ldr	r2, [r3, #4]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d107      	bne.n	80066e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	689a      	ldr	r2, [r3, #8]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066de:	609a      	str	r2, [r3, #8]
 80066e0:	e006      	b.n	80066f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	689a      	ldr	r2, [r3, #8]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80066ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d104      	bne.n	8006702 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006700:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6859      	ldr	r1, [r3, #4]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	4b1d      	ldr	r3, [pc, #116]	; (8006784 <HAL_I2C_Init+0x11c>)
 800670e:	430b      	orrs	r3, r1
 8006710:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68da      	ldr	r2, [r3, #12]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006720:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69d9      	ldr	r1, [r3, #28]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a1a      	ldr	r2, [r3, #32]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f042 0201 	orr.w	r2, r2, #1
 800675a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2200      	movs	r2, #0
 8006760:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	02008000 	.word	0x02008000

08006788 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d101      	bne.n	800679a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e021      	b.n	80067de <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2224      	movs	r2, #36	; 0x24
 800679e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f022 0201 	bic.w	r2, r2, #1
 80067b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f7fb f852 	bl	800185c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2200      	movs	r2, #0
 80067d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
	...

080067e8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af02      	add	r7, sp, #8
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	4608      	mov	r0, r1
 80067f2:	4611      	mov	r1, r2
 80067f4:	461a      	mov	r2, r3
 80067f6:	4603      	mov	r3, r0
 80067f8:	817b      	strh	r3, [r7, #10]
 80067fa:	460b      	mov	r3, r1
 80067fc:	813b      	strh	r3, [r7, #8]
 80067fe:	4613      	mov	r3, r2
 8006800:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b20      	cmp	r3, #32
 800680c:	f040 80f9 	bne.w	8006a02 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d002      	beq.n	800681c <HAL_I2C_Mem_Write+0x34>
 8006816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006818:	2b00      	cmp	r3, #0
 800681a:	d105      	bne.n	8006828 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006822:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e0ed      	b.n	8006a04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800682e:	2b01      	cmp	r3, #1
 8006830:	d101      	bne.n	8006836 <HAL_I2C_Mem_Write+0x4e>
 8006832:	2302      	movs	r3, #2
 8006834:	e0e6      	b.n	8006a04 <HAL_I2C_Mem_Write+0x21c>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800683e:	f7fe f8e3 	bl	8004a08 <HAL_GetTick>
 8006842:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	2319      	movs	r3, #25
 800684a:	2201      	movs	r2, #1
 800684c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006850:	68f8      	ldr	r0, [r7, #12]
 8006852:	f000 fad1 	bl	8006df8 <I2C_WaitOnFlagUntilTimeout>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0d1      	b.n	8006a04 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2221      	movs	r2, #33	; 0x21
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2240      	movs	r2, #64	; 0x40
 800686c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	6a3a      	ldr	r2, [r7, #32]
 800687a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2200      	movs	r2, #0
 8006886:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006888:	88f8      	ldrh	r0, [r7, #6]
 800688a:	893a      	ldrh	r2, [r7, #8]
 800688c:	8979      	ldrh	r1, [r7, #10]
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	4603      	mov	r3, r0
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f9e1 	bl	8006c60 <I2C_RequestMemoryWrite>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d005      	beq.n	80068b0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e0a9      	b.n	8006a04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	2bff      	cmp	r3, #255	; 0xff
 80068b8:	d90e      	bls.n	80068d8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	22ff      	movs	r2, #255	; 0xff
 80068be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	8979      	ldrh	r1, [r7, #10]
 80068c8:	2300      	movs	r3, #0
 80068ca:	9300      	str	r3, [sp, #0]
 80068cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 fc2d 	bl	8007130 <I2C_TransferConfig>
 80068d6:	e00f      	b.n	80068f8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068dc:	b29a      	uxth	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	8979      	ldrh	r1, [r7, #10]
 80068ea:	2300      	movs	r3, #0
 80068ec:	9300      	str	r3, [sp, #0]
 80068ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068f2:	68f8      	ldr	r0, [r7, #12]
 80068f4:	f000 fc1c 	bl	8007130 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068f8:	697a      	ldr	r2, [r7, #20]
 80068fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f000 fabb 	bl	8006e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d001      	beq.n	800690c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e07b      	b.n	8006a04 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006910:	781a      	ldrb	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006926:	b29b      	uxth	r3, r3
 8006928:	3b01      	subs	r3, #1
 800692a:	b29a      	uxth	r2, r3
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006934:	3b01      	subs	r3, #1
 8006936:	b29a      	uxth	r2, r3
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006940:	b29b      	uxth	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d034      	beq.n	80069b0 <HAL_I2C_Mem_Write+0x1c8>
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800694a:	2b00      	cmp	r3, #0
 800694c:	d130      	bne.n	80069b0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	2200      	movs	r2, #0
 8006956:	2180      	movs	r1, #128	; 0x80
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fa4d 	bl	8006df8 <I2C_WaitOnFlagUntilTimeout>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e04d      	b.n	8006a04 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696c:	b29b      	uxth	r3, r3
 800696e:	2bff      	cmp	r3, #255	; 0xff
 8006970:	d90e      	bls.n	8006990 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	22ff      	movs	r2, #255	; 0xff
 8006976:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697c:	b2da      	uxtb	r2, r3
 800697e:	8979      	ldrh	r1, [r7, #10]
 8006980:	2300      	movs	r3, #0
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 fbd1 	bl	8007130 <I2C_TransferConfig>
 800698e:	e00f      	b.n	80069b0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	8979      	ldrh	r1, [r7, #10]
 80069a2:	2300      	movs	r3, #0
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 fbc0 	bl	8007130 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d19e      	bne.n	80068f8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 fa9a 	bl	8006ef8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d001      	beq.n	80069ce <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	e01a      	b.n	8006a04 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2220      	movs	r2, #32
 80069d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6859      	ldr	r1, [r3, #4]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4b0a      	ldr	r3, [pc, #40]	; (8006a0c <HAL_I2C_Mem_Write+0x224>)
 80069e2:	400b      	ands	r3, r1
 80069e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069fe:	2300      	movs	r3, #0
 8006a00:	e000      	b.n	8006a04 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006a02:	2302      	movs	r3, #2
  }
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	fe00e800 	.word	0xfe00e800

08006a10 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	4608      	mov	r0, r1
 8006a1a:	4611      	mov	r1, r2
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4603      	mov	r3, r0
 8006a20:	817b      	strh	r3, [r7, #10]
 8006a22:	460b      	mov	r3, r1
 8006a24:	813b      	strh	r3, [r7, #8]
 8006a26:	4613      	mov	r3, r2
 8006a28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	2b20      	cmp	r3, #32
 8006a34:	f040 80fd 	bne.w	8006c32 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d002      	beq.n	8006a44 <HAL_I2C_Mem_Read+0x34>
 8006a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d105      	bne.n	8006a50 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a4a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e0f1      	b.n	8006c34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_I2C_Mem_Read+0x4e>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e0ea      	b.n	8006c34 <HAL_I2C_Mem_Read+0x224>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a66:	f7fd ffcf 	bl	8004a08 <HAL_GetTick>
 8006a6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	2319      	movs	r3, #25
 8006a72:	2201      	movs	r2, #1
 8006a74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 f9bd 	bl	8006df8 <I2C_WaitOnFlagUntilTimeout>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d001      	beq.n	8006a88 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e0d5      	b.n	8006c34 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2222      	movs	r2, #34	; 0x22
 8006a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2240      	movs	r2, #64	; 0x40
 8006a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6a3a      	ldr	r2, [r7, #32]
 8006aa2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006aa8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2200      	movs	r2, #0
 8006aae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ab0:	88f8      	ldrh	r0, [r7, #6]
 8006ab2:	893a      	ldrh	r2, [r7, #8]
 8006ab4:	8979      	ldrh	r1, [r7, #10]
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	4603      	mov	r3, r0
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 f921 	bl	8006d08 <I2C_RequestMemoryRead>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e0ad      	b.n	8006c34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	2bff      	cmp	r3, #255	; 0xff
 8006ae0:	d90e      	bls.n	8006b00 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	22ff      	movs	r2, #255	; 0xff
 8006ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	8979      	ldrh	r1, [r7, #10]
 8006af0:	4b52      	ldr	r3, [pc, #328]	; (8006c3c <HAL_I2C_Mem_Read+0x22c>)
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 fb19 	bl	8007130 <I2C_TransferConfig>
 8006afe:	e00f      	b.n	8006b20 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	8979      	ldrh	r1, [r7, #10]
 8006b12:	4b4a      	ldr	r3, [pc, #296]	; (8006c3c <HAL_I2C_Mem_Read+0x22c>)
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f000 fb08 	bl	8007130 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b26:	2200      	movs	r2, #0
 8006b28:	2104      	movs	r1, #4
 8006b2a:	68f8      	ldr	r0, [r7, #12]
 8006b2c:	f000 f964 	bl	8006df8 <I2C_WaitOnFlagUntilTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e07c      	b.n	8006c34 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4c:	1c5a      	adds	r2, r3, #1
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b56:	3b01      	subs	r3, #1
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	3b01      	subs	r3, #1
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d034      	beq.n	8006be0 <HAL_I2C_Mem_Read+0x1d0>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d130      	bne.n	8006be0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	9300      	str	r3, [sp, #0]
 8006b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b84:	2200      	movs	r2, #0
 8006b86:	2180      	movs	r1, #128	; 0x80
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 f935 	bl	8006df8 <I2C_WaitOnFlagUntilTimeout>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d001      	beq.n	8006b98 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e04d      	b.n	8006c34 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2bff      	cmp	r3, #255	; 0xff
 8006ba0:	d90e      	bls.n	8006bc0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	22ff      	movs	r2, #255	; 0xff
 8006ba6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bac:	b2da      	uxtb	r2, r3
 8006bae:	8979      	ldrh	r1, [r7, #10]
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	9300      	str	r3, [sp, #0]
 8006bb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fab9 	bl	8007130 <I2C_TransferConfig>
 8006bbe:	e00f      	b.n	8006be0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	8979      	ldrh	r1, [r7, #10]
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bda:	68f8      	ldr	r0, [r7, #12]
 8006bdc:	f000 faa8 	bl	8007130 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d19a      	bne.n	8006b20 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f982 	bl	8006ef8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d001      	beq.n	8006bfe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e01a      	b.n	8006c34 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	2220      	movs	r2, #32
 8006c04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	6859      	ldr	r1, [r3, #4]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <HAL_I2C_Mem_Read+0x230>)
 8006c12:	400b      	ands	r3, r1
 8006c14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	e000      	b.n	8006c34 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006c32:	2302      	movs	r3, #2
  }
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3718      	adds	r7, #24
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	80002400 	.word	0x80002400
 8006c40:	fe00e800 	.word	0xfe00e800

08006c44 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c52:	b2db      	uxtb	r3, r3
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	4608      	mov	r0, r1
 8006c6a:	4611      	mov	r1, r2
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	4603      	mov	r3, r0
 8006c70:	817b      	strh	r3, [r7, #10]
 8006c72:	460b      	mov	r3, r1
 8006c74:	813b      	strh	r3, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	8979      	ldrh	r1, [r7, #10]
 8006c80:	4b20      	ldr	r3, [pc, #128]	; (8006d04 <I2C_RequestMemoryWrite+0xa4>)
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	f000 fa51 	bl	8007130 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c8e:	69fa      	ldr	r2, [r7, #28]
 8006c90:	69b9      	ldr	r1, [r7, #24]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 f8f0 	bl	8006e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	e02c      	b.n	8006cfc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ca2:	88fb      	ldrh	r3, [r7, #6]
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d105      	bne.n	8006cb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006ca8:	893b      	ldrh	r3, [r7, #8]
 8006caa:	b2da      	uxtb	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	629a      	str	r2, [r3, #40]	; 0x28
 8006cb2:	e015      	b.n	8006ce0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cb4:	893b      	ldrh	r3, [r7, #8]
 8006cb6:	0a1b      	lsrs	r3, r3, #8
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	69b9      	ldr	r1, [r7, #24]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 f8d6 	bl	8006e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e012      	b.n	8006cfc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cd6:	893b      	ldrh	r3, [r7, #8]
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	9300      	str	r3, [sp, #0]
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	2180      	movs	r1, #128	; 0x80
 8006cea:	68f8      	ldr	r0, [r7, #12]
 8006cec:	f000 f884 	bl	8006df8 <I2C_WaitOnFlagUntilTimeout>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d001      	beq.n	8006cfa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	80002000 	.word	0x80002000

08006d08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	4608      	mov	r0, r1
 8006d12:	4611      	mov	r1, r2
 8006d14:	461a      	mov	r2, r3
 8006d16:	4603      	mov	r3, r0
 8006d18:	817b      	strh	r3, [r7, #10]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	813b      	strh	r3, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d22:	88fb      	ldrh	r3, [r7, #6]
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	8979      	ldrh	r1, [r7, #10]
 8006d28:	4b20      	ldr	r3, [pc, #128]	; (8006dac <I2C_RequestMemoryRead+0xa4>)
 8006d2a:	9300      	str	r3, [sp, #0]
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	68f8      	ldr	r0, [r7, #12]
 8006d30:	f000 f9fe 	bl	8007130 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d34:	69fa      	ldr	r2, [r7, #28]
 8006d36:	69b9      	ldr	r1, [r7, #24]
 8006d38:	68f8      	ldr	r0, [r7, #12]
 8006d3a:	f000 f89d 	bl	8006e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	e02c      	b.n	8006da2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d48:	88fb      	ldrh	r3, [r7, #6]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d105      	bne.n	8006d5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d4e:	893b      	ldrh	r3, [r7, #8]
 8006d50:	b2da      	uxtb	r2, r3
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	629a      	str	r2, [r3, #40]	; 0x28
 8006d58:	e015      	b.n	8006d86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d5a:	893b      	ldrh	r3, [r7, #8]
 8006d5c:	0a1b      	lsrs	r3, r3, #8
 8006d5e:	b29b      	uxth	r3, r3
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d68:	69fa      	ldr	r2, [r7, #28]
 8006d6a:	69b9      	ldr	r1, [r7, #24]
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f000 f883 	bl	8006e78 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e012      	b.n	8006da2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d7c:	893b      	ldrh	r3, [r7, #8]
 8006d7e:	b2da      	uxtb	r2, r3
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	2140      	movs	r1, #64	; 0x40
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f831 	bl	8006df8 <I2C_WaitOnFlagUntilTimeout>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e000      	b.n	8006da2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	80002000 	.word	0x80002000

08006db0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d103      	bne.n	8006dce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	f003 0301 	and.w	r3, r3, #1
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d007      	beq.n	8006dec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	619a      	str	r2, [r3, #24]
  }
}
 8006dec:	bf00      	nop
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b084      	sub	sp, #16
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	603b      	str	r3, [r7, #0]
 8006e04:	4613      	mov	r3, r2
 8006e06:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e08:	e022      	b.n	8006e50 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e10:	d01e      	beq.n	8006e50 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e12:	f7fd fdf9 	bl	8004a08 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	683a      	ldr	r2, [r7, #0]
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d302      	bcc.n	8006e28 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d113      	bne.n	8006e50 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2c:	f043 0220 	orr.w	r2, r3, #32
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e00f      	b.n	8006e70 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	699a      	ldr	r2, [r3, #24]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	bf0c      	ite	eq
 8006e60:	2301      	moveq	r3, #1
 8006e62:	2300      	movne	r3, #0
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	461a      	mov	r2, r3
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d0cd      	beq.n	8006e0a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e6e:	2300      	movs	r3, #0
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e84:	e02c      	b.n	8006ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f870 	bl	8006f70 <I2C_IsErrorOccurred>
 8006e90:	4603      	mov	r3, r0
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e02a      	b.n	8006ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea0:	d01e      	beq.n	8006ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea2:	f7fd fdb1 	bl	8004a08 <HAL_GetTick>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	1ad3      	subs	r3, r2, r3
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d302      	bcc.n	8006eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d113      	bne.n	8006ee0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ebc:	f043 0220 	orr.w	r2, r3, #32
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2220      	movs	r2, #32
 8006ec8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e007      	b.n	8006ef0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	f003 0302 	and.w	r3, r3, #2
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d1cb      	bne.n	8006e86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f04:	e028      	b.n	8006f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	68b9      	ldr	r1, [r7, #8]
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 f830 	bl	8006f70 <I2C_IsErrorOccurred>
 8006f10:	4603      	mov	r3, r0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d001      	beq.n	8006f1a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e026      	b.n	8006f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1a:	f7fd fd75 	bl	8004a08 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d113      	bne.n	8006f58 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f34:	f043 0220 	orr.w	r2, r3, #32
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e007      	b.n	8006f68 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699b      	ldr	r3, [r3, #24]
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	d1cf      	bne.n	8006f06 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08a      	sub	sp, #40	; 0x28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	f003 0310 	and.w	r3, r3, #16
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d068      	beq.n	800706e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2210      	movs	r2, #16
 8006fa2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006fa4:	e049      	b.n	800703a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fac:	d045      	beq.n	800703a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006fae:	f7fd fd2b 	bl	8004a08 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d302      	bcc.n	8006fc4 <I2C_IsErrorOccurred+0x54>
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d13a      	bne.n	800703a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006fd6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe6:	d121      	bne.n	800702c <I2C_IsErrorOccurred+0xbc>
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fee:	d01d      	beq.n	800702c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006ff0:	7cfb      	ldrb	r3, [r7, #19]
 8006ff2:	2b20      	cmp	r3, #32
 8006ff4:	d01a      	beq.n	800702c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007004:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007006:	f7fd fcff 	bl	8004a08 <HAL_GetTick>
 800700a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800700c:	e00e      	b.n	800702c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800700e:	f7fd fcfb 	bl	8004a08 <HAL_GetTick>
 8007012:	4602      	mov	r2, r0
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	1ad3      	subs	r3, r2, r3
 8007018:	2b19      	cmp	r3, #25
 800701a:	d907      	bls.n	800702c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800701c:	6a3b      	ldr	r3, [r7, #32]
 800701e:	f043 0320 	orr.w	r3, r3, #32
 8007022:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800702a:	e006      	b.n	800703a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	699b      	ldr	r3, [r3, #24]
 8007032:	f003 0320 	and.w	r3, r3, #32
 8007036:	2b20      	cmp	r3, #32
 8007038:	d1e9      	bne.n	800700e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	f003 0320 	and.w	r3, r3, #32
 8007044:	2b20      	cmp	r3, #32
 8007046:	d003      	beq.n	8007050 <I2C_IsErrorOccurred+0xe0>
 8007048:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800704c:	2b00      	cmp	r3, #0
 800704e:	d0aa      	beq.n	8006fa6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007054:	2b00      	cmp	r3, #0
 8007056:	d103      	bne.n	8007060 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2220      	movs	r2, #32
 800705e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007060:	6a3b      	ldr	r3, [r7, #32]
 8007062:	f043 0304 	orr.w	r3, r3, #4
 8007066:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	699b      	ldr	r3, [r3, #24]
 8007074:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800707c:	2b00      	cmp	r3, #0
 800707e:	d00b      	beq.n	8007098 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	f043 0301 	orr.w	r3, r3, #1
 8007086:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007090:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007092:	2301      	movs	r3, #1
 8007094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00b      	beq.n	80070ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	f043 0308 	orr.w	r3, r3, #8
 80070a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80070b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	f043 0302 	orr.w	r3, r3, #2
 80070ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80070dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d01c      	beq.n	800711e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f7ff fe63 	bl	8006db0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	6859      	ldr	r1, [r3, #4]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	4b0d      	ldr	r3, [pc, #52]	; (800712c <I2C_IsErrorOccurred+0x1bc>)
 80070f6:	400b      	ands	r3, r1
 80070f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	431a      	orrs	r2, r3
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2220      	movs	r2, #32
 800710a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800711e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007122:	4618      	mov	r0, r3
 8007124:	3728      	adds	r7, #40	; 0x28
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	fe00e800 	.word	0xfe00e800

08007130 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007130:	b480      	push	{r7}
 8007132:	b087      	sub	sp, #28
 8007134:	af00      	add	r7, sp, #0
 8007136:	60f8      	str	r0, [r7, #12]
 8007138:	607b      	str	r3, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	817b      	strh	r3, [r7, #10]
 800713e:	4613      	mov	r3, r2
 8007140:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007142:	897b      	ldrh	r3, [r7, #10]
 8007144:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007148:	7a7b      	ldrb	r3, [r7, #9]
 800714a:	041b      	lsls	r3, r3, #16
 800714c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007150:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	4313      	orrs	r3, r2
 800715a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800715e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	685a      	ldr	r2, [r3, #4]
 8007166:	6a3b      	ldr	r3, [r7, #32]
 8007168:	0d5b      	lsrs	r3, r3, #21
 800716a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800716e:	4b08      	ldr	r3, [pc, #32]	; (8007190 <I2C_TransferConfig+0x60>)
 8007170:	430b      	orrs	r3, r1
 8007172:	43db      	mvns	r3, r3
 8007174:	ea02 0103 	and.w	r1, r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	697a      	ldr	r2, [r7, #20]
 800717e:	430a      	orrs	r2, r1
 8007180:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007182:	bf00      	nop
 8007184:	371c      	adds	r7, #28
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	03ff63ff 	.word	0x03ff63ff

08007194 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	2b20      	cmp	r3, #32
 80071a8:	d138      	bne.n	800721c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d101      	bne.n	80071b8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80071b4:	2302      	movs	r3, #2
 80071b6:	e032      	b.n	800721e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2224      	movs	r2, #36	; 0x24
 80071c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0201 	bic.w	r2, r2, #1
 80071d6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071e6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6819      	ldr	r1, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	430a      	orrs	r2, r1
 80071f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2220      	movs	r2, #32
 800720c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007218:	2300      	movs	r3, #0
 800721a:	e000      	b.n	800721e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800721c:	2302      	movs	r3, #2
  }
}
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
 8007232:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800723a:	b2db      	uxtb	r3, r3
 800723c:	2b20      	cmp	r3, #32
 800723e:	d139      	bne.n	80072b4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007246:	2b01      	cmp	r3, #1
 8007248:	d101      	bne.n	800724e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800724a:	2302      	movs	r3, #2
 800724c:	e033      	b.n	80072b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2224      	movs	r2, #36	; 0x24
 800725a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f022 0201 	bic.w	r2, r2, #1
 800726c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800727c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	021b      	lsls	r3, r3, #8
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	4313      	orrs	r3, r2
 8007286:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68fa      	ldr	r2, [r7, #12]
 800728e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2220      	movs	r2, #32
 80072a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	e000      	b.n	80072b6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80072b4:	2302      	movs	r3, #2
  }
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
	...

080072c4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e0bf      	b.n	8007456 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d106      	bne.n	80072f0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7fa fb74 	bl	80019d8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2202      	movs	r2, #2
 80072f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007306:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6999      	ldr	r1, [r3, #24]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685a      	ldr	r2, [r3, #4]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800731c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	691b      	ldr	r3, [r3, #16]
 8007322:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6899      	ldr	r1, [r3, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	4b4a      	ldr	r3, [pc, #296]	; (8007460 <HAL_LTDC_Init+0x19c>)
 8007338:	400b      	ands	r3, r1
 800733a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	041b      	lsls	r3, r3, #16
 8007342:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6899      	ldr	r1, [r3, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	431a      	orrs	r2, r3
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68d9      	ldr	r1, [r3, #12]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	4b3e      	ldr	r3, [pc, #248]	; (8007460 <HAL_LTDC_Init+0x19c>)
 8007366:	400b      	ands	r3, r1
 8007368:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	69db      	ldr	r3, [r3, #28]
 800736e:	041b      	lsls	r3, r3, #16
 8007370:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68d9      	ldr	r1, [r3, #12]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a1a      	ldr	r2, [r3, #32]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	430a      	orrs	r2, r1
 8007386:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6919      	ldr	r1, [r3, #16]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	4b33      	ldr	r3, [pc, #204]	; (8007460 <HAL_LTDC_Init+0x19c>)
 8007394:	400b      	ands	r3, r1
 8007396:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739c:	041b      	lsls	r3, r3, #16
 800739e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6919      	ldr	r1, [r3, #16]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	431a      	orrs	r2, r3
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	6959      	ldr	r1, [r3, #20]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	4b27      	ldr	r3, [pc, #156]	; (8007460 <HAL_LTDC_Init+0x19c>)
 80073c2:	400b      	ands	r3, r1
 80073c4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ca:	041b      	lsls	r3, r3, #16
 80073cc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6959      	ldr	r1, [r3, #20]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80073f4:	041b      	lsls	r3, r3, #16
 80073f6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007406:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800740e:	68ba      	ldr	r2, [r7, #8]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	4313      	orrs	r3, r2
 8007414:	687a      	ldr	r2, [r7, #4]
 8007416:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f042 0206 	orr.w	r2, r2, #6
 8007432:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f042 0201 	orr.w	r2, r2, #1
 8007442:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
 800745e:	bf00      	nop
 8007460:	f000f800 	.word	0xf000f800

08007464 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007472:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f003 0304 	and.w	r3, r3, #4
 8007482:	2b00      	cmp	r3, #0
 8007484:	d023      	beq.n	80074ce <HAL_LTDC_IRQHandler+0x6a>
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01e      	beq.n	80074ce <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f022 0204 	bic.w	r2, r2, #4
 800749e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2204      	movs	r2, #4
 80074a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074ae:	f043 0201 	orr.w	r2, r3, #1
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2204      	movs	r2, #4
 80074bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f86f 	bl	80075ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f003 0302 	and.w	r3, r3, #2
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d023      	beq.n	8007520 <HAL_LTDC_IRQHandler+0xbc>
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 0302 	and.w	r3, r3, #2
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d01e      	beq.n	8007520 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0202 	bic.w	r2, r2, #2
 80074f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2202      	movs	r2, #2
 80074f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007500:	f043 0202 	orr.w	r2, r3, #2
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2204      	movs	r2, #4
 800750e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 f846 	bl	80075ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	f003 0301 	and.w	r3, r3, #1
 8007526:	2b00      	cmp	r3, #0
 8007528:	d01b      	beq.n	8007562 <HAL_LTDC_IRQHandler+0xfe>
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f003 0301 	and.w	r3, r3, #1
 8007530:	2b00      	cmp	r3, #0
 8007532:	d016      	beq.n	8007562 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f022 0201 	bic.w	r2, r2, #1
 8007542:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	2201      	movs	r2, #1
 800754a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f82f 	bl	80075c0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f003 0308 	and.w	r3, r3, #8
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01b      	beq.n	80075a4 <HAL_LTDC_IRQHandler+0x140>
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f003 0308 	and.w	r3, r3, #8
 8007572:	2b00      	cmp	r3, #0
 8007574:	d016      	beq.n	80075a4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f022 0208 	bic.w	r2, r2, #8
 8007584:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2208      	movs	r2, #8
 800758c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f818 	bl	80075d4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80075c8:	bf00      	nop
 80075ca:	370c      	adds	r7, #12
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80075e8:	b5b0      	push	{r4, r5, r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d101      	bne.n	8007602 <HAL_LTDC_ConfigLayer+0x1a>
 80075fe:	2302      	movs	r3, #2
 8007600:	e02c      	b.n	800765c <HAL_LTDC_ConfigLayer+0x74>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2202      	movs	r2, #2
 800760e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2134      	movs	r1, #52	; 0x34
 8007618:	fb01 f303 	mul.w	r3, r1, r3
 800761c:	4413      	add	r3, r2
 800761e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	4614      	mov	r4, r2
 8007626:	461d      	mov	r5, r3
 8007628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800762a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800762c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800762e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007630:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007632:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007634:	682b      	ldr	r3, [r5, #0]
 8007636:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	68b9      	ldr	r1, [r7, #8]
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f81f 	bl	8007680 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2201      	movs	r2, #1
 8007648:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	2200      	movs	r2, #0
 8007656:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3710      	adds	r7, #16
 8007660:	46bd      	mov	sp, r7
 8007662:	bdb0      	pop	{r4, r5, r7, pc}

08007664 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007672:	b2db      	uxtb	r3, r3
}
 8007674:	4618      	mov	r0, r3
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007680:	b480      	push	{r7}
 8007682:	b089      	sub	sp, #36	; 0x24
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	0c1b      	lsrs	r3, r3, #16
 8007698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800769c:	4413      	add	r3, r2
 800769e:	041b      	lsls	r3, r3, #16
 80076a0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	461a      	mov	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	01db      	lsls	r3, r3, #7
 80076ac:	4413      	add	r3, r2
 80076ae:	3384      	adds	r3, #132	; 0x84
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	6812      	ldr	r2, [r2, #0]
 80076b6:	4611      	mov	r1, r2
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	01d2      	lsls	r2, r2, #7
 80076bc:	440a      	add	r2, r1
 80076be:	3284      	adds	r2, #132	; 0x84
 80076c0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80076c4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	0c1b      	lsrs	r3, r3, #16
 80076d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80076d6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80076d8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4619      	mov	r1, r3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	01db      	lsls	r3, r3, #7
 80076e4:	440b      	add	r3, r1
 80076e6:	3384      	adds	r3, #132	; 0x84
 80076e8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80076ee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	68da      	ldr	r2, [r3, #12]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076fe:	4413      	add	r3, r2
 8007700:	041b      	lsls	r3, r3, #16
 8007702:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	461a      	mov	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	01db      	lsls	r3, r3, #7
 800770e:	4413      	add	r3, r2
 8007710:	3384      	adds	r3, #132	; 0x84
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	6812      	ldr	r2, [r2, #0]
 8007718:	4611      	mov	r1, r2
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	01d2      	lsls	r2, r2, #7
 800771e:	440a      	add	r2, r1
 8007720:	3284      	adds	r2, #132	; 0x84
 8007722:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007726:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	689a      	ldr	r2, [r3, #8]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007736:	4413      	add	r3, r2
 8007738:	1c5a      	adds	r2, r3, #1
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4619      	mov	r1, r3
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	01db      	lsls	r3, r3, #7
 8007744:	440b      	add	r3, r1
 8007746:	3384      	adds	r3, #132	; 0x84
 8007748:	4619      	mov	r1, r3
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	4313      	orrs	r3, r2
 800774e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	01db      	lsls	r3, r3, #7
 800775a:	4413      	add	r3, r2
 800775c:	3384      	adds	r3, #132	; 0x84
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	6812      	ldr	r2, [r2, #0]
 8007764:	4611      	mov	r1, r2
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	01d2      	lsls	r2, r2, #7
 800776a:	440a      	add	r2, r1
 800776c:	3284      	adds	r2, #132	; 0x84
 800776e:	f023 0307 	bic.w	r3, r3, #7
 8007772:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	01db      	lsls	r3, r3, #7
 800777e:	4413      	add	r3, r2
 8007780:	3384      	adds	r3, #132	; 0x84
 8007782:	461a      	mov	r2, r3
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007790:	021b      	lsls	r3, r3, #8
 8007792:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800779a:	041b      	lsls	r3, r3, #16
 800779c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	061b      	lsls	r3, r3, #24
 80077a4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	461a      	mov	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	01db      	lsls	r3, r3, #7
 80077b0:	4413      	add	r3, r2
 80077b2:	3384      	adds	r3, #132	; 0x84
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	01db      	lsls	r3, r3, #7
 80077c0:	4413      	add	r3, r2
 80077c2:	3384      	adds	r3, #132	; 0x84
 80077c4:	461a      	mov	r2, r3
 80077c6:	2300      	movs	r3, #0
 80077c8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077d0:	461a      	mov	r2, r3
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	431a      	orrs	r2, r3
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	431a      	orrs	r2, r3
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4619      	mov	r1, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	01db      	lsls	r3, r3, #7
 80077e4:	440b      	add	r3, r1
 80077e6:	3384      	adds	r3, #132	; 0x84
 80077e8:	4619      	mov	r1, r3
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	461a      	mov	r2, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	01db      	lsls	r3, r3, #7
 80077fa:	4413      	add	r3, r2
 80077fc:	3384      	adds	r3, #132	; 0x84
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	6812      	ldr	r2, [r2, #0]
 8007804:	4611      	mov	r1, r2
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	01d2      	lsls	r2, r2, #7
 800780a:	440a      	add	r2, r1
 800780c:	3284      	adds	r2, #132	; 0x84
 800780e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007812:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	461a      	mov	r2, r3
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	01db      	lsls	r3, r3, #7
 800781e:	4413      	add	r3, r2
 8007820:	3384      	adds	r3, #132	; 0x84
 8007822:	461a      	mov	r2, r3
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	695b      	ldr	r3, [r3, #20]
 8007828:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	01db      	lsls	r3, r3, #7
 8007834:	4413      	add	r3, r2
 8007836:	3384      	adds	r3, #132	; 0x84
 8007838:	69da      	ldr	r2, [r3, #28]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4619      	mov	r1, r3
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	01db      	lsls	r3, r3, #7
 8007844:	440b      	add	r3, r1
 8007846:	3384      	adds	r3, #132	; 0x84
 8007848:	4619      	mov	r1, r3
 800784a:	4b58      	ldr	r3, [pc, #352]	; (80079ac <LTDC_SetConfig+0x32c>)
 800784c:	4013      	ands	r3, r2
 800784e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	69da      	ldr	r2, [r3, #28]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	68f9      	ldr	r1, [r7, #12]
 800785a:	6809      	ldr	r1, [r1, #0]
 800785c:	4608      	mov	r0, r1
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	01c9      	lsls	r1, r1, #7
 8007862:	4401      	add	r1, r0
 8007864:	3184      	adds	r1, #132	; 0x84
 8007866:	4313      	orrs	r3, r2
 8007868:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	01db      	lsls	r3, r3, #7
 8007874:	4413      	add	r3, r2
 8007876:	3384      	adds	r3, #132	; 0x84
 8007878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	461a      	mov	r2, r3
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	01db      	lsls	r3, r3, #7
 8007884:	4413      	add	r3, r2
 8007886:	3384      	adds	r3, #132	; 0x84
 8007888:	461a      	mov	r2, r3
 800788a:	2300      	movs	r3, #0
 800788c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	461a      	mov	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	01db      	lsls	r3, r3, #7
 8007898:	4413      	add	r3, r2
 800789a:	3384      	adds	r3, #132	; 0x84
 800789c:	461a      	mov	r2, r3
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d102      	bne.n	80078b2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80078ac:	2304      	movs	r3, #4
 80078ae:	61fb      	str	r3, [r7, #28]
 80078b0:	e01b      	b.n	80078ea <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d102      	bne.n	80078c0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80078ba:	2303      	movs	r3, #3
 80078bc:	61fb      	str	r3, [r7, #28]
 80078be:	e014      	b.n	80078ea <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d00b      	beq.n	80078e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d007      	beq.n	80078e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80078d4:	2b03      	cmp	r3, #3
 80078d6:	d003      	beq.n	80078e0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80078dc:	2b07      	cmp	r3, #7
 80078de:	d102      	bne.n	80078e6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80078e0:	2302      	movs	r3, #2
 80078e2:	61fb      	str	r3, [r7, #28]
 80078e4:	e001      	b.n	80078ea <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80078e6:	2301      	movs	r3, #1
 80078e8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	01db      	lsls	r3, r3, #7
 80078f4:	4413      	add	r3, r2
 80078f6:	3384      	adds	r3, #132	; 0x84
 80078f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	6812      	ldr	r2, [r2, #0]
 80078fe:	4611      	mov	r1, r2
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	01d2      	lsls	r2, r2, #7
 8007904:	440a      	add	r2, r1
 8007906:	3284      	adds	r2, #132	; 0x84
 8007908:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800790c:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800790e:	68bb      	ldr	r3, [r7, #8]
 8007910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007912:	69fa      	ldr	r2, [r7, #28]
 8007914:	fb02 f303 	mul.w	r3, r2, r3
 8007918:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	6859      	ldr	r1, [r3, #4]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	1acb      	subs	r3, r1, r3
 8007924:	69f9      	ldr	r1, [r7, #28]
 8007926:	fb01 f303 	mul.w	r3, r1, r3
 800792a:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800792c:	68f9      	ldr	r1, [r7, #12]
 800792e:	6809      	ldr	r1, [r1, #0]
 8007930:	4608      	mov	r0, r1
 8007932:	6879      	ldr	r1, [r7, #4]
 8007934:	01c9      	lsls	r1, r1, #7
 8007936:	4401      	add	r1, r0
 8007938:	3184      	adds	r1, #132	; 0x84
 800793a:	4313      	orrs	r3, r2
 800793c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	01db      	lsls	r3, r3, #7
 8007948:	4413      	add	r3, r2
 800794a:	3384      	adds	r3, #132	; 0x84
 800794c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4619      	mov	r1, r3
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	01db      	lsls	r3, r3, #7
 8007958:	440b      	add	r3, r1
 800795a:	3384      	adds	r3, #132	; 0x84
 800795c:	4619      	mov	r1, r3
 800795e:	4b14      	ldr	r3, [pc, #80]	; (80079b0 <LTDC_SetConfig+0x330>)
 8007960:	4013      	ands	r3, r2
 8007962:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	01db      	lsls	r3, r3, #7
 800796e:	4413      	add	r3, r2
 8007970:	3384      	adds	r3, #132	; 0x84
 8007972:	461a      	mov	r2, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007978:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	01db      	lsls	r3, r3, #7
 8007984:	4413      	add	r3, r2
 8007986:	3384      	adds	r3, #132	; 0x84
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68fa      	ldr	r2, [r7, #12]
 800798c:	6812      	ldr	r2, [r2, #0]
 800798e:	4611      	mov	r1, r2
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	01d2      	lsls	r2, r2, #7
 8007994:	440a      	add	r2, r1
 8007996:	3284      	adds	r2, #132	; 0x84
 8007998:	f043 0301 	orr.w	r3, r3, #1
 800799c:	6013      	str	r3, [r2, #0]
}
 800799e:	bf00      	nop
 80079a0:	3724      	adds	r7, #36	; 0x24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	fffff8f8 	.word	0xfffff8f8
 80079b0:	fffff800 	.word	0xfffff800

080079b4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80079b4:	b480      	push	{r7}
 80079b6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80079b8:	4b05      	ldr	r3, [pc, #20]	; (80079d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a04      	ldr	r2, [pc, #16]	; (80079d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80079be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079c2:	6013      	str	r3, [r2, #0]
}
 80079c4:	bf00      	nop
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	40007000 	.word	0x40007000

080079d4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b082      	sub	sp, #8
 80079d8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80079da:	2300      	movs	r3, #0
 80079dc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80079de:	4b23      	ldr	r3, [pc, #140]	; (8007a6c <HAL_PWREx_EnableOverDrive+0x98>)
 80079e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e2:	4a22      	ldr	r2, [pc, #136]	; (8007a6c <HAL_PWREx_EnableOverDrive+0x98>)
 80079e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e8:	6413      	str	r3, [r2, #64]	; 0x40
 80079ea:	4b20      	ldr	r3, [pc, #128]	; (8007a6c <HAL_PWREx_EnableOverDrive+0x98>)
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80079f6:	4b1e      	ldr	r3, [pc, #120]	; (8007a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1d      	ldr	r2, [pc, #116]	; (8007a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a00:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a02:	f7fd f801 	bl	8004a08 <HAL_GetTick>
 8007a06:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a08:	e009      	b.n	8007a1e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a0a:	f7fc fffd 	bl	8004a08 <HAL_GetTick>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	1ad3      	subs	r3, r2, r3
 8007a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a18:	d901      	bls.n	8007a1e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007a1a:	2303      	movs	r3, #3
 8007a1c:	e022      	b.n	8007a64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007a1e:	4b14      	ldr	r3, [pc, #80]	; (8007a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a2a:	d1ee      	bne.n	8007a0a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007a2c:	4b10      	ldr	r3, [pc, #64]	; (8007a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4a0f      	ldr	r2, [pc, #60]	; (8007a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a36:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a38:	f7fc ffe6 	bl	8004a08 <HAL_GetTick>
 8007a3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a3e:	e009      	b.n	8007a54 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007a40:	f7fc ffe2 	bl	8004a08 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a4e:	d901      	bls.n	8007a54 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e007      	b.n	8007a64 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a54:	4b06      	ldr	r3, [pc, #24]	; (8007a70 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a60:	d1ee      	bne.n	8007a40 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007a62:	2300      	movs	r3, #0
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	40023800 	.word	0x40023800
 8007a70:	40007000 	.word	0x40007000

08007a74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d101      	bne.n	8007a8a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e291      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f003 0301 	and.w	r3, r3, #1
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f000 8087 	beq.w	8007ba6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a98:	4b96      	ldr	r3, [pc, #600]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f003 030c 	and.w	r3, r3, #12
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d00c      	beq.n	8007abe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007aa4:	4b93      	ldr	r3, [pc, #588]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f003 030c 	and.w	r3, r3, #12
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d112      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x62>
 8007ab0:	4b90      	ldr	r3, [pc, #576]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ab8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007abc:	d10b      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007abe:	4b8d      	ldr	r3, [pc, #564]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d06c      	beq.n	8007ba4 <HAL_RCC_OscConfig+0x130>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d168      	bne.n	8007ba4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e26b      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ade:	d106      	bne.n	8007aee <HAL_RCC_OscConfig+0x7a>
 8007ae0:	4b84      	ldr	r3, [pc, #528]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a83      	ldr	r2, [pc, #524]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aea:	6013      	str	r3, [r2, #0]
 8007aec:	e02e      	b.n	8007b4c <HAL_RCC_OscConfig+0xd8>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d10c      	bne.n	8007b10 <HAL_RCC_OscConfig+0x9c>
 8007af6:	4b7f      	ldr	r3, [pc, #508]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a7e      	ldr	r2, [pc, #504]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007afc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	4b7c      	ldr	r3, [pc, #496]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a7b      	ldr	r2, [pc, #492]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	e01d      	b.n	8007b4c <HAL_RCC_OscConfig+0xd8>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b18:	d10c      	bne.n	8007b34 <HAL_RCC_OscConfig+0xc0>
 8007b1a:	4b76      	ldr	r3, [pc, #472]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a75      	ldr	r2, [pc, #468]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	4b73      	ldr	r3, [pc, #460]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a72      	ldr	r2, [pc, #456]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	e00b      	b.n	8007b4c <HAL_RCC_OscConfig+0xd8>
 8007b34:	4b6f      	ldr	r3, [pc, #444]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a6e      	ldr	r2, [pc, #440]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	4b6c      	ldr	r3, [pc, #432]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a6b      	ldr	r2, [pc, #428]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d013      	beq.n	8007b7c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b54:	f7fc ff58 	bl	8004a08 <HAL_GetTick>
 8007b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b5a:	e008      	b.n	8007b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b5c:	f7fc ff54 	bl	8004a08 <HAL_GetTick>
 8007b60:	4602      	mov	r2, r0
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	1ad3      	subs	r3, r2, r3
 8007b66:	2b64      	cmp	r3, #100	; 0x64
 8007b68:	d901      	bls.n	8007b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	e21f      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b6e:	4b61      	ldr	r3, [pc, #388]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0f0      	beq.n	8007b5c <HAL_RCC_OscConfig+0xe8>
 8007b7a:	e014      	b.n	8007ba6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b7c:	f7fc ff44 	bl	8004a08 <HAL_GetTick>
 8007b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b82:	e008      	b.n	8007b96 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b84:	f7fc ff40 	bl	8004a08 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b64      	cmp	r3, #100	; 0x64
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e20b      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b96:	4b57      	ldr	r3, [pc, #348]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f0      	bne.n	8007b84 <HAL_RCC_OscConfig+0x110>
 8007ba2:	e000      	b.n	8007ba6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0302 	and.w	r3, r3, #2
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d069      	beq.n	8007c86 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007bb2:	4b50      	ldr	r3, [pc, #320]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f003 030c 	and.w	r3, r3, #12
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00b      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bbe:	4b4d      	ldr	r3, [pc, #308]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 030c 	and.w	r3, r3, #12
 8007bc6:	2b08      	cmp	r3, #8
 8007bc8:	d11c      	bne.n	8007c04 <HAL_RCC_OscConfig+0x190>
 8007bca:	4b4a      	ldr	r3, [pc, #296]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d116      	bne.n	8007c04 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bd6:	4b47      	ldr	r3, [pc, #284]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f003 0302 	and.w	r3, r3, #2
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d005      	beq.n	8007bee <HAL_RCC_OscConfig+0x17a>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	68db      	ldr	r3, [r3, #12]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d001      	beq.n	8007bee <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007bea:	2301      	movs	r3, #1
 8007bec:	e1df      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bee:	4b41      	ldr	r3, [pc, #260]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	493d      	ldr	r1, [pc, #244]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c02:	e040      	b.n	8007c86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d023      	beq.n	8007c54 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c0c:	4b39      	ldr	r3, [pc, #228]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4a38      	ldr	r2, [pc, #224]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c12:	f043 0301 	orr.w	r3, r3, #1
 8007c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c18:	f7fc fef6 	bl	8004a08 <HAL_GetTick>
 8007c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c1e:	e008      	b.n	8007c32 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c20:	f7fc fef2 	bl	8004a08 <HAL_GetTick>
 8007c24:	4602      	mov	r2, r0
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	1ad3      	subs	r3, r2, r3
 8007c2a:	2b02      	cmp	r3, #2
 8007c2c:	d901      	bls.n	8007c32 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007c2e:	2303      	movs	r3, #3
 8007c30:	e1bd      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c32:	4b30      	ldr	r3, [pc, #192]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0f0      	beq.n	8007c20 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c3e:	4b2d      	ldr	r3, [pc, #180]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	00db      	lsls	r3, r3, #3
 8007c4c:	4929      	ldr	r1, [pc, #164]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	600b      	str	r3, [r1, #0]
 8007c52:	e018      	b.n	8007c86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c54:	4b27      	ldr	r3, [pc, #156]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a26      	ldr	r2, [pc, #152]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c60:	f7fc fed2 	bl	8004a08 <HAL_GetTick>
 8007c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c66:	e008      	b.n	8007c7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c68:	f7fc fece 	bl	8004a08 <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e199      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c7a:	4b1e      	ldr	r3, [pc, #120]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1f0      	bne.n	8007c68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f003 0308 	and.w	r3, r3, #8
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d038      	beq.n	8007d04 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d019      	beq.n	8007cce <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c9a:	4b16      	ldr	r3, [pc, #88]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c9e:	4a15      	ldr	r2, [pc, #84]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ca6:	f7fc feaf 	bl	8004a08 <HAL_GetTick>
 8007caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cac:	e008      	b.n	8007cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cae:	f7fc feab 	bl	8004a08 <HAL_GetTick>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	1ad3      	subs	r3, r2, r3
 8007cb8:	2b02      	cmp	r3, #2
 8007cba:	d901      	bls.n	8007cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e176      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cc0:	4b0c      	ldr	r3, [pc, #48]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d0f0      	beq.n	8007cae <HAL_RCC_OscConfig+0x23a>
 8007ccc:	e01a      	b.n	8007d04 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cce:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cd2:	4a08      	ldr	r2, [pc, #32]	; (8007cf4 <HAL_RCC_OscConfig+0x280>)
 8007cd4:	f023 0301 	bic.w	r3, r3, #1
 8007cd8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cda:	f7fc fe95 	bl	8004a08 <HAL_GetTick>
 8007cde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ce0:	e00a      	b.n	8007cf8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ce2:	f7fc fe91 	bl	8004a08 <HAL_GetTick>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d903      	bls.n	8007cf8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	e15c      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
 8007cf4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cf8:	4b91      	ldr	r3, [pc, #580]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1ee      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	f000 80a4 	beq.w	8007e5a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d12:	4b8b      	ldr	r3, [pc, #556]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10d      	bne.n	8007d3a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d1e:	4b88      	ldr	r3, [pc, #544]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	4a87      	ldr	r2, [pc, #540]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d28:	6413      	str	r3, [r2, #64]	; 0x40
 8007d2a:	4b85      	ldr	r3, [pc, #532]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d32:	60bb      	str	r3, [r7, #8]
 8007d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d36:	2301      	movs	r3, #1
 8007d38:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d3a:	4b82      	ldr	r3, [pc, #520]	; (8007f44 <HAL_RCC_OscConfig+0x4d0>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d118      	bne.n	8007d78 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007d46:	4b7f      	ldr	r3, [pc, #508]	; (8007f44 <HAL_RCC_OscConfig+0x4d0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a7e      	ldr	r2, [pc, #504]	; (8007f44 <HAL_RCC_OscConfig+0x4d0>)
 8007d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d52:	f7fc fe59 	bl	8004a08 <HAL_GetTick>
 8007d56:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d58:	e008      	b.n	8007d6c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d5a:	f7fc fe55 	bl	8004a08 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b64      	cmp	r3, #100	; 0x64
 8007d66:	d901      	bls.n	8007d6c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e120      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d6c:	4b75      	ldr	r3, [pc, #468]	; (8007f44 <HAL_RCC_OscConfig+0x4d0>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0f0      	beq.n	8007d5a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	d106      	bne.n	8007d8e <HAL_RCC_OscConfig+0x31a>
 8007d80:	4b6f      	ldr	r3, [pc, #444]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d84:	4a6e      	ldr	r2, [pc, #440]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d8c:	e02d      	b.n	8007dea <HAL_RCC_OscConfig+0x376>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10c      	bne.n	8007db0 <HAL_RCC_OscConfig+0x33c>
 8007d96:	4b6a      	ldr	r3, [pc, #424]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9a:	4a69      	ldr	r2, [pc, #420]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007d9c:	f023 0301 	bic.w	r3, r3, #1
 8007da0:	6713      	str	r3, [r2, #112]	; 0x70
 8007da2:	4b67      	ldr	r3, [pc, #412]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007da6:	4a66      	ldr	r2, [pc, #408]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007da8:	f023 0304 	bic.w	r3, r3, #4
 8007dac:	6713      	str	r3, [r2, #112]	; 0x70
 8007dae:	e01c      	b.n	8007dea <HAL_RCC_OscConfig+0x376>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	2b05      	cmp	r3, #5
 8007db6:	d10c      	bne.n	8007dd2 <HAL_RCC_OscConfig+0x35e>
 8007db8:	4b61      	ldr	r3, [pc, #388]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007dba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dbc:	4a60      	ldr	r2, [pc, #384]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007dbe:	f043 0304 	orr.w	r3, r3, #4
 8007dc2:	6713      	str	r3, [r2, #112]	; 0x70
 8007dc4:	4b5e      	ldr	r3, [pc, #376]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc8:	4a5d      	ldr	r2, [pc, #372]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007dca:	f043 0301 	orr.w	r3, r3, #1
 8007dce:	6713      	str	r3, [r2, #112]	; 0x70
 8007dd0:	e00b      	b.n	8007dea <HAL_RCC_OscConfig+0x376>
 8007dd2:	4b5b      	ldr	r3, [pc, #364]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd6:	4a5a      	ldr	r2, [pc, #360]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007dd8:	f023 0301 	bic.w	r3, r3, #1
 8007ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8007dde:	4b58      	ldr	r3, [pc, #352]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de2:	4a57      	ldr	r2, [pc, #348]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007de4:	f023 0304 	bic.w	r3, r3, #4
 8007de8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d015      	beq.n	8007e1e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007df2:	f7fc fe09 	bl	8004a08 <HAL_GetTick>
 8007df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007df8:	e00a      	b.n	8007e10 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dfa:	f7fc fe05 	bl	8004a08 <HAL_GetTick>
 8007dfe:	4602      	mov	r2, r0
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	1ad3      	subs	r3, r2, r3
 8007e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d901      	bls.n	8007e10 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e0ce      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e10:	4b4b      	ldr	r3, [pc, #300]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e14:	f003 0302 	and.w	r3, r3, #2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d0ee      	beq.n	8007dfa <HAL_RCC_OscConfig+0x386>
 8007e1c:	e014      	b.n	8007e48 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e1e:	f7fc fdf3 	bl	8004a08 <HAL_GetTick>
 8007e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e24:	e00a      	b.n	8007e3c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e26:	f7fc fdef 	bl	8004a08 <HAL_GetTick>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d901      	bls.n	8007e3c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007e38:	2303      	movs	r3, #3
 8007e3a:	e0b8      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e3c:	4b40      	ldr	r3, [pc, #256]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e40:	f003 0302 	and.w	r3, r3, #2
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1ee      	bne.n	8007e26 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
 8007e4a:	2b01      	cmp	r3, #1
 8007e4c:	d105      	bne.n	8007e5a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e4e:	4b3c      	ldr	r3, [pc, #240]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e52:	4a3b      	ldr	r2, [pc, #236]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 80a4 	beq.w	8007fac <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e64:	4b36      	ldr	r3, [pc, #216]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 030c 	and.w	r3, r3, #12
 8007e6c:	2b08      	cmp	r3, #8
 8007e6e:	d06b      	beq.n	8007f48 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d149      	bne.n	8007f0c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e78:	4b31      	ldr	r3, [pc, #196]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a30      	ldr	r2, [pc, #192]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e84:	f7fc fdc0 	bl	8004a08 <HAL_GetTick>
 8007e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e8a:	e008      	b.n	8007e9e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e8c:	f7fc fdbc 	bl	8004a08 <HAL_GetTick>
 8007e90:	4602      	mov	r2, r0
 8007e92:	693b      	ldr	r3, [r7, #16]
 8007e94:	1ad3      	subs	r3, r2, r3
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e087      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e9e:	4b28      	ldr	r3, [pc, #160]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1f0      	bne.n	8007e8c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	69da      	ldr	r2, [r3, #28]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	431a      	orrs	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	019b      	lsls	r3, r3, #6
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec0:	085b      	lsrs	r3, r3, #1
 8007ec2:	3b01      	subs	r3, #1
 8007ec4:	041b      	lsls	r3, r3, #16
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ecc:	061b      	lsls	r3, r3, #24
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	4a1b      	ldr	r2, [pc, #108]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007ed2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ed6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ed8:	4b19      	ldr	r3, [pc, #100]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a18      	ldr	r2, [pc, #96]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee4:	f7fc fd90 	bl	8004a08 <HAL_GetTick>
 8007ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eea:	e008      	b.n	8007efe <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eec:	f7fc fd8c 	bl	8004a08 <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	2b02      	cmp	r3, #2
 8007ef8:	d901      	bls.n	8007efe <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007efa:	2303      	movs	r3, #3
 8007efc:	e057      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007efe:	4b10      	ldr	r3, [pc, #64]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0f0      	beq.n	8007eec <HAL_RCC_OscConfig+0x478>
 8007f0a:	e04f      	b.n	8007fac <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f0c:	4b0c      	ldr	r3, [pc, #48]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a0b      	ldr	r2, [pc, #44]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007f12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f18:	f7fc fd76 	bl	8004a08 <HAL_GetTick>
 8007f1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f1e:	e008      	b.n	8007f32 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f20:	f7fc fd72 	bl	8004a08 <HAL_GetTick>
 8007f24:	4602      	mov	r2, r0
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	1ad3      	subs	r3, r2, r3
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d901      	bls.n	8007f32 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e03d      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f32:	4b03      	ldr	r3, [pc, #12]	; (8007f40 <HAL_RCC_OscConfig+0x4cc>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1f0      	bne.n	8007f20 <HAL_RCC_OscConfig+0x4ac>
 8007f3e:	e035      	b.n	8007fac <HAL_RCC_OscConfig+0x538>
 8007f40:	40023800 	.word	0x40023800
 8007f44:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007f48:	4b1b      	ldr	r3, [pc, #108]	; (8007fb8 <HAL_RCC_OscConfig+0x544>)
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	699b      	ldr	r3, [r3, #24]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d028      	beq.n	8007fa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d121      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d11a      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f78:	4013      	ands	r3, r2
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f7e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d111      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f8e:	085b      	lsrs	r3, r3, #1
 8007f90:	3b01      	subs	r3, #1
 8007f92:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d107      	bne.n	8007fa8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d001      	beq.n	8007fac <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e000      	b.n	8007fae <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	40023800 	.word	0x40023800

08007fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d101      	bne.n	8007fd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e0d0      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fd4:	4b6a      	ldr	r3, [pc, #424]	; (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d910      	bls.n	8008004 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fe2:	4b67      	ldr	r3, [pc, #412]	; (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f023 020f 	bic.w	r2, r3, #15
 8007fea:	4965      	ldr	r1, [pc, #404]	; (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ff2:	4b63      	ldr	r3, [pc, #396]	; (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d001      	beq.n	8008004 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e0b8      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f003 0302 	and.w	r3, r3, #2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d020      	beq.n	8008052 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d005      	beq.n	8008028 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800801c:	4b59      	ldr	r3, [pc, #356]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	4a58      	ldr	r2, [pc, #352]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008026:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0308 	and.w	r3, r3, #8
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008034:	4b53      	ldr	r3, [pc, #332]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	4a52      	ldr	r2, [pc, #328]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800803a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800803e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008040:	4b50      	ldr	r3, [pc, #320]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	494d      	ldr	r1, [pc, #308]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800804e:	4313      	orrs	r3, r2
 8008050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	d040      	beq.n	80080e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	2b01      	cmp	r3, #1
 8008064:	d107      	bne.n	8008076 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008066:	4b47      	ldr	r3, [pc, #284]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d115      	bne.n	800809e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008072:	2301      	movs	r3, #1
 8008074:	e07f      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b02      	cmp	r3, #2
 800807c:	d107      	bne.n	800808e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800807e:	4b41      	ldr	r3, [pc, #260]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008086:	2b00      	cmp	r3, #0
 8008088:	d109      	bne.n	800809e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e073      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800808e:	4b3d      	ldr	r3, [pc, #244]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f003 0302 	and.w	r3, r3, #2
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e06b      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800809e:	4b39      	ldr	r3, [pc, #228]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f023 0203 	bic.w	r2, r3, #3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	4936      	ldr	r1, [pc, #216]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 80080ac:	4313      	orrs	r3, r2
 80080ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080b0:	f7fc fcaa 	bl	8004a08 <HAL_GetTick>
 80080b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080b6:	e00a      	b.n	80080ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080b8:	f7fc fca6 	bl	8004a08 <HAL_GetTick>
 80080bc:	4602      	mov	r2, r0
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d901      	bls.n	80080ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80080ca:	2303      	movs	r3, #3
 80080cc:	e053      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ce:	4b2d      	ldr	r3, [pc, #180]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f003 020c 	and.w	r2, r3, #12
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	429a      	cmp	r2, r3
 80080de:	d1eb      	bne.n	80080b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080e0:	4b27      	ldr	r3, [pc, #156]	; (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d210      	bcs.n	8008110 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ee:	4b24      	ldr	r3, [pc, #144]	; (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f023 020f 	bic.w	r2, r3, #15
 80080f6:	4922      	ldr	r1, [pc, #136]	; (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080fe:	4b20      	ldr	r3, [pc, #128]	; (8008180 <HAL_RCC_ClockConfig+0x1c4>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d001      	beq.n	8008110 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e032      	b.n	8008176 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	d008      	beq.n	800812e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800811c:	4b19      	ldr	r3, [pc, #100]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	4916      	ldr	r1, [pc, #88]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800812a:	4313      	orrs	r3, r2
 800812c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0308 	and.w	r3, r3, #8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d009      	beq.n	800814e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800813a:	4b12      	ldr	r3, [pc, #72]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	691b      	ldr	r3, [r3, #16]
 8008146:	00db      	lsls	r3, r3, #3
 8008148:	490e      	ldr	r1, [pc, #56]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 800814a:	4313      	orrs	r3, r2
 800814c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800814e:	f000 f821 	bl	8008194 <HAL_RCC_GetSysClockFreq>
 8008152:	4602      	mov	r2, r0
 8008154:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <HAL_RCC_ClockConfig+0x1c8>)
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	091b      	lsrs	r3, r3, #4
 800815a:	f003 030f 	and.w	r3, r3, #15
 800815e:	490a      	ldr	r1, [pc, #40]	; (8008188 <HAL_RCC_ClockConfig+0x1cc>)
 8008160:	5ccb      	ldrb	r3, [r1, r3]
 8008162:	fa22 f303 	lsr.w	r3, r2, r3
 8008166:	4a09      	ldr	r2, [pc, #36]	; (800818c <HAL_RCC_ClockConfig+0x1d0>)
 8008168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800816a:	4b09      	ldr	r3, [pc, #36]	; (8008190 <HAL_RCC_ClockConfig+0x1d4>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4618      	mov	r0, r3
 8008170:	f7fb ff26 	bl	8003fc0 <HAL_InitTick>

  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	40023c00 	.word	0x40023c00
 8008184:	40023800 	.word	0x40023800
 8008188:	080436b0 	.word	0x080436b0
 800818c:	20000034 	.word	0x20000034
 8008190:	20000038 	.word	0x20000038

08008194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008198:	b090      	sub	sp, #64	; 0x40
 800819a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	637b      	str	r3, [r7, #52]	; 0x34
 80081a0:	2300      	movs	r3, #0
 80081a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081a4:	2300      	movs	r3, #0
 80081a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80081a8:	2300      	movs	r3, #0
 80081aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081ac:	4b59      	ldr	r3, [pc, #356]	; (8008314 <HAL_RCC_GetSysClockFreq+0x180>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	f003 030c 	and.w	r3, r3, #12
 80081b4:	2b08      	cmp	r3, #8
 80081b6:	d00d      	beq.n	80081d4 <HAL_RCC_GetSysClockFreq+0x40>
 80081b8:	2b08      	cmp	r3, #8
 80081ba:	f200 80a1 	bhi.w	8008300 <HAL_RCC_GetSysClockFreq+0x16c>
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <HAL_RCC_GetSysClockFreq+0x34>
 80081c2:	2b04      	cmp	r3, #4
 80081c4:	d003      	beq.n	80081ce <HAL_RCC_GetSysClockFreq+0x3a>
 80081c6:	e09b      	b.n	8008300 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80081c8:	4b53      	ldr	r3, [pc, #332]	; (8008318 <HAL_RCC_GetSysClockFreq+0x184>)
 80081ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80081cc:	e09b      	b.n	8008306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80081ce:	4b53      	ldr	r3, [pc, #332]	; (800831c <HAL_RCC_GetSysClockFreq+0x188>)
 80081d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80081d2:	e098      	b.n	8008306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80081d4:	4b4f      	ldr	r3, [pc, #316]	; (8008314 <HAL_RCC_GetSysClockFreq+0x180>)
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80081de:	4b4d      	ldr	r3, [pc, #308]	; (8008314 <HAL_RCC_GetSysClockFreq+0x180>)
 80081e0:	685b      	ldr	r3, [r3, #4]
 80081e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d028      	beq.n	800823c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081ea:	4b4a      	ldr	r3, [pc, #296]	; (8008314 <HAL_RCC_GetSysClockFreq+0x180>)
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	099b      	lsrs	r3, r3, #6
 80081f0:	2200      	movs	r2, #0
 80081f2:	623b      	str	r3, [r7, #32]
 80081f4:	627a      	str	r2, [r7, #36]	; 0x24
 80081f6:	6a3b      	ldr	r3, [r7, #32]
 80081f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80081fc:	2100      	movs	r1, #0
 80081fe:	4b47      	ldr	r3, [pc, #284]	; (800831c <HAL_RCC_GetSysClockFreq+0x188>)
 8008200:	fb03 f201 	mul.w	r2, r3, r1
 8008204:	2300      	movs	r3, #0
 8008206:	fb00 f303 	mul.w	r3, r0, r3
 800820a:	4413      	add	r3, r2
 800820c:	4a43      	ldr	r2, [pc, #268]	; (800831c <HAL_RCC_GetSysClockFreq+0x188>)
 800820e:	fba0 1202 	umull	r1, r2, r0, r2
 8008212:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008214:	460a      	mov	r2, r1
 8008216:	62ba      	str	r2, [r7, #40]	; 0x28
 8008218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800821a:	4413      	add	r3, r2
 800821c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800821e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008220:	2200      	movs	r2, #0
 8008222:	61bb      	str	r3, [r7, #24]
 8008224:	61fa      	str	r2, [r7, #28]
 8008226:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800822a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800822e:	f7f8 f847 	bl	80002c0 <__aeabi_uldivmod>
 8008232:	4602      	mov	r2, r0
 8008234:	460b      	mov	r3, r1
 8008236:	4613      	mov	r3, r2
 8008238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800823a:	e053      	b.n	80082e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800823c:	4b35      	ldr	r3, [pc, #212]	; (8008314 <HAL_RCC_GetSysClockFreq+0x180>)
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	099b      	lsrs	r3, r3, #6
 8008242:	2200      	movs	r2, #0
 8008244:	613b      	str	r3, [r7, #16]
 8008246:	617a      	str	r2, [r7, #20]
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800824e:	f04f 0b00 	mov.w	fp, #0
 8008252:	4652      	mov	r2, sl
 8008254:	465b      	mov	r3, fp
 8008256:	f04f 0000 	mov.w	r0, #0
 800825a:	f04f 0100 	mov.w	r1, #0
 800825e:	0159      	lsls	r1, r3, #5
 8008260:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008264:	0150      	lsls	r0, r2, #5
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	ebb2 080a 	subs.w	r8, r2, sl
 800826e:	eb63 090b 	sbc.w	r9, r3, fp
 8008272:	f04f 0200 	mov.w	r2, #0
 8008276:	f04f 0300 	mov.w	r3, #0
 800827a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800827e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008282:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008286:	ebb2 0408 	subs.w	r4, r2, r8
 800828a:	eb63 0509 	sbc.w	r5, r3, r9
 800828e:	f04f 0200 	mov.w	r2, #0
 8008292:	f04f 0300 	mov.w	r3, #0
 8008296:	00eb      	lsls	r3, r5, #3
 8008298:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800829c:	00e2      	lsls	r2, r4, #3
 800829e:	4614      	mov	r4, r2
 80082a0:	461d      	mov	r5, r3
 80082a2:	eb14 030a 	adds.w	r3, r4, sl
 80082a6:	603b      	str	r3, [r7, #0]
 80082a8:	eb45 030b 	adc.w	r3, r5, fp
 80082ac:	607b      	str	r3, [r7, #4]
 80082ae:	f04f 0200 	mov.w	r2, #0
 80082b2:	f04f 0300 	mov.w	r3, #0
 80082b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80082ba:	4629      	mov	r1, r5
 80082bc:	028b      	lsls	r3, r1, #10
 80082be:	4621      	mov	r1, r4
 80082c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80082c4:	4621      	mov	r1, r4
 80082c6:	028a      	lsls	r2, r1, #10
 80082c8:	4610      	mov	r0, r2
 80082ca:	4619      	mov	r1, r3
 80082cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082ce:	2200      	movs	r2, #0
 80082d0:	60bb      	str	r3, [r7, #8]
 80082d2:	60fa      	str	r2, [r7, #12]
 80082d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082d8:	f7f7 fff2 	bl	80002c0 <__aeabi_uldivmod>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4613      	mov	r3, r2
 80082e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80082e4:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <HAL_RCC_GetSysClockFreq+0x180>)
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	0c1b      	lsrs	r3, r3, #16
 80082ea:	f003 0303 	and.w	r3, r3, #3
 80082ee:	3301      	adds	r3, #1
 80082f0:	005b      	lsls	r3, r3, #1
 80082f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80082f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80082fe:	e002      	b.n	8008306 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008300:	4b05      	ldr	r3, [pc, #20]	; (8008318 <HAL_RCC_GetSysClockFreq+0x184>)
 8008302:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008304:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008308:	4618      	mov	r0, r3
 800830a:	3740      	adds	r7, #64	; 0x40
 800830c:	46bd      	mov	sp, r7
 800830e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008312:	bf00      	nop
 8008314:	40023800 	.word	0x40023800
 8008318:	00f42400 	.word	0x00f42400
 800831c:	017d7840 	.word	0x017d7840

08008320 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008320:	b480      	push	{r7}
 8008322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008324:	4b03      	ldr	r3, [pc, #12]	; (8008334 <HAL_RCC_GetHCLKFreq+0x14>)
 8008326:	681b      	ldr	r3, [r3, #0]
}
 8008328:	4618      	mov	r0, r3
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	20000034 	.word	0x20000034

08008338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800833c:	f7ff fff0 	bl	8008320 <HAL_RCC_GetHCLKFreq>
 8008340:	4602      	mov	r2, r0
 8008342:	4b05      	ldr	r3, [pc, #20]	; (8008358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	0a9b      	lsrs	r3, r3, #10
 8008348:	f003 0307 	and.w	r3, r3, #7
 800834c:	4903      	ldr	r1, [pc, #12]	; (800835c <HAL_RCC_GetPCLK1Freq+0x24>)
 800834e:	5ccb      	ldrb	r3, [r1, r3]
 8008350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008354:	4618      	mov	r0, r3
 8008356:	bd80      	pop	{r7, pc}
 8008358:	40023800 	.word	0x40023800
 800835c:	080436c0 	.word	0x080436c0

08008360 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008364:	f7ff ffdc 	bl	8008320 <HAL_RCC_GetHCLKFreq>
 8008368:	4602      	mov	r2, r0
 800836a:	4b05      	ldr	r3, [pc, #20]	; (8008380 <HAL_RCC_GetPCLK2Freq+0x20>)
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	0b5b      	lsrs	r3, r3, #13
 8008370:	f003 0307 	and.w	r3, r3, #7
 8008374:	4903      	ldr	r1, [pc, #12]	; (8008384 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008376:	5ccb      	ldrb	r3, [r1, r3]
 8008378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800837c:	4618      	mov	r0, r3
 800837e:	bd80      	pop	{r7, pc}
 8008380:	40023800 	.word	0x40023800
 8008384:	080436c0 	.word	0x080436c0

08008388 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	220f      	movs	r2, #15
 8008396:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008398:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <HAL_RCC_GetClockConfig+0x5c>)
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f003 0203 	and.w	r2, r3, #3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80083a4:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <HAL_RCC_GetClockConfig+0x5c>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80083b0:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <HAL_RCC_GetClockConfig+0x5c>)
 80083b2:	689b      	ldr	r3, [r3, #8]
 80083b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80083bc:	4b09      	ldr	r3, [pc, #36]	; (80083e4 <HAL_RCC_GetClockConfig+0x5c>)
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	08db      	lsrs	r3, r3, #3
 80083c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80083ca:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <HAL_RCC_GetClockConfig+0x60>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f003 020f 	and.w	r2, r3, #15
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	601a      	str	r2, [r3, #0]
}
 80083d6:	bf00      	nop
 80083d8:	370c      	adds	r7, #12
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
 80083e2:	bf00      	nop
 80083e4:	40023800 	.word	0x40023800
 80083e8:	40023c00 	.word	0x40023c00

080083ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80083f4:	2300      	movs	r3, #0
 80083f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80083f8:	2300      	movs	r3, #0
 80083fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008404:	2300      	movs	r3, #0
 8008406:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 0301 	and.w	r3, r3, #1
 8008410:	2b00      	cmp	r3, #0
 8008412:	d012      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008414:	4b69      	ldr	r3, [pc, #420]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	4a68      	ldr	r2, [pc, #416]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800841e:	6093      	str	r3, [r2, #8]
 8008420:	4b66      	ldr	r3, [pc, #408]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008428:	4964      	ldr	r1, [pc, #400]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800842a:	4313      	orrs	r3, r2
 800842c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008436:	2301      	movs	r3, #1
 8008438:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d017      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008446:	4b5d      	ldr	r3, [pc, #372]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800844c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008454:	4959      	ldr	r1, [pc, #356]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008456:	4313      	orrs	r3, r2
 8008458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008460:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008464:	d101      	bne.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008466:	2301      	movs	r3, #1
 8008468:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800846e:	2b00      	cmp	r3, #0
 8008470:	d101      	bne.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008472:	2301      	movs	r3, #1
 8008474:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d017      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008482:	4b4e      	ldr	r3, [pc, #312]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008488:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008490:	494a      	ldr	r1, [pc, #296]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008492:	4313      	orrs	r3, r2
 8008494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084a0:	d101      	bne.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80084a2:	2301      	movs	r3, #1
 80084a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80084ae:	2301      	movs	r3, #1
 80084b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d001      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80084be:	2301      	movs	r3, #1
 80084c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0320 	and.w	r3, r3, #32
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 808b 	beq.w	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80084d0:	4b3a      	ldr	r3, [pc, #232]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d4:	4a39      	ldr	r2, [pc, #228]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084da:	6413      	str	r3, [r2, #64]	; 0x40
 80084dc:	4b37      	ldr	r3, [pc, #220]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084e4:	60bb      	str	r3, [r7, #8]
 80084e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80084e8:	4b35      	ldr	r3, [pc, #212]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a34      	ldr	r2, [pc, #208]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084f4:	f7fc fa88 	bl	8004a08 <HAL_GetTick>
 80084f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084fa:	e008      	b.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084fc:	f7fc fa84 	bl	8004a08 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b64      	cmp	r3, #100	; 0x64
 8008508:	d901      	bls.n	800850e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e357      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800850e:	4b2c      	ldr	r3, [pc, #176]	; (80085c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008516:	2b00      	cmp	r3, #0
 8008518:	d0f0      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800851a:	4b28      	ldr	r3, [pc, #160]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800851c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008522:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d035      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	429a      	cmp	r2, r3
 8008536:	d02e      	beq.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008538:	4b20      	ldr	r3, [pc, #128]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800853a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800853c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008540:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008542:	4b1e      	ldr	r3, [pc, #120]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008546:	4a1d      	ldr	r2, [pc, #116]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800854c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800854e:	4b1b      	ldr	r3, [pc, #108]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008552:	4a1a      	ldr	r2, [pc, #104]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008558:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800855a:	4a18      	ldr	r2, [pc, #96]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008560:	4b16      	ldr	r3, [pc, #88]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008564:	f003 0301 	and.w	r3, r3, #1
 8008568:	2b01      	cmp	r3, #1
 800856a:	d114      	bne.n	8008596 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800856c:	f7fc fa4c 	bl	8004a08 <HAL_GetTick>
 8008570:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008572:	e00a      	b.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008574:	f7fc fa48 	bl	8004a08 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008582:	4293      	cmp	r3, r2
 8008584:	d901      	bls.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008586:	2303      	movs	r3, #3
 8008588:	e319      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800858a:	4b0c      	ldr	r3, [pc, #48]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800858c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d0ee      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800859e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085a2:	d111      	bne.n	80085c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80085a4:	4b05      	ldr	r3, [pc, #20]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085a6:	689b      	ldr	r3, [r3, #8]
 80085a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80085b0:	4b04      	ldr	r3, [pc, #16]	; (80085c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80085b2:	400b      	ands	r3, r1
 80085b4:	4901      	ldr	r1, [pc, #4]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80085b6:	4313      	orrs	r3, r2
 80085b8:	608b      	str	r3, [r1, #8]
 80085ba:	e00b      	b.n	80085d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80085bc:	40023800 	.word	0x40023800
 80085c0:	40007000 	.word	0x40007000
 80085c4:	0ffffcff 	.word	0x0ffffcff
 80085c8:	4baa      	ldr	r3, [pc, #680]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	4aa9      	ldr	r2, [pc, #676]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80085d2:	6093      	str	r3, [r2, #8]
 80085d4:	4ba7      	ldr	r3, [pc, #668]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085e0:	49a4      	ldr	r1, [pc, #656]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d010      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085f2:	4ba0      	ldr	r3, [pc, #640]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085f8:	4a9e      	ldr	r2, [pc, #632]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008602:	4b9c      	ldr	r3, [pc, #624]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008604:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860c:	4999      	ldr	r1, [pc, #612]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800860e:	4313      	orrs	r3, r2
 8008610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00a      	beq.n	8008636 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008620:	4b94      	ldr	r3, [pc, #592]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008626:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800862e:	4991      	ldr	r1, [pc, #580]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008630:	4313      	orrs	r3, r2
 8008632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800863e:	2b00      	cmp	r3, #0
 8008640:	d00a      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008642:	4b8c      	ldr	r3, [pc, #560]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008648:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008650:	4988      	ldr	r1, [pc, #544]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008652:	4313      	orrs	r3, r2
 8008654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d00a      	beq.n	800867a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008664:	4b83      	ldr	r3, [pc, #524]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800866a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008672:	4980      	ldr	r1, [pc, #512]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008674:	4313      	orrs	r3, r2
 8008676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008686:	4b7b      	ldr	r3, [pc, #492]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800868c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008694:	4977      	ldr	r1, [pc, #476]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008696:	4313      	orrs	r3, r2
 8008698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00a      	beq.n	80086be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80086a8:	4b72      	ldr	r3, [pc, #456]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ae:	f023 0203 	bic.w	r2, r3, #3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086b6:	496f      	ldr	r1, [pc, #444]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086ca:	4b6a      	ldr	r3, [pc, #424]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d0:	f023 020c 	bic.w	r2, r3, #12
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086d8:	4966      	ldr	r1, [pc, #408]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00a      	beq.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086ec:	4b61      	ldr	r3, [pc, #388]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086fa:	495e      	ldr	r1, [pc, #376]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00a      	beq.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800870e:	4b59      	ldr	r3, [pc, #356]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008710:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008714:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800871c:	4955      	ldr	r1, [pc, #340]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800871e:	4313      	orrs	r3, r2
 8008720:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00a      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008730:	4b50      	ldr	r3, [pc, #320]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008736:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800873e:	494d      	ldr	r1, [pc, #308]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008740:	4313      	orrs	r3, r2
 8008742:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00a      	beq.n	8008768 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008752:	4b48      	ldr	r3, [pc, #288]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008758:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008760:	4944      	ldr	r1, [pc, #272]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008762:	4313      	orrs	r3, r2
 8008764:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d00a      	beq.n	800878a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008774:	4b3f      	ldr	r3, [pc, #252]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800877a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008782:	493c      	ldr	r1, [pc, #240]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008784:	4313      	orrs	r3, r2
 8008786:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00a      	beq.n	80087ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008796:	4b37      	ldr	r3, [pc, #220]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800879c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80087a4:	4933      	ldr	r1, [pc, #204]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d00a      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80087b8:	4b2e      	ldr	r3, [pc, #184]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80087c6:	492b      	ldr	r1, [pc, #172]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d011      	beq.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80087da:	4b26      	ldr	r3, [pc, #152]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087e8:	4922      	ldr	r1, [pc, #136]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087ea:	4313      	orrs	r3, r2
 80087ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087f8:	d101      	bne.n	80087fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80087fa:	2301      	movs	r3, #1
 80087fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0308 	and.w	r3, r3, #8
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800880a:	2301      	movs	r3, #1
 800880c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800881a:	4b16      	ldr	r3, [pc, #88]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800881c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008820:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008828:	4912      	ldr	r1, [pc, #72]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800882a:	4313      	orrs	r3, r2
 800882c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00b      	beq.n	8008854 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800883c:	4b0d      	ldr	r3, [pc, #52]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800883e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008842:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800884c:	4909      	ldr	r1, [pc, #36]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800884e:	4313      	orrs	r3, r2
 8008850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008854:	69fb      	ldr	r3, [r7, #28]
 8008856:	2b01      	cmp	r3, #1
 8008858:	d006      	beq.n	8008868 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008862:	2b00      	cmp	r3, #0
 8008864:	f000 80d9 	beq.w	8008a1a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008868:	4b02      	ldr	r3, [pc, #8]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a01      	ldr	r2, [pc, #4]	; (8008874 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800886e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008872:	e001      	b.n	8008878 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008874:	40023800 	.word	0x40023800
 8008878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800887a:	f7fc f8c5 	bl	8004a08 <HAL_GetTick>
 800887e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008880:	e008      	b.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008882:	f7fc f8c1 	bl	8004a08 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	697b      	ldr	r3, [r7, #20]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b64      	cmp	r3, #100	; 0x64
 800888e:	d901      	bls.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e194      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008894:	4b6c      	ldr	r3, [pc, #432]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f0      	bne.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f003 0301 	and.w	r3, r3, #1
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d021      	beq.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d11d      	bne.n	80088f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80088b4:	4b64      	ldr	r3, [pc, #400]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ba:	0c1b      	lsrs	r3, r3, #16
 80088bc:	f003 0303 	and.w	r3, r3, #3
 80088c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80088c2:	4b61      	ldr	r3, [pc, #388]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c8:	0e1b      	lsrs	r3, r3, #24
 80088ca:	f003 030f 	and.w	r3, r3, #15
 80088ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	019a      	lsls	r2, r3, #6
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	041b      	lsls	r3, r3, #16
 80088da:	431a      	orrs	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	061b      	lsls	r3, r3, #24
 80088e0:	431a      	orrs	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689b      	ldr	r3, [r3, #8]
 80088e6:	071b      	lsls	r3, r3, #28
 80088e8:	4957      	ldr	r1, [pc, #348]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d004      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008900:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008904:	d00a      	beq.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800890e:	2b00      	cmp	r3, #0
 8008910:	d02e      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800891a:	d129      	bne.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800891c:	4b4a      	ldr	r3, [pc, #296]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800891e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008922:	0c1b      	lsrs	r3, r3, #16
 8008924:	f003 0303 	and.w	r3, r3, #3
 8008928:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800892a:	4b47      	ldr	r3, [pc, #284]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800892c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008930:	0f1b      	lsrs	r3, r3, #28
 8008932:	f003 0307 	and.w	r3, r3, #7
 8008936:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	685b      	ldr	r3, [r3, #4]
 800893c:	019a      	lsls	r2, r3, #6
 800893e:	693b      	ldr	r3, [r7, #16]
 8008940:	041b      	lsls	r3, r3, #16
 8008942:	431a      	orrs	r2, r3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	061b      	lsls	r3, r3, #24
 800894a:	431a      	orrs	r2, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	071b      	lsls	r3, r3, #28
 8008950:	493d      	ldr	r1, [pc, #244]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008952:	4313      	orrs	r3, r2
 8008954:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008958:	4b3b      	ldr	r3, [pc, #236]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800895a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800895e:	f023 021f 	bic.w	r2, r3, #31
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	3b01      	subs	r3, #1
 8008968:	4937      	ldr	r1, [pc, #220]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800896a:	4313      	orrs	r3, r2
 800896c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	d01d      	beq.n	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800897c:	4b32      	ldr	r3, [pc, #200]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800897e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008982:	0e1b      	lsrs	r3, r3, #24
 8008984:	f003 030f 	and.w	r3, r3, #15
 8008988:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800898a:	4b2f      	ldr	r3, [pc, #188]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800898c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008990:	0f1b      	lsrs	r3, r3, #28
 8008992:	f003 0307 	and.w	r3, r3, #7
 8008996:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	019a      	lsls	r2, r3, #6
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	041b      	lsls	r3, r3, #16
 80089a4:	431a      	orrs	r2, r3
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	061b      	lsls	r3, r3, #24
 80089aa:	431a      	orrs	r2, r3
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	071b      	lsls	r3, r3, #28
 80089b0:	4925      	ldr	r1, [pc, #148]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d011      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	019a      	lsls	r2, r3, #6
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	041b      	lsls	r3, r3, #16
 80089d0:	431a      	orrs	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	061b      	lsls	r3, r3, #24
 80089d8:	431a      	orrs	r2, r3
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	689b      	ldr	r3, [r3, #8]
 80089de:	071b      	lsls	r3, r3, #28
 80089e0:	4919      	ldr	r1, [pc, #100]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089e2:	4313      	orrs	r3, r2
 80089e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80089e8:	4b17      	ldr	r3, [pc, #92]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a16      	ldr	r2, [pc, #88]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089f4:	f7fc f808 	bl	8004a08 <HAL_GetTick>
 80089f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089fa:	e008      	b.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089fc:	f7fc f804 	bl	8004a08 <HAL_GetTick>
 8008a00:	4602      	mov	r2, r0
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	2b64      	cmp	r3, #100	; 0x64
 8008a08:	d901      	bls.n	8008a0e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a0a:	2303      	movs	r3, #3
 8008a0c:	e0d7      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008a0e:	4b0e      	ldr	r3, [pc, #56]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d0f0      	beq.n	80089fc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	f040 80cd 	bne.w	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008a22:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a08      	ldr	r2, [pc, #32]	; (8008a48 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008a28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a2e:	f7fb ffeb 	bl	8004a08 <HAL_GetTick>
 8008a32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a34:	e00a      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a36:	f7fb ffe7 	bl	8004a08 <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	2b64      	cmp	r3, #100	; 0x64
 8008a42:	d903      	bls.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e0ba      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008a48:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a4c:	4b5e      	ldr	r3, [pc, #376]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a58:	d0ed      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d003      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d009      	beq.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d02e      	beq.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d12a      	bne.n	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a82:	4b51      	ldr	r3, [pc, #324]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a88:	0c1b      	lsrs	r3, r3, #16
 8008a8a:	f003 0303 	and.w	r3, r3, #3
 8008a8e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a90:	4b4d      	ldr	r3, [pc, #308]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a96:	0f1b      	lsrs	r3, r3, #28
 8008a98:	f003 0307 	and.w	r3, r3, #7
 8008a9c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	019a      	lsls	r2, r3, #6
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	041b      	lsls	r3, r3, #16
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	061b      	lsls	r3, r3, #24
 8008ab0:	431a      	orrs	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	071b      	lsls	r3, r3, #28
 8008ab6:	4944      	ldr	r1, [pc, #272]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ab8:	4313      	orrs	r3, r2
 8008aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008abe:	4b42      	ldr	r3, [pc, #264]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ac4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008acc:	3b01      	subs	r3, #1
 8008ace:	021b      	lsls	r3, r3, #8
 8008ad0:	493d      	ldr	r1, [pc, #244]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d022      	beq.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ae8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008aec:	d11d      	bne.n	8008b2a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008aee:	4b36      	ldr	r3, [pc, #216]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008af4:	0e1b      	lsrs	r3, r3, #24
 8008af6:	f003 030f 	and.w	r3, r3, #15
 8008afa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008afc:	4b32      	ldr	r3, [pc, #200]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b02:	0f1b      	lsrs	r3, r3, #28
 8008b04:	f003 0307 	and.w	r3, r3, #7
 8008b08:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	019a      	lsls	r2, r3, #6
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a1b      	ldr	r3, [r3, #32]
 8008b14:	041b      	lsls	r3, r3, #16
 8008b16:	431a      	orrs	r2, r3
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	061b      	lsls	r3, r3, #24
 8008b1c:	431a      	orrs	r2, r3
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	071b      	lsls	r3, r3, #28
 8008b22:	4929      	ldr	r1, [pc, #164]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b24:	4313      	orrs	r3, r2
 8008b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0308 	and.w	r3, r3, #8
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d028      	beq.n	8008b88 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008b36:	4b24      	ldr	r3, [pc, #144]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b3c:	0e1b      	lsrs	r3, r3, #24
 8008b3e:	f003 030f 	and.w	r3, r3, #15
 8008b42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008b44:	4b20      	ldr	r3, [pc, #128]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b4a:	0c1b      	lsrs	r3, r3, #16
 8008b4c:	f003 0303 	and.w	r3, r3, #3
 8008b50:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	695b      	ldr	r3, [r3, #20]
 8008b56:	019a      	lsls	r2, r3, #6
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	041b      	lsls	r3, r3, #16
 8008b5c:	431a      	orrs	r2, r3
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	061b      	lsls	r3, r3, #24
 8008b62:	431a      	orrs	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	071b      	lsls	r3, r3, #28
 8008b6a:	4917      	ldr	r1, [pc, #92]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008b72:	4b15      	ldr	r3, [pc, #84]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b80:	4911      	ldr	r1, [pc, #68]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b82:	4313      	orrs	r3, r2
 8008b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b88:	4b0f      	ldr	r3, [pc, #60]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a0e      	ldr	r2, [pc, #56]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b94:	f7fb ff38 	bl	8004a08 <HAL_GetTick>
 8008b98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b9a:	e008      	b.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b9c:	f7fb ff34 	bl	8004a08 <HAL_GetTick>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	1ad3      	subs	r3, r2, r3
 8008ba6:	2b64      	cmp	r3, #100	; 0x64
 8008ba8:	d901      	bls.n	8008bae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e007      	b.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008bae:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bba:	d1ef      	bne.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3720      	adds	r7, #32
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	40023800 	.word	0x40023800

08008bcc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d101      	bne.n	8008be2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	e071      	b.n	8008cc6 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	7f5b      	ldrb	r3, [r3, #29]
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d105      	bne.n	8008bf8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7f9 fb28 	bl	8002248 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f003 0310 	and.w	r3, r3, #16
 8008c08:	2b10      	cmp	r3, #16
 8008c0a:	d053      	beq.n	8008cb4 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	22ca      	movs	r2, #202	; 0xca
 8008c12:	625a      	str	r2, [r3, #36]	; 0x24
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2253      	movs	r2, #83	; 0x53
 8008c1a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f000 fb77 	bl	8009310 <RTC_EnterInitMode>
 8008c22:	4603      	mov	r3, r0
 8008c24:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d12a      	bne.n	8008c82 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	6899      	ldr	r1, [r3, #8]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	4b26      	ldr	r3, [pc, #152]	; (8008cd0 <HAL_RTC_Init+0x104>)
 8008c38:	400b      	ands	r3, r1
 8008c3a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	6899      	ldr	r1, [r3, #8]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	685a      	ldr	r2, [r3, #4]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	431a      	orrs	r2, r3
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	695b      	ldr	r3, [r3, #20]
 8008c50:	431a      	orrs	r2, r3
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	430a      	orrs	r2, r1
 8008c58:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	687a      	ldr	r2, [r7, #4]
 8008c60:	68d2      	ldr	r2, [r2, #12]
 8008c62:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	6919      	ldr	r1, [r3, #16]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	041a      	lsls	r2, r3, #16
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	430a      	orrs	r2, r1
 8008c76:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fb80 	bl	800937e <RTC_ExitInitMode>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008c82:	7bfb      	ldrb	r3, [r7, #15]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d110      	bne.n	8008caa <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->OR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f022 0208 	bic.w	r2, r2, #8
 8008c96:	64da      	str	r2, [r3, #76]	; 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	699a      	ldr	r2, [r3, #24]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	64da      	str	r2, [r3, #76]	; 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	22ff      	movs	r2, #255	; 0xff
 8008cb0:	625a      	str	r2, [r3, #36]	; 0x24
 8008cb2:	e001      	b.n	8008cb8 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d102      	bne.n	8008cc4 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	ff8fffbf 	.word	0xff8fffbf

08008cd4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008cd4:	b590      	push	{r4, r7, lr}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008ce0:	2300      	movs	r3, #0
 8008ce2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	7f1b      	ldrb	r3, [r3, #28]
 8008ce8:	2b01      	cmp	r3, #1
 8008cea:	d101      	bne.n	8008cf0 <HAL_RTC_SetTime+0x1c>
 8008cec:	2302      	movs	r3, #2
 8008cee:	e085      	b.n	8008dfc <HAL_RTC_SetTime+0x128>
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d126      	bne.n	8008d50 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d102      	bne.n	8008d16 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	2200      	movs	r2, #0
 8008d14:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f000 fb54 	bl	80093c8 <RTC_ByteToBcd2>
 8008d20:	4603      	mov	r3, r0
 8008d22:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	785b      	ldrb	r3, [r3, #1]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f000 fb4d 	bl	80093c8 <RTC_ByteToBcd2>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008d32:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	789b      	ldrb	r3, [r3, #2]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 fb45 	bl	80093c8 <RTC_ByteToBcd2>
 8008d3e:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008d40:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	78db      	ldrb	r3, [r3, #3]
 8008d48:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	617b      	str	r3, [r7, #20]
 8008d4e:	e018      	b.n	8008d82 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689b      	ldr	r3, [r3, #8]
 8008d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d102      	bne.n	8008d64 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2200      	movs	r2, #0
 8008d62:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	781b      	ldrb	r3, [r3, #0]
 8008d68:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	785b      	ldrb	r3, [r3, #1]
 8008d6e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008d70:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8008d72:	68ba      	ldr	r2, [r7, #8]
 8008d74:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008d76:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	78db      	ldrb	r3, [r3, #3]
 8008d7c:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	22ca      	movs	r2, #202	; 0xca
 8008d88:	625a      	str	r2, [r3, #36]	; 0x24
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2253      	movs	r2, #83	; 0x53
 8008d90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	f000 fabc 	bl	8009310 <RTC_EnterInitMode>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008d9c:	7cfb      	ldrb	r3, [r7, #19]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d11e      	bne.n	8008de0 <HAL_RTC_SetTime+0x10c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	6979      	ldr	r1, [r7, #20]
 8008da8:	4b16      	ldr	r3, [pc, #88]	; (8008e04 <HAL_RTC_SetTime+0x130>)
 8008daa:	400b      	ands	r3, r1
 8008dac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	689a      	ldr	r2, [r3, #8]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008dbc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6899      	ldr	r1, [r3, #8]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	68da      	ldr	r2, [r3, #12]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	431a      	orrs	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	430a      	orrs	r2, r1
 8008dd4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 fad1 	bl	800937e <RTC_ExitInitMode>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008de0:	7cfb      	ldrb	r3, [r7, #19]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d102      	bne.n	8008dec <HAL_RTC_SetTime+0x118>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2201      	movs	r2, #1
 8008dea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	22ff      	movs	r2, #255	; 0xff
 8008df2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2200      	movs	r2, #0
 8008df8:	771a      	strb	r2, [r3, #28]

  return status;
 8008dfa:	7cfb      	ldrb	r3, [r7, #19]
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	371c      	adds	r7, #28
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd90      	pop	{r4, r7, pc}
 8008e04:	007f7f7f 	.word	0x007f7f7f

08008e08 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008e14:	2300      	movs	r3, #0
 8008e16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	691b      	ldr	r3, [r3, #16]
 8008e28:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	681a      	ldr	r2, [r3, #0]
 8008e36:	4b22      	ldr	r3, [pc, #136]	; (8008ec0 <HAL_RTC_GetTime+0xb8>)
 8008e38:	4013      	ands	r3, r2
 8008e3a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	0c1b      	lsrs	r3, r3, #16
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	0a1b      	lsrs	r3, r3, #8
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e56:	b2da      	uxtb	r2, r3
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e64:	b2da      	uxtb	r2, r3
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	0d9b      	lsrs	r3, r3, #22
 8008e6e:	b2db      	uxtb	r3, r3
 8008e70:	f003 0301 	and.w	r3, r3, #1
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d11a      	bne.n	8008eb6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	781b      	ldrb	r3, [r3, #0]
 8008e84:	4618      	mov	r0, r3
 8008e86:	f000 fabd 	bl	8009404 <RTC_Bcd2ToByte>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	785b      	ldrb	r3, [r3, #1]
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 fab4 	bl	8009404 <RTC_Bcd2ToByte>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	461a      	mov	r2, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	789b      	ldrb	r3, [r3, #2]
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f000 faab 	bl	8009404 <RTC_Bcd2ToByte>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	461a      	mov	r2, r3
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008eb6:	2300      	movs	r3, #0
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	007f7f7f 	.word	0x007f7f7f

08008ec4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008ec4:	b590      	push	{r4, r7, lr}
 8008ec6:	b087      	sub	sp, #28
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	7f1b      	ldrb	r3, [r3, #28]
 8008ed8:	2b01      	cmp	r3, #1
 8008eda:	d101      	bne.n	8008ee0 <HAL_RTC_SetDate+0x1c>
 8008edc:	2302      	movs	r3, #2
 8008ede:	e06f      	b.n	8008fc0 <HAL_RTC_SetDate+0xfc>
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	2201      	movs	r2, #1
 8008ee4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2202      	movs	r2, #2
 8008eea:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d10e      	bne.n	8008f10 <HAL_RTC_SetDate+0x4c>
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	785b      	ldrb	r3, [r3, #1]
 8008ef6:	f003 0310 	and.w	r3, r3, #16
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d008      	beq.n	8008f10 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	785b      	ldrb	r3, [r3, #1]
 8008f02:	f023 0310 	bic.w	r3, r3, #16
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	330a      	adds	r3, #10
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d11c      	bne.n	8008f50 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	78db      	ldrb	r3, [r3, #3]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f000 fa54 	bl	80093c8 <RTC_ByteToBcd2>
 8008f20:	4603      	mov	r3, r0
 8008f22:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	785b      	ldrb	r3, [r3, #1]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	f000 fa4d 	bl	80093c8 <RTC_ByteToBcd2>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008f32:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	789b      	ldrb	r3, [r3, #2]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fa45 	bl	80093c8 <RTC_ByteToBcd2>
 8008f3e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8008f40:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	781b      	ldrb	r3, [r3, #0]
 8008f48:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	617b      	str	r3, [r7, #20]
 8008f4e:	e00e      	b.n	8008f6e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	78db      	ldrb	r3, [r3, #3]
 8008f54:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	785b      	ldrb	r3, [r3, #1]
 8008f5a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008f5c:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008f62:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	22ca      	movs	r2, #202	; 0xca
 8008f74:	625a      	str	r2, [r3, #36]	; 0x24
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2253      	movs	r2, #83	; 0x53
 8008f7c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008f7e:	68f8      	ldr	r0, [r7, #12]
 8008f80:	f000 f9c6 	bl	8009310 <RTC_EnterInitMode>
 8008f84:	4603      	mov	r3, r0
 8008f86:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008f88:	7cfb      	ldrb	r3, [r7, #19]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d10a      	bne.n	8008fa4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	6979      	ldr	r1, [r7, #20]
 8008f94:	4b0c      	ldr	r3, [pc, #48]	; (8008fc8 <HAL_RTC_SetDate+0x104>)
 8008f96:	400b      	ands	r3, r1
 8008f98:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008f9a:	68f8      	ldr	r0, [r7, #12]
 8008f9c:	f000 f9ef 	bl	800937e <RTC_ExitInitMode>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008fa4:	7cfb      	ldrb	r3, [r7, #19]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d102      	bne.n	8008fb0 <HAL_RTC_SetDate+0xec>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2201      	movs	r2, #1
 8008fae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	22ff      	movs	r2, #255	; 0xff
 8008fb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	771a      	strb	r2, [r3, #28]

  return status;
 8008fbe:	7cfb      	ldrb	r3, [r7, #19]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	371c      	adds	r7, #28
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd90      	pop	{r4, r7, pc}
 8008fc8:	00ffff3f 	.word	0x00ffff3f

08008fcc <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b086      	sub	sp, #24
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	685a      	ldr	r2, [r3, #4]
 8008fe2:	4b21      	ldr	r3, [pc, #132]	; (8009068 <HAL_RTC_GetDate+0x9c>)
 8008fe4:	4013      	ands	r3, r2
 8008fe6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	0c1b      	lsrs	r3, r3, #16
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	0a1b      	lsrs	r3, r3, #8
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 031f 	and.w	r3, r3, #31
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	b2db      	uxtb	r3, r3
 8009006:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800900a:	b2da      	uxtb	r2, r3
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	0b5b      	lsrs	r3, r3, #13
 8009014:	b2db      	uxtb	r3, r3
 8009016:	f003 0307 	and.w	r3, r3, #7
 800901a:	b2da      	uxtb	r2, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d11a      	bne.n	800905c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	78db      	ldrb	r3, [r3, #3]
 800902a:	4618      	mov	r0, r3
 800902c:	f000 f9ea 	bl	8009404 <RTC_Bcd2ToByte>
 8009030:	4603      	mov	r3, r0
 8009032:	461a      	mov	r2, r3
 8009034:	68bb      	ldr	r3, [r7, #8]
 8009036:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	785b      	ldrb	r3, [r3, #1]
 800903c:	4618      	mov	r0, r3
 800903e:	f000 f9e1 	bl	8009404 <RTC_Bcd2ToByte>
 8009042:	4603      	mov	r3, r0
 8009044:	461a      	mov	r2, r3
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	789b      	ldrb	r3, [r3, #2]
 800904e:	4618      	mov	r0, r3
 8009050:	f000 f9d8 	bl	8009404 <RTC_Bcd2ToByte>
 8009054:	4603      	mov	r3, r0
 8009056:	461a      	mov	r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800905c:	2300      	movs	r3, #0
}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	00ffff3f 	.word	0x00ffff3f

0800906c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800906c:	b590      	push	{r4, r7, lr}
 800906e:	b089      	sub	sp, #36	; 0x24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	60b9      	str	r1, [r7, #8]
 8009076:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009078:	2300      	movs	r3, #0
 800907a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 800907c:	2300      	movs	r3, #0
 800907e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	7f1b      	ldrb	r3, [r3, #28]
 8009088:	2b01      	cmp	r3, #1
 800908a:	d101      	bne.n	8009090 <HAL_RTC_SetAlarm+0x24>
 800908c:	2302      	movs	r3, #2
 800908e:	e113      	b.n	80092b8 <HAL_RTC_SetAlarm+0x24c>
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2201      	movs	r2, #1
 8009094:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	2202      	movs	r2, #2
 800909a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d137      	bne.n	8009112 <HAL_RTC_SetAlarm+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d102      	bne.n	80090b6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	2200      	movs	r2, #0
 80090b4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	4618      	mov	r0, r3
 80090bc:	f000 f984 	bl	80093c8 <RTC_ByteToBcd2>
 80090c0:	4603      	mov	r3, r0
 80090c2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80090c4:	68bb      	ldr	r3, [r7, #8]
 80090c6:	785b      	ldrb	r3, [r3, #1]
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 f97d 	bl	80093c8 <RTC_ByteToBcd2>
 80090ce:	4603      	mov	r3, r0
 80090d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 80090d2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	789b      	ldrb	r3, [r3, #2]
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 f975 	bl	80093c8 <RTC_ByteToBcd2>
 80090de:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80090e0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	78db      	ldrb	r3, [r3, #3]
 80090e8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 80090ea:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 f967 	bl	80093c8 <RTC_ByteToBcd2>
 80090fa:	4603      	mov	r3, r0
 80090fc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 80090fe:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8009106:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800910c:	4313      	orrs	r3, r2
 800910e:	61fb      	str	r3, [r7, #28]
 8009110:	e023      	b.n	800915a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911c:	2b00      	cmp	r3, #0
 800911e:	d102      	bne.n	8009126 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	2200      	movs	r2, #0
 8009124:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	785b      	ldrb	r3, [r3, #1]
 8009130:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009132:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009134:	68ba      	ldr	r2, [r7, #8]
 8009136:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8009138:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	78db      	ldrb	r3, [r3, #3]
 800913e:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8009140:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009148:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800914a:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8009150:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8009156:	4313      	orrs	r3, r2
 8009158:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8009162:	4313      	orrs	r3, r2
 8009164:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	22ca      	movs	r2, #202	; 0xca
 800916c:	625a      	str	r2, [r3, #36]	; 0x24
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2253      	movs	r2, #83	; 0x53
 8009174:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800917a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800917e:	d148      	bne.n	8009212 <HAL_RTC_SetAlarm+0x1a6>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	689a      	ldr	r2, [r3, #8]
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800918e:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800919e:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	b2da      	uxtb	r2, r3
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80091b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091b2:	f7fb fc29 	bl	8004a08 <HAL_GetTick>
 80091b6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80091b8:	e013      	b.n	80091e2 <HAL_RTC_SetAlarm+0x176>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80091ba:	f7fb fc25 	bl	8004a08 <HAL_GetTick>
 80091be:	4602      	mov	r2, r0
 80091c0:	69bb      	ldr	r3, [r7, #24]
 80091c2:	1ad3      	subs	r3, r2, r3
 80091c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091c8:	d90b      	bls.n	80091e2 <HAL_RTC_SetAlarm+0x176>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	22ff      	movs	r2, #255	; 0xff
 80091d0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2203      	movs	r2, #3
 80091d6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e06a      	b.n	80092b8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	68db      	ldr	r3, [r3, #12]
 80091e8:	f003 0301 	and.w	r3, r3, #1
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0e4      	beq.n	80091ba <HAL_RTC_SetAlarm+0x14e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	69fa      	ldr	r2, [r7, #28]
 80091f6:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	697a      	ldr	r2, [r7, #20]
 80091fe:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	689a      	ldr	r2, [r3, #8]
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800920e:	609a      	str	r2, [r3, #8]
 8009210:	e047      	b.n	80092a2 <HAL_RTC_SetAlarm+0x236>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	689a      	ldr	r2, [r3, #8]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009220:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009230:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	68db      	ldr	r3, [r3, #12]
 8009238:	b2da      	uxtb	r2, r3
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8009242:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009244:	f7fb fbe0 	bl	8004a08 <HAL_GetTick>
 8009248:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800924a:	e013      	b.n	8009274 <HAL_RTC_SetAlarm+0x208>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800924c:	f7fb fbdc 	bl	8004a08 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	69bb      	ldr	r3, [r7, #24]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800925a:	d90b      	bls.n	8009274 <HAL_RTC_SetAlarm+0x208>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	22ff      	movs	r2, #255	; 0xff
 8009262:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2203      	movs	r2, #3
 8009268:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	2200      	movs	r2, #0
 800926e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e021      	b.n	80092b8 <HAL_RTC_SetAlarm+0x24c>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68db      	ldr	r3, [r3, #12]
 800927a:	f003 0302 	and.w	r3, r3, #2
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0e4      	beq.n	800924c <HAL_RTC_SetAlarm+0x1e0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	69fa      	ldr	r2, [r7, #28]
 8009288:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	689a      	ldr	r2, [r3, #8]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092a0:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	22ff      	movs	r2, #255	; 0xff
 80092a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2200      	movs	r2, #0
 80092b4:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80092b6:	2300      	movs	r3, #0
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3724      	adds	r7, #36	; 0x24
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd90      	pop	{r4, r7, pc}

080092c0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80092c8:	2300      	movs	r3, #0
 80092ca:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	68da      	ldr	r2, [r3, #12]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80092da:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80092dc:	f7fb fb94 	bl	8004a08 <HAL_GetTick>
 80092e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80092e2:	e009      	b.n	80092f8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80092e4:	f7fb fb90 	bl	8004a08 <HAL_GetTick>
 80092e8:	4602      	mov	r2, r0
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092f2:	d901      	bls.n	80092f8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e007      	b.n	8009308 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f003 0320 	and.w	r3, r3, #32
 8009302:	2b00      	cmp	r3, #0
 8009304:	d0ee      	beq.n	80092e4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	3710      	adds	r7, #16
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}

08009310 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009318:	2300      	movs	r3, #0
 800931a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800931c:	2300      	movs	r3, #0
 800931e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800932a:	2b00      	cmp	r3, #0
 800932c:	d122      	bne.n	8009374 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68da      	ldr	r2, [r3, #12]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800933c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800933e:	f7fb fb63 	bl	8004a08 <HAL_GetTick>
 8009342:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009344:	e00c      	b.n	8009360 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009346:	f7fb fb5f 	bl	8004a08 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009354:	d904      	bls.n	8009360 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2204      	movs	r2, #4
 800935a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800936a:	2b00      	cmp	r3, #0
 800936c:	d102      	bne.n	8009374 <RTC_EnterInitMode+0x64>
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d1e8      	bne.n	8009346 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8009374:	7bfb      	ldrb	r3, [r7, #15]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009386:	2300      	movs	r3, #0
 8009388:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68da      	ldr	r2, [r3, #12]
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009398:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	689b      	ldr	r3, [r3, #8]
 80093a0:	f003 0320 	and.w	r3, r3, #32
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d10a      	bne.n	80093be <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f7ff ff89 	bl	80092c0 <HAL_RTC_WaitForSynchro>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d004      	beq.n	80093be <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2204      	movs	r2, #4
 80093b8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80093be:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3710      	adds	r7, #16
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	4603      	mov	r3, r0
 80093d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80093d6:	e005      	b.n	80093e4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	3301      	adds	r3, #1
 80093dc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80093de:	79fb      	ldrb	r3, [r7, #7]
 80093e0:	3b0a      	subs	r3, #10
 80093e2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	2b09      	cmp	r3, #9
 80093e8:	d8f6      	bhi.n	80093d8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	011b      	lsls	r3, r3, #4
 80093f0:	b2da      	uxtb	r2, r3
 80093f2:	79fb      	ldrb	r3, [r7, #7]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	b2db      	uxtb	r3, r3
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
 800940a:	4603      	mov	r3, r0
 800940c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800940e:	2300      	movs	r3, #0
 8009410:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8009412:	79fb      	ldrb	r3, [r7, #7]
 8009414:	091b      	lsrs	r3, r3, #4
 8009416:	b2db      	uxtb	r3, r3
 8009418:	461a      	mov	r2, r3
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	b2da      	uxtb	r2, r3
 8009428:	79fb      	ldrb	r3, [r7, #7]
 800942a:	f003 030f 	and.w	r3, r3, #15
 800942e:	b2db      	uxtb	r3, r3
 8009430:	4413      	add	r3, r2
 8009432:	b2db      	uxtb	r3, r3
}
 8009434:	4618      	mov	r0, r3
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_POS1: PI8 is selected as RTC Timestamp Pin.
  *             @arg RTC_TIMESTAMPPIN_POS2: PC1 is selected as RTC Timestamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t RTC_TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009440:	b480      	push	{r7}
 8009442:	b087      	sub	sp, #28
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800944c:	2300      	movs	r3, #0
 800944e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(RTC_TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	7f1b      	ldrb	r3, [r3, #28]
 8009454:	2b01      	cmp	r3, #1
 8009456:	d101      	bne.n	800945c <HAL_RTCEx_SetTimeStamp+0x1c>
 8009458:	2302      	movs	r3, #2
 800945a:	e050      	b.n	80094fe <HAL_RTCEx_SetTimeStamp+0xbe>
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2201      	movs	r2, #1
 8009460:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2202      	movs	r2, #2
 8009466:	775a      	strb	r2, [r3, #29]

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f022 0206 	bic.w	r2, r2, #6
 8009476:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	430a      	orrs	r2, r1
 8009486:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689a      	ldr	r2, [r3, #8]
 800948e:	4b1f      	ldr	r3, [pc, #124]	; (800950c <HAL_RTCEx_SetTimeStamp+0xcc>)
 8009490:	4013      	ands	r3, r2
 8009492:	617b      	str	r3, [r7, #20]

  /* Configure the Timestamp TSEDGE bit */
  tmpreg |= RTC_TimeStampEdge;
 8009494:	697a      	ldr	r2, [r7, #20]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	4313      	orrs	r3, r2
 800949a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	22ca      	movs	r2, #202	; 0xca
 80094a2:	625a      	str	r2, [r3, #36]	; 0x24
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2253      	movs	r2, #83	; 0x53
 80094aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Copy the desired configuration into the CR register */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	697a      	ldr	r2, [r7, #20]
 80094b2:	609a      	str	r2, [r3, #8]

  /* Clear RTC Timestamp flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSF);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	b2da      	uxtb	r2, r3
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f462 6208 	orn	r2, r2, #2176	; 0x880
 80094c4:	60da      	str	r2, [r3, #12]

  /* Clear RTC Timestamp overrun Flag */
  __HAL_RTC_TIMESTAMP_CLEAR_FLAG(hrtc, RTC_FLAG_TSOVF);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	b2da      	uxtb	r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f462 5284 	orn	r2, r2, #4224	; 0x1080
 80094d6:	60da      	str	r2, [r3, #12]

  /* Enable the Timestamp saving */
  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	689a      	ldr	r2, [r3, #8]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094e6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	22ff      	movs	r2, #255	; 0xff
 80094ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2201      	movs	r2, #1
 80094f4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80094fc:	2300      	movs	r3, #0
}
 80094fe:	4618      	mov	r0, r3
 8009500:	371c      	adds	r7, #28
 8009502:	46bd      	mov	sp, r7
 8009504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009508:	4770      	bx	lr
 800950a:	bf00      	nop
 800950c:	fffff7f7 	.word	0xfffff7f7

08009510 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d101      	bne.n	8009524 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e025      	b.n	8009570 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800952a:	b2db      	uxtb	r3, r3
 800952c:	2b00      	cmp	r3, #0
 800952e:	d106      	bne.n	800953e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f7f7 fafb 	bl	8000b34 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2202      	movs	r2, #2
 8009542:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3304      	adds	r3, #4
 800954e:	4619      	mov	r1, r3
 8009550:	4610      	mov	r0, r2
 8009552:	f001 fb7b 	bl	800ac4c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	461a      	mov	r2, r3
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	f001 fbcf 	bl	800ad04 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2201      	movs	r2, #1
 800956a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b086      	sub	sp, #24
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800958a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800958c:	7dfb      	ldrb	r3, [r7, #23]
 800958e:	2b02      	cmp	r3, #2
 8009590:	d101      	bne.n	8009596 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8009592:	2302      	movs	r3, #2
 8009594:	e021      	b.n	80095da <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8009596:	7dfb      	ldrb	r3, [r7, #23]
 8009598:	2b01      	cmp	r3, #1
 800959a:	d002      	beq.n	80095a2 <HAL_SDRAM_SendCommand+0x2a>
 800959c:	7dfb      	ldrb	r3, [r7, #23]
 800959e:	2b05      	cmp	r3, #5
 80095a0:	d118      	bne.n	80095d4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2202      	movs	r2, #2
 80095a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	68b9      	ldr	r1, [r7, #8]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f001 fc10 	bl	800add8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d104      	bne.n	80095ca <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2205      	movs	r2, #5
 80095c4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80095c8:	e006      	b.n	80095d8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2201      	movs	r2, #1
 80095ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80095d2:	e001      	b.n	80095d8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e000      	b.n	80095da <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80095d8:	2300      	movs	r3, #0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3718      	adds	r7, #24
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d101      	bne.n	80095fc <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80095f8:	2302      	movs	r3, #2
 80095fa:	e016      	b.n	800962a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009602:	b2db      	uxtb	r3, r3
 8009604:	2b01      	cmp	r3, #1
 8009606:	d10f      	bne.n	8009628 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	2202      	movs	r2, #2
 800960c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	4618      	mov	r0, r3
 8009618:	f001 fc02 	bl	800ae20 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8009624:	2300      	movs	r3, #0
 8009626:	e000      	b.n	800962a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b084      	sub	sp, #16
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d101      	bne.n	8009644 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e09d      	b.n	8009780 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009648:	2b00      	cmp	r3, #0
 800964a:	d108      	bne.n	800965e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009654:	d009      	beq.n	800966a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	61da      	str	r2, [r3, #28]
 800965c:	e005      	b.n	800966a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b00      	cmp	r3, #0
 800967a:	d106      	bne.n	800968a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f7f8 fe4b 	bl	8002320 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2202      	movs	r2, #2
 800968e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	681a      	ldr	r2, [r3, #0]
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096a0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80096aa:	d902      	bls.n	80096b2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]
 80096b0:	e002      	b.n	80096b8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80096b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80096b6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80096c0:	d007      	beq.n	80096d2 <HAL_SPI_Init+0xa0>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80096ca:	d002      	beq.n	80096d2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80096e2:	431a      	orrs	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	f003 0302 	and.w	r3, r3, #2
 80096ec:	431a      	orrs	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	f003 0301 	and.w	r3, r3, #1
 80096f6:	431a      	orrs	r2, r3
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	699b      	ldr	r3, [r3, #24]
 80096fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009700:	431a      	orrs	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800970a:	431a      	orrs	r2, r3
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6a1b      	ldr	r3, [r3, #32]
 8009710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009714:	ea42 0103 	orr.w	r1, r2, r3
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	430a      	orrs	r2, r1
 8009726:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	699b      	ldr	r3, [r3, #24]
 800972c:	0c1b      	lsrs	r3, r3, #16
 800972e:	f003 0204 	and.w	r2, r3, #4
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	f003 0310 	and.w	r3, r3, #16
 800973a:	431a      	orrs	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009740:	f003 0308 	and.w	r3, r3, #8
 8009744:	431a      	orrs	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800974e:	ea42 0103 	orr.w	r1, r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	69da      	ldr	r2, [r3, #28]
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800976e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2201      	movs	r2, #1
 800977a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800977e:	2300      	movs	r3, #0
}
 8009780:	4618      	mov	r0, r3
 8009782:	3710      	adds	r7, #16
 8009784:	46bd      	mov	sp, r7
 8009786:	bd80      	pop	{r7, pc}

08009788 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d101      	bne.n	800979a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009796:	2301      	movs	r3, #1
 8009798:	e049      	b.n	800982e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d106      	bne.n	80097b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fa feae 	bl	8004510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	2202      	movs	r2, #2
 80097b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	3304      	adds	r3, #4
 80097c4:	4619      	mov	r1, r3
 80097c6:	4610      	mov	r0, r2
 80097c8:	f000 fac0 	bl	8009d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2201      	movs	r2, #1
 80097e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2201      	movs	r2, #1
 80097f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2201      	movs	r2, #1
 8009800:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2201      	movs	r2, #1
 8009808:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2201      	movs	r2, #1
 8009810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
	...

08009838 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b085      	sub	sp, #20
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009846:	b2db      	uxtb	r3, r3
 8009848:	2b01      	cmp	r3, #1
 800984a:	d001      	beq.n	8009850 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800984c:	2301      	movs	r3, #1
 800984e:	e054      	b.n	80098fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2202      	movs	r2, #2
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0201 	orr.w	r2, r2, #1
 8009866:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a26      	ldr	r2, [pc, #152]	; (8009908 <HAL_TIM_Base_Start_IT+0xd0>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d022      	beq.n	80098b8 <HAL_TIM_Base_Start_IT+0x80>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800987a:	d01d      	beq.n	80098b8 <HAL_TIM_Base_Start_IT+0x80>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a22      	ldr	r2, [pc, #136]	; (800990c <HAL_TIM_Base_Start_IT+0xd4>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d018      	beq.n	80098b8 <HAL_TIM_Base_Start_IT+0x80>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a21      	ldr	r2, [pc, #132]	; (8009910 <HAL_TIM_Base_Start_IT+0xd8>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d013      	beq.n	80098b8 <HAL_TIM_Base_Start_IT+0x80>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a1f      	ldr	r2, [pc, #124]	; (8009914 <HAL_TIM_Base_Start_IT+0xdc>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d00e      	beq.n	80098b8 <HAL_TIM_Base_Start_IT+0x80>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a1e      	ldr	r2, [pc, #120]	; (8009918 <HAL_TIM_Base_Start_IT+0xe0>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d009      	beq.n	80098b8 <HAL_TIM_Base_Start_IT+0x80>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a1c      	ldr	r2, [pc, #112]	; (800991c <HAL_TIM_Base_Start_IT+0xe4>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d004      	beq.n	80098b8 <HAL_TIM_Base_Start_IT+0x80>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a1b      	ldr	r2, [pc, #108]	; (8009920 <HAL_TIM_Base_Start_IT+0xe8>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d115      	bne.n	80098e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689a      	ldr	r2, [r3, #8]
 80098be:	4b19      	ldr	r3, [pc, #100]	; (8009924 <HAL_TIM_Base_Start_IT+0xec>)
 80098c0:	4013      	ands	r3, r2
 80098c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b06      	cmp	r3, #6
 80098c8:	d015      	beq.n	80098f6 <HAL_TIM_Base_Start_IT+0xbe>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098d0:	d011      	beq.n	80098f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f042 0201 	orr.w	r2, r2, #1
 80098e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e2:	e008      	b.n	80098f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	681a      	ldr	r2, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f042 0201 	orr.w	r2, r2, #1
 80098f2:	601a      	str	r2, [r3, #0]
 80098f4:	e000      	b.n	80098f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3714      	adds	r7, #20
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	40010000 	.word	0x40010000
 800990c:	40000400 	.word	0x40000400
 8009910:	40000800 	.word	0x40000800
 8009914:	40000c00 	.word	0x40000c00
 8009918:	40010400 	.word	0x40010400
 800991c:	40014000 	.word	0x40014000
 8009920:	40001800 	.word	0x40001800
 8009924:	00010007 	.word	0x00010007

08009928 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	f003 0302 	and.w	r3, r3, #2
 800993a:	2b02      	cmp	r3, #2
 800993c:	d122      	bne.n	8009984 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	68db      	ldr	r3, [r3, #12]
 8009944:	f003 0302 	and.w	r3, r3, #2
 8009948:	2b02      	cmp	r3, #2
 800994a:	d11b      	bne.n	8009984 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f06f 0202 	mvn.w	r2, #2
 8009954:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	699b      	ldr	r3, [r3, #24]
 8009962:	f003 0303 	and.w	r3, r3, #3
 8009966:	2b00      	cmp	r3, #0
 8009968:	d003      	beq.n	8009972 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f000 f9d0 	bl	8009d10 <HAL_TIM_IC_CaptureCallback>
 8009970:	e005      	b.n	800997e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f9c2 	bl	8009cfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f9d3 	bl	8009d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	f003 0304 	and.w	r3, r3, #4
 800998e:	2b04      	cmp	r3, #4
 8009990:	d122      	bne.n	80099d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	68db      	ldr	r3, [r3, #12]
 8009998:	f003 0304 	and.w	r3, r3, #4
 800999c:	2b04      	cmp	r3, #4
 800999e:	d11b      	bne.n	80099d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f06f 0204 	mvn.w	r2, #4
 80099a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2202      	movs	r2, #2
 80099ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	699b      	ldr	r3, [r3, #24]
 80099b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d003      	beq.n	80099c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	f000 f9a6 	bl	8009d10 <HAL_TIM_IC_CaptureCallback>
 80099c4:	e005      	b.n	80099d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099c6:	6878      	ldr	r0, [r7, #4]
 80099c8:	f000 f998 	bl	8009cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f9a9 	bl	8009d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	f003 0308 	and.w	r3, r3, #8
 80099e2:	2b08      	cmp	r3, #8
 80099e4:	d122      	bne.n	8009a2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	f003 0308 	and.w	r3, r3, #8
 80099f0:	2b08      	cmp	r3, #8
 80099f2:	d11b      	bne.n	8009a2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f06f 0208 	mvn.w	r2, #8
 80099fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2204      	movs	r2, #4
 8009a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	69db      	ldr	r3, [r3, #28]
 8009a0a:	f003 0303 	and.w	r3, r3, #3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d003      	beq.n	8009a1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f97c 	bl	8009d10 <HAL_TIM_IC_CaptureCallback>
 8009a18:	e005      	b.n	8009a26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f96e 	bl	8009cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f97f 	bl	8009d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	f003 0310 	and.w	r3, r3, #16
 8009a36:	2b10      	cmp	r3, #16
 8009a38:	d122      	bne.n	8009a80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f003 0310 	and.w	r3, r3, #16
 8009a44:	2b10      	cmp	r3, #16
 8009a46:	d11b      	bne.n	8009a80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f06f 0210 	mvn.w	r2, #16
 8009a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2208      	movs	r2, #8
 8009a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d003      	beq.n	8009a6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f952 	bl	8009d10 <HAL_TIM_IC_CaptureCallback>
 8009a6c:	e005      	b.n	8009a7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a6e:	6878      	ldr	r0, [r7, #4]
 8009a70:	f000 f944 	bl	8009cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 f955 	bl	8009d24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	691b      	ldr	r3, [r3, #16]
 8009a86:	f003 0301 	and.w	r3, r3, #1
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d10e      	bne.n	8009aac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	68db      	ldr	r3, [r3, #12]
 8009a94:	f003 0301 	and.w	r3, r3, #1
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d107      	bne.n	8009aac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f06f 0201 	mvn.w	r2, #1
 8009aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f7f8 fb12 	bl	80020d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab6:	2b80      	cmp	r3, #128	; 0x80
 8009ab8:	d10e      	bne.n	8009ad8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac4:	2b80      	cmp	r3, #128	; 0x80
 8009ac6:	d107      	bne.n	8009ad8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 fb0c 	bl	800a0f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	691b      	ldr	r3, [r3, #16]
 8009ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ae6:	d10e      	bne.n	8009b06 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009af2:	2b80      	cmp	r3, #128	; 0x80
 8009af4:	d107      	bne.n	8009b06 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009afe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 faff 	bl	800a104 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b10:	2b40      	cmp	r3, #64	; 0x40
 8009b12:	d10e      	bne.n	8009b32 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68db      	ldr	r3, [r3, #12]
 8009b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b1e:	2b40      	cmp	r3, #64	; 0x40
 8009b20:	d107      	bne.n	8009b32 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f903 	bl	8009d38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	691b      	ldr	r3, [r3, #16]
 8009b38:	f003 0320 	and.w	r3, r3, #32
 8009b3c:	2b20      	cmp	r3, #32
 8009b3e:	d10e      	bne.n	8009b5e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	f003 0320 	and.w	r3, r3, #32
 8009b4a:	2b20      	cmp	r3, #32
 8009b4c:	d107      	bne.n	8009b5e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f06f 0220 	mvn.w	r2, #32
 8009b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 fabf 	bl	800a0dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b5e:	bf00      	nop
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
	...

08009b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d101      	bne.n	8009b84 <HAL_TIM_ConfigClockSource+0x1c>
 8009b80:	2302      	movs	r3, #2
 8009b82:	e0b4      	b.n	8009cee <HAL_TIM_ConfigClockSource+0x186>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2202      	movs	r2, #2
 8009b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b9c:	68ba      	ldr	r2, [r7, #8]
 8009b9e:	4b56      	ldr	r3, [pc, #344]	; (8009cf8 <HAL_TIM_ConfigClockSource+0x190>)
 8009ba0:	4013      	ands	r3, r2
 8009ba2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009baa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68ba      	ldr	r2, [r7, #8]
 8009bb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bbc:	d03e      	beq.n	8009c3c <HAL_TIM_ConfigClockSource+0xd4>
 8009bbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bc2:	f200 8087 	bhi.w	8009cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bca:	f000 8086 	beq.w	8009cda <HAL_TIM_ConfigClockSource+0x172>
 8009bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bd2:	d87f      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009bd4:	2b70      	cmp	r3, #112	; 0x70
 8009bd6:	d01a      	beq.n	8009c0e <HAL_TIM_ConfigClockSource+0xa6>
 8009bd8:	2b70      	cmp	r3, #112	; 0x70
 8009bda:	d87b      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009bdc:	2b60      	cmp	r3, #96	; 0x60
 8009bde:	d050      	beq.n	8009c82 <HAL_TIM_ConfigClockSource+0x11a>
 8009be0:	2b60      	cmp	r3, #96	; 0x60
 8009be2:	d877      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009be4:	2b50      	cmp	r3, #80	; 0x50
 8009be6:	d03c      	beq.n	8009c62 <HAL_TIM_ConfigClockSource+0xfa>
 8009be8:	2b50      	cmp	r3, #80	; 0x50
 8009bea:	d873      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009bec:	2b40      	cmp	r3, #64	; 0x40
 8009bee:	d058      	beq.n	8009ca2 <HAL_TIM_ConfigClockSource+0x13a>
 8009bf0:	2b40      	cmp	r3, #64	; 0x40
 8009bf2:	d86f      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009bf4:	2b30      	cmp	r3, #48	; 0x30
 8009bf6:	d064      	beq.n	8009cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8009bf8:	2b30      	cmp	r3, #48	; 0x30
 8009bfa:	d86b      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009bfc:	2b20      	cmp	r3, #32
 8009bfe:	d060      	beq.n	8009cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8009c00:	2b20      	cmp	r3, #32
 8009c02:	d867      	bhi.n	8009cd4 <HAL_TIM_ConfigClockSource+0x16c>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d05c      	beq.n	8009cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8009c08:	2b10      	cmp	r3, #16
 8009c0a:	d05a      	beq.n	8009cc2 <HAL_TIM_ConfigClockSource+0x15a>
 8009c0c:	e062      	b.n	8009cd4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c1e:	f000 f9af 	bl	8009f80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	609a      	str	r2, [r3, #8]
      break;
 8009c3a:	e04f      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009c4c:	f000 f998 	bl	8009f80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	689a      	ldr	r2, [r3, #8]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c5e:	609a      	str	r2, [r3, #8]
      break;
 8009c60:	e03c      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c6e:	461a      	mov	r2, r3
 8009c70:	f000 f90c 	bl	8009e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2150      	movs	r1, #80	; 0x50
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f000 f965 	bl	8009f4a <TIM_ITRx_SetConfig>
      break;
 8009c80:	e02c      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c8e:	461a      	mov	r2, r3
 8009c90:	f000 f92b 	bl	8009eea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	2160      	movs	r1, #96	; 0x60
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f955 	bl	8009f4a <TIM_ITRx_SetConfig>
      break;
 8009ca0:	e01c      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f000 f8ec 	bl	8009e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2140      	movs	r1, #64	; 0x40
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 f945 	bl	8009f4a <TIM_ITRx_SetConfig>
      break;
 8009cc0:	e00c      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	4619      	mov	r1, r3
 8009ccc:	4610      	mov	r0, r2
 8009cce:	f000 f93c 	bl	8009f4a <TIM_ITRx_SetConfig>
      break;
 8009cd2:	e003      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd8:	e000      	b.n	8009cdc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009cda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}
 8009cf6:	bf00      	nop
 8009cf8:	fffeff88 	.word	0xfffeff88

08009cfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d04:	bf00      	nop
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d18:	bf00      	nop
 8009d1a:	370c      	adds	r7, #12
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d22:	4770      	bx	lr

08009d24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d40:	bf00      	nop
 8009d42:	370c      	adds	r7, #12
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b085      	sub	sp, #20
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a40      	ldr	r2, [pc, #256]	; (8009e60 <TIM_Base_SetConfig+0x114>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d013      	beq.n	8009d8c <TIM_Base_SetConfig+0x40>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d6a:	d00f      	beq.n	8009d8c <TIM_Base_SetConfig+0x40>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	4a3d      	ldr	r2, [pc, #244]	; (8009e64 <TIM_Base_SetConfig+0x118>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d00b      	beq.n	8009d8c <TIM_Base_SetConfig+0x40>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	4a3c      	ldr	r2, [pc, #240]	; (8009e68 <TIM_Base_SetConfig+0x11c>)
 8009d78:	4293      	cmp	r3, r2
 8009d7a:	d007      	beq.n	8009d8c <TIM_Base_SetConfig+0x40>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a3b      	ldr	r2, [pc, #236]	; (8009e6c <TIM_Base_SetConfig+0x120>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d003      	beq.n	8009d8c <TIM_Base_SetConfig+0x40>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a3a      	ldr	r2, [pc, #232]	; (8009e70 <TIM_Base_SetConfig+0x124>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d108      	bne.n	8009d9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	4313      	orrs	r3, r2
 8009d9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	4a2f      	ldr	r2, [pc, #188]	; (8009e60 <TIM_Base_SetConfig+0x114>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d02b      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dac:	d027      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a2c      	ldr	r2, [pc, #176]	; (8009e64 <TIM_Base_SetConfig+0x118>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d023      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a2b      	ldr	r2, [pc, #172]	; (8009e68 <TIM_Base_SetConfig+0x11c>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d01f      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a2a      	ldr	r2, [pc, #168]	; (8009e6c <TIM_Base_SetConfig+0x120>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d01b      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a29      	ldr	r2, [pc, #164]	; (8009e70 <TIM_Base_SetConfig+0x124>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d017      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a28      	ldr	r2, [pc, #160]	; (8009e74 <TIM_Base_SetConfig+0x128>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d013      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a27      	ldr	r2, [pc, #156]	; (8009e78 <TIM_Base_SetConfig+0x12c>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d00f      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a26      	ldr	r2, [pc, #152]	; (8009e7c <TIM_Base_SetConfig+0x130>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d00b      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a25      	ldr	r2, [pc, #148]	; (8009e80 <TIM_Base_SetConfig+0x134>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d007      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a24      	ldr	r2, [pc, #144]	; (8009e84 <TIM_Base_SetConfig+0x138>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d003      	beq.n	8009dfe <TIM_Base_SetConfig+0xb2>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a23      	ldr	r2, [pc, #140]	; (8009e88 <TIM_Base_SetConfig+0x13c>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d108      	bne.n	8009e10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	68db      	ldr	r3, [r3, #12]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	4313      	orrs	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	689a      	ldr	r2, [r3, #8]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a0a      	ldr	r2, [pc, #40]	; (8009e60 <TIM_Base_SetConfig+0x114>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d003      	beq.n	8009e44 <TIM_Base_SetConfig+0xf8>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	4a0c      	ldr	r2, [pc, #48]	; (8009e70 <TIM_Base_SetConfig+0x124>)
 8009e40:	4293      	cmp	r3, r2
 8009e42:	d103      	bne.n	8009e4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	691a      	ldr	r2, [r3, #16]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2201      	movs	r2, #1
 8009e50:	615a      	str	r2, [r3, #20]
}
 8009e52:	bf00      	nop
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	40010000 	.word	0x40010000
 8009e64:	40000400 	.word	0x40000400
 8009e68:	40000800 	.word	0x40000800
 8009e6c:	40000c00 	.word	0x40000c00
 8009e70:	40010400 	.word	0x40010400
 8009e74:	40014000 	.word	0x40014000
 8009e78:	40014400 	.word	0x40014400
 8009e7c:	40014800 	.word	0x40014800
 8009e80:	40001800 	.word	0x40001800
 8009e84:	40001c00 	.word	0x40001c00
 8009e88:	40002000 	.word	0x40002000

08009e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b087      	sub	sp, #28
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	60b9      	str	r1, [r7, #8]
 8009e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	6a1b      	ldr	r3, [r3, #32]
 8009ea2:	f023 0201 	bic.w	r2, r3, #1
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	699b      	ldr	r3, [r3, #24]
 8009eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	011b      	lsls	r3, r3, #4
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f023 030a 	bic.w	r3, r3, #10
 8009ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	4313      	orrs	r3, r2
 8009ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	693a      	ldr	r2, [r7, #16]
 8009ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	697a      	ldr	r2, [r7, #20]
 8009edc:	621a      	str	r2, [r3, #32]
}
 8009ede:	bf00      	nop
 8009ee0:	371c      	adds	r7, #28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eea:	b480      	push	{r7}
 8009eec:	b087      	sub	sp, #28
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	60f8      	str	r0, [r7, #12]
 8009ef2:	60b9      	str	r1, [r7, #8]
 8009ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	6a1b      	ldr	r3, [r3, #32]
 8009efa:	f023 0210 	bic.w	r2, r3, #16
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
 8009f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	031b      	lsls	r3, r3, #12
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	011b      	lsls	r3, r3, #4
 8009f2c:	693a      	ldr	r2, [r7, #16]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	621a      	str	r2, [r3, #32]
}
 8009f3e:	bf00      	nop
 8009f40:	371c      	adds	r7, #28
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr

08009f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f4a:	b480      	push	{r7}
 8009f4c:	b085      	sub	sp, #20
 8009f4e:	af00      	add	r7, sp, #0
 8009f50:	6078      	str	r0, [r7, #4]
 8009f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f62:	683a      	ldr	r2, [r7, #0]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	f043 0307 	orr.w	r3, r3, #7
 8009f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	68fa      	ldr	r2, [r7, #12]
 8009f72:	609a      	str	r2, [r3, #8]
}
 8009f74:	bf00      	nop
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f94:	697b      	ldr	r3, [r7, #20]
 8009f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	021a      	lsls	r2, r3, #8
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	431a      	orrs	r2, r3
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	697a      	ldr	r2, [r7, #20]
 8009faa:	4313      	orrs	r3, r2
 8009fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	609a      	str	r2, [r3, #8]
}
 8009fb4:	bf00      	nop
 8009fb6:	371c      	adds	r7, #28
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
 8009fc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d101      	bne.n	8009fd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e06d      	b.n	800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	4a30      	ldr	r2, [pc, #192]	; (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	d004      	beq.n	800a00c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a2f      	ldr	r2, [pc, #188]	; (800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a008:	4293      	cmp	r3, r2
 800a00a:	d108      	bne.n	800a01e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a012:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a024:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	68fa      	ldr	r2, [r7, #12]
 800a036:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a20      	ldr	r2, [pc, #128]	; (800a0c0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d022      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a04a:	d01d      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a1d      	ldr	r2, [pc, #116]	; (800a0c8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d018      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a1c      	ldr	r2, [pc, #112]	; (800a0cc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d013      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a1a      	ldr	r2, [pc, #104]	; (800a0d0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d00e      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a15      	ldr	r2, [pc, #84]	; (800a0c4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d009      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a16      	ldr	r2, [pc, #88]	; (800a0d4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d004      	beq.n	800a088 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a15      	ldr	r2, [pc, #84]	; (800a0d8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d10c      	bne.n	800a0a2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a08e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	4313      	orrs	r3, r2
 800a098:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2201      	movs	r2, #1
 800a0a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0b2:	2300      	movs	r3, #0
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr
 800a0c0:	40010000 	.word	0x40010000
 800a0c4:	40010400 	.word	0x40010400
 800a0c8:	40000400 	.word	0x40000400
 800a0cc:	40000800 	.word	0x40000800
 800a0d0:	40000c00 	.word	0x40000c00
 800a0d4:	40014000 	.word	0x40014000
 800a0d8:	40001800 	.word	0x40001800

0800a0dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b082      	sub	sp, #8
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d101      	bne.n	800a12a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	e040      	b.n	800a1ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d106      	bne.n	800a140 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f7fa fb0a 	bl	8004754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2224      	movs	r2, #36	; 0x24
 800a144:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f022 0201 	bic.w	r2, r2, #1
 800a154:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f974 	bl	800a444 <UART_SetConfig>
 800a15c:	4603      	mov	r3, r0
 800a15e:	2b01      	cmp	r3, #1
 800a160:	d101      	bne.n	800a166 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e022      	b.n	800a1ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d002      	beq.n	800a174 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 fbcc 	bl	800a90c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a182:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	689a      	ldr	r2, [r3, #8]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a192:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f042 0201 	orr.w	r2, r2, #1
 800a1a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f000 fc53 	bl	800aa50 <UART_CheckIdleState>
 800a1aa:	4603      	mov	r3, r0
}
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	3708      	adds	r7, #8
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}

0800a1b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b08a      	sub	sp, #40	; 0x28
 800a1b8:	af02      	add	r7, sp, #8
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	603b      	str	r3, [r7, #0]
 800a1c0:	4613      	mov	r3, r2
 800a1c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	d171      	bne.n	800a2b0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d002      	beq.n	800a1d8 <HAL_UART_Transmit+0x24>
 800a1d2:	88fb      	ldrh	r3, [r7, #6]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d101      	bne.n	800a1dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a1d8:	2301      	movs	r3, #1
 800a1da:	e06a      	b.n	800a2b2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2221      	movs	r2, #33	; 0x21
 800a1e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a1ea:	f7fa fc0d 	bl	8004a08 <HAL_GetTick>
 800a1ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	88fa      	ldrh	r2, [r7, #6]
 800a1f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	88fa      	ldrh	r2, [r7, #6]
 800a1fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a208:	d108      	bne.n	800a21c <HAL_UART_Transmit+0x68>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d104      	bne.n	800a21c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800a212:	2300      	movs	r3, #0
 800a214:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	61bb      	str	r3, [r7, #24]
 800a21a:	e003      	b.n	800a224 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a220:	2300      	movs	r3, #0
 800a222:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a224:	e02c      	b.n	800a280 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	9300      	str	r3, [sp, #0]
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	2200      	movs	r2, #0
 800a22e:	2180      	movs	r1, #128	; 0x80
 800a230:	68f8      	ldr	r0, [r7, #12]
 800a232:	f000 fc44 	bl	800aabe <UART_WaitOnFlagUntilTimeout>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800a23c:	2303      	movs	r3, #3
 800a23e:	e038      	b.n	800a2b2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10b      	bne.n	800a25e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a246:	69bb      	ldr	r3, [r7, #24]
 800a248:	881b      	ldrh	r3, [r3, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a254:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	3302      	adds	r3, #2
 800a25a:	61bb      	str	r3, [r7, #24]
 800a25c:	e007      	b.n	800a26e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a25e:	69fb      	ldr	r3, [r7, #28]
 800a260:	781a      	ldrb	r2, [r3, #0]
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	3301      	adds	r3, #1
 800a26c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a274:	b29b      	uxth	r3, r3
 800a276:	3b01      	subs	r3, #1
 800a278:	b29a      	uxth	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a286:	b29b      	uxth	r3, r3
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d1cc      	bne.n	800a226 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	697b      	ldr	r3, [r7, #20]
 800a292:	2200      	movs	r2, #0
 800a294:	2140      	movs	r1, #64	; 0x40
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f000 fc11 	bl	800aabe <UART_WaitOnFlagUntilTimeout>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e005      	b.n	800a2b2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2220      	movs	r2, #32
 800a2aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	e000      	b.n	800a2b2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800a2b0:	2302      	movs	r3, #2
  }
}
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	3720      	adds	r7, #32
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}

0800a2ba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2ba:	b580      	push	{r7, lr}
 800a2bc:	b08a      	sub	sp, #40	; 0x28
 800a2be:	af02      	add	r7, sp, #8
 800a2c0:	60f8      	str	r0, [r7, #12]
 800a2c2:	60b9      	str	r1, [r7, #8]
 800a2c4:	603b      	str	r3, [r7, #0]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	f040 80b1 	bne.w	800a438 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <HAL_UART_Receive+0x28>
 800a2dc:	88fb      	ldrh	r3, [r7, #6]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d101      	bne.n	800a2e6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e0a9      	b.n	800a43a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2222      	movs	r2, #34	; 0x22
 800a2f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2fc:	f7fa fb84 	bl	8004a08 <HAL_GetTick>
 800a300:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	88fa      	ldrh	r2, [r7, #6]
 800a306:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	88fa      	ldrh	r2, [r7, #6]
 800a30e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a31a:	d10e      	bne.n	800a33a <HAL_UART_Receive+0x80>
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d105      	bne.n	800a330 <HAL_UART_Receive+0x76>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a32a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a32e:	e02d      	b.n	800a38c <HAL_UART_Receive+0xd2>
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	22ff      	movs	r2, #255	; 0xff
 800a334:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a338:	e028      	b.n	800a38c <HAL_UART_Receive+0xd2>
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	689b      	ldr	r3, [r3, #8]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10d      	bne.n	800a35e <HAL_UART_Receive+0xa4>
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d104      	bne.n	800a354 <HAL_UART_Receive+0x9a>
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	22ff      	movs	r2, #255	; 0xff
 800a34e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a352:	e01b      	b.n	800a38c <HAL_UART_Receive+0xd2>
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	227f      	movs	r2, #127	; 0x7f
 800a358:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a35c:	e016      	b.n	800a38c <HAL_UART_Receive+0xd2>
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a366:	d10d      	bne.n	800a384 <HAL_UART_Receive+0xca>
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	691b      	ldr	r3, [r3, #16]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d104      	bne.n	800a37a <HAL_UART_Receive+0xc0>
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	227f      	movs	r2, #127	; 0x7f
 800a374:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a378:	e008      	b.n	800a38c <HAL_UART_Receive+0xd2>
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	223f      	movs	r2, #63	; 0x3f
 800a37e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a382:	e003      	b.n	800a38c <HAL_UART_Receive+0xd2>
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a392:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a39c:	d108      	bne.n	800a3b0 <HAL_UART_Receive+0xf6>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	691b      	ldr	r3, [r3, #16]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d104      	bne.n	800a3b0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	61bb      	str	r3, [r7, #24]
 800a3ae:	e003      	b.n	800a3b8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a3b8:	e032      	b.n	800a420 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	9300      	str	r3, [sp, #0]
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	2120      	movs	r1, #32
 800a3c4:	68f8      	ldr	r0, [r7, #12]
 800a3c6:	f000 fb7a 	bl	800aabe <UART_WaitOnFlagUntilTimeout>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d001      	beq.n	800a3d4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	e032      	b.n	800a43a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10c      	bne.n	800a3f4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	b29a      	uxth	r2, r3
 800a3e2:	8a7b      	ldrh	r3, [r7, #18]
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	b29a      	uxth	r2, r3
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	3302      	adds	r3, #2
 800a3f0:	61bb      	str	r3, [r7, #24]
 800a3f2:	e00c      	b.n	800a40e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	b2da      	uxtb	r2, r3
 800a3fc:	8a7b      	ldrh	r3, [r7, #18]
 800a3fe:	b2db      	uxtb	r3, r3
 800a400:	4013      	ands	r3, r2
 800a402:	b2da      	uxtb	r2, r3
 800a404:	69fb      	ldr	r3, [r7, #28]
 800a406:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a408:	69fb      	ldr	r3, [r7, #28]
 800a40a:	3301      	adds	r3, #1
 800a40c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a414:	b29b      	uxth	r3, r3
 800a416:	3b01      	subs	r3, #1
 800a418:	b29a      	uxth	r2, r3
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800a426:	b29b      	uxth	r3, r3
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1c6      	bne.n	800a3ba <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2220      	movs	r2, #32
 800a430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800a434:	2300      	movs	r3, #0
 800a436:	e000      	b.n	800a43a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800a438:	2302      	movs	r3, #2
  }
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3720      	adds	r7, #32
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}
	...

0800a444 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b088      	sub	sp, #32
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a44c:	2300      	movs	r3, #0
 800a44e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	689a      	ldr	r2, [r3, #8]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	691b      	ldr	r3, [r3, #16]
 800a458:	431a      	orrs	r2, r3
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	431a      	orrs	r2, r3
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	69db      	ldr	r3, [r3, #28]
 800a464:	4313      	orrs	r3, r2
 800a466:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	4ba6      	ldr	r3, [pc, #664]	; (800a708 <UART_SetConfig+0x2c4>)
 800a470:	4013      	ands	r3, r2
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	6812      	ldr	r2, [r2, #0]
 800a476:	6979      	ldr	r1, [r7, #20]
 800a478:	430b      	orrs	r3, r1
 800a47a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	68da      	ldr	r2, [r3, #12]
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	430a      	orrs	r2, r1
 800a490:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	699b      	ldr	r3, [r3, #24]
 800a496:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6a1b      	ldr	r3, [r3, #32]
 800a49c:	697a      	ldr	r2, [r7, #20]
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	430a      	orrs	r2, r1
 800a4b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a94      	ldr	r2, [pc, #592]	; (800a70c <UART_SetConfig+0x2c8>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d120      	bne.n	800a502 <UART_SetConfig+0xbe>
 800a4c0:	4b93      	ldr	r3, [pc, #588]	; (800a710 <UART_SetConfig+0x2cc>)
 800a4c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4c6:	f003 0303 	and.w	r3, r3, #3
 800a4ca:	2b03      	cmp	r3, #3
 800a4cc:	d816      	bhi.n	800a4fc <UART_SetConfig+0xb8>
 800a4ce:	a201      	add	r2, pc, #4	; (adr r2, 800a4d4 <UART_SetConfig+0x90>)
 800a4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d4:	0800a4e5 	.word	0x0800a4e5
 800a4d8:	0800a4f1 	.word	0x0800a4f1
 800a4dc:	0800a4eb 	.word	0x0800a4eb
 800a4e0:	0800a4f7 	.word	0x0800a4f7
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	77fb      	strb	r3, [r7, #31]
 800a4e8:	e150      	b.n	800a78c <UART_SetConfig+0x348>
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	77fb      	strb	r3, [r7, #31]
 800a4ee:	e14d      	b.n	800a78c <UART_SetConfig+0x348>
 800a4f0:	2304      	movs	r3, #4
 800a4f2:	77fb      	strb	r3, [r7, #31]
 800a4f4:	e14a      	b.n	800a78c <UART_SetConfig+0x348>
 800a4f6:	2308      	movs	r3, #8
 800a4f8:	77fb      	strb	r3, [r7, #31]
 800a4fa:	e147      	b.n	800a78c <UART_SetConfig+0x348>
 800a4fc:	2310      	movs	r3, #16
 800a4fe:	77fb      	strb	r3, [r7, #31]
 800a500:	e144      	b.n	800a78c <UART_SetConfig+0x348>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a83      	ldr	r2, [pc, #524]	; (800a714 <UART_SetConfig+0x2d0>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d132      	bne.n	800a572 <UART_SetConfig+0x12e>
 800a50c:	4b80      	ldr	r3, [pc, #512]	; (800a710 <UART_SetConfig+0x2cc>)
 800a50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a512:	f003 030c 	and.w	r3, r3, #12
 800a516:	2b0c      	cmp	r3, #12
 800a518:	d828      	bhi.n	800a56c <UART_SetConfig+0x128>
 800a51a:	a201      	add	r2, pc, #4	; (adr r2, 800a520 <UART_SetConfig+0xdc>)
 800a51c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a520:	0800a555 	.word	0x0800a555
 800a524:	0800a56d 	.word	0x0800a56d
 800a528:	0800a56d 	.word	0x0800a56d
 800a52c:	0800a56d 	.word	0x0800a56d
 800a530:	0800a561 	.word	0x0800a561
 800a534:	0800a56d 	.word	0x0800a56d
 800a538:	0800a56d 	.word	0x0800a56d
 800a53c:	0800a56d 	.word	0x0800a56d
 800a540:	0800a55b 	.word	0x0800a55b
 800a544:	0800a56d 	.word	0x0800a56d
 800a548:	0800a56d 	.word	0x0800a56d
 800a54c:	0800a56d 	.word	0x0800a56d
 800a550:	0800a567 	.word	0x0800a567
 800a554:	2300      	movs	r3, #0
 800a556:	77fb      	strb	r3, [r7, #31]
 800a558:	e118      	b.n	800a78c <UART_SetConfig+0x348>
 800a55a:	2302      	movs	r3, #2
 800a55c:	77fb      	strb	r3, [r7, #31]
 800a55e:	e115      	b.n	800a78c <UART_SetConfig+0x348>
 800a560:	2304      	movs	r3, #4
 800a562:	77fb      	strb	r3, [r7, #31]
 800a564:	e112      	b.n	800a78c <UART_SetConfig+0x348>
 800a566:	2308      	movs	r3, #8
 800a568:	77fb      	strb	r3, [r7, #31]
 800a56a:	e10f      	b.n	800a78c <UART_SetConfig+0x348>
 800a56c:	2310      	movs	r3, #16
 800a56e:	77fb      	strb	r3, [r7, #31]
 800a570:	e10c      	b.n	800a78c <UART_SetConfig+0x348>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a68      	ldr	r2, [pc, #416]	; (800a718 <UART_SetConfig+0x2d4>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d120      	bne.n	800a5be <UART_SetConfig+0x17a>
 800a57c:	4b64      	ldr	r3, [pc, #400]	; (800a710 <UART_SetConfig+0x2cc>)
 800a57e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a582:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a586:	2b30      	cmp	r3, #48	; 0x30
 800a588:	d013      	beq.n	800a5b2 <UART_SetConfig+0x16e>
 800a58a:	2b30      	cmp	r3, #48	; 0x30
 800a58c:	d814      	bhi.n	800a5b8 <UART_SetConfig+0x174>
 800a58e:	2b20      	cmp	r3, #32
 800a590:	d009      	beq.n	800a5a6 <UART_SetConfig+0x162>
 800a592:	2b20      	cmp	r3, #32
 800a594:	d810      	bhi.n	800a5b8 <UART_SetConfig+0x174>
 800a596:	2b00      	cmp	r3, #0
 800a598:	d002      	beq.n	800a5a0 <UART_SetConfig+0x15c>
 800a59a:	2b10      	cmp	r3, #16
 800a59c:	d006      	beq.n	800a5ac <UART_SetConfig+0x168>
 800a59e:	e00b      	b.n	800a5b8 <UART_SetConfig+0x174>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	77fb      	strb	r3, [r7, #31]
 800a5a4:	e0f2      	b.n	800a78c <UART_SetConfig+0x348>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	77fb      	strb	r3, [r7, #31]
 800a5aa:	e0ef      	b.n	800a78c <UART_SetConfig+0x348>
 800a5ac:	2304      	movs	r3, #4
 800a5ae:	77fb      	strb	r3, [r7, #31]
 800a5b0:	e0ec      	b.n	800a78c <UART_SetConfig+0x348>
 800a5b2:	2308      	movs	r3, #8
 800a5b4:	77fb      	strb	r3, [r7, #31]
 800a5b6:	e0e9      	b.n	800a78c <UART_SetConfig+0x348>
 800a5b8:	2310      	movs	r3, #16
 800a5ba:	77fb      	strb	r3, [r7, #31]
 800a5bc:	e0e6      	b.n	800a78c <UART_SetConfig+0x348>
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	4a56      	ldr	r2, [pc, #344]	; (800a71c <UART_SetConfig+0x2d8>)
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	d120      	bne.n	800a60a <UART_SetConfig+0x1c6>
 800a5c8:	4b51      	ldr	r3, [pc, #324]	; (800a710 <UART_SetConfig+0x2cc>)
 800a5ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a5ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a5d2:	2bc0      	cmp	r3, #192	; 0xc0
 800a5d4:	d013      	beq.n	800a5fe <UART_SetConfig+0x1ba>
 800a5d6:	2bc0      	cmp	r3, #192	; 0xc0
 800a5d8:	d814      	bhi.n	800a604 <UART_SetConfig+0x1c0>
 800a5da:	2b80      	cmp	r3, #128	; 0x80
 800a5dc:	d009      	beq.n	800a5f2 <UART_SetConfig+0x1ae>
 800a5de:	2b80      	cmp	r3, #128	; 0x80
 800a5e0:	d810      	bhi.n	800a604 <UART_SetConfig+0x1c0>
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d002      	beq.n	800a5ec <UART_SetConfig+0x1a8>
 800a5e6:	2b40      	cmp	r3, #64	; 0x40
 800a5e8:	d006      	beq.n	800a5f8 <UART_SetConfig+0x1b4>
 800a5ea:	e00b      	b.n	800a604 <UART_SetConfig+0x1c0>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	77fb      	strb	r3, [r7, #31]
 800a5f0:	e0cc      	b.n	800a78c <UART_SetConfig+0x348>
 800a5f2:	2302      	movs	r3, #2
 800a5f4:	77fb      	strb	r3, [r7, #31]
 800a5f6:	e0c9      	b.n	800a78c <UART_SetConfig+0x348>
 800a5f8:	2304      	movs	r3, #4
 800a5fa:	77fb      	strb	r3, [r7, #31]
 800a5fc:	e0c6      	b.n	800a78c <UART_SetConfig+0x348>
 800a5fe:	2308      	movs	r3, #8
 800a600:	77fb      	strb	r3, [r7, #31]
 800a602:	e0c3      	b.n	800a78c <UART_SetConfig+0x348>
 800a604:	2310      	movs	r3, #16
 800a606:	77fb      	strb	r3, [r7, #31]
 800a608:	e0c0      	b.n	800a78c <UART_SetConfig+0x348>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a44      	ldr	r2, [pc, #272]	; (800a720 <UART_SetConfig+0x2dc>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d125      	bne.n	800a660 <UART_SetConfig+0x21c>
 800a614:	4b3e      	ldr	r3, [pc, #248]	; (800a710 <UART_SetConfig+0x2cc>)
 800a616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a61a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a61e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a622:	d017      	beq.n	800a654 <UART_SetConfig+0x210>
 800a624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a628:	d817      	bhi.n	800a65a <UART_SetConfig+0x216>
 800a62a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a62e:	d00b      	beq.n	800a648 <UART_SetConfig+0x204>
 800a630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a634:	d811      	bhi.n	800a65a <UART_SetConfig+0x216>
 800a636:	2b00      	cmp	r3, #0
 800a638:	d003      	beq.n	800a642 <UART_SetConfig+0x1fe>
 800a63a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a63e:	d006      	beq.n	800a64e <UART_SetConfig+0x20a>
 800a640:	e00b      	b.n	800a65a <UART_SetConfig+0x216>
 800a642:	2300      	movs	r3, #0
 800a644:	77fb      	strb	r3, [r7, #31]
 800a646:	e0a1      	b.n	800a78c <UART_SetConfig+0x348>
 800a648:	2302      	movs	r3, #2
 800a64a:	77fb      	strb	r3, [r7, #31]
 800a64c:	e09e      	b.n	800a78c <UART_SetConfig+0x348>
 800a64e:	2304      	movs	r3, #4
 800a650:	77fb      	strb	r3, [r7, #31]
 800a652:	e09b      	b.n	800a78c <UART_SetConfig+0x348>
 800a654:	2308      	movs	r3, #8
 800a656:	77fb      	strb	r3, [r7, #31]
 800a658:	e098      	b.n	800a78c <UART_SetConfig+0x348>
 800a65a:	2310      	movs	r3, #16
 800a65c:	77fb      	strb	r3, [r7, #31]
 800a65e:	e095      	b.n	800a78c <UART_SetConfig+0x348>
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a2f      	ldr	r2, [pc, #188]	; (800a724 <UART_SetConfig+0x2e0>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d125      	bne.n	800a6b6 <UART_SetConfig+0x272>
 800a66a:	4b29      	ldr	r3, [pc, #164]	; (800a710 <UART_SetConfig+0x2cc>)
 800a66c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a670:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a674:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a678:	d017      	beq.n	800a6aa <UART_SetConfig+0x266>
 800a67a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a67e:	d817      	bhi.n	800a6b0 <UART_SetConfig+0x26c>
 800a680:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a684:	d00b      	beq.n	800a69e <UART_SetConfig+0x25a>
 800a686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a68a:	d811      	bhi.n	800a6b0 <UART_SetConfig+0x26c>
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <UART_SetConfig+0x254>
 800a690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a694:	d006      	beq.n	800a6a4 <UART_SetConfig+0x260>
 800a696:	e00b      	b.n	800a6b0 <UART_SetConfig+0x26c>
 800a698:	2301      	movs	r3, #1
 800a69a:	77fb      	strb	r3, [r7, #31]
 800a69c:	e076      	b.n	800a78c <UART_SetConfig+0x348>
 800a69e:	2302      	movs	r3, #2
 800a6a0:	77fb      	strb	r3, [r7, #31]
 800a6a2:	e073      	b.n	800a78c <UART_SetConfig+0x348>
 800a6a4:	2304      	movs	r3, #4
 800a6a6:	77fb      	strb	r3, [r7, #31]
 800a6a8:	e070      	b.n	800a78c <UART_SetConfig+0x348>
 800a6aa:	2308      	movs	r3, #8
 800a6ac:	77fb      	strb	r3, [r7, #31]
 800a6ae:	e06d      	b.n	800a78c <UART_SetConfig+0x348>
 800a6b0:	2310      	movs	r3, #16
 800a6b2:	77fb      	strb	r3, [r7, #31]
 800a6b4:	e06a      	b.n	800a78c <UART_SetConfig+0x348>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a1b      	ldr	r2, [pc, #108]	; (800a728 <UART_SetConfig+0x2e4>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d138      	bne.n	800a732 <UART_SetConfig+0x2ee>
 800a6c0:	4b13      	ldr	r3, [pc, #76]	; (800a710 <UART_SetConfig+0x2cc>)
 800a6c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6c6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a6ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6ce:	d017      	beq.n	800a700 <UART_SetConfig+0x2bc>
 800a6d0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a6d4:	d82a      	bhi.n	800a72c <UART_SetConfig+0x2e8>
 800a6d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6da:	d00b      	beq.n	800a6f4 <UART_SetConfig+0x2b0>
 800a6dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6e0:	d824      	bhi.n	800a72c <UART_SetConfig+0x2e8>
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d003      	beq.n	800a6ee <UART_SetConfig+0x2aa>
 800a6e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6ea:	d006      	beq.n	800a6fa <UART_SetConfig+0x2b6>
 800a6ec:	e01e      	b.n	800a72c <UART_SetConfig+0x2e8>
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	77fb      	strb	r3, [r7, #31]
 800a6f2:	e04b      	b.n	800a78c <UART_SetConfig+0x348>
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	77fb      	strb	r3, [r7, #31]
 800a6f8:	e048      	b.n	800a78c <UART_SetConfig+0x348>
 800a6fa:	2304      	movs	r3, #4
 800a6fc:	77fb      	strb	r3, [r7, #31]
 800a6fe:	e045      	b.n	800a78c <UART_SetConfig+0x348>
 800a700:	2308      	movs	r3, #8
 800a702:	77fb      	strb	r3, [r7, #31]
 800a704:	e042      	b.n	800a78c <UART_SetConfig+0x348>
 800a706:	bf00      	nop
 800a708:	efff69f3 	.word	0xefff69f3
 800a70c:	40011000 	.word	0x40011000
 800a710:	40023800 	.word	0x40023800
 800a714:	40004400 	.word	0x40004400
 800a718:	40004800 	.word	0x40004800
 800a71c:	40004c00 	.word	0x40004c00
 800a720:	40005000 	.word	0x40005000
 800a724:	40011400 	.word	0x40011400
 800a728:	40007800 	.word	0x40007800
 800a72c:	2310      	movs	r3, #16
 800a72e:	77fb      	strb	r3, [r7, #31]
 800a730:	e02c      	b.n	800a78c <UART_SetConfig+0x348>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a72      	ldr	r2, [pc, #456]	; (800a900 <UART_SetConfig+0x4bc>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d125      	bne.n	800a788 <UART_SetConfig+0x344>
 800a73c:	4b71      	ldr	r3, [pc, #452]	; (800a904 <UART_SetConfig+0x4c0>)
 800a73e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a742:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a746:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a74a:	d017      	beq.n	800a77c <UART_SetConfig+0x338>
 800a74c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a750:	d817      	bhi.n	800a782 <UART_SetConfig+0x33e>
 800a752:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a756:	d00b      	beq.n	800a770 <UART_SetConfig+0x32c>
 800a758:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a75c:	d811      	bhi.n	800a782 <UART_SetConfig+0x33e>
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d003      	beq.n	800a76a <UART_SetConfig+0x326>
 800a762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a766:	d006      	beq.n	800a776 <UART_SetConfig+0x332>
 800a768:	e00b      	b.n	800a782 <UART_SetConfig+0x33e>
 800a76a:	2300      	movs	r3, #0
 800a76c:	77fb      	strb	r3, [r7, #31]
 800a76e:	e00d      	b.n	800a78c <UART_SetConfig+0x348>
 800a770:	2302      	movs	r3, #2
 800a772:	77fb      	strb	r3, [r7, #31]
 800a774:	e00a      	b.n	800a78c <UART_SetConfig+0x348>
 800a776:	2304      	movs	r3, #4
 800a778:	77fb      	strb	r3, [r7, #31]
 800a77a:	e007      	b.n	800a78c <UART_SetConfig+0x348>
 800a77c:	2308      	movs	r3, #8
 800a77e:	77fb      	strb	r3, [r7, #31]
 800a780:	e004      	b.n	800a78c <UART_SetConfig+0x348>
 800a782:	2310      	movs	r3, #16
 800a784:	77fb      	strb	r3, [r7, #31]
 800a786:	e001      	b.n	800a78c <UART_SetConfig+0x348>
 800a788:	2310      	movs	r3, #16
 800a78a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	69db      	ldr	r3, [r3, #28]
 800a790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a794:	d15b      	bne.n	800a84e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a796:	7ffb      	ldrb	r3, [r7, #31]
 800a798:	2b08      	cmp	r3, #8
 800a79a:	d828      	bhi.n	800a7ee <UART_SetConfig+0x3aa>
 800a79c:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <UART_SetConfig+0x360>)
 800a79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a2:	bf00      	nop
 800a7a4:	0800a7c9 	.word	0x0800a7c9
 800a7a8:	0800a7d1 	.word	0x0800a7d1
 800a7ac:	0800a7d9 	.word	0x0800a7d9
 800a7b0:	0800a7ef 	.word	0x0800a7ef
 800a7b4:	0800a7df 	.word	0x0800a7df
 800a7b8:	0800a7ef 	.word	0x0800a7ef
 800a7bc:	0800a7ef 	.word	0x0800a7ef
 800a7c0:	0800a7ef 	.word	0x0800a7ef
 800a7c4:	0800a7e7 	.word	0x0800a7e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7c8:	f7fd fdb6 	bl	8008338 <HAL_RCC_GetPCLK1Freq>
 800a7cc:	61b8      	str	r0, [r7, #24]
        break;
 800a7ce:	e013      	b.n	800a7f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7d0:	f7fd fdc6 	bl	8008360 <HAL_RCC_GetPCLK2Freq>
 800a7d4:	61b8      	str	r0, [r7, #24]
        break;
 800a7d6:	e00f      	b.n	800a7f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7d8:	4b4b      	ldr	r3, [pc, #300]	; (800a908 <UART_SetConfig+0x4c4>)
 800a7da:	61bb      	str	r3, [r7, #24]
        break;
 800a7dc:	e00c      	b.n	800a7f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7de:	f7fd fcd9 	bl	8008194 <HAL_RCC_GetSysClockFreq>
 800a7e2:	61b8      	str	r0, [r7, #24]
        break;
 800a7e4:	e008      	b.n	800a7f8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ea:	61bb      	str	r3, [r7, #24]
        break;
 800a7ec:	e004      	b.n	800a7f8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a7f2:	2301      	movs	r3, #1
 800a7f4:	77bb      	strb	r3, [r7, #30]
        break;
 800a7f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7f8:	69bb      	ldr	r3, [r7, #24]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d074      	beq.n	800a8e8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	005a      	lsls	r2, r3, #1
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	085b      	lsrs	r3, r3, #1
 800a808:	441a      	add	r2, r3
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a812:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	2b0f      	cmp	r3, #15
 800a818:	d916      	bls.n	800a848 <UART_SetConfig+0x404>
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a820:	d212      	bcs.n	800a848 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	b29b      	uxth	r3, r3
 800a826:	f023 030f 	bic.w	r3, r3, #15
 800a82a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	085b      	lsrs	r3, r3, #1
 800a830:	b29b      	uxth	r3, r3
 800a832:	f003 0307 	and.w	r3, r3, #7
 800a836:	b29a      	uxth	r2, r3
 800a838:	89fb      	ldrh	r3, [r7, #14]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	89fa      	ldrh	r2, [r7, #14]
 800a844:	60da      	str	r2, [r3, #12]
 800a846:	e04f      	b.n	800a8e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a848:	2301      	movs	r3, #1
 800a84a:	77bb      	strb	r3, [r7, #30]
 800a84c:	e04c      	b.n	800a8e8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a84e:	7ffb      	ldrb	r3, [r7, #31]
 800a850:	2b08      	cmp	r3, #8
 800a852:	d828      	bhi.n	800a8a6 <UART_SetConfig+0x462>
 800a854:	a201      	add	r2, pc, #4	; (adr r2, 800a85c <UART_SetConfig+0x418>)
 800a856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85a:	bf00      	nop
 800a85c:	0800a881 	.word	0x0800a881
 800a860:	0800a889 	.word	0x0800a889
 800a864:	0800a891 	.word	0x0800a891
 800a868:	0800a8a7 	.word	0x0800a8a7
 800a86c:	0800a897 	.word	0x0800a897
 800a870:	0800a8a7 	.word	0x0800a8a7
 800a874:	0800a8a7 	.word	0x0800a8a7
 800a878:	0800a8a7 	.word	0x0800a8a7
 800a87c:	0800a89f 	.word	0x0800a89f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a880:	f7fd fd5a 	bl	8008338 <HAL_RCC_GetPCLK1Freq>
 800a884:	61b8      	str	r0, [r7, #24]
        break;
 800a886:	e013      	b.n	800a8b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a888:	f7fd fd6a 	bl	8008360 <HAL_RCC_GetPCLK2Freq>
 800a88c:	61b8      	str	r0, [r7, #24]
        break;
 800a88e:	e00f      	b.n	800a8b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a890:	4b1d      	ldr	r3, [pc, #116]	; (800a908 <UART_SetConfig+0x4c4>)
 800a892:	61bb      	str	r3, [r7, #24]
        break;
 800a894:	e00c      	b.n	800a8b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a896:	f7fd fc7d 	bl	8008194 <HAL_RCC_GetSysClockFreq>
 800a89a:	61b8      	str	r0, [r7, #24]
        break;
 800a89c:	e008      	b.n	800a8b0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a89e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8a2:	61bb      	str	r3, [r7, #24]
        break;
 800a8a4:	e004      	b.n	800a8b0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a8aa:	2301      	movs	r3, #1
 800a8ac:	77bb      	strb	r3, [r7, #30]
        break;
 800a8ae:	bf00      	nop
    }

    if (pclk != 0U)
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d018      	beq.n	800a8e8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	085a      	lsrs	r2, r3, #1
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	441a      	add	r2, r3
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	2b0f      	cmp	r3, #15
 800a8ce:	d909      	bls.n	800a8e4 <UART_SetConfig+0x4a0>
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8d6:	d205      	bcs.n	800a8e4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	b29a      	uxth	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	60da      	str	r2, [r3, #12]
 800a8e2:	e001      	b.n	800a8e8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a8e4:	2301      	movs	r3, #1
 800a8e6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a8f4:	7fbb      	ldrb	r3, [r7, #30]
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	3720      	adds	r7, #32
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	bd80      	pop	{r7, pc}
 800a8fe:	bf00      	nop
 800a900:	40007c00 	.word	0x40007c00
 800a904:	40023800 	.word	0x40023800
 800a908:	00f42400 	.word	0x00f42400

0800a90c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00a      	beq.n	800a936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	430a      	orrs	r2, r1
 800a934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a93a:	f003 0302 	and.w	r3, r3, #2
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00a      	beq.n	800a958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	430a      	orrs	r2, r1
 800a956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a95c:	f003 0304 	and.w	r3, r3, #4
 800a960:	2b00      	cmp	r3, #0
 800a962:	d00a      	beq.n	800a97a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	430a      	orrs	r2, r1
 800a978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	f003 0308 	and.w	r3, r3, #8
 800a982:	2b00      	cmp	r3, #0
 800a984:	d00a      	beq.n	800a99c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	430a      	orrs	r2, r1
 800a99a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a0:	f003 0310 	and.w	r3, r3, #16
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00a      	beq.n	800a9be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	430a      	orrs	r2, r1
 800a9bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c2:	f003 0320 	and.w	r3, r3, #32
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00a      	beq.n	800a9e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	689b      	ldr	r3, [r3, #8]
 800a9d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	430a      	orrs	r2, r1
 800a9de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d01a      	beq.n	800aa22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	430a      	orrs	r2, r1
 800aa00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa0a:	d10a      	bne.n	800aa22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	685b      	ldr	r3, [r3, #4]
 800aa12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	430a      	orrs	r2, r1
 800aa20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d00a      	beq.n	800aa44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	430a      	orrs	r2, r1
 800aa42:	605a      	str	r2, [r3, #4]
  }
}
 800aa44:	bf00      	nop
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b086      	sub	sp, #24
 800aa54:	af02      	add	r7, sp, #8
 800aa56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa60:	f7f9 ffd2 	bl	8004a08 <HAL_GetTick>
 800aa64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f003 0308 	and.w	r3, r3, #8
 800aa70:	2b08      	cmp	r3, #8
 800aa72:	d10e      	bne.n	800aa92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa82:	6878      	ldr	r0, [r7, #4]
 800aa84:	f000 f81b 	bl	800aabe <UART_WaitOnFlagUntilTimeout>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d001      	beq.n	800aa92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	e011      	b.n	800aab6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2220      	movs	r2, #32
 800aa96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2220      	movs	r2, #32
 800aa9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3710      	adds	r7, #16
 800aaba:	46bd      	mov	sp, r7
 800aabc:	bd80      	pop	{r7, pc}

0800aabe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aabe:	b580      	push	{r7, lr}
 800aac0:	b09c      	sub	sp, #112	; 0x70
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	60f8      	str	r0, [r7, #12]
 800aac6:	60b9      	str	r1, [r7, #8]
 800aac8:	603b      	str	r3, [r7, #0]
 800aaca:	4613      	mov	r3, r2
 800aacc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aace:	e0a7      	b.n	800ac20 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aad0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aad6:	f000 80a3 	beq.w	800ac20 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aada:	f7f9 ff95 	bl	8004a08 <HAL_GetTick>
 800aade:	4602      	mov	r2, r0
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	1ad3      	subs	r3, r2, r3
 800aae4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d302      	bcc.n	800aaf0 <UART_WaitOnFlagUntilTimeout+0x32>
 800aaea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d13f      	bne.n	800ab70 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaf8:	e853 3f00 	ldrex	r3, [r3]
 800aafc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aafe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab04:	667b      	str	r3, [r7, #100]	; 0x64
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ab14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ab16:	e841 2300 	strex	r3, r2, [r1]
 800ab1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ab1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1e6      	bne.n	800aaf0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3308      	adds	r3, #8
 800ab28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab2c:	e853 3f00 	ldrex	r3, [r3]
 800ab30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab34:	f023 0301 	bic.w	r3, r3, #1
 800ab38:	663b      	str	r3, [r7, #96]	; 0x60
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3308      	adds	r3, #8
 800ab40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab42:	64ba      	str	r2, [r7, #72]	; 0x48
 800ab44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e5      	bne.n	800ab22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2220      	movs	r2, #32
 800ab5a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2220      	movs	r2, #32
 800ab60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2200      	movs	r2, #0
 800ab68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e068      	b.n	800ac42 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f003 0304 	and.w	r3, r3, #4
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d050      	beq.n	800ac20 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	69db      	ldr	r3, [r3, #28]
 800ab84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab8c:	d148      	bne.n	800ac20 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba0:	e853 3f00 	ldrex	r3, [r3]
 800aba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aba8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800abac:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	461a      	mov	r2, r3
 800abb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800abb6:	637b      	str	r3, [r7, #52]	; 0x34
 800abb8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800abbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800abbe:	e841 2300 	strex	r3, r2, [r1]
 800abc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800abc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d1e6      	bne.n	800ab98 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	3308      	adds	r3, #8
 800abd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	e853 3f00 	ldrex	r3, [r3]
 800abd8:	613b      	str	r3, [r7, #16]
   return(result);
 800abda:	693b      	ldr	r3, [r7, #16]
 800abdc:	f023 0301 	bic.w	r3, r3, #1
 800abe0:	66bb      	str	r3, [r7, #104]	; 0x68
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	3308      	adds	r3, #8
 800abe8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800abea:	623a      	str	r2, [r7, #32]
 800abec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abee:	69f9      	ldr	r1, [r7, #28]
 800abf0:	6a3a      	ldr	r2, [r7, #32]
 800abf2:	e841 2300 	strex	r3, r2, [r1]
 800abf6:	61bb      	str	r3, [r7, #24]
   return(result);
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1e5      	bne.n	800abca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2220      	movs	r2, #32
 800ac02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2220      	movs	r2, #32
 800ac08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	2220      	movs	r2, #32
 800ac10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	2200      	movs	r2, #0
 800ac18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800ac1c:	2303      	movs	r3, #3
 800ac1e:	e010      	b.n	800ac42 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	69da      	ldr	r2, [r3, #28]
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	4013      	ands	r3, r2
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	bf0c      	ite	eq
 800ac30:	2301      	moveq	r3, #1
 800ac32:	2300      	movne	r3, #0
 800ac34:	b2db      	uxtb	r3, r3
 800ac36:	461a      	mov	r2, r3
 800ac38:	79fb      	ldrb	r3, [r7, #7]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	f43f af48 	beq.w	800aad0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3770      	adds	r7, #112	; 0x70
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
	...

0800ac4c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b083      	sub	sp, #12
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d121      	bne.n	800aca2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	4b27      	ldr	r3, [pc, #156]	; (800ad00 <FMC_SDRAM_Init+0xb4>)
 800ac64:	4013      	ands	r3, r2
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	6851      	ldr	r1, [r2, #4]
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	6892      	ldr	r2, [r2, #8]
 800ac6e:	4311      	orrs	r1, r2
 800ac70:	683a      	ldr	r2, [r7, #0]
 800ac72:	68d2      	ldr	r2, [r2, #12]
 800ac74:	4311      	orrs	r1, r2
 800ac76:	683a      	ldr	r2, [r7, #0]
 800ac78:	6912      	ldr	r2, [r2, #16]
 800ac7a:	4311      	orrs	r1, r2
 800ac7c:	683a      	ldr	r2, [r7, #0]
 800ac7e:	6952      	ldr	r2, [r2, #20]
 800ac80:	4311      	orrs	r1, r2
 800ac82:	683a      	ldr	r2, [r7, #0]
 800ac84:	6992      	ldr	r2, [r2, #24]
 800ac86:	4311      	orrs	r1, r2
 800ac88:	683a      	ldr	r2, [r7, #0]
 800ac8a:	69d2      	ldr	r2, [r2, #28]
 800ac8c:	4311      	orrs	r1, r2
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	6a12      	ldr	r2, [r2, #32]
 800ac92:	4311      	orrs	r1, r2
 800ac94:	683a      	ldr	r2, [r7, #0]
 800ac96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ac98:	430a      	orrs	r2, r1
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	601a      	str	r2, [r3, #0]
 800aca0:	e026      	b.n	800acf0 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	69d9      	ldr	r1, [r3, #28]
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	4319      	orrs	r1, r3
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acb8:	430b      	orrs	r3, r1
 800acba:	431a      	orrs	r2, r3
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	685a      	ldr	r2, [r3, #4]
 800acc4:	4b0e      	ldr	r3, [pc, #56]	; (800ad00 <FMC_SDRAM_Init+0xb4>)
 800acc6:	4013      	ands	r3, r2
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	6851      	ldr	r1, [r2, #4]
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	6892      	ldr	r2, [r2, #8]
 800acd0:	4311      	orrs	r1, r2
 800acd2:	683a      	ldr	r2, [r7, #0]
 800acd4:	68d2      	ldr	r2, [r2, #12]
 800acd6:	4311      	orrs	r1, r2
 800acd8:	683a      	ldr	r2, [r7, #0]
 800acda:	6912      	ldr	r2, [r2, #16]
 800acdc:	4311      	orrs	r1, r2
 800acde:	683a      	ldr	r2, [r7, #0]
 800ace0:	6952      	ldr	r2, [r2, #20]
 800ace2:	4311      	orrs	r1, r2
 800ace4:	683a      	ldr	r2, [r7, #0]
 800ace6:	6992      	ldr	r2, [r2, #24]
 800ace8:	430a      	orrs	r2, r1
 800acea:	431a      	orrs	r2, r3
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	4618      	mov	r0, r3
 800acf4:	370c      	adds	r7, #12
 800acf6:	46bd      	mov	sp, r7
 800acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfc:	4770      	bx	lr
 800acfe:	bf00      	nop
 800ad00:	ffff8000 	.word	0xffff8000

0800ad04 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ad04:	b480      	push	{r7}
 800ad06:	b085      	sub	sp, #20
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60f8      	str	r0, [r7, #12]
 800ad0c:	60b9      	str	r1, [r7, #8]
 800ad0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d128      	bne.n	800ad68 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	689b      	ldr	r3, [r3, #8]
 800ad1a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	1e59      	subs	r1, r3, #1
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	3b01      	subs	r3, #1
 800ad2a:	011b      	lsls	r3, r3, #4
 800ad2c:	4319      	orrs	r1, r3
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	689b      	ldr	r3, [r3, #8]
 800ad32:	3b01      	subs	r3, #1
 800ad34:	021b      	lsls	r3, r3, #8
 800ad36:	4319      	orrs	r1, r3
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	68db      	ldr	r3, [r3, #12]
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	031b      	lsls	r3, r3, #12
 800ad40:	4319      	orrs	r1, r3
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	691b      	ldr	r3, [r3, #16]
 800ad46:	3b01      	subs	r3, #1
 800ad48:	041b      	lsls	r3, r3, #16
 800ad4a:	4319      	orrs	r1, r3
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	695b      	ldr	r3, [r3, #20]
 800ad50:	3b01      	subs	r3, #1
 800ad52:	051b      	lsls	r3, r3, #20
 800ad54:	4319      	orrs	r1, r3
 800ad56:	68bb      	ldr	r3, [r7, #8]
 800ad58:	699b      	ldr	r3, [r3, #24]
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	061b      	lsls	r3, r3, #24
 800ad5e:	430b      	orrs	r3, r1
 800ad60:	431a      	orrs	r2, r3
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	609a      	str	r2, [r3, #8]
 800ad66:	e02d      	b.n	800adc4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	689a      	ldr	r2, [r3, #8]
 800ad6c:	4b19      	ldr	r3, [pc, #100]	; (800add4 <FMC_SDRAM_Timing_Init+0xd0>)
 800ad6e:	4013      	ands	r3, r2
 800ad70:	68ba      	ldr	r2, [r7, #8]
 800ad72:	68d2      	ldr	r2, [r2, #12]
 800ad74:	3a01      	subs	r2, #1
 800ad76:	0311      	lsls	r1, r2, #12
 800ad78:	68ba      	ldr	r2, [r7, #8]
 800ad7a:	6952      	ldr	r2, [r2, #20]
 800ad7c:	3a01      	subs	r2, #1
 800ad7e:	0512      	lsls	r2, r2, #20
 800ad80:	430a      	orrs	r2, r1
 800ad82:	431a      	orrs	r2, r3
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	1e59      	subs	r1, r3, #1
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	3b01      	subs	r3, #1
 800ad9c:	011b      	lsls	r3, r3, #4
 800ad9e:	4319      	orrs	r1, r3
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	689b      	ldr	r3, [r3, #8]
 800ada4:	3b01      	subs	r3, #1
 800ada6:	021b      	lsls	r3, r3, #8
 800ada8:	4319      	orrs	r1, r3
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	691b      	ldr	r3, [r3, #16]
 800adae:	3b01      	subs	r3, #1
 800adb0:	041b      	lsls	r3, r3, #16
 800adb2:	4319      	orrs	r1, r3
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	699b      	ldr	r3, [r3, #24]
 800adb8:	3b01      	subs	r3, #1
 800adba:	061b      	lsls	r3, r3, #24
 800adbc:	430b      	orrs	r3, r1
 800adbe:	431a      	orrs	r2, r3
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	ff0f0fff 	.word	0xff0f0fff

0800add8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	60f8      	str	r0, [r7, #12]
 800ade0:	60b9      	str	r1, [r7, #8]
 800ade2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	691a      	ldr	r2, [r3, #16]
 800ade8:	4b0c      	ldr	r3, [pc, #48]	; (800ae1c <FMC_SDRAM_SendCommand+0x44>)
 800adea:	4013      	ands	r3, r2
 800adec:	68ba      	ldr	r2, [r7, #8]
 800adee:	6811      	ldr	r1, [r2, #0]
 800adf0:	68ba      	ldr	r2, [r7, #8]
 800adf2:	6852      	ldr	r2, [r2, #4]
 800adf4:	4311      	orrs	r1, r2
 800adf6:	68ba      	ldr	r2, [r7, #8]
 800adf8:	6892      	ldr	r2, [r2, #8]
 800adfa:	3a01      	subs	r2, #1
 800adfc:	0152      	lsls	r2, r2, #5
 800adfe:	4311      	orrs	r1, r2
 800ae00:	68ba      	ldr	r2, [r7, #8]
 800ae02:	68d2      	ldr	r2, [r2, #12]
 800ae04:	0252      	lsls	r2, r2, #9
 800ae06:	430a      	orrs	r2, r1
 800ae08:	431a      	orrs	r2, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3714      	adds	r7, #20
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr
 800ae1c:	ffc00000 	.word	0xffc00000

0800ae20 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	695a      	ldr	r2, [r3, #20]
 800ae2e:	4b07      	ldr	r3, [pc, #28]	; (800ae4c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800ae30:	4013      	ands	r3, r2
 800ae32:	683a      	ldr	r2, [r7, #0]
 800ae34:	0052      	lsls	r2, r2, #1
 800ae36:	431a      	orrs	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800ae3c:	2300      	movs	r3, #0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr
 800ae4a:	bf00      	nop
 800ae4c:	ffffc001 	.word	0xffffc001

0800ae50 <siprintf>:
 800ae50:	b40e      	push	{r1, r2, r3}
 800ae52:	b500      	push	{lr}
 800ae54:	b09c      	sub	sp, #112	; 0x70
 800ae56:	ab1d      	add	r3, sp, #116	; 0x74
 800ae58:	9002      	str	r0, [sp, #8]
 800ae5a:	9006      	str	r0, [sp, #24]
 800ae5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae60:	4809      	ldr	r0, [pc, #36]	; (800ae88 <siprintf+0x38>)
 800ae62:	9107      	str	r1, [sp, #28]
 800ae64:	9104      	str	r1, [sp, #16]
 800ae66:	4909      	ldr	r1, [pc, #36]	; (800ae8c <siprintf+0x3c>)
 800ae68:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae6c:	9105      	str	r1, [sp, #20]
 800ae6e:	6800      	ldr	r0, [r0, #0]
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	a902      	add	r1, sp, #8
 800ae74:	f000 f992 	bl	800b19c <_svfiprintf_r>
 800ae78:	9b02      	ldr	r3, [sp, #8]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	701a      	strb	r2, [r3, #0]
 800ae7e:	b01c      	add	sp, #112	; 0x70
 800ae80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae84:	b003      	add	sp, #12
 800ae86:	4770      	bx	lr
 800ae88:	2000008c 	.word	0x2000008c
 800ae8c:	ffff0208 	.word	0xffff0208

0800ae90 <memset>:
 800ae90:	4402      	add	r2, r0
 800ae92:	4603      	mov	r3, r0
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d100      	bne.n	800ae9a <memset+0xa>
 800ae98:	4770      	bx	lr
 800ae9a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae9e:	e7f9      	b.n	800ae94 <memset+0x4>

0800aea0 <__errno>:
 800aea0:	4b01      	ldr	r3, [pc, #4]	; (800aea8 <__errno+0x8>)
 800aea2:	6818      	ldr	r0, [r3, #0]
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	2000008c 	.word	0x2000008c

0800aeac <__libc_init_array>:
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	4d0d      	ldr	r5, [pc, #52]	; (800aee4 <__libc_init_array+0x38>)
 800aeb0:	4c0d      	ldr	r4, [pc, #52]	; (800aee8 <__libc_init_array+0x3c>)
 800aeb2:	1b64      	subs	r4, r4, r5
 800aeb4:	10a4      	asrs	r4, r4, #2
 800aeb6:	2600      	movs	r6, #0
 800aeb8:	42a6      	cmp	r6, r4
 800aeba:	d109      	bne.n	800aed0 <__libc_init_array+0x24>
 800aebc:	4d0b      	ldr	r5, [pc, #44]	; (800aeec <__libc_init_array+0x40>)
 800aebe:	4c0c      	ldr	r4, [pc, #48]	; (800aef0 <__libc_init_array+0x44>)
 800aec0:	f000 fc6a 	bl	800b798 <_init>
 800aec4:	1b64      	subs	r4, r4, r5
 800aec6:	10a4      	asrs	r4, r4, #2
 800aec8:	2600      	movs	r6, #0
 800aeca:	42a6      	cmp	r6, r4
 800aecc:	d105      	bne.n	800aeda <__libc_init_array+0x2e>
 800aece:	bd70      	pop	{r4, r5, r6, pc}
 800aed0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aed4:	4798      	blx	r3
 800aed6:	3601      	adds	r6, #1
 800aed8:	e7ee      	b.n	800aeb8 <__libc_init_array+0xc>
 800aeda:	f855 3b04 	ldr.w	r3, [r5], #4
 800aede:	4798      	blx	r3
 800aee0:	3601      	adds	r6, #1
 800aee2:	e7f2      	b.n	800aeca <__libc_init_array+0x1e>
 800aee4:	0804370c 	.word	0x0804370c
 800aee8:	0804370c 	.word	0x0804370c
 800aeec:	0804370c 	.word	0x0804370c
 800aef0:	08043710 	.word	0x08043710

0800aef4 <__retarget_lock_acquire_recursive>:
 800aef4:	4770      	bx	lr

0800aef6 <__retarget_lock_release_recursive>:
 800aef6:	4770      	bx	lr

0800aef8 <_free_r>:
 800aef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aefa:	2900      	cmp	r1, #0
 800aefc:	d044      	beq.n	800af88 <_free_r+0x90>
 800aefe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af02:	9001      	str	r0, [sp, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	f1a1 0404 	sub.w	r4, r1, #4
 800af0a:	bfb8      	it	lt
 800af0c:	18e4      	addlt	r4, r4, r3
 800af0e:	f000 f8df 	bl	800b0d0 <__malloc_lock>
 800af12:	4a1e      	ldr	r2, [pc, #120]	; (800af8c <_free_r+0x94>)
 800af14:	9801      	ldr	r0, [sp, #4]
 800af16:	6813      	ldr	r3, [r2, #0]
 800af18:	b933      	cbnz	r3, 800af28 <_free_r+0x30>
 800af1a:	6063      	str	r3, [r4, #4]
 800af1c:	6014      	str	r4, [r2, #0]
 800af1e:	b003      	add	sp, #12
 800af20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af24:	f000 b8da 	b.w	800b0dc <__malloc_unlock>
 800af28:	42a3      	cmp	r3, r4
 800af2a:	d908      	bls.n	800af3e <_free_r+0x46>
 800af2c:	6825      	ldr	r5, [r4, #0]
 800af2e:	1961      	adds	r1, r4, r5
 800af30:	428b      	cmp	r3, r1
 800af32:	bf01      	itttt	eq
 800af34:	6819      	ldreq	r1, [r3, #0]
 800af36:	685b      	ldreq	r3, [r3, #4]
 800af38:	1949      	addeq	r1, r1, r5
 800af3a:	6021      	streq	r1, [r4, #0]
 800af3c:	e7ed      	b.n	800af1a <_free_r+0x22>
 800af3e:	461a      	mov	r2, r3
 800af40:	685b      	ldr	r3, [r3, #4]
 800af42:	b10b      	cbz	r3, 800af48 <_free_r+0x50>
 800af44:	42a3      	cmp	r3, r4
 800af46:	d9fa      	bls.n	800af3e <_free_r+0x46>
 800af48:	6811      	ldr	r1, [r2, #0]
 800af4a:	1855      	adds	r5, r2, r1
 800af4c:	42a5      	cmp	r5, r4
 800af4e:	d10b      	bne.n	800af68 <_free_r+0x70>
 800af50:	6824      	ldr	r4, [r4, #0]
 800af52:	4421      	add	r1, r4
 800af54:	1854      	adds	r4, r2, r1
 800af56:	42a3      	cmp	r3, r4
 800af58:	6011      	str	r1, [r2, #0]
 800af5a:	d1e0      	bne.n	800af1e <_free_r+0x26>
 800af5c:	681c      	ldr	r4, [r3, #0]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	6053      	str	r3, [r2, #4]
 800af62:	440c      	add	r4, r1
 800af64:	6014      	str	r4, [r2, #0]
 800af66:	e7da      	b.n	800af1e <_free_r+0x26>
 800af68:	d902      	bls.n	800af70 <_free_r+0x78>
 800af6a:	230c      	movs	r3, #12
 800af6c:	6003      	str	r3, [r0, #0]
 800af6e:	e7d6      	b.n	800af1e <_free_r+0x26>
 800af70:	6825      	ldr	r5, [r4, #0]
 800af72:	1961      	adds	r1, r4, r5
 800af74:	428b      	cmp	r3, r1
 800af76:	bf04      	itt	eq
 800af78:	6819      	ldreq	r1, [r3, #0]
 800af7a:	685b      	ldreq	r3, [r3, #4]
 800af7c:	6063      	str	r3, [r4, #4]
 800af7e:	bf04      	itt	eq
 800af80:	1949      	addeq	r1, r1, r5
 800af82:	6021      	streq	r1, [r4, #0]
 800af84:	6054      	str	r4, [r2, #4]
 800af86:	e7ca      	b.n	800af1e <_free_r+0x26>
 800af88:	b003      	add	sp, #12
 800af8a:	bd30      	pop	{r4, r5, pc}
 800af8c:	20000b5c 	.word	0x20000b5c

0800af90 <sbrk_aligned>:
 800af90:	b570      	push	{r4, r5, r6, lr}
 800af92:	4e0e      	ldr	r6, [pc, #56]	; (800afcc <sbrk_aligned+0x3c>)
 800af94:	460c      	mov	r4, r1
 800af96:	6831      	ldr	r1, [r6, #0]
 800af98:	4605      	mov	r5, r0
 800af9a:	b911      	cbnz	r1, 800afa2 <sbrk_aligned+0x12>
 800af9c:	f000 fba6 	bl	800b6ec <_sbrk_r>
 800afa0:	6030      	str	r0, [r6, #0]
 800afa2:	4621      	mov	r1, r4
 800afa4:	4628      	mov	r0, r5
 800afa6:	f000 fba1 	bl	800b6ec <_sbrk_r>
 800afaa:	1c43      	adds	r3, r0, #1
 800afac:	d00a      	beq.n	800afc4 <sbrk_aligned+0x34>
 800afae:	1cc4      	adds	r4, r0, #3
 800afb0:	f024 0403 	bic.w	r4, r4, #3
 800afb4:	42a0      	cmp	r0, r4
 800afb6:	d007      	beq.n	800afc8 <sbrk_aligned+0x38>
 800afb8:	1a21      	subs	r1, r4, r0
 800afba:	4628      	mov	r0, r5
 800afbc:	f000 fb96 	bl	800b6ec <_sbrk_r>
 800afc0:	3001      	adds	r0, #1
 800afc2:	d101      	bne.n	800afc8 <sbrk_aligned+0x38>
 800afc4:	f04f 34ff 	mov.w	r4, #4294967295
 800afc8:	4620      	mov	r0, r4
 800afca:	bd70      	pop	{r4, r5, r6, pc}
 800afcc:	20000b60 	.word	0x20000b60

0800afd0 <_malloc_r>:
 800afd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afd4:	1ccd      	adds	r5, r1, #3
 800afd6:	f025 0503 	bic.w	r5, r5, #3
 800afda:	3508      	adds	r5, #8
 800afdc:	2d0c      	cmp	r5, #12
 800afde:	bf38      	it	cc
 800afe0:	250c      	movcc	r5, #12
 800afe2:	2d00      	cmp	r5, #0
 800afe4:	4607      	mov	r7, r0
 800afe6:	db01      	blt.n	800afec <_malloc_r+0x1c>
 800afe8:	42a9      	cmp	r1, r5
 800afea:	d905      	bls.n	800aff8 <_malloc_r+0x28>
 800afec:	230c      	movs	r3, #12
 800afee:	603b      	str	r3, [r7, #0]
 800aff0:	2600      	movs	r6, #0
 800aff2:	4630      	mov	r0, r6
 800aff4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aff8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b0cc <_malloc_r+0xfc>
 800affc:	f000 f868 	bl	800b0d0 <__malloc_lock>
 800b000:	f8d8 3000 	ldr.w	r3, [r8]
 800b004:	461c      	mov	r4, r3
 800b006:	bb5c      	cbnz	r4, 800b060 <_malloc_r+0x90>
 800b008:	4629      	mov	r1, r5
 800b00a:	4638      	mov	r0, r7
 800b00c:	f7ff ffc0 	bl	800af90 <sbrk_aligned>
 800b010:	1c43      	adds	r3, r0, #1
 800b012:	4604      	mov	r4, r0
 800b014:	d155      	bne.n	800b0c2 <_malloc_r+0xf2>
 800b016:	f8d8 4000 	ldr.w	r4, [r8]
 800b01a:	4626      	mov	r6, r4
 800b01c:	2e00      	cmp	r6, #0
 800b01e:	d145      	bne.n	800b0ac <_malloc_r+0xdc>
 800b020:	2c00      	cmp	r4, #0
 800b022:	d048      	beq.n	800b0b6 <_malloc_r+0xe6>
 800b024:	6823      	ldr	r3, [r4, #0]
 800b026:	4631      	mov	r1, r6
 800b028:	4638      	mov	r0, r7
 800b02a:	eb04 0903 	add.w	r9, r4, r3
 800b02e:	f000 fb5d 	bl	800b6ec <_sbrk_r>
 800b032:	4581      	cmp	r9, r0
 800b034:	d13f      	bne.n	800b0b6 <_malloc_r+0xe6>
 800b036:	6821      	ldr	r1, [r4, #0]
 800b038:	1a6d      	subs	r5, r5, r1
 800b03a:	4629      	mov	r1, r5
 800b03c:	4638      	mov	r0, r7
 800b03e:	f7ff ffa7 	bl	800af90 <sbrk_aligned>
 800b042:	3001      	adds	r0, #1
 800b044:	d037      	beq.n	800b0b6 <_malloc_r+0xe6>
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	442b      	add	r3, r5
 800b04a:	6023      	str	r3, [r4, #0]
 800b04c:	f8d8 3000 	ldr.w	r3, [r8]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d038      	beq.n	800b0c6 <_malloc_r+0xf6>
 800b054:	685a      	ldr	r2, [r3, #4]
 800b056:	42a2      	cmp	r2, r4
 800b058:	d12b      	bne.n	800b0b2 <_malloc_r+0xe2>
 800b05a:	2200      	movs	r2, #0
 800b05c:	605a      	str	r2, [r3, #4]
 800b05e:	e00f      	b.n	800b080 <_malloc_r+0xb0>
 800b060:	6822      	ldr	r2, [r4, #0]
 800b062:	1b52      	subs	r2, r2, r5
 800b064:	d41f      	bmi.n	800b0a6 <_malloc_r+0xd6>
 800b066:	2a0b      	cmp	r2, #11
 800b068:	d917      	bls.n	800b09a <_malloc_r+0xca>
 800b06a:	1961      	adds	r1, r4, r5
 800b06c:	42a3      	cmp	r3, r4
 800b06e:	6025      	str	r5, [r4, #0]
 800b070:	bf18      	it	ne
 800b072:	6059      	strne	r1, [r3, #4]
 800b074:	6863      	ldr	r3, [r4, #4]
 800b076:	bf08      	it	eq
 800b078:	f8c8 1000 	streq.w	r1, [r8]
 800b07c:	5162      	str	r2, [r4, r5]
 800b07e:	604b      	str	r3, [r1, #4]
 800b080:	4638      	mov	r0, r7
 800b082:	f104 060b 	add.w	r6, r4, #11
 800b086:	f000 f829 	bl	800b0dc <__malloc_unlock>
 800b08a:	f026 0607 	bic.w	r6, r6, #7
 800b08e:	1d23      	adds	r3, r4, #4
 800b090:	1af2      	subs	r2, r6, r3
 800b092:	d0ae      	beq.n	800aff2 <_malloc_r+0x22>
 800b094:	1b9b      	subs	r3, r3, r6
 800b096:	50a3      	str	r3, [r4, r2]
 800b098:	e7ab      	b.n	800aff2 <_malloc_r+0x22>
 800b09a:	42a3      	cmp	r3, r4
 800b09c:	6862      	ldr	r2, [r4, #4]
 800b09e:	d1dd      	bne.n	800b05c <_malloc_r+0x8c>
 800b0a0:	f8c8 2000 	str.w	r2, [r8]
 800b0a4:	e7ec      	b.n	800b080 <_malloc_r+0xb0>
 800b0a6:	4623      	mov	r3, r4
 800b0a8:	6864      	ldr	r4, [r4, #4]
 800b0aa:	e7ac      	b.n	800b006 <_malloc_r+0x36>
 800b0ac:	4634      	mov	r4, r6
 800b0ae:	6876      	ldr	r6, [r6, #4]
 800b0b0:	e7b4      	b.n	800b01c <_malloc_r+0x4c>
 800b0b2:	4613      	mov	r3, r2
 800b0b4:	e7cc      	b.n	800b050 <_malloc_r+0x80>
 800b0b6:	230c      	movs	r3, #12
 800b0b8:	603b      	str	r3, [r7, #0]
 800b0ba:	4638      	mov	r0, r7
 800b0bc:	f000 f80e 	bl	800b0dc <__malloc_unlock>
 800b0c0:	e797      	b.n	800aff2 <_malloc_r+0x22>
 800b0c2:	6025      	str	r5, [r4, #0]
 800b0c4:	e7dc      	b.n	800b080 <_malloc_r+0xb0>
 800b0c6:	605b      	str	r3, [r3, #4]
 800b0c8:	deff      	udf	#255	; 0xff
 800b0ca:	bf00      	nop
 800b0cc:	20000b5c 	.word	0x20000b5c

0800b0d0 <__malloc_lock>:
 800b0d0:	4801      	ldr	r0, [pc, #4]	; (800b0d8 <__malloc_lock+0x8>)
 800b0d2:	f7ff bf0f 	b.w	800aef4 <__retarget_lock_acquire_recursive>
 800b0d6:	bf00      	nop
 800b0d8:	20000b58 	.word	0x20000b58

0800b0dc <__malloc_unlock>:
 800b0dc:	4801      	ldr	r0, [pc, #4]	; (800b0e4 <__malloc_unlock+0x8>)
 800b0de:	f7ff bf0a 	b.w	800aef6 <__retarget_lock_release_recursive>
 800b0e2:	bf00      	nop
 800b0e4:	20000b58 	.word	0x20000b58

0800b0e8 <__ssputs_r>:
 800b0e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0ec:	688e      	ldr	r6, [r1, #8]
 800b0ee:	461f      	mov	r7, r3
 800b0f0:	42be      	cmp	r6, r7
 800b0f2:	680b      	ldr	r3, [r1, #0]
 800b0f4:	4682      	mov	sl, r0
 800b0f6:	460c      	mov	r4, r1
 800b0f8:	4690      	mov	r8, r2
 800b0fa:	d82c      	bhi.n	800b156 <__ssputs_r+0x6e>
 800b0fc:	898a      	ldrh	r2, [r1, #12]
 800b0fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b102:	d026      	beq.n	800b152 <__ssputs_r+0x6a>
 800b104:	6965      	ldr	r5, [r4, #20]
 800b106:	6909      	ldr	r1, [r1, #16]
 800b108:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b10c:	eba3 0901 	sub.w	r9, r3, r1
 800b110:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b114:	1c7b      	adds	r3, r7, #1
 800b116:	444b      	add	r3, r9
 800b118:	106d      	asrs	r5, r5, #1
 800b11a:	429d      	cmp	r5, r3
 800b11c:	bf38      	it	cc
 800b11e:	461d      	movcc	r5, r3
 800b120:	0553      	lsls	r3, r2, #21
 800b122:	d527      	bpl.n	800b174 <__ssputs_r+0x8c>
 800b124:	4629      	mov	r1, r5
 800b126:	f7ff ff53 	bl	800afd0 <_malloc_r>
 800b12a:	4606      	mov	r6, r0
 800b12c:	b360      	cbz	r0, 800b188 <__ssputs_r+0xa0>
 800b12e:	6921      	ldr	r1, [r4, #16]
 800b130:	464a      	mov	r2, r9
 800b132:	f000 faeb 	bl	800b70c <memcpy>
 800b136:	89a3      	ldrh	r3, [r4, #12]
 800b138:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b13c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b140:	81a3      	strh	r3, [r4, #12]
 800b142:	6126      	str	r6, [r4, #16]
 800b144:	6165      	str	r5, [r4, #20]
 800b146:	444e      	add	r6, r9
 800b148:	eba5 0509 	sub.w	r5, r5, r9
 800b14c:	6026      	str	r6, [r4, #0]
 800b14e:	60a5      	str	r5, [r4, #8]
 800b150:	463e      	mov	r6, r7
 800b152:	42be      	cmp	r6, r7
 800b154:	d900      	bls.n	800b158 <__ssputs_r+0x70>
 800b156:	463e      	mov	r6, r7
 800b158:	6820      	ldr	r0, [r4, #0]
 800b15a:	4632      	mov	r2, r6
 800b15c:	4641      	mov	r1, r8
 800b15e:	f000 faab 	bl	800b6b8 <memmove>
 800b162:	68a3      	ldr	r3, [r4, #8]
 800b164:	1b9b      	subs	r3, r3, r6
 800b166:	60a3      	str	r3, [r4, #8]
 800b168:	6823      	ldr	r3, [r4, #0]
 800b16a:	4433      	add	r3, r6
 800b16c:	6023      	str	r3, [r4, #0]
 800b16e:	2000      	movs	r0, #0
 800b170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b174:	462a      	mov	r2, r5
 800b176:	f000 fad7 	bl	800b728 <_realloc_r>
 800b17a:	4606      	mov	r6, r0
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d1e0      	bne.n	800b142 <__ssputs_r+0x5a>
 800b180:	6921      	ldr	r1, [r4, #16]
 800b182:	4650      	mov	r0, sl
 800b184:	f7ff feb8 	bl	800aef8 <_free_r>
 800b188:	230c      	movs	r3, #12
 800b18a:	f8ca 3000 	str.w	r3, [sl]
 800b18e:	89a3      	ldrh	r3, [r4, #12]
 800b190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b194:	81a3      	strh	r3, [r4, #12]
 800b196:	f04f 30ff 	mov.w	r0, #4294967295
 800b19a:	e7e9      	b.n	800b170 <__ssputs_r+0x88>

0800b19c <_svfiprintf_r>:
 800b19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a0:	4698      	mov	r8, r3
 800b1a2:	898b      	ldrh	r3, [r1, #12]
 800b1a4:	061b      	lsls	r3, r3, #24
 800b1a6:	b09d      	sub	sp, #116	; 0x74
 800b1a8:	4607      	mov	r7, r0
 800b1aa:	460d      	mov	r5, r1
 800b1ac:	4614      	mov	r4, r2
 800b1ae:	d50e      	bpl.n	800b1ce <_svfiprintf_r+0x32>
 800b1b0:	690b      	ldr	r3, [r1, #16]
 800b1b2:	b963      	cbnz	r3, 800b1ce <_svfiprintf_r+0x32>
 800b1b4:	2140      	movs	r1, #64	; 0x40
 800b1b6:	f7ff ff0b 	bl	800afd0 <_malloc_r>
 800b1ba:	6028      	str	r0, [r5, #0]
 800b1bc:	6128      	str	r0, [r5, #16]
 800b1be:	b920      	cbnz	r0, 800b1ca <_svfiprintf_r+0x2e>
 800b1c0:	230c      	movs	r3, #12
 800b1c2:	603b      	str	r3, [r7, #0]
 800b1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1c8:	e0d0      	b.n	800b36c <_svfiprintf_r+0x1d0>
 800b1ca:	2340      	movs	r3, #64	; 0x40
 800b1cc:	616b      	str	r3, [r5, #20]
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	9309      	str	r3, [sp, #36]	; 0x24
 800b1d2:	2320      	movs	r3, #32
 800b1d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1dc:	2330      	movs	r3, #48	; 0x30
 800b1de:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b384 <_svfiprintf_r+0x1e8>
 800b1e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1e6:	f04f 0901 	mov.w	r9, #1
 800b1ea:	4623      	mov	r3, r4
 800b1ec:	469a      	mov	sl, r3
 800b1ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1f2:	b10a      	cbz	r2, 800b1f8 <_svfiprintf_r+0x5c>
 800b1f4:	2a25      	cmp	r2, #37	; 0x25
 800b1f6:	d1f9      	bne.n	800b1ec <_svfiprintf_r+0x50>
 800b1f8:	ebba 0b04 	subs.w	fp, sl, r4
 800b1fc:	d00b      	beq.n	800b216 <_svfiprintf_r+0x7a>
 800b1fe:	465b      	mov	r3, fp
 800b200:	4622      	mov	r2, r4
 800b202:	4629      	mov	r1, r5
 800b204:	4638      	mov	r0, r7
 800b206:	f7ff ff6f 	bl	800b0e8 <__ssputs_r>
 800b20a:	3001      	adds	r0, #1
 800b20c:	f000 80a9 	beq.w	800b362 <_svfiprintf_r+0x1c6>
 800b210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b212:	445a      	add	r2, fp
 800b214:	9209      	str	r2, [sp, #36]	; 0x24
 800b216:	f89a 3000 	ldrb.w	r3, [sl]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	f000 80a1 	beq.w	800b362 <_svfiprintf_r+0x1c6>
 800b220:	2300      	movs	r3, #0
 800b222:	f04f 32ff 	mov.w	r2, #4294967295
 800b226:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b22a:	f10a 0a01 	add.w	sl, sl, #1
 800b22e:	9304      	str	r3, [sp, #16]
 800b230:	9307      	str	r3, [sp, #28]
 800b232:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b236:	931a      	str	r3, [sp, #104]	; 0x68
 800b238:	4654      	mov	r4, sl
 800b23a:	2205      	movs	r2, #5
 800b23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b240:	4850      	ldr	r0, [pc, #320]	; (800b384 <_svfiprintf_r+0x1e8>)
 800b242:	f7f4 ffed 	bl	8000220 <memchr>
 800b246:	9a04      	ldr	r2, [sp, #16]
 800b248:	b9d8      	cbnz	r0, 800b282 <_svfiprintf_r+0xe6>
 800b24a:	06d0      	lsls	r0, r2, #27
 800b24c:	bf44      	itt	mi
 800b24e:	2320      	movmi	r3, #32
 800b250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b254:	0711      	lsls	r1, r2, #28
 800b256:	bf44      	itt	mi
 800b258:	232b      	movmi	r3, #43	; 0x2b
 800b25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b25e:	f89a 3000 	ldrb.w	r3, [sl]
 800b262:	2b2a      	cmp	r3, #42	; 0x2a
 800b264:	d015      	beq.n	800b292 <_svfiprintf_r+0xf6>
 800b266:	9a07      	ldr	r2, [sp, #28]
 800b268:	4654      	mov	r4, sl
 800b26a:	2000      	movs	r0, #0
 800b26c:	f04f 0c0a 	mov.w	ip, #10
 800b270:	4621      	mov	r1, r4
 800b272:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b276:	3b30      	subs	r3, #48	; 0x30
 800b278:	2b09      	cmp	r3, #9
 800b27a:	d94d      	bls.n	800b318 <_svfiprintf_r+0x17c>
 800b27c:	b1b0      	cbz	r0, 800b2ac <_svfiprintf_r+0x110>
 800b27e:	9207      	str	r2, [sp, #28]
 800b280:	e014      	b.n	800b2ac <_svfiprintf_r+0x110>
 800b282:	eba0 0308 	sub.w	r3, r0, r8
 800b286:	fa09 f303 	lsl.w	r3, r9, r3
 800b28a:	4313      	orrs	r3, r2
 800b28c:	9304      	str	r3, [sp, #16]
 800b28e:	46a2      	mov	sl, r4
 800b290:	e7d2      	b.n	800b238 <_svfiprintf_r+0x9c>
 800b292:	9b03      	ldr	r3, [sp, #12]
 800b294:	1d19      	adds	r1, r3, #4
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	9103      	str	r1, [sp, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	bfbb      	ittet	lt
 800b29e:	425b      	neglt	r3, r3
 800b2a0:	f042 0202 	orrlt.w	r2, r2, #2
 800b2a4:	9307      	strge	r3, [sp, #28]
 800b2a6:	9307      	strlt	r3, [sp, #28]
 800b2a8:	bfb8      	it	lt
 800b2aa:	9204      	strlt	r2, [sp, #16]
 800b2ac:	7823      	ldrb	r3, [r4, #0]
 800b2ae:	2b2e      	cmp	r3, #46	; 0x2e
 800b2b0:	d10c      	bne.n	800b2cc <_svfiprintf_r+0x130>
 800b2b2:	7863      	ldrb	r3, [r4, #1]
 800b2b4:	2b2a      	cmp	r3, #42	; 0x2a
 800b2b6:	d134      	bne.n	800b322 <_svfiprintf_r+0x186>
 800b2b8:	9b03      	ldr	r3, [sp, #12]
 800b2ba:	1d1a      	adds	r2, r3, #4
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	9203      	str	r2, [sp, #12]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	bfb8      	it	lt
 800b2c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2c8:	3402      	adds	r4, #2
 800b2ca:	9305      	str	r3, [sp, #20]
 800b2cc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b394 <_svfiprintf_r+0x1f8>
 800b2d0:	7821      	ldrb	r1, [r4, #0]
 800b2d2:	2203      	movs	r2, #3
 800b2d4:	4650      	mov	r0, sl
 800b2d6:	f7f4 ffa3 	bl	8000220 <memchr>
 800b2da:	b138      	cbz	r0, 800b2ec <_svfiprintf_r+0x150>
 800b2dc:	9b04      	ldr	r3, [sp, #16]
 800b2de:	eba0 000a 	sub.w	r0, r0, sl
 800b2e2:	2240      	movs	r2, #64	; 0x40
 800b2e4:	4082      	lsls	r2, r0
 800b2e6:	4313      	orrs	r3, r2
 800b2e8:	3401      	adds	r4, #1
 800b2ea:	9304      	str	r3, [sp, #16]
 800b2ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2f0:	4825      	ldr	r0, [pc, #148]	; (800b388 <_svfiprintf_r+0x1ec>)
 800b2f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2f6:	2206      	movs	r2, #6
 800b2f8:	f7f4 ff92 	bl	8000220 <memchr>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d038      	beq.n	800b372 <_svfiprintf_r+0x1d6>
 800b300:	4b22      	ldr	r3, [pc, #136]	; (800b38c <_svfiprintf_r+0x1f0>)
 800b302:	bb1b      	cbnz	r3, 800b34c <_svfiprintf_r+0x1b0>
 800b304:	9b03      	ldr	r3, [sp, #12]
 800b306:	3307      	adds	r3, #7
 800b308:	f023 0307 	bic.w	r3, r3, #7
 800b30c:	3308      	adds	r3, #8
 800b30e:	9303      	str	r3, [sp, #12]
 800b310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b312:	4433      	add	r3, r6
 800b314:	9309      	str	r3, [sp, #36]	; 0x24
 800b316:	e768      	b.n	800b1ea <_svfiprintf_r+0x4e>
 800b318:	fb0c 3202 	mla	r2, ip, r2, r3
 800b31c:	460c      	mov	r4, r1
 800b31e:	2001      	movs	r0, #1
 800b320:	e7a6      	b.n	800b270 <_svfiprintf_r+0xd4>
 800b322:	2300      	movs	r3, #0
 800b324:	3401      	adds	r4, #1
 800b326:	9305      	str	r3, [sp, #20]
 800b328:	4619      	mov	r1, r3
 800b32a:	f04f 0c0a 	mov.w	ip, #10
 800b32e:	4620      	mov	r0, r4
 800b330:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b334:	3a30      	subs	r2, #48	; 0x30
 800b336:	2a09      	cmp	r2, #9
 800b338:	d903      	bls.n	800b342 <_svfiprintf_r+0x1a6>
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d0c6      	beq.n	800b2cc <_svfiprintf_r+0x130>
 800b33e:	9105      	str	r1, [sp, #20]
 800b340:	e7c4      	b.n	800b2cc <_svfiprintf_r+0x130>
 800b342:	fb0c 2101 	mla	r1, ip, r1, r2
 800b346:	4604      	mov	r4, r0
 800b348:	2301      	movs	r3, #1
 800b34a:	e7f0      	b.n	800b32e <_svfiprintf_r+0x192>
 800b34c:	ab03      	add	r3, sp, #12
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	462a      	mov	r2, r5
 800b352:	4b0f      	ldr	r3, [pc, #60]	; (800b390 <_svfiprintf_r+0x1f4>)
 800b354:	a904      	add	r1, sp, #16
 800b356:	4638      	mov	r0, r7
 800b358:	f3af 8000 	nop.w
 800b35c:	1c42      	adds	r2, r0, #1
 800b35e:	4606      	mov	r6, r0
 800b360:	d1d6      	bne.n	800b310 <_svfiprintf_r+0x174>
 800b362:	89ab      	ldrh	r3, [r5, #12]
 800b364:	065b      	lsls	r3, r3, #25
 800b366:	f53f af2d 	bmi.w	800b1c4 <_svfiprintf_r+0x28>
 800b36a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b36c:	b01d      	add	sp, #116	; 0x74
 800b36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b372:	ab03      	add	r3, sp, #12
 800b374:	9300      	str	r3, [sp, #0]
 800b376:	462a      	mov	r2, r5
 800b378:	4b05      	ldr	r3, [pc, #20]	; (800b390 <_svfiprintf_r+0x1f4>)
 800b37a:	a904      	add	r1, sp, #16
 800b37c:	4638      	mov	r0, r7
 800b37e:	f000 f879 	bl	800b474 <_printf_i>
 800b382:	e7eb      	b.n	800b35c <_svfiprintf_r+0x1c0>
 800b384:	080436d0 	.word	0x080436d0
 800b388:	080436da 	.word	0x080436da
 800b38c:	00000000 	.word	0x00000000
 800b390:	0800b0e9 	.word	0x0800b0e9
 800b394:	080436d6 	.word	0x080436d6

0800b398 <_printf_common>:
 800b398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b39c:	4616      	mov	r6, r2
 800b39e:	4699      	mov	r9, r3
 800b3a0:	688a      	ldr	r2, [r1, #8]
 800b3a2:	690b      	ldr	r3, [r1, #16]
 800b3a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	bfb8      	it	lt
 800b3ac:	4613      	movlt	r3, r2
 800b3ae:	6033      	str	r3, [r6, #0]
 800b3b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3b4:	4607      	mov	r7, r0
 800b3b6:	460c      	mov	r4, r1
 800b3b8:	b10a      	cbz	r2, 800b3be <_printf_common+0x26>
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	6033      	str	r3, [r6, #0]
 800b3be:	6823      	ldr	r3, [r4, #0]
 800b3c0:	0699      	lsls	r1, r3, #26
 800b3c2:	bf42      	ittt	mi
 800b3c4:	6833      	ldrmi	r3, [r6, #0]
 800b3c6:	3302      	addmi	r3, #2
 800b3c8:	6033      	strmi	r3, [r6, #0]
 800b3ca:	6825      	ldr	r5, [r4, #0]
 800b3cc:	f015 0506 	ands.w	r5, r5, #6
 800b3d0:	d106      	bne.n	800b3e0 <_printf_common+0x48>
 800b3d2:	f104 0a19 	add.w	sl, r4, #25
 800b3d6:	68e3      	ldr	r3, [r4, #12]
 800b3d8:	6832      	ldr	r2, [r6, #0]
 800b3da:	1a9b      	subs	r3, r3, r2
 800b3dc:	42ab      	cmp	r3, r5
 800b3de:	dc26      	bgt.n	800b42e <_printf_common+0x96>
 800b3e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3e4:	1e13      	subs	r3, r2, #0
 800b3e6:	6822      	ldr	r2, [r4, #0]
 800b3e8:	bf18      	it	ne
 800b3ea:	2301      	movne	r3, #1
 800b3ec:	0692      	lsls	r2, r2, #26
 800b3ee:	d42b      	bmi.n	800b448 <_printf_common+0xb0>
 800b3f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	47c0      	blx	r8
 800b3fa:	3001      	adds	r0, #1
 800b3fc:	d01e      	beq.n	800b43c <_printf_common+0xa4>
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	6922      	ldr	r2, [r4, #16]
 800b402:	f003 0306 	and.w	r3, r3, #6
 800b406:	2b04      	cmp	r3, #4
 800b408:	bf02      	ittt	eq
 800b40a:	68e5      	ldreq	r5, [r4, #12]
 800b40c:	6833      	ldreq	r3, [r6, #0]
 800b40e:	1aed      	subeq	r5, r5, r3
 800b410:	68a3      	ldr	r3, [r4, #8]
 800b412:	bf0c      	ite	eq
 800b414:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b418:	2500      	movne	r5, #0
 800b41a:	4293      	cmp	r3, r2
 800b41c:	bfc4      	itt	gt
 800b41e:	1a9b      	subgt	r3, r3, r2
 800b420:	18ed      	addgt	r5, r5, r3
 800b422:	2600      	movs	r6, #0
 800b424:	341a      	adds	r4, #26
 800b426:	42b5      	cmp	r5, r6
 800b428:	d11a      	bne.n	800b460 <_printf_common+0xc8>
 800b42a:	2000      	movs	r0, #0
 800b42c:	e008      	b.n	800b440 <_printf_common+0xa8>
 800b42e:	2301      	movs	r3, #1
 800b430:	4652      	mov	r2, sl
 800b432:	4649      	mov	r1, r9
 800b434:	4638      	mov	r0, r7
 800b436:	47c0      	blx	r8
 800b438:	3001      	adds	r0, #1
 800b43a:	d103      	bne.n	800b444 <_printf_common+0xac>
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b444:	3501      	adds	r5, #1
 800b446:	e7c6      	b.n	800b3d6 <_printf_common+0x3e>
 800b448:	18e1      	adds	r1, r4, r3
 800b44a:	1c5a      	adds	r2, r3, #1
 800b44c:	2030      	movs	r0, #48	; 0x30
 800b44e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b452:	4422      	add	r2, r4
 800b454:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b458:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b45c:	3302      	adds	r3, #2
 800b45e:	e7c7      	b.n	800b3f0 <_printf_common+0x58>
 800b460:	2301      	movs	r3, #1
 800b462:	4622      	mov	r2, r4
 800b464:	4649      	mov	r1, r9
 800b466:	4638      	mov	r0, r7
 800b468:	47c0      	blx	r8
 800b46a:	3001      	adds	r0, #1
 800b46c:	d0e6      	beq.n	800b43c <_printf_common+0xa4>
 800b46e:	3601      	adds	r6, #1
 800b470:	e7d9      	b.n	800b426 <_printf_common+0x8e>
	...

0800b474 <_printf_i>:
 800b474:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b478:	7e0f      	ldrb	r7, [r1, #24]
 800b47a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b47c:	2f78      	cmp	r7, #120	; 0x78
 800b47e:	4691      	mov	r9, r2
 800b480:	4680      	mov	r8, r0
 800b482:	460c      	mov	r4, r1
 800b484:	469a      	mov	sl, r3
 800b486:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b48a:	d807      	bhi.n	800b49c <_printf_i+0x28>
 800b48c:	2f62      	cmp	r7, #98	; 0x62
 800b48e:	d80a      	bhi.n	800b4a6 <_printf_i+0x32>
 800b490:	2f00      	cmp	r7, #0
 800b492:	f000 80d4 	beq.w	800b63e <_printf_i+0x1ca>
 800b496:	2f58      	cmp	r7, #88	; 0x58
 800b498:	f000 80c0 	beq.w	800b61c <_printf_i+0x1a8>
 800b49c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b4a4:	e03a      	b.n	800b51c <_printf_i+0xa8>
 800b4a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b4aa:	2b15      	cmp	r3, #21
 800b4ac:	d8f6      	bhi.n	800b49c <_printf_i+0x28>
 800b4ae:	a101      	add	r1, pc, #4	; (adr r1, 800b4b4 <_printf_i+0x40>)
 800b4b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4b4:	0800b50d 	.word	0x0800b50d
 800b4b8:	0800b521 	.word	0x0800b521
 800b4bc:	0800b49d 	.word	0x0800b49d
 800b4c0:	0800b49d 	.word	0x0800b49d
 800b4c4:	0800b49d 	.word	0x0800b49d
 800b4c8:	0800b49d 	.word	0x0800b49d
 800b4cc:	0800b521 	.word	0x0800b521
 800b4d0:	0800b49d 	.word	0x0800b49d
 800b4d4:	0800b49d 	.word	0x0800b49d
 800b4d8:	0800b49d 	.word	0x0800b49d
 800b4dc:	0800b49d 	.word	0x0800b49d
 800b4e0:	0800b625 	.word	0x0800b625
 800b4e4:	0800b54d 	.word	0x0800b54d
 800b4e8:	0800b5df 	.word	0x0800b5df
 800b4ec:	0800b49d 	.word	0x0800b49d
 800b4f0:	0800b49d 	.word	0x0800b49d
 800b4f4:	0800b647 	.word	0x0800b647
 800b4f8:	0800b49d 	.word	0x0800b49d
 800b4fc:	0800b54d 	.word	0x0800b54d
 800b500:	0800b49d 	.word	0x0800b49d
 800b504:	0800b49d 	.word	0x0800b49d
 800b508:	0800b5e7 	.word	0x0800b5e7
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	1d1a      	adds	r2, r3, #4
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	602a      	str	r2, [r5, #0]
 800b514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b51c:	2301      	movs	r3, #1
 800b51e:	e09f      	b.n	800b660 <_printf_i+0x1ec>
 800b520:	6820      	ldr	r0, [r4, #0]
 800b522:	682b      	ldr	r3, [r5, #0]
 800b524:	0607      	lsls	r7, r0, #24
 800b526:	f103 0104 	add.w	r1, r3, #4
 800b52a:	6029      	str	r1, [r5, #0]
 800b52c:	d501      	bpl.n	800b532 <_printf_i+0xbe>
 800b52e:	681e      	ldr	r6, [r3, #0]
 800b530:	e003      	b.n	800b53a <_printf_i+0xc6>
 800b532:	0646      	lsls	r6, r0, #25
 800b534:	d5fb      	bpl.n	800b52e <_printf_i+0xba>
 800b536:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b53a:	2e00      	cmp	r6, #0
 800b53c:	da03      	bge.n	800b546 <_printf_i+0xd2>
 800b53e:	232d      	movs	r3, #45	; 0x2d
 800b540:	4276      	negs	r6, r6
 800b542:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b546:	485a      	ldr	r0, [pc, #360]	; (800b6b0 <_printf_i+0x23c>)
 800b548:	230a      	movs	r3, #10
 800b54a:	e012      	b.n	800b572 <_printf_i+0xfe>
 800b54c:	682b      	ldr	r3, [r5, #0]
 800b54e:	6820      	ldr	r0, [r4, #0]
 800b550:	1d19      	adds	r1, r3, #4
 800b552:	6029      	str	r1, [r5, #0]
 800b554:	0605      	lsls	r5, r0, #24
 800b556:	d501      	bpl.n	800b55c <_printf_i+0xe8>
 800b558:	681e      	ldr	r6, [r3, #0]
 800b55a:	e002      	b.n	800b562 <_printf_i+0xee>
 800b55c:	0641      	lsls	r1, r0, #25
 800b55e:	d5fb      	bpl.n	800b558 <_printf_i+0xe4>
 800b560:	881e      	ldrh	r6, [r3, #0]
 800b562:	4853      	ldr	r0, [pc, #332]	; (800b6b0 <_printf_i+0x23c>)
 800b564:	2f6f      	cmp	r7, #111	; 0x6f
 800b566:	bf0c      	ite	eq
 800b568:	2308      	moveq	r3, #8
 800b56a:	230a      	movne	r3, #10
 800b56c:	2100      	movs	r1, #0
 800b56e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b572:	6865      	ldr	r5, [r4, #4]
 800b574:	60a5      	str	r5, [r4, #8]
 800b576:	2d00      	cmp	r5, #0
 800b578:	bfa2      	ittt	ge
 800b57a:	6821      	ldrge	r1, [r4, #0]
 800b57c:	f021 0104 	bicge.w	r1, r1, #4
 800b580:	6021      	strge	r1, [r4, #0]
 800b582:	b90e      	cbnz	r6, 800b588 <_printf_i+0x114>
 800b584:	2d00      	cmp	r5, #0
 800b586:	d04b      	beq.n	800b620 <_printf_i+0x1ac>
 800b588:	4615      	mov	r5, r2
 800b58a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b58e:	fb03 6711 	mls	r7, r3, r1, r6
 800b592:	5dc7      	ldrb	r7, [r0, r7]
 800b594:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b598:	4637      	mov	r7, r6
 800b59a:	42bb      	cmp	r3, r7
 800b59c:	460e      	mov	r6, r1
 800b59e:	d9f4      	bls.n	800b58a <_printf_i+0x116>
 800b5a0:	2b08      	cmp	r3, #8
 800b5a2:	d10b      	bne.n	800b5bc <_printf_i+0x148>
 800b5a4:	6823      	ldr	r3, [r4, #0]
 800b5a6:	07de      	lsls	r6, r3, #31
 800b5a8:	d508      	bpl.n	800b5bc <_printf_i+0x148>
 800b5aa:	6923      	ldr	r3, [r4, #16]
 800b5ac:	6861      	ldr	r1, [r4, #4]
 800b5ae:	4299      	cmp	r1, r3
 800b5b0:	bfde      	ittt	le
 800b5b2:	2330      	movle	r3, #48	; 0x30
 800b5b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5bc:	1b52      	subs	r2, r2, r5
 800b5be:	6122      	str	r2, [r4, #16]
 800b5c0:	f8cd a000 	str.w	sl, [sp]
 800b5c4:	464b      	mov	r3, r9
 800b5c6:	aa03      	add	r2, sp, #12
 800b5c8:	4621      	mov	r1, r4
 800b5ca:	4640      	mov	r0, r8
 800b5cc:	f7ff fee4 	bl	800b398 <_printf_common>
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	d14a      	bne.n	800b66a <_printf_i+0x1f6>
 800b5d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d8:	b004      	add	sp, #16
 800b5da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5de:	6823      	ldr	r3, [r4, #0]
 800b5e0:	f043 0320 	orr.w	r3, r3, #32
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	4833      	ldr	r0, [pc, #204]	; (800b6b4 <_printf_i+0x240>)
 800b5e8:	2778      	movs	r7, #120	; 0x78
 800b5ea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b5ee:	6823      	ldr	r3, [r4, #0]
 800b5f0:	6829      	ldr	r1, [r5, #0]
 800b5f2:	061f      	lsls	r7, r3, #24
 800b5f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5f8:	d402      	bmi.n	800b600 <_printf_i+0x18c>
 800b5fa:	065f      	lsls	r7, r3, #25
 800b5fc:	bf48      	it	mi
 800b5fe:	b2b6      	uxthmi	r6, r6
 800b600:	07df      	lsls	r7, r3, #31
 800b602:	bf48      	it	mi
 800b604:	f043 0320 	orrmi.w	r3, r3, #32
 800b608:	6029      	str	r1, [r5, #0]
 800b60a:	bf48      	it	mi
 800b60c:	6023      	strmi	r3, [r4, #0]
 800b60e:	b91e      	cbnz	r6, 800b618 <_printf_i+0x1a4>
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	f023 0320 	bic.w	r3, r3, #32
 800b616:	6023      	str	r3, [r4, #0]
 800b618:	2310      	movs	r3, #16
 800b61a:	e7a7      	b.n	800b56c <_printf_i+0xf8>
 800b61c:	4824      	ldr	r0, [pc, #144]	; (800b6b0 <_printf_i+0x23c>)
 800b61e:	e7e4      	b.n	800b5ea <_printf_i+0x176>
 800b620:	4615      	mov	r5, r2
 800b622:	e7bd      	b.n	800b5a0 <_printf_i+0x12c>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	6826      	ldr	r6, [r4, #0]
 800b628:	6961      	ldr	r1, [r4, #20]
 800b62a:	1d18      	adds	r0, r3, #4
 800b62c:	6028      	str	r0, [r5, #0]
 800b62e:	0635      	lsls	r5, r6, #24
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	d501      	bpl.n	800b638 <_printf_i+0x1c4>
 800b634:	6019      	str	r1, [r3, #0]
 800b636:	e002      	b.n	800b63e <_printf_i+0x1ca>
 800b638:	0670      	lsls	r0, r6, #25
 800b63a:	d5fb      	bpl.n	800b634 <_printf_i+0x1c0>
 800b63c:	8019      	strh	r1, [r3, #0]
 800b63e:	2300      	movs	r3, #0
 800b640:	6123      	str	r3, [r4, #16]
 800b642:	4615      	mov	r5, r2
 800b644:	e7bc      	b.n	800b5c0 <_printf_i+0x14c>
 800b646:	682b      	ldr	r3, [r5, #0]
 800b648:	1d1a      	adds	r2, r3, #4
 800b64a:	602a      	str	r2, [r5, #0]
 800b64c:	681d      	ldr	r5, [r3, #0]
 800b64e:	6862      	ldr	r2, [r4, #4]
 800b650:	2100      	movs	r1, #0
 800b652:	4628      	mov	r0, r5
 800b654:	f7f4 fde4 	bl	8000220 <memchr>
 800b658:	b108      	cbz	r0, 800b65e <_printf_i+0x1ea>
 800b65a:	1b40      	subs	r0, r0, r5
 800b65c:	6060      	str	r0, [r4, #4]
 800b65e:	6863      	ldr	r3, [r4, #4]
 800b660:	6123      	str	r3, [r4, #16]
 800b662:	2300      	movs	r3, #0
 800b664:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b668:	e7aa      	b.n	800b5c0 <_printf_i+0x14c>
 800b66a:	6923      	ldr	r3, [r4, #16]
 800b66c:	462a      	mov	r2, r5
 800b66e:	4649      	mov	r1, r9
 800b670:	4640      	mov	r0, r8
 800b672:	47d0      	blx	sl
 800b674:	3001      	adds	r0, #1
 800b676:	d0ad      	beq.n	800b5d4 <_printf_i+0x160>
 800b678:	6823      	ldr	r3, [r4, #0]
 800b67a:	079b      	lsls	r3, r3, #30
 800b67c:	d413      	bmi.n	800b6a6 <_printf_i+0x232>
 800b67e:	68e0      	ldr	r0, [r4, #12]
 800b680:	9b03      	ldr	r3, [sp, #12]
 800b682:	4298      	cmp	r0, r3
 800b684:	bfb8      	it	lt
 800b686:	4618      	movlt	r0, r3
 800b688:	e7a6      	b.n	800b5d8 <_printf_i+0x164>
 800b68a:	2301      	movs	r3, #1
 800b68c:	4632      	mov	r2, r6
 800b68e:	4649      	mov	r1, r9
 800b690:	4640      	mov	r0, r8
 800b692:	47d0      	blx	sl
 800b694:	3001      	adds	r0, #1
 800b696:	d09d      	beq.n	800b5d4 <_printf_i+0x160>
 800b698:	3501      	adds	r5, #1
 800b69a:	68e3      	ldr	r3, [r4, #12]
 800b69c:	9903      	ldr	r1, [sp, #12]
 800b69e:	1a5b      	subs	r3, r3, r1
 800b6a0:	42ab      	cmp	r3, r5
 800b6a2:	dcf2      	bgt.n	800b68a <_printf_i+0x216>
 800b6a4:	e7eb      	b.n	800b67e <_printf_i+0x20a>
 800b6a6:	2500      	movs	r5, #0
 800b6a8:	f104 0619 	add.w	r6, r4, #25
 800b6ac:	e7f5      	b.n	800b69a <_printf_i+0x226>
 800b6ae:	bf00      	nop
 800b6b0:	080436e1 	.word	0x080436e1
 800b6b4:	080436f2 	.word	0x080436f2

0800b6b8 <memmove>:
 800b6b8:	4288      	cmp	r0, r1
 800b6ba:	b510      	push	{r4, lr}
 800b6bc:	eb01 0402 	add.w	r4, r1, r2
 800b6c0:	d902      	bls.n	800b6c8 <memmove+0x10>
 800b6c2:	4284      	cmp	r4, r0
 800b6c4:	4623      	mov	r3, r4
 800b6c6:	d807      	bhi.n	800b6d8 <memmove+0x20>
 800b6c8:	1e43      	subs	r3, r0, #1
 800b6ca:	42a1      	cmp	r1, r4
 800b6cc:	d008      	beq.n	800b6e0 <memmove+0x28>
 800b6ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b6d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b6d6:	e7f8      	b.n	800b6ca <memmove+0x12>
 800b6d8:	4402      	add	r2, r0
 800b6da:	4601      	mov	r1, r0
 800b6dc:	428a      	cmp	r2, r1
 800b6de:	d100      	bne.n	800b6e2 <memmove+0x2a>
 800b6e0:	bd10      	pop	{r4, pc}
 800b6e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6ea:	e7f7      	b.n	800b6dc <memmove+0x24>

0800b6ec <_sbrk_r>:
 800b6ec:	b538      	push	{r3, r4, r5, lr}
 800b6ee:	4d06      	ldr	r5, [pc, #24]	; (800b708 <_sbrk_r+0x1c>)
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	4604      	mov	r4, r0
 800b6f4:	4608      	mov	r0, r1
 800b6f6:	602b      	str	r3, [r5, #0]
 800b6f8:	f7f8 fd30 	bl	800415c <_sbrk>
 800b6fc:	1c43      	adds	r3, r0, #1
 800b6fe:	d102      	bne.n	800b706 <_sbrk_r+0x1a>
 800b700:	682b      	ldr	r3, [r5, #0]
 800b702:	b103      	cbz	r3, 800b706 <_sbrk_r+0x1a>
 800b704:	6023      	str	r3, [r4, #0]
 800b706:	bd38      	pop	{r3, r4, r5, pc}
 800b708:	20000b54 	.word	0x20000b54

0800b70c <memcpy>:
 800b70c:	440a      	add	r2, r1
 800b70e:	4291      	cmp	r1, r2
 800b710:	f100 33ff 	add.w	r3, r0, #4294967295
 800b714:	d100      	bne.n	800b718 <memcpy+0xc>
 800b716:	4770      	bx	lr
 800b718:	b510      	push	{r4, lr}
 800b71a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b71e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b722:	4291      	cmp	r1, r2
 800b724:	d1f9      	bne.n	800b71a <memcpy+0xe>
 800b726:	bd10      	pop	{r4, pc}

0800b728 <_realloc_r>:
 800b728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b72c:	4680      	mov	r8, r0
 800b72e:	4614      	mov	r4, r2
 800b730:	460e      	mov	r6, r1
 800b732:	b921      	cbnz	r1, 800b73e <_realloc_r+0x16>
 800b734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b738:	4611      	mov	r1, r2
 800b73a:	f7ff bc49 	b.w	800afd0 <_malloc_r>
 800b73e:	b92a      	cbnz	r2, 800b74c <_realloc_r+0x24>
 800b740:	f7ff fbda 	bl	800aef8 <_free_r>
 800b744:	4625      	mov	r5, r4
 800b746:	4628      	mov	r0, r5
 800b748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b74c:	f000 f81b 	bl	800b786 <_malloc_usable_size_r>
 800b750:	4284      	cmp	r4, r0
 800b752:	4607      	mov	r7, r0
 800b754:	d802      	bhi.n	800b75c <_realloc_r+0x34>
 800b756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b75a:	d812      	bhi.n	800b782 <_realloc_r+0x5a>
 800b75c:	4621      	mov	r1, r4
 800b75e:	4640      	mov	r0, r8
 800b760:	f7ff fc36 	bl	800afd0 <_malloc_r>
 800b764:	4605      	mov	r5, r0
 800b766:	2800      	cmp	r0, #0
 800b768:	d0ed      	beq.n	800b746 <_realloc_r+0x1e>
 800b76a:	42bc      	cmp	r4, r7
 800b76c:	4622      	mov	r2, r4
 800b76e:	4631      	mov	r1, r6
 800b770:	bf28      	it	cs
 800b772:	463a      	movcs	r2, r7
 800b774:	f7ff ffca 	bl	800b70c <memcpy>
 800b778:	4631      	mov	r1, r6
 800b77a:	4640      	mov	r0, r8
 800b77c:	f7ff fbbc 	bl	800aef8 <_free_r>
 800b780:	e7e1      	b.n	800b746 <_realloc_r+0x1e>
 800b782:	4635      	mov	r5, r6
 800b784:	e7df      	b.n	800b746 <_realloc_r+0x1e>

0800b786 <_malloc_usable_size_r>:
 800b786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b78a:	1f18      	subs	r0, r3, #4
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	bfbc      	itt	lt
 800b790:	580b      	ldrlt	r3, [r1, r0]
 800b792:	18c0      	addlt	r0, r0, r3
 800b794:	4770      	bx	lr
	...

0800b798 <_init>:
 800b798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b79a:	bf00      	nop
 800b79c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b79e:	bc08      	pop	{r3}
 800b7a0:	469e      	mov	lr, r3
 800b7a2:	4770      	bx	lr

0800b7a4 <_fini>:
 800b7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7a6:	bf00      	nop
 800b7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7aa:	bc08      	pop	{r3}
 800b7ac:	469e      	mov	lr, r3
 800b7ae:	4770      	bx	lr
